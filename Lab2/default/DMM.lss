
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00002694  00002728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800242  00800242  0000286a  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000849  00000000  00000000  00002a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003814  00000000  00000000  00003293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001866  00000000  00000000  00006aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023a1  00000000  00000000  0000830d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  0000a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008af  00000000  00000000  0000aad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012ba  00000000  00000000  0000b37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_12>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_15>
      40:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_16>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      58:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      60:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      64:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      68:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      6c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000070 <LCDBlank>:
      70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000082 <LCDHelloTop>:
      82:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000094 <LCDHelloBot>:
      94:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000a6 <LCDRange>:
      a6:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

000000af <LCDAutorangeOn>:
      af:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000be <LCD5Volts>:
      be:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000c7 <LCD256Volts>:
      c7:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000d3 <LCD11Volts>:
      d3:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000de <LCD1kOhm>:
      de:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000e6 <LCD10kOhm>:
      e6:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000ef <LCD100kOhm>:
      ef:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000f9 <LCD1kHz>:
      f9:	31 20 6b 48 5a 00 00                                1 kHZ..

00000100 <LCD10kHz>:
     100:	31 30 20 6b 48 5a 00 00                             10 kHZ..

00000108 <LCDMode>:
     108:	4d 4f 44 45 3a 20 00 00                             MODE: ..

00000110 <LCDVolt>:
     110:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000011c <LCDOhm>:
     11c:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000126 <LCDFreq>:
     126:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

00000131 <LCDManWelcomeTop>:
     131:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000013c <LCDManWelcomeBot>:
     13c:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

0000014b <LCDNavigation1Top>:
     14b:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000015d <LCDNavigation1Bot>:
     15d:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000016f <LCDNavigation2Top>:
     16f:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

00000180 <LCDNavigation2Bot>:
     180:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000018f <LCDVoltManTop>:
     18f:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

000001a0 <LCDVoltManBot>:
     1a0:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

000001ab <LCDOhmManTop>:
     1ab:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001bb <LCDOhmManBot>:
     1bb:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001c5 <LCDFreqManTop>:
     1c5:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001d6 <LCDFreqManBot>:
     1d6:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001e3 <LCDAutorangeMan1Top>:
     1e3:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001f0 <LCDAutorangeMan1Bot>:
     1f0:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001fb <LCDAutorangeMan2Top>:
     1fb:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

00000208 <LCDAutorangeMan2Bot>:
     208:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000219 <LcdCustomChar>:
     219:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     229:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     239:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     249:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     259:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     269:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     279:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     289:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     299:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     2a9:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2b9:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2c9:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2d9:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2e9:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2f9:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     309:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     319:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     329:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     339:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     349:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e1       	ldi	r29, 0x10	; 16
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	e4 e9       	ldi	r30, 0x94	; 148
     368:	f6 e2       	ldi	r31, 0x26	; 38
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	a2 34       	cpi	r26, 0x42	; 66
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a2 e4       	ldi	r26, 0x42	; 66
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a6 3c       	cpi	r26, 0xC6	; 198
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 06 06 	call	0xc0c	; 0xc0c <main>
     38a:	0c 94 48 13 	jmp	0x2690	; 0x2690 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <__vector_12>:
			ADCSRA |= (1<<ADSC);
		}
	}
}

ISR (TIMER1_CAPT_vect){
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
		//Set up the TIMERA prescalar
		TCCR1B &= ~0x07;
		TCCR1B |= TIMERAprescalars[rangeIdx];
	}
	*/
}
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_15>:

ISR (TIMER1_OVF_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
	
	//Set up the TIMERA prescalar
	TCCR1B &= ~0x07;
	TCCR1B |= TIMERAprescalars[rangeIdx];
	*/
}
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
	DDRD = 0x0f;
     3ba:	2f e0       	ldi	r18, 0x0F	; 15
     3bc:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     3be:	80 ef       	ldi	r24, 0xF0	; 240
     3c0:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c2:	9a e1       	ldi	r25, 0x1A	; 26
     3c4:	39 2f       	mov	r19, r25
     3c6:	3a 95       	dec	r19
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <ScanKeypad+0xc>
	_delay_us(5);
	key = PIND;
     3ca:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     3cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     3ce:	2b b9       	out	0x0b, r18	; 11
     3d0:	9a 95       	dec	r25
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <ScanKeypad+0x16>
	_delay_us(5);
	key = key | PIND;
     3d4:	29 b1       	in	r18, 0x09	; 9
     3d6:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff)
     3d8:	2f 3f       	cpi	r18, 0xFF	; 255
     3da:	61 f0       	breq	.+24     	; 0x3f4 <ScanKeypad+0x3a>
     3dc:	e1 e2       	ldi	r30, 0x21	; 33
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
		begin   
		if (keytbl[butnum]==key)  break;   
     3e2:	80 81       	ld	r24, Z
     3e4:	9f 5f       	subi	r25, 0xFF	; 255
     3e6:	82 17       	cp	r24, r18
     3e8:	11 f4       	brne	.+4      	; 0x3ee <ScanKeypad+0x34>
		end

		if (butnum==MAX_KEYS) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     3ea:	89 2f       	mov	r24, r25
     3ec:	08 95       	ret
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff)
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	90 31       	cpi	r25, 0x10	; 16
     3f2:	b9 f7       	brne	.-18     	; 0x3e2 <ScanKeypad+0x28>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	end
	else butnum=0;
	
	return butnum;
}
     3f6:	08 95       	ret

000003f8 <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     3f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ScanKeypad>
     3fc:	98 2f       	mov	r25, r24
	switch(keyState){
     3fe:	20 91 9a 02 	lds	r18, 0x029A
     402:	21 30       	cpi	r18, 0x01	; 1
     404:	89 f0       	breq	.+34     	; 0x428 <Debounce+0x30>
     406:	21 30       	cpi	r18, 0x01	; 1
     408:	20 f0       	brcs	.+8      	; 0x412 <Debounce+0x1a>
     40a:	22 30       	cpi	r18, 0x02	; 2
     40c:	09 f0       	breq	.+2      	; 0x410 <Debounce+0x18>
     40e:	51 c0       	rjmp	.+162    	; 0x4b2 <Debounce+0xba>
     410:	2f c0       	rjmp	.+94     	; 0x470 <Debounce+0x78>
	
	//in the RELEASED state: stay in this state if a key is not pressed
	//go to UNKNOWN if any key is pressed and reset the debounce countdown.
	case RELEASED:
		if (key){
     412:	88 23       	and	r24, r24
     414:	09 f4       	brne	.+2      	; 0x418 <Debounce+0x20>
     416:	4d c0       	rjmp	.+154    	; 0x4b2 <Debounce+0xba>
			keyState = UNKNOWN;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED;
     41e:	10 92 a6 02 	sts	0x02A6, r1
			debouncing = 1;
     422:	80 93 b7 02 	sts	0x02B7, r24
     426:	0e c0       	rjmp	.+28     	; 0x444 <Debounce+0x4c>

	//in the UNKNOWN state: go to released if the button is not down Update
	//pressedAndReleased if the button was previously pressed.
	//go to PUSHED if the button is down
	case UNKNOWN:
		if (key){
     428:	88 23       	and	r24, r24
     42a:	91 f0       	breq	.+36     	; 0x450 <Debounce+0x58>
			if (key == checkKey){
     42c:	80 91 b9 02 	lds	r24, 0x02B9
     430:	98 17       	cp	r25, r24
     432:	31 f4       	brne	.+12     	; 0x440 <Debounce+0x48>
				keyState = PUSHED;
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	80 93 9a 02 	sts	0x029A, r24
				prevKeyState = UNKNOWN;
     43a:	20 93 a6 02 	sts	0x02A6, r18
     43e:	15 c0       	rjmp	.+42     	; 0x46a <Debounce+0x72>
				debouncing = 0;
			}
			else {
				debouncing = 1;
     440:	20 93 b7 02 	sts	0x02B7, r18
				debounceTime = DEBOUNCE_TIME;
     444:	8e e1       	ldi	r24, 0x1E	; 30
     446:	80 93 b6 02 	sts	0x02B6, r24
				checkKey = key;
     44a:	90 93 b9 02 	sts	0x02B9, r25
     44e:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     450:	10 92 9a 02 	sts	0x029A, r1
			if (prevKeyState == PUSHED) {
     454:	80 91 a6 02 	lds	r24, 0x02A6
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	21 f4       	brne	.+8      	; 0x464 <Debounce+0x6c>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     45c:	80 91 b9 02 	lds	r24, 0x02B9
     460:	80 93 b5 02 	sts	0x02B5, r24
			}
			prevKeyState = UNKNOWN;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 a6 02 	sts	0x02A6, r24
			debouncing = 0;
     46a:	10 92 b7 02 	sts	0x02B7, r1
     46e:	08 95       	ret
		break;

	//in the PUSHED state go to UnKnown if the button is not down.
	//stay in PUSHED if the button is down
	case PUSHED:
		if (!key){
     470:	88 23       	and	r24, r24
     472:	59 f4       	brne	.+22     	; 0x48a <Debounce+0x92>
			keyState = UNKNOWN;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = PUSHED;
     47a:	20 93 a6 02 	sts	0x02A6, r18
			debouncing = 1;
     47e:	80 93 b7 02 	sts	0x02B7, r24
			debounceTime = DEBOUNCE_TIME;
     482:	8e e1       	ldi	r24, 0x1E	; 30
     484:	80 93 b6 02 	sts	0x02B6, r24
     488:	08 95       	ret
		}
		else if (key != checkKey){
     48a:	80 91 b9 02 	lds	r24, 0x02B9
     48e:	98 17       	cp	r25, r24
     490:	81 f0       	breq	.+32     	; 0x4b2 <Debounce+0xba>
			keyState = UNKNOWN;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED; //...???
     498:	10 92 a6 02 	sts	0x02A6, r1
			debouncing = 1;
     49c:	80 93 b7 02 	sts	0x02B7, r24
			debounceTime = DEBOUNCE_TIME;
     4a0:	8e e1       	ldi	r24, 0x1E	; 30
     4a2:	80 93 b6 02 	sts	0x02B6, r24
			curKey = checkKey;
     4a6:	80 91 b9 02 	lds	r24, 0x02B9
     4aa:	80 93 b5 02 	sts	0x02B5, r24
			checkKey = key;
     4ae:	90 93 b9 02 	sts	0x02B9, r25
     4b2:	08 95       	ret

000004b4 <getCurKey>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     4b4:	90 91 b5 02 	lds	r25, 0x02B5
	if (curKey){
     4b8:	80 91 b5 02 	lds	r24, 0x02B5
     4bc:	88 23       	and	r24, r24
     4be:	11 f0       	breq	.+4      	; 0x4c4 <getCurKey+0x10>
		curKey = 0;
     4c0:	10 92 b5 02 	sts	0x02B5, r1
	}
	return tmpKey;
}
     4c4:	89 2f       	mov	r24, r25
     4c6:	08 95       	ret

000004c8 <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     4c8:	90 91 bd 02 	lds	r25, 0x02BD
     4cc:	93 30       	cpi	r25, 0x03	; 3
     4ce:	c1 f1       	breq	.+112    	; 0x540 <UpdateManState+0x78>
     4d0:	94 30       	cpi	r25, 0x04	; 4
     4d2:	28 f4       	brcc	.+10     	; 0x4de <UpdateManState+0x16>
     4d4:	91 30       	cpi	r25, 0x01	; 1
     4d6:	99 f0       	breq	.+38     	; 0x4fe <UpdateManState+0x36>
     4d8:	92 30       	cpi	r25, 0x02	; 2
     4da:	30 f5       	brcc	.+76     	; 0x528 <UpdateManState+0x60>
     4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <UpdateManState+0x2e>
     4de:	95 30       	cpi	r25, 0x05	; 5
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <UpdateManState+0x1c>
     4e2:	40 c0       	rjmp	.+128    	; 0x564 <UpdateManState+0x9c>
     4e4:	95 30       	cpi	r25, 0x05	; 5
     4e6:	a8 f1       	brcs	.+106    	; 0x552 <UpdateManState+0x8a>
     4e8:	96 30       	cpi	r25, 0x06	; 6
     4ea:	09 f4       	brne	.+2      	; 0x4ee <UpdateManState+0x26>
     4ec:	44 c0       	rjmp	.+136    	; 0x576 <UpdateManState+0xae>
     4ee:	97 30       	cpi	r25, 0x07	; 7
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <UpdateManState+0x2c>
     4f2:	68 c0       	rjmp	.+208    	; 0x5c4 <UpdateManState+0xfc>
     4f4:	4a c0       	rjmp	.+148    	; 0x58a <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <UpdateManState+0x34>
     4fa:	64 c0       	rjmp	.+200    	; 0x5c4 <UpdateManState+0xfc>
     4fc:	19 c0       	rjmp	.+50     	; 0x530 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
		case NAVIGATION_1:
			if (key == 0x10){
     4fe:	80 31       	cpi	r24, 0x10	; 16
     500:	29 f4       	brne	.+10     	; 0x50c <UpdateManState+0x44>
				mode = returnMode;
     502:	80 91 ba 02 	lds	r24, 0x02BA
     506:	80 93 a4 02 	sts	0x02A4, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     50c:	8e 30       	cpi	r24, 0x0E	; 14
     50e:	19 f4       	brne	.+6      	; 0x516 <UpdateManState+0x4e>
				manPage = WELCOME;
     510:	10 92 bd 02 	sts	0x02BD, r1
     514:	06 c0       	rjmp	.+12     	; 0x522 <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     516:	8f 30       	cpi	r24, 0x0F	; 15
     518:	09 f0       	breq	.+2      	; 0x51c <UpdateManState+0x54>
     51a:	54 c0       	rjmp	.+168    	; 0x5c4 <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     522:	90 93 be 02 	sts	0x02BE, r25
     526:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	89 f1       	breq	.+98     	; 0x58e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     52c:	8e 30       	cpi	r24, 0x0E	; 14
     52e:	21 f4       	brne	.+8      	; 0x538 <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 bd 02 	sts	0x02BD, r24
     536:	38 c0       	rjmp	.+112    	; 0x5a8 <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     538:	8f 30       	cpi	r24, 0x0F	; 15
     53a:	09 f0       	breq	.+2      	; 0x53e <UpdateManState+0x76>
     53c:	43 c0       	rjmp	.+134    	; 0x5c4 <UpdateManState+0xfc>
     53e:	0d c0       	rjmp	.+26     	; 0x55a <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     540:	80 31       	cpi	r24, 0x10	; 16
     542:	29 f1       	breq	.+74     	; 0x58e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     544:	8e 30       	cpi	r24, 0x0E	; 14
     546:	11 f4       	brne	.+4      	; 0x54c <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	2b c0       	rjmp	.+86     	; 0x5a2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     54c:	8f 30       	cpi	r24, 0x0F	; 15
     54e:	d1 f5       	brne	.+116    	; 0x5c4 <UpdateManState+0xfc>
     550:	0d c0       	rjmp	.+26     	; 0x56c <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     552:	80 31       	cpi	r24, 0x10	; 16
     554:	e1 f0       	breq	.+56     	; 0x58e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     556:	8e 30       	cpi	r24, 0x0E	; 14
     558:	11 f4       	brne	.+4      	; 0x55e <UpdateManState+0x96>
				manPage = VOLT_MAN;
     55a:	83 e0       	ldi	r24, 0x03	; 3
     55c:	22 c0       	rjmp	.+68     	; 0x5a2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     55e:	8f 30       	cpi	r24, 0x0F	; 15
     560:	89 f5       	brne	.+98     	; 0x5c4 <UpdateManState+0xfc>
     562:	0d c0       	rjmp	.+26     	; 0x57e <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     564:	80 31       	cpi	r24, 0x10	; 16
     566:	99 f0       	breq	.+38     	; 0x58e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     568:	8e 30       	cpi	r24, 0x0E	; 14
     56a:	11 f4       	brne	.+4      	; 0x570 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	19 c0       	rjmp	.+50     	; 0x5a2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     570:	8f 30       	cpi	r24, 0x0F	; 15
     572:	41 f5       	brne	.+80     	; 0x5c4 <UpdateManState+0xfc>
     574:	15 c0       	rjmp	.+42     	; 0x5a0 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     576:	80 31       	cpi	r24, 0x10	; 16
     578:	51 f0       	breq	.+20     	; 0x58e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     57a:	8e 30       	cpi	r24, 0x0E	; 14
     57c:	11 f4       	brne	.+4      	; 0x582 <UpdateManState+0xba>
				manPage = FREQ_MAN;
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	10 c0       	rjmp	.+32     	; 0x5a2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     582:	8f 30       	cpi	r24, 0x0F	; 15
     584:	f9 f4       	brne	.+62     	; 0x5c4 <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     586:	87 e0       	ldi	r24, 0x07	; 7
     588:	0c c0       	rjmp	.+24     	; 0x5a2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     58a:	80 31       	cpi	r24, 0x10	; 16
     58c:	39 f4       	brne	.+14     	; 0x59c <UpdateManState+0xd4>
				mode = returnMode;
     58e:	80 91 ba 02 	lds	r24, 0x02BA
     592:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     596:	10 92 bd 02 	sts	0x02BD, r1
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     59c:	8e 30       	cpi	r24, 0x0E	; 14
     59e:	39 f4       	brne	.+14     	; 0x5ae <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 be 02 	sts	0x02BE, r24
     5ac:	08 95       	ret
			}
			else if (key == 0x0F){
     5ae:	8f 30       	cpi	r24, 0x0F	; 15
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <UpdateManState+0xfc>
				mode = returnMode;
     5b2:	80 91 ba 02 	lds	r24, 0x02BA
     5b6:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     5ba:	10 92 bd 02 	sts	0x02BD, r1
				justSwitched = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 be 02 	sts	0x02BE, r24
     5c4:	08 95       	ret

000005c6 <UpdateDMMState>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     5c6:	20 91 b5 02 	lds	r18, 0x02B5
	if (curKey){
     5ca:	80 91 b5 02 	lds	r24, 0x02B5
     5ce:	88 23       	and	r24, r24
     5d0:	11 f0       	breq	.+4      	; 0x5d6 <UpdateDMMState+0x10>
		curKey = 0;
     5d2:	10 92 b5 02 	sts	0x02B5, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     5d6:	22 23       	and	r18, r18
     5d8:	09 f4       	brne	.+2      	; 0x5dc <UpdateDMMState+0x16>
     5da:	b8 c0       	rjmp	.+368    	; 0x74c <UpdateDMMState+0x186>
     5dc:	80 91 be 02 	lds	r24, 0x02BE
     5e0:	88 23       	and	r24, r24
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <UpdateDMMState+0x20>
     5e4:	b3 c0       	rjmp	.+358    	; 0x74c <UpdateDMMState+0x186>
		switch (mode){
     5e6:	90 91 a4 02 	lds	r25, 0x02A4
     5ea:	92 30       	cpi	r25, 0x02	; 2
     5ec:	01 f1       	breq	.+64     	; 0x62e <UpdateDMMState+0x68>
     5ee:	93 30       	cpi	r25, 0x03	; 3
     5f0:	30 f4       	brcc	.+12     	; 0x5fe <UpdateDMMState+0x38>
     5f2:	99 23       	and	r25, r25
     5f4:	51 f0       	breq	.+20     	; 0x60a <UpdateDMMState+0x44>
     5f6:	91 30       	cpi	r25, 0x01	; 1
     5f8:	09 f0       	breq	.+2      	; 0x5fc <UpdateDMMState+0x36>
     5fa:	a8 c0       	rjmp	.+336    	; 0x74c <UpdateDMMState+0x186>
     5fc:	14 c0       	rjmp	.+40     	; 0x626 <UpdateDMMState+0x60>
     5fe:	93 30       	cpi	r25, 0x03	; 3
     600:	61 f1       	breq	.+88     	; 0x65a <UpdateDMMState+0x94>
     602:	94 30       	cpi	r25, 0x04	; 4
     604:	09 f0       	breq	.+2      	; 0x608 <UpdateDMMState+0x42>
     606:	a2 c0       	rjmp	.+324    	; 0x74c <UpdateDMMState+0x186>
     608:	52 c0       	rjmp	.+164    	; 0x6ae <UpdateDMMState+0xe8>
			case INIT:
				if (key == 0x0F){
     60a:	2f 30       	cpi	r18, 0x0F	; 15
     60c:	31 f4       	brne	.+12     	; 0x61a <UpdateDMMState+0x54>
					PORTB = ~0x20;
     60e:	8f ed       	ldi	r24, 0xDF	; 223
     610:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	80 93 ba 02 	sts	0x02BA, r24
     618:	24 c0       	rjmp	.+72     	; 0x662 <UpdateDMMState+0x9c>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					if (key == 0x0A){
     61a:	2a 30       	cpi	r18, 0x0A	; 10
     61c:	c1 f4       	brne	.+48     	; 0x64e <UpdateDMMState+0x88>
						mode = VOLTMETER;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	80 93 a4 02 	sts	0x02A4, r24
     624:	7d c0       	rjmp	.+250    	; 0x720 <UpdateDMMState+0x15a>
					}
				}
				break; 

			case MAN:
				UpdateManState(key);
     626:	82 2f       	mov	r24, r18
     628:	0e 94 64 02 	call	0x4c8	; 0x4c8 <UpdateManState>
     62c:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     62e:	2f 30       	cpi	r18, 0x0F	; 15
     630:	31 f4       	brne	.+12     	; 0x63e <UpdateDMMState+0x78>
					mode = MAN;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 a4 02 	sts	0x02A4, r24
					returnMode = VOLTMETER;
     638:	90 93 ba 02 	sts	0x02BA, r25
     63c:	72 c0       	rjmp	.+228    	; 0x722 <UpdateDMMState+0x15c>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     63e:	2d 30       	cpi	r18, 0x0D	; 13
     640:	d1 f1       	breq	.+116    	; 0x6b6 <UpdateDMMState+0xf0>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     642:	80 91 97 02 	lds	r24, 0x0297
     646:	88 23       	and	r24, r24
     648:	11 f4       	brne	.+4      	; 0x64e <UpdateDMMState+0x88>
     64a:	21 30       	cpi	r18, 0x01	; 1
     64c:	b1 f0       	breq	.+44     	; 0x67a <UpdateDMMState+0xb4>
					rangeIdx++;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
     64e:	2b 30       	cpi	r18, 0x0B	; 11
     650:	31 f5       	brne	.+76     	; 0x69e <UpdateDMMState+0xd8>
					mode = OHMMETER;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	80 93 a4 02 	sts	0x02A4, r24
     658:	59 c0       	rjmp	.+178    	; 0x70c <UpdateDMMState+0x146>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     65a:	2f 30       	cpi	r18, 0x0F	; 15
     65c:	31 f4       	brne	.+12     	; 0x66a <UpdateDMMState+0xa4>
					returnMode = OHMMETER;
     65e:	90 93 ba 02 	sts	0x02BA, r25
					mode = MAN;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 a4 02 	sts	0x02A4, r24
     668:	5c c0       	rjmp	.+184    	; 0x722 <UpdateDMMState+0x15c>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     66a:	2d 30       	cpi	r18, 0x0D	; 13
     66c:	21 f1       	breq	.+72     	; 0x6b6 <UpdateDMMState+0xf0>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     66e:	80 91 97 02 	lds	r24, 0x0297
     672:	88 23       	and	r24, r24
     674:	91 f4       	brne	.+36     	; 0x69a <UpdateDMMState+0xd4>
     676:	21 30       	cpi	r18, 0x01	; 1
     678:	81 f4       	brne	.+32     	; 0x69a <UpdateDMMState+0xd4>
					rangeIdx++;
     67a:	80 91 bb 02 	lds	r24, 0x02BB
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     684:	80 91 bb 02 	lds	r24, 0x02BB
     688:	60 91 94 02 	lds	r22, 0x0294
     68c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodqi4>
     690:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     694:	20 93 be 02 	sts	0x02BE, r18
     698:	08 95       	ret
				}
				else if (key == 0x0A){
     69a:	2a 30       	cpi	r18, 0x0A	; 10
     69c:	99 f1       	breq	.+102    	; 0x704 <UpdateDMMState+0x13e>
					mode = VOLTMETER;
					rangeIdxMod = 3;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0C){
     69e:	2c 30       	cpi	r18, 0x0C	; 12
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <UpdateDMMState+0xde>
     6a2:	54 c0       	rjmp	.+168    	; 0x74c <UpdateDMMState+0x186>
					mode = FREQMETER;
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 2;
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	2f c0       	rjmp	.+94     	; 0x70c <UpdateDMMState+0x146>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     6ae:	2f 30       	cpi	r18, 0x0F	; 15
     6b0:	b1 f2       	breq	.-84     	; 0x65e <UpdateDMMState+0x98>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     6b2:	2d 30       	cpi	r18, 0x0D	; 13
     6b4:	49 f4       	brne	.+18     	; 0x6c8 <UpdateDMMState+0x102>
					autoRange ^= 1;
     6b6:	80 91 97 02 	lds	r24, 0x0297
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	89 27       	eor	r24, r25
     6be:	80 93 97 02 	sts	0x0297, r24
					justSwitched = 1;
     6c2:	90 93 be 02 	sts	0x02BE, r25
     6c6:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
     6c8:	80 91 97 02 	lds	r24, 0x0297
     6cc:	88 23       	and	r24, r24
     6ce:	c1 f4       	brne	.+48     	; 0x700 <UpdateDMMState+0x13a>
     6d0:	21 30       	cpi	r18, 0x01	; 1
     6d2:	b1 f4       	brne	.+44     	; 0x700 <UpdateDMMState+0x13a>
					rangeIdx++;
     6d4:	80 91 bb 02 	lds	r24, 0x02BB
     6d8:	8f 5f       	subi	r24, 0xFF	; 255
     6da:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6de:	80 91 bb 02 	lds	r24, 0x02BB
     6e2:	60 91 94 02 	lds	r22, 0x0294
     6e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodqi4>
     6ea:	90 93 bb 02 	sts	0x02BB, r25
					frequencyRef = frequencyRanges[rangeIdx];
     6ee:	e0 91 bb 02 	lds	r30, 0x02BB
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	e1 5f       	subi	r30, 0xF1	; 241
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	80 81       	ld	r24, Z
     6fa:	80 93 bf 02 	sts	0x02BF, r24
     6fe:	10 c0       	rjmp	.+32     	; 0x720 <UpdateDMMState+0x15a>
					justSwitched = 1;
				}
				else if (key == 0x0A){
     700:	2a 30       	cpi	r18, 0x0A	; 10
     702:	91 f4       	brne	.+36     	; 0x728 <UpdateDMMState+0x162>
					mode = VOLTMETER;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     710:	80 91 bb 02 	lds	r24, 0x02BB
     714:	60 91 94 02 	lds	r22, 0x0294
     718:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodqi4>
     71c:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 be 02 	sts	0x02BE, r24
     726:	08 95       	ret
				}
				else if (key == 0x0B){
     728:	2b 30       	cpi	r18, 0x0B	; 11
     72a:	81 f4       	brne	.+32     	; 0x74c <UpdateDMMState+0x186>
					mode = OHMMETER;
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     732:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     736:	80 91 bb 02 	lds	r24, 0x02BB
     73a:	60 91 94 02 	lds	r22, 0x0294
     73e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodqi4>
     742:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 be 02 	sts	0x02BE, r24
     74c:	08 95       	ret

0000074e <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
	elapsedTime++;
     770:	80 91 95 02 	lds	r24, 0x0295
     774:	90 91 96 02 	lds	r25, 0x0296
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	90 93 96 02 	sts	0x0296, r25
     77e:	80 93 95 02 	sts	0x0295, r24
	//Check to see if we are currently debouncing a signal
	//if the signal isn't being debounced, checK if the button has been pressed
	//if we are waiting for it to be pressed or checK if it is not pressed if we are waiting for
	//the release event

	if (!debouncing){
     782:	80 91 b7 02 	lds	r24, 0x02B7
     786:	88 23       	and	r24, r24
     788:	69 f0       	breq	.+26     	; 0x7a4 <__vector_16+0x56>
		Debounce();
		UpdateDMMState();
	}
	else if (debouncing && !--debounceTime){
     78a:	80 91 b7 02 	lds	r24, 0x02B7
     78e:	88 23       	and	r24, r24
     790:	69 f0       	breq	.+26     	; 0x7ac <__vector_16+0x5e>
     792:	80 91 b6 02 	lds	r24, 0x02B6
     796:	81 50       	subi	r24, 0x01	; 1
     798:	80 93 b6 02 	sts	0x02B6, r24
     79c:	80 91 b6 02 	lds	r24, 0x02B6
     7a0:	88 23       	and	r24, r24
     7a2:	21 f4       	brne	.+8      	; 0x7ac <__vector_16+0x5e>
		Debounce();
     7a4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Debounce>
		UpdateDMMState();
     7a8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UpdateDMMState>
	}
	if(mode == VOLTMETER || mode == OHMMETER) {
     7ac:	80 91 a4 02 	lds	r24, 0x02A4
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	21 f0       	breq	.+8      	; 0x7bc <__vector_16+0x6e>
     7b4:	80 91 a4 02 	lds	r24, 0x02A4
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	e9 f4       	brne	.+58     	; 0x7f6 <__vector_16+0xa8>
		if(elapsedTime % 200 == 0) {
     7bc:	80 91 95 02 	lds	r24, 0x0295
     7c0:	90 91 96 02 	lds	r25, 0x0296
     7c4:	68 ec       	ldi	r22, 0xC8	; 200
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodhi4>
     7cc:	89 2b       	or	r24, r25
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <__vector_16+0x88>
			triggerPoll = 1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 9f 02 	sts	0x029F, r24
		}
		if(elapsedTime % 200 == 190) {
     7d6:	80 91 95 02 	lds	r24, 0x0295
     7da:	90 91 96 02 	lds	r25, 0x0296
     7de:	68 ec       	ldi	r22, 0xC8	; 200
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodhi4>
     7e6:	8e 3b       	cpi	r24, 0xBE	; 190
     7e8:	91 05       	cpc	r25, r1
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__vector_16+0xa8>
			//start another conversion
			ADCSRA |= (1<<ADSC);
     7ec:	80 91 7a 00 	lds	r24, 0x007A
     7f0:	80 64       	ori	r24, 0x40	; 64
     7f2:	80 93 7a 00 	sts	0x007A, r24
		}
	}
}
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <setVref>:
	CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void setVref(uint8_t idx) {
     818:	e8 2f       	mov	r30, r24
	switch(idx) {
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	39 f0       	breq	.+14     	; 0x82c <setVref+0x14>
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	18 f0       	brcs	.+6      	; 0x828 <setVref+0x10>
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	41 f4       	brne	.+16     	; 0x836 <setVref+0x1e>
     826:	04 c0       	rjmp	.+8      	; 0x830 <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     828:	80 e6       	ldi	r24, 0x60	; 96
     82a:	03 c0       	rjmp	.+6      	; 0x832 <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     82c:	80 ee       	ldi	r24, 0xE0	; 224
     82e:	01 c0       	rjmp	.+2      	; 0x832 <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e0 50       	subi	r30, 0x00	; 0
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	a2 81       	ldd	r26, Z+2	; 0x02
     84a:	b3 81       	ldd	r27, Z+3	; 0x03
     84c:	80 93 ad 02 	sts	0x02AD, r24
     850:	90 93 ae 02 	sts	0x02AE, r25
     854:	a0 93 af 02 	sts	0x02AF, r26
     858:	b0 93 b0 02 	sts	0x02B0, r27
}
     85c:	08 95       	ret

0000085e <setOref>:

void setOref(uint8_t idx) {
     85e:	e8 2f       	mov	r30, r24
	// Don't use Oref
	if(idx < 0 || idx > 2) {
     860:	83 30       	cpi	r24, 0x03	; 3
     862:	10 f0       	brcs	.+4      	; 0x868 <setOref+0xa>
		DDRA = 0x00;
     864:	11 b8       	out	0x01, r1	; 1
     866:	08 95       	ret
		return;
	}
	switch(idx) {
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	39 f0       	breq	.+14     	; 0x87a <setOref+0x1c>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	18 f0       	brcs	.+6      	; 0x876 <setOref+0x18>
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	39 f4       	brne	.+14     	; 0x882 <setOref+0x24>
     874:	04 c0       	rjmp	.+8      	; 0x87e <setOref+0x20>
		case 0:
			DDRA = (1 << 7); //100k resistor output
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	03 c0       	rjmp	.+6      	; 0x880 <setOref+0x22>
			break;
		case 1:
			DDRA = (1 << 6); //10k resistor output
     87a:	80 e4       	ldi	r24, 0x40	; 64
     87c:	01 c0       	rjmp	.+2      	; 0x880 <setOref+0x22>
			break;
		case 2:
			DDRA = (1 << 5); //1k resistor output
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	81 b9       	out	0x01, r24	; 1
			break;
	}
	ohmRef = resistorRanges[idx];
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	e4 5f       	subi	r30, 0xF4	; 244
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	80 81       	ld	r24, Z
     88a:	80 93 98 02 	sts	0x0298, r24
	PORTA = DDRA;
     88e:	81 b1       	in	r24, 0x01	; 1
     890:	82 b9       	out	0x02, r24	; 2
     892:	08 95       	ret

00000894 <Autorange>:
}

// Set rangeIdx if autoRange
void Autorange(void){
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
	if(autoRange) {
     89c:	80 91 97 02 	lds	r24, 0x0297
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <Autorange+0x12>
     8a4:	ae c0       	rjmp	.+348    	; 0xa02 <Autorange+0x16e>
		switch (mode){
     8a6:	80 91 a4 02 	lds	r24, 0x02A4
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <Autorange+0x22>
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <Autorange+0x20>
     8b2:	a7 c0       	rjmp	.+334    	; 0xa02 <Autorange+0x16e>
     8b4:	55 c0       	rjmp	.+170    	; 0x960 <Autorange+0xcc>
			case VOLTMETER:
				switch (rangeIdx){
     8b6:	80 91 bb 02 	lds	r24, 0x02BB
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	b9 f0       	breq	.+46     	; 0x8ec <Autorange+0x58>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	20 f0       	brcs	.+8      	; 0x8ca <Autorange+0x36>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <Autorange+0x34>
     8c6:	44 c0       	rjmp	.+136    	; 0x950 <Autorange+0xbc>
     8c8:	2e c0       	rjmp	.+92     	; 0x926 <Autorange+0x92>
					//In the 5 Volt range, move to a smaller scale if the voltage is less than 0.525 of Vref
					case 0:
						if (voltage <= 2.0){
     8ca:	60 91 9b 02 	lds	r22, 0x029B
     8ce:	70 91 9c 02 	lds	r23, 0x029C
     8d2:	80 91 9d 02 	lds	r24, 0x029D
     8d6:	90 91 9e 02 	lds	r25, 0x029E
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e4       	ldi	r21, 0x40	; 64
     8e2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__lesf2>
     8e6:	18 16       	cp	r1, r24
     8e8:	9c f4       	brge	.+38     	; 0x910 <Autorange+0x7c>
     8ea:	32 c0       	rjmp	.+100    	; 0x950 <Autorange+0xbc>
						}
						break;
					//In the 2.56 Volt range, move to a smaller scale if the voltage is less than 0.4 of Vref
					//or move to a larger scale if the voltage is close to Vref
					case 1:
						if (voltage < 0.9){
     8ec:	e0 90 9b 02 	lds	r14, 0x029B
     8f0:	f0 90 9c 02 	lds	r15, 0x029C
     8f4:	00 91 9d 02 	lds	r16, 0x029D
     8f8:	10 91 9e 02 	lds	r17, 0x029E
     8fc:	c8 01       	movw	r24, r16
     8fe:	b7 01       	movw	r22, r14
     900:	26 e6       	ldi	r18, 0x66	; 102
     902:	36 e6       	ldi	r19, 0x66	; 102
     904:	46 e6       	ldi	r20, 0x66	; 102
     906:	5f e3       	ldi	r21, 0x3F	; 63
     908:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__ltsf2>
     90c:	88 23       	and	r24, r24
     90e:	24 f4       	brge	.+8      	; 0x918 <Autorange+0x84>
							rangeIdx++;
     910:	80 91 bb 02 	lds	r24, 0x02BB
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	1a c0       	rjmp	.+52     	; 0x94c <Autorange+0xb8>
						}
						else if (voltage > 2.0){
     918:	c8 01       	movw	r24, r16
     91a:	b7 01       	movw	r22, r14
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e4       	ldi	r21, 0x40	; 64
     924:	0c c0       	rjmp	.+24     	; 0x93e <Autorange+0xaa>
							rangeIdx--;
						}
						break;
					//In the 1.1 Volt range, move to a larger scale if the voltage is close to Vref
					case 2:
						if (voltage > 0.9){
     926:	60 91 9b 02 	lds	r22, 0x029B
     92a:	70 91 9c 02 	lds	r23, 0x029C
     92e:	80 91 9d 02 	lds	r24, 0x029D
     932:	90 91 9e 02 	lds	r25, 0x029E
     936:	26 e6       	ldi	r18, 0x66	; 102
     938:	36 e6       	ldi	r19, 0x66	; 102
     93a:	46 e6       	ldi	r20, 0x66	; 102
     93c:	5f e3       	ldi	r21, 0x3F	; 63
     93e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__gtsf2>
     942:	18 16       	cp	r1, r24
     944:	2c f4       	brge	.+10     	; 0x950 <Autorange+0xbc>
							rangeIdx--;
     946:	80 91 bb 02 	lds	r24, 0x02BB
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	80 93 bb 02 	sts	0x02BB, r24
						}
						break;
				}
				setOref(3); // disable ohmref
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 2f 04 	call	0x85e	; 0x85e <setOref>
				setVref(rangeIdx);
     956:	80 91 bb 02 	lds	r24, 0x02BB
     95a:	0e 94 0c 04 	call	0x818	; 0x818 <setVref>
     95e:	51 c0       	rjmp	.+162    	; 0xa02 <Autorange+0x16e>
				break;

			case OHMMETER:
				switch (rangeIdx){
     960:	80 91 bb 02 	lds	r24, 0x02BB
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	b9 f0       	breq	.+46     	; 0x996 <Autorange+0x102>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	20 f0       	brcs	.+8      	; 0x974 <Autorange+0xe0>
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	09 f0       	breq	.+2      	; 0x972 <Autorange+0xde>
     970:	44 c0       	rjmp	.+136    	; 0x9fa <Autorange+0x166>
     972:	2e c0       	rjmp	.+92     	; 0x9d0 <Autorange+0x13c>
					//In the 100kOhm range, move to a smaller scale if the resistance is less than 0.4 of Vcc 
					//(R_test is less than 10% of R) 
					case 0:
						if (ohm <= 10.5){
     974:	60 91 a0 02 	lds	r22, 0x02A0
     978:	70 91 a1 02 	lds	r23, 0x02A1
     97c:	80 91 a2 02 	lds	r24, 0x02A2
     980:	90 91 a3 02 	lds	r25, 0x02A3
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	48 e2       	ldi	r20, 0x28	; 40
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__lesf2>
     990:	18 16       	cp	r1, r24
     992:	9c f1       	brlt	.+102    	; 0x9fa <Autorange+0x166>
     994:	12 c0       	rjmp	.+36     	; 0x9ba <Autorange+0x126>
				
					//In the 10kOhm range, move to a smaller scale if the reading is less than 0.4 of Vcc
					//(R_test is less than 10% of R). Move to a larger sclae if the reading is almost Vcc
					//(R_test is almost 95% of R).
					case 1:
						if (ohm <= 3.3){
     996:	e0 90 a0 02 	lds	r14, 0x02A0
     99a:	f0 90 a1 02 	lds	r15, 0x02A1
     99e:	00 91 a2 02 	lds	r16, 0x02A2
     9a2:	10 91 a3 02 	lds	r17, 0x02A3
     9a6:	c8 01       	movw	r24, r16
     9a8:	b7 01       	movw	r22, r14
     9aa:	23 e3       	ldi	r18, 0x33	; 51
     9ac:	33 e3       	ldi	r19, 0x33	; 51
     9ae:	43 e5       	ldi	r20, 0x53	; 83
     9b0:	50 e4       	ldi	r21, 0x40	; 64
     9b2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__lesf2>
     9b6:	18 16       	cp	r1, r24
     9b8:	24 f0       	brlt	.+8      	; 0x9c2 <Autorange+0x12e>
							rangeIdx++;
     9ba:	80 91 bb 02 	lds	r24, 0x02BB
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	1a c0       	rjmp	.+52     	; 0x9f6 <Autorange+0x162>
						}
						else if (ohm > 10.5){
     9c2:	c8 01       	movw	r24, r16
     9c4:	b7 01       	movw	r22, r14
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	48 e2       	ldi	r20, 0x28	; 40
     9cc:	51 e4       	ldi	r21, 0x41	; 65
     9ce:	0c c0       	rjmp	.+24     	; 0x9e8 <Autorange+0x154>
						break;
	
					//In the 10kOhm range, move to a larger scale if the reading is almost Vcc 
					//(R_test is almost 95% of R).
					case 2:
						if (ohm > 3.3){
     9d0:	60 91 a0 02 	lds	r22, 0x02A0
     9d4:	70 91 a1 02 	lds	r23, 0x02A1
     9d8:	80 91 a2 02 	lds	r24, 0x02A2
     9dc:	90 91 a3 02 	lds	r25, 0x02A3
     9e0:	23 e3       	ldi	r18, 0x33	; 51
     9e2:	33 e3       	ldi	r19, 0x33	; 51
     9e4:	43 e5       	ldi	r20, 0x53	; 83
     9e6:	50 e4       	ldi	r21, 0x40	; 64
     9e8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__gtsf2>
     9ec:	18 16       	cp	r1, r24
     9ee:	2c f4       	brge	.+10     	; 0x9fa <Autorange+0x166>
							rangeIdx--;
     9f0:	80 91 bb 02 	lds	r24, 0x02BB
     9f4:	81 50       	subi	r24, 0x01	; 1
     9f6:	80 93 bb 02 	sts	0x02BB, r24
						}
					break;
				}
				setOref(rangeIdx);
     9fa:	80 91 bb 02 	lds	r24, 0x02BB
     9fe:	0e 94 2f 04 	call	0x85e	; 0x85e <setOref>
				break;
		}
	}
}
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	08 95       	ret

00000a0c <poll>:
			}
			break;
	}
}

void poll(void) {
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
	//get the sample
	Ain = ADCH;
     a24:	80 91 79 00 	lds	r24, 0x0079
     a28:	80 93 bc 02 	sts	0x02BC, r24
	voltage = (float)Ain;
     a2c:	60 91 bc 02 	lds	r22, 0x02BC
	voltage = (voltage/256.0) * Vref;
     a30:	e0 90 ad 02 	lds	r14, 0x02AD
     a34:	f0 90 ae 02 	lds	r15, 0x02AE
     a38:	00 91 af 02 	lds	r16, 0x02AF
     a3c:	10 91 b0 02 	lds	r17, 0x02B0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__floatunsisf>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e8       	ldi	r20, 0x80	; 128
     a50:	5b e3       	ldi	r21, 0x3B	; 59
     a52:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__mulsf3>
     a56:	a8 01       	movw	r20, r16
     a58:	97 01       	movw	r18, r14
     a5a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__mulsf3>
     a5e:	3b 01       	movw	r6, r22
     a60:	4c 01       	movw	r8, r24
     a62:	60 93 9b 02 	sts	0x029B, r22
     a66:	70 93 9c 02 	sts	0x029C, r23
     a6a:	80 93 9d 02 	sts	0x029D, r24
     a6e:	90 93 9e 02 	sts	0x029E, r25
	ohm = (ohmRef * voltage)/(Vref - voltage);
     a72:	60 91 98 02 	lds	r22, 0x0298
     a76:	a0 90 ad 02 	lds	r10, 0x02AD
     a7a:	b0 90 ae 02 	lds	r11, 0x02AE
     a7e:	c0 90 af 02 	lds	r12, 0x02AF
     a82:	d0 90 b0 02 	lds	r13, 0x02B0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__floatsisf>
     a94:	a4 01       	movw	r20, r8
     a96:	93 01       	movw	r18, r6
     a98:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__mulsf3>
     a9c:	7b 01       	movw	r14, r22
     a9e:	8c 01       	movw	r16, r24
     aa0:	c6 01       	movw	r24, r12
     aa2:	b5 01       	movw	r22, r10
     aa4:	a4 01       	movw	r20, r8
     aa6:	93 01       	movw	r18, r6
     aa8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__subsf3>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c8 01       	movw	r24, r16
     ab2:	b7 01       	movw	r22, r14
     ab4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
     abc:	cb 01       	movw	r24, r22
     abe:	d8 01       	movw	r26, r16
     ac0:	80 93 a0 02 	sts	0x02A0, r24
     ac4:	90 93 a1 02 	sts	0x02A1, r25
     ac8:	a0 93 a2 02 	sts	0x02A2, r26
     acc:	b0 93 a3 02 	sts	0x02A3, r27
	switch(mode) {
     ad0:	80 91 a4 02 	lds	r24, 0x02A4
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	19 f0       	breq	.+6      	; 0xade <poll+0xd2>
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	61 f4       	brne	.+24     	; 0xaf4 <poll+0xe8>
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <poll+0xd8>
		case VOLTMETER:
			dtostrf(voltage, 4, 2, v_string);
     ade:	c4 01       	movw	r24, r8
     ae0:	b3 01       	movw	r22, r6
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <poll+0xdc>
			break;
		case OHMMETER:
			dtostrf(ohm, 4, 2, v_string);
     ae4:	b7 01       	movw	r22, r14
     ae6:	c8 01       	movw	r24, r16
     ae8:	44 e0       	ldi	r20, 0x04	; 4
     aea:	22 e0       	ldi	r18, 0x02	; 2
     aec:	01 eb       	ldi	r16, 0xB1	; 177
     aee:	12 e0       	ldi	r17, 0x02	; 2
     af0:	0e 94 bd 10 	call	0x217a	; 0x217a <dtostrf>
			break;
	}
	sprintf(LCDBuffer, "%s",v_string);
     af4:	07 ea       	ldi	r16, 0xA7	; 167
     af6:	12 e0       	ldi	r17, 0x02	; 2
     af8:	c8 01       	movw	r24, r16
     afa:	61 eb       	ldi	r22, 0xB1	; 177
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	0e 94 de 10 	call	0x21bc	; 0x21bc <strcpy>

	CopyStringtoLCD(LCDBlank, 0, 0);
     b02:	80 e7       	ldi	r24, 0x70	; 112
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
	LCDGotoXY(0, 0);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     b16:	f8 01       	movw	r30, r16
     b18:	01 90       	ld	r0, Z+
     b1a:	00 20       	and	r0, r0
     b1c:	e9 f7       	brne	.-6      	; 0xb18 <poll+0x10c>
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	e0 1b       	sub	r30, r16
     b22:	f1 0b       	sbc	r31, r17
     b24:	c8 01       	movw	r24, r16
     b26:	6e 2f       	mov	r22, r30
     b28:	0e 94 8c 07 	call	0xf18	; 0xf18 <LCDstring>
}
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	6f 90       	pop	r6
     b44:	08 95       	ret

00000b46 <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     b46:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <LCDinit>
	LCDcursorOFF();
     b4a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <LCDcursorOFF>
	LCDclr();				//clear the display
     b4e:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
	LCDGotoXY(0,0);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     b5a:	82 e8       	ldi	r24, 0x82	; 130
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     b66:	84 e9       	ldi	r24, 0x94	; 148
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
}
     b72:	08 95       	ret

00000b74 <Initialize>:
		}
		break;
	}
}

void Initialize(void) {
     b74:	1f 93       	push	r17
	//set up the ports
	triggerPoll = 0;
     b76:	10 92 9f 02 	sts	0x029F, r1

	//init the A to D converter
	setVref(0); //Set to 5v Vref
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 0c 04 	call	0x818	; 0x818 <setVref>
	setOref(3); //Disable ohmref
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	0e 94 2f 04 	call	0x85e	; 0x85e <setOref>

	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + 7;
     b86:	87 e8       	ldi	r24, 0x87	; 135
     b88:	80 93 7a 00 	sts	0x007A, r24

	// Set A to input (high impedence)
	DDRA = 0x00;
     b8c:	11 b8       	out	0x01, r1	; 1

	// PortB: LEDs, output
	DDRB=0xff;
     b8e:	1f ef       	ldi	r17, 0xFF	; 255
     b90:	14 b9       	out	0x04, r17	; 4
	PORTB=0xff;
     b92:	15 b9       	out	0x05, r17	; 5
	// PortD: Keypad
	DDRD=0x00;
     b94:	1a b8       	out	0x0a, r1	; 10

	//set up timer 0 for 1 mSec ticks
	TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;	//set the compare reg to 250 time ticks
     b9c:	89 ef       	ldi	r24, 0xF9	; 249
     b9e:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b00000010; // turn on clear-on-match
     ba0:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011;	// clock prescalar to 64
     ba2:	23 e0       	ldi	r18, 0x03	; 3
     ba4:	25 bd       	out	0x25, r18	; 37

	//set up timer 1 to interrupt on capture
	TIMSK1 = (1 << ICIE1); //turn on timer1 input capture ISR
     ba6:	80 e2       	ldi	r24, 0x20	; 32
     ba8:	80 93 6f 00 	sts	0x006F, r24
	TCCR1A = 0b00000010;
     bac:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | 0b00000001; // Start 
     bb0:	81 ec       	ldi	r24, 0xC1	; 193
     bb2:	80 93 81 00 	sts	0x0081, r24
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting ADC demo...\n\r");

	//initialize the current key to null
	curKey = 0;
     bb6:	10 92 b5 02 	sts	0x02B5, r1
	elapsedTime = 30;
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	90 93 96 02 	sts	0x0296, r25
     bc2:	80 93 95 02 	sts	0x0295, r24
	debounceTime = 30;
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	80 93 b6 02 	sts	0x02B6, r24
	autoRange = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 97 02 	sts	0x0297, r24
	mode = INIT;
     bd2:	10 92 a4 02 	sts	0x02A4, r1
	manPage = WELCOME;
     bd6:	10 92 bd 02 	sts	0x02BD, r1
	keyState = RELEASED;
     bda:	10 92 9a 02 	sts	0x029A, r1
	rangeIdx = 0;
     bde:	10 92 bb 02 	sts	0x02BB, r1
	rangeIdxMod = 3;
     be2:	20 93 94 02 	sts	0x0294, r18
	frequencyRef = frequencyRanges[rangeIdx];
     be6:	80 91 bb 02 	lds	r24, 0x02BB
     bea:	ef e0       	ldi	r30, 0x0F	; 15
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	e8 0f       	add	r30, r24
     bf0:	f1 1d       	adc	r31, r1
     bf2:	80 81       	ld	r24, Z
     bf4:	80 93 bf 02 	sts	0x02BF, r24
	justSwitched = 0;
     bf8:	10 92 be 02 	sts	0x02BE, r1
	PORTB = ~0x01;
     bfc:	8e ef       	ldi	r24, 0xFE	; 254
     bfe:	85 b9       	out	0x05, r24	; 5
	InitLCD();
     c00:	0e 94 a3 05 	call	0xb46	; 0xb46 <InitLCD>
	PORTB = 0xFF;
     c04:	15 b9       	out	0x05, r17	; 5
	sei();
     c06:	78 94       	sei
}
     c08:	1f 91       	pop	r17
     c0a:	08 95       	ret

00000c0c <main>:
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
	Initialize();
     c0c:	0e 94 ba 05 	call	0xb74	; 0xb74 <Initialize>
	
	while(1){
	uint8_t key = curKey;
     c10:	80 91 b5 02 	lds	r24, 0x02B5
		if (key){
     c14:	88 23       	and	r24, r24
     c16:	11 f0       	breq	.+4      	; 0xc1c <main+0x10>
			PORTB = ~key;
     c18:	80 95       	com	r24
     c1a:	85 b9       	out	0x05, r24	; 5
		}
		if(triggerPoll) {
     c1c:	80 91 9f 02 	lds	r24, 0x029F
     c20:	88 23       	and	r24, r24
     c22:	31 f0       	breq	.+12     	; 0xc30 <main+0x24>
			poll();
     c24:	0e 94 06 05 	call	0xa0c	; 0xa0c <poll>
			Autorange();
     c28:	0e 94 4a 04 	call	0x894	; 0x894 <Autorange>
			triggerPoll = 0;
     c2c:	10 92 9f 02 	sts	0x029F, r1
		}
		if (justSwitched){
     c30:	80 91 be 02 	lds	r24, 0x02BE
     c34:	88 23       	and	r24, r24
     c36:	61 f3       	breq	.-40     	; 0xc10 <main+0x4>
			justSwitched = 0;
     c38:	10 92 be 02 	sts	0x02BE, r1
			switch (mode){
     c3c:	80 91 a4 02 	lds	r24, 0x02A4
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	09 f4       	brne	.+2      	; 0xc46 <main+0x3a>
     c44:	79 c0       	rjmp	.+242    	; 0xd38 <main+0x12c>
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	18 f4       	brcc	.+6      	; 0xc50 <main+0x44>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	09 f7       	brne	.-62     	; 0xc10 <main+0x4>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <main+0x50>
     c50:	83 30       	cpi	r24, 0x03	; 3
     c52:	09 f4       	brne	.+2      	; 0xc56 <main+0x4a>
     c54:	a7 c0       	rjmp	.+334    	; 0xda4 <main+0x198>
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	d9 f6       	brne	.-74     	; 0xc10 <main+0x4>
     c5a:	da c0       	rjmp	.+436    	; 0xe10 <main+0x204>
				case MAN:
					switch (manPage){
     c5c:	80 91 bd 02 	lds	r24, 0x02BD
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	99 f1       	breq	.+102    	; 0xcca <main+0xbe>
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	28 f4       	brcc	.+10     	; 0xc72 <main+0x66>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	c9 f0       	breq	.+50     	; 0xc9e <main+0x92>
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	10 f5       	brcc	.+68     	; 0xcb4 <main+0xa8>
     c70:	0b c0       	rjmp	.+22     	; 0xc88 <main+0x7c>
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	09 f4       	brne	.+2      	; 0xc78 <main+0x6c>
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <main+0xea>
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	90 f1       	brcs	.+100    	; 0xce0 <main+0xd4>
     c7c:	86 30       	cpi	r24, 0x06	; 6
     c7e:	09 f4       	brne	.+2      	; 0xc82 <main+0x76>
     c80:	45 c0       	rjmp	.+138    	; 0xd0c <main+0x100>
     c82:	87 30       	cpi	r24, 0x07	; 7
     c84:	29 f6       	brne	.-118    	; 0xc10 <main+0x4>
     c86:	4d c0       	rjmp	.+154    	; 0xd22 <main+0x116>
						case WELCOME:
							LCDclr();
     c88:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     c8c:	81 e3       	ldi	r24, 0x31	; 49
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     c98:	8c e3       	ldi	r24, 0x3C	; 60
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	dd c0       	rjmp	.+442    	; 0xe58 <main+0x24c>
							break;
						case NAVIGATION_1:
							LCDclr();
     c9e:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     ca2:	8b e4       	ldi	r24, 0x4B	; 75
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     cae:	8d e5       	ldi	r24, 0x5D	; 93
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	d2 c0       	rjmp	.+420    	; 0xe58 <main+0x24c>
							break;
						case NAVIGATION_2:
							LCDclr();
     cb4:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     cb8:	8f e6       	ldi	r24, 0x6F	; 111
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     cc4:	80 e8       	ldi	r24, 0x80	; 128
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	c7 c0       	rjmp	.+398    	; 0xe58 <main+0x24c>
							break;
					 	case VOLT_MAN:
							LCDclr();
     cca:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDVoltManTop, 0, 0);
     cce:	8f e8       	ldi	r24, 0x8F	; 143
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDVoltManBot, 0, 1);
     cda:	80 ea       	ldi	r24, 0xA0	; 160
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	bc c0       	rjmp	.+376    	; 0xe58 <main+0x24c>
							break;
						case OHM_MAN:
							LCDclr();
     ce0:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDOhmManTop, 0, 0);
     ce4:	8b ea       	ldi	r24, 0xAB	; 171
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDOhmManBot, 0, 1);
     cf0:	8b eb       	ldi	r24, 0xBB	; 187
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	b1 c0       	rjmp	.+354    	; 0xe58 <main+0x24c>
							break;
						case FREQ_MAN:
							LCDclr();
     cf6:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDFreqManTop, 0, 0);
     cfa:	85 ec       	ldi	r24, 0xC5	; 197
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDFreqManBot, 0, 1);
     d06:	86 ed       	ldi	r24, 0xD6	; 214
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	a6 c0       	rjmp	.+332    	; 0xe58 <main+0x24c>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     d0c:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     d10:	83 ee       	ldi	r24, 0xE3	; 227
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     d1c:	80 ef       	ldi	r24, 0xF0	; 240
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9b c0       	rjmp	.+310    	; 0xe58 <main+0x24c>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     d22:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     d26:	8b ef       	ldi	r24, 0xFB	; 251
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	90 c0       	rjmp	.+288    	; 0xe58 <main+0x24c>
							break;
					}
						break;

				case VOLTMETER:
					LCDclr();
     d38:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
     d48:	80 e1       	ldi	r24, 0x10	; 16
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					setOref(3); // disable ohmmeter
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	0e 94 2f 04 	call	0x85e	; 0x85e <setOref>
					if (autoRange){
     d5a:	80 91 97 02 	lds	r24, 0x0297
     d5e:	88 23       	and	r24, r24
     d60:	09 f0       	breq	.+2      	; 0xd64 <main+0x158>
     d62:	78 c0       	rjmp	.+240    	; 0xe54 <main+0x248>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     d64:	86 ea       	ldi	r24, 0xA6	; 166
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
						switch (rangeIdx){
     d70:	80 91 bb 02 	lds	r24, 0x02BB
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	41 f0       	breq	.+16     	; 0xd88 <main+0x17c>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	18 f0       	brcs	.+6      	; 0xd82 <main+0x176>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	69 f4       	brne	.+26     	; 0xd9a <main+0x18e>
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <main+0x182>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     d82:	8e eb       	ldi	r24, 0xBE	; 190
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <main+0x186>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     d88:	87 ec       	ldi	r24, 0xC7	; 199
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <main+0x186>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     d8e:	83 ed       	ldi	r24, 0xD3	; 211
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	67 e0       	ldi	r22, 0x07	; 7
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
								break;
						}
						setVref(rangeIdx);
     d9a:	80 91 bb 02 	lds	r24, 0x02BB
     d9e:	0e 94 0c 04 	call	0x818	; 0x818 <setVref>
     da2:	36 cf       	rjmp	.-404    	; 0xc10 <main+0x4>
					}	
					break;

				case OHMMETER:
					LCDclr();
     da4:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     da8:	88 e0       	ldi	r24, 0x08	; 8
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					CopyStringtoLCD(LCDOhm, MODE_START, 0);
     db4:	8c e1       	ldi	r24, 0x1C	; 28
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	66 e0       	ldi	r22, 0x06	; 6
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					setVref(0); // 5v reference
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 0c 04 	call	0x818	; 0x818 <setVref>
					if (autoRange){
     dc6:	80 91 97 02 	lds	r24, 0x0297
     dca:	88 23       	and	r24, r24
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <main+0x1c4>
     dce:	42 c0       	rjmp	.+132    	; 0xe54 <main+0x248>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     dd0:	86 ea       	ldi	r24, 0xA6	; 166
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
						switch (rangeIdx){
     ddc:	80 91 bb 02 	lds	r24, 0x02BB
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	41 f0       	breq	.+16     	; 0xdf4 <main+0x1e8>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	18 f0       	brcs	.+6      	; 0xdee <main+0x1e2>
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	69 f4       	brne	.+26     	; 0xe06 <main+0x1fa>
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <main+0x1ee>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     dee:	8f ee       	ldi	r24, 0xEF	; 239
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <main+0x1f2>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     df4:	86 ee       	ldi	r24, 0xE6	; 230
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <main+0x1f2>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     dfa:	8e ed       	ldi	r24, 0xDE	; 222
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	67 e0       	ldi	r22, 0x07	; 7
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
								break;
						}
						setOref(rangeIdx);
     e06:	80 91 bb 02 	lds	r24, 0x02BB
     e0a:	0e 94 2f 04 	call	0x85e	; 0x85e <setOref>
     e0e:	00 cf       	rjmp	.-512    	; 0xc10 <main+0x4>
					}
					break;

				case FREQMETER:
					LCDclr();
     e10:	0e 94 84 07 	call	0xf08	; 0xf08 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
					CopyStringtoLCD(LCDFreq, MODE_START, 0);
     e20:	86 e2       	ldi	r24, 0x26	; 38
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	66 e0       	ldi	r22, 0x06	; 6
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>

					//Set the prescalar on TIMER1 to the appropriate range
 					TCCR1B &= ~0x07;
     e2c:	80 91 81 00 	lds	r24, 0x0081
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	80 93 81 00 	sts	0x0081, r24
 					TCCR1B |= TIMERAprescalars[rangeIdx];
     e36:	90 91 81 00 	lds	r25, 0x0081
     e3a:	e0 91 bb 02 	lds	r30, 0x02BB
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	ef 5e       	subi	r30, 0xEF	; 239
     e42:	fe 4f       	sbci	r31, 0xFE	; 254
     e44:	80 81       	ld	r24, Z
     e46:	98 2b       	or	r25, r24
     e48:	90 93 81 00 	sts	0x0081, r25

					if (autoRange){
     e4c:	80 91 97 02 	lds	r24, 0x0297
     e50:	88 23       	and	r24, r24
     e52:	21 f0       	breq	.+8      	; 0xe5c <main+0x250>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     e54:	8f ea       	ldi	r24, 0xAF	; 175
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	14 c0       	rjmp	.+40     	; 0xe84 <main+0x278>
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     e5c:	86 ea       	ldi	r24, 0xA6	; 166
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
						switch (rangeIdx){
     e68:	80 91 bb 02 	lds	r24, 0x02BB
     e6c:	88 23       	and	r24, r24
     e6e:	21 f0       	breq	.+8      	; 0xe78 <main+0x26c>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	09 f0       	breq	.+2      	; 0xe76 <main+0x26a>
     e74:	cd ce       	rjmp	.-614    	; 0xc10 <main+0x4>
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <main+0x272>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <main+0x276>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     e7e:	89 ef       	ldi	r24, 0xF9	; 249
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	67 e0       	ldi	r22, 0x07	; 7
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 b0 07 	call	0xf60	; 0xf60 <CopyStringtoLCD>
     e8a:	c2 ce       	rjmp	.-636    	; 0xc10 <main+0x4>

00000e8c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     e8c:	28 2f       	mov	r18, r24
     e8e:	20 7f       	andi	r18, 0xF0	; 240
     e90:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     e92:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     e94:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e96:	20 ea       	ldi	r18, 0xA0	; 160
     e98:	3f e0       	ldi	r19, 0x0F	; 15
     e9a:	f9 01       	movw	r30, r18
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     ea0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     ea2:	40 98       	cbi	0x08, 0	; 8
     ea4:	f9 01       	movw	r30, r18
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	44 e0       	ldi	r20, 0x04	; 4
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	4a 95       	dec	r20
     eb4:	e1 f7       	brne	.-8      	; 0xeae <LCDsendChar+0x22>
     eb6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     eb8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     eba:	42 9a       	sbi	0x08, 2	; 8
     ebc:	c9 01       	movw	r24, r18
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     ec2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     ec4:	40 98       	cbi	0x08, 0	; 8
     ec6:	c9 01       	movw	r24, r18
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     ecc:	08 95       	ret

00000ece <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     ece:	28 2f       	mov	r18, r24
     ed0:	20 7f       	andi	r18, 0xF0	; 240
     ed2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     ed4:	42 9a       	sbi	0x08, 2	; 8
     ed6:	20 ea       	ldi	r18, 0xA0	; 160
     ed8:	3f e0       	ldi	r19, 0x0F	; 15
     eda:	f9 01       	movw	r30, r18
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ee0:	42 98       	cbi	0x08, 2	; 8
     ee2:	f9 01       	movw	r30, r18
     ee4:	31 97       	sbiw	r30, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	54 e0       	ldi	r21, 0x04	; 4
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	5a 95       	dec	r21
     ef2:	e1 f7       	brne	.-8      	; 0xeec <LCDsendCommand+0x1e>
     ef4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     ef6:	42 9a       	sbi	0x08, 2	; 8
     ef8:	c9 01       	movw	r24, r18
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     efe:	42 98       	cbi	0x08, 2	; 8
     f00:	c9 01       	movw	r24, r18
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     f06:	08 95       	ret

00000f08 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
     f0e:	08 95       	ret

00000f10 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
     f16:	08 95       	ret

00000f18 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	49 f0       	breq	.+18     	; 0xf38 <LCDstring+0x20>
     f26:	ec 01       	movw	r28, r24
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     f2c:	89 91       	ld	r24, Y+
     f2e:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     f32:	1f 5f       	subi	r17, 0xFF	; 255
     f34:	10 17       	cp	r17, r16
     f36:	d0 f3       	brcs	.-12     	; 0xf2c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     f42:	62 30       	cpi	r22, 0x02	; 2
     f44:	31 f0       	breq	.+12     	; 0xf52 <LCDGotoXY+0x10>
     f46:	63 30       	cpi	r22, 0x03	; 3
     f48:	31 f0       	breq	.+12     	; 0xf56 <LCDGotoXY+0x14>
     f4a:	61 30       	cpi	r22, 0x01	; 1
     f4c:	29 f4       	brne	.+10     	; 0xf58 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     f4e:	80 5c       	subi	r24, 0xC0	; 192
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     f52:	8c 5e       	subi	r24, 0xEC	; 236
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     f56:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
	
}
     f5e:	08 95       	ret

00000f60 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
     f68:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     f6a:	64 2f       	mov	r22, r20
     f6c:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCDGotoXY>
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     f74:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     f78:	1f 5f       	subi	r17, 0xFF	; 255
     f7a:	fe 01       	movw	r30, r28
     f7c:	e1 0f       	add	r30, r17
     f7e:	f1 1d       	adc	r31, r1
     f80:	84 91       	lpm	r24, Z+
     f82:	88 23       	and	r24, r24
     f84:	b9 f7       	brne	.-18     	; 0xf74 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	08 95       	ret

00000f8e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	7c 01       	movw	r14, r24
     f9c:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     f9e:	11 0f       	add	r17, r17
     fa0:	11 0f       	add	r17, r17
     fa2:	11 0f       	add	r17, r17
     fa4:	10 64       	ori	r17, 0x40	; 64
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     faa:	f7 01       	movw	r30, r14
     fac:	ec 0f       	add	r30, r28
     fae:	fd 1f       	adc	r31, r29
     fb0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     fb2:	81 2f       	mov	r24, r17
     fb4:	8c 0f       	add	r24, r28
     fb6:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
		LCDsendChar(pcc);
     fba:	80 2f       	mov	r24, r16
     fbc:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     fc0:	21 96       	adiw	r28, 0x01	; 1
     fc2:	c8 30       	cpi	r28, 0x08	; 8
     fc4:	d1 05       	cpc	r29, r1
     fc6:	89 f7       	brne	.-30     	; 0xfaa <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	08 95       	ret

00000fd6 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	80 e6       	ldi	r24, 0x60	; 96
     fde:	9a ee       	ldi	r25, 0xEA	; 234
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     fe4:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     fe6:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     fe8:	87 b1       	in	r24, 0x07	; 7
     fea:	80 6f       	ori	r24, 0xF0	; 240
     fec:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     fee:	87 b1       	in	r24, 0x07	; 7
     ff0:	87 60       	ori	r24, 0x07	; 7
     ff2:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ff4:	80 e3       	ldi	r24, 0x30	; 48
     ff6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ff8:	42 9a       	sbi	0x08, 2	; 8
     ffa:	20 ea       	ldi	r18, 0xA0	; 160
     ffc:	3f e0       	ldi	r19, 0x0F	; 15
     ffe:	f9 01       	movw	r30, r18
    1000:	31 97       	sbiw	r30, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1004:	42 98       	cbi	0x08, 2	; 8
    1006:	f9 01       	movw	r30, r18
    1008:	31 97       	sbiw	r30, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    100c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    100e:	42 9a       	sbi	0x08, 2	; 8
    1010:	c9 01       	movw	r24, r18
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1016:	42 98       	cbi	0x08, 2	; 8
    1018:	c9 01       	movw	r24, r18
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1022:	42 9a       	sbi	0x08, 2	; 8
    1024:	c9 01       	movw	r24, r18
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    102a:	42 98       	cbi	0x08, 2	; 8
    102c:	c9 01       	movw	r24, r18
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1032:	88 e2       	ldi	r24, 0x28	; 40
    1034:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1038:	8c e0       	ldi	r24, 0x0C	; 12
    103a:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
    103e:	c9 e1       	ldi	r28, 0x19	; 25
    1040:	d2 e0       	ldi	r29, 0x02	; 2
    1042:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1044:	16 2f       	mov	r17, r22
    1046:	1f 5f       	subi	r17, 0xFF	; 255
    1048:	ce 01       	movw	r24, r28
    104a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <LCDdefinechar>
    104e:	28 96       	adiw	r28, 0x08	; 8
    1050:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1052:	18 30       	cpi	r17, 0x08	; 8
    1054:	b9 f7       	brne	.-18     	; 0x1044 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	08 95       	ret

0000105e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	08 2f       	mov	r16, r24
    1064:	10 e0       	ldi	r17, 0x00	; 0
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1068:	8e e1       	ldi	r24, 0x1E	; 30
    106a:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    106e:	1f 5f       	subi	r17, 0xFF	; 255
    1070:	10 17       	cp	r17, r16
    1072:	d0 f3       	brcs	.-12     	; 0x1068 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	08 95       	ret

0000107a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	08 2f       	mov	r16, r24
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1084:	88 e1       	ldi	r24, 0x18	; 24
    1086:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    108a:	1f 5f       	subi	r17, 0xFF	; 255
    108c:	10 17       	cp	r17, r16
    108e:	d0 f3       	brcs	.-12     	; 0x1084 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1096:	8e e0       	ldi	r24, 0x0E	; 14
    1098:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
    109c:	08 95       	ret

0000109e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    109e:	8f e0       	ldi	r24, 0x0F	; 15
    10a0:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
    10a4:	08 95       	ret

000010a6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    10a6:	8c e0       	ldi	r24, 0x0C	; 12
    10a8:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
    10ac:	08 95       	ret

000010ae <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    10ae:	88 e0       	ldi	r24, 0x08	; 8
    10b0:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
    10b4:	08 95       	ret

000010b6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
    10b8:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
}
    10bc:	08 95       	ret

000010be <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	08 2f       	mov	r16, r24
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    10ce:	1f 5f       	subi	r17, 0xFF	; 255
    10d0:	10 17       	cp	r17, r16
    10d2:	d0 f3       	brcs	.-12     	; 0x10c8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	08 2f       	mov	r16, r24
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    10e4:	84 e1       	ldi	r24, 0x14	; 20
    10e6:	0e 94 67 07 	call	0xece	; 0xece <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    10ea:	1f 5f       	subi	r17, 0xFF	; 255
    10ec:	10 17       	cp	r17, r16
    10ee:	d0 f3       	brcs	.-12     	; 0x10e4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1106:	96 e0       	ldi	r25, 0x06	; 6
    1108:	89 9f       	mul	r24, r25
    110a:	c0 01       	movw	r24, r0
    110c:	11 24       	eor	r1, r1
    110e:	24 2f       	mov	r18, r20
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	ac 01       	movw	r20, r24
    1114:	42 9f       	mul	r20, r18
    1116:	c0 01       	movw	r24, r0
    1118:	43 9f       	mul	r20, r19
    111a:	90 0d       	add	r25, r0
    111c:	52 9f       	mul	r21, r18
    111e:	90 0d       	add	r25, r0
    1120:	11 24       	eor	r1, r1
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__divmodhi4>
    1128:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    112a:	cb 01       	movw	r24, r22
    112c:	66 e0       	ldi	r22, 0x06	; 6
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodhi4>
    1134:	e8 2e       	mov	r14, r24
    1136:	ff 24       	eor	r15, r15
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <__stack+0x63>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    113e:	c8 01       	movw	r24, r16
    1140:	05 96       	adiw	r24, 0x05	; 5
    1142:	c8 17       	cp	r28, r24
    1144:	d9 07       	cpc	r29, r25
    1146:	10 f0       	brcs	.+4      	; 0x114c <__stack+0x4d>
    1148:	85 e0       	ldi	r24, 0x05	; 5
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <__stack+0x59>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    114c:	c0 17       	cp	r28, r16
    114e:	d1 07       	cpc	r29, r17
    1150:	10 f0       	brcs	.+4      	; 0x1156 <__stack+0x57>
    1152:	8e 2d       	mov	r24, r14
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <__stack+0x59>
    1156:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1158:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    115c:	f3 94       	inc	r15
    115e:	0a 5f       	subi	r16, 0xFA	; 250
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	fd 14       	cp	r15, r13
    1164:	60 f3       	brcs	.-40     	; 0x113e <__stack+0x3f>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	08 95       	ret

00001176 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1176:	87 e6       	ldi	r24, 0x67	; 103
    1178:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    117c:	88 e1       	ldi	r24, 0x18	; 24
    117e:	80 93 c1 00 	sts	0x00C1, r24
}
    1182:	08 95       	ret

00001184 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1184:	1f 93       	push	r17
    1186:	18 2f       	mov	r17, r24

  if (c == '\a')
    1188:	87 30       	cpi	r24, 0x07	; 7
    118a:	49 f4       	brne	.+18     	; 0x119e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    118c:	60 91 c4 02 	lds	r22, 0x02C4
    1190:	70 91 c5 02 	lds	r23, 0x02C5
    1194:	81 e3       	ldi	r24, 0x31	; 49
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 e5 10 	call	0x21ca	; 0x21ca <fputs>
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    119e:	8a 30       	cpi	r24, 0x0A	; 10
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    11a2:	8d e0       	ldi	r24, 0x0D	; 13
    11a4:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    11a8:	80 91 c0 00 	lds	r24, 0x00C0
    11ac:	85 ff       	sbrs	r24, 5
    11ae:	fc cf       	rjmp	.-8      	; 0x11a8 <uart_putchar+0x24>
  UDR0 = c;
    11b0:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	1f 91       	pop	r17
    11ba:	08 95       	ret

000011bc <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    11ca:	80 91 42 02 	lds	r24, 0x0242
    11ce:	90 91 43 02 	lds	r25, 0x0243
    11d2:	89 2b       	or	r24, r25
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <uart_getchar+0x1c>
    11d6:	9f c0       	rjmp	.+318    	; 0x1316 <uart_getchar+0x15a>
    11d8:	04 e4       	ldi	r16, 0x44	; 68
    11da:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    11dc:	80 91 c0 00 	lds	r24, 0x00C0
    11e0:	87 ff       	sbrs	r24, 7
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    11e4:	80 91 c0 00 	lds	r24, 0x00C0
    11e8:	84 ff       	sbrs	r24, 4
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <uart_getchar+0x36>
    11ec:	2e ef       	ldi	r18, 0xFE	; 254
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	a6 c0       	rjmp	.+332    	; 0x133e <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    11f2:	80 91 c0 00 	lds	r24, 0x00C0
    11f6:	83 fd       	sbrc	r24, 3
    11f8:	a0 c0       	rjmp	.+320    	; 0x133a <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    11fa:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    11fe:	9d 30       	cpi	r25, 0x0D	; 13
    1200:	11 f0       	breq	.+4      	; 0x1206 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1202:	9a 30       	cpi	r25, 0x0A	; 10
    1204:	69 f4       	brne	.+26     	; 0x1220 <uart_getchar+0x64>
	  {
	    *cp = c;
    1206:	8a e0       	ldi	r24, 0x0A	; 10
    1208:	f8 01       	movw	r30, r16
    120a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    120c:	b7 01       	movw	r22, r14
    120e:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
	    rxp = b;
    1212:	84 e4       	ldi	r24, 0x44	; 68
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	90 93 43 02 	sts	0x0243, r25
    121a:	80 93 42 02 	sts	0x0242, r24
    121e:	7b c0       	rjmp	.+246    	; 0x1316 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1220:	99 30       	cpi	r25, 0x09	; 9
    1222:	09 f4       	brne	.+2      	; 0x1226 <uart_getchar+0x6a>
    1224:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1226:	89 2f       	mov	r24, r25
    1228:	80 52       	subi	r24, 0x20	; 32
    122a:	8f 35       	cpi	r24, 0x5F	; 95
    122c:	10 f0       	brcs	.+4      	; 0x1232 <uart_getchar+0x76>
    122e:	90 3a       	cpi	r25, 0xA0	; 160
    1230:	70 f0       	brcs	.+28     	; 0x124e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	03 39       	cpi	r16, 0x93	; 147
    1236:	1f 07       	cpc	r17, r31
    1238:	11 f4       	brne	.+4      	; 0x123e <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    123a:	87 e0       	ldi	r24, 0x07	; 7
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    123e:	f8 01       	movw	r30, r16
    1240:	91 93       	st	Z+, r25
    1242:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1244:	89 2f       	mov	r24, r25
    1246:	b7 01       	movw	r22, r14
    1248:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
    124c:	c7 cf       	rjmp	.-114    	; 0x11dc <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    124e:	92 31       	cpi	r25, 0x12	; 18
    1250:	39 f1       	breq	.+78     	; 0x12a0 <uart_getchar+0xe4>
    1252:	93 31       	cpi	r25, 0x13	; 19
    1254:	38 f4       	brcc	.+14     	; 0x1264 <uart_getchar+0xa8>
    1256:	93 30       	cpi	r25, 0x03	; 3
    1258:	09 f4       	brne	.+2      	; 0x125c <uart_getchar+0xa0>
    125a:	6f c0       	rjmp	.+222    	; 0x133a <uart_getchar+0x17e>
    125c:	98 30       	cpi	r25, 0x08	; 8
    125e:	09 f0       	breq	.+2      	; 0x1262 <uart_getchar+0xa6>
    1260:	bd cf       	rjmp	.-134    	; 0x11dc <uart_getchar+0x20>
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <uart_getchar+0xba>
    1264:	97 31       	cpi	r25, 0x17	; 23
    1266:	09 f4       	brne	.+2      	; 0x126a <uart_getchar+0xae>
    1268:	4b c0       	rjmp	.+150    	; 0x1300 <uart_getchar+0x144>
    126a:	9f 37       	cpi	r25, 0x7F	; 127
    126c:	21 f0       	breq	.+8      	; 0x1276 <uart_getchar+0xba>
    126e:	95 31       	cpi	r25, 0x15	; 21
    1270:	09 f0       	breq	.+2      	; 0x1274 <uart_getchar+0xb8>
    1272:	b4 cf       	rjmp	.-152    	; 0x11dc <uart_getchar+0x20>
    1274:	32 c0       	rjmp	.+100    	; 0x12da <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1276:	f2 e0       	ldi	r31, 0x02	; 2
    1278:	04 34       	cpi	r16, 0x44	; 68
    127a:	1f 07       	cpc	r17, r31
    127c:	09 f0       	breq	.+2      	; 0x1280 <uart_getchar+0xc4>
    127e:	08 f4       	brcc	.+2      	; 0x1282 <uart_getchar+0xc6>
    1280:	ad cf       	rjmp	.-166    	; 0x11dc <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1282:	88 e0       	ldi	r24, 0x08	; 8
    1284:	b7 01       	movw	r22, r14
    1286:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar(' ', stream);
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	b7 01       	movw	r22, r14
    128e:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar('\b', stream);
    1292:	88 e0       	ldi	r24, 0x08	; 8
    1294:	b7 01       	movw	r22, r14
    1296:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		cp--;
    129a:	01 50       	subi	r16, 0x01	; 1
    129c:	10 40       	sbci	r17, 0x00	; 0
    129e:	9e cf       	rjmp	.-196    	; 0x11dc <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    12a0:	8d e0       	ldi	r24, 0x0D	; 13
    12a2:	b7 01       	movw	r22, r14
    12a4:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
    12a8:	c4 e4       	ldi	r28, 0x44	; 68
    12aa:	d2 e0       	ldi	r29, 0x02	; 2
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    12ae:	89 91       	ld	r24, Y+
    12b0:	b7 01       	movw	r22, r14
    12b2:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    12b6:	c0 17       	cp	r28, r16
    12b8:	d1 07       	cpc	r29, r17
    12ba:	c8 f3       	brcs	.-14     	; 0x12ae <uart_getchar+0xf2>
    12bc:	8f cf       	rjmp	.-226    	; 0x11dc <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	b7 01       	movw	r22, r14
    12c2:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar(' ', stream);
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	b7 01       	movw	r22, r14
    12ca:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar('\b', stream);
    12ce:	88 e0       	ldi	r24, 0x08	; 8
    12d0:	b7 01       	movw	r22, r14
    12d2:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		cp--;
    12d6:	01 50       	subi	r16, 0x01	; 1
    12d8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	04 34       	cpi	r16, 0x44	; 68
    12de:	18 07       	cpc	r17, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <uart_getchar+0x128>
    12e2:	68 f7       	brcc	.-38     	; 0x12be <uart_getchar+0x102>
    12e4:	7b cf       	rjmp	.-266    	; 0x11dc <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    12e6:	88 e0       	ldi	r24, 0x08	; 8
    12e8:	b7 01       	movw	r22, r14
    12ea:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar(' ', stream);
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	b7 01       	movw	r22, r14
    12f2:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
		uart_putchar('\b', stream);
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	b7 01       	movw	r22, r14
    12fa:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_putchar>
    12fe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1300:	e2 e0       	ldi	r30, 0x02	; 2
    1302:	04 34       	cpi	r16, 0x44	; 68
    1304:	1e 07       	cpc	r17, r30
    1306:	09 f0       	breq	.+2      	; 0x130a <uart_getchar+0x14e>
    1308:	08 f4       	brcc	.+2      	; 0x130c <uart_getchar+0x150>
    130a:	68 cf       	rjmp	.-304    	; 0x11dc <uart_getchar+0x20>
    130c:	e8 01       	movw	r28, r16
    130e:	8a 91       	ld	r24, -Y
    1310:	80 32       	cpi	r24, 0x20	; 32
    1312:	49 f7       	brne	.-46     	; 0x12e6 <uart_getchar+0x12a>
    1314:	63 cf       	rjmp	.-314    	; 0x11dc <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1316:	e0 91 42 02 	lds	r30, 0x0242
    131a:	f0 91 43 02 	lds	r31, 0x0243
    131e:	81 91       	ld	r24, Z+
    1320:	f0 93 43 02 	sts	0x0243, r31
    1324:	e0 93 42 02 	sts	0x0242, r30
  if (c == '\n')
    1328:	8a 30       	cpi	r24, 0x0A	; 10
    132a:	21 f4       	brne	.+8      	; 0x1334 <uart_getchar+0x178>
    rxp = 0;
    132c:	10 92 43 02 	sts	0x0243, r1
    1330:	10 92 42 02 	sts	0x0242, r1

  return c;
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <uart_getchar+0x182>
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	3f ef       	ldi	r19, 0xFF	; 255
}
    133e:	c9 01       	movw	r24, r18
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	08 95       	ret

0000134e <_fpadd_parts>:
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ed ea       	ldi	r30, 0xAD	; 173
    1354:	f9 e0       	ldi	r31, 0x09	; 9
    1356:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__>
    135a:	dc 01       	movw	r26, r24
    135c:	2b 01       	movw	r4, r22
    135e:	fa 01       	movw	r30, r20
    1360:	9c 91       	ld	r25, X
    1362:	92 30       	cpi	r25, 0x02	; 2
    1364:	08 f4       	brcc	.+2      	; 0x1368 <_fpadd_parts+0x1a>
    1366:	39 c1       	rjmp	.+626    	; 0x15da <_fpadd_parts+0x28c>
    1368:	eb 01       	movw	r28, r22
    136a:	88 81       	ld	r24, Y
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	08 f4       	brcc	.+2      	; 0x1372 <_fpadd_parts+0x24>
    1370:	33 c1       	rjmp	.+614    	; 0x15d8 <_fpadd_parts+0x28a>
    1372:	94 30       	cpi	r25, 0x04	; 4
    1374:	69 f4       	brne	.+26     	; 0x1390 <_fpadd_parts+0x42>
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	09 f0       	breq	.+2      	; 0x137c <_fpadd_parts+0x2e>
    137a:	2f c1       	rjmp	.+606    	; 0x15da <_fpadd_parts+0x28c>
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	9c 91       	ld	r25, X
    1380:	11 97       	sbiw	r26, 0x01	; 1
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	98 17       	cp	r25, r24
    1386:	09 f4       	brne	.+2      	; 0x138a <_fpadd_parts+0x3c>
    1388:	28 c1       	rjmp	.+592    	; 0x15da <_fpadd_parts+0x28c>
    138a:	a9 e3       	ldi	r26, 0x39	; 57
    138c:	b1 e0       	ldi	r27, 0x01	; 1
    138e:	25 c1       	rjmp	.+586    	; 0x15da <_fpadd_parts+0x28c>
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	09 f4       	brne	.+2      	; 0x1396 <_fpadd_parts+0x48>
    1394:	21 c1       	rjmp	.+578    	; 0x15d8 <_fpadd_parts+0x28a>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	a9 f4       	brne	.+42     	; 0x13c4 <_fpadd_parts+0x76>
    139a:	92 30       	cpi	r25, 0x02	; 2
    139c:	09 f0       	breq	.+2      	; 0x13a0 <_fpadd_parts+0x52>
    139e:	1d c1       	rjmp	.+570    	; 0x15da <_fpadd_parts+0x28c>
    13a0:	9a 01       	movw	r18, r20
    13a2:	ad 01       	movw	r20, r26
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	ea 01       	movw	r28, r20
    13a8:	09 90       	ld	r0, Y+
    13aa:	ae 01       	movw	r20, r28
    13ac:	e9 01       	movw	r28, r18
    13ae:	09 92       	st	Y+, r0
    13b0:	9e 01       	movw	r18, r28
    13b2:	81 50       	subi	r24, 0x01	; 1
    13b4:	c1 f7       	brne	.-16     	; 0x13a6 <_fpadd_parts+0x58>
    13b6:	e2 01       	movw	r28, r4
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	9c 91       	ld	r25, X
    13be:	89 23       	and	r24, r25
    13c0:	81 83       	std	Z+1, r24	; 0x01
    13c2:	08 c1       	rjmp	.+528    	; 0x15d4 <_fpadd_parts+0x286>
    13c4:	92 30       	cpi	r25, 0x02	; 2
    13c6:	09 f4       	brne	.+2      	; 0x13ca <_fpadd_parts+0x7c>
    13c8:	07 c1       	rjmp	.+526    	; 0x15d8 <_fpadd_parts+0x28a>
    13ca:	12 96       	adiw	r26, 0x02	; 2
    13cc:	2d 90       	ld	r2, X+
    13ce:	3c 90       	ld	r3, X
    13d0:	13 97       	sbiw	r26, 0x03	; 3
    13d2:	eb 01       	movw	r28, r22
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	14 96       	adiw	r26, 0x04	; 4
    13da:	ad 90       	ld	r10, X+
    13dc:	bd 90       	ld	r11, X+
    13de:	cd 90       	ld	r12, X+
    13e0:	dc 90       	ld	r13, X
    13e2:	17 97       	sbiw	r26, 0x07	; 7
    13e4:	ec 80       	ldd	r14, Y+4	; 0x04
    13e6:	fd 80       	ldd	r15, Y+5	; 0x05
    13e8:	0e 81       	ldd	r16, Y+6	; 0x06
    13ea:	1f 81       	ldd	r17, Y+7	; 0x07
    13ec:	91 01       	movw	r18, r2
    13ee:	28 1b       	sub	r18, r24
    13f0:	39 0b       	sbc	r19, r25
    13f2:	b9 01       	movw	r22, r18
    13f4:	37 ff       	sbrs	r19, 7
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <_fpadd_parts+0xb2>
    13f8:	66 27       	eor	r22, r22
    13fa:	77 27       	eor	r23, r23
    13fc:	62 1b       	sub	r22, r18
    13fe:	73 0b       	sbc	r23, r19
    1400:	60 32       	cpi	r22, 0x20	; 32
    1402:	71 05       	cpc	r23, r1
    1404:	0c f0       	brlt	.+2      	; 0x1408 <_fpadd_parts+0xba>
    1406:	61 c0       	rjmp	.+194    	; 0x14ca <_fpadd_parts+0x17c>
    1408:	12 16       	cp	r1, r18
    140a:	13 06       	cpc	r1, r19
    140c:	6c f5       	brge	.+90     	; 0x1468 <_fpadd_parts+0x11a>
    140e:	37 01       	movw	r6, r14
    1410:	48 01       	movw	r8, r16
    1412:	06 2e       	mov	r0, r22
    1414:	04 c0       	rjmp	.+8      	; 0x141e <_fpadd_parts+0xd0>
    1416:	96 94       	lsr	r9
    1418:	87 94       	ror	r8
    141a:	77 94       	ror	r7
    141c:	67 94       	ror	r6
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <_fpadd_parts+0xc8>
    1422:	21 e0       	ldi	r18, 0x01	; 1
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <_fpadd_parts+0xe6>
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	44 1f       	adc	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	6a 95       	dec	r22
    1436:	d2 f7       	brpl	.-12     	; 0x142c <_fpadd_parts+0xde>
    1438:	21 50       	subi	r18, 0x01	; 1
    143a:	30 40       	sbci	r19, 0x00	; 0
    143c:	40 40       	sbci	r20, 0x00	; 0
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	2e 21       	and	r18, r14
    1442:	3f 21       	and	r19, r15
    1444:	40 23       	and	r20, r16
    1446:	51 23       	and	r21, r17
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	41 05       	cpc	r20, r1
    144e:	51 05       	cpc	r21, r1
    1450:	21 f0       	breq	.+8      	; 0x145a <_fpadd_parts+0x10c>
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	79 01       	movw	r14, r18
    145c:	8a 01       	movw	r16, r20
    145e:	e6 28       	or	r14, r6
    1460:	f7 28       	or	r15, r7
    1462:	08 29       	or	r16, r8
    1464:	19 29       	or	r17, r9
    1466:	3c c0       	rjmp	.+120    	; 0x14e0 <_fpadd_parts+0x192>
    1468:	23 2b       	or	r18, r19
    146a:	d1 f1       	breq	.+116    	; 0x14e0 <_fpadd_parts+0x192>
    146c:	26 0e       	add	r2, r22
    146e:	37 1e       	adc	r3, r23
    1470:	35 01       	movw	r6, r10
    1472:	46 01       	movw	r8, r12
    1474:	06 2e       	mov	r0, r22
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <_fpadd_parts+0x132>
    1478:	96 94       	lsr	r9
    147a:	87 94       	ror	r8
    147c:	77 94       	ror	r7
    147e:	67 94       	ror	r6
    1480:	0a 94       	dec	r0
    1482:	d2 f7       	brpl	.-12     	; 0x1478 <_fpadd_parts+0x12a>
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <_fpadd_parts+0x148>
    148e:	22 0f       	add	r18, r18
    1490:	33 1f       	adc	r19, r19
    1492:	44 1f       	adc	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	6a 95       	dec	r22
    1498:	d2 f7       	brpl	.-12     	; 0x148e <_fpadd_parts+0x140>
    149a:	21 50       	subi	r18, 0x01	; 1
    149c:	30 40       	sbci	r19, 0x00	; 0
    149e:	40 40       	sbci	r20, 0x00	; 0
    14a0:	50 40       	sbci	r21, 0x00	; 0
    14a2:	2a 21       	and	r18, r10
    14a4:	3b 21       	and	r19, r11
    14a6:	4c 21       	and	r20, r12
    14a8:	5d 21       	and	r21, r13
    14aa:	21 15       	cp	r18, r1
    14ac:	31 05       	cpc	r19, r1
    14ae:	41 05       	cpc	r20, r1
    14b0:	51 05       	cpc	r21, r1
    14b2:	21 f0       	breq	.+8      	; 0x14bc <_fpadd_parts+0x16e>
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	59 01       	movw	r10, r18
    14be:	6a 01       	movw	r12, r20
    14c0:	a6 28       	or	r10, r6
    14c2:	b7 28       	or	r11, r7
    14c4:	c8 28       	or	r12, r8
    14c6:	d9 28       	or	r13, r9
    14c8:	0b c0       	rjmp	.+22     	; 0x14e0 <_fpadd_parts+0x192>
    14ca:	82 15       	cp	r24, r2
    14cc:	93 05       	cpc	r25, r3
    14ce:	2c f0       	brlt	.+10     	; 0x14da <_fpadd_parts+0x18c>
    14d0:	1c 01       	movw	r2, r24
    14d2:	aa 24       	eor	r10, r10
    14d4:	bb 24       	eor	r11, r11
    14d6:	65 01       	movw	r12, r10
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <_fpadd_parts+0x192>
    14da:	ee 24       	eor	r14, r14
    14dc:	ff 24       	eor	r15, r15
    14de:	87 01       	movw	r16, r14
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	9c 91       	ld	r25, X
    14e4:	d2 01       	movw	r26, r4
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	8c 91       	ld	r24, X
    14ea:	98 17       	cp	r25, r24
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <_fpadd_parts+0x1a2>
    14ee:	45 c0       	rjmp	.+138    	; 0x157a <_fpadd_parts+0x22c>
    14f0:	99 23       	and	r25, r25
    14f2:	39 f0       	breq	.+14     	; 0x1502 <_fpadd_parts+0x1b4>
    14f4:	a8 01       	movw	r20, r16
    14f6:	97 01       	movw	r18, r14
    14f8:	2a 19       	sub	r18, r10
    14fa:	3b 09       	sbc	r19, r11
    14fc:	4c 09       	sbc	r20, r12
    14fe:	5d 09       	sbc	r21, r13
    1500:	06 c0       	rjmp	.+12     	; 0x150e <_fpadd_parts+0x1c0>
    1502:	a6 01       	movw	r20, r12
    1504:	95 01       	movw	r18, r10
    1506:	2e 19       	sub	r18, r14
    1508:	3f 09       	sbc	r19, r15
    150a:	40 0b       	sbc	r20, r16
    150c:	51 0b       	sbc	r21, r17
    150e:	57 fd       	sbrc	r21, 7
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <_fpadd_parts+0x1d4>
    1512:	11 82       	std	Z+1, r1	; 0x01
    1514:	33 82       	std	Z+3, r3	; 0x03
    1516:	22 82       	std	Z+2, r2	; 0x02
    1518:	24 83       	std	Z+4, r18	; 0x04
    151a:	35 83       	std	Z+5, r19	; 0x05
    151c:	46 83       	std	Z+6, r20	; 0x06
    151e:	57 83       	std	Z+7, r21	; 0x07
    1520:	1d c0       	rjmp	.+58     	; 0x155c <_fpadd_parts+0x20e>
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	81 83       	std	Z+1, r24	; 0x01
    1526:	33 82       	std	Z+3, r3	; 0x03
    1528:	22 82       	std	Z+2, r2	; 0x02
    152a:	88 27       	eor	r24, r24
    152c:	99 27       	eor	r25, r25
    152e:	dc 01       	movw	r26, r24
    1530:	82 1b       	sub	r24, r18
    1532:	93 0b       	sbc	r25, r19
    1534:	a4 0b       	sbc	r26, r20
    1536:	b5 0b       	sbc	r27, r21
    1538:	84 83       	std	Z+4, r24	; 0x04
    153a:	95 83       	std	Z+5, r25	; 0x05
    153c:	a6 83       	std	Z+6, r26	; 0x06
    153e:	b7 83       	std	Z+7, r27	; 0x07
    1540:	0d c0       	rjmp	.+26     	; 0x155c <_fpadd_parts+0x20e>
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	44 1f       	adc	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	24 83       	std	Z+4, r18	; 0x04
    154c:	35 83       	std	Z+5, r19	; 0x05
    154e:	46 83       	std	Z+6, r20	; 0x06
    1550:	57 83       	std	Z+7, r21	; 0x07
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	93 83       	std	Z+3, r25	; 0x03
    155a:	82 83       	std	Z+2, r24	; 0x02
    155c:	24 81       	ldd	r18, Z+4	; 0x04
    155e:	35 81       	ldd	r19, Z+5	; 0x05
    1560:	46 81       	ldd	r20, Z+6	; 0x06
    1562:	57 81       	ldd	r21, Z+7	; 0x07
    1564:	da 01       	movw	r26, r20
    1566:	c9 01       	movw	r24, r18
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	a1 09       	sbc	r26, r1
    156c:	b1 09       	sbc	r27, r1
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	af 4f       	sbci	r26, 0xFF	; 255
    1574:	bf 43       	sbci	r27, 0x3F	; 63
    1576:	28 f3       	brcs	.-54     	; 0x1542 <_fpadd_parts+0x1f4>
    1578:	0b c0       	rjmp	.+22     	; 0x1590 <_fpadd_parts+0x242>
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	33 82       	std	Z+3, r3	; 0x03
    157e:	22 82       	std	Z+2, r2	; 0x02
    1580:	ea 0c       	add	r14, r10
    1582:	fb 1c       	adc	r15, r11
    1584:	0c 1d       	adc	r16, r12
    1586:	1d 1d       	adc	r17, r13
    1588:	e4 82       	std	Z+4, r14	; 0x04
    158a:	f5 82       	std	Z+5, r15	; 0x05
    158c:	06 83       	std	Z+6, r16	; 0x06
    158e:	17 83       	std	Z+7, r17	; 0x07
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	80 83       	st	Z, r24
    1594:	24 81       	ldd	r18, Z+4	; 0x04
    1596:	35 81       	ldd	r19, Z+5	; 0x05
    1598:	46 81       	ldd	r20, Z+6	; 0x06
    159a:	57 81       	ldd	r21, Z+7	; 0x07
    159c:	57 ff       	sbrs	r21, 7
    159e:	1a c0       	rjmp	.+52     	; 0x15d4 <_fpadd_parts+0x286>
    15a0:	c9 01       	movw	r24, r18
    15a2:	aa 27       	eor	r26, r26
    15a4:	97 fd       	sbrc	r25, 7
    15a6:	a0 95       	com	r26
    15a8:	ba 2f       	mov	r27, r26
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	a0 70       	andi	r26, 0x00	; 0
    15b0:	b0 70       	andi	r27, 0x00	; 0
    15b2:	56 95       	lsr	r21
    15b4:	47 95       	ror	r20
    15b6:	37 95       	ror	r19
    15b8:	27 95       	ror	r18
    15ba:	82 2b       	or	r24, r18
    15bc:	93 2b       	or	r25, r19
    15be:	a4 2b       	or	r26, r20
    15c0:	b5 2b       	or	r27, r21
    15c2:	84 83       	std	Z+4, r24	; 0x04
    15c4:	95 83       	std	Z+5, r25	; 0x05
    15c6:	a6 83       	std	Z+6, r26	; 0x06
    15c8:	b7 83       	std	Z+7, r27	; 0x07
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	93 83       	std	Z+3, r25	; 0x03
    15d2:	82 83       	std	Z+2, r24	; 0x02
    15d4:	df 01       	movw	r26, r30
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <_fpadd_parts+0x28c>
    15d8:	d2 01       	movw	r26, r4
    15da:	cd 01       	movw	r24, r26
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	e2 e1       	ldi	r30, 0x12	; 18
    15e2:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__>

000015e6 <__subsf3>:
    15e6:	a0 e2       	ldi	r26, 0x20	; 32
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 ef       	ldi	r30, 0xF9	; 249
    15ec:	fa e0       	ldi	r31, 0x0A	; 10
    15ee:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x18>
    15f2:	69 83       	std	Y+1, r22	; 0x01
    15f4:	7a 83       	std	Y+2, r23	; 0x02
    15f6:	8b 83       	std	Y+3, r24	; 0x03
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	2d 83       	std	Y+5, r18	; 0x05
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	4f 83       	std	Y+7, r20	; 0x07
    1600:	58 87       	std	Y+8, r21	; 0x08
    1602:	e9 e0       	ldi	r30, 0x09	; 9
    1604:	ee 2e       	mov	r14, r30
    1606:	f1 2c       	mov	r15, r1
    1608:	ec 0e       	add	r14, r28
    160a:	fd 1e       	adc	r15, r29
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	b7 01       	movw	r22, r14
    1612:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1616:	8e 01       	movw	r16, r28
    1618:	0f 5e       	subi	r16, 0xEF	; 239
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	ce 01       	movw	r24, r28
    161e:	05 96       	adiw	r24, 0x05	; 5
    1620:	b8 01       	movw	r22, r16
    1622:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1626:	8a 89       	ldd	r24, Y+18	; 0x12
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	89 27       	eor	r24, r25
    162c:	8a 8b       	std	Y+18, r24	; 0x12
    162e:	c7 01       	movw	r24, r14
    1630:	b8 01       	movw	r22, r16
    1632:	ae 01       	movw	r20, r28
    1634:	47 5e       	subi	r20, 0xE7	; 231
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	0e 94 a7 09 	call	0x134e	; 0x134e <_fpadd_parts>
    163c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    1640:	a0 96       	adiw	r28, 0x20	; 32
    1642:	e6 e0       	ldi	r30, 0x06	; 6
    1644:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

00001648 <__addsf3>:
    1648:	a0 e2       	ldi	r26, 0x20	; 32
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ea e2       	ldi	r30, 0x2A	; 42
    164e:	fb e0       	ldi	r31, 0x0B	; 11
    1650:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x18>
    1654:	69 83       	std	Y+1, r22	; 0x01
    1656:	7a 83       	std	Y+2, r23	; 0x02
    1658:	8b 83       	std	Y+3, r24	; 0x03
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	2d 83       	std	Y+5, r18	; 0x05
    165e:	3e 83       	std	Y+6, r19	; 0x06
    1660:	4f 83       	std	Y+7, r20	; 0x07
    1662:	58 87       	std	Y+8, r21	; 0x08
    1664:	f9 e0       	ldi	r31, 0x09	; 9
    1666:	ef 2e       	mov	r14, r31
    1668:	f1 2c       	mov	r15, r1
    166a:	ec 0e       	add	r14, r28
    166c:	fd 1e       	adc	r15, r29
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	b7 01       	movw	r22, r14
    1674:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1678:	8e 01       	movw	r16, r28
    167a:	0f 5e       	subi	r16, 0xEF	; 239
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	ce 01       	movw	r24, r28
    1680:	05 96       	adiw	r24, 0x05	; 5
    1682:	b8 01       	movw	r22, r16
    1684:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1688:	c7 01       	movw	r24, r14
    168a:	b8 01       	movw	r22, r16
    168c:	ae 01       	movw	r20, r28
    168e:	47 5e       	subi	r20, 0xE7	; 231
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	0e 94 a7 09 	call	0x134e	; 0x134e <_fpadd_parts>
    1696:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    169a:	a0 96       	adiw	r28, 0x20	; 32
    169c:	e6 e0       	ldi	r30, 0x06	; 6
    169e:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

000016a2 <__mulsf3>:
    16a2:	a0 e2       	ldi	r26, 0x20	; 32
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e5       	ldi	r30, 0x57	; 87
    16a8:	fb e0       	ldi	r31, 0x0B	; 11
    16aa:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__>
    16ae:	69 83       	std	Y+1, r22	; 0x01
    16b0:	7a 83       	std	Y+2, r23	; 0x02
    16b2:	8b 83       	std	Y+3, r24	; 0x03
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	2d 83       	std	Y+5, r18	; 0x05
    16b8:	3e 83       	std	Y+6, r19	; 0x06
    16ba:	4f 83       	std	Y+7, r20	; 0x07
    16bc:	58 87       	std	Y+8, r21	; 0x08
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	be 01       	movw	r22, r28
    16c4:	67 5f       	subi	r22, 0xF7	; 247
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    16cc:	ce 01       	movw	r24, r28
    16ce:	05 96       	adiw	r24, 0x05	; 5
    16d0:	be 01       	movw	r22, r28
    16d2:	6f 5e       	subi	r22, 0xEF	; 239
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    16da:	99 85       	ldd	r25, Y+9	; 0x09
    16dc:	92 30       	cpi	r25, 0x02	; 2
    16de:	88 f0       	brcs	.+34     	; 0x1702 <__mulsf3+0x60>
    16e0:	89 89       	ldd	r24, Y+17	; 0x11
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	c8 f0       	brcs	.+50     	; 0x1718 <__mulsf3+0x76>
    16e6:	94 30       	cpi	r25, 0x04	; 4
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <__mulsf3+0x4e>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	51 f4       	brne	.+20     	; 0x1702 <__mulsf3+0x60>
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <__mulsf3+0x56>
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	29 f4       	brne	.+10     	; 0x16fe <__mulsf3+0x5c>
    16f4:	92 30       	cpi	r25, 0x02	; 2
    16f6:	81 f4       	brne	.+32     	; 0x1718 <__mulsf3+0x76>
    16f8:	89 e3       	ldi	r24, 0x39	; 57
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	c6 c0       	rjmp	.+396    	; 0x188a <__mulsf3+0x1e8>
    16fe:	92 30       	cpi	r25, 0x02	; 2
    1700:	49 f4       	brne	.+18     	; 0x1714 <__mulsf3+0x72>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	8a 89       	ldd	r24, Y+18	; 0x12
    1708:	98 13       	cpse	r25, r24
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	2a 87       	std	Y+10, r18	; 0x0a
    170e:	ce 01       	movw	r24, r28
    1710:	09 96       	adiw	r24, 0x09	; 9
    1712:	bb c0       	rjmp	.+374    	; 0x188a <__mulsf3+0x1e8>
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	49 f4       	brne	.+18     	; 0x172a <__mulsf3+0x88>
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	8a 89       	ldd	r24, Y+18	; 0x12
    171e:	98 13       	cpse	r25, r24
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	2a 8b       	std	Y+18, r18	; 0x12
    1724:	ce 01       	movw	r24, r28
    1726:	41 96       	adiw	r24, 0x11	; 17
    1728:	b0 c0       	rjmp	.+352    	; 0x188a <__mulsf3+0x1e8>
    172a:	2d 84       	ldd	r2, Y+13	; 0x0d
    172c:	3e 84       	ldd	r3, Y+14	; 0x0e
    172e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1730:	58 88       	ldd	r5, Y+16	; 0x10
    1732:	6d 88       	ldd	r6, Y+21	; 0x15
    1734:	7e 88       	ldd	r7, Y+22	; 0x16
    1736:	8f 88       	ldd	r8, Y+23	; 0x17
    1738:	98 8c       	ldd	r9, Y+24	; 0x18
    173a:	ee 24       	eor	r14, r14
    173c:	ff 24       	eor	r15, r15
    173e:	87 01       	movw	r16, r14
    1740:	aa 24       	eor	r10, r10
    1742:	bb 24       	eor	r11, r11
    1744:	65 01       	movw	r12, r10
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	e0 e0       	ldi	r30, 0x00	; 0
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	c1 01       	movw	r24, r2
    1754:	81 70       	andi	r24, 0x01	; 1
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	89 2b       	or	r24, r25
    175a:	e9 f0       	breq	.+58     	; 0x1796 <__mulsf3+0xf4>
    175c:	e6 0c       	add	r14, r6
    175e:	f7 1c       	adc	r15, r7
    1760:	08 1d       	adc	r16, r8
    1762:	19 1d       	adc	r17, r9
    1764:	9a 01       	movw	r18, r20
    1766:	ab 01       	movw	r20, r22
    1768:	2a 0d       	add	r18, r10
    176a:	3b 1d       	adc	r19, r11
    176c:	4c 1d       	adc	r20, r12
    176e:	5d 1d       	adc	r21, r13
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e6 14       	cp	r14, r6
    177a:	f7 04       	cpc	r15, r7
    177c:	08 05       	cpc	r16, r8
    177e:	19 05       	cpc	r17, r9
    1780:	20 f4       	brcc	.+8      	; 0x178a <__mulsf3+0xe8>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ba 01       	movw	r22, r20
    178c:	a9 01       	movw	r20, r18
    178e:	48 0f       	add	r20, r24
    1790:	59 1f       	adc	r21, r25
    1792:	6a 1f       	adc	r22, r26
    1794:	7b 1f       	adc	r23, r27
    1796:	aa 0c       	add	r10, r10
    1798:	bb 1c       	adc	r11, r11
    179a:	cc 1c       	adc	r12, r12
    179c:	dd 1c       	adc	r13, r13
    179e:	97 fe       	sbrs	r9, 7
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <__mulsf3+0x110>
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	a8 2a       	or	r10, r24
    17ac:	b9 2a       	or	r11, r25
    17ae:	ca 2a       	or	r12, r26
    17b0:	db 2a       	or	r13, r27
    17b2:	31 96       	adiw	r30, 0x01	; 1
    17b4:	e0 32       	cpi	r30, 0x20	; 32
    17b6:	f1 05       	cpc	r31, r1
    17b8:	49 f0       	breq	.+18     	; 0x17cc <__mulsf3+0x12a>
    17ba:	66 0c       	add	r6, r6
    17bc:	77 1c       	adc	r7, r7
    17be:	88 1c       	adc	r8, r8
    17c0:	99 1c       	adc	r9, r9
    17c2:	56 94       	lsr	r5
    17c4:	47 94       	ror	r4
    17c6:	37 94       	ror	r3
    17c8:	27 94       	ror	r2
    17ca:	c3 cf       	rjmp	.-122    	; 0x1752 <__mulsf3+0xb0>
    17cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    17ce:	ea 89       	ldd	r30, Y+18	; 0x12
    17d0:	2b 89       	ldd	r18, Y+19	; 0x13
    17d2:	3c 89       	ldd	r19, Y+20	; 0x14
    17d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d8:	28 0f       	add	r18, r24
    17da:	39 1f       	adc	r19, r25
    17dc:	2e 5f       	subi	r18, 0xFE	; 254
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	17 c0       	rjmp	.+46     	; 0x1810 <__mulsf3+0x16e>
    17e2:	ca 01       	movw	r24, r20
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	89 2b       	or	r24, r25
    17ea:	61 f0       	breq	.+24     	; 0x1804 <__mulsf3+0x162>
    17ec:	16 95       	lsr	r17
    17ee:	07 95       	ror	r16
    17f0:	f7 94       	ror	r15
    17f2:	e7 94       	ror	r14
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e8       	ldi	r27, 0x80	; 128
    17fc:	e8 2a       	or	r14, r24
    17fe:	f9 2a       	or	r15, r25
    1800:	0a 2b       	or	r16, r26
    1802:	1b 2b       	or	r17, r27
    1804:	76 95       	lsr	r23
    1806:	67 95       	ror	r22
    1808:	57 95       	ror	r21
    180a:	47 95       	ror	r20
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	77 fd       	sbrc	r23, 7
    1812:	e7 cf       	rjmp	.-50     	; 0x17e2 <__mulsf3+0x140>
    1814:	0c c0       	rjmp	.+24     	; 0x182e <__mulsf3+0x18c>
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	66 1f       	adc	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	17 fd       	sbrc	r17, 7
    1820:	41 60       	ori	r20, 0x01	; 1
    1822:	ee 0c       	add	r14, r14
    1824:	ff 1c       	adc	r15, r15
    1826:	00 1f       	adc	r16, r16
    1828:	11 1f       	adc	r17, r17
    182a:	21 50       	subi	r18, 0x01	; 1
    182c:	30 40       	sbci	r19, 0x00	; 0
    182e:	40 30       	cpi	r20, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	59 07       	cpc	r21, r25
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	69 07       	cpc	r22, r25
    1838:	90 e4       	ldi	r25, 0x40	; 64
    183a:	79 07       	cpc	r23, r25
    183c:	60 f3       	brcs	.-40     	; 0x1816 <__mulsf3+0x174>
    183e:	2b 8f       	std	Y+27, r18	; 0x1b
    1840:	3c 8f       	std	Y+28, r19	; 0x1c
    1842:	db 01       	movw	r26, r22
    1844:	ca 01       	movw	r24, r20
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	90 70       	andi	r25, 0x00	; 0
    184a:	a0 70       	andi	r26, 0x00	; 0
    184c:	b0 70       	andi	r27, 0x00	; 0
    184e:	80 34       	cpi	r24, 0x40	; 64
    1850:	91 05       	cpc	r25, r1
    1852:	a1 05       	cpc	r26, r1
    1854:	b1 05       	cpc	r27, r1
    1856:	61 f4       	brne	.+24     	; 0x1870 <__mulsf3+0x1ce>
    1858:	47 fd       	sbrc	r20, 7
    185a:	0a c0       	rjmp	.+20     	; 0x1870 <__mulsf3+0x1ce>
    185c:	e1 14       	cp	r14, r1
    185e:	f1 04       	cpc	r15, r1
    1860:	01 05       	cpc	r16, r1
    1862:	11 05       	cpc	r17, r1
    1864:	29 f0       	breq	.+10     	; 0x1870 <__mulsf3+0x1ce>
    1866:	40 5c       	subi	r20, 0xC0	; 192
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	6f 4f       	sbci	r22, 0xFF	; 255
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	40 78       	andi	r20, 0x80	; 128
    1870:	1a 8e       	std	Y+26, r1	; 0x1a
    1872:	fe 17       	cp	r31, r30
    1874:	11 f0       	breq	.+4      	; 0x187a <__mulsf3+0x1d8>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8a 8f       	std	Y+26, r24	; 0x1a
    187a:	4d 8f       	std	Y+29, r20	; 0x1d
    187c:	5e 8f       	std	Y+30, r21	; 0x1e
    187e:	6f 8f       	std	Y+31, r22	; 0x1f
    1880:	78 a3       	std	Y+32, r23	; 0x20
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	89 8f       	std	Y+25, r24	; 0x19
    1886:	ce 01       	movw	r24, r28
    1888:	49 96       	adiw	r24, 0x19	; 25
    188a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    188e:	a0 96       	adiw	r28, 0x20	; 32
    1890:	e2 e1       	ldi	r30, 0x12	; 18
    1892:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__>

00001896 <__divsf3>:
    1896:	a8 e1       	ldi	r26, 0x18	; 24
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e5       	ldi	r30, 0x51	; 81
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__prologue_saves__+0x10>
    18a2:	69 83       	std	Y+1, r22	; 0x01
    18a4:	7a 83       	std	Y+2, r23	; 0x02
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	2d 83       	std	Y+5, r18	; 0x05
    18ac:	3e 83       	std	Y+6, r19	; 0x06
    18ae:	4f 83       	std	Y+7, r20	; 0x07
    18b0:	58 87       	std	Y+8, r21	; 0x08
    18b2:	b9 e0       	ldi	r27, 0x09	; 9
    18b4:	eb 2e       	mov	r14, r27
    18b6:	f1 2c       	mov	r15, r1
    18b8:	ec 0e       	add	r14, r28
    18ba:	fd 1e       	adc	r15, r29
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	b7 01       	movw	r22, r14
    18c2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    18c6:	8e 01       	movw	r16, r28
    18c8:	0f 5e       	subi	r16, 0xEF	; 239
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	ce 01       	movw	r24, r28
    18ce:	05 96       	adiw	r24, 0x05	; 5
    18d0:	b8 01       	movw	r22, r16
    18d2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    18d6:	29 85       	ldd	r18, Y+9	; 0x09
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	08 f4       	brcc	.+2      	; 0x18de <__divsf3+0x48>
    18dc:	7e c0       	rjmp	.+252    	; 0x19da <__divsf3+0x144>
    18de:	39 89       	ldd	r19, Y+17	; 0x11
    18e0:	32 30       	cpi	r19, 0x02	; 2
    18e2:	10 f4       	brcc	.+4      	; 0x18e8 <__divsf3+0x52>
    18e4:	b8 01       	movw	r22, r16
    18e6:	7c c0       	rjmp	.+248    	; 0x19e0 <__divsf3+0x14a>
    18e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ea:	9a 89       	ldd	r25, Y+18	; 0x12
    18ec:	89 27       	eor	r24, r25
    18ee:	8a 87       	std	Y+10, r24	; 0x0a
    18f0:	24 30       	cpi	r18, 0x04	; 4
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <__divsf3+0x62>
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 f4       	brne	.+12     	; 0x1904 <__divsf3+0x6e>
    18f8:	23 17       	cp	r18, r19
    18fa:	09 f0       	breq	.+2      	; 0x18fe <__divsf3+0x68>
    18fc:	6e c0       	rjmp	.+220    	; 0x19da <__divsf3+0x144>
    18fe:	69 e3       	ldi	r22, 0x39	; 57
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	6e c0       	rjmp	.+220    	; 0x19e0 <__divsf3+0x14a>
    1904:	34 30       	cpi	r19, 0x04	; 4
    1906:	39 f4       	brne	.+14     	; 0x1916 <__divsf3+0x80>
    1908:	1d 86       	std	Y+13, r1	; 0x0d
    190a:	1e 86       	std	Y+14, r1	; 0x0e
    190c:	1f 86       	std	Y+15, r1	; 0x0f
    190e:	18 8a       	std	Y+16, r1	; 0x10
    1910:	1c 86       	std	Y+12, r1	; 0x0c
    1912:	1b 86       	std	Y+11, r1	; 0x0b
    1914:	04 c0       	rjmp	.+8      	; 0x191e <__divsf3+0x88>
    1916:	32 30       	cpi	r19, 0x02	; 2
    1918:	21 f4       	brne	.+8      	; 0x1922 <__divsf3+0x8c>
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	89 87       	std	Y+9, r24	; 0x09
    191e:	b7 01       	movw	r22, r14
    1920:	5f c0       	rjmp	.+190    	; 0x19e0 <__divsf3+0x14a>
    1922:	2b 85       	ldd	r18, Y+11	; 0x0b
    1924:	3c 85       	ldd	r19, Y+12	; 0x0c
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	28 1b       	sub	r18, r24
    192c:	39 0b       	sbc	r19, r25
    192e:	3c 87       	std	Y+12, r19	; 0x0c
    1930:	2b 87       	std	Y+11, r18	; 0x0b
    1932:	ed 84       	ldd	r14, Y+13	; 0x0d
    1934:	fe 84       	ldd	r15, Y+14	; 0x0e
    1936:	0f 85       	ldd	r16, Y+15	; 0x0f
    1938:	18 89       	ldd	r17, Y+16	; 0x10
    193a:	ad 88       	ldd	r10, Y+21	; 0x15
    193c:	be 88       	ldd	r11, Y+22	; 0x16
    193e:	cf 88       	ldd	r12, Y+23	; 0x17
    1940:	d8 8c       	ldd	r13, Y+24	; 0x18
    1942:	ea 14       	cp	r14, r10
    1944:	fb 04       	cpc	r15, r11
    1946:	0c 05       	cpc	r16, r12
    1948:	1d 05       	cpc	r17, r13
    194a:	40 f4       	brcc	.+16     	; 0x195c <__divsf3+0xc6>
    194c:	ee 0c       	add	r14, r14
    194e:	ff 1c       	adc	r15, r15
    1950:	00 1f       	adc	r16, r16
    1952:	11 1f       	adc	r17, r17
    1954:	21 50       	subi	r18, 0x01	; 1
    1956:	30 40       	sbci	r19, 0x00	; 0
    1958:	3c 87       	std	Y+12, r19	; 0x0c
    195a:	2b 87       	std	Y+11, r18	; 0x0b
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e4       	ldi	r27, 0x40	; 64
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	ea 14       	cp	r14, r10
    1972:	fb 04       	cpc	r15, r11
    1974:	0c 05       	cpc	r16, r12
    1976:	1d 05       	cpc	r17, r13
    1978:	40 f0       	brcs	.+16     	; 0x198a <__divsf3+0xf4>
    197a:	28 2b       	or	r18, r24
    197c:	39 2b       	or	r19, r25
    197e:	4a 2b       	or	r20, r26
    1980:	5b 2b       	or	r21, r27
    1982:	ea 18       	sub	r14, r10
    1984:	fb 08       	sbc	r15, r11
    1986:	0c 09       	sbc	r16, r12
    1988:	1d 09       	sbc	r17, r13
    198a:	b6 95       	lsr	r27
    198c:	a7 95       	ror	r26
    198e:	97 95       	ror	r25
    1990:	87 95       	ror	r24
    1992:	ee 0c       	add	r14, r14
    1994:	ff 1c       	adc	r15, r15
    1996:	00 1f       	adc	r16, r16
    1998:	11 1f       	adc	r17, r17
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	6f 31       	cpi	r22, 0x1F	; 31
    19a0:	71 05       	cpc	r23, r1
    19a2:	31 f7       	brne	.-52     	; 0x1970 <__divsf3+0xda>
    19a4:	da 01       	movw	r26, r20
    19a6:	c9 01       	movw	r24, r18
    19a8:	8f 77       	andi	r24, 0x7F	; 127
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	a0 70       	andi	r26, 0x00	; 0
    19ae:	b0 70       	andi	r27, 0x00	; 0
    19b0:	80 34       	cpi	r24, 0x40	; 64
    19b2:	91 05       	cpc	r25, r1
    19b4:	a1 05       	cpc	r26, r1
    19b6:	b1 05       	cpc	r27, r1
    19b8:	61 f4       	brne	.+24     	; 0x19d2 <__divsf3+0x13c>
    19ba:	27 fd       	sbrc	r18, 7
    19bc:	0a c0       	rjmp	.+20     	; 0x19d2 <__divsf3+0x13c>
    19be:	e1 14       	cp	r14, r1
    19c0:	f1 04       	cpc	r15, r1
    19c2:	01 05       	cpc	r16, r1
    19c4:	11 05       	cpc	r17, r1
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <__divsf3+0x13c>
    19c8:	20 5c       	subi	r18, 0xC0	; 192
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	4f 4f       	sbci	r20, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	20 78       	andi	r18, 0x80	; 128
    19d2:	2d 87       	std	Y+13, r18	; 0x0d
    19d4:	3e 87       	std	Y+14, r19	; 0x0e
    19d6:	4f 87       	std	Y+15, r20	; 0x0f
    19d8:	58 8b       	std	Y+16, r21	; 0x10
    19da:	be 01       	movw	r22, r28
    19dc:	67 5f       	subi	r22, 0xF7	; 247
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	cb 01       	movw	r24, r22
    19e2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    19e6:	68 96       	adiw	r28, 0x18	; 24
    19e8:	ea e0       	ldi	r30, 0x0A	; 10
    19ea:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x10>

000019ee <__gtsf2>:
    19ee:	a8 e1       	ldi	r26, 0x18	; 24
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ed ef       	ldi	r30, 0xFD	; 253
    19f4:	fc e0       	ldi	r31, 0x0C	; 12
    19f6:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x18>
    19fa:	69 83       	std	Y+1, r22	; 0x01
    19fc:	7a 83       	std	Y+2, r23	; 0x02
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	2d 83       	std	Y+5, r18	; 0x05
    1a04:	3e 83       	std	Y+6, r19	; 0x06
    1a06:	4f 83       	std	Y+7, r20	; 0x07
    1a08:	58 87       	std	Y+8, r21	; 0x08
    1a0a:	89 e0       	ldi	r24, 0x09	; 9
    1a0c:	e8 2e       	mov	r14, r24
    1a0e:	f1 2c       	mov	r15, r1
    1a10:	ec 0e       	add	r14, r28
    1a12:	fd 1e       	adc	r15, r29
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	b7 01       	movw	r22, r14
    1a1a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1a1e:	8e 01       	movw	r16, r28
    1a20:	0f 5e       	subi	r16, 0xEF	; 239
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	ce 01       	movw	r24, r28
    1a26:	05 96       	adiw	r24, 0x05	; 5
    1a28:	b8 01       	movw	r22, r16
    1a2a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	40 f0       	brcs	.+16     	; 0x1a44 <__gtsf2+0x56>
    1a34:	89 89       	ldd	r24, Y+17	; 0x11
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	28 f0       	brcs	.+10     	; 0x1a44 <__gtsf2+0x56>
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fpcmp_parts_f>
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <__gtsf2+0x58>
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	68 96       	adiw	r28, 0x18	; 24
    1a48:	e6 e0       	ldi	r30, 0x06	; 6
    1a4a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

00001a4e <__ltsf2>:
    1a4e:	a8 e1       	ldi	r26, 0x18	; 24
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ed e2       	ldi	r30, 0x2D	; 45
    1a54:	fd e0       	ldi	r31, 0x0D	; 13
    1a56:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x18>
    1a5a:	69 83       	std	Y+1, r22	; 0x01
    1a5c:	7a 83       	std	Y+2, r23	; 0x02
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	2d 83       	std	Y+5, r18	; 0x05
    1a64:	3e 83       	std	Y+6, r19	; 0x06
    1a66:	4f 83       	std	Y+7, r20	; 0x07
    1a68:	58 87       	std	Y+8, r21	; 0x08
    1a6a:	89 e0       	ldi	r24, 0x09	; 9
    1a6c:	e8 2e       	mov	r14, r24
    1a6e:	f1 2c       	mov	r15, r1
    1a70:	ec 0e       	add	r14, r28
    1a72:	fd 1e       	adc	r15, r29
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	b7 01       	movw	r22, r14
    1a7a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1a7e:	8e 01       	movw	r16, r28
    1a80:	0f 5e       	subi	r16, 0xEF	; 239
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	ce 01       	movw	r24, r28
    1a86:	05 96       	adiw	r24, 0x05	; 5
    1a88:	b8 01       	movw	r22, r16
    1a8a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	40 f0       	brcs	.+16     	; 0x1aa4 <__ltsf2+0x56>
    1a94:	89 89       	ldd	r24, Y+17	; 0x11
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	28 f0       	brcs	.+10     	; 0x1aa4 <__ltsf2+0x56>
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	b8 01       	movw	r22, r16
    1a9e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fpcmp_parts_f>
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <__ltsf2+0x58>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	68 96       	adiw	r28, 0x18	; 24
    1aa8:	e6 e0       	ldi	r30, 0x06	; 6
    1aaa:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

00001aae <__lesf2>:
    1aae:	a8 e1       	ldi	r26, 0x18	; 24
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ed e5       	ldi	r30, 0x5D	; 93
    1ab4:	fd e0       	ldi	r31, 0x0D	; 13
    1ab6:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x18>
    1aba:	69 83       	std	Y+1, r22	; 0x01
    1abc:	7a 83       	std	Y+2, r23	; 0x02
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	2d 83       	std	Y+5, r18	; 0x05
    1ac4:	3e 83       	std	Y+6, r19	; 0x06
    1ac6:	4f 83       	std	Y+7, r20	; 0x07
    1ac8:	58 87       	std	Y+8, r21	; 0x08
    1aca:	89 e0       	ldi	r24, 0x09	; 9
    1acc:	e8 2e       	mov	r14, r24
    1ace:	f1 2c       	mov	r15, r1
    1ad0:	ec 0e       	add	r14, r28
    1ad2:	fd 1e       	adc	r15, r29
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	b7 01       	movw	r22, r14
    1ada:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1ade:	8e 01       	movw	r16, r28
    1ae0:	0f 5e       	subi	r16, 0xEF	; 239
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	05 96       	adiw	r24, 0x05	; 5
    1ae8:	b8 01       	movw	r22, r16
    1aea:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__unpack_f>
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	40 f0       	brcs	.+16     	; 0x1b04 <__lesf2+0x56>
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	28 f0       	brcs	.+10     	; 0x1b04 <__lesf2+0x56>
    1afa:	c7 01       	movw	r24, r14
    1afc:	b8 01       	movw	r22, r16
    1afe:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fpcmp_parts_f>
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <__lesf2+0x58>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	68 96       	adiw	r28, 0x18	; 24
    1b08:	e6 e0       	ldi	r30, 0x06	; 6
    1b0a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

00001b0e <__floatsisf>:
    1b0e:	a8 e0       	ldi	r26, 0x08	; 8
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ed e8       	ldi	r30, 0x8D	; 141
    1b14:	fd e0       	ldi	r31, 0x0D	; 13
    1b16:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x12>
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	da 01       	movw	r26, r20
    1b24:	c9 01       	movw	r24, r18
    1b26:	88 27       	eor	r24, r24
    1b28:	b7 fd       	sbrc	r27, 7
    1b2a:	83 95       	inc	r24
    1b2c:	99 27       	eor	r25, r25
    1b2e:	aa 27       	eor	r26, r26
    1b30:	bb 27       	eor	r27, r27
    1b32:	b8 2e       	mov	r11, r24
    1b34:	21 15       	cp	r18, r1
    1b36:	31 05       	cpc	r19, r1
    1b38:	41 05       	cpc	r20, r1
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <__floatsisf+0x36>
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	3a c0       	rjmp	.+116    	; 0x1bb8 <__floatsisf+0xaa>
    1b44:	88 23       	and	r24, r24
    1b46:	a9 f0       	breq	.+42     	; 0x1b72 <__floatsisf+0x64>
    1b48:	20 30       	cpi	r18, 0x00	; 0
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	38 07       	cpc	r19, r24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	48 07       	cpc	r20, r24
    1b52:	80 e8       	ldi	r24, 0x80	; 128
    1b54:	58 07       	cpc	r21, r24
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <__floatsisf+0x54>
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	9f ec       	ldi	r25, 0xCF	; 207
    1b60:	30 c0       	rjmp	.+96     	; 0x1bc2 <__floatsisf+0xb4>
    1b62:	ee 24       	eor	r14, r14
    1b64:	ff 24       	eor	r15, r15
    1b66:	87 01       	movw	r16, r14
    1b68:	e2 1a       	sub	r14, r18
    1b6a:	f3 0a       	sbc	r15, r19
    1b6c:	04 0b       	sbc	r16, r20
    1b6e:	15 0b       	sbc	r17, r21
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <__floatsisf+0x68>
    1b72:	79 01       	movw	r14, r18
    1b74:	8a 01       	movw	r16, r20
    1b76:	8e e1       	ldi	r24, 0x1E	; 30
    1b78:	c8 2e       	mov	r12, r24
    1b7a:	d1 2c       	mov	r13, r1
    1b7c:	dc 82       	std	Y+4, r13	; 0x04
    1b7e:	cb 82       	std	Y+3, r12	; 0x03
    1b80:	ed 82       	std	Y+5, r14	; 0x05
    1b82:	fe 82       	std	Y+6, r15	; 0x06
    1b84:	0f 83       	std	Y+7, r16	; 0x07
    1b86:	18 87       	std	Y+8, r17	; 0x08
    1b88:	c8 01       	movw	r24, r16
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__clzsi2>
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	18 16       	cp	r1, r24
    1b94:	19 06       	cpc	r1, r25
    1b96:	84 f4       	brge	.+32     	; 0x1bb8 <__floatsisf+0xaa>
    1b98:	08 2e       	mov	r0, r24
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <__floatsisf+0x96>
    1b9c:	ee 0c       	add	r14, r14
    1b9e:	ff 1c       	adc	r15, r15
    1ba0:	00 1f       	adc	r16, r16
    1ba2:	11 1f       	adc	r17, r17
    1ba4:	0a 94       	dec	r0
    1ba6:	d2 f7       	brpl	.-12     	; 0x1b9c <__floatsisf+0x8e>
    1ba8:	ed 82       	std	Y+5, r14	; 0x05
    1baa:	fe 82       	std	Y+6, r15	; 0x06
    1bac:	0f 83       	std	Y+7, r16	; 0x07
    1bae:	18 87       	std	Y+8, r17	; 0x08
    1bb0:	c8 1a       	sub	r12, r24
    1bb2:	d9 0a       	sbc	r13, r25
    1bb4:	dc 82       	std	Y+4, r13	; 0x04
    1bb6:	cb 82       	std	Y+3, r12	; 0x03
    1bb8:	ba 82       	std	Y+2, r11	; 0x02
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    1bc2:	28 96       	adiw	r28, 0x08	; 8
    1bc4:	e9 e0       	ldi	r30, 0x09	; 9
    1bc6:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x12>

00001bca <__floatunsisf>:
    1bca:	a8 e0       	ldi	r26, 0x08	; 8
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb ee       	ldi	r30, 0xEB	; 235
    1bd0:	fd e0       	ldi	r31, 0x0D	; 13
    1bd2:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__prologue_saves__+0x10>
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	8c 01       	movw	r16, r24
    1bda:	61 15       	cp	r22, r1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	81 05       	cpc	r24, r1
    1be0:	91 05       	cpc	r25, r1
    1be2:	19 f4       	brne	.+6      	; 0x1bea <__floatunsisf+0x20>
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	60 c0       	rjmp	.+192    	; 0x1caa <__floatunsisf+0xe0>
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	8e e1       	ldi	r24, 0x1E	; 30
    1bf0:	c8 2e       	mov	r12, r24
    1bf2:	d1 2c       	mov	r13, r1
    1bf4:	dc 82       	std	Y+4, r13	; 0x04
    1bf6:	cb 82       	std	Y+3, r12	; 0x03
    1bf8:	ed 82       	std	Y+5, r14	; 0x05
    1bfa:	fe 82       	std	Y+6, r15	; 0x06
    1bfc:	0f 83       	std	Y+7, r16	; 0x07
    1bfe:	18 87       	std	Y+8, r17	; 0x08
    1c00:	c8 01       	movw	r24, r16
    1c02:	b7 01       	movw	r22, r14
    1c04:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__clzsi2>
    1c08:	fc 01       	movw	r30, r24
    1c0a:	31 97       	sbiw	r30, 0x01	; 1
    1c0c:	f7 ff       	sbrs	r31, 7
    1c0e:	3b c0       	rjmp	.+118    	; 0x1c86 <__floatunsisf+0xbc>
    1c10:	22 27       	eor	r18, r18
    1c12:	33 27       	eor	r19, r19
    1c14:	2e 1b       	sub	r18, r30
    1c16:	3f 0b       	sbc	r19, r31
    1c18:	57 01       	movw	r10, r14
    1c1a:	68 01       	movw	r12, r16
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <__floatunsisf+0x5e>
    1c20:	d6 94       	lsr	r13
    1c22:	c7 94       	ror	r12
    1c24:	b7 94       	ror	r11
    1c26:	a7 94       	ror	r10
    1c28:	0a 94       	dec	r0
    1c2a:	d2 f7       	brpl	.-12     	; 0x1c20 <__floatunsisf+0x56>
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <__floatunsisf+0x7c>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	2a 95       	dec	r18
    1c48:	d2 f7       	brpl	.-12     	; 0x1c3e <__floatunsisf+0x74>
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	a1 09       	sbc	r26, r1
    1c4e:	b1 09       	sbc	r27, r1
    1c50:	8e 21       	and	r24, r14
    1c52:	9f 21       	and	r25, r15
    1c54:	a0 23       	and	r26, r16
    1c56:	b1 23       	and	r27, r17
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	a1 05       	cpc	r26, r1
    1c5c:	b1 05       	cpc	r27, r1
    1c5e:	21 f0       	breq	.+8      	; 0x1c68 <__floatunsisf+0x9e>
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	4a 29       	or	r20, r10
    1c6a:	5b 29       	or	r21, r11
    1c6c:	6c 29       	or	r22, r12
    1c6e:	7d 29       	or	r23, r13
    1c70:	4d 83       	std	Y+5, r20	; 0x05
    1c72:	5e 83       	std	Y+6, r21	; 0x06
    1c74:	6f 83       	std	Y+7, r22	; 0x07
    1c76:	78 87       	std	Y+8, r23	; 0x08
    1c78:	8e e1       	ldi	r24, 0x1E	; 30
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	8e 1b       	sub	r24, r30
    1c7e:	9f 0b       	sbc	r25, r31
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
    1c84:	12 c0       	rjmp	.+36     	; 0x1caa <__floatunsisf+0xe0>
    1c86:	30 97       	sbiw	r30, 0x00	; 0
    1c88:	81 f0       	breq	.+32     	; 0x1caa <__floatunsisf+0xe0>
    1c8a:	0e 2e       	mov	r0, r30
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <__floatunsisf+0xcc>
    1c8e:	ee 0c       	add	r14, r14
    1c90:	ff 1c       	adc	r15, r15
    1c92:	00 1f       	adc	r16, r16
    1c94:	11 1f       	adc	r17, r17
    1c96:	0a 94       	dec	r0
    1c98:	d2 f7       	brpl	.-12     	; 0x1c8e <__floatunsisf+0xc4>
    1c9a:	ed 82       	std	Y+5, r14	; 0x05
    1c9c:	fe 82       	std	Y+6, r15	; 0x06
    1c9e:	0f 83       	std	Y+7, r16	; 0x07
    1ca0:	18 87       	std	Y+8, r17	; 0x08
    1ca2:	ce 1a       	sub	r12, r30
    1ca4:	df 0a       	sbc	r13, r31
    1ca6:	dc 82       	std	Y+4, r13	; 0x04
    1ca8:	cb 82       	std	Y+3, r12	; 0x03
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	ce 01       	movw	r24, r28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__pack_f>
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	ea e0       	ldi	r30, 0x0A	; 10
    1cb8:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x10>

00001cbc <__clzsi2>:
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	7b 01       	movw	r14, r22
    1cc6:	8c 01       	movw	r16, r24
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	e8 16       	cp	r14, r24
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	f8 06       	cpc	r15, r24
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	08 07       	cpc	r16, r24
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	18 07       	cpc	r17, r24
    1cd8:	88 f4       	brcc	.+34     	; 0x1cfc <__clzsi2+0x40>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	e8 16       	cp	r14, r24
    1cde:	f1 04       	cpc	r15, r1
    1ce0:	01 05       	cpc	r16, r1
    1ce2:	11 05       	cpc	r17, r1
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <__clzsi2+0x36>
    1ce6:	28 f0       	brcs	.+10     	; 0x1cf2 <__clzsi2+0x36>
    1ce8:	88 e0       	ldi	r24, 0x08	; 8
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	17 c0       	rjmp	.+46     	; 0x1d20 <__clzsi2+0x64>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	12 c0       	rjmp	.+36     	; 0x1d20 <__clzsi2+0x64>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	e8 16       	cp	r14, r24
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	f8 06       	cpc	r15, r24
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	08 07       	cpc	r16, r24
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	18 07       	cpc	r17, r24
    1d0c:	28 f0       	brcs	.+10     	; 0x1d18 <__clzsi2+0x5c>
    1d0e:	88 e1       	ldi	r24, 0x18	; 24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <__clzsi2+0x64>
    1d18:	80 e1       	ldi	r24, 0x10	; 16
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	20 e2       	ldi	r18, 0x20	; 32
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	28 1b       	sub	r18, r24
    1d2a:	39 0b       	sbc	r19, r25
    1d2c:	4a 0b       	sbc	r20, r26
    1d2e:	5b 0b       	sbc	r21, r27
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <__clzsi2+0x7e>
    1d32:	16 95       	lsr	r17
    1d34:	07 95       	ror	r16
    1d36:	f7 94       	ror	r15
    1d38:	e7 94       	ror	r14
    1d3a:	8a 95       	dec	r24
    1d3c:	d2 f7       	brpl	.-12     	; 0x1d32 <__clzsi2+0x76>
    1d3e:	f7 01       	movw	r30, r14
    1d40:	ef 5b       	subi	r30, 0xBF	; 191
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	80 81       	ld	r24, Z
    1d46:	28 1b       	sub	r18, r24
    1d48:	31 09       	sbc	r19, r1
    1d4a:	41 09       	sbc	r20, r1
    1d4c:	51 09       	sbc	r21, r1
    1d4e:	c9 01       	movw	r24, r18
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <__pack_f>:
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	fc 01       	movw	r30, r24
    1d66:	e4 80       	ldd	r14, Z+4	; 0x04
    1d68:	f5 80       	ldd	r15, Z+5	; 0x05
    1d6a:	06 81       	ldd	r16, Z+6	; 0x06
    1d6c:	17 81       	ldd	r17, Z+7	; 0x07
    1d6e:	d1 80       	ldd	r13, Z+1	; 0x01
    1d70:	80 81       	ld	r24, Z
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	48 f4       	brcc	.+18     	; 0x1d88 <__pack_f+0x2e>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e1       	ldi	r26, 0x10	; 16
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e8 2a       	or	r14, r24
    1d80:	f9 2a       	or	r15, r25
    1d82:	0a 2b       	or	r16, r26
    1d84:	1b 2b       	or	r17, r27
    1d86:	a5 c0       	rjmp	.+330    	; 0x1ed2 <__pack_f+0x178>
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <__pack_f+0x34>
    1d8c:	9f c0       	rjmp	.+318    	; 0x1ecc <__pack_f+0x172>
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	21 f4       	brne	.+8      	; 0x1d9a <__pack_f+0x40>
    1d92:	ee 24       	eor	r14, r14
    1d94:	ff 24       	eor	r15, r15
    1d96:	87 01       	movw	r16, r14
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <__pack_f+0x4a>
    1d9a:	e1 14       	cp	r14, r1
    1d9c:	f1 04       	cpc	r15, r1
    1d9e:	01 05       	cpc	r16, r1
    1da0:	11 05       	cpc	r17, r1
    1da2:	19 f4       	brne	.+6      	; 0x1daa <__pack_f+0x50>
    1da4:	e0 e0       	ldi	r30, 0x00	; 0
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	96 c0       	rjmp	.+300    	; 0x1ed6 <__pack_f+0x17c>
    1daa:	62 81       	ldd	r22, Z+2	; 0x02
    1dac:	73 81       	ldd	r23, Z+3	; 0x03
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	62 38       	cpi	r22, 0x82	; 130
    1db2:	79 07       	cpc	r23, r25
    1db4:	0c f0       	brlt	.+2      	; 0x1db8 <__pack_f+0x5e>
    1db6:	5b c0       	rjmp	.+182    	; 0x1e6e <__pack_f+0x114>
    1db8:	22 e8       	ldi	r18, 0x82	; 130
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	26 1b       	sub	r18, r22
    1dbe:	37 0b       	sbc	r19, r23
    1dc0:	2a 31       	cpi	r18, 0x1A	; 26
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	2c f0       	brlt	.+10     	; 0x1dd0 <__pack_f+0x76>
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	2a c0       	rjmp	.+84     	; 0x1e24 <__pack_f+0xca>
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	a7 01       	movw	r20, r14
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <__pack_f+0x86>
    1dd8:	76 95       	lsr	r23
    1dda:	67 95       	ror	r22
    1ddc:	57 95       	ror	r21
    1dde:	47 95       	ror	r20
    1de0:	0a 94       	dec	r0
    1de2:	d2 f7       	brpl	.-12     	; 0x1dd8 <__pack_f+0x7e>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <__pack_f+0x9c>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	aa 1f       	adc	r26, r26
    1df4:	bb 1f       	adc	r27, r27
    1df6:	2a 95       	dec	r18
    1df8:	d2 f7       	brpl	.-12     	; 0x1dee <__pack_f+0x94>
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	a1 09       	sbc	r26, r1
    1dfe:	b1 09       	sbc	r27, r1
    1e00:	8e 21       	and	r24, r14
    1e02:	9f 21       	and	r25, r15
    1e04:	a0 23       	and	r26, r16
    1e06:	b1 23       	and	r27, r17
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	a1 05       	cpc	r26, r1
    1e0c:	b1 05       	cpc	r27, r1
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <__pack_f+0xbe>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	9a 01       	movw	r18, r20
    1e1a:	ab 01       	movw	r20, r22
    1e1c:	28 2b       	or	r18, r24
    1e1e:	39 2b       	or	r19, r25
    1e20:	4a 2b       	or	r20, r26
    1e22:	5b 2b       	or	r21, r27
    1e24:	da 01       	movw	r26, r20
    1e26:	c9 01       	movw	r24, r18
    1e28:	8f 77       	andi	r24, 0x7F	; 127
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	a0 70       	andi	r26, 0x00	; 0
    1e2e:	b0 70       	andi	r27, 0x00	; 0
    1e30:	80 34       	cpi	r24, 0x40	; 64
    1e32:	91 05       	cpc	r25, r1
    1e34:	a1 05       	cpc	r26, r1
    1e36:	b1 05       	cpc	r27, r1
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <__pack_f+0xee>
    1e3a:	27 ff       	sbrs	r18, 7
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <__pack_f+0xf6>
    1e3e:	20 5c       	subi	r18, 0xC0	; 192
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	4f 4f       	sbci	r20, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <__pack_f+0xf6>
    1e48:	21 5c       	subi	r18, 0xC1	; 193
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e50:	e0 e0       	ldi	r30, 0x00	; 0
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	20 30       	cpi	r18, 0x00	; 0
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	3a 07       	cpc	r19, r26
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	4a 07       	cpc	r20, r26
    1e5e:	a0 e4       	ldi	r26, 0x40	; 64
    1e60:	5a 07       	cpc	r21, r26
    1e62:	10 f0       	brcs	.+4      	; 0x1e68 <__pack_f+0x10e>
    1e64:	e1 e0       	ldi	r30, 0x01	; 1
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	79 01       	movw	r14, r18
    1e6a:	8a 01       	movw	r16, r20
    1e6c:	27 c0       	rjmp	.+78     	; 0x1ebc <__pack_f+0x162>
    1e6e:	60 38       	cpi	r22, 0x80	; 128
    1e70:	71 05       	cpc	r23, r1
    1e72:	64 f5       	brge	.+88     	; 0x1ecc <__pack_f+0x172>
    1e74:	fb 01       	movw	r30, r22
    1e76:	e1 58       	subi	r30, 0x81	; 129
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	d8 01       	movw	r26, r16
    1e7c:	c7 01       	movw	r24, r14
    1e7e:	8f 77       	andi	r24, 0x7F	; 127
    1e80:	90 70       	andi	r25, 0x00	; 0
    1e82:	a0 70       	andi	r26, 0x00	; 0
    1e84:	b0 70       	andi	r27, 0x00	; 0
    1e86:	80 34       	cpi	r24, 0x40	; 64
    1e88:	91 05       	cpc	r25, r1
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <__pack_f+0x144>
    1e90:	e7 fe       	sbrs	r14, 7
    1e92:	0d c0       	rjmp	.+26     	; 0x1eae <__pack_f+0x154>
    1e94:	80 e4       	ldi	r24, 0x40	; 64
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <__pack_f+0x14c>
    1e9e:	8f e3       	ldi	r24, 0x3F	; 63
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e8 0e       	add	r14, r24
    1ea8:	f9 1e       	adc	r15, r25
    1eaa:	0a 1f       	adc	r16, r26
    1eac:	1b 1f       	adc	r17, r27
    1eae:	17 ff       	sbrs	r17, 7
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <__pack_f+0x162>
    1eb2:	16 95       	lsr	r17
    1eb4:	07 95       	ror	r16
    1eb6:	f7 94       	ror	r15
    1eb8:	e7 94       	ror	r14
    1eba:	31 96       	adiw	r30, 0x01	; 1
    1ebc:	87 e0       	ldi	r24, 0x07	; 7
    1ebe:	16 95       	lsr	r17
    1ec0:	07 95       	ror	r16
    1ec2:	f7 94       	ror	r15
    1ec4:	e7 94       	ror	r14
    1ec6:	8a 95       	dec	r24
    1ec8:	d1 f7       	brne	.-12     	; 0x1ebe <__pack_f+0x164>
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <__pack_f+0x17c>
    1ecc:	ee 24       	eor	r14, r14
    1ece:	ff 24       	eor	r15, r15
    1ed0:	87 01       	movw	r16, r14
    1ed2:	ef ef       	ldi	r30, 0xFF	; 255
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	6e 2f       	mov	r22, r30
    1ed8:	67 95       	ror	r22
    1eda:	66 27       	eor	r22, r22
    1edc:	67 95       	ror	r22
    1ede:	90 2f       	mov	r25, r16
    1ee0:	9f 77       	andi	r25, 0x7F	; 127
    1ee2:	d7 94       	ror	r13
    1ee4:	dd 24       	eor	r13, r13
    1ee6:	d7 94       	ror	r13
    1ee8:	8e 2f       	mov	r24, r30
    1eea:	86 95       	lsr	r24
    1eec:	49 2f       	mov	r20, r25
    1eee:	46 2b       	or	r20, r22
    1ef0:	58 2f       	mov	r21, r24
    1ef2:	5d 29       	or	r21, r13
    1ef4:	b7 01       	movw	r22, r14
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	08 95       	ret

00001f04 <__unpack_f>:
    1f04:	fc 01       	movw	r30, r24
    1f06:	db 01       	movw	r26, r22
    1f08:	40 81       	ld	r20, Z
    1f0a:	51 81       	ldd	r21, Z+1	; 0x01
    1f0c:	22 81       	ldd	r18, Z+2	; 0x02
    1f0e:	62 2f       	mov	r22, r18
    1f10:	6f 77       	andi	r22, 0x7F	; 127
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	22 1f       	adc	r18, r18
    1f16:	22 27       	eor	r18, r18
    1f18:	22 1f       	adc	r18, r18
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	89 2f       	mov	r24, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	82 2b       	or	r24, r18
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	99 1f       	adc	r25, r25
    1f28:	99 27       	eor	r25, r25
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	9c 93       	st	X, r25
    1f30:	11 97       	sbiw	r26, 0x01	; 1
    1f32:	21 15       	cp	r18, r1
    1f34:	31 05       	cpc	r19, r1
    1f36:	a9 f5       	brne	.+106    	; 0x1fa2 <__unpack_f+0x9e>
    1f38:	41 15       	cp	r20, r1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	61 05       	cpc	r22, r1
    1f3e:	71 05       	cpc	r23, r1
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__unpack_f+0x42>
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	37 c0       	rjmp	.+110    	; 0x1fb4 <__unpack_f+0xb0>
    1f46:	82 e8       	ldi	r24, 0x82	; 130
    1f48:	9f ef       	ldi	r25, 0xFF	; 255
    1f4a:	13 96       	adiw	r26, 0x03	; 3
    1f4c:	9c 93       	st	X, r25
    1f4e:	8e 93       	st	-X, r24
    1f50:	12 97       	sbiw	r26, 0x02	; 2
    1f52:	9a 01       	movw	r18, r20
    1f54:	ab 01       	movw	r20, r22
    1f56:	67 e0       	ldi	r22, 0x07	; 7
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	44 1f       	adc	r20, r20
    1f5e:	55 1f       	adc	r21, r21
    1f60:	6a 95       	dec	r22
    1f62:	d1 f7       	brne	.-12     	; 0x1f58 <__unpack_f+0x54>
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	8c 93       	st	X, r24
    1f68:	0d c0       	rjmp	.+26     	; 0x1f84 <__unpack_f+0x80>
    1f6a:	22 0f       	add	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	44 1f       	adc	r20, r20
    1f70:	55 1f       	adc	r21, r21
    1f72:	12 96       	adiw	r26, 0x02	; 2
    1f74:	8d 91       	ld	r24, X+
    1f76:	9c 91       	ld	r25, X
    1f78:	13 97       	sbiw	r26, 0x03	; 3
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
    1f82:	12 97       	sbiw	r26, 0x02	; 2
    1f84:	20 30       	cpi	r18, 0x00	; 0
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	38 07       	cpc	r19, r24
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	48 07       	cpc	r20, r24
    1f8e:	80 e4       	ldi	r24, 0x40	; 64
    1f90:	58 07       	cpc	r21, r24
    1f92:	58 f3       	brcs	.-42     	; 0x1f6a <__unpack_f+0x66>
    1f94:	14 96       	adiw	r26, 0x04	; 4
    1f96:	2d 93       	st	X+, r18
    1f98:	3d 93       	st	X+, r19
    1f9a:	4d 93       	st	X+, r20
    1f9c:	5c 93       	st	X, r21
    1f9e:	17 97       	sbiw	r26, 0x07	; 7
    1fa0:	08 95       	ret
    1fa2:	2f 3f       	cpi	r18, 0xFF	; 255
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	79 f4       	brne	.+30     	; 0x1fc6 <__unpack_f+0xc2>
    1fa8:	41 15       	cp	r20, r1
    1faa:	51 05       	cpc	r21, r1
    1fac:	61 05       	cpc	r22, r1
    1fae:	71 05       	cpc	r23, r1
    1fb0:	19 f4       	brne	.+6      	; 0x1fb8 <__unpack_f+0xb4>
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	8c 93       	st	X, r24
    1fb6:	08 95       	ret
    1fb8:	64 ff       	sbrs	r22, 4
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <__unpack_f+0xbe>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	8c 93       	st	X, r24
    1fc0:	12 c0       	rjmp	.+36     	; 0x1fe6 <__unpack_f+0xe2>
    1fc2:	1c 92       	st	X, r1
    1fc4:	10 c0       	rjmp	.+32     	; 0x1fe6 <__unpack_f+0xe2>
    1fc6:	2f 57       	subi	r18, 0x7F	; 127
    1fc8:	30 40       	sbci	r19, 0x00	; 0
    1fca:	13 96       	adiw	r26, 0x03	; 3
    1fcc:	3c 93       	st	X, r19
    1fce:	2e 93       	st	-X, r18
    1fd0:	12 97       	sbiw	r26, 0x02	; 2
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	8c 93       	st	X, r24
    1fd6:	87 e0       	ldi	r24, 0x07	; 7
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	66 1f       	adc	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	8a 95       	dec	r24
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <__unpack_f+0xd4>
    1fe4:	70 64       	ori	r23, 0x40	; 64
    1fe6:	14 96       	adiw	r26, 0x04	; 4
    1fe8:	4d 93       	st	X+, r20
    1fea:	5d 93       	st	X+, r21
    1fec:	6d 93       	st	X+, r22
    1fee:	7c 93       	st	X, r23
    1ff0:	17 97       	sbiw	r26, 0x07	; 7
    1ff2:	08 95       	ret

00001ff4 <__fpcmp_parts_f>:
    1ff4:	1f 93       	push	r17
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	9c 91       	ld	r25, X
    1ffc:	92 30       	cpi	r25, 0x02	; 2
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <__fpcmp_parts_f+0xe>
    2000:	47 c0       	rjmp	.+142    	; 0x2090 <__fpcmp_parts_f+0x9c>
    2002:	80 81       	ld	r24, Z
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	08 f4       	brcc	.+2      	; 0x200a <__fpcmp_parts_f+0x16>
    2008:	43 c0       	rjmp	.+134    	; 0x2090 <__fpcmp_parts_f+0x9c>
    200a:	94 30       	cpi	r25, 0x04	; 4
    200c:	51 f4       	brne	.+20     	; 0x2022 <__fpcmp_parts_f+0x2e>
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	1c 91       	ld	r17, X
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	99 f5       	brne	.+102    	; 0x207c <__fpcmp_parts_f+0x88>
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	68 2f       	mov	r22, r24
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	61 1b       	sub	r22, r17
    201e:	71 09       	sbc	r23, r1
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <__fpcmp_parts_f+0xac>
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	21 f0       	breq	.+8      	; 0x202e <__fpcmp_parts_f+0x3a>
    2026:	92 30       	cpi	r25, 0x02	; 2
    2028:	31 f4       	brne	.+12     	; 0x2036 <__fpcmp_parts_f+0x42>
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	b9 f1       	breq	.+110    	; 0x209c <__fpcmp_parts_f+0xa8>
    202e:	81 81       	ldd	r24, Z+1	; 0x01
    2030:	88 23       	and	r24, r24
    2032:	89 f1       	breq	.+98     	; 0x2096 <__fpcmp_parts_f+0xa2>
    2034:	2d c0       	rjmp	.+90     	; 0x2090 <__fpcmp_parts_f+0x9c>
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	1c 91       	ld	r17, X
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	f1 f0       	breq	.+60     	; 0x207c <__fpcmp_parts_f+0x88>
    2040:	81 81       	ldd	r24, Z+1	; 0x01
    2042:	18 17       	cp	r17, r24
    2044:	d9 f4       	brne	.+54     	; 0x207c <__fpcmp_parts_f+0x88>
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	2d 91       	ld	r18, X+
    204a:	3c 91       	ld	r19, X
    204c:	13 97       	sbiw	r26, 0x03	; 3
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	82 17       	cp	r24, r18
    2054:	93 07       	cpc	r25, r19
    2056:	94 f0       	brlt	.+36     	; 0x207c <__fpcmp_parts_f+0x88>
    2058:	28 17       	cp	r18, r24
    205a:	39 07       	cpc	r19, r25
    205c:	bc f0       	brlt	.+46     	; 0x208c <__fpcmp_parts_f+0x98>
    205e:	14 96       	adiw	r26, 0x04	; 4
    2060:	8d 91       	ld	r24, X+
    2062:	9d 91       	ld	r25, X+
    2064:	0d 90       	ld	r0, X+
    2066:	bc 91       	ld	r27, X
    2068:	a0 2d       	mov	r26, r0
    206a:	24 81       	ldd	r18, Z+4	; 0x04
    206c:	35 81       	ldd	r19, Z+5	; 0x05
    206e:	46 81       	ldd	r20, Z+6	; 0x06
    2070:	57 81       	ldd	r21, Z+7	; 0x07
    2072:	28 17       	cp	r18, r24
    2074:	39 07       	cpc	r19, r25
    2076:	4a 07       	cpc	r20, r26
    2078:	5b 07       	cpc	r21, r27
    207a:	18 f4       	brcc	.+6      	; 0x2082 <__fpcmp_parts_f+0x8e>
    207c:	11 23       	and	r17, r17
    207e:	41 f0       	breq	.+16     	; 0x2090 <__fpcmp_parts_f+0x9c>
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <__fpcmp_parts_f+0xa2>
    2082:	82 17       	cp	r24, r18
    2084:	93 07       	cpc	r25, r19
    2086:	a4 07       	cpc	r26, r20
    2088:	b5 07       	cpc	r27, r21
    208a:	40 f4       	brcc	.+16     	; 0x209c <__fpcmp_parts_f+0xa8>
    208c:	11 23       	and	r17, r17
    208e:	19 f0       	breq	.+6      	; 0x2096 <__fpcmp_parts_f+0xa2>
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <__fpcmp_parts_f+0xac>
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	7f ef       	ldi	r23, 0xFF	; 255
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <__fpcmp_parts_f+0xac>
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	cb 01       	movw	r24, r22
    20a2:	1f 91       	pop	r17
    20a4:	08 95       	ret

000020a6 <__udivmodqi4>:
    20a6:	99 1b       	sub	r25, r25
    20a8:	79 e0       	ldi	r23, 0x09	; 9
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <__udivmodqi4_ep>

000020ac <__udivmodqi4_loop>:
    20ac:	99 1f       	adc	r25, r25
    20ae:	96 17       	cp	r25, r22
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <__udivmodqi4_ep>
    20b2:	96 1b       	sub	r25, r22

000020b4 <__udivmodqi4_ep>:
    20b4:	88 1f       	adc	r24, r24
    20b6:	7a 95       	dec	r23
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <__udivmodqi4_loop>
    20ba:	80 95       	com	r24
    20bc:	08 95       	ret

000020be <__udivmodhi4>:
    20be:	aa 1b       	sub	r26, r26
    20c0:	bb 1b       	sub	r27, r27
    20c2:	51 e1       	ldi	r21, 0x11	; 17
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <__udivmodhi4_ep>

000020c6 <__udivmodhi4_loop>:
    20c6:	aa 1f       	adc	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	a6 17       	cp	r26, r22
    20cc:	b7 07       	cpc	r27, r23
    20ce:	10 f0       	brcs	.+4      	; 0x20d4 <__udivmodhi4_ep>
    20d0:	a6 1b       	sub	r26, r22
    20d2:	b7 0b       	sbc	r27, r23

000020d4 <__udivmodhi4_ep>:
    20d4:	88 1f       	adc	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	5a 95       	dec	r21
    20da:	a9 f7       	brne	.-22     	; 0x20c6 <__udivmodhi4_loop>
    20dc:	80 95       	com	r24
    20de:	90 95       	com	r25
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	08 95       	ret

000020e6 <__divmodhi4>:
    20e6:	97 fb       	bst	r25, 7
    20e8:	09 2e       	mov	r0, r25
    20ea:	07 26       	eor	r0, r23
    20ec:	0a d0       	rcall	.+20     	; 0x2102 <__divmodhi4_neg1>
    20ee:	77 fd       	sbrc	r23, 7
    20f0:	04 d0       	rcall	.+8      	; 0x20fa <__divmodhi4_neg2>
    20f2:	e5 df       	rcall	.-54     	; 0x20be <__udivmodhi4>
    20f4:	06 d0       	rcall	.+12     	; 0x2102 <__divmodhi4_neg1>
    20f6:	00 20       	and	r0, r0
    20f8:	1a f4       	brpl	.+6      	; 0x2100 <__divmodhi4_exit>

000020fa <__divmodhi4_neg2>:
    20fa:	70 95       	com	r23
    20fc:	61 95       	neg	r22
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255

00002100 <__divmodhi4_exit>:
    2100:	08 95       	ret

00002102 <__divmodhi4_neg1>:
    2102:	f6 f7       	brtc	.-4      	; 0x2100 <__divmodhi4_exit>
    2104:	90 95       	com	r25
    2106:	81 95       	neg	r24
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	08 95       	ret

0000210c <__prologue_saves__>:
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	ca 1b       	sub	r28, r26
    2136:	db 0b       	sbc	r29, r27
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	09 94       	ijmp

00002144 <__epilogue_restores__>:
    2144:	2a 88       	ldd	r2, Y+18	; 0x12
    2146:	39 88       	ldd	r3, Y+17	; 0x11
    2148:	48 88       	ldd	r4, Y+16	; 0x10
    214a:	5f 84       	ldd	r5, Y+15	; 0x0f
    214c:	6e 84       	ldd	r6, Y+14	; 0x0e
    214e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2150:	8c 84       	ldd	r8, Y+12	; 0x0c
    2152:	9b 84       	ldd	r9, Y+11	; 0x0b
    2154:	aa 84       	ldd	r10, Y+10	; 0x0a
    2156:	b9 84       	ldd	r11, Y+9	; 0x09
    2158:	c8 84       	ldd	r12, Y+8	; 0x08
    215a:	df 80       	ldd	r13, Y+7	; 0x07
    215c:	ee 80       	ldd	r14, Y+6	; 0x06
    215e:	fd 80       	ldd	r15, Y+5	; 0x05
    2160:	0c 81       	ldd	r16, Y+4	; 0x04
    2162:	1b 81       	ldd	r17, Y+3	; 0x03
    2164:	aa 81       	ldd	r26, Y+2	; 0x02
    2166:	b9 81       	ldd	r27, Y+1	; 0x01
    2168:	ce 0f       	add	r28, r30
    216a:	d1 1d       	adc	r29, r1
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	ed 01       	movw	r28, r26
    2178:	08 95       	ret

0000217a <dtostrf>:
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	f2 2f       	mov	r31, r18
    2184:	f0 2e       	mov	r15, r16
    2186:	47 fd       	sbrc	r20, 7
    2188:	02 c0       	rjmp	.+4      	; 0x218e <dtostrf+0x14>
    218a:	e4 e0       	ldi	r30, 0x04	; 4
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <dtostrf+0x16>
    218e:	e4 e1       	ldi	r30, 0x14	; 20
    2190:	24 2f       	mov	r18, r20
    2192:	33 27       	eor	r19, r19
    2194:	27 fd       	sbrc	r18, 7
    2196:	30 95       	com	r19
    2198:	37 ff       	sbrs	r19, 7
    219a:	03 c0       	rjmp	.+6      	; 0x21a2 <dtostrf+0x28>
    219c:	30 95       	com	r19
    219e:	21 95       	neg	r18
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	4f 2d       	mov	r20, r15
    21a4:	51 2f       	mov	r21, r17
    21a6:	0f 2f       	mov	r16, r31
    21a8:	ee 2e       	mov	r14, r30
    21aa:	0e 94 0e 11 	call	0x221c	; 0x221c <dtoa_prf>
    21ae:	8f 2d       	mov	r24, r15
    21b0:	91 2f       	mov	r25, r17
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	08 95       	ret

000021bc <strcpy>:
    21bc:	fb 01       	movw	r30, r22
    21be:	dc 01       	movw	r26, r24
    21c0:	01 90       	ld	r0, Z+
    21c2:	0d 92       	st	X+, r0
    21c4:	00 20       	and	r0, r0
    21c6:	e1 f7       	brne	.-8      	; 0x21c0 <strcpy+0x4>
    21c8:	08 95       	ret

000021ca <fputs>:
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	7c 01       	movw	r14, r24
    21d8:	8b 01       	movw	r16, r22
    21da:	db 01       	movw	r26, r22
    21dc:	13 96       	adiw	r26, 0x03	; 3
    21de:	8c 91       	ld	r24, X
    21e0:	81 fd       	sbrc	r24, 1
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <fputs+0x20>
    21e4:	cf ef       	ldi	r28, 0xFF	; 255
    21e6:	df ef       	ldi	r29, 0xFF	; 255
    21e8:	13 c0       	rjmp	.+38     	; 0x2210 <fputs+0x46>
    21ea:	c0 e0       	ldi	r28, 0x00	; 0
    21ec:	d0 e0       	ldi	r29, 0x00	; 0
    21ee:	0b c0       	rjmp	.+22     	; 0x2206 <fputs+0x3c>
    21f0:	d8 01       	movw	r26, r16
    21f2:	18 96       	adiw	r26, 0x08	; 8
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	19 97       	sbiw	r26, 0x09	; 9
    21fa:	b8 01       	movw	r22, r16
    21fc:	09 95       	icall
    21fe:	89 2b       	or	r24, r25
    2200:	11 f0       	breq	.+4      	; 0x2206 <fputs+0x3c>
    2202:	cf ef       	ldi	r28, 0xFF	; 255
    2204:	df ef       	ldi	r29, 0xFF	; 255
    2206:	f7 01       	movw	r30, r14
    2208:	81 91       	ld	r24, Z+
    220a:	7f 01       	movw	r14, r30
    220c:	88 23       	and	r24, r24
    220e:	81 f7       	brne	.-32     	; 0x21f0 <fputs+0x26>
    2210:	ce 01       	movw	r24, r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	e6 e0       	ldi	r30, 0x06	; 6
    2218:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x18>

0000221c <dtoa_prf>:
    221c:	a9 e0       	ldi	r26, 0x09	; 9
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e4 e1       	ldi	r30, 0x14	; 20
    2222:	f1 e1       	ldi	r31, 0x11	; 17
    2224:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__+0x8>
    2228:	6a 01       	movw	r12, r20
    222a:	12 2f       	mov	r17, r18
    222c:	a0 2e       	mov	r10, r16
    222e:	be 2c       	mov	r11, r14
    2230:	2b e3       	ldi	r18, 0x3B	; 59
    2232:	20 17       	cp	r18, r16
    2234:	18 f4       	brcc	.+6      	; 0x223c <dtoa_prf+0x20>
    2236:	2c e3       	ldi	r18, 0x3C	; 60
    2238:	92 2e       	mov	r9, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <dtoa_prf+0x24>
    223c:	90 2e       	mov	r9, r16
    223e:	93 94       	inc	r9
    2240:	ae 01       	movw	r20, r28
    2242:	4f 5f       	subi	r20, 0xFF	; 255
    2244:	5f 4f       	sbci	r21, 0xFF	; 255
    2246:	27 e0       	ldi	r18, 0x07	; 7
    2248:	09 2d       	mov	r16, r9
    224a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__ftoa_engine>
    224e:	bc 01       	movw	r22, r24
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	e8 2e       	mov	r14, r24
    2254:	ff 24       	eor	r15, r15
    2256:	c7 01       	movw	r24, r14
    2258:	89 70       	andi	r24, 0x09	; 9
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	11 f4       	brne	.+4      	; 0x2264 <dtoa_prf+0x48>
    2260:	ad e2       	ldi	r26, 0x2D	; 45
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <dtoa_prf+0x5a>
    2264:	b1 fe       	sbrs	r11, 1
    2266:	02 c0       	rjmp	.+4      	; 0x226c <dtoa_prf+0x50>
    2268:	ab e2       	ldi	r26, 0x2B	; 43
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <dtoa_prf+0x5a>
    226c:	b0 fc       	sbrc	r11, 0
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <dtoa_prf+0x58>
    2270:	a0 e0       	ldi	r26, 0x00	; 0
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <dtoa_prf+0x5a>
    2274:	a0 e2       	ldi	r26, 0x20	; 32
    2276:	e3 fe       	sbrs	r14, 3
    2278:	3b c0       	rjmp	.+118    	; 0x22f0 <dtoa_prf+0xd4>
    227a:	aa 23       	and	r26, r26
    227c:	11 f4       	brne	.+4      	; 0x2282 <dtoa_prf+0x66>
    227e:	23 e0       	ldi	r18, 0x03	; 3
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <dtoa_prf+0x68>
    2282:	24 e0       	ldi	r18, 0x04	; 4
    2284:	21 17       	cp	r18, r17
    2286:	10 f0       	brcs	.+4      	; 0x228c <dtoa_prf+0x70>
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <dtoa_prf+0x74>
    228c:	12 1b       	sub	r17, r18
    228e:	21 2f       	mov	r18, r17
    2290:	eb 2c       	mov	r14, r11
    2292:	b4 fe       	sbrs	r11, 4
    2294:	02 c0       	rjmp	.+4      	; 0x229a <dtoa_prf+0x7e>
    2296:	32 2f       	mov	r19, r18
    2298:	0a c0       	rjmp	.+20     	; 0x22ae <dtoa_prf+0x92>
    229a:	f6 01       	movw	r30, r12
    229c:	32 2f       	mov	r19, r18
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <dtoa_prf+0x8a>
    22a2:	81 93       	st	Z+, r24
    22a4:	31 50       	subi	r19, 0x01	; 1
    22a6:	33 23       	and	r19, r19
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <dtoa_prf+0x86>
    22aa:	c2 0e       	add	r12, r18
    22ac:	d1 1c       	adc	r13, r1
    22ae:	aa 23       	and	r26, r26
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <dtoa_prf+0x9c>
    22b2:	f6 01       	movw	r30, r12
    22b4:	a1 93       	st	Z+, r26
    22b6:	6f 01       	movw	r12, r30
    22b8:	f6 01       	movw	r30, r12
    22ba:	31 96       	adiw	r30, 0x01	; 1
    22bc:	e2 fe       	sbrs	r14, 2
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <dtoa_prf+0xae>
    22c0:	9e e4       	ldi	r25, 0x4E	; 78
    22c2:	d6 01       	movw	r26, r12
    22c4:	9c 93       	st	X, r25
    22c6:	81 e4       	ldi	r24, 0x41	; 65
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <dtoa_prf+0xb6>
    22ca:	9e e6       	ldi	r25, 0x6E	; 110
    22cc:	d6 01       	movw	r26, r12
    22ce:	9c 93       	st	X, r25
    22d0:	81 e6       	ldi	r24, 0x61	; 97
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	8c 93       	st	X, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	32 96       	adiw	r30, 0x02	; 2
    22da:	df 01       	movw	r26, r30
    22dc:	83 2f       	mov	r24, r19
    22de:	90 e2       	ldi	r25, 0x20	; 32
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <dtoa_prf+0xca>
    22e2:	9d 93       	st	X+, r25
    22e4:	81 50       	subi	r24, 0x01	; 1
    22e6:	88 23       	and	r24, r24
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <dtoa_prf+0xc6>
    22ea:	e3 0f       	add	r30, r19
    22ec:	f1 1d       	adc	r31, r1
    22ee:	40 c0       	rjmp	.+128    	; 0x2370 <dtoa_prf+0x154>
    22f0:	e2 fe       	sbrs	r14, 2
    22f2:	42 c0       	rjmp	.+132    	; 0x2378 <dtoa_prf+0x15c>
    22f4:	aa 23       	and	r26, r26
    22f6:	11 f4       	brne	.+4      	; 0x22fc <dtoa_prf+0xe0>
    22f8:	23 e0       	ldi	r18, 0x03	; 3
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <dtoa_prf+0xe2>
    22fc:	24 e0       	ldi	r18, 0x04	; 4
    22fe:	21 17       	cp	r18, r17
    2300:	10 f0       	brcs	.+4      	; 0x2306 <dtoa_prf+0xea>
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	02 c0       	rjmp	.+4      	; 0x230a <dtoa_prf+0xee>
    2306:	12 1b       	sub	r17, r18
    2308:	21 2f       	mov	r18, r17
    230a:	eb 2c       	mov	r14, r11
    230c:	b4 fe       	sbrs	r11, 4
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <dtoa_prf+0xf8>
    2310:	92 2f       	mov	r25, r18
    2312:	0a c0       	rjmp	.+20     	; 0x2328 <dtoa_prf+0x10c>
    2314:	f6 01       	movw	r30, r12
    2316:	92 2f       	mov	r25, r18
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <dtoa_prf+0x104>
    231c:	81 93       	st	Z+, r24
    231e:	91 50       	subi	r25, 0x01	; 1
    2320:	99 23       	and	r25, r25
    2322:	e1 f7       	brne	.-8      	; 0x231c <dtoa_prf+0x100>
    2324:	c2 0e       	add	r12, r18
    2326:	d1 1c       	adc	r13, r1
    2328:	aa 23       	and	r26, r26
    232a:	19 f0       	breq	.+6      	; 0x2332 <dtoa_prf+0x116>
    232c:	f6 01       	movw	r30, r12
    232e:	a1 93       	st	Z+, r26
    2330:	6f 01       	movw	r12, r30
    2332:	f6 01       	movw	r30, r12
    2334:	31 96       	adiw	r30, 0x01	; 1
    2336:	e2 fe       	sbrs	r14, 2
    2338:	08 c0       	rjmp	.+16     	; 0x234a <dtoa_prf+0x12e>
    233a:	89 e4       	ldi	r24, 0x49	; 73
    233c:	d6 01       	movw	r26, r12
    233e:	8c 93       	st	X, r24
    2340:	8e e4       	ldi	r24, 0x4E	; 78
    2342:	11 96       	adiw	r26, 0x01	; 1
    2344:	8c 93       	st	X, r24
    2346:	86 e4       	ldi	r24, 0x46	; 70
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <dtoa_prf+0x13c>
    234a:	89 e6       	ldi	r24, 0x69	; 105
    234c:	d6 01       	movw	r26, r12
    234e:	8c 93       	st	X, r24
    2350:	8e e6       	ldi	r24, 0x6E	; 110
    2352:	11 96       	adiw	r26, 0x01	; 1
    2354:	8c 93       	st	X, r24
    2356:	86 e6       	ldi	r24, 0x66	; 102
    2358:	81 83       	std	Z+1, r24	; 0x01
    235a:	32 96       	adiw	r30, 0x02	; 2
    235c:	df 01       	movw	r26, r30
    235e:	89 2f       	mov	r24, r25
    2360:	20 e2       	ldi	r18, 0x20	; 32
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <dtoa_prf+0x14c>
    2364:	2d 93       	st	X+, r18
    2366:	81 50       	subi	r24, 0x01	; 1
    2368:	88 23       	and	r24, r24
    236a:	e1 f7       	brne	.-8      	; 0x2364 <dtoa_prf+0x148>
    236c:	e9 0f       	add	r30, r25
    236e:	f1 1d       	adc	r31, r1
    2370:	10 82       	st	Z, r1
    2372:	2e ef       	ldi	r18, 0xFE	; 254
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	af c0       	rjmp	.+350    	; 0x24d6 <dtoa_prf+0x2ba>
    2378:	16 16       	cp	r1, r22
    237a:	17 06       	cpc	r1, r23
    237c:	1c f0       	brlt	.+6      	; 0x2384 <dtoa_prf+0x168>
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	03 c0       	rjmp	.+6      	; 0x238a <dtoa_prf+0x16e>
    2384:	ab 01       	movw	r20, r22
    2386:	4f 5f       	subi	r20, 0xFF	; 255
    2388:	5f 4f       	sbci	r21, 0xFF	; 255
    238a:	aa 20       	and	r10, r10
    238c:	19 f4       	brne	.+6      	; 0x2394 <dtoa_prf+0x178>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	03 c0       	rjmp	.+6      	; 0x239a <dtoa_prf+0x17e>
    2394:	8a 2d       	mov	r24, r10
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	aa 23       	and	r26, r26
    23a0:	11 f0       	breq	.+4      	; 0x23a6 <dtoa_prf+0x18a>
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	28 0f       	add	r18, r24
    23ac:	39 1f       	adc	r19, r25
    23ae:	81 2f       	mov	r24, r17
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	28 17       	cp	r18, r24
    23b4:	39 07       	cpc	r19, r25
    23b6:	14 f0       	brlt	.+4      	; 0x23bc <dtoa_prf+0x1a0>
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <dtoa_prf+0x1a4>
    23bc:	12 1b       	sub	r17, r18
    23be:	21 2f       	mov	r18, r17
    23c0:	4b 2d       	mov	r20, r11
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	ca 01       	movw	r24, r20
    23c6:	80 71       	andi	r24, 0x10	; 16
    23c8:	90 70       	andi	r25, 0x00	; 0
    23ca:	b4 fc       	sbrc	r11, 4
    23cc:	0d c0       	rjmp	.+26     	; 0x23e8 <dtoa_prf+0x1cc>
    23ce:	b3 fc       	sbrc	r11, 3
    23d0:	0b c0       	rjmp	.+22     	; 0x23e8 <dtoa_prf+0x1cc>
    23d2:	f6 01       	movw	r30, r12
    23d4:	32 2f       	mov	r19, r18
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <dtoa_prf+0x1c2>
    23da:	41 93       	st	Z+, r20
    23dc:	31 50       	subi	r19, 0x01	; 1
    23de:	33 23       	and	r19, r19
    23e0:	e1 f7       	brne	.-8      	; 0x23da <dtoa_prf+0x1be>
    23e2:	c2 0e       	add	r12, r18
    23e4:	d1 1c       	adc	r13, r1
    23e6:	01 c0       	rjmp	.+2      	; 0x23ea <dtoa_prf+0x1ce>
    23e8:	32 2f       	mov	r19, r18
    23ea:	aa 23       	and	r26, r26
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <dtoa_prf+0x1d8>
    23ee:	f6 01       	movw	r30, r12
    23f0:	a1 93       	st	Z+, r26
    23f2:	6f 01       	movw	r12, r30
    23f4:	89 2b       	or	r24, r25
    23f6:	11 f0       	breq	.+4      	; 0x23fc <dtoa_prf+0x1e0>
    23f8:	13 2f       	mov	r17, r19
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <dtoa_prf+0x1f4>
    23fc:	f6 01       	movw	r30, r12
    23fe:	13 2f       	mov	r17, r19
    2400:	80 e3       	ldi	r24, 0x30	; 48
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <dtoa_prf+0x1ec>
    2404:	81 93       	st	Z+, r24
    2406:	11 50       	subi	r17, 0x01	; 1
    2408:	11 23       	and	r17, r17
    240a:	e1 f7       	brne	.-8      	; 0x2404 <dtoa_prf+0x1e8>
    240c:	c3 0e       	add	r12, r19
    240e:	d1 1c       	adc	r13, r1
    2410:	09 2d       	mov	r16, r9
    2412:	06 0f       	add	r16, r22
    2414:	ba 80       	ldd	r11, Y+2	; 0x02
    2416:	90 e1       	ldi	r25, 0x10	; 16
    2418:	89 2e       	mov	r8, r25
    241a:	91 2c       	mov	r9, r1
    241c:	8e 20       	and	r8, r14
    241e:	9f 20       	and	r9, r15
    2420:	e4 fe       	sbrs	r14, 4
    2422:	04 c0       	rjmp	.+8      	; 0x242c <dtoa_prf+0x210>
    2424:	f1 e3       	ldi	r31, 0x31	; 49
    2426:	bf 16       	cp	r11, r31
    2428:	09 f4       	brne	.+2      	; 0x242c <dtoa_prf+0x210>
    242a:	01 50       	subi	r16, 0x01	; 1
    242c:	10 16       	cp	r1, r16
    242e:	14 f0       	brlt	.+4      	; 0x2434 <dtoa_prf+0x218>
    2430:	01 e0       	ldi	r16, 0x01	; 1
    2432:	03 c0       	rjmp	.+6      	; 0x243a <dtoa_prf+0x21e>
    2434:	09 30       	cpi	r16, 0x09	; 9
    2436:	08 f0       	brcs	.+2      	; 0x243a <dtoa_prf+0x21e>
    2438:	08 e0       	ldi	r16, 0x08	; 8
    243a:	9b 01       	movw	r18, r22
    243c:	77 ff       	sbrs	r23, 7
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <dtoa_prf+0x228>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	cb 01       	movw	r24, r22
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	82 1b       	sub	r24, r18
    244a:	93 0b       	sbc	r25, r19
    244c:	fe 01       	movw	r30, r28
    244e:	31 96       	adiw	r30, 0x01	; 1
    2450:	e8 0f       	add	r30, r24
    2452:	f9 1f       	adc	r31, r25
    2454:	8e e2       	ldi	r24, 0x2E	; 46
    2456:	f8 2e       	mov	r15, r24
    2458:	3b 01       	movw	r6, r22
    245a:	60 1a       	sub	r6, r16
    245c:	71 08       	sbc	r7, r1
    245e:	8a 2d       	mov	r24, r10
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	44 27       	eor	r20, r20
    2464:	55 27       	eor	r21, r21
    2466:	48 1b       	sub	r20, r24
    2468:	59 0b       	sbc	r21, r25
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	2f 3f       	cpi	r18, 0xFF	; 255
    246e:	38 07       	cpc	r19, r24
    2470:	19 f4       	brne	.+6      	; 0x2478 <dtoa_prf+0x25c>
    2472:	d6 01       	movw	r26, r12
    2474:	fd 92       	st	X+, r15
    2476:	6d 01       	movw	r12, r26
    2478:	62 17       	cp	r22, r18
    247a:	73 07       	cpc	r23, r19
    247c:	2c f0       	brlt	.+10     	; 0x2488 <dtoa_prf+0x26c>
    247e:	62 16       	cp	r6, r18
    2480:	73 06       	cpc	r7, r19
    2482:	14 f4       	brge	.+4      	; 0x2488 <dtoa_prf+0x26c>
    2484:	80 81       	ld	r24, Z
    2486:	01 c0       	rjmp	.+2      	; 0x248a <dtoa_prf+0x26e>
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	21 50       	subi	r18, 0x01	; 1
    248c:	30 40       	sbci	r19, 0x00	; 0
    248e:	31 96       	adiw	r30, 0x01	; 1
    2490:	24 17       	cp	r18, r20
    2492:	35 07       	cpc	r19, r21
    2494:	24 f0       	brlt	.+8      	; 0x249e <dtoa_prf+0x282>
    2496:	d6 01       	movw	r26, r12
    2498:	8d 93       	st	X+, r24
    249a:	6d 01       	movw	r12, r26
    249c:	e6 cf       	rjmp	.-52     	; 0x246a <dtoa_prf+0x24e>
    249e:	26 17       	cp	r18, r22
    24a0:	37 07       	cpc	r19, r23
    24a2:	49 f4       	brne	.+18     	; 0x24b6 <dtoa_prf+0x29a>
    24a4:	b5 e3       	ldi	r27, 0x35	; 53
    24a6:	bb 15       	cp	r27, r11
    24a8:	28 f0       	brcs	.+10     	; 0x24b4 <dtoa_prf+0x298>
    24aa:	bb 16       	cp	r11, r27
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <dtoa_prf+0x29a>
    24ae:	81 14       	cp	r8, r1
    24b0:	91 04       	cpc	r9, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <dtoa_prf+0x29a>
    24b4:	81 e3       	ldi	r24, 0x31	; 49
    24b6:	f6 01       	movw	r30, r12
    24b8:	81 93       	st	Z+, r24
    24ba:	d6 01       	movw	r26, r12
    24bc:	81 2f       	mov	r24, r17
    24be:	90 e2       	ldi	r25, 0x20	; 32
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <dtoa_prf+0x2aa>
    24c2:	9c 93       	st	X, r25
    24c4:	81 50       	subi	r24, 0x01	; 1
    24c6:	11 96       	adiw	r26, 0x01	; 1
    24c8:	88 23       	and	r24, r24
    24ca:	d9 f7       	brne	.-10     	; 0x24c2 <dtoa_prf+0x2a6>
    24cc:	e1 0f       	add	r30, r17
    24ce:	f1 1d       	adc	r31, r1
    24d0:	10 82       	st	Z, r1
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	c9 01       	movw	r24, r18
    24d8:	29 96       	adiw	r28, 0x09	; 9
    24da:	ee e0       	ldi	r30, 0x0E	; 14
    24dc:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__+0x8>

000024e0 <__ftoa_engine>:
    24e0:	28 30       	cpi	r18, 0x08	; 8
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <__ftoa_engine+0x6>
    24e4:	27 e0       	ldi	r18, 0x07	; 7
    24e6:	33 27       	eor	r19, r19
    24e8:	da 01       	movw	r26, r20
    24ea:	99 0f       	add	r25, r25
    24ec:	31 1d       	adc	r19, r1
    24ee:	87 fd       	sbrc	r24, 7
    24f0:	91 60       	ori	r25, 0x01	; 1
    24f2:	00 96       	adiw	r24, 0x00	; 0
    24f4:	61 05       	cpc	r22, r1
    24f6:	71 05       	cpc	r23, r1
    24f8:	39 f4       	brne	.+14     	; 0x2508 <__ftoa_engine+0x28>
    24fa:	32 60       	ori	r19, 0x02	; 2
    24fc:	2e 5f       	subi	r18, 0xFE	; 254
    24fe:	3d 93       	st	X+, r19
    2500:	30 e3       	ldi	r19, 0x30	; 48
    2502:	2a 95       	dec	r18
    2504:	e1 f7       	brne	.-8      	; 0x24fe <__ftoa_engine+0x1e>
    2506:	08 95       	ret
    2508:	9f 3f       	cpi	r25, 0xFF	; 255
    250a:	30 f0       	brcs	.+12     	; 0x2518 <__ftoa_engine+0x38>
    250c:	80 38       	cpi	r24, 0x80	; 128
    250e:	71 05       	cpc	r23, r1
    2510:	61 05       	cpc	r22, r1
    2512:	09 f0       	breq	.+2      	; 0x2516 <__ftoa_engine+0x36>
    2514:	3c 5f       	subi	r19, 0xFC	; 252
    2516:	3c 5f       	subi	r19, 0xFC	; 252
    2518:	3d 93       	st	X+, r19
    251a:	91 30       	cpi	r25, 0x01	; 1
    251c:	08 f0       	brcs	.+2      	; 0x2520 <__ftoa_engine+0x40>
    251e:	80 68       	ori	r24, 0x80	; 128
    2520:	91 1d       	adc	r25, r1
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	1f 93       	push	r17
    2528:	0f 93       	push	r16
    252a:	ff 92       	push	r15
    252c:	ef 92       	push	r14
    252e:	19 2f       	mov	r17, r25
    2530:	98 7f       	andi	r25, 0xF8	; 248
    2532:	96 95       	lsr	r25
    2534:	e9 2f       	mov	r30, r25
    2536:	96 95       	lsr	r25
    2538:	96 95       	lsr	r25
    253a:	e9 0f       	add	r30, r25
    253c:	ff 27       	eor	r31, r31
    253e:	ed 54       	subi	r30, 0x4D	; 77
    2540:	fd 4f       	sbci	r31, 0xFD	; 253
    2542:	99 27       	eor	r25, r25
    2544:	33 27       	eor	r19, r19
    2546:	ee 24       	eor	r14, r14
    2548:	ff 24       	eor	r15, r15
    254a:	a7 01       	movw	r20, r14
    254c:	e7 01       	movw	r28, r14
    254e:	05 90       	lpm	r0, Z+
    2550:	08 94       	sec
    2552:	07 94       	ror	r0
    2554:	28 f4       	brcc	.+10     	; 0x2560 <__ftoa_engine+0x80>
    2556:	36 0f       	add	r19, r22
    2558:	e7 1e       	adc	r14, r23
    255a:	f8 1e       	adc	r15, r24
    255c:	49 1f       	adc	r20, r25
    255e:	51 1d       	adc	r21, r1
    2560:	66 0f       	add	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	06 94       	lsr	r0
    256a:	a1 f7       	brne	.-24     	; 0x2554 <__ftoa_engine+0x74>
    256c:	05 90       	lpm	r0, Z+
    256e:	07 94       	ror	r0
    2570:	28 f4       	brcc	.+10     	; 0x257c <__ftoa_engine+0x9c>
    2572:	e7 0e       	add	r14, r23
    2574:	f8 1e       	adc	r15, r24
    2576:	49 1f       	adc	r20, r25
    2578:	56 1f       	adc	r21, r22
    257a:	c1 1d       	adc	r28, r1
    257c:	77 0f       	add	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	66 1f       	adc	r22, r22
    2584:	06 94       	lsr	r0
    2586:	a1 f7       	brne	.-24     	; 0x2570 <__ftoa_engine+0x90>
    2588:	05 90       	lpm	r0, Z+
    258a:	07 94       	ror	r0
    258c:	28 f4       	brcc	.+10     	; 0x2598 <__ftoa_engine+0xb8>
    258e:	f8 0e       	add	r15, r24
    2590:	49 1f       	adc	r20, r25
    2592:	56 1f       	adc	r21, r22
    2594:	c7 1f       	adc	r28, r23
    2596:	d1 1d       	adc	r29, r1
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	66 1f       	adc	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	06 94       	lsr	r0
    25a2:	a1 f7       	brne	.-24     	; 0x258c <__ftoa_engine+0xac>
    25a4:	05 90       	lpm	r0, Z+
    25a6:	07 94       	ror	r0
    25a8:	20 f4       	brcc	.+8      	; 0x25b2 <__ftoa_engine+0xd2>
    25aa:	49 0f       	add	r20, r25
    25ac:	56 1f       	adc	r21, r22
    25ae:	c7 1f       	adc	r28, r23
    25b0:	d8 1f       	adc	r29, r24
    25b2:	99 0f       	add	r25, r25
    25b4:	66 1f       	adc	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	06 94       	lsr	r0
    25bc:	a9 f7       	brne	.-22     	; 0x25a8 <__ftoa_engine+0xc8>
    25be:	84 91       	lpm	r24, Z+
    25c0:	10 95       	com	r17
    25c2:	17 70       	andi	r17, 0x07	; 7
    25c4:	41 f0       	breq	.+16     	; 0x25d6 <__ftoa_engine+0xf6>
    25c6:	d6 95       	lsr	r29
    25c8:	c7 95       	ror	r28
    25ca:	57 95       	ror	r21
    25cc:	47 95       	ror	r20
    25ce:	f7 94       	ror	r15
    25d0:	e7 94       	ror	r14
    25d2:	1a 95       	dec	r17
    25d4:	c1 f7       	brne	.-16     	; 0x25c6 <__ftoa_engine+0xe6>
    25d6:	e9 e5       	ldi	r30, 0x59	; 89
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	68 94       	set
    25dc:	15 90       	lpm	r1, Z+
    25de:	15 91       	lpm	r17, Z+
    25e0:	35 91       	lpm	r19, Z+
    25e2:	65 91       	lpm	r22, Z+
    25e4:	95 91       	lpm	r25, Z+
    25e6:	05 90       	lpm	r0, Z+
    25e8:	7f e2       	ldi	r23, 0x2F	; 47
    25ea:	73 95       	inc	r23
    25ec:	e1 18       	sub	r14, r1
    25ee:	f1 0a       	sbc	r15, r17
    25f0:	43 0b       	sbc	r20, r19
    25f2:	56 0b       	sbc	r21, r22
    25f4:	c9 0b       	sbc	r28, r25
    25f6:	d0 09       	sbc	r29, r0
    25f8:	c0 f7       	brcc	.-16     	; 0x25ea <__ftoa_engine+0x10a>
    25fa:	e1 0c       	add	r14, r1
    25fc:	f1 1e       	adc	r15, r17
    25fe:	43 1f       	adc	r20, r19
    2600:	56 1f       	adc	r21, r22
    2602:	c9 1f       	adc	r28, r25
    2604:	d0 1d       	adc	r29, r0
    2606:	7e f4       	brtc	.+30     	; 0x2626 <__ftoa_engine+0x146>
    2608:	70 33       	cpi	r23, 0x30	; 48
    260a:	11 f4       	brne	.+4      	; 0x2610 <__ftoa_engine+0x130>
    260c:	8a 95       	dec	r24
    260e:	e6 cf       	rjmp	.-52     	; 0x25dc <__ftoa_engine+0xfc>
    2610:	e8 94       	clt
    2612:	01 50       	subi	r16, 0x01	; 1
    2614:	30 f0       	brcs	.+12     	; 0x2622 <__ftoa_engine+0x142>
    2616:	08 0f       	add	r16, r24
    2618:	0a f4       	brpl	.+2      	; 0x261c <__ftoa_engine+0x13c>
    261a:	00 27       	eor	r16, r16
    261c:	02 17       	cp	r16, r18
    261e:	08 f4       	brcc	.+2      	; 0x2622 <__ftoa_engine+0x142>
    2620:	20 2f       	mov	r18, r16
    2622:	23 95       	inc	r18
    2624:	02 2f       	mov	r16, r18
    2626:	7a 33       	cpi	r23, 0x3A	; 58
    2628:	28 f0       	brcs	.+10     	; 0x2634 <__ftoa_engine+0x154>
    262a:	79 e3       	ldi	r23, 0x39	; 57
    262c:	7d 93       	st	X+, r23
    262e:	2a 95       	dec	r18
    2630:	e9 f7       	brne	.-6      	; 0x262c <__ftoa_engine+0x14c>
    2632:	10 c0       	rjmp	.+32     	; 0x2654 <__ftoa_engine+0x174>
    2634:	7d 93       	st	X+, r23
    2636:	2a 95       	dec	r18
    2638:	89 f6       	brne	.-94     	; 0x25dc <__ftoa_engine+0xfc>
    263a:	06 94       	lsr	r0
    263c:	97 95       	ror	r25
    263e:	67 95       	ror	r22
    2640:	37 95       	ror	r19
    2642:	17 95       	ror	r17
    2644:	17 94       	ror	r1
    2646:	e1 18       	sub	r14, r1
    2648:	f1 0a       	sbc	r15, r17
    264a:	43 0b       	sbc	r20, r19
    264c:	56 0b       	sbc	r21, r22
    264e:	c9 0b       	sbc	r28, r25
    2650:	d0 09       	sbc	r29, r0
    2652:	98 f0       	brcs	.+38     	; 0x267a <__ftoa_engine+0x19a>
    2654:	23 95       	inc	r18
    2656:	7e 91       	ld	r23, -X
    2658:	73 95       	inc	r23
    265a:	7a 33       	cpi	r23, 0x3A	; 58
    265c:	08 f0       	brcs	.+2      	; 0x2660 <__ftoa_engine+0x180>
    265e:	70 e3       	ldi	r23, 0x30	; 48
    2660:	7c 93       	st	X, r23
    2662:	20 13       	cpse	r18, r16
    2664:	b8 f7       	brcc	.-18     	; 0x2654 <__ftoa_engine+0x174>
    2666:	7e 91       	ld	r23, -X
    2668:	70 61       	ori	r23, 0x10	; 16
    266a:	7d 93       	st	X+, r23
    266c:	30 f0       	brcs	.+12     	; 0x267a <__ftoa_engine+0x19a>
    266e:	83 95       	inc	r24
    2670:	71 e3       	ldi	r23, 0x31	; 49
    2672:	7d 93       	st	X+, r23
    2674:	70 e3       	ldi	r23, 0x30	; 48
    2676:	2a 95       	dec	r18
    2678:	e1 f7       	brne	.-8      	; 0x2672 <__ftoa_engine+0x192>
    267a:	11 24       	eor	r1, r1
    267c:	ef 90       	pop	r14
    267e:	ff 90       	pop	r15
    2680:	0f 91       	pop	r16
    2682:	1f 91       	pop	r17
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	99 27       	eor	r25, r25
    268a:	87 fd       	sbrc	r24, 7
    268c:	90 95       	com	r25
    268e:	08 95       	ret

00002690 <_exit>:
    2690:	f8 94       	cli

00002692 <__stop_program>:
    2692:	ff cf       	rjmp	.-2      	; 0x2692 <__stop_program>
