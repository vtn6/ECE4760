
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  0000238e  00002422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000238e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800240  00800240  00002562  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000074c  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e23  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001308  00000000  00000000  00005c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ef1  00000000  00000000  00006f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00008e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000850  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011f2  00000000  00000000  000099ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000abde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_16>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      58:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      60:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      64:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      68:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      6c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000070 <LCDBlank>:
      70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000082 <LCDHelloTop>:
      82:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000094 <LCDHelloBot>:
      94:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000a6 <LCDRange>:
      a6:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

000000af <LCDAutorangeOn>:
      af:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000be <LCD5Volts>:
      be:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000c7 <LCD256Volts>:
      c7:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000d3 <LCD11Volts>:
      d3:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000de <LCD1kOhm>:
      de:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000e6 <LCD10kOhm>:
      e6:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000ef <LCD100kOhm>:
      ef:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000f9 <LCD1kHz>:
      f9:	31 20 6b 48 5a 00 00                                1 kHZ..

00000100 <LCD10kHz>:
     100:	31 30 20 6b 48 5a 00 00                             10 kHZ..

00000108 <LCDMode>:
     108:	4d 4f 44 45 3a 20 00 00                             MODE: ..

00000110 <LCDVolt>:
     110:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000011c <LCDOhm>:
     11c:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000126 <LCDFreq>:
     126:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

00000131 <LCDManWelcomeTop>:
     131:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000013c <LCDManWelcomeBot>:
     13c:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

0000014b <LCDNavigation1Top>:
     14b:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000015d <LCDNavigation1Bot>:
     15d:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000016f <LCDNavigation2Top>:
     16f:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

00000180 <LCDNavigation2Bot>:
     180:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000018f <LCDVoltManTop>:
     18f:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

000001a0 <LCDVoltManBot>:
     1a0:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

000001ab <LCDOhmManTop>:
     1ab:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001bb <LCDOhmManBot>:
     1bb:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001c5 <LCDFreqManTop>:
     1c5:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001d6 <LCDFreqManBot>:
     1d6:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001e3 <LCDAutorangeMan1Top>:
     1e3:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001f0 <LCDAutorangeMan1Bot>:
     1f0:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001fb <LCDAutorangeMan2Top>:
     1fb:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

00000208 <LCDAutorangeMan2Bot>:
     208:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000219 <LcdCustomChar>:
     219:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     229:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     239:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     249:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     259:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     269:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     279:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     289:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     299:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     2a9:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2b9:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2c9:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2d9:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2e9:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2f9:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     309:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     319:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     329:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     339:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     349:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e1       	ldi	r29, 0x10	; 16
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	ee e8       	ldi	r30, 0x8E	; 142
     368:	f3 e2       	ldi	r31, 0x23	; 35
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	a0 34       	cpi	r26, 0x40	; 64
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a0 e4       	ldi	r26, 0x40	; 64
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a1 3c       	cpi	r26, 0xC1	; 193
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 73 05 	call	0xae6	; 0xae6 <main>
     38a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
  	DDRD = 0x0f;
     392:	2f e0       	ldi	r18, 0x0F	; 15
     394:	2a b9       	out	0x0a, r18	; 10
  	PORTD = 0xf0; 
     396:	80 ef       	ldi	r24, 0xF0	; 240
     398:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     39a:	9a e1       	ldi	r25, 0x1A	; 26
     39c:	39 2f       	mov	r19, r25
     39e:	3a 95       	dec	r19
     3a0:	f1 f7       	brne	.-4      	; 0x39e <ScanKeypad+0xc>
  	_delay_us(5);
  	key = PIND;
     3a2:	39 b1       	in	r19, 0x09	; 9
  	  
  	//get upper nibble
  	DDRD = 0xf0;
     3a4:	8a b9       	out	0x0a, r24	; 10
  	PORTD = 0x0f; 
     3a6:	2b b9       	out	0x0b, r18	; 11
     3a8:	9a 95       	dec	r25
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <ScanKeypad+0x16>
  	_delay_us(5);
  	key = key | PIND;
     3ac:	29 b1       	in	r18, 0x09	; 9
     3ae:	23 2b       	or	r18, r19
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
     3b0:	2f 3f       	cpi	r18, 0xFF	; 255
     3b2:	61 f0       	breq	.+24     	; 0x3cc <ScanKeypad+0x3a>
     3b4:	ef e1       	ldi	r30, 0x1F	; 31
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
  	  begin   
  	  	if (keytbl[butnum]==key)  break;   
     3ba:	80 81       	ld	r24, Z
     3bc:	9f 5f       	subi	r25, 0xFF	; 255
     3be:	82 17       	cp	r24, r18
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <ScanKeypad+0x34>
  	  end

  	  if (butnum==MAX_KEYS) butnum=0;
  	  else butnum++;	   //adjust by one to make range 1-16
     3c2:	89 2f       	mov	r24, r25
     3c4:	08 95       	ret
  	key = key | PIND;
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
     3c6:	31 96       	adiw	r30, 0x01	; 1
     3c8:	90 31       	cpi	r25, 0x10	; 16
     3ca:	b9 f7       	brne	.-18     	; 0x3ba <ScanKeypad+0x28>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
  	  else butnum++;	   //adjust by one to make range 1-16
  	end  
  	else butnum=0;
  	 
  	return butnum;
}
     3ce:	08 95       	ret

000003d0 <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     3d0:	0e 94 c9 01 	call	0x392	; 0x392 <ScanKeypad>
     3d4:	28 2f       	mov	r18, r24
	switch(keyState){
     3d6:	90 91 97 02 	lds	r25, 0x0297
     3da:	91 30       	cpi	r25, 0x01	; 1
     3dc:	79 f0       	breq	.+30     	; 0x3fc <Debounce+0x2c>
     3de:	91 30       	cpi	r25, 0x01	; 1
     3e0:	20 f0       	brcs	.+8      	; 0x3ea <Debounce+0x1a>
     3e2:	92 30       	cpi	r25, 0x02	; 2
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <Debounce+0x18>
     3e6:	59 c0       	rjmp	.+178    	; 0x49a <Debounce+0xca>
     3e8:	2f c0       	rjmp	.+94     	; 0x448 <Debounce+0x78>
	
    //in the RELEASED state: stay in this state if a key is not pressed
    //go to UNKNOWN if any key is pressed and reset the debounce countdown.
    case RELEASED:
	  if (key){
     3ea:	88 23       	and	r24, r24
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <Debounce+0x20>
     3ee:	55 c0       	rjmp	.+170    	; 0x49a <Debounce+0xca>
        keyState = UNKNOWN;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 97 02 	sts	0x0297, r24
		prevKeyState = RELEASED;
     3f6:	10 92 a2 02 	sts	0x02A2, r1
     3fa:	0c c0       	rjmp	.+24     	; 0x414 <Debounce+0x44>

    //in the UNKNOWN state: go to released if the button is not down Update
    //pressedAndReleased if the button was previously pressed.
    //go to PUSHED if the button is down
    case UNKNOWN:
	  if (key){
     3fc:	88 23       	and	r24, r24
     3fe:	b1 f0       	breq	.+44     	; 0x42c <Debounce+0x5c>
	  	if (key == checkKey){
     400:	80 91 b4 02 	lds	r24, 0x02B4
     404:	28 17       	cp	r18, r24
     406:	31 f4       	brne	.+12     	; 0x414 <Debounce+0x44>
		  keyState = PUSHED;
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	80 93 97 02 	sts	0x0297, r24
		  prevKeyState = UNKNOWN;
     40e:	90 93 a2 02 	sts	0x02A2, r25
     412:	08 95       	ret
		}
		else {
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
     414:	80 91 93 02 	lds	r24, 0x0293
     418:	90 91 94 02 	lds	r25, 0x0294
     41c:	4e 96       	adiw	r24, 0x1e	; 30
     41e:	90 93 b3 02 	sts	0x02B3, r25
     422:	80 93 b2 02 	sts	0x02B2, r24
		  checkKey = key;
     426:	20 93 b4 02 	sts	0x02B4, r18
     42a:	08 95       	ret
		}
      }
      else{
	    keyState = RELEASED;
     42c:	10 92 97 02 	sts	0x0297, r1
	    if (prevKeyState == PUSHED) {
     430:	80 91 a2 02 	lds	r24, 0x02A2
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	21 f4       	brne	.+8      	; 0x440 <Debounce+0x70>
		  curKey = checkKey; //The key to be checked has been pressed and debounced
     438:	80 91 b4 02 	lds	r24, 0x02B4
     43c:	80 93 b1 02 	sts	0x02B1, r24
	    }
		prevKeyState = UNKNOWN;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 a2 02 	sts	0x02A2, r24
     446:	08 95       	ret
      break;

    //in the PUSHED state go to UnKnown if the button is not down.
    //stay in PUSHED if the button is down
    case PUSHED:
	  if (!key){
     448:	88 23       	and	r24, r24
     44a:	79 f4       	brne	.+30     	; 0x46a <Debounce+0x9a>
	  	keyState = UNKNOWN;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 97 02 	sts	0x0297, r24
		prevKeyState = PUSHED;
     452:	90 93 a2 02 	sts	0x02A2, r25
        debounceTime = elapsedTime + DEBOUNCE_TIME;
     456:	80 91 93 02 	lds	r24, 0x0293
     45a:	90 91 94 02 	lds	r25, 0x0294
     45e:	4e 96       	adiw	r24, 0x1e	; 30
     460:	90 93 b3 02 	sts	0x02B3, r25
     464:	80 93 b2 02 	sts	0x02B2, r24
     468:	08 95       	ret
      }
	  else{
	  	if (key != checkKey){
     46a:	80 91 b4 02 	lds	r24, 0x02B4
     46e:	28 17       	cp	r18, r24
     470:	a1 f0       	breq	.+40     	; 0x49a <Debounce+0xca>
		  keyState = UNKNOWN;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 97 02 	sts	0x0297, r24
		  prevKeyState = RELEASED; //...???
     478:	10 92 a2 02 	sts	0x02A2, r1
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
     47c:	80 91 93 02 	lds	r24, 0x0293
     480:	90 91 94 02 	lds	r25, 0x0294
     484:	4e 96       	adiw	r24, 0x1e	; 30
     486:	90 93 b3 02 	sts	0x02B3, r25
     48a:	80 93 b2 02 	sts	0x02B2, r24
		  curKey = checkKey;
     48e:	80 91 b4 02 	lds	r24, 0x02B4
     492:	80 93 b1 02 	sts	0x02B1, r24
		  checkKey = key;
     496:	20 93 b4 02 	sts	0x02B4, r18
     49a:	08 95       	ret

0000049c <getCurKey>:
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     49c:	90 91 b1 02 	lds	r25, 0x02B1
	if (curKey){
     4a0:	80 91 b1 02 	lds	r24, 0x02B1
     4a4:	88 23       	and	r24, r24
     4a6:	11 f0       	breq	.+4      	; 0x4ac <getCurKey+0x10>
		curKey = 0;
     4a8:	10 92 b1 02 	sts	0x02B1, r1
	}
	return tmpKey;
}
     4ac:	89 2f       	mov	r24, r25
     4ae:	08 95       	ret

000004b0 <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     4b0:	90 91 b8 02 	lds	r25, 0x02B8
     4b4:	93 30       	cpi	r25, 0x03	; 3
     4b6:	c1 f1       	breq	.+112    	; 0x528 <UpdateManState+0x78>
     4b8:	94 30       	cpi	r25, 0x04	; 4
     4ba:	28 f4       	brcc	.+10     	; 0x4c6 <UpdateManState+0x16>
     4bc:	91 30       	cpi	r25, 0x01	; 1
     4be:	99 f0       	breq	.+38     	; 0x4e6 <UpdateManState+0x36>
     4c0:	92 30       	cpi	r25, 0x02	; 2
     4c2:	30 f5       	brcc	.+76     	; 0x510 <UpdateManState+0x60>
     4c4:	0c c0       	rjmp	.+24     	; 0x4de <UpdateManState+0x2e>
     4c6:	95 30       	cpi	r25, 0x05	; 5
     4c8:	09 f4       	brne	.+2      	; 0x4cc <UpdateManState+0x1c>
     4ca:	40 c0       	rjmp	.+128    	; 0x54c <UpdateManState+0x9c>
     4cc:	95 30       	cpi	r25, 0x05	; 5
     4ce:	a8 f1       	brcs	.+106    	; 0x53a <UpdateManState+0x8a>
     4d0:	96 30       	cpi	r25, 0x06	; 6
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <UpdateManState+0x26>
     4d4:	44 c0       	rjmp	.+136    	; 0x55e <UpdateManState+0xae>
     4d6:	97 30       	cpi	r25, 0x07	; 7
     4d8:	09 f0       	breq	.+2      	; 0x4dc <UpdateManState+0x2c>
     4da:	68 c0       	rjmp	.+208    	; 0x5ac <UpdateManState+0xfc>
     4dc:	4a c0       	rjmp	.+148    	; 0x572 <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     4de:	88 23       	and	r24, r24
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <UpdateManState+0x34>
     4e2:	64 c0       	rjmp	.+200    	; 0x5ac <UpdateManState+0xfc>
     4e4:	19 c0       	rjmp	.+50     	; 0x518 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
	    case NAVIGATION_1:
			if (key == 0x10){
     4e6:	80 31       	cpi	r24, 0x10	; 16
     4e8:	29 f4       	brne	.+10     	; 0x4f4 <UpdateManState+0x44>
				mode = returnMode;
     4ea:	80 91 b5 02 	lds	r24, 0x02B5
     4ee:	80 93 a1 02 	sts	0x02A1, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     4f4:	8e 30       	cpi	r24, 0x0E	; 14
     4f6:	19 f4       	brne	.+6      	; 0x4fe <UpdateManState+0x4e>
				manPage = WELCOME;
     4f8:	10 92 b8 02 	sts	0x02B8, r1
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     4fe:	8f 30       	cpi	r24, 0x0F	; 15
     500:	09 f0       	breq	.+2      	; 0x504 <UpdateManState+0x54>
     502:	54 c0       	rjmp	.+168    	; 0x5ac <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	80 93 b8 02 	sts	0x02B8, r24
				justSwitched = 1;
     50a:	90 93 b9 02 	sts	0x02B9, r25
     50e:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     510:	80 31       	cpi	r24, 0x10	; 16
     512:	89 f1       	breq	.+98     	; 0x576 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     514:	8e 30       	cpi	r24, 0x0E	; 14
     516:	21 f4       	brne	.+8      	; 0x520 <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 b8 02 	sts	0x02B8, r24
     51e:	38 c0       	rjmp	.+112    	; 0x590 <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     520:	8f 30       	cpi	r24, 0x0F	; 15
     522:	09 f0       	breq	.+2      	; 0x526 <UpdateManState+0x76>
     524:	43 c0       	rjmp	.+134    	; 0x5ac <UpdateManState+0xfc>
     526:	0d c0       	rjmp	.+26     	; 0x542 <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	29 f1       	breq	.+74     	; 0x576 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     52c:	8e 30       	cpi	r24, 0x0E	; 14
     52e:	11 f4       	brne	.+4      	; 0x534 <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	2b c0       	rjmp	.+86     	; 0x58a <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     534:	8f 30       	cpi	r24, 0x0F	; 15
     536:	d1 f5       	brne	.+116    	; 0x5ac <UpdateManState+0xfc>
     538:	0d c0       	rjmp	.+26     	; 0x554 <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     53a:	80 31       	cpi	r24, 0x10	; 16
     53c:	e1 f0       	breq	.+56     	; 0x576 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     53e:	8e 30       	cpi	r24, 0x0E	; 14
     540:	11 f4       	brne	.+4      	; 0x546 <UpdateManState+0x96>
				manPage = VOLT_MAN;
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	22 c0       	rjmp	.+68     	; 0x58a <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     546:	8f 30       	cpi	r24, 0x0F	; 15
     548:	89 f5       	brne	.+98     	; 0x5ac <UpdateManState+0xfc>
     54a:	0d c0       	rjmp	.+26     	; 0x566 <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     54c:	80 31       	cpi	r24, 0x10	; 16
     54e:	99 f0       	breq	.+38     	; 0x576 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     550:	8e 30       	cpi	r24, 0x0E	; 14
     552:	11 f4       	brne	.+4      	; 0x558 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	19 c0       	rjmp	.+50     	; 0x58a <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     558:	8f 30       	cpi	r24, 0x0F	; 15
     55a:	41 f5       	brne	.+80     	; 0x5ac <UpdateManState+0xfc>
     55c:	15 c0       	rjmp	.+42     	; 0x588 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     55e:	80 31       	cpi	r24, 0x10	; 16
     560:	51 f0       	breq	.+20     	; 0x576 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     562:	8e 30       	cpi	r24, 0x0E	; 14
     564:	11 f4       	brne	.+4      	; 0x56a <UpdateManState+0xba>
				manPage = FREQ_MAN;
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	10 c0       	rjmp	.+32     	; 0x58a <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     56a:	8f 30       	cpi	r24, 0x0F	; 15
     56c:	f9 f4       	brne	.+62     	; 0x5ac <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     56e:	87 e0       	ldi	r24, 0x07	; 7
     570:	0c c0       	rjmp	.+24     	; 0x58a <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     572:	80 31       	cpi	r24, 0x10	; 16
     574:	39 f4       	brne	.+14     	; 0x584 <UpdateManState+0xd4>
				mode = returnMode;
     576:	80 91 b5 02 	lds	r24, 0x02B5
     57a:	80 93 a1 02 	sts	0x02A1, r24
				manPage = WELCOME;
     57e:	10 92 b8 02 	sts	0x02B8, r1
     582:	05 c0       	rjmp	.+10     	; 0x58e <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     584:	8e 30       	cpi	r24, 0x0E	; 14
     586:	39 f4       	brne	.+14     	; 0x596 <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	80 93 b8 02 	sts	0x02B8, r24
				justSwitched = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 b9 02 	sts	0x02B9, r24
     594:	08 95       	ret
			}
			else if (key == 0x0F){
     596:	8f 30       	cpi	r24, 0x0F	; 15
     598:	49 f4       	brne	.+18     	; 0x5ac <UpdateManState+0xfc>
				mode = returnMode;
     59a:	80 91 b5 02 	lds	r24, 0x02B5
     59e:	80 93 a1 02 	sts	0x02A1, r24
				manPage = WELCOME;
     5a2:	10 92 b8 02 	sts	0x02B8, r1
				justSwitched = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 b9 02 	sts	0x02B9, r24
     5ac:	08 95       	ret

000005ae <setVref>:
	CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void setVref(uint8_t idx) {
     5ae:	e8 2f       	mov	r30, r24
	switch(idx) {
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	39 f0       	breq	.+14     	; 0x5c2 <setVref+0x14>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	18 f0       	brcs	.+6      	; 0x5be <setVref+0x10>
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	41 f4       	brne	.+16     	; 0x5cc <setVref+0x1e>
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     5be:	80 e6       	ldi	r24, 0x60	; 96
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     5c2:	80 ee       	ldi	r24, 0xE0	; 224
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     5c6:	80 ea       	ldi	r24, 0xA0	; 160
     5c8:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	e0 50       	subi	r30, 0x00	; 0
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	80 81       	ld	r24, Z
     5dc:	91 81       	ldd	r25, Z+1	; 0x01
     5de:	a2 81       	ldd	r26, Z+2	; 0x02
     5e0:	b3 81       	ldd	r27, Z+3	; 0x03
     5e2:	80 93 a9 02 	sts	0x02A9, r24
     5e6:	90 93 aa 02 	sts	0x02AA, r25
     5ea:	a0 93 ab 02 	sts	0x02AB, r26
     5ee:	b0 93 ac 02 	sts	0x02AC, r27
}
     5f2:	08 95       	ret

000005f4 <setOref>:

void setOref(uint8_t idx) {
     5f4:	e8 2f       	mov	r30, r24
	switch(idx) {
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	39 f0       	breq	.+14     	; 0x608 <setOref+0x14>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	18 f0       	brcs	.+6      	; 0x604 <setOref+0x10>
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	39 f4       	brne	.+14     	; 0x610 <setOref+0x1c>
     602:	04 c0       	rjmp	.+8      	; 0x60c <setOref+0x18>
		case 0:
			DDRA = (1 << 7); //100k resistor output
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	03 c0       	rjmp	.+6      	; 0x60e <setOref+0x1a>
			break;
		case 1:
			DDRA = (1 << 6); //10k resistor output
     608:	80 e4       	ldi	r24, 0x40	; 64
     60a:	01 c0       	rjmp	.+2      	; 0x60e <setOref+0x1a>
			break;
		case 2:
			DDRA = (1 << 5); //1k resistor output
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	81 b9       	out	0x01, r24	; 1
			break;
	}
	ohmRef = resistorRanges[idx];
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e4 5f       	subi	r30, 0xF4	; 244
     614:	fe 4f       	sbci	r31, 0xFE	; 254
     616:	80 81       	ld	r24, Z
     618:	80 93 96 02 	sts	0x0296, r24
	PORTA = DDRA;
     61c:	81 b1       	in	r24, 0x01	; 1
     61e:	82 b9       	out	0x02, r24	; 2
}
     620:	08 95       	ret

00000622 <UpdateDMMState>:
	CopyStringtoLCD(LCDHelloTop, 0, 0);
	CopyStringtoLCD(LCDHelloBot, 0, 1);
}

//Update the DMM based on button presses
void UpdateDMMState(void){
     622:	1f 93       	push	r17
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     624:	10 91 b1 02 	lds	r17, 0x02B1
	if (curKey){
     628:	80 91 b1 02 	lds	r24, 0x02B1
     62c:	88 23       	and	r24, r24
     62e:	11 f0       	breq	.+4      	; 0x634 <UpdateDMMState+0x12>
		curKey = 0;
     630:	10 92 b1 02 	sts	0x02B1, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     634:	11 23       	and	r17, r17
     636:	09 f4       	brne	.+2      	; 0x63a <UpdateDMMState+0x18>
     638:	ce c0       	rjmp	.+412    	; 0x7d6 <UpdateDMMState+0x1b4>
     63a:	80 91 b9 02 	lds	r24, 0x02B9
     63e:	88 23       	and	r24, r24
     640:	09 f0       	breq	.+2      	; 0x644 <UpdateDMMState+0x22>
     642:	c9 c0       	rjmp	.+402    	; 0x7d6 <UpdateDMMState+0x1b4>
		switch (mode){
     644:	90 91 a1 02 	lds	r25, 0x02A1
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	f1 f0       	breq	.+60     	; 0x688 <UpdateDMMState+0x66>
     64c:	93 30       	cpi	r25, 0x03	; 3
     64e:	30 f4       	brcc	.+12     	; 0x65c <UpdateDMMState+0x3a>
     650:	99 23       	and	r25, r25
     652:	51 f0       	breq	.+20     	; 0x668 <UpdateDMMState+0x46>
     654:	91 30       	cpi	r25, 0x01	; 1
     656:	09 f0       	breq	.+2      	; 0x65a <UpdateDMMState+0x38>
     658:	be c0       	rjmp	.+380    	; 0x7d6 <UpdateDMMState+0x1b4>
     65a:	12 c0       	rjmp	.+36     	; 0x680 <UpdateDMMState+0x5e>
     65c:	93 30       	cpi	r25, 0x03	; 3
     65e:	d9 f1       	breq	.+118    	; 0x6d6 <UpdateDMMState+0xb4>
     660:	94 30       	cpi	r25, 0x04	; 4
     662:	09 f0       	breq	.+2      	; 0x666 <UpdateDMMState+0x44>
     664:	b8 c0       	rjmp	.+368    	; 0x7d6 <UpdateDMMState+0x1b4>
     666:	6f c0       	rjmp	.+222    	; 0x746 <UpdateDMMState+0x124>
			case INIT:
				if (key == 0x0F){
     668:	1f 30       	cpi	r17, 0x0F	; 15
     66a:	31 f4       	brne	.+12     	; 0x678 <UpdateDMMState+0x56>
					PORTB = ~0x20;
     66c:	8f ed       	ldi	r24, 0xDF	; 223
     66e:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	80 93 b5 02 	sts	0x02B5, r24
     676:	6b c0       	rjmp	.+214    	; 0x74e <UpdateDMMState+0x12c>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					mode = VOLTMETER;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	80 93 a1 02 	sts	0x02A1, r24
     67e:	a8 c0       	rjmp	.+336    	; 0x7d0 <UpdateDMMState+0x1ae>
					justSwitched = 1;
				}
				break; 

			case MAN:
				UpdateManState(key);
     680:	81 2f       	mov	r24, r17
     682:	0e 94 58 02 	call	0x4b0	; 0x4b0 <UpdateManState>
     686:	a7 c0       	rjmp	.+334    	; 0x7d6 <UpdateDMMState+0x1b4>
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     688:	1f 30       	cpi	r17, 0x0F	; 15
     68a:	31 f4       	brne	.+12     	; 0x698 <UpdateDMMState+0x76>
					mode = MAN;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 a1 02 	sts	0x02A1, r24
					returnMode = VOLTMETER;
     692:	90 93 b5 02 	sts	0x02B5, r25
     696:	9d c0       	rjmp	.+314    	; 0x7d2 <UpdateDMMState+0x1b0>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     698:	1d 30       	cpi	r17, 0x0D	; 13
     69a:	09 f4       	brne	.+2      	; 0x69e <UpdateDMMState+0x7c>
     69c:	5e c0       	rjmp	.+188    	; 0x75a <UpdateDMMState+0x138>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     69e:	80 91 95 02 	lds	r24, 0x0295
     6a2:	88 23       	and	r24, r24
     6a4:	a9 f4       	brne	.+42     	; 0x6d0 <UpdateDMMState+0xae>
     6a6:	11 30       	cpi	r17, 0x01	; 1
     6a8:	99 f4       	brne	.+38     	; 0x6d0 <UpdateDMMState+0xae>
					rangeIdx++;
     6aa:	80 91 b6 02 	lds	r24, 0x02B6
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	80 93 b6 02 	sts	0x02B6, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6b4:	80 91 b6 02 	lds	r24, 0x02B6
     6b8:	60 91 92 02 	lds	r22, 0x0292
     6bc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodqi4>
     6c0:	90 93 b6 02 	sts	0x02B6, r25
					setVref(rangeIdx);
     6c4:	80 91 b6 02 	lds	r24, 0x02B6
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <setVref>
     6ce:	1a c0       	rjmp	.+52     	; 0x704 <UpdateDMMState+0xe2>
					justSwitched = 1;
				}
				else if (key == 0x0B){
     6d0:	1b 30       	cpi	r17, 0x0B	; 11
     6d2:	89 f5       	brne	.+98     	; 0x736 <UpdateDMMState+0x114>
     6d4:	70 c0       	rjmp	.+224    	; 0x7b6 <UpdateDMMState+0x194>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     6d6:	1f 30       	cpi	r17, 0x0F	; 15
     6d8:	c1 f1       	breq	.+112    	; 0x74a <UpdateDMMState+0x128>
					returnMode = OHMMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     6da:	1d 30       	cpi	r17, 0x0D	; 13
     6dc:	f1 f1       	breq	.+124    	; 0x75a <UpdateDMMState+0x138>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     6de:	80 91 95 02 	lds	r24, 0x0295
     6e2:	88 23       	and	r24, r24
     6e4:	91 f4       	brne	.+36     	; 0x70a <UpdateDMMState+0xe8>
     6e6:	11 30       	cpi	r17, 0x01	; 1
     6e8:	81 f4       	brne	.+32     	; 0x70a <UpdateDMMState+0xe8>
					rangeIdx++;
     6ea:	80 91 b6 02 	lds	r24, 0x02B6
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 b6 02 	sts	0x02B6, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6f4:	80 91 b6 02 	lds	r24, 0x02B6
     6f8:	60 91 92 02 	lds	r22, 0x0292
     6fc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodqi4>
     700:	90 93 b6 02 	sts	0x02B6, r25
					justSwitched = 1;
     704:	10 93 b9 02 	sts	0x02B9, r17
     708:	66 c0       	rjmp	.+204    	; 0x7d6 <UpdateDMMState+0x1b4>
				}
				else if (key == 0x0A){
     70a:	1a 30       	cpi	r17, 0x0A	; 10
     70c:	a1 f4       	brne	.+40     	; 0x736 <UpdateDMMState+0x114>
					mode = VOLTMETER;
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	80 93 a1 02 	sts	0x02A1, r24
					rangeIdxMod = 3;
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	80 93 92 02 	sts	0x0292, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     71a:	80 91 b6 02 	lds	r24, 0x02B6
     71e:	60 91 92 02 	lds	r22, 0x0292
     722:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodqi4>
     726:	90 93 b6 02 	sts	0x02B6, r25
					setOref(rangeIdx);
     72a:	80 91 b6 02 	lds	r24, 0x02B6
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setOref>
     734:	4d c0       	rjmp	.+154    	; 0x7d0 <UpdateDMMState+0x1ae>
					justSwitched = 1;
				}
				else if (key == 0x0C){
     736:	1c 30       	cpi	r17, 0x0C	; 12
     738:	09 f0       	breq	.+2      	; 0x73c <UpdateDMMState+0x11a>
     73a:	4d c0       	rjmp	.+154    	; 0x7d6 <UpdateDMMState+0x1b4>
					mode = FREQMETER;
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	80 93 a1 02 	sts	0x02A1, r24
					rangeIdxMod = 2;
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	3b c0       	rjmp	.+118    	; 0x7bc <UpdateDMMState+0x19a>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     746:	1f 30       	cpi	r17, 0x0F	; 15
     748:	31 f4       	brne	.+12     	; 0x756 <UpdateDMMState+0x134>
					returnMode = FREQMETER;
     74a:	90 93 b5 02 	sts	0x02B5, r25
					mode = MAN;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 a1 02 	sts	0x02A1, r24
     754:	3e c0       	rjmp	.+124    	; 0x7d2 <UpdateDMMState+0x1b0>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     756:	1d 30       	cpi	r17, 0x0D	; 13
     758:	49 f4       	brne	.+18     	; 0x76c <UpdateDMMState+0x14a>
					autoRange ^= 1;
     75a:	80 91 95 02 	lds	r24, 0x0295
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	89 27       	eor	r24, r25
     762:	80 93 95 02 	sts	0x0295, r24
					justSwitched = 1;
     766:	90 93 b9 02 	sts	0x02B9, r25
     76a:	35 c0       	rjmp	.+106    	; 0x7d6 <UpdateDMMState+0x1b4>
				}
				else if (!autoRange && key == 0x01){
     76c:	80 91 95 02 	lds	r24, 0x0295
     770:	88 23       	and	r24, r24
     772:	c1 f4       	brne	.+48     	; 0x7a4 <UpdateDMMState+0x182>
     774:	11 30       	cpi	r17, 0x01	; 1
     776:	b1 f4       	brne	.+44     	; 0x7a4 <UpdateDMMState+0x182>
					rangeIdx++;
     778:	80 91 b6 02 	lds	r24, 0x02B6
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 93 b6 02 	sts	0x02B6, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     782:	80 91 b6 02 	lds	r24, 0x02B6
     786:	60 91 92 02 	lds	r22, 0x0292
     78a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodqi4>
     78e:	90 93 b6 02 	sts	0x02B6, r25
					frequencyRef = frequencyRanges[rangeIdx];
     792:	e0 91 b6 02 	lds	r30, 0x02B6
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	e1 5f       	subi	r30, 0xF1	; 241
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	80 81       	ld	r24, Z
     79e:	80 93 ba 02 	sts	0x02BA, r24
     7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <UpdateDMMState+0x1ae>
					justSwitched = 1;
				}
				else if (key == 0x0A){
     7a4:	1a 30       	cpi	r17, 0x0A	; 10
     7a6:	29 f4       	brne	.+10     	; 0x7b2 <UpdateDMMState+0x190>
					mode = VOLTMETER;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	80 93 a1 02 	sts	0x02A1, r24
					rangeIdxMod = 3;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <UpdateDMMState+0x19a>
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
     7b2:	1b 30       	cpi	r17, 0x0B	; 11
     7b4:	81 f4       	brne	.+32     	; 0x7d6 <UpdateDMMState+0x1b4>
					mode = OHMMETER;
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	80 93 a1 02 	sts	0x02A1, r24
					rangeIdxMod = 3;
     7bc:	80 93 92 02 	sts	0x0292, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     7c0:	80 91 b6 02 	lds	r24, 0x02B6
     7c4:	60 91 92 02 	lds	r22, 0x0292
     7c8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodqi4>
     7cc:	90 93 b6 02 	sts	0x02B6, r25
					justSwitched = 1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 b9 02 	sts	0x02B9, r24
				}
				break;
		}
	}
}
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	//check for overflow. If the elapsedTime overflows, reset debounceTime
	//as well
	
	uint8_t debounceFlag1 = 1;
	uint8_t debounceFlag2 = 0;
	if (elapsedTime >= debounceTime && debounceTime < DEBOUNCE_TIME){
     7fc:	20 91 93 02 	lds	r18, 0x0293
     800:	30 91 94 02 	lds	r19, 0x0294
     804:	80 91 b2 02 	lds	r24, 0x02B2
     808:	90 91 b3 02 	lds	r25, 0x02B3
     80c:	28 17       	cp	r18, r24
     80e:	39 07       	cpc	r19, r25
     810:	38 f0       	brcs	.+14     	; 0x820 <__vector_16+0x46>
     812:	80 91 b2 02 	lds	r24, 0x02B2
     816:	90 91 b3 02 	lds	r25, 0x02B3
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	4e 97       	sbiw	r24, 0x1e	; 30
     81e:	08 f0       	brcs	.+2      	; 0x822 <__vector_16+0x48>
     820:	71 e0       	ldi	r23, 0x01	; 1
		debounceFlag1 = 0;
	}
	
	//check if we are waiting to debounce. If we are, then take precautions
	//so that there are no overflow errors
	if (0xff - debounceTime < DEBOUNCE_TIME){
     822:	20 91 b2 02 	lds	r18, 0x02B2
     826:	30 91 b3 02 	lds	r19, 0x02B3
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	82 1b       	sub	r24, r18
     830:	93 0b       	sbc	r25, r19
     832:	4e 97       	sbiw	r24, 0x1e	; 30
     834:	10 f0       	brcs	.+4      	; 0x83a <__vector_16+0x60>
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	12 c0       	rjmp	.+36     	; 0x85e <__vector_16+0x84>
		uint8_t diff = 0xff - debounceTime;
     83a:	80 91 b2 02 	lds	r24, 0x02B2
     83e:	90 91 b3 02 	lds	r25, 0x02B3
		if (elapsedTime >= DEBOUNCE_TIME - diff){
     842:	40 91 93 02 	lds	r20, 0x0293
     846:	50 91 94 02 	lds	r21, 0x0294
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	80 95       	com	r24
     84e:	2e e1       	ldi	r18, 0x1E	; 30
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	28 1b       	sub	r18, r24
     854:	31 09       	sbc	r19, r1
     856:	42 17       	cp	r20, r18
     858:	53 07       	cpc	r21, r19
     85a:	08 f0       	brcs	.+2      	; 0x85e <__vector_16+0x84>
     85c:	61 e0       	ldi	r22, 0x01	; 1
			debounceFlag2 = 1;
		}
	}

	elapsedTime++;
     85e:	80 91 93 02 	lds	r24, 0x0293
     862:	90 91 94 02 	lds	r25, 0x0294
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	90 93 94 02 	sts	0x0294, r25
     86c:	80 93 93 02 	sts	0x0293, r24
	if ((elapsedTime >= debounceTime && debounceFlag1) || (elapsedTime < debounceTime && debounceFlag2)){
     870:	20 91 93 02 	lds	r18, 0x0293
     874:	30 91 94 02 	lds	r19, 0x0294
     878:	80 91 b2 02 	lds	r24, 0x02B2
     87c:	90 91 b3 02 	lds	r25, 0x02B3
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	10 f0       	brcs	.+4      	; 0x88a <__vector_16+0xb0>
     886:	77 23       	and	r23, r23
     888:	69 f4       	brne	.+26     	; 0x8a4 <__vector_16+0xca>
     88a:	20 91 93 02 	lds	r18, 0x0293
     88e:	30 91 94 02 	lds	r19, 0x0294
     892:	80 91 b2 02 	lds	r24, 0x02B2
     896:	90 91 b3 02 	lds	r25, 0x02B3
     89a:	28 17       	cp	r18, r24
     89c:	39 07       	cpc	r19, r25
     89e:	30 f4       	brcc	.+12     	; 0x8ac <__vector_16+0xd2>
     8a0:	66 23       	and	r22, r22
     8a2:	21 f0       	breq	.+8      	; 0x8ac <__vector_16+0xd2>
		Debounce();
     8a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Debounce>
		UpdateDMMState();
     8a8:	0e 94 11 03 	call	0x622	; 0x622 <UpdateDMMState>
	}

	if((elapsedTime % 200) == 0) {
     8ac:	80 91 93 02 	lds	r24, 0x0293
     8b0:	90 91 94 02 	lds	r25, 0x0294
     8b4:	68 ec       	ldi	r22, 0xC8	; 200
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__udivmodhi4>
     8bc:	89 2b       	or	r24, r25
     8be:	19 f4       	brne	.+6      	; 0x8c6 <__vector_16+0xec>
    	triggerPoll = 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 9c 02 	sts	0x029C, r24
  	}
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <poll>:
			}
			break;
	}
}

void poll(void) {
     8e8:	6f 92       	push	r6
     8ea:	7f 92       	push	r7
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
	//get the sample
	Ain = ADCH;
     900:	80 91 79 00 	lds	r24, 0x0079
     904:	80 93 b7 02 	sts	0x02B7, r24
	//start another conversion
	ADCSRA |= (1<<ADSC);
     908:	80 91 7a 00 	lds	r24, 0x007A
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	80 93 7a 00 	sts	0x007A, r24
	voltage = (float)Ain;
     912:	60 91 b7 02 	lds	r22, 0x02B7
	voltage = (voltage/256.0) * Vref;
     916:	e0 90 a9 02 	lds	r14, 0x02A9
     91a:	f0 90 aa 02 	lds	r15, 0x02AA
     91e:	00 91 ab 02 	lds	r16, 0x02AB
     922:	10 91 ac 02 	lds	r17, 0x02AC
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__floatunsisf>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	5b e3       	ldi	r21, 0x3B	; 59
     938:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3>
     93c:	a8 01       	movw	r20, r16
     93e:	97 01       	movw	r18, r14
     940:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3>
     944:	3b 01       	movw	r6, r22
     946:	4c 01       	movw	r8, r24
     948:	60 93 98 02 	sts	0x0298, r22
     94c:	70 93 99 02 	sts	0x0299, r23
     950:	80 93 9a 02 	sts	0x029A, r24
     954:	90 93 9b 02 	sts	0x029B, r25
	ohm = (ohmRef * voltage)/(Vref - voltage);
     958:	60 91 96 02 	lds	r22, 0x0296
     95c:	a0 90 a9 02 	lds	r10, 0x02A9
     960:	b0 90 aa 02 	lds	r11, 0x02AA
     964:	c0 90 ab 02 	lds	r12, 0x02AB
     968:	d0 90 ac 02 	lds	r13, 0x02AC
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	88 27       	eor	r24, r24
     970:	77 fd       	sbrc	r23, 7
     972:	80 95       	com	r24
     974:	98 2f       	mov	r25, r24
     976:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     97a:	a4 01       	movw	r20, r8
     97c:	93 01       	movw	r18, r6
     97e:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3>
     982:	7b 01       	movw	r14, r22
     984:	8c 01       	movw	r16, r24
     986:	c6 01       	movw	r24, r12
     988:	b5 01       	movw	r22, r10
     98a:	a4 01       	movw	r20, r8
     98c:	93 01       	movw	r18, r6
     98e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__subsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	c8 01       	movw	r24, r16
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divsf3>
     99e:	7b 01       	movw	r14, r22
     9a0:	8c 01       	movw	r16, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	d8 01       	movw	r26, r16
     9a6:	80 93 9d 02 	sts	0x029D, r24
     9aa:	90 93 9e 02 	sts	0x029E, r25
     9ae:	a0 93 9f 02 	sts	0x029F, r26
     9b2:	b0 93 a0 02 	sts	0x02A0, r27
	switch(mode) {
     9b6:	80 91 a1 02 	lds	r24, 0x02A1
     9ba:	82 30       	cpi	r24, 0x02	; 2
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <poll+0xdc>
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	61 f4       	brne	.+24     	; 0x9da <poll+0xf2>
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <poll+0xe2>
		case VOLTMETER:
			dtostrf(voltage, 4, 2, v_string);
     9c4:	c4 01       	movw	r24, r8
     9c6:	b3 01       	movw	r22, r6
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <poll+0xe6>
			break;
		case OHMMETER:
			dtostrf(ohm, 4, 2, v_string);
     9ca:	b7 01       	movw	r22, r14
     9cc:	c8 01       	movw	r24, r16
     9ce:	44 e0       	ldi	r20, 0x04	; 4
     9d0:	22 e0       	ldi	r18, 0x02	; 2
     9d2:	0d ea       	ldi	r16, 0xAD	; 173
     9d4:	12 e0       	ldi	r17, 0x02	; 2
     9d6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <dtostrf>
			break;
	}
	sprintf(LCDBuffer, "%s",v_string);
     9da:	03 ea       	ldi	r16, 0xA3	; 163
     9dc:	12 e0       	ldi	r17, 0x02	; 2
     9de:	c8 01       	movw	r24, r16
     9e0:	6d ea       	ldi	r22, 0xAD	; 173
     9e2:	72 e0       	ldi	r23, 0x02	; 2
     9e4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strcpy>

	CopyStringtoLCD(LCDBlank, 0, 0);
     9e8:	80 e7       	ldi	r24, 0x70	; 112
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
	LCDGotoXY(0, 0);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	0e 94 07 07 	call	0xe0e	; 0xe0e <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     9fc:	f8 01       	movw	r30, r16
     9fe:	01 90       	ld	r0, Z+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <poll+0x116>
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	e0 1b       	sub	r30, r16
     a08:	f1 0b       	sbc	r31, r17
     a0a:	c8 01       	movw	r24, r16
     a0c:	6e 2f       	mov	r22, r30
     a0e:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCDstring>
}
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	bf 90       	pop	r11
     a20:	af 90       	pop	r10
     a22:	9f 90       	pop	r9
     a24:	8f 90       	pop	r8
     a26:	7f 90       	pop	r7
     a28:	6f 90       	pop	r6
     a2a:	08 95       	ret

00000a2c <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     a2c:	0e 94 51 07 	call	0xea2	; 0xea2 <LCDinit>
	LCDcursorOFF();
     a30:	0e 94 b9 07 	call	0xf72	; 0xf72 <LCDcursorOFF>
	LCDclr();				//clear the display
     a34:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
	LCDGotoXY(0,0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	0e 94 07 07 	call	0xe0e	; 0xe0e <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     a40:	82 e8       	ldi	r24, 0x82	; 130
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     a4c:	84 e9       	ldi	r24, 0x94	; 148
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
}
     a58:	08 95       	ret

00000a5a <Initialize>:
	  }
      break;
  }
}

void Initialize(void) {
     a5a:	1f 93       	push	r17
  //set up the ports
  triggerPoll = 0;
     a5c:	10 92 9c 02 	sts	0x029C, r1
  //init the A to D converter
  //channel zero/ left adj /EXTERNAL Aref
  //!!!CONNECT Aref jumper!!!!
  //ADMUX = (1<<ADLAR);
  //ADMUX = (1 << ADLAR) | (1 << REFS0);
  setVref(0); //Set to 5v Vref
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 d7 02 	call	0x5ae	; 0x5ae <setVref>
  setOref(0); //Set to 100k
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <setOref>

  //enable ADC and set prescaler to 1/128*16MHz=125,000
  //and clear interupt enable
  //and start a conversion
  ADCSRA = (1<<ADEN) + 7;
     a70:	87 e8       	ldi	r24, 0x87	; 135
     a72:	80 93 7a 00 	sts	0x007A, r24

  // Set A to input (high impedence)
  DDRA = 0x00;
     a76:	11 b8       	out	0x01, r1	; 1
  
  // PortB: LEDs, output
  DDRB=0xff;
     a78:	1f ef       	ldi	r17, 0xFF	; 255
     a7a:	14 b9       	out	0x04, r17	; 4
  PORTB=0xff;
     a7c:	15 b9       	out	0x05, r17	; 5
  // PortD: Keypad
  DDRD=0x00;
     a7e:	1a b8       	out	0x0a, r1	; 10

  //set up timer 0 for 1 mSec ticks
  TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249;  	//set the compare reg to 250 time ticks
     a86:	89 ef       	ldi	r24, 0xF9	; 249
     a88:	87 bd       	out	0x27, r24	; 39
  TCCR0A = 0b00000010; // turn on clear-on-match
     a8a:	94 bd       	out	0x24, r25	; 36
  TCCR0B = 0b00000011;	// clock prescalar to 64
     a8c:	23 e0       	ldi	r18, 0x03	; 3
     a8e:	25 bd       	out	0x25, r18	; 37
  //uart_init();
  //stdout = stdin = stderr = &uart_str;
  //fprintf(stdout,"Starting ADC demo...\n\r");

  //initialize the current key to null
  curKey = 0;
     a90:	10 92 b1 02 	sts	0x02B1, r1
  elapsedTime = 30;
     a94:	8e e1       	ldi	r24, 0x1E	; 30
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 94 02 	sts	0x0294, r25
     a9c:	80 93 93 02 	sts	0x0293, r24
  debounceTime = 30;
     aa0:	90 93 b3 02 	sts	0x02B3, r25
     aa4:	80 93 b2 02 	sts	0x02B2, r24
  autoRange = 0;
     aa8:	10 92 95 02 	sts	0x0295, r1
  mode = INIT;
     aac:	10 92 a1 02 	sts	0x02A1, r1
  manPage = WELCOME;
     ab0:	10 92 b8 02 	sts	0x02B8, r1
  keyState = RELEASED;
     ab4:	10 92 97 02 	sts	0x0297, r1
  rangeIdx = 0;
     ab8:	10 92 b6 02 	sts	0x02B6, r1
  rangeIdxMod = 3;
     abc:	20 93 92 02 	sts	0x0292, r18
  frequencyRef = frequencyRanges[rangeIdx];
     ac0:	80 91 b6 02 	lds	r24, 0x02B6
     ac4:	ef e0       	ldi	r30, 0x0F	; 15
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	e8 0f       	add	r30, r24
     aca:	f1 1d       	adc	r31, r1
     acc:	80 81       	ld	r24, Z
     ace:	80 93 ba 02 	sts	0x02BA, r24
  justSwitched = 0;
     ad2:	10 92 b9 02 	sts	0x02B9, r1
  PORTB = ~0x01;
     ad6:	8e ef       	ldi	r24, 0xFE	; 254
     ad8:	85 b9       	out	0x05, r24	; 5
  InitLCD();
     ada:	0e 94 16 05 	call	0xa2c	; 0xa2c <InitLCD>
  PORTB = 0xFF;
     ade:	15 b9       	out	0x05, r17	; 5
  sei();
     ae0:	78 94       	sei

}
     ae2:	1f 91       	pop	r17
     ae4:	08 95       	ret

00000ae6 <main>:
	PORTA = DDRA;
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
	Initialize();
     aea:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Initialize>
  					LCDstring(LCDBuffer, strlen(LCDBuffer));
					break;

				case OHMMETER:
					LCDGotoXY(0, 0);
					LCDstring(LCDBuffer, strlen(LCDBuffer));
     aee:	c3 ea       	ldi	r28, 0xA3	; 163
     af0:	d2 e0       	ldi	r29, 0x02	; 2

int main(void){
	Initialize();
	
	while(1){
	uint8_t key = curKey;
     af2:	80 91 b1 02 	lds	r24, 0x02B1
		if (key){
     af6:	88 23       	and	r24, r24
     af8:	11 f0       	breq	.+4      	; 0xafe <main+0x18>
			PORTB = ~key;
     afa:	80 95       	com	r24
     afc:	85 b9       	out	0x05, r24	; 5
		}
		if(triggerPoll) {
     afe:	80 91 9c 02 	lds	r24, 0x029C
     b02:	88 23       	and	r24, r24
     b04:	21 f0       	breq	.+8      	; 0xb0e <main+0x28>
			poll();
     b06:	0e 94 74 04 	call	0x8e8	; 0x8e8 <poll>
			triggerPoll = 0;
     b0a:	10 92 9c 02 	sts	0x029C, r1
    	}
	    if (justSwitched){
     b0e:	80 91 b9 02 	lds	r24, 0x02B9
     b12:	88 23       	and	r24, r24
     b14:	09 f4       	brne	.+2      	; 0xb18 <main+0x32>
     b16:	06 c1       	rjmp	.+524    	; 0xd24 <main+0x23e>
			switch (mode){
     b18:	80 91 a1 02 	lds	r24, 0x02A1
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	09 f4       	brne	.+2      	; 0xb22 <main+0x3c>
     b20:	7c c0       	rjmp	.+248    	; 0xc1a <main+0x134>
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	20 f4       	brcc	.+8      	; 0xb2e <main+0x48>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	09 f0       	breq	.+2      	; 0xb2c <main+0x46>
     b2a:	f9 c0       	rjmp	.+498    	; 0xd1e <main+0x238>
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <main+0x56>
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	09 f4       	brne	.+2      	; 0xb34 <main+0x4e>
     b32:	9f c0       	rjmp	.+318    	; 0xc72 <main+0x18c>
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	09 f0       	breq	.+2      	; 0xb3a <main+0x54>
     b38:	f2 c0       	rjmp	.+484    	; 0xd1e <main+0x238>
     b3a:	c5 c0       	rjmp	.+394    	; 0xcc6 <main+0x1e0>
				case MAN:
		  			switch (manPage){
     b3c:	80 91 b8 02 	lds	r24, 0x02B8
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	a1 f1       	breq	.+104    	; 0xbac <main+0xc6>
     b44:	84 30       	cpi	r24, 0x04	; 4
     b46:	28 f4       	brcc	.+10     	; 0xb52 <main+0x6c>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	d1 f0       	breq	.+52     	; 0xb80 <main+0x9a>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	18 f5       	brcc	.+70     	; 0xb96 <main+0xb0>
     b50:	0c c0       	rjmp	.+24     	; 0xb6a <main+0x84>
     b52:	85 30       	cpi	r24, 0x05	; 5
     b54:	09 f4       	brne	.+2      	; 0xb58 <main+0x72>
     b56:	40 c0       	rjmp	.+128    	; 0xbd8 <main+0xf2>
     b58:	85 30       	cpi	r24, 0x05	; 5
     b5a:	98 f1       	brcs	.+102    	; 0xbc2 <main+0xdc>
     b5c:	86 30       	cpi	r24, 0x06	; 6
     b5e:	09 f4       	brne	.+2      	; 0xb62 <main+0x7c>
     b60:	46 c0       	rjmp	.+140    	; 0xbee <main+0x108>
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	09 f0       	breq	.+2      	; 0xb68 <main+0x82>
     b66:	db c0       	rjmp	.+438    	; 0xd1e <main+0x238>
     b68:	4d c0       	rjmp	.+154    	; 0xc04 <main+0x11e>
					  	case WELCOME:
							LCDclr();
     b6a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     b6e:	81 e3       	ldi	r24, 0x31	; 49
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     b7a:	8c e3       	ldi	r24, 0x3C	; 60
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	b7 c0       	rjmp	.+366    	; 0xcee <main+0x208>
							break;
					    case NAVIGATION_1:
							LCDclr();
     b80:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     b84:	8b e4       	ldi	r24, 0x4B	; 75
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     b90:	8d e5       	ldi	r24, 0x5D	; 93
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	ac c0       	rjmp	.+344    	; 0xcee <main+0x208>
							break;
						case NAVIGATION_2:
							LCDclr();
     b96:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     b9a:	8f e6       	ldi	r24, 0x6F	; 111
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	a1 c0       	rjmp	.+322    	; 0xcee <main+0x208>
							break;
					 	case VOLT_MAN:
							LCDclr();
     bac:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDVoltManTop, 0, 0);
     bb0:	8f e8       	ldi	r24, 0x8F	; 143
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDVoltManBot, 0, 1);
     bbc:	80 ea       	ldi	r24, 0xA0	; 160
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	96 c0       	rjmp	.+300    	; 0xcee <main+0x208>
							break;
						case OHM_MAN:
							LCDclr();
     bc2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDOhmManTop, 0, 0);
     bc6:	8b ea       	ldi	r24, 0xAB	; 171
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDOhmManBot, 0, 1);
     bd2:	8b eb       	ldi	r24, 0xBB	; 187
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	8b c0       	rjmp	.+278    	; 0xcee <main+0x208>
							break;
						case FREQ_MAN:
							LCDclr();
     bd8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDFreqManTop, 0, 0);
     bdc:	85 ec       	ldi	r24, 0xC5	; 197
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDFreqManBot, 0, 1);
     be8:	86 ed       	ldi	r24, 0xD6	; 214
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	80 c0       	rjmp	.+256    	; 0xcee <main+0x208>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     bee:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     bf2:	83 ee       	ldi	r24, 0xE3	; 227
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     bfe:	80 ef       	ldi	r24, 0xF0	; 240
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	75 c0       	rjmp	.+234    	; 0xcee <main+0x208>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     c04:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     c08:	8b ef       	ldi	r24, 0xFB	; 251
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	6a c0       	rjmp	.+212    	; 0xcee <main+0x208>
							break;
					}
			    		break;

				case VOLTMETER:
			    	LCDclr();
     c1a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	66 e0       	ldi	r22, 0x06	; 6
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
					if (autoRange){
     c36:	80 91 95 02 	lds	r24, 0x0295
     c3a:	88 23       	and	r24, r24
     c3c:	09 f0       	breq	.+2      	; 0xc40 <main+0x15a>
     c3e:	55 c0       	rjmp	.+170    	; 0xcea <main+0x204>
				  		CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     c40:	86 ea       	ldi	r24, 0xA6	; 166
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
						switch (rangeIdx){
     c4c:	80 91 b6 02 	lds	r24, 0x02B6
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	49 f0       	breq	.+18     	; 0xc66 <main+0x180>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	20 f0       	brcs	.+8      	; 0xc60 <main+0x17a>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	09 f0       	breq	.+2      	; 0xc5e <main+0x178>
     c5c:	60 c0       	rjmp	.+192    	; 0xd1e <main+0x238>
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <main+0x186>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     c60:	8e eb       	ldi	r24, 0xBE	; 190
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	58 c0       	rjmp	.+176    	; 0xd16 <main+0x230>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     c66:	87 ec       	ldi	r24, 0xC7	; 199
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	55 c0       	rjmp	.+170    	; 0xd16 <main+0x230>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     c6c:	83 ed       	ldi	r24, 0xD3	; 211
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	52 c0       	rjmp	.+164    	; 0xd16 <main+0x230>
						}
				  	}	
			    	break;

			  	case OHMMETER:
			    	LCDclr();
     c72:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
     c76:	88 e0       	ldi	r24, 0x08	; 8
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDOhm, MODE_START, 0);
     c82:	8c e1       	ldi	r24, 0x1C	; 28
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	66 e0       	ldi	r22, 0x06	; 6
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
				  	if (autoRange){
     c8e:	80 91 95 02 	lds	r24, 0x0295
     c92:	88 23       	and	r24, r24
     c94:	51 f5       	brne	.+84     	; 0xcea <main+0x204>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     c96:	86 ea       	ldi	r24, 0xA6	; 166
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
						switch (rangeIdx){
     ca2:	80 91 b6 02 	lds	r24, 0x02B6
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	41 f0       	breq	.+16     	; 0xcba <main+0x1d4>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <main+0x1ce>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	b1 f5       	brne	.+108    	; 0xd1e <main+0x238>
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <main+0x1da>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     cb4:	8f ee       	ldi	r24, 0xEF	; 239
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	2e c0       	rjmp	.+92     	; 0xd16 <main+0x230>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     cba:	86 ee       	ldi	r24, 0xE6	; 230
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	2b c0       	rjmp	.+86     	; 0xd16 <main+0x230>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     cc0:	8e ed       	ldi	r24, 0xDE	; 222
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	28 c0       	rjmp	.+80     	; 0xd16 <main+0x230>
						}
				  	}
			    	break;

			  	case FREQMETER:
			  		LCDclr();
     cc6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDFreq, MODE_START, 0);
     cd6:	86 e2       	ldi	r24, 0x26	; 38
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	66 e0       	ldi	r22, 0x06	; 6
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
				  	if (autoRange){
     ce2:	80 91 95 02 	lds	r24, 0x0295
     ce6:	88 23       	and	r24, r24
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <main+0x20c>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     cea:	8f ea       	ldi	r24, 0xAF	; 175
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <main+0x232>
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     cf2:	86 ea       	ldi	r24, 0xA6	; 166
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
						switch (rangeIdx){
     cfe:	80 91 b6 02 	lds	r24, 0x02B6
     d02:	88 23       	and	r24, r24
     d04:	19 f0       	breq	.+6      	; 0xd0c <main+0x226>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	51 f4       	brne	.+20     	; 0xd1e <main+0x238>
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <main+0x22c>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <main+0x230>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     d12:	89 ef       	ldi	r24, 0xF9	; 249
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	67 e0       	ldi	r22, 0x07	; 7
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	0e 94 16 07 	call	0xe2c	; 0xe2c <CopyStringtoLCD>
						}
				  	}
				    break;
			}

			justSwitched = 0;
     d1e:	10 92 b9 02 	sts	0x02B9, r1
     d22:	e7 ce       	rjmp	.-562    	; 0xaf2 <main+0xc>
		}
		else{
			switch (mode){
     d24:	80 91 a1 02 	lds	r24, 0x02A1
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	29 f0       	breq	.+10     	; 0xd36 <main+0x250>
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	19 f0       	breq	.+6      	; 0xd36 <main+0x250>
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	09 f0       	breq	.+2      	; 0xd36 <main+0x250>
     d34:	de ce       	rjmp	.-580    	; 0xaf2 <main+0xc>
				case OHMMETER:
					LCDGotoXY(0, 0);
					LCDstring(LCDBuffer, strlen(LCDBuffer));
					break;
				case FREQMETER:
					LCDGotoXY(0, 0);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 07 07 	call	0xe0e	; 0xe0e <LCDGotoXY>
				  	LCDstring(LCDBuffer, strlen(LCDBuffer));
     d3e:	fe 01       	movw	r30, r28
     d40:	01 90       	ld	r0, Z+
     d42:	00 20       	and	r0, r0
     d44:	e9 f7       	brne	.-6      	; 0xd40 <main+0x25a>
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	e3 5a       	subi	r30, 0xA3	; 163
     d4a:	f2 40       	sbci	r31, 0x02	; 2
     d4c:	83 ea       	ldi	r24, 0xA3	; 163
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	6e 2f       	mov	r22, r30
     d52:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCDstring>
     d56:	cd ce       	rjmp	.-614    	; 0xaf2 <main+0xc>

00000d58 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     d58:	28 2f       	mov	r18, r24
     d5a:	20 7f       	andi	r18, 0xF0	; 240
     d5c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     d5e:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d60:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d62:	20 ea       	ldi	r18, 0xA0	; 160
     d64:	3f e0       	ldi	r19, 0x0F	; 15
     d66:	f9 01       	movw	r30, r18
     d68:	31 97       	sbiw	r30, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d6c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d6e:	40 98       	cbi	0x08, 0	; 8
     d70:	f9 01       	movw	r30, r18
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	44 e0       	ldi	r20, 0x04	; 4
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	4a 95       	dec	r20
     d80:	e1 f7       	brne	.-8      	; 0xd7a <LCDsendChar+0x22>
     d82:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     d84:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d86:	42 9a       	sbi	0x08, 2	; 8
     d88:	c9 01       	movw	r24, r18
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d8e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d90:	40 98       	cbi	0x08, 0	; 8
     d92:	c9 01       	movw	r24, r18
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     d98:	08 95       	ret

00000d9a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     d9a:	28 2f       	mov	r18, r24
     d9c:	20 7f       	andi	r18, 0xF0	; 240
     d9e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     da0:	42 9a       	sbi	0x08, 2	; 8
     da2:	20 ea       	ldi	r18, 0xA0	; 160
     da4:	3f e0       	ldi	r19, 0x0F	; 15
     da6:	f9 01       	movw	r30, r18
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     dac:	42 98       	cbi	0x08, 2	; 8
     dae:	f9 01       	movw	r30, r18
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	54 e0       	ldi	r21, 0x04	; 4
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	5a 95       	dec	r21
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <LCDsendCommand+0x1e>
     dc0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     dc2:	42 9a       	sbi	0x08, 2	; 8
     dc4:	c9 01       	movw	r24, r18
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     dca:	42 98       	cbi	0x08, 2	; 8
     dcc:	c9 01       	movw	r24, r18
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     dd2:	08 95       	ret

00000dd4 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     dda:	08 95       	ret

00000ddc <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     de2:	08 95       	ret

00000de4 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	49 f0       	breq	.+18     	; 0xe04 <LCDstring+0x20>
     df2:	ec 01       	movw	r28, r24
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     df8:	89 91       	ld	r24, Y+
     dfa:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     dfe:	1f 5f       	subi	r17, 0xFF	; 255
     e00:	10 17       	cp	r17, r16
     e02:	d0 f3       	brcs	.-12     	; 0xdf8 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     e0e:	62 30       	cpi	r22, 0x02	; 2
     e10:	31 f0       	breq	.+12     	; 0xe1e <LCDGotoXY+0x10>
     e12:	63 30       	cpi	r22, 0x03	; 3
     e14:	31 f0       	breq	.+12     	; 0xe22 <LCDGotoXY+0x14>
     e16:	61 30       	cpi	r22, 0x01	; 1
     e18:	29 f4       	brne	.+10     	; 0xe24 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     e1a:	80 5c       	subi	r24, 0xC0	; 192
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     e1e:	8c 5e       	subi	r24, 0xEC	; 236
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     e22:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     e24:	80 68       	ori	r24, 0x80	; 128
     e26:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
	
}
     e2a:	08 95       	ret

00000e2c <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     e36:	64 2f       	mov	r22, r20
     e38:	0e 94 07 07 	call	0xe0e	; 0xe0e <LCDGotoXY>
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     e40:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     e44:	1f 5f       	subi	r17, 0xFF	; 255
     e46:	fe 01       	movw	r30, r28
     e48:	e1 0f       	add	r30, r17
     e4a:	f1 1d       	adc	r31, r1
     e4c:	84 91       	lpm	r24, Z+
     e4e:	88 23       	and	r24, r24
     e50:	b9 f7       	brne	.-18     	; 0xe40 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	08 95       	ret

00000e5a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	7c 01       	movw	r14, r24
     e68:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     e6a:	11 0f       	add	r17, r17
     e6c:	11 0f       	add	r17, r17
     e6e:	11 0f       	add	r17, r17
     e70:	10 64       	ori	r17, 0x40	; 64
     e72:	c0 e0       	ldi	r28, 0x00	; 0
     e74:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     e76:	f7 01       	movw	r30, r14
     e78:	ec 0f       	add	r30, r28
     e7a:	fd 1f       	adc	r31, r29
     e7c:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     e7e:	81 2f       	mov	r24, r17
     e80:	8c 0f       	add	r24, r28
     e82:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
		LCDsendChar(pcc);
     e86:	80 2f       	mov	r24, r16
     e88:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     e8c:	21 96       	adiw	r28, 0x01	; 1
     e8e:	c8 30       	cpi	r28, 0x08	; 8
     e90:	d1 05       	cpc	r29, r1
     e92:	89 f7       	brne	.-30     	; 0xe76 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	80 e6       	ldi	r24, 0x60	; 96
     eaa:	9a ee       	ldi	r25, 0xEA	; 234
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     eb0:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     eb2:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     eb4:	87 b1       	in	r24, 0x07	; 7
     eb6:	80 6f       	ori	r24, 0xF0	; 240
     eb8:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     eba:	87 b1       	in	r24, 0x07	; 7
     ebc:	87 60       	ori	r24, 0x07	; 7
     ebe:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ec4:	42 9a       	sbi	0x08, 2	; 8
     ec6:	20 ea       	ldi	r18, 0xA0	; 160
     ec8:	3f e0       	ldi	r19, 0x0F	; 15
     eca:	f9 01       	movw	r30, r18
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ed0:	42 98       	cbi	0x08, 2	; 8
     ed2:	f9 01       	movw	r30, r18
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ed8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     eda:	42 9a       	sbi	0x08, 2	; 8
     edc:	c9 01       	movw	r24, r18
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ee2:	42 98       	cbi	0x08, 2	; 8
     ee4:	c9 01       	movw	r24, r18
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     eee:	42 9a       	sbi	0x08, 2	; 8
     ef0:	c9 01       	movw	r24, r18
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ef6:	42 98       	cbi	0x08, 2	; 8
     ef8:	c9 01       	movw	r24, r18
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     efe:	88 e2       	ldi	r24, 0x28	; 40
     f00:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     f04:	8c e0       	ldi	r24, 0x0C	; 12
     f06:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
     f0a:	c9 e1       	ldi	r28, 0x19	; 25
     f0c:	d2 e0       	ldi	r29, 0x02	; 2
     f0e:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     f10:	16 2f       	mov	r17, r22
     f12:	1f 5f       	subi	r17, 0xFF	; 255
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LCDdefinechar>
     f1a:	28 96       	adiw	r28, 0x08	; 8
     f1c:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     f1e:	18 30       	cpi	r17, 0x08	; 8
     f20:	b9 f7       	brne	.-18     	; 0xf10 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	08 95       	ret

00000f2a <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	08 2f       	mov	r16, r24
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     f34:	8e e1       	ldi	r24, 0x1E	; 30
     f36:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     f3a:	1f 5f       	subi	r17, 0xFF	; 255
     f3c:	10 17       	cp	r17, r16
     f3e:	d0 f3       	brcs	.-12     	; 0xf34 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	08 2f       	mov	r16, r24
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     f50:	88 e1       	ldi	r24, 0x18	; 24
     f52:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     f56:	1f 5f       	subi	r17, 0xFF	; 255
     f58:	10 17       	cp	r17, r16
     f5a:	d0 f3       	brcs	.-12     	; 0xf50 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     f62:	8e e0       	ldi	r24, 0x0E	; 14
     f64:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     f68:	08 95       	ret

00000f6a <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     f6a:	8f e0       	ldi	r24, 0x0F	; 15
     f6c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     f70:	08 95       	ret

00000f72 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     f72:	8c e0       	ldi	r24, 0x0C	; 12
     f74:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     f78:	08 95       	ret

00000f7a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     f80:	08 95       	ret

00000f82 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     f82:	8c e0       	ldi	r24, 0x0C	; 12
     f84:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
}
     f88:	08 95       	ret

00000f8a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	08 2f       	mov	r16, r24
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f9a:	1f 5f       	subi	r17, 0xFF	; 255
     f9c:	10 17       	cp	r17, r16
     f9e:	d0 f3       	brcs	.-12     	; 0xf94 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	08 2f       	mov	r16, r24
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     fb0:	84 e1       	ldi	r24, 0x14	; 20
     fb2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     fb6:	1f 5f       	subi	r17, 0xFF	; 255
     fb8:	10 17       	cp	r17, r16
     fba:	d0 f3       	brcs	.-12     	; 0xfb0 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     fd2:	96 e0       	ldi	r25, 0x06	; 6
     fd4:	89 9f       	mul	r24, r25
     fd6:	c0 01       	movw	r24, r0
     fd8:	11 24       	eor	r1, r1
     fda:	24 2f       	mov	r18, r20
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	ac 01       	movw	r20, r24
     fe0:	42 9f       	mul	r20, r18
     fe2:	c0 01       	movw	r24, r0
     fe4:	43 9f       	mul	r20, r19
     fe6:	90 0d       	add	r25, r0
     fe8:	52 9f       	mul	r21, r18
     fea:	90 0d       	add	r25, r0
     fec:	11 24       	eor	r1, r1
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divmodhi4>
     ff4:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ff6:	cb 01       	movw	r24, r22
     ff8:	66 e0       	ldi	r22, 0x06	; 6
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__udivmodhi4>
    1000:	e8 2e       	mov	r14, r24
    1002:	ff 24       	eor	r15, r15
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	12 c0       	rjmp	.+36     	; 0x102e <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    100a:	c8 01       	movw	r24, r16
    100c:	05 96       	adiw	r24, 0x05	; 5
    100e:	c8 17       	cp	r28, r24
    1010:	d9 07       	cpc	r29, r25
    1012:	10 f0       	brcs	.+4      	; 0x1018 <LCDprogressBar+0x56>
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1018:	c0 17       	cp	r28, r16
    101a:	d1 07       	cpc	r29, r17
    101c:	10 f0       	brcs	.+4      	; 0x1022 <LCDprogressBar+0x60>
    101e:	8e 2d       	mov	r24, r14
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <LCDprogressBar+0x62>
    1022:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1024:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1028:	f3 94       	inc	r15
    102a:	0a 5f       	subi	r16, 0xFA	; 250
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	fd 14       	cp	r15, r13
    1030:	60 f3       	brcs	.-40     	; 0x100a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	08 95       	ret

00001042 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1042:	87 e6       	ldi	r24, 0x67	; 103
    1044:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	80 93 c1 00 	sts	0x00C1, r24
}
    104e:	08 95       	ret

00001050 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1050:	1f 93       	push	r17
    1052:	18 2f       	mov	r17, r24

  if (c == '\a')
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	49 f4       	brne	.+18     	; 0x106a <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1058:	60 91 bf 02 	lds	r22, 0x02BF
    105c:	70 91 c0 02 	lds	r23, 0x02C0
    1060:	8f e2       	ldi	r24, 0x2F	; 47
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <fputs>
    1068:	0b c0       	rjmp	.+22     	; 0x1080 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    106a:	8a 30       	cpi	r24, 0x0A	; 10
    106c:	19 f4       	brne	.+6      	; 0x1074 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    106e:	8d e0       	ldi	r24, 0x0D	; 13
    1070:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1074:	80 91 c0 00 	lds	r24, 0x00C0
    1078:	85 ff       	sbrs	r24, 5
    107a:	fc cf       	rjmp	.-8      	; 0x1074 <uart_putchar+0x24>
  UDR0 = c;
    107c:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	1f 91       	pop	r17
    1086:	08 95       	ret

00001088 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1096:	80 91 40 02 	lds	r24, 0x0240
    109a:	90 91 41 02 	lds	r25, 0x0241
    109e:	89 2b       	or	r24, r25
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <uart_getchar+0x1c>
    10a2:	9f c0       	rjmp	.+318    	; 0x11e2 <__stack+0xe3>
    10a4:	02 e4       	ldi	r16, 0x42	; 66
    10a6:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    10a8:	80 91 c0 00 	lds	r24, 0x00C0
    10ac:	87 ff       	sbrs	r24, 7
    10ae:	fc cf       	rjmp	.-8      	; 0x10a8 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    10b0:	80 91 c0 00 	lds	r24, 0x00C0
    10b4:	84 ff       	sbrs	r24, 4
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <uart_getchar+0x36>
    10b8:	2e ef       	ldi	r18, 0xFE	; 254
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	a6 c0       	rjmp	.+332    	; 0x120a <__stack+0x10b>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    10be:	80 91 c0 00 	lds	r24, 0x00C0
    10c2:	83 fd       	sbrc	r24, 3
    10c4:	a0 c0       	rjmp	.+320    	; 0x1206 <__stack+0x107>
	  return _FDEV_ERR;
	c = UDR0;
    10c6:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    10ca:	9d 30       	cpi	r25, 0x0D	; 13
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    10ce:	9a 30       	cpi	r25, 0x0A	; 10
    10d0:	69 f4       	brne	.+26     	; 0x10ec <uart_getchar+0x64>
	  {
	    *cp = c;
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    10d8:	b7 01       	movw	r22, r14
    10da:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
	    rxp = b;
    10de:	82 e4       	ldi	r24, 0x42	; 66
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	90 93 41 02 	sts	0x0241, r25
    10e6:	80 93 40 02 	sts	0x0240, r24
    10ea:	7b c0       	rjmp	.+246    	; 0x11e2 <__stack+0xe3>
	    break;
	  }
	else if (c == '\t')
    10ec:	99 30       	cpi	r25, 0x09	; 9
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <uart_getchar+0x6a>
    10f0:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    10f2:	89 2f       	mov	r24, r25
    10f4:	80 52       	subi	r24, 0x20	; 32
    10f6:	8f 35       	cpi	r24, 0x5F	; 95
    10f8:	10 f0       	brcs	.+4      	; 0x10fe <uart_getchar+0x76>
    10fa:	90 3a       	cpi	r25, 0xA0	; 160
    10fc:	70 f0       	brcs	.+28     	; 0x111a <__stack+0x1b>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    10fe:	f2 e0       	ldi	r31, 0x02	; 2
    1100:	01 39       	cpi	r16, 0x91	; 145
    1102:	1f 07       	cpc	r17, r31
    1104:	11 f4       	brne	.+4      	; 0x110a <__stack+0xb>
	      uart_putchar('\a', stream);
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <__stack+0x13>
	    else
	      {
		*cp++ = c;
    110a:	f8 01       	movw	r30, r16
    110c:	91 93       	st	Z+, r25
    110e:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1110:	89 2f       	mov	r24, r25
    1112:	b7 01       	movw	r22, r14
    1114:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
    1118:	c7 cf       	rjmp	.-114    	; 0x10a8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    111a:	92 31       	cpi	r25, 0x12	; 18
    111c:	39 f1       	breq	.+78     	; 0x116c <__stack+0x6d>
    111e:	93 31       	cpi	r25, 0x13	; 19
    1120:	38 f4       	brcc	.+14     	; 0x1130 <__stack+0x31>
    1122:	93 30       	cpi	r25, 0x03	; 3
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x29>
    1126:	6f c0       	rjmp	.+222    	; 0x1206 <__stack+0x107>
    1128:	98 30       	cpi	r25, 0x08	; 8
    112a:	09 f0       	breq	.+2      	; 0x112e <__stack+0x2f>
    112c:	bd cf       	rjmp	.-134    	; 0x10a8 <uart_getchar+0x20>
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <__stack+0x43>
    1130:	97 31       	cpi	r25, 0x17	; 23
    1132:	09 f4       	brne	.+2      	; 0x1136 <__stack+0x37>
    1134:	4b c0       	rjmp	.+150    	; 0x11cc <__stack+0xcd>
    1136:	9f 37       	cpi	r25, 0x7F	; 127
    1138:	21 f0       	breq	.+8      	; 0x1142 <__stack+0x43>
    113a:	95 31       	cpi	r25, 0x15	; 21
    113c:	09 f0       	breq	.+2      	; 0x1140 <__stack+0x41>
    113e:	b4 cf       	rjmp	.-152    	; 0x10a8 <uart_getchar+0x20>
    1140:	32 c0       	rjmp	.+100    	; 0x11a6 <__stack+0xa7>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1142:	f2 e0       	ldi	r31, 0x02	; 2
    1144:	02 34       	cpi	r16, 0x42	; 66
    1146:	1f 07       	cpc	r17, r31
    1148:	09 f0       	breq	.+2      	; 0x114c <__stack+0x4d>
    114a:	08 f4       	brcc	.+2      	; 0x114e <__stack+0x4f>
    114c:	ad cf       	rjmp	.-166    	; 0x10a8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    114e:	88 e0       	ldi	r24, 0x08	; 8
    1150:	b7 01       	movw	r22, r14
    1152:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar(' ', stream);
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	b7 01       	movw	r22, r14
    115a:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar('\b', stream);
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	b7 01       	movw	r22, r14
    1162:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		cp--;
    1166:	01 50       	subi	r16, 0x01	; 1
    1168:	10 40       	sbci	r17, 0x00	; 0
    116a:	9e cf       	rjmp	.-196    	; 0x10a8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    116c:	8d e0       	ldi	r24, 0x0D	; 13
    116e:	b7 01       	movw	r22, r14
    1170:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
    1174:	c2 e4       	ldi	r28, 0x42	; 66
    1176:	d2 e0       	ldi	r29, 0x02	; 2
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <__stack+0x83>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    117a:	89 91       	ld	r24, Y+
    117c:	b7 01       	movw	r22, r14
    117e:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1182:	c0 17       	cp	r28, r16
    1184:	d1 07       	cpc	r29, r17
    1186:	c8 f3       	brcs	.-14     	; 0x117a <__stack+0x7b>
    1188:	8f cf       	rjmp	.-226    	; 0x10a8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	b7 01       	movw	r22, r14
    118e:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar(' ', stream);
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar('\b', stream);
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	b7 01       	movw	r22, r14
    119e:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		cp--;
    11a2:	01 50       	subi	r16, 0x01	; 1
    11a4:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	02 34       	cpi	r16, 0x42	; 66
    11aa:	18 07       	cpc	r17, r24
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__stack+0xb1>
    11ae:	68 f7       	brcc	.-38     	; 0x118a <__stack+0x8b>
    11b0:	7b cf       	rjmp	.-266    	; 0x10a8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    11b2:	88 e0       	ldi	r24, 0x08	; 8
    11b4:	b7 01       	movw	r22, r14
    11b6:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar(' ', stream);
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	b7 01       	movw	r22, r14
    11be:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
		uart_putchar('\b', stream);
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	b7 01       	movw	r22, r14
    11c6:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
    11ca:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    11cc:	e2 e0       	ldi	r30, 0x02	; 2
    11ce:	02 34       	cpi	r16, 0x42	; 66
    11d0:	1e 07       	cpc	r17, r30
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__stack+0xd7>
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <__stack+0xd9>
    11d6:	68 cf       	rjmp	.-304    	; 0x10a8 <uart_getchar+0x20>
    11d8:	e8 01       	movw	r28, r16
    11da:	8a 91       	ld	r24, -Y
    11dc:	80 32       	cpi	r24, 0x20	; 32
    11de:	49 f7       	brne	.-46     	; 0x11b2 <__stack+0xb3>
    11e0:	63 cf       	rjmp	.-314    	; 0x10a8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    11e2:	e0 91 40 02 	lds	r30, 0x0240
    11e6:	f0 91 41 02 	lds	r31, 0x0241
    11ea:	81 91       	ld	r24, Z+
    11ec:	f0 93 41 02 	sts	0x0241, r31
    11f0:	e0 93 40 02 	sts	0x0240, r30
  if (c == '\n')
    11f4:	8a 30       	cpi	r24, 0x0A	; 10
    11f6:	21 f4       	brne	.+8      	; 0x1200 <__stack+0x101>
    rxp = 0;
    11f8:	10 92 41 02 	sts	0x0241, r1
    11fc:	10 92 40 02 	sts	0x0240, r1

  return c;
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__stack+0x10b>
    1206:	2f ef       	ldi	r18, 0xFF	; 255
    1208:	3f ef       	ldi	r19, 0xFF	; 255
}
    120a:	c9 01       	movw	r24, r18
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <_fpadd_parts>:
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e3 e1       	ldi	r30, 0x13	; 19
    1220:	f9 e0       	ldi	r31, 0x09	; 9
    1222:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
    1226:	dc 01       	movw	r26, r24
    1228:	2b 01       	movw	r4, r22
    122a:	fa 01       	movw	r30, r20
    122c:	9c 91       	ld	r25, X
    122e:	92 30       	cpi	r25, 0x02	; 2
    1230:	08 f4       	brcc	.+2      	; 0x1234 <_fpadd_parts+0x1a>
    1232:	39 c1       	rjmp	.+626    	; 0x14a6 <_fpadd_parts+0x28c>
    1234:	eb 01       	movw	r28, r22
    1236:	88 81       	ld	r24, Y
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	08 f4       	brcc	.+2      	; 0x123e <_fpadd_parts+0x24>
    123c:	33 c1       	rjmp	.+614    	; 0x14a4 <_fpadd_parts+0x28a>
    123e:	94 30       	cpi	r25, 0x04	; 4
    1240:	69 f4       	brne	.+26     	; 0x125c <_fpadd_parts+0x42>
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	09 f0       	breq	.+2      	; 0x1248 <_fpadd_parts+0x2e>
    1246:	2f c1       	rjmp	.+606    	; 0x14a6 <_fpadd_parts+0x28c>
    1248:	11 96       	adiw	r26, 0x01	; 1
    124a:	9c 91       	ld	r25, X
    124c:	11 97       	sbiw	r26, 0x01	; 1
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	98 17       	cp	r25, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <_fpadd_parts+0x3c>
    1254:	28 c1       	rjmp	.+592    	; 0x14a6 <_fpadd_parts+0x28c>
    1256:	a7 e3       	ldi	r26, 0x37	; 55
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	25 c1       	rjmp	.+586    	; 0x14a6 <_fpadd_parts+0x28c>
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	09 f4       	brne	.+2      	; 0x1262 <_fpadd_parts+0x48>
    1260:	21 c1       	rjmp	.+578    	; 0x14a4 <_fpadd_parts+0x28a>
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	a9 f4       	brne	.+42     	; 0x1290 <_fpadd_parts+0x76>
    1266:	92 30       	cpi	r25, 0x02	; 2
    1268:	09 f0       	breq	.+2      	; 0x126c <_fpadd_parts+0x52>
    126a:	1d c1       	rjmp	.+570    	; 0x14a6 <_fpadd_parts+0x28c>
    126c:	9a 01       	movw	r18, r20
    126e:	ad 01       	movw	r20, r26
    1270:	88 e0       	ldi	r24, 0x08	; 8
    1272:	ea 01       	movw	r28, r20
    1274:	09 90       	ld	r0, Y+
    1276:	ae 01       	movw	r20, r28
    1278:	e9 01       	movw	r28, r18
    127a:	09 92       	st	Y+, r0
    127c:	9e 01       	movw	r18, r28
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	c1 f7       	brne	.-16     	; 0x1272 <_fpadd_parts+0x58>
    1282:	e2 01       	movw	r28, r4
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	9c 91       	ld	r25, X
    128a:	89 23       	and	r24, r25
    128c:	81 83       	std	Z+1, r24	; 0x01
    128e:	08 c1       	rjmp	.+528    	; 0x14a0 <_fpadd_parts+0x286>
    1290:	92 30       	cpi	r25, 0x02	; 2
    1292:	09 f4       	brne	.+2      	; 0x1296 <_fpadd_parts+0x7c>
    1294:	07 c1       	rjmp	.+526    	; 0x14a4 <_fpadd_parts+0x28a>
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	2d 90       	ld	r2, X+
    129a:	3c 90       	ld	r3, X
    129c:	13 97       	sbiw	r26, 0x03	; 3
    129e:	eb 01       	movw	r28, r22
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	14 96       	adiw	r26, 0x04	; 4
    12a6:	ad 90       	ld	r10, X+
    12a8:	bd 90       	ld	r11, X+
    12aa:	cd 90       	ld	r12, X+
    12ac:	dc 90       	ld	r13, X
    12ae:	17 97       	sbiw	r26, 0x07	; 7
    12b0:	ec 80       	ldd	r14, Y+4	; 0x04
    12b2:	fd 80       	ldd	r15, Y+5	; 0x05
    12b4:	0e 81       	ldd	r16, Y+6	; 0x06
    12b6:	1f 81       	ldd	r17, Y+7	; 0x07
    12b8:	91 01       	movw	r18, r2
    12ba:	28 1b       	sub	r18, r24
    12bc:	39 0b       	sbc	r19, r25
    12be:	b9 01       	movw	r22, r18
    12c0:	37 ff       	sbrs	r19, 7
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <_fpadd_parts+0xb2>
    12c4:	66 27       	eor	r22, r22
    12c6:	77 27       	eor	r23, r23
    12c8:	62 1b       	sub	r22, r18
    12ca:	73 0b       	sbc	r23, r19
    12cc:	60 32       	cpi	r22, 0x20	; 32
    12ce:	71 05       	cpc	r23, r1
    12d0:	0c f0       	brlt	.+2      	; 0x12d4 <_fpadd_parts+0xba>
    12d2:	61 c0       	rjmp	.+194    	; 0x1396 <_fpadd_parts+0x17c>
    12d4:	12 16       	cp	r1, r18
    12d6:	13 06       	cpc	r1, r19
    12d8:	6c f5       	brge	.+90     	; 0x1334 <_fpadd_parts+0x11a>
    12da:	37 01       	movw	r6, r14
    12dc:	48 01       	movw	r8, r16
    12de:	06 2e       	mov	r0, r22
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <_fpadd_parts+0xd0>
    12e2:	96 94       	lsr	r9
    12e4:	87 94       	ror	r8
    12e6:	77 94       	ror	r7
    12e8:	67 94       	ror	r6
    12ea:	0a 94       	dec	r0
    12ec:	d2 f7       	brpl	.-12     	; 0x12e2 <_fpadd_parts+0xc8>
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <_fpadd_parts+0xe6>
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	44 1f       	adc	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	6a 95       	dec	r22
    1302:	d2 f7       	brpl	.-12     	; 0x12f8 <_fpadd_parts+0xde>
    1304:	21 50       	subi	r18, 0x01	; 1
    1306:	30 40       	sbci	r19, 0x00	; 0
    1308:	40 40       	sbci	r20, 0x00	; 0
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	2e 21       	and	r18, r14
    130e:	3f 21       	and	r19, r15
    1310:	40 23       	and	r20, r16
    1312:	51 23       	and	r21, r17
    1314:	21 15       	cp	r18, r1
    1316:	31 05       	cpc	r19, r1
    1318:	41 05       	cpc	r20, r1
    131a:	51 05       	cpc	r21, r1
    131c:	21 f0       	breq	.+8      	; 0x1326 <_fpadd_parts+0x10c>
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	79 01       	movw	r14, r18
    1328:	8a 01       	movw	r16, r20
    132a:	e6 28       	or	r14, r6
    132c:	f7 28       	or	r15, r7
    132e:	08 29       	or	r16, r8
    1330:	19 29       	or	r17, r9
    1332:	3c c0       	rjmp	.+120    	; 0x13ac <_fpadd_parts+0x192>
    1334:	23 2b       	or	r18, r19
    1336:	d1 f1       	breq	.+116    	; 0x13ac <_fpadd_parts+0x192>
    1338:	26 0e       	add	r2, r22
    133a:	37 1e       	adc	r3, r23
    133c:	35 01       	movw	r6, r10
    133e:	46 01       	movw	r8, r12
    1340:	06 2e       	mov	r0, r22
    1342:	04 c0       	rjmp	.+8      	; 0x134c <_fpadd_parts+0x132>
    1344:	96 94       	lsr	r9
    1346:	87 94       	ror	r8
    1348:	77 94       	ror	r7
    134a:	67 94       	ror	r6
    134c:	0a 94       	dec	r0
    134e:	d2 f7       	brpl	.-12     	; 0x1344 <_fpadd_parts+0x12a>
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <_fpadd_parts+0x148>
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	44 1f       	adc	r20, r20
    1360:	55 1f       	adc	r21, r21
    1362:	6a 95       	dec	r22
    1364:	d2 f7       	brpl	.-12     	; 0x135a <_fpadd_parts+0x140>
    1366:	21 50       	subi	r18, 0x01	; 1
    1368:	30 40       	sbci	r19, 0x00	; 0
    136a:	40 40       	sbci	r20, 0x00	; 0
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	2a 21       	and	r18, r10
    1370:	3b 21       	and	r19, r11
    1372:	4c 21       	and	r20, r12
    1374:	5d 21       	and	r21, r13
    1376:	21 15       	cp	r18, r1
    1378:	31 05       	cpc	r19, r1
    137a:	41 05       	cpc	r20, r1
    137c:	51 05       	cpc	r21, r1
    137e:	21 f0       	breq	.+8      	; 0x1388 <_fpadd_parts+0x16e>
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	59 01       	movw	r10, r18
    138a:	6a 01       	movw	r12, r20
    138c:	a6 28       	or	r10, r6
    138e:	b7 28       	or	r11, r7
    1390:	c8 28       	or	r12, r8
    1392:	d9 28       	or	r13, r9
    1394:	0b c0       	rjmp	.+22     	; 0x13ac <_fpadd_parts+0x192>
    1396:	82 15       	cp	r24, r2
    1398:	93 05       	cpc	r25, r3
    139a:	2c f0       	brlt	.+10     	; 0x13a6 <_fpadd_parts+0x18c>
    139c:	1c 01       	movw	r2, r24
    139e:	aa 24       	eor	r10, r10
    13a0:	bb 24       	eor	r11, r11
    13a2:	65 01       	movw	r12, r10
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <_fpadd_parts+0x192>
    13a6:	ee 24       	eor	r14, r14
    13a8:	ff 24       	eor	r15, r15
    13aa:	87 01       	movw	r16, r14
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	9c 91       	ld	r25, X
    13b0:	d2 01       	movw	r26, r4
    13b2:	11 96       	adiw	r26, 0x01	; 1
    13b4:	8c 91       	ld	r24, X
    13b6:	98 17       	cp	r25, r24
    13b8:	09 f4       	brne	.+2      	; 0x13bc <_fpadd_parts+0x1a2>
    13ba:	45 c0       	rjmp	.+138    	; 0x1446 <_fpadd_parts+0x22c>
    13bc:	99 23       	and	r25, r25
    13be:	39 f0       	breq	.+14     	; 0x13ce <_fpadd_parts+0x1b4>
    13c0:	a8 01       	movw	r20, r16
    13c2:	97 01       	movw	r18, r14
    13c4:	2a 19       	sub	r18, r10
    13c6:	3b 09       	sbc	r19, r11
    13c8:	4c 09       	sbc	r20, r12
    13ca:	5d 09       	sbc	r21, r13
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <_fpadd_parts+0x1c0>
    13ce:	a6 01       	movw	r20, r12
    13d0:	95 01       	movw	r18, r10
    13d2:	2e 19       	sub	r18, r14
    13d4:	3f 09       	sbc	r19, r15
    13d6:	40 0b       	sbc	r20, r16
    13d8:	51 0b       	sbc	r21, r17
    13da:	57 fd       	sbrc	r21, 7
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <_fpadd_parts+0x1d4>
    13de:	11 82       	std	Z+1, r1	; 0x01
    13e0:	33 82       	std	Z+3, r3	; 0x03
    13e2:	22 82       	std	Z+2, r2	; 0x02
    13e4:	24 83       	std	Z+4, r18	; 0x04
    13e6:	35 83       	std	Z+5, r19	; 0x05
    13e8:	46 83       	std	Z+6, r20	; 0x06
    13ea:	57 83       	std	Z+7, r21	; 0x07
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <_fpadd_parts+0x20e>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	81 83       	std	Z+1, r24	; 0x01
    13f2:	33 82       	std	Z+3, r3	; 0x03
    13f4:	22 82       	std	Z+2, r2	; 0x02
    13f6:	88 27       	eor	r24, r24
    13f8:	99 27       	eor	r25, r25
    13fa:	dc 01       	movw	r26, r24
    13fc:	82 1b       	sub	r24, r18
    13fe:	93 0b       	sbc	r25, r19
    1400:	a4 0b       	sbc	r26, r20
    1402:	b5 0b       	sbc	r27, r21
    1404:	84 83       	std	Z+4, r24	; 0x04
    1406:	95 83       	std	Z+5, r25	; 0x05
    1408:	a6 83       	std	Z+6, r26	; 0x06
    140a:	b7 83       	std	Z+7, r27	; 0x07
    140c:	0d c0       	rjmp	.+26     	; 0x1428 <_fpadd_parts+0x20e>
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	44 1f       	adc	r20, r20
    1414:	55 1f       	adc	r21, r21
    1416:	24 83       	std	Z+4, r18	; 0x04
    1418:	35 83       	std	Z+5, r19	; 0x05
    141a:	46 83       	std	Z+6, r20	; 0x06
    141c:	57 83       	std	Z+7, r21	; 0x07
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	93 83       	std	Z+3, r25	; 0x03
    1426:	82 83       	std	Z+2, r24	; 0x02
    1428:	24 81       	ldd	r18, Z+4	; 0x04
    142a:	35 81       	ldd	r19, Z+5	; 0x05
    142c:	46 81       	ldd	r20, Z+6	; 0x06
    142e:	57 81       	ldd	r21, Z+7	; 0x07
    1430:	da 01       	movw	r26, r20
    1432:	c9 01       	movw	r24, r18
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	a1 09       	sbc	r26, r1
    1438:	b1 09       	sbc	r27, r1
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	af 4f       	sbci	r26, 0xFF	; 255
    1440:	bf 43       	sbci	r27, 0x3F	; 63
    1442:	28 f3       	brcs	.-54     	; 0x140e <_fpadd_parts+0x1f4>
    1444:	0b c0       	rjmp	.+22     	; 0x145c <_fpadd_parts+0x242>
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	33 82       	std	Z+3, r3	; 0x03
    144a:	22 82       	std	Z+2, r2	; 0x02
    144c:	ea 0c       	add	r14, r10
    144e:	fb 1c       	adc	r15, r11
    1450:	0c 1d       	adc	r16, r12
    1452:	1d 1d       	adc	r17, r13
    1454:	e4 82       	std	Z+4, r14	; 0x04
    1456:	f5 82       	std	Z+5, r15	; 0x05
    1458:	06 83       	std	Z+6, r16	; 0x06
    145a:	17 83       	std	Z+7, r17	; 0x07
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	80 83       	st	Z, r24
    1460:	24 81       	ldd	r18, Z+4	; 0x04
    1462:	35 81       	ldd	r19, Z+5	; 0x05
    1464:	46 81       	ldd	r20, Z+6	; 0x06
    1466:	57 81       	ldd	r21, Z+7	; 0x07
    1468:	57 ff       	sbrs	r21, 7
    146a:	1a c0       	rjmp	.+52     	; 0x14a0 <_fpadd_parts+0x286>
    146c:	c9 01       	movw	r24, r18
    146e:	aa 27       	eor	r26, r26
    1470:	97 fd       	sbrc	r25, 7
    1472:	a0 95       	com	r26
    1474:	ba 2f       	mov	r27, r26
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	a0 70       	andi	r26, 0x00	; 0
    147c:	b0 70       	andi	r27, 0x00	; 0
    147e:	56 95       	lsr	r21
    1480:	47 95       	ror	r20
    1482:	37 95       	ror	r19
    1484:	27 95       	ror	r18
    1486:	82 2b       	or	r24, r18
    1488:	93 2b       	or	r25, r19
    148a:	a4 2b       	or	r26, r20
    148c:	b5 2b       	or	r27, r21
    148e:	84 83       	std	Z+4, r24	; 0x04
    1490:	95 83       	std	Z+5, r25	; 0x05
    1492:	a6 83       	std	Z+6, r26	; 0x06
    1494:	b7 83       	std	Z+7, r27	; 0x07
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	93 83       	std	Z+3, r25	; 0x03
    149e:	82 83       	std	Z+2, r24	; 0x02
    14a0:	df 01       	movw	r26, r30
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <_fpadd_parts+0x28c>
    14a4:	d2 01       	movw	r26, r4
    14a6:	cd 01       	movw	r24, r26
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	e2 e1       	ldi	r30, 0x12	; 18
    14ae:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

000014b2 <__subsf3>:
    14b2:	a0 e2       	ldi	r26, 0x20	; 32
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	fa e0       	ldi	r31, 0x0A	; 10
    14ba:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
    14be:	69 83       	std	Y+1, r22	; 0x01
    14c0:	7a 83       	std	Y+2, r23	; 0x02
    14c2:	8b 83       	std	Y+3, r24	; 0x03
    14c4:	9c 83       	std	Y+4, r25	; 0x04
    14c6:	2d 83       	std	Y+5, r18	; 0x05
    14c8:	3e 83       	std	Y+6, r19	; 0x06
    14ca:	4f 83       	std	Y+7, r20	; 0x07
    14cc:	58 87       	std	Y+8, r21	; 0x08
    14ce:	e9 e0       	ldi	r30, 0x09	; 9
    14d0:	ee 2e       	mov	r14, r30
    14d2:	f1 2c       	mov	r15, r1
    14d4:	ec 0e       	add	r14, r28
    14d6:	fd 1e       	adc	r15, r29
    14d8:	ce 01       	movw	r24, r28
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	b7 01       	movw	r22, r14
    14de:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    14e2:	8e 01       	movw	r16, r28
    14e4:	0f 5e       	subi	r16, 0xEF	; 239
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	ce 01       	movw	r24, r28
    14ea:	05 96       	adiw	r24, 0x05	; 5
    14ec:	b8 01       	movw	r22, r16
    14ee:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    14f2:	8a 89       	ldd	r24, Y+18	; 0x12
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	89 27       	eor	r24, r25
    14f8:	8a 8b       	std	Y+18, r24	; 0x12
    14fa:	c7 01       	movw	r24, r14
    14fc:	b8 01       	movw	r22, r16
    14fe:	ae 01       	movw	r20, r28
    1500:	47 5e       	subi	r20, 0xE7	; 231
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	0e 94 0d 09 	call	0x121a	; 0x121a <_fpadd_parts>
    1508:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    150c:	a0 96       	adiw	r28, 0x20	; 32
    150e:	e6 e0       	ldi	r30, 0x06	; 6
    1510:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00001514 <__addsf3>:
    1514:	a0 e2       	ldi	r26, 0x20	; 32
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e0 e9       	ldi	r30, 0x90	; 144
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
    1520:	69 83       	std	Y+1, r22	; 0x01
    1522:	7a 83       	std	Y+2, r23	; 0x02
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	2d 83       	std	Y+5, r18	; 0x05
    152a:	3e 83       	std	Y+6, r19	; 0x06
    152c:	4f 83       	std	Y+7, r20	; 0x07
    152e:	58 87       	std	Y+8, r21	; 0x08
    1530:	f9 e0       	ldi	r31, 0x09	; 9
    1532:	ef 2e       	mov	r14, r31
    1534:	f1 2c       	mov	r15, r1
    1536:	ec 0e       	add	r14, r28
    1538:	fd 1e       	adc	r15, r29
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	b7 01       	movw	r22, r14
    1540:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    1544:	8e 01       	movw	r16, r28
    1546:	0f 5e       	subi	r16, 0xEF	; 239
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	ce 01       	movw	r24, r28
    154c:	05 96       	adiw	r24, 0x05	; 5
    154e:	b8 01       	movw	r22, r16
    1550:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    1554:	c7 01       	movw	r24, r14
    1556:	b8 01       	movw	r22, r16
    1558:	ae 01       	movw	r20, r28
    155a:	47 5e       	subi	r20, 0xE7	; 231
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	0e 94 0d 09 	call	0x121a	; 0x121a <_fpadd_parts>
    1562:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    1566:	a0 96       	adiw	r28, 0x20	; 32
    1568:	e6 e0       	ldi	r30, 0x06	; 6
    156a:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

0000156e <__mulsf3>:
    156e:	a0 e2       	ldi	r26, 0x20	; 32
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ed eb       	ldi	r30, 0xBD	; 189
    1574:	fa e0       	ldi	r31, 0x0A	; 10
    1576:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
    157a:	69 83       	std	Y+1, r22	; 0x01
    157c:	7a 83       	std	Y+2, r23	; 0x02
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	2d 83       	std	Y+5, r18	; 0x05
    1584:	3e 83       	std	Y+6, r19	; 0x06
    1586:	4f 83       	std	Y+7, r20	; 0x07
    1588:	58 87       	std	Y+8, r21	; 0x08
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	be 01       	movw	r22, r28
    1590:	67 5f       	subi	r22, 0xF7	; 247
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    1598:	ce 01       	movw	r24, r28
    159a:	05 96       	adiw	r24, 0x05	; 5
    159c:	be 01       	movw	r22, r28
    159e:	6f 5e       	subi	r22, 0xEF	; 239
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    15a6:	99 85       	ldd	r25, Y+9	; 0x09
    15a8:	92 30       	cpi	r25, 0x02	; 2
    15aa:	88 f0       	brcs	.+34     	; 0x15ce <__mulsf3+0x60>
    15ac:	89 89       	ldd	r24, Y+17	; 0x11
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	c8 f0       	brcs	.+50     	; 0x15e4 <__mulsf3+0x76>
    15b2:	94 30       	cpi	r25, 0x04	; 4
    15b4:	19 f4       	brne	.+6      	; 0x15bc <__mulsf3+0x4e>
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	51 f4       	brne	.+20     	; 0x15ce <__mulsf3+0x60>
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <__mulsf3+0x56>
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	29 f4       	brne	.+10     	; 0x15ca <__mulsf3+0x5c>
    15c0:	92 30       	cpi	r25, 0x02	; 2
    15c2:	81 f4       	brne	.+32     	; 0x15e4 <__mulsf3+0x76>
    15c4:	87 e3       	ldi	r24, 0x37	; 55
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	c6 c0       	rjmp	.+396    	; 0x1756 <__mulsf3+0x1e8>
    15ca:	92 30       	cpi	r25, 0x02	; 2
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <__mulsf3+0x72>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	8a 89       	ldd	r24, Y+18	; 0x12
    15d4:	98 13       	cpse	r25, r24
    15d6:	21 e0       	ldi	r18, 0x01	; 1
    15d8:	2a 87       	std	Y+10, r18	; 0x0a
    15da:	ce 01       	movw	r24, r28
    15dc:	09 96       	adiw	r24, 0x09	; 9
    15de:	bb c0       	rjmp	.+374    	; 0x1756 <__mulsf3+0x1e8>
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	49 f4       	brne	.+18     	; 0x15f6 <__mulsf3+0x88>
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	8a 89       	ldd	r24, Y+18	; 0x12
    15ea:	98 13       	cpse	r25, r24
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	2a 8b       	std	Y+18, r18	; 0x12
    15f0:	ce 01       	movw	r24, r28
    15f2:	41 96       	adiw	r24, 0x11	; 17
    15f4:	b0 c0       	rjmp	.+352    	; 0x1756 <__mulsf3+0x1e8>
    15f6:	2d 84       	ldd	r2, Y+13	; 0x0d
    15f8:	3e 84       	ldd	r3, Y+14	; 0x0e
    15fa:	4f 84       	ldd	r4, Y+15	; 0x0f
    15fc:	58 88       	ldd	r5, Y+16	; 0x10
    15fe:	6d 88       	ldd	r6, Y+21	; 0x15
    1600:	7e 88       	ldd	r7, Y+22	; 0x16
    1602:	8f 88       	ldd	r8, Y+23	; 0x17
    1604:	98 8c       	ldd	r9, Y+24	; 0x18
    1606:	ee 24       	eor	r14, r14
    1608:	ff 24       	eor	r15, r15
    160a:	87 01       	movw	r16, r14
    160c:	aa 24       	eor	r10, r10
    160e:	bb 24       	eor	r11, r11
    1610:	65 01       	movw	r12, r10
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	c1 01       	movw	r24, r2
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	89 2b       	or	r24, r25
    1626:	e9 f0       	breq	.+58     	; 0x1662 <__mulsf3+0xf4>
    1628:	e6 0c       	add	r14, r6
    162a:	f7 1c       	adc	r15, r7
    162c:	08 1d       	adc	r16, r8
    162e:	19 1d       	adc	r17, r9
    1630:	9a 01       	movw	r18, r20
    1632:	ab 01       	movw	r20, r22
    1634:	2a 0d       	add	r18, r10
    1636:	3b 1d       	adc	r19, r11
    1638:	4c 1d       	adc	r20, r12
    163a:	5d 1d       	adc	r21, r13
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e6 14       	cp	r14, r6
    1646:	f7 04       	cpc	r15, r7
    1648:	08 05       	cpc	r16, r8
    164a:	19 05       	cpc	r17, r9
    164c:	20 f4       	brcc	.+8      	; 0x1656 <__mulsf3+0xe8>
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ba 01       	movw	r22, r20
    1658:	a9 01       	movw	r20, r18
    165a:	48 0f       	add	r20, r24
    165c:	59 1f       	adc	r21, r25
    165e:	6a 1f       	adc	r22, r26
    1660:	7b 1f       	adc	r23, r27
    1662:	aa 0c       	add	r10, r10
    1664:	bb 1c       	adc	r11, r11
    1666:	cc 1c       	adc	r12, r12
    1668:	dd 1c       	adc	r13, r13
    166a:	97 fe       	sbrs	r9, 7
    166c:	08 c0       	rjmp	.+16     	; 0x167e <__mulsf3+0x110>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	a8 2a       	or	r10, r24
    1678:	b9 2a       	or	r11, r25
    167a:	ca 2a       	or	r12, r26
    167c:	db 2a       	or	r13, r27
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	e0 32       	cpi	r30, 0x20	; 32
    1682:	f1 05       	cpc	r31, r1
    1684:	49 f0       	breq	.+18     	; 0x1698 <__mulsf3+0x12a>
    1686:	66 0c       	add	r6, r6
    1688:	77 1c       	adc	r7, r7
    168a:	88 1c       	adc	r8, r8
    168c:	99 1c       	adc	r9, r9
    168e:	56 94       	lsr	r5
    1690:	47 94       	ror	r4
    1692:	37 94       	ror	r3
    1694:	27 94       	ror	r2
    1696:	c3 cf       	rjmp	.-122    	; 0x161e <__mulsf3+0xb0>
    1698:	fa 85       	ldd	r31, Y+10	; 0x0a
    169a:	ea 89       	ldd	r30, Y+18	; 0x12
    169c:	2b 89       	ldd	r18, Y+19	; 0x13
    169e:	3c 89       	ldd	r19, Y+20	; 0x14
    16a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a4:	28 0f       	add	r18, r24
    16a6:	39 1f       	adc	r19, r25
    16a8:	2e 5f       	subi	r18, 0xFE	; 254
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	17 c0       	rjmp	.+46     	; 0x16dc <__mulsf3+0x16e>
    16ae:	ca 01       	movw	r24, r20
    16b0:	81 70       	andi	r24, 0x01	; 1
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	89 2b       	or	r24, r25
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <__mulsf3+0x162>
    16b8:	16 95       	lsr	r17
    16ba:	07 95       	ror	r16
    16bc:	f7 94       	ror	r15
    16be:	e7 94       	ror	r14
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e8       	ldi	r27, 0x80	; 128
    16c8:	e8 2a       	or	r14, r24
    16ca:	f9 2a       	or	r15, r25
    16cc:	0a 2b       	or	r16, r26
    16ce:	1b 2b       	or	r17, r27
    16d0:	76 95       	lsr	r23
    16d2:	67 95       	ror	r22
    16d4:	57 95       	ror	r21
    16d6:	47 95       	ror	r20
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	77 fd       	sbrc	r23, 7
    16de:	e7 cf       	rjmp	.-50     	; 0x16ae <__mulsf3+0x140>
    16e0:	0c c0       	rjmp	.+24     	; 0x16fa <__mulsf3+0x18c>
    16e2:	44 0f       	add	r20, r20
    16e4:	55 1f       	adc	r21, r21
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	17 fd       	sbrc	r17, 7
    16ec:	41 60       	ori	r20, 0x01	; 1
    16ee:	ee 0c       	add	r14, r14
    16f0:	ff 1c       	adc	r15, r15
    16f2:	00 1f       	adc	r16, r16
    16f4:	11 1f       	adc	r17, r17
    16f6:	21 50       	subi	r18, 0x01	; 1
    16f8:	30 40       	sbci	r19, 0x00	; 0
    16fa:	40 30       	cpi	r20, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	59 07       	cpc	r21, r25
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	69 07       	cpc	r22, r25
    1704:	90 e4       	ldi	r25, 0x40	; 64
    1706:	79 07       	cpc	r23, r25
    1708:	60 f3       	brcs	.-40     	; 0x16e2 <__mulsf3+0x174>
    170a:	2b 8f       	std	Y+27, r18	; 0x1b
    170c:	3c 8f       	std	Y+28, r19	; 0x1c
    170e:	db 01       	movw	r26, r22
    1710:	ca 01       	movw	r24, r20
    1712:	8f 77       	andi	r24, 0x7F	; 127
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	a0 70       	andi	r26, 0x00	; 0
    1718:	b0 70       	andi	r27, 0x00	; 0
    171a:	80 34       	cpi	r24, 0x40	; 64
    171c:	91 05       	cpc	r25, r1
    171e:	a1 05       	cpc	r26, r1
    1720:	b1 05       	cpc	r27, r1
    1722:	61 f4       	brne	.+24     	; 0x173c <__mulsf3+0x1ce>
    1724:	47 fd       	sbrc	r20, 7
    1726:	0a c0       	rjmp	.+20     	; 0x173c <__mulsf3+0x1ce>
    1728:	e1 14       	cp	r14, r1
    172a:	f1 04       	cpc	r15, r1
    172c:	01 05       	cpc	r16, r1
    172e:	11 05       	cpc	r17, r1
    1730:	29 f0       	breq	.+10     	; 0x173c <__mulsf3+0x1ce>
    1732:	40 5c       	subi	r20, 0xC0	; 192
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	6f 4f       	sbci	r22, 0xFF	; 255
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	40 78       	andi	r20, 0x80	; 128
    173c:	1a 8e       	std	Y+26, r1	; 0x1a
    173e:	fe 17       	cp	r31, r30
    1740:	11 f0       	breq	.+4      	; 0x1746 <__mulsf3+0x1d8>
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	8a 8f       	std	Y+26, r24	; 0x1a
    1746:	4d 8f       	std	Y+29, r20	; 0x1d
    1748:	5e 8f       	std	Y+30, r21	; 0x1e
    174a:	6f 8f       	std	Y+31, r22	; 0x1f
    174c:	78 a3       	std	Y+32, r23	; 0x20
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	89 8f       	std	Y+25, r24	; 0x19
    1752:	ce 01       	movw	r24, r28
    1754:	49 96       	adiw	r24, 0x19	; 25
    1756:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    175a:	a0 96       	adiw	r28, 0x20	; 32
    175c:	e2 e1       	ldi	r30, 0x12	; 18
    175e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00001762 <__divsf3>:
    1762:	a8 e1       	ldi	r26, 0x18	; 24
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e7 eb       	ldi	r30, 0xB7	; 183
    1768:	fb e0       	ldi	r31, 0x0B	; 11
    176a:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__prologue_saves__+0x10>
    176e:	69 83       	std	Y+1, r22	; 0x01
    1770:	7a 83       	std	Y+2, r23	; 0x02
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	2d 83       	std	Y+5, r18	; 0x05
    1778:	3e 83       	std	Y+6, r19	; 0x06
    177a:	4f 83       	std	Y+7, r20	; 0x07
    177c:	58 87       	std	Y+8, r21	; 0x08
    177e:	b9 e0       	ldi	r27, 0x09	; 9
    1780:	eb 2e       	mov	r14, r27
    1782:	f1 2c       	mov	r15, r1
    1784:	ec 0e       	add	r14, r28
    1786:	fd 1e       	adc	r15, r29
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	b7 01       	movw	r22, r14
    178e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    1792:	8e 01       	movw	r16, r28
    1794:	0f 5e       	subi	r16, 0xEF	; 239
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	ce 01       	movw	r24, r28
    179a:	05 96       	adiw	r24, 0x05	; 5
    179c:	b8 01       	movw	r22, r16
    179e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__unpack_f>
    17a2:	29 85       	ldd	r18, Y+9	; 0x09
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <__divsf3+0x48>
    17a8:	7e c0       	rjmp	.+252    	; 0x18a6 <__divsf3+0x144>
    17aa:	39 89       	ldd	r19, Y+17	; 0x11
    17ac:	32 30       	cpi	r19, 0x02	; 2
    17ae:	10 f4       	brcc	.+4      	; 0x17b4 <__divsf3+0x52>
    17b0:	b8 01       	movw	r22, r16
    17b2:	7c c0       	rjmp	.+248    	; 0x18ac <__divsf3+0x14a>
    17b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b6:	9a 89       	ldd	r25, Y+18	; 0x12
    17b8:	89 27       	eor	r24, r25
    17ba:	8a 87       	std	Y+10, r24	; 0x0a
    17bc:	24 30       	cpi	r18, 0x04	; 4
    17be:	11 f0       	breq	.+4      	; 0x17c4 <__divsf3+0x62>
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 f4       	brne	.+12     	; 0x17d0 <__divsf3+0x6e>
    17c4:	23 17       	cp	r18, r19
    17c6:	09 f0       	breq	.+2      	; 0x17ca <__divsf3+0x68>
    17c8:	6e c0       	rjmp	.+220    	; 0x18a6 <__divsf3+0x144>
    17ca:	67 e3       	ldi	r22, 0x37	; 55
    17cc:	71 e0       	ldi	r23, 0x01	; 1
    17ce:	6e c0       	rjmp	.+220    	; 0x18ac <__divsf3+0x14a>
    17d0:	34 30       	cpi	r19, 0x04	; 4
    17d2:	39 f4       	brne	.+14     	; 0x17e2 <__divsf3+0x80>
    17d4:	1d 86       	std	Y+13, r1	; 0x0d
    17d6:	1e 86       	std	Y+14, r1	; 0x0e
    17d8:	1f 86       	std	Y+15, r1	; 0x0f
    17da:	18 8a       	std	Y+16, r1	; 0x10
    17dc:	1c 86       	std	Y+12, r1	; 0x0c
    17de:	1b 86       	std	Y+11, r1	; 0x0b
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <__divsf3+0x88>
    17e2:	32 30       	cpi	r19, 0x02	; 2
    17e4:	21 f4       	brne	.+8      	; 0x17ee <__divsf3+0x8c>
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	89 87       	std	Y+9, r24	; 0x09
    17ea:	b7 01       	movw	r22, r14
    17ec:	5f c0       	rjmp	.+190    	; 0x18ac <__divsf3+0x14a>
    17ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    17f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	28 1b       	sub	r18, r24
    17f8:	39 0b       	sbc	r19, r25
    17fa:	3c 87       	std	Y+12, r19	; 0x0c
    17fc:	2b 87       	std	Y+11, r18	; 0x0b
    17fe:	ed 84       	ldd	r14, Y+13	; 0x0d
    1800:	fe 84       	ldd	r15, Y+14	; 0x0e
    1802:	0f 85       	ldd	r16, Y+15	; 0x0f
    1804:	18 89       	ldd	r17, Y+16	; 0x10
    1806:	ad 88       	ldd	r10, Y+21	; 0x15
    1808:	be 88       	ldd	r11, Y+22	; 0x16
    180a:	cf 88       	ldd	r12, Y+23	; 0x17
    180c:	d8 8c       	ldd	r13, Y+24	; 0x18
    180e:	ea 14       	cp	r14, r10
    1810:	fb 04       	cpc	r15, r11
    1812:	0c 05       	cpc	r16, r12
    1814:	1d 05       	cpc	r17, r13
    1816:	40 f4       	brcc	.+16     	; 0x1828 <__divsf3+0xc6>
    1818:	ee 0c       	add	r14, r14
    181a:	ff 1c       	adc	r15, r15
    181c:	00 1f       	adc	r16, r16
    181e:	11 1f       	adc	r17, r17
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	30 40       	sbci	r19, 0x00	; 0
    1824:	3c 87       	std	Y+12, r19	; 0x0c
    1826:	2b 87       	std	Y+11, r18	; 0x0b
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e4       	ldi	r27, 0x40	; 64
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	ea 14       	cp	r14, r10
    183e:	fb 04       	cpc	r15, r11
    1840:	0c 05       	cpc	r16, r12
    1842:	1d 05       	cpc	r17, r13
    1844:	40 f0       	brcs	.+16     	; 0x1856 <__divsf3+0xf4>
    1846:	28 2b       	or	r18, r24
    1848:	39 2b       	or	r19, r25
    184a:	4a 2b       	or	r20, r26
    184c:	5b 2b       	or	r21, r27
    184e:	ea 18       	sub	r14, r10
    1850:	fb 08       	sbc	r15, r11
    1852:	0c 09       	sbc	r16, r12
    1854:	1d 09       	sbc	r17, r13
    1856:	b6 95       	lsr	r27
    1858:	a7 95       	ror	r26
    185a:	97 95       	ror	r25
    185c:	87 95       	ror	r24
    185e:	ee 0c       	add	r14, r14
    1860:	ff 1c       	adc	r15, r15
    1862:	00 1f       	adc	r16, r16
    1864:	11 1f       	adc	r17, r17
    1866:	6f 5f       	subi	r22, 0xFF	; 255
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	6f 31       	cpi	r22, 0x1F	; 31
    186c:	71 05       	cpc	r23, r1
    186e:	31 f7       	brne	.-52     	; 0x183c <__divsf3+0xda>
    1870:	da 01       	movw	r26, r20
    1872:	c9 01       	movw	r24, r18
    1874:	8f 77       	andi	r24, 0x7F	; 127
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	a0 70       	andi	r26, 0x00	; 0
    187a:	b0 70       	andi	r27, 0x00	; 0
    187c:	80 34       	cpi	r24, 0x40	; 64
    187e:	91 05       	cpc	r25, r1
    1880:	a1 05       	cpc	r26, r1
    1882:	b1 05       	cpc	r27, r1
    1884:	61 f4       	brne	.+24     	; 0x189e <__divsf3+0x13c>
    1886:	27 fd       	sbrc	r18, 7
    1888:	0a c0       	rjmp	.+20     	; 0x189e <__divsf3+0x13c>
    188a:	e1 14       	cp	r14, r1
    188c:	f1 04       	cpc	r15, r1
    188e:	01 05       	cpc	r16, r1
    1890:	11 05       	cpc	r17, r1
    1892:	29 f0       	breq	.+10     	; 0x189e <__divsf3+0x13c>
    1894:	20 5c       	subi	r18, 0xC0	; 192
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	4f 4f       	sbci	r20, 0xFF	; 255
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	20 78       	andi	r18, 0x80	; 128
    189e:	2d 87       	std	Y+13, r18	; 0x0d
    18a0:	3e 87       	std	Y+14, r19	; 0x0e
    18a2:	4f 87       	std	Y+15, r20	; 0x0f
    18a4:	58 8b       	std	Y+16, r21	; 0x10
    18a6:	be 01       	movw	r22, r28
    18a8:	67 5f       	subi	r22, 0xF7	; 247
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	cb 01       	movw	r24, r22
    18ae:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    18b2:	68 96       	adiw	r28, 0x18	; 24
    18b4:	ea e0       	ldi	r30, 0x0A	; 10
    18b6:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__epilogue_restores__+0x10>

000018ba <__floatsisf>:
    18ba:	a8 e0       	ldi	r26, 0x08	; 8
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e6       	ldi	r30, 0x63	; 99
    18c0:	fc e0       	ldi	r31, 0x0C	; 12
    18c2:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x12>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	da 01       	movw	r26, r20
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 27       	eor	r24, r24
    18d4:	b7 fd       	sbrc	r27, 7
    18d6:	83 95       	inc	r24
    18d8:	99 27       	eor	r25, r25
    18da:	aa 27       	eor	r26, r26
    18dc:	bb 27       	eor	r27, r27
    18de:	b8 2e       	mov	r11, r24
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 05       	cpc	r20, r1
    18e6:	51 05       	cpc	r21, r1
    18e8:	19 f4       	brne	.+6      	; 0x18f0 <__floatsisf+0x36>
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	3a c0       	rjmp	.+116    	; 0x1964 <__floatsisf+0xaa>
    18f0:	88 23       	and	r24, r24
    18f2:	a9 f0       	breq	.+42     	; 0x191e <__floatsisf+0x64>
    18f4:	20 30       	cpi	r18, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	38 07       	cpc	r19, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	48 07       	cpc	r20, r24
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	58 07       	cpc	r21, r24
    1902:	29 f4       	brne	.+10     	; 0x190e <__floatsisf+0x54>
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	9f ec       	ldi	r25, 0xCF	; 207
    190c:	30 c0       	rjmp	.+96     	; 0x196e <__floatsisf+0xb4>
    190e:	ee 24       	eor	r14, r14
    1910:	ff 24       	eor	r15, r15
    1912:	87 01       	movw	r16, r14
    1914:	e2 1a       	sub	r14, r18
    1916:	f3 0a       	sbc	r15, r19
    1918:	04 0b       	sbc	r16, r20
    191a:	15 0b       	sbc	r17, r21
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <__floatsisf+0x68>
    191e:	79 01       	movw	r14, r18
    1920:	8a 01       	movw	r16, r20
    1922:	8e e1       	ldi	r24, 0x1E	; 30
    1924:	c8 2e       	mov	r12, r24
    1926:	d1 2c       	mov	r13, r1
    1928:	dc 82       	std	Y+4, r13	; 0x04
    192a:	cb 82       	std	Y+3, r12	; 0x03
    192c:	ed 82       	std	Y+5, r14	; 0x05
    192e:	fe 82       	std	Y+6, r15	; 0x06
    1930:	0f 83       	std	Y+7, r16	; 0x07
    1932:	18 87       	std	Y+8, r17	; 0x08
    1934:	c8 01       	movw	r24, r16
    1936:	b7 01       	movw	r22, r14
    1938:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__clzsi2>
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	18 16       	cp	r1, r24
    1940:	19 06       	cpc	r1, r25
    1942:	84 f4       	brge	.+32     	; 0x1964 <__floatsisf+0xaa>
    1944:	08 2e       	mov	r0, r24
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <__floatsisf+0x96>
    1948:	ee 0c       	add	r14, r14
    194a:	ff 1c       	adc	r15, r15
    194c:	00 1f       	adc	r16, r16
    194e:	11 1f       	adc	r17, r17
    1950:	0a 94       	dec	r0
    1952:	d2 f7       	brpl	.-12     	; 0x1948 <__floatsisf+0x8e>
    1954:	ed 82       	std	Y+5, r14	; 0x05
    1956:	fe 82       	std	Y+6, r15	; 0x06
    1958:	0f 83       	std	Y+7, r16	; 0x07
    195a:	18 87       	std	Y+8, r17	; 0x08
    195c:	c8 1a       	sub	r12, r24
    195e:	d9 0a       	sbc	r13, r25
    1960:	dc 82       	std	Y+4, r13	; 0x04
    1962:	cb 82       	std	Y+3, r12	; 0x03
    1964:	ba 82       	std	Y+2, r11	; 0x02
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    196e:	28 96       	adiw	r28, 0x08	; 8
    1970:	e9 e0       	ldi	r30, 0x09	; 9
    1972:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x12>

00001976 <__floatunsisf>:
    1976:	a8 e0       	ldi	r26, 0x08	; 8
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e1 ec       	ldi	r30, 0xC1	; 193
    197c:	fc e0       	ldi	r31, 0x0C	; 12
    197e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__prologue_saves__+0x10>
    1982:	7b 01       	movw	r14, r22
    1984:	8c 01       	movw	r16, r24
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	81 05       	cpc	r24, r1
    198c:	91 05       	cpc	r25, r1
    198e:	19 f4       	brne	.+6      	; 0x1996 <__floatunsisf+0x20>
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	60 c0       	rjmp	.+192    	; 0x1a56 <__floatunsisf+0xe0>
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	8e e1       	ldi	r24, 0x1E	; 30
    199c:	c8 2e       	mov	r12, r24
    199e:	d1 2c       	mov	r13, r1
    19a0:	dc 82       	std	Y+4, r13	; 0x04
    19a2:	cb 82       	std	Y+3, r12	; 0x03
    19a4:	ed 82       	std	Y+5, r14	; 0x05
    19a6:	fe 82       	std	Y+6, r15	; 0x06
    19a8:	0f 83       	std	Y+7, r16	; 0x07
    19aa:	18 87       	std	Y+8, r17	; 0x08
    19ac:	c8 01       	movw	r24, r16
    19ae:	b7 01       	movw	r22, r14
    19b0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__clzsi2>
    19b4:	fc 01       	movw	r30, r24
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	f7 ff       	sbrs	r31, 7
    19ba:	3b c0       	rjmp	.+118    	; 0x1a32 <__floatunsisf+0xbc>
    19bc:	22 27       	eor	r18, r18
    19be:	33 27       	eor	r19, r19
    19c0:	2e 1b       	sub	r18, r30
    19c2:	3f 0b       	sbc	r19, r31
    19c4:	57 01       	movw	r10, r14
    19c6:	68 01       	movw	r12, r16
    19c8:	02 2e       	mov	r0, r18
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <__floatunsisf+0x5e>
    19cc:	d6 94       	lsr	r13
    19ce:	c7 94       	ror	r12
    19d0:	b7 94       	ror	r11
    19d2:	a7 94       	ror	r10
    19d4:	0a 94       	dec	r0
    19d6:	d2 f7       	brpl	.-12     	; 0x19cc <__floatunsisf+0x56>
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a0 e0       	ldi	r26, 0x00	; 0
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <__floatunsisf+0x7c>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	2a 95       	dec	r18
    19f4:	d2 f7       	brpl	.-12     	; 0x19ea <__floatunsisf+0x74>
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	a1 09       	sbc	r26, r1
    19fa:	b1 09       	sbc	r27, r1
    19fc:	8e 21       	and	r24, r14
    19fe:	9f 21       	and	r25, r15
    1a00:	a0 23       	and	r26, r16
    1a02:	b1 23       	and	r27, r17
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	a1 05       	cpc	r26, r1
    1a08:	b1 05       	cpc	r27, r1
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <__floatunsisf+0x9e>
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	4a 29       	or	r20, r10
    1a16:	5b 29       	or	r21, r11
    1a18:	6c 29       	or	r22, r12
    1a1a:	7d 29       	or	r23, r13
    1a1c:	4d 83       	std	Y+5, r20	; 0x05
    1a1e:	5e 83       	std	Y+6, r21	; 0x06
    1a20:	6f 83       	std	Y+7, r22	; 0x07
    1a22:	78 87       	std	Y+8, r23	; 0x08
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	8e 1b       	sub	r24, r30
    1a2a:	9f 0b       	sbc	r25, r31
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
    1a30:	12 c0       	rjmp	.+36     	; 0x1a56 <__floatunsisf+0xe0>
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	81 f0       	breq	.+32     	; 0x1a56 <__floatunsisf+0xe0>
    1a36:	0e 2e       	mov	r0, r30
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__floatunsisf+0xcc>
    1a3a:	ee 0c       	add	r14, r14
    1a3c:	ff 1c       	adc	r15, r15
    1a3e:	00 1f       	adc	r16, r16
    1a40:	11 1f       	adc	r17, r17
    1a42:	0a 94       	dec	r0
    1a44:	d2 f7       	brpl	.-12     	; 0x1a3a <__floatunsisf+0xc4>
    1a46:	ed 82       	std	Y+5, r14	; 0x05
    1a48:	fe 82       	std	Y+6, r15	; 0x06
    1a4a:	0f 83       	std	Y+7, r16	; 0x07
    1a4c:	18 87       	std	Y+8, r17	; 0x08
    1a4e:	ce 1a       	sub	r12, r30
    1a50:	df 0a       	sbc	r13, r31
    1a52:	dc 82       	std	Y+4, r13	; 0x04
    1a54:	cb 82       	std	Y+3, r12	; 0x03
    1a56:	1a 82       	std	Y+2, r1	; 0x02
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__pack_f>
    1a60:	28 96       	adiw	r28, 0x08	; 8
    1a62:	ea e0       	ldi	r30, 0x0A	; 10
    1a64:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__epilogue_restores__+0x10>

00001a68 <__clzsi2>:
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	7b 01       	movw	r14, r22
    1a72:	8c 01       	movw	r16, r24
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	e8 16       	cp	r14, r24
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	f8 06       	cpc	r15, r24
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 07       	cpc	r16, r24
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	18 07       	cpc	r17, r24
    1a84:	88 f4       	brcc	.+34     	; 0x1aa8 <__clzsi2+0x40>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	e8 16       	cp	r14, r24
    1a8a:	f1 04       	cpc	r15, r1
    1a8c:	01 05       	cpc	r16, r1
    1a8e:	11 05       	cpc	r17, r1
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <__clzsi2+0x36>
    1a92:	28 f0       	brcs	.+10     	; 0x1a9e <__clzsi2+0x36>
    1a94:	88 e0       	ldi	r24, 0x08	; 8
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	17 c0       	rjmp	.+46     	; 0x1acc <__clzsi2+0x64>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e0       	ldi	r26, 0x00	; 0
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	12 c0       	rjmp	.+36     	; 0x1acc <__clzsi2+0x64>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	e8 16       	cp	r14, r24
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	f8 06       	cpc	r15, r24
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 07       	cpc	r16, r24
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	18 07       	cpc	r17, r24
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <__clzsi2+0x5c>
    1aba:	88 e1       	ldi	r24, 0x18	; 24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <__clzsi2+0x64>
    1ac4:	80 e1       	ldi	r24, 0x10	; 16
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e0       	ldi	r26, 0x00	; 0
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	20 e2       	ldi	r18, 0x20	; 32
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	28 1b       	sub	r18, r24
    1ad6:	39 0b       	sbc	r19, r25
    1ad8:	4a 0b       	sbc	r20, r26
    1ada:	5b 0b       	sbc	r21, r27
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <__clzsi2+0x7e>
    1ade:	16 95       	lsr	r17
    1ae0:	07 95       	ror	r16
    1ae2:	f7 94       	ror	r15
    1ae4:	e7 94       	ror	r14
    1ae6:	8a 95       	dec	r24
    1ae8:	d2 f7       	brpl	.-12     	; 0x1ade <__clzsi2+0x76>
    1aea:	f7 01       	movw	r30, r14
    1aec:	e1 5c       	subi	r30, 0xC1	; 193
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	28 1b       	sub	r18, r24
    1af4:	31 09       	sbc	r19, r1
    1af6:	41 09       	sbc	r20, r1
    1af8:	51 09       	sbc	r21, r1
    1afa:	c9 01       	movw	r24, r18
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <__pack_f>:
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	fc 01       	movw	r30, r24
    1b12:	e4 80       	ldd	r14, Z+4	; 0x04
    1b14:	f5 80       	ldd	r15, Z+5	; 0x05
    1b16:	06 81       	ldd	r16, Z+6	; 0x06
    1b18:	17 81       	ldd	r17, Z+7	; 0x07
    1b1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	48 f4       	brcc	.+18     	; 0x1b34 <__pack_f+0x2e>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e1       	ldi	r26, 0x10	; 16
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 2a       	or	r14, r24
    1b2c:	f9 2a       	or	r15, r25
    1b2e:	0a 2b       	or	r16, r26
    1b30:	1b 2b       	or	r17, r27
    1b32:	a5 c0       	rjmp	.+330    	; 0x1c7e <__pack_f+0x178>
    1b34:	84 30       	cpi	r24, 0x04	; 4
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__pack_f+0x34>
    1b38:	9f c0       	rjmp	.+318    	; 0x1c78 <__pack_f+0x172>
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <__pack_f+0x40>
    1b3e:	ee 24       	eor	r14, r14
    1b40:	ff 24       	eor	r15, r15
    1b42:	87 01       	movw	r16, r14
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <__pack_f+0x4a>
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	01 05       	cpc	r16, r1
    1b4c:	11 05       	cpc	r17, r1
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <__pack_f+0x50>
    1b50:	e0 e0       	ldi	r30, 0x00	; 0
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	96 c0       	rjmp	.+300    	; 0x1c82 <__pack_f+0x17c>
    1b56:	62 81       	ldd	r22, Z+2	; 0x02
    1b58:	73 81       	ldd	r23, Z+3	; 0x03
    1b5a:	9f ef       	ldi	r25, 0xFF	; 255
    1b5c:	62 38       	cpi	r22, 0x82	; 130
    1b5e:	79 07       	cpc	r23, r25
    1b60:	0c f0       	brlt	.+2      	; 0x1b64 <__pack_f+0x5e>
    1b62:	5b c0       	rjmp	.+182    	; 0x1c1a <__pack_f+0x114>
    1b64:	22 e8       	ldi	r18, 0x82	; 130
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	26 1b       	sub	r18, r22
    1b6a:	37 0b       	sbc	r19, r23
    1b6c:	2a 31       	cpi	r18, 0x1A	; 26
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f0       	brlt	.+10     	; 0x1b7c <__pack_f+0x76>
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	2a c0       	rjmp	.+84     	; 0x1bd0 <__pack_f+0xca>
    1b7c:	b8 01       	movw	r22, r16
    1b7e:	a7 01       	movw	r20, r14
    1b80:	02 2e       	mov	r0, r18
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__pack_f+0x86>
    1b84:	76 95       	lsr	r23
    1b86:	67 95       	ror	r22
    1b88:	57 95       	ror	r21
    1b8a:	47 95       	ror	r20
    1b8c:	0a 94       	dec	r0
    1b8e:	d2 f7       	brpl	.-12     	; 0x1b84 <__pack_f+0x7e>
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e0       	ldi	r26, 0x00	; 0
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__pack_f+0x9c>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	2a 95       	dec	r18
    1ba4:	d2 f7       	brpl	.-12     	; 0x1b9a <__pack_f+0x94>
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	a1 09       	sbc	r26, r1
    1baa:	b1 09       	sbc	r27, r1
    1bac:	8e 21       	and	r24, r14
    1bae:	9f 21       	and	r25, r15
    1bb0:	a0 23       	and	r26, r16
    1bb2:	b1 23       	and	r27, r17
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	a1 05       	cpc	r26, r1
    1bb8:	b1 05       	cpc	r27, r1
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <__pack_f+0xbe>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	9a 01       	movw	r18, r20
    1bc6:	ab 01       	movw	r20, r22
    1bc8:	28 2b       	or	r18, r24
    1bca:	39 2b       	or	r19, r25
    1bcc:	4a 2b       	or	r20, r26
    1bce:	5b 2b       	or	r21, r27
    1bd0:	da 01       	movw	r26, r20
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	90 70       	andi	r25, 0x00	; 0
    1bd8:	a0 70       	andi	r26, 0x00	; 0
    1bda:	b0 70       	andi	r27, 0x00	; 0
    1bdc:	80 34       	cpi	r24, 0x40	; 64
    1bde:	91 05       	cpc	r25, r1
    1be0:	a1 05       	cpc	r26, r1
    1be2:	b1 05       	cpc	r27, r1
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__pack_f+0xee>
    1be6:	27 ff       	sbrs	r18, 7
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <__pack_f+0xf6>
    1bea:	20 5c       	subi	r18, 0xC0	; 192
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	4f 4f       	sbci	r20, 0xFF	; 255
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <__pack_f+0xf6>
    1bf4:	21 5c       	subi	r18, 0xC1	; 193
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfc:	e0 e0       	ldi	r30, 0x00	; 0
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	20 30       	cpi	r18, 0x00	; 0
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	3a 07       	cpc	r19, r26
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	4a 07       	cpc	r20, r26
    1c0a:	a0 e4       	ldi	r26, 0x40	; 64
    1c0c:	5a 07       	cpc	r21, r26
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <__pack_f+0x10e>
    1c10:	e1 e0       	ldi	r30, 0x01	; 1
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	79 01       	movw	r14, r18
    1c16:	8a 01       	movw	r16, r20
    1c18:	27 c0       	rjmp	.+78     	; 0x1c68 <__pack_f+0x162>
    1c1a:	60 38       	cpi	r22, 0x80	; 128
    1c1c:	71 05       	cpc	r23, r1
    1c1e:	64 f5       	brge	.+88     	; 0x1c78 <__pack_f+0x172>
    1c20:	fb 01       	movw	r30, r22
    1c22:	e1 58       	subi	r30, 0x81	; 129
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	d8 01       	movw	r26, r16
    1c28:	c7 01       	movw	r24, r14
    1c2a:	8f 77       	andi	r24, 0x7F	; 127
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	a0 70       	andi	r26, 0x00	; 0
    1c30:	b0 70       	andi	r27, 0x00	; 0
    1c32:	80 34       	cpi	r24, 0x40	; 64
    1c34:	91 05       	cpc	r25, r1
    1c36:	a1 05       	cpc	r26, r1
    1c38:	b1 05       	cpc	r27, r1
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <__pack_f+0x144>
    1c3c:	e7 fe       	sbrs	r14, 7
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <__pack_f+0x154>
    1c40:	80 e4       	ldi	r24, 0x40	; 64
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <__pack_f+0x14c>
    1c4a:	8f e3       	ldi	r24, 0x3F	; 63
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e8 0e       	add	r14, r24
    1c54:	f9 1e       	adc	r15, r25
    1c56:	0a 1f       	adc	r16, r26
    1c58:	1b 1f       	adc	r17, r27
    1c5a:	17 ff       	sbrs	r17, 7
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__pack_f+0x162>
    1c5e:	16 95       	lsr	r17
    1c60:	07 95       	ror	r16
    1c62:	f7 94       	ror	r15
    1c64:	e7 94       	ror	r14
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	87 e0       	ldi	r24, 0x07	; 7
    1c6a:	16 95       	lsr	r17
    1c6c:	07 95       	ror	r16
    1c6e:	f7 94       	ror	r15
    1c70:	e7 94       	ror	r14
    1c72:	8a 95       	dec	r24
    1c74:	d1 f7       	brne	.-12     	; 0x1c6a <__pack_f+0x164>
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__pack_f+0x17c>
    1c78:	ee 24       	eor	r14, r14
    1c7a:	ff 24       	eor	r15, r15
    1c7c:	87 01       	movw	r16, r14
    1c7e:	ef ef       	ldi	r30, 0xFF	; 255
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	6e 2f       	mov	r22, r30
    1c84:	67 95       	ror	r22
    1c86:	66 27       	eor	r22, r22
    1c88:	67 95       	ror	r22
    1c8a:	90 2f       	mov	r25, r16
    1c8c:	9f 77       	andi	r25, 0x7F	; 127
    1c8e:	d7 94       	ror	r13
    1c90:	dd 24       	eor	r13, r13
    1c92:	d7 94       	ror	r13
    1c94:	8e 2f       	mov	r24, r30
    1c96:	86 95       	lsr	r24
    1c98:	49 2f       	mov	r20, r25
    1c9a:	46 2b       	or	r20, r22
    1c9c:	58 2f       	mov	r21, r24
    1c9e:	5d 29       	or	r21, r13
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	08 95       	ret

00001cb0 <__unpack_f>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	db 01       	movw	r26, r22
    1cb4:	40 81       	ld	r20, Z
    1cb6:	51 81       	ldd	r21, Z+1	; 0x01
    1cb8:	22 81       	ldd	r18, Z+2	; 0x02
    1cba:	62 2f       	mov	r22, r18
    1cbc:	6f 77       	andi	r22, 0x7F	; 127
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	22 1f       	adc	r18, r18
    1cc2:	22 27       	eor	r18, r18
    1cc4:	22 1f       	adc	r18, r18
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	89 2f       	mov	r24, r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	82 2b       	or	r24, r18
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	99 27       	eor	r25, r25
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 93       	st	X, r25
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	21 15       	cp	r18, r1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	a9 f5       	brne	.+106    	; 0x1d4e <__unpack_f+0x9e>
    1ce4:	41 15       	cp	r20, r1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	61 05       	cpc	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <__unpack_f+0x42>
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	37 c0       	rjmp	.+110    	; 0x1d60 <__unpack_f+0xb0>
    1cf2:	82 e8       	ldi	r24, 0x82	; 130
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	13 96       	adiw	r26, 0x03	; 3
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
    1cfc:	12 97       	sbiw	r26, 0x02	; 2
    1cfe:	9a 01       	movw	r18, r20
    1d00:	ab 01       	movw	r20, r22
    1d02:	67 e0       	ldi	r22, 0x07	; 7
    1d04:	22 0f       	add	r18, r18
    1d06:	33 1f       	adc	r19, r19
    1d08:	44 1f       	adc	r20, r20
    1d0a:	55 1f       	adc	r21, r21
    1d0c:	6a 95       	dec	r22
    1d0e:	d1 f7       	brne	.-12     	; 0x1d04 <__unpack_f+0x54>
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	8c 93       	st	X, r24
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <__unpack_f+0x80>
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	44 1f       	adc	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	8d 91       	ld	r24, X+
    1d22:	9c 91       	ld	r25, X
    1d24:	13 97       	sbiw	r26, 0x03	; 3
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	13 96       	adiw	r26, 0x03	; 3
    1d2a:	9c 93       	st	X, r25
    1d2c:	8e 93       	st	-X, r24
    1d2e:	12 97       	sbiw	r26, 0x02	; 2
    1d30:	20 30       	cpi	r18, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	38 07       	cpc	r19, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	48 07       	cpc	r20, r24
    1d3a:	80 e4       	ldi	r24, 0x40	; 64
    1d3c:	58 07       	cpc	r21, r24
    1d3e:	58 f3       	brcs	.-42     	; 0x1d16 <__unpack_f+0x66>
    1d40:	14 96       	adiw	r26, 0x04	; 4
    1d42:	2d 93       	st	X+, r18
    1d44:	3d 93       	st	X+, r19
    1d46:	4d 93       	st	X+, r20
    1d48:	5c 93       	st	X, r21
    1d4a:	17 97       	sbiw	r26, 0x07	; 7
    1d4c:	08 95       	ret
    1d4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1d50:	31 05       	cpc	r19, r1
    1d52:	79 f4       	brne	.+30     	; 0x1d72 <__unpack_f+0xc2>
    1d54:	41 15       	cp	r20, r1
    1d56:	51 05       	cpc	r21, r1
    1d58:	61 05       	cpc	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <__unpack_f+0xb4>
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	08 95       	ret
    1d64:	64 ff       	sbrs	r22, 4
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <__unpack_f+0xbe>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	8c 93       	st	X, r24
    1d6c:	12 c0       	rjmp	.+36     	; 0x1d92 <__unpack_f+0xe2>
    1d6e:	1c 92       	st	X, r1
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <__unpack_f+0xe2>
    1d72:	2f 57       	subi	r18, 0x7F	; 127
    1d74:	30 40       	sbci	r19, 0x00	; 0
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	3c 93       	st	X, r19
    1d7a:	2e 93       	st	-X, r18
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	8c 93       	st	X, r24
    1d82:	87 e0       	ldi	r24, 0x07	; 7
    1d84:	44 0f       	add	r20, r20
    1d86:	55 1f       	adc	r21, r21
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	8a 95       	dec	r24
    1d8e:	d1 f7       	brne	.-12     	; 0x1d84 <__unpack_f+0xd4>
    1d90:	70 64       	ori	r23, 0x40	; 64
    1d92:	14 96       	adiw	r26, 0x04	; 4
    1d94:	4d 93       	st	X+, r20
    1d96:	5d 93       	st	X+, r21
    1d98:	6d 93       	st	X+, r22
    1d9a:	7c 93       	st	X, r23
    1d9c:	17 97       	sbiw	r26, 0x07	; 7
    1d9e:	08 95       	ret

00001da0 <__udivmodqi4>:
    1da0:	99 1b       	sub	r25, r25
    1da2:	79 e0       	ldi	r23, 0x09	; 9
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <__udivmodqi4_ep>

00001da6 <__udivmodqi4_loop>:
    1da6:	99 1f       	adc	r25, r25
    1da8:	96 17       	cp	r25, r22
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <__udivmodqi4_ep>
    1dac:	96 1b       	sub	r25, r22

00001dae <__udivmodqi4_ep>:
    1dae:	88 1f       	adc	r24, r24
    1db0:	7a 95       	dec	r23
    1db2:	c9 f7       	brne	.-14     	; 0x1da6 <__udivmodqi4_loop>
    1db4:	80 95       	com	r24
    1db6:	08 95       	ret

00001db8 <__udivmodhi4>:
    1db8:	aa 1b       	sub	r26, r26
    1dba:	bb 1b       	sub	r27, r27
    1dbc:	51 e1       	ldi	r21, 0x11	; 17
    1dbe:	07 c0       	rjmp	.+14     	; 0x1dce <__udivmodhi4_ep>

00001dc0 <__udivmodhi4_loop>:
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	a6 17       	cp	r26, r22
    1dc6:	b7 07       	cpc	r27, r23
    1dc8:	10 f0       	brcs	.+4      	; 0x1dce <__udivmodhi4_ep>
    1dca:	a6 1b       	sub	r26, r22
    1dcc:	b7 0b       	sbc	r27, r23

00001dce <__udivmodhi4_ep>:
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	5a 95       	dec	r21
    1dd4:	a9 f7       	brne	.-22     	; 0x1dc0 <__udivmodhi4_loop>
    1dd6:	80 95       	com	r24
    1dd8:	90 95       	com	r25
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	08 95       	ret

00001de0 <__divmodhi4>:
    1de0:	97 fb       	bst	r25, 7
    1de2:	09 2e       	mov	r0, r25
    1de4:	07 26       	eor	r0, r23
    1de6:	0a d0       	rcall	.+20     	; 0x1dfc <__divmodhi4_neg1>
    1de8:	77 fd       	sbrc	r23, 7
    1dea:	04 d0       	rcall	.+8      	; 0x1df4 <__divmodhi4_neg2>
    1dec:	e5 df       	rcall	.-54     	; 0x1db8 <__udivmodhi4>
    1dee:	06 d0       	rcall	.+12     	; 0x1dfc <__divmodhi4_neg1>
    1df0:	00 20       	and	r0, r0
    1df2:	1a f4       	brpl	.+6      	; 0x1dfa <__divmodhi4_exit>

00001df4 <__divmodhi4_neg2>:
    1df4:	70 95       	com	r23
    1df6:	61 95       	neg	r22
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255

00001dfa <__divmodhi4_exit>:
    1dfa:	08 95       	ret

00001dfc <__divmodhi4_neg1>:
    1dfc:	f6 f7       	brtc	.-4      	; 0x1dfa <__divmodhi4_exit>
    1dfe:	90 95       	com	r25
    1e00:	81 95       	neg	r24
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	08 95       	ret

00001e06 <__prologue_saves__>:
    1e06:	2f 92       	push	r2
    1e08:	3f 92       	push	r3
    1e0a:	4f 92       	push	r4
    1e0c:	5f 92       	push	r5
    1e0e:	6f 92       	push	r6
    1e10:	7f 92       	push	r7
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	ca 1b       	sub	r28, r26
    1e30:	db 0b       	sbc	r29, r27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	09 94       	ijmp

00001e3e <__epilogue_restores__>:
    1e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e40:	39 88       	ldd	r3, Y+17	; 0x11
    1e42:	48 88       	ldd	r4, Y+16	; 0x10
    1e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e50:	b9 84       	ldd	r11, Y+9	; 0x09
    1e52:	c8 84       	ldd	r12, Y+8	; 0x08
    1e54:	df 80       	ldd	r13, Y+7	; 0x07
    1e56:	ee 80       	ldd	r14, Y+6	; 0x06
    1e58:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e60:	b9 81       	ldd	r27, Y+1	; 0x01
    1e62:	ce 0f       	add	r28, r30
    1e64:	d1 1d       	adc	r29, r1
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	ed 01       	movw	r28, r26
    1e72:	08 95       	ret

00001e74 <dtostrf>:
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	f2 2f       	mov	r31, r18
    1e7e:	f0 2e       	mov	r15, r16
    1e80:	47 fd       	sbrc	r20, 7
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <dtostrf+0x14>
    1e84:	e4 e0       	ldi	r30, 0x04	; 4
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <dtostrf+0x16>
    1e88:	e4 e1       	ldi	r30, 0x14	; 20
    1e8a:	24 2f       	mov	r18, r20
    1e8c:	33 27       	eor	r19, r19
    1e8e:	27 fd       	sbrc	r18, 7
    1e90:	30 95       	com	r19
    1e92:	37 ff       	sbrs	r19, 7
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <dtostrf+0x28>
    1e96:	30 95       	com	r19
    1e98:	21 95       	neg	r18
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	4f 2d       	mov	r20, r15
    1e9e:	51 2f       	mov	r21, r17
    1ea0:	0f 2f       	mov	r16, r31
    1ea2:	ee 2e       	mov	r14, r30
    1ea4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <dtoa_prf>
    1ea8:	8f 2d       	mov	r24, r15
    1eaa:	91 2f       	mov	r25, r17
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	08 95       	ret

00001eb6 <strcpy>:
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	dc 01       	movw	r26, r24
    1eba:	01 90       	ld	r0, Z+
    1ebc:	0d 92       	st	X+, r0
    1ebe:	00 20       	and	r0, r0
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <strcpy+0x4>
    1ec2:	08 95       	ret

00001ec4 <fputs>:
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	8b 01       	movw	r16, r22
    1ed4:	db 01       	movw	r26, r22
    1ed6:	13 96       	adiw	r26, 0x03	; 3
    1ed8:	8c 91       	ld	r24, X
    1eda:	81 fd       	sbrc	r24, 1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <fputs+0x20>
    1ede:	cf ef       	ldi	r28, 0xFF	; 255
    1ee0:	df ef       	ldi	r29, 0xFF	; 255
    1ee2:	13 c0       	rjmp	.+38     	; 0x1f0a <fputs+0x46>
    1ee4:	c0 e0       	ldi	r28, 0x00	; 0
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	0b c0       	rjmp	.+22     	; 0x1f00 <fputs+0x3c>
    1eea:	d8 01       	movw	r26, r16
    1eec:	18 96       	adiw	r26, 0x08	; 8
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	19 97       	sbiw	r26, 0x09	; 9
    1ef4:	b8 01       	movw	r22, r16
    1ef6:	09 95       	icall
    1ef8:	89 2b       	or	r24, r25
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <fputs+0x3c>
    1efc:	cf ef       	ldi	r28, 0xFF	; 255
    1efe:	df ef       	ldi	r29, 0xFF	; 255
    1f00:	f7 01       	movw	r30, r14
    1f02:	81 91       	ld	r24, Z+
    1f04:	7f 01       	movw	r14, r30
    1f06:	88 23       	and	r24, r24
    1f08:	81 f7       	brne	.-32     	; 0x1eea <fputs+0x26>
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	e6 e0       	ldi	r30, 0x06	; 6
    1f12:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00001f16 <dtoa_prf>:
    1f16:	a9 e0       	ldi	r26, 0x09	; 9
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e1 e9       	ldi	r30, 0x91	; 145
    1f1c:	ff e0       	ldi	r31, 0x0F	; 15
    1f1e:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__+0x8>
    1f22:	6a 01       	movw	r12, r20
    1f24:	12 2f       	mov	r17, r18
    1f26:	a0 2e       	mov	r10, r16
    1f28:	be 2c       	mov	r11, r14
    1f2a:	2b e3       	ldi	r18, 0x3B	; 59
    1f2c:	20 17       	cp	r18, r16
    1f2e:	18 f4       	brcc	.+6      	; 0x1f36 <dtoa_prf+0x20>
    1f30:	2c e3       	ldi	r18, 0x3C	; 60
    1f32:	92 2e       	mov	r9, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <dtoa_prf+0x24>
    1f36:	90 2e       	mov	r9, r16
    1f38:	93 94       	inc	r9
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	4f 5f       	subi	r20, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	27 e0       	ldi	r18, 0x07	; 7
    1f42:	09 2d       	mov	r16, r9
    1f44:	0e 94 ed 10 	call	0x21da	; 0x21da <__ftoa_engine>
    1f48:	bc 01       	movw	r22, r24
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	e8 2e       	mov	r14, r24
    1f4e:	ff 24       	eor	r15, r15
    1f50:	c7 01       	movw	r24, r14
    1f52:	89 70       	andi	r24, 0x09	; 9
    1f54:	90 70       	andi	r25, 0x00	; 0
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <dtoa_prf+0x48>
    1f5a:	ad e2       	ldi	r26, 0x2D	; 45
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <dtoa_prf+0x5a>
    1f5e:	b1 fe       	sbrs	r11, 1
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <dtoa_prf+0x50>
    1f62:	ab e2       	ldi	r26, 0x2B	; 43
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <dtoa_prf+0x5a>
    1f66:	b0 fc       	sbrc	r11, 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <dtoa_prf+0x58>
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <dtoa_prf+0x5a>
    1f6e:	a0 e2       	ldi	r26, 0x20	; 32
    1f70:	e3 fe       	sbrs	r14, 3
    1f72:	3b c0       	rjmp	.+118    	; 0x1fea <dtoa_prf+0xd4>
    1f74:	aa 23       	and	r26, r26
    1f76:	11 f4       	brne	.+4      	; 0x1f7c <dtoa_prf+0x66>
    1f78:	23 e0       	ldi	r18, 0x03	; 3
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <dtoa_prf+0x68>
    1f7c:	24 e0       	ldi	r18, 0x04	; 4
    1f7e:	21 17       	cp	r18, r17
    1f80:	10 f0       	brcs	.+4      	; 0x1f86 <dtoa_prf+0x70>
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <dtoa_prf+0x74>
    1f86:	12 1b       	sub	r17, r18
    1f88:	21 2f       	mov	r18, r17
    1f8a:	eb 2c       	mov	r14, r11
    1f8c:	b4 fe       	sbrs	r11, 4
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <dtoa_prf+0x7e>
    1f90:	32 2f       	mov	r19, r18
    1f92:	0a c0       	rjmp	.+20     	; 0x1fa8 <dtoa_prf+0x92>
    1f94:	f6 01       	movw	r30, r12
    1f96:	32 2f       	mov	r19, r18
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <dtoa_prf+0x8a>
    1f9c:	81 93       	st	Z+, r24
    1f9e:	31 50       	subi	r19, 0x01	; 1
    1fa0:	33 23       	and	r19, r19
    1fa2:	e1 f7       	brne	.-8      	; 0x1f9c <dtoa_prf+0x86>
    1fa4:	c2 0e       	add	r12, r18
    1fa6:	d1 1c       	adc	r13, r1
    1fa8:	aa 23       	and	r26, r26
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <dtoa_prf+0x9c>
    1fac:	f6 01       	movw	r30, r12
    1fae:	a1 93       	st	Z+, r26
    1fb0:	6f 01       	movw	r12, r30
    1fb2:	f6 01       	movw	r30, r12
    1fb4:	31 96       	adiw	r30, 0x01	; 1
    1fb6:	e2 fe       	sbrs	r14, 2
    1fb8:	05 c0       	rjmp	.+10     	; 0x1fc4 <dtoa_prf+0xae>
    1fba:	9e e4       	ldi	r25, 0x4E	; 78
    1fbc:	d6 01       	movw	r26, r12
    1fbe:	9c 93       	st	X, r25
    1fc0:	81 e4       	ldi	r24, 0x41	; 65
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <dtoa_prf+0xb6>
    1fc4:	9e e6       	ldi	r25, 0x6E	; 110
    1fc6:	d6 01       	movw	r26, r12
    1fc8:	9c 93       	st	X, r25
    1fca:	81 e6       	ldi	r24, 0x61	; 97
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	8c 93       	st	X, r24
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	32 96       	adiw	r30, 0x02	; 2
    1fd4:	df 01       	movw	r26, r30
    1fd6:	83 2f       	mov	r24, r19
    1fd8:	90 e2       	ldi	r25, 0x20	; 32
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <dtoa_prf+0xca>
    1fdc:	9d 93       	st	X+, r25
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	88 23       	and	r24, r24
    1fe2:	e1 f7       	brne	.-8      	; 0x1fdc <dtoa_prf+0xc6>
    1fe4:	e3 0f       	add	r30, r19
    1fe6:	f1 1d       	adc	r31, r1
    1fe8:	40 c0       	rjmp	.+128    	; 0x206a <dtoa_prf+0x154>
    1fea:	e2 fe       	sbrs	r14, 2
    1fec:	42 c0       	rjmp	.+132    	; 0x2072 <dtoa_prf+0x15c>
    1fee:	aa 23       	and	r26, r26
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <dtoa_prf+0xe0>
    1ff2:	23 e0       	ldi	r18, 0x03	; 3
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <dtoa_prf+0xe2>
    1ff6:	24 e0       	ldi	r18, 0x04	; 4
    1ff8:	21 17       	cp	r18, r17
    1ffa:	10 f0       	brcs	.+4      	; 0x2000 <dtoa_prf+0xea>
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <dtoa_prf+0xee>
    2000:	12 1b       	sub	r17, r18
    2002:	21 2f       	mov	r18, r17
    2004:	eb 2c       	mov	r14, r11
    2006:	b4 fe       	sbrs	r11, 4
    2008:	02 c0       	rjmp	.+4      	; 0x200e <dtoa_prf+0xf8>
    200a:	92 2f       	mov	r25, r18
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <dtoa_prf+0x10c>
    200e:	f6 01       	movw	r30, r12
    2010:	92 2f       	mov	r25, r18
    2012:	80 e2       	ldi	r24, 0x20	; 32
    2014:	02 c0       	rjmp	.+4      	; 0x201a <dtoa_prf+0x104>
    2016:	81 93       	st	Z+, r24
    2018:	91 50       	subi	r25, 0x01	; 1
    201a:	99 23       	and	r25, r25
    201c:	e1 f7       	brne	.-8      	; 0x2016 <dtoa_prf+0x100>
    201e:	c2 0e       	add	r12, r18
    2020:	d1 1c       	adc	r13, r1
    2022:	aa 23       	and	r26, r26
    2024:	19 f0       	breq	.+6      	; 0x202c <dtoa_prf+0x116>
    2026:	f6 01       	movw	r30, r12
    2028:	a1 93       	st	Z+, r26
    202a:	6f 01       	movw	r12, r30
    202c:	f6 01       	movw	r30, r12
    202e:	31 96       	adiw	r30, 0x01	; 1
    2030:	e2 fe       	sbrs	r14, 2
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <dtoa_prf+0x12e>
    2034:	89 e4       	ldi	r24, 0x49	; 73
    2036:	d6 01       	movw	r26, r12
    2038:	8c 93       	st	X, r24
    203a:	8e e4       	ldi	r24, 0x4E	; 78
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	8c 93       	st	X, r24
    2040:	86 e4       	ldi	r24, 0x46	; 70
    2042:	07 c0       	rjmp	.+14     	; 0x2052 <dtoa_prf+0x13c>
    2044:	89 e6       	ldi	r24, 0x69	; 105
    2046:	d6 01       	movw	r26, r12
    2048:	8c 93       	st	X, r24
    204a:	8e e6       	ldi	r24, 0x6E	; 110
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	8c 93       	st	X, r24
    2050:	86 e6       	ldi	r24, 0x66	; 102
    2052:	81 83       	std	Z+1, r24	; 0x01
    2054:	32 96       	adiw	r30, 0x02	; 2
    2056:	df 01       	movw	r26, r30
    2058:	89 2f       	mov	r24, r25
    205a:	20 e2       	ldi	r18, 0x20	; 32
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <dtoa_prf+0x14c>
    205e:	2d 93       	st	X+, r18
    2060:	81 50       	subi	r24, 0x01	; 1
    2062:	88 23       	and	r24, r24
    2064:	e1 f7       	brne	.-8      	; 0x205e <dtoa_prf+0x148>
    2066:	e9 0f       	add	r30, r25
    2068:	f1 1d       	adc	r31, r1
    206a:	10 82       	st	Z, r1
    206c:	2e ef       	ldi	r18, 0xFE	; 254
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	af c0       	rjmp	.+350    	; 0x21d0 <dtoa_prf+0x2ba>
    2072:	16 16       	cp	r1, r22
    2074:	17 06       	cpc	r1, r23
    2076:	1c f0       	brlt	.+6      	; 0x207e <dtoa_prf+0x168>
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <dtoa_prf+0x16e>
    207e:	ab 01       	movw	r20, r22
    2080:	4f 5f       	subi	r20, 0xFF	; 255
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	aa 20       	and	r10, r10
    2086:	19 f4       	brne	.+6      	; 0x208e <dtoa_prf+0x178>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <dtoa_prf+0x17e>
    208e:	8a 2d       	mov	r24, r10
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	aa 23       	and	r26, r26
    209a:	11 f0       	breq	.+4      	; 0x20a0 <dtoa_prf+0x18a>
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	24 0f       	add	r18, r20
    20a2:	35 1f       	adc	r19, r21
    20a4:	28 0f       	add	r18, r24
    20a6:	39 1f       	adc	r19, r25
    20a8:	81 2f       	mov	r24, r17
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	28 17       	cp	r18, r24
    20ae:	39 07       	cpc	r19, r25
    20b0:	14 f0       	brlt	.+4      	; 0x20b6 <dtoa_prf+0x1a0>
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <dtoa_prf+0x1a4>
    20b6:	12 1b       	sub	r17, r18
    20b8:	21 2f       	mov	r18, r17
    20ba:	4b 2d       	mov	r20, r11
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	ca 01       	movw	r24, r20
    20c0:	80 71       	andi	r24, 0x10	; 16
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	b4 fc       	sbrc	r11, 4
    20c6:	0d c0       	rjmp	.+26     	; 0x20e2 <dtoa_prf+0x1cc>
    20c8:	b3 fc       	sbrc	r11, 3
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <dtoa_prf+0x1cc>
    20cc:	f6 01       	movw	r30, r12
    20ce:	32 2f       	mov	r19, r18
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <dtoa_prf+0x1c2>
    20d4:	41 93       	st	Z+, r20
    20d6:	31 50       	subi	r19, 0x01	; 1
    20d8:	33 23       	and	r19, r19
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <dtoa_prf+0x1be>
    20dc:	c2 0e       	add	r12, r18
    20de:	d1 1c       	adc	r13, r1
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <dtoa_prf+0x1ce>
    20e2:	32 2f       	mov	r19, r18
    20e4:	aa 23       	and	r26, r26
    20e6:	19 f0       	breq	.+6      	; 0x20ee <dtoa_prf+0x1d8>
    20e8:	f6 01       	movw	r30, r12
    20ea:	a1 93       	st	Z+, r26
    20ec:	6f 01       	movw	r12, r30
    20ee:	89 2b       	or	r24, r25
    20f0:	11 f0       	breq	.+4      	; 0x20f6 <dtoa_prf+0x1e0>
    20f2:	13 2f       	mov	r17, r19
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <dtoa_prf+0x1f4>
    20f6:	f6 01       	movw	r30, r12
    20f8:	13 2f       	mov	r17, r19
    20fa:	80 e3       	ldi	r24, 0x30	; 48
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <dtoa_prf+0x1ec>
    20fe:	81 93       	st	Z+, r24
    2100:	11 50       	subi	r17, 0x01	; 1
    2102:	11 23       	and	r17, r17
    2104:	e1 f7       	brne	.-8      	; 0x20fe <dtoa_prf+0x1e8>
    2106:	c3 0e       	add	r12, r19
    2108:	d1 1c       	adc	r13, r1
    210a:	09 2d       	mov	r16, r9
    210c:	06 0f       	add	r16, r22
    210e:	ba 80       	ldd	r11, Y+2	; 0x02
    2110:	90 e1       	ldi	r25, 0x10	; 16
    2112:	89 2e       	mov	r8, r25
    2114:	91 2c       	mov	r9, r1
    2116:	8e 20       	and	r8, r14
    2118:	9f 20       	and	r9, r15
    211a:	e4 fe       	sbrs	r14, 4
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <dtoa_prf+0x210>
    211e:	f1 e3       	ldi	r31, 0x31	; 49
    2120:	bf 16       	cp	r11, r31
    2122:	09 f4       	brne	.+2      	; 0x2126 <dtoa_prf+0x210>
    2124:	01 50       	subi	r16, 0x01	; 1
    2126:	10 16       	cp	r1, r16
    2128:	14 f0       	brlt	.+4      	; 0x212e <dtoa_prf+0x218>
    212a:	01 e0       	ldi	r16, 0x01	; 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <dtoa_prf+0x21e>
    212e:	09 30       	cpi	r16, 0x09	; 9
    2130:	08 f0       	brcs	.+2      	; 0x2134 <dtoa_prf+0x21e>
    2132:	08 e0       	ldi	r16, 0x08	; 8
    2134:	9b 01       	movw	r18, r22
    2136:	77 ff       	sbrs	r23, 7
    2138:	02 c0       	rjmp	.+4      	; 0x213e <dtoa_prf+0x228>
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	cb 01       	movw	r24, r22
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	82 1b       	sub	r24, r18
    2144:	93 0b       	sbc	r25, r19
    2146:	fe 01       	movw	r30, r28
    2148:	31 96       	adiw	r30, 0x01	; 1
    214a:	e8 0f       	add	r30, r24
    214c:	f9 1f       	adc	r31, r25
    214e:	8e e2       	ldi	r24, 0x2E	; 46
    2150:	f8 2e       	mov	r15, r24
    2152:	3b 01       	movw	r6, r22
    2154:	60 1a       	sub	r6, r16
    2156:	71 08       	sbc	r7, r1
    2158:	8a 2d       	mov	r24, r10
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	44 27       	eor	r20, r20
    215e:	55 27       	eor	r21, r21
    2160:	48 1b       	sub	r20, r24
    2162:	59 0b       	sbc	r21, r25
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	2f 3f       	cpi	r18, 0xFF	; 255
    2168:	38 07       	cpc	r19, r24
    216a:	19 f4       	brne	.+6      	; 0x2172 <dtoa_prf+0x25c>
    216c:	d6 01       	movw	r26, r12
    216e:	fd 92       	st	X+, r15
    2170:	6d 01       	movw	r12, r26
    2172:	62 17       	cp	r22, r18
    2174:	73 07       	cpc	r23, r19
    2176:	2c f0       	brlt	.+10     	; 0x2182 <dtoa_prf+0x26c>
    2178:	62 16       	cp	r6, r18
    217a:	73 06       	cpc	r7, r19
    217c:	14 f4       	brge	.+4      	; 0x2182 <dtoa_prf+0x26c>
    217e:	80 81       	ld	r24, Z
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <dtoa_prf+0x26e>
    2182:	80 e3       	ldi	r24, 0x30	; 48
    2184:	21 50       	subi	r18, 0x01	; 1
    2186:	30 40       	sbci	r19, 0x00	; 0
    2188:	31 96       	adiw	r30, 0x01	; 1
    218a:	24 17       	cp	r18, r20
    218c:	35 07       	cpc	r19, r21
    218e:	24 f0       	brlt	.+8      	; 0x2198 <dtoa_prf+0x282>
    2190:	d6 01       	movw	r26, r12
    2192:	8d 93       	st	X+, r24
    2194:	6d 01       	movw	r12, r26
    2196:	e6 cf       	rjmp	.-52     	; 0x2164 <dtoa_prf+0x24e>
    2198:	26 17       	cp	r18, r22
    219a:	37 07       	cpc	r19, r23
    219c:	49 f4       	brne	.+18     	; 0x21b0 <dtoa_prf+0x29a>
    219e:	b5 e3       	ldi	r27, 0x35	; 53
    21a0:	bb 15       	cp	r27, r11
    21a2:	28 f0       	brcs	.+10     	; 0x21ae <dtoa_prf+0x298>
    21a4:	bb 16       	cp	r11, r27
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <dtoa_prf+0x29a>
    21a8:	81 14       	cp	r8, r1
    21aa:	91 04       	cpc	r9, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <dtoa_prf+0x29a>
    21ae:	81 e3       	ldi	r24, 0x31	; 49
    21b0:	f6 01       	movw	r30, r12
    21b2:	81 93       	st	Z+, r24
    21b4:	d6 01       	movw	r26, r12
    21b6:	81 2f       	mov	r24, r17
    21b8:	90 e2       	ldi	r25, 0x20	; 32
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <dtoa_prf+0x2aa>
    21bc:	9c 93       	st	X, r25
    21be:	81 50       	subi	r24, 0x01	; 1
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	88 23       	and	r24, r24
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <dtoa_prf+0x2a6>
    21c6:	e1 0f       	add	r30, r17
    21c8:	f1 1d       	adc	r31, r1
    21ca:	10 82       	st	Z, r1
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	c9 01       	movw	r24, r18
    21d2:	29 96       	adiw	r28, 0x09	; 9
    21d4:	ee e0       	ldi	r30, 0x0E	; 14
    21d6:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__+0x8>

000021da <__ftoa_engine>:
    21da:	28 30       	cpi	r18, 0x08	; 8
    21dc:	08 f0       	brcs	.+2      	; 0x21e0 <__ftoa_engine+0x6>
    21de:	27 e0       	ldi	r18, 0x07	; 7
    21e0:	33 27       	eor	r19, r19
    21e2:	da 01       	movw	r26, r20
    21e4:	99 0f       	add	r25, r25
    21e6:	31 1d       	adc	r19, r1
    21e8:	87 fd       	sbrc	r24, 7
    21ea:	91 60       	ori	r25, 0x01	; 1
    21ec:	00 96       	adiw	r24, 0x00	; 0
    21ee:	61 05       	cpc	r22, r1
    21f0:	71 05       	cpc	r23, r1
    21f2:	39 f4       	brne	.+14     	; 0x2202 <__ftoa_engine+0x28>
    21f4:	32 60       	ori	r19, 0x02	; 2
    21f6:	2e 5f       	subi	r18, 0xFE	; 254
    21f8:	3d 93       	st	X+, r19
    21fa:	30 e3       	ldi	r19, 0x30	; 48
    21fc:	2a 95       	dec	r18
    21fe:	e1 f7       	brne	.-8      	; 0x21f8 <__ftoa_engine+0x1e>
    2200:	08 95       	ret
    2202:	9f 3f       	cpi	r25, 0xFF	; 255
    2204:	30 f0       	brcs	.+12     	; 0x2212 <__ftoa_engine+0x38>
    2206:	80 38       	cpi	r24, 0x80	; 128
    2208:	71 05       	cpc	r23, r1
    220a:	61 05       	cpc	r22, r1
    220c:	09 f0       	breq	.+2      	; 0x2210 <__ftoa_engine+0x36>
    220e:	3c 5f       	subi	r19, 0xFC	; 252
    2210:	3c 5f       	subi	r19, 0xFC	; 252
    2212:	3d 93       	st	X+, r19
    2214:	91 30       	cpi	r25, 0x01	; 1
    2216:	08 f0       	brcs	.+2      	; 0x221a <__ftoa_engine+0x40>
    2218:	80 68       	ori	r24, 0x80	; 128
    221a:	91 1d       	adc	r25, r1
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	1f 93       	push	r17
    2222:	0f 93       	push	r16
    2224:	ff 92       	push	r15
    2226:	ef 92       	push	r14
    2228:	19 2f       	mov	r17, r25
    222a:	98 7f       	andi	r25, 0xF8	; 248
    222c:	96 95       	lsr	r25
    222e:	e9 2f       	mov	r30, r25
    2230:	96 95       	lsr	r25
    2232:	96 95       	lsr	r25
    2234:	e9 0f       	add	r30, r25
    2236:	ff 27       	eor	r31, r31
    2238:	ed 54       	subi	r30, 0x4D	; 77
    223a:	fd 4f       	sbci	r31, 0xFD	; 253
    223c:	99 27       	eor	r25, r25
    223e:	33 27       	eor	r19, r19
    2240:	ee 24       	eor	r14, r14
    2242:	ff 24       	eor	r15, r15
    2244:	a7 01       	movw	r20, r14
    2246:	e7 01       	movw	r28, r14
    2248:	05 90       	lpm	r0, Z+
    224a:	08 94       	sec
    224c:	07 94       	ror	r0
    224e:	28 f4       	brcc	.+10     	; 0x225a <__ftoa_engine+0x80>
    2250:	36 0f       	add	r19, r22
    2252:	e7 1e       	adc	r14, r23
    2254:	f8 1e       	adc	r15, r24
    2256:	49 1f       	adc	r20, r25
    2258:	51 1d       	adc	r21, r1
    225a:	66 0f       	add	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	88 1f       	adc	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	06 94       	lsr	r0
    2264:	a1 f7       	brne	.-24     	; 0x224e <__ftoa_engine+0x74>
    2266:	05 90       	lpm	r0, Z+
    2268:	07 94       	ror	r0
    226a:	28 f4       	brcc	.+10     	; 0x2276 <__ftoa_engine+0x9c>
    226c:	e7 0e       	add	r14, r23
    226e:	f8 1e       	adc	r15, r24
    2270:	49 1f       	adc	r20, r25
    2272:	56 1f       	adc	r21, r22
    2274:	c1 1d       	adc	r28, r1
    2276:	77 0f       	add	r23, r23
    2278:	88 1f       	adc	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	66 1f       	adc	r22, r22
    227e:	06 94       	lsr	r0
    2280:	a1 f7       	brne	.-24     	; 0x226a <__ftoa_engine+0x90>
    2282:	05 90       	lpm	r0, Z+
    2284:	07 94       	ror	r0
    2286:	28 f4       	brcc	.+10     	; 0x2292 <__ftoa_engine+0xb8>
    2288:	f8 0e       	add	r15, r24
    228a:	49 1f       	adc	r20, r25
    228c:	56 1f       	adc	r21, r22
    228e:	c7 1f       	adc	r28, r23
    2290:	d1 1d       	adc	r29, r1
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	06 94       	lsr	r0
    229c:	a1 f7       	brne	.-24     	; 0x2286 <__ftoa_engine+0xac>
    229e:	05 90       	lpm	r0, Z+
    22a0:	07 94       	ror	r0
    22a2:	20 f4       	brcc	.+8      	; 0x22ac <__ftoa_engine+0xd2>
    22a4:	49 0f       	add	r20, r25
    22a6:	56 1f       	adc	r21, r22
    22a8:	c7 1f       	adc	r28, r23
    22aa:	d8 1f       	adc	r29, r24
    22ac:	99 0f       	add	r25, r25
    22ae:	66 1f       	adc	r22, r22
    22b0:	77 1f       	adc	r23, r23
    22b2:	88 1f       	adc	r24, r24
    22b4:	06 94       	lsr	r0
    22b6:	a9 f7       	brne	.-22     	; 0x22a2 <__ftoa_engine+0xc8>
    22b8:	84 91       	lpm	r24, Z+
    22ba:	10 95       	com	r17
    22bc:	17 70       	andi	r17, 0x07	; 7
    22be:	41 f0       	breq	.+16     	; 0x22d0 <__ftoa_engine+0xf6>
    22c0:	d6 95       	lsr	r29
    22c2:	c7 95       	ror	r28
    22c4:	57 95       	ror	r21
    22c6:	47 95       	ror	r20
    22c8:	f7 94       	ror	r15
    22ca:	e7 94       	ror	r14
    22cc:	1a 95       	dec	r17
    22ce:	c1 f7       	brne	.-16     	; 0x22c0 <__ftoa_engine+0xe6>
    22d0:	e9 e5       	ldi	r30, 0x59	; 89
    22d2:	f2 e0       	ldi	r31, 0x02	; 2
    22d4:	68 94       	set
    22d6:	15 90       	lpm	r1, Z+
    22d8:	15 91       	lpm	r17, Z+
    22da:	35 91       	lpm	r19, Z+
    22dc:	65 91       	lpm	r22, Z+
    22de:	95 91       	lpm	r25, Z+
    22e0:	05 90       	lpm	r0, Z+
    22e2:	7f e2       	ldi	r23, 0x2F	; 47
    22e4:	73 95       	inc	r23
    22e6:	e1 18       	sub	r14, r1
    22e8:	f1 0a       	sbc	r15, r17
    22ea:	43 0b       	sbc	r20, r19
    22ec:	56 0b       	sbc	r21, r22
    22ee:	c9 0b       	sbc	r28, r25
    22f0:	d0 09       	sbc	r29, r0
    22f2:	c0 f7       	brcc	.-16     	; 0x22e4 <__ftoa_engine+0x10a>
    22f4:	e1 0c       	add	r14, r1
    22f6:	f1 1e       	adc	r15, r17
    22f8:	43 1f       	adc	r20, r19
    22fa:	56 1f       	adc	r21, r22
    22fc:	c9 1f       	adc	r28, r25
    22fe:	d0 1d       	adc	r29, r0
    2300:	7e f4       	brtc	.+30     	; 0x2320 <__ftoa_engine+0x146>
    2302:	70 33       	cpi	r23, 0x30	; 48
    2304:	11 f4       	brne	.+4      	; 0x230a <__ftoa_engine+0x130>
    2306:	8a 95       	dec	r24
    2308:	e6 cf       	rjmp	.-52     	; 0x22d6 <__ftoa_engine+0xfc>
    230a:	e8 94       	clt
    230c:	01 50       	subi	r16, 0x01	; 1
    230e:	30 f0       	brcs	.+12     	; 0x231c <__ftoa_engine+0x142>
    2310:	08 0f       	add	r16, r24
    2312:	0a f4       	brpl	.+2      	; 0x2316 <__ftoa_engine+0x13c>
    2314:	00 27       	eor	r16, r16
    2316:	02 17       	cp	r16, r18
    2318:	08 f4       	brcc	.+2      	; 0x231c <__ftoa_engine+0x142>
    231a:	20 2f       	mov	r18, r16
    231c:	23 95       	inc	r18
    231e:	02 2f       	mov	r16, r18
    2320:	7a 33       	cpi	r23, 0x3A	; 58
    2322:	28 f0       	brcs	.+10     	; 0x232e <__ftoa_engine+0x154>
    2324:	79 e3       	ldi	r23, 0x39	; 57
    2326:	7d 93       	st	X+, r23
    2328:	2a 95       	dec	r18
    232a:	e9 f7       	brne	.-6      	; 0x2326 <__ftoa_engine+0x14c>
    232c:	10 c0       	rjmp	.+32     	; 0x234e <__ftoa_engine+0x174>
    232e:	7d 93       	st	X+, r23
    2330:	2a 95       	dec	r18
    2332:	89 f6       	brne	.-94     	; 0x22d6 <__ftoa_engine+0xfc>
    2334:	06 94       	lsr	r0
    2336:	97 95       	ror	r25
    2338:	67 95       	ror	r22
    233a:	37 95       	ror	r19
    233c:	17 95       	ror	r17
    233e:	17 94       	ror	r1
    2340:	e1 18       	sub	r14, r1
    2342:	f1 0a       	sbc	r15, r17
    2344:	43 0b       	sbc	r20, r19
    2346:	56 0b       	sbc	r21, r22
    2348:	c9 0b       	sbc	r28, r25
    234a:	d0 09       	sbc	r29, r0
    234c:	98 f0       	brcs	.+38     	; 0x2374 <__ftoa_engine+0x19a>
    234e:	23 95       	inc	r18
    2350:	7e 91       	ld	r23, -X
    2352:	73 95       	inc	r23
    2354:	7a 33       	cpi	r23, 0x3A	; 58
    2356:	08 f0       	brcs	.+2      	; 0x235a <__ftoa_engine+0x180>
    2358:	70 e3       	ldi	r23, 0x30	; 48
    235a:	7c 93       	st	X, r23
    235c:	20 13       	cpse	r18, r16
    235e:	b8 f7       	brcc	.-18     	; 0x234e <__ftoa_engine+0x174>
    2360:	7e 91       	ld	r23, -X
    2362:	70 61       	ori	r23, 0x10	; 16
    2364:	7d 93       	st	X+, r23
    2366:	30 f0       	brcs	.+12     	; 0x2374 <__ftoa_engine+0x19a>
    2368:	83 95       	inc	r24
    236a:	71 e3       	ldi	r23, 0x31	; 49
    236c:	7d 93       	st	X+, r23
    236e:	70 e3       	ldi	r23, 0x30	; 48
    2370:	2a 95       	dec	r18
    2372:	e1 f7       	brne	.-8      	; 0x236c <__ftoa_engine+0x192>
    2374:	11 24       	eor	r1, r1
    2376:	ef 90       	pop	r14
    2378:	ff 90       	pop	r15
    237a:	0f 91       	pop	r16
    237c:	1f 91       	pop	r17
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	99 27       	eor	r25, r25
    2384:	87 fd       	sbrc	r24, 7
    2386:	90 95       	com	r25
    2388:	08 95       	ret

0000238a <_exit>:
    238a:	f8 94       	cli

0000238c <__stop_program>:
    238c:	ff cf       	rjmp	.-2      	; 0x238c <__stop_program>
