
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00002438  000024cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  00800242  00800242  0000260e  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006c4  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026fe  00000000  00000000  00002df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fd6  00000000  00000000  000054f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a94  00000000  00000000  000064c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00007f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d8  00000000  00000000  0000824c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d73  00000000  00000000  00008a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 01 	jmp	0x342	; 0x342 <__ctors_end>
       4:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
       8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
       c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      10:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      14:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      18:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      1c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      20:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      24:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      28:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      2c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      30:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      34:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      38:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      3c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      40:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_16>
      44:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      48:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      4c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      50:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      54:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      58:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      5c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      60:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      64:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      68:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      6c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>

00000070 <LCDHelloTop>:
      70:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000082 <LCDHelloBot>:
      82:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

00000094 <LCDRange>:
      94:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

0000009d <LCDAutorangeOn>:
      9d:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000ac <LCD5Volts>:
      ac:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000b5 <LCD256Volts>:
      b5:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000c1 <LCD11Volts>:
      c1:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000cc <LCD1kOhm>:
      cc:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000d4 <LCD10kOhm>:
      d4:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000dd <LCD100kOhm>:
      dd:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000e7 <LCD1kHz>:
      e7:	31 20 6b 48 5a 00 00                                1 kHZ..

000000ee <LCD10kHz>:
      ee:	31 30 20 6b 48 5a 00 00                             10 kHZ..

000000f6 <LCDMode>:
      f6:	4d 4f 44 45 3a 20 00 00                             MODE: ..

000000fe <LCDVolt>:
      fe:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000010a <LCDOhm>:
     10a:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000114 <LCDFreq>:
     114:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

0000011f <LCDManWelcomeTop>:
     11f:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000012a <LCDManWelcomeBot>:
     12a:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

00000139 <LCDNavigation1Top>:
     139:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000014b <LCDNavigation1Bot>:
     14b:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000015d <LCDNavigation2Top>:
     15d:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

0000016e <LCDNavigation2Bot>:
     16e:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000017d <LCDVoltManTop>:
     17d:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

0000018e <LCDVoltManBot>:
     18e:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

00000199 <LCDOhmManTop>:
     199:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001a9 <LCDOhmManBot>:
     1a9:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001b3 <LCDFreqManTop>:
     1b3:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001c4 <LCDFreqManBot>:
     1c4:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001d1 <LCDAutorangeMan1Top>:
     1d1:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001de <LCDAutorangeMan1Bot>:
     1de:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001e9 <LCDAutorangeMan2Top>:
     1e9:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

000001f6 <LCDAutorangeMan2Bot>:
     1f6:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000207 <LcdCustomChar>:
     207:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     217:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     227:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     237:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     247:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     257:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     267:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     277:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     287:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     297:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2a7:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2b7:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2c7:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2d7:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2e7:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     2f7:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     307:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     317:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     327:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     337:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000342 <__ctors_end>:
     342:	11 24       	eor	r1, r1
     344:	1f be       	out	0x3f, r1	; 63
     346:	cf ef       	ldi	r28, 0xFF	; 255
     348:	d0 e1       	ldi	r29, 0x10	; 16
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	cd bf       	out	0x3d, r28	; 61

0000034e <__do_copy_data>:
     34e:	12 e0       	ldi	r17, 0x02	; 2
     350:	a0 e0       	ldi	r26, 0x00	; 0
     352:	b1 e0       	ldi	r27, 0x01	; 1
     354:	e8 e3       	ldi	r30, 0x38	; 56
     356:	f4 e2       	ldi	r31, 0x24	; 36
     358:	02 c0       	rjmp	.+4      	; 0x35e <.do_copy_data_start>

0000035a <.do_copy_data_loop>:
     35a:	05 90       	lpm	r0, Z+
     35c:	0d 92       	st	X+, r0

0000035e <.do_copy_data_start>:
     35e:	a2 34       	cpi	r26, 0x42	; 66
     360:	b1 07       	cpc	r27, r17
     362:	d9 f7       	brne	.-10     	; 0x35a <.do_copy_data_loop>

00000364 <__do_clear_bss>:
     364:	12 e0       	ldi	r17, 0x02	; 2
     366:	a2 e4       	ldi	r26, 0x42	; 66
     368:	b2 e0       	ldi	r27, 0x02	; 2
     36a:	01 c0       	rjmp	.+2      	; 0x36e <.do_clear_bss_start>

0000036c <.do_clear_bss_loop>:
     36c:	1d 92       	st	X+, r1

0000036e <.do_clear_bss_start>:
     36e:	ab 3b       	cpi	r26, 0xBB	; 187
     370:	b1 07       	cpc	r27, r17
     372:	e1 f7       	brne	.-8      	; 0x36c <.do_clear_bss_loop>
     374:	0e 94 06 05 	call	0xa0c	; 0xa0c <main>
     378:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <_exit>

0000037c <__bad_interrupt>:
     37c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000380 <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
  	DDRD = 0x0f;
     380:	2f e0       	ldi	r18, 0x0F	; 15
     382:	2a b9       	out	0x0a, r18	; 10
  	PORTD = 0xf0; 
     384:	80 ef       	ldi	r24, 0xF0	; 240
     386:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     388:	9a e1       	ldi	r25, 0x1A	; 26
     38a:	39 2f       	mov	r19, r25
     38c:	3a 95       	dec	r19
     38e:	f1 f7       	brne	.-4      	; 0x38c <ScanKeypad+0xc>
  	_delay_us(5);
  	key = PIND;
     390:	39 b1       	in	r19, 0x09	; 9
  	  
  	//get upper nibble
  	DDRD = 0xf0;
     392:	8a b9       	out	0x0a, r24	; 10
  	PORTD = 0x0f; 
     394:	2b b9       	out	0x0b, r18	; 11
     396:	9a 95       	dec	r25
     398:	f1 f7       	brne	.-4      	; 0x396 <ScanKeypad+0x16>
  	_delay_us(5);
  	key = key | PIND;
     39a:	29 b1       	in	r18, 0x09	; 9
     39c:	23 2b       	or	r18, r19
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
     39e:	2f 3f       	cpi	r18, 0xFF	; 255
     3a0:	61 f0       	breq	.+24     	; 0x3ba <ScanKeypad+0x3a>
     3a2:	e2 e2       	ldi	r30, 0x22	; 34
     3a4:	f1 e0       	ldi	r31, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
  	  begin   
  	  	if (keytbl[butnum]==key)  break;   
     3a8:	80 81       	ld	r24, Z
     3aa:	9f 5f       	subi	r25, 0xFF	; 255
     3ac:	82 17       	cp	r24, r18
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <ScanKeypad+0x34>
  	  end

  	  if (butnum==MAX_KEYS) butnum=0;
  	  else butnum++;	   //adjust by one to make range 1-16
     3b0:	89 2f       	mov	r24, r25
     3b2:	08 95       	ret
  	key = key | PIND;
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
     3b4:	31 96       	adiw	r30, 0x01	; 1
     3b6:	90 31       	cpi	r25, 0x10	; 16
     3b8:	b9 f7       	brne	.-18     	; 0x3a8 <ScanKeypad+0x28>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
  	  else butnum++;	   //adjust by one to make range 1-16
  	end  
  	else butnum=0;
  	 
  	return butnum;
}
     3bc:	08 95       	ret

000003be <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     3be:	0e 94 c0 01 	call	0x380	; 0x380 <ScanKeypad>
     3c2:	28 2f       	mov	r18, r24
	switch(keyState){
     3c4:	90 91 99 02 	lds	r25, 0x0299
     3c8:	91 30       	cpi	r25, 0x01	; 1
     3ca:	79 f0       	breq	.+30     	; 0x3ea <Debounce+0x2c>
     3cc:	91 30       	cpi	r25, 0x01	; 1
     3ce:	20 f0       	brcs	.+8      	; 0x3d8 <Debounce+0x1a>
     3d0:	92 30       	cpi	r25, 0x02	; 2
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <Debounce+0x18>
     3d4:	59 c0       	rjmp	.+178    	; 0x488 <Debounce+0xca>
     3d6:	2f c0       	rjmp	.+94     	; 0x436 <Debounce+0x78>
	
    //in the RELEASED state: stay in this state if a key is not pressed
    //go to UNKNOWN if any key is pressed and reset the debounce countdown.
    case RELEASED:
	  if (key){
     3d8:	88 23       	and	r24, r24
     3da:	09 f4       	brne	.+2      	; 0x3de <Debounce+0x20>
     3dc:	55 c0       	rjmp	.+170    	; 0x488 <Debounce+0xca>
        keyState = UNKNOWN;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 99 02 	sts	0x0299, r24
		prevKeyState = RELEASED;
     3e4:	10 92 a0 02 	sts	0x02A0, r1
     3e8:	0c c0       	rjmp	.+24     	; 0x402 <Debounce+0x44>

    //in the UNKNOWN state: go to released if the button is not down Update
    //pressedAndReleased if the button was previously pressed.
    //go to PUSHED if the button is down
    case UNKNOWN:
	  if (key){
     3ea:	88 23       	and	r24, r24
     3ec:	b1 f0       	breq	.+44     	; 0x41a <Debounce+0x5c>
	  	if (key == checkKey){
     3ee:	80 91 ae 02 	lds	r24, 0x02AE
     3f2:	28 17       	cp	r18, r24
     3f4:	31 f4       	brne	.+12     	; 0x402 <Debounce+0x44>
		  keyState = PUSHED;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	80 93 99 02 	sts	0x0299, r24
		  prevKeyState = UNKNOWN;
     3fc:	90 93 a0 02 	sts	0x02A0, r25
     400:	08 95       	ret
		}
		else {
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
     402:	80 91 95 02 	lds	r24, 0x0295
     406:	90 91 96 02 	lds	r25, 0x0296
     40a:	4e 96       	adiw	r24, 0x1e	; 30
     40c:	90 93 ad 02 	sts	0x02AD, r25
     410:	80 93 ac 02 	sts	0x02AC, r24
		  checkKey = key;
     414:	20 93 ae 02 	sts	0x02AE, r18
     418:	08 95       	ret
		}
      }
      else{
	    keyState = RELEASED;
     41a:	10 92 99 02 	sts	0x0299, r1
	    if (prevKeyState == PUSHED) {
     41e:	80 91 a0 02 	lds	r24, 0x02A0
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	21 f4       	brne	.+8      	; 0x42e <Debounce+0x70>
		  curKey = checkKey; //The key to be checked has been pressed and debounced
     426:	80 91 ae 02 	lds	r24, 0x02AE
     42a:	80 93 ab 02 	sts	0x02AB, r24
	    }
		prevKeyState = UNKNOWN;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 a0 02 	sts	0x02A0, r24
     434:	08 95       	ret
      break;

    //in the PUSHED state go to UnKnown if the button is not down.
    //stay in PUSHED if the button is down
    case PUSHED:
	  if (!key){
     436:	88 23       	and	r24, r24
     438:	79 f4       	brne	.+30     	; 0x458 <Debounce+0x9a>
	  	keyState = UNKNOWN;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 99 02 	sts	0x0299, r24
		prevKeyState = PUSHED;
     440:	90 93 a0 02 	sts	0x02A0, r25
        debounceTime = elapsedTime + DEBOUNCE_TIME;
     444:	80 91 95 02 	lds	r24, 0x0295
     448:	90 91 96 02 	lds	r25, 0x0296
     44c:	4e 96       	adiw	r24, 0x1e	; 30
     44e:	90 93 ad 02 	sts	0x02AD, r25
     452:	80 93 ac 02 	sts	0x02AC, r24
     456:	08 95       	ret
      }
	  else{
	  	if (key != checkKey){
     458:	80 91 ae 02 	lds	r24, 0x02AE
     45c:	28 17       	cp	r18, r24
     45e:	a1 f0       	breq	.+40     	; 0x488 <Debounce+0xca>
		  keyState = UNKNOWN;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 99 02 	sts	0x0299, r24
		  prevKeyState = RELEASED; //...???
     466:	10 92 a0 02 	sts	0x02A0, r1
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
     46a:	80 91 95 02 	lds	r24, 0x0295
     46e:	90 91 96 02 	lds	r25, 0x0296
     472:	4e 96       	adiw	r24, 0x1e	; 30
     474:	90 93 ad 02 	sts	0x02AD, r25
     478:	80 93 ac 02 	sts	0x02AC, r24
		  curKey = checkKey;
     47c:	80 91 ae 02 	lds	r24, 0x02AE
     480:	80 93 ab 02 	sts	0x02AB, r24
		  checkKey = key;
     484:	20 93 ae 02 	sts	0x02AE, r18
     488:	08 95       	ret

0000048a <getCurKey>:
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     48a:	90 91 ab 02 	lds	r25, 0x02AB
	if (curKey){
     48e:	80 91 ab 02 	lds	r24, 0x02AB
     492:	88 23       	and	r24, r24
     494:	11 f0       	breq	.+4      	; 0x49a <getCurKey+0x10>
		curKey = 0;
     496:	10 92 ab 02 	sts	0x02AB, r1
	}
	return tmpKey;
}
     49a:	89 2f       	mov	r24, r25
     49c:	08 95       	ret

0000049e <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     49e:	90 91 b2 02 	lds	r25, 0x02B2
     4a2:	93 30       	cpi	r25, 0x03	; 3
     4a4:	c1 f1       	breq	.+112    	; 0x516 <UpdateManState+0x78>
     4a6:	94 30       	cpi	r25, 0x04	; 4
     4a8:	28 f4       	brcc	.+10     	; 0x4b4 <UpdateManState+0x16>
     4aa:	91 30       	cpi	r25, 0x01	; 1
     4ac:	99 f0       	breq	.+38     	; 0x4d4 <UpdateManState+0x36>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	30 f5       	brcc	.+76     	; 0x4fe <UpdateManState+0x60>
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <UpdateManState+0x2e>
     4b4:	95 30       	cpi	r25, 0x05	; 5
     4b6:	09 f4       	brne	.+2      	; 0x4ba <UpdateManState+0x1c>
     4b8:	40 c0       	rjmp	.+128    	; 0x53a <UpdateManState+0x9c>
     4ba:	95 30       	cpi	r25, 0x05	; 5
     4bc:	a8 f1       	brcs	.+106    	; 0x528 <UpdateManState+0x8a>
     4be:	96 30       	cpi	r25, 0x06	; 6
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <UpdateManState+0x26>
     4c2:	44 c0       	rjmp	.+136    	; 0x54c <UpdateManState+0xae>
     4c4:	97 30       	cpi	r25, 0x07	; 7
     4c6:	09 f0       	breq	.+2      	; 0x4ca <UpdateManState+0x2c>
     4c8:	68 c0       	rjmp	.+208    	; 0x59a <UpdateManState+0xfc>
     4ca:	4a c0       	rjmp	.+148    	; 0x560 <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <UpdateManState+0x34>
     4d0:	64 c0       	rjmp	.+200    	; 0x59a <UpdateManState+0xfc>
     4d2:	19 c0       	rjmp	.+50     	; 0x506 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
	    case NAVIGATION_1:
			if (key == 0x10){
     4d4:	80 31       	cpi	r24, 0x10	; 16
     4d6:	29 f4       	brne	.+10     	; 0x4e2 <UpdateManState+0x44>
				mode = returnMode;
     4d8:	80 91 af 02 	lds	r24, 0x02AF
     4dc:	80 93 9f 02 	sts	0x029F, r24
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     4e2:	8e 30       	cpi	r24, 0x0E	; 14
     4e4:	19 f4       	brne	.+6      	; 0x4ec <UpdateManState+0x4e>
				manPage = WELCOME;
     4e6:	10 92 b2 02 	sts	0x02B2, r1
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     4ec:	8f 30       	cpi	r24, 0x0F	; 15
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <UpdateManState+0x54>
     4f0:	54 c0       	rjmp	.+168    	; 0x59a <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	80 93 b2 02 	sts	0x02B2, r24
				justSwitched = 1;
     4f8:	90 93 b3 02 	sts	0x02B3, r25
     4fc:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     4fe:	80 31       	cpi	r24, 0x10	; 16
     500:	89 f1       	breq	.+98     	; 0x564 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     502:	8e 30       	cpi	r24, 0x0E	; 14
     504:	21 f4       	brne	.+8      	; 0x50e <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 b2 02 	sts	0x02B2, r24
     50c:	38 c0       	rjmp	.+112    	; 0x57e <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     50e:	8f 30       	cpi	r24, 0x0F	; 15
     510:	09 f0       	breq	.+2      	; 0x514 <UpdateManState+0x76>
     512:	43 c0       	rjmp	.+134    	; 0x59a <UpdateManState+0xfc>
     514:	0d c0       	rjmp	.+26     	; 0x530 <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     516:	80 31       	cpi	r24, 0x10	; 16
     518:	29 f1       	breq	.+74     	; 0x564 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     51a:	8e 30       	cpi	r24, 0x0E	; 14
     51c:	11 f4       	brne	.+4      	; 0x522 <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	2b c0       	rjmp	.+86     	; 0x578 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     522:	8f 30       	cpi	r24, 0x0F	; 15
     524:	d1 f5       	brne	.+116    	; 0x59a <UpdateManState+0xfc>
     526:	0d c0       	rjmp	.+26     	; 0x542 <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	e1 f0       	breq	.+56     	; 0x564 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     52c:	8e 30       	cpi	r24, 0x0E	; 14
     52e:	11 f4       	brne	.+4      	; 0x534 <UpdateManState+0x96>
				manPage = VOLT_MAN;
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	22 c0       	rjmp	.+68     	; 0x578 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     534:	8f 30       	cpi	r24, 0x0F	; 15
     536:	89 f5       	brne	.+98     	; 0x59a <UpdateManState+0xfc>
     538:	0d c0       	rjmp	.+26     	; 0x554 <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     53a:	80 31       	cpi	r24, 0x10	; 16
     53c:	99 f0       	breq	.+38     	; 0x564 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     53e:	8e 30       	cpi	r24, 0x0E	; 14
     540:	11 f4       	brne	.+4      	; 0x546 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	19 c0       	rjmp	.+50     	; 0x578 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     546:	8f 30       	cpi	r24, 0x0F	; 15
     548:	41 f5       	brne	.+80     	; 0x59a <UpdateManState+0xfc>
     54a:	15 c0       	rjmp	.+42     	; 0x576 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     54c:	80 31       	cpi	r24, 0x10	; 16
     54e:	51 f0       	breq	.+20     	; 0x564 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     550:	8e 30       	cpi	r24, 0x0E	; 14
     552:	11 f4       	brne	.+4      	; 0x558 <UpdateManState+0xba>
				manPage = FREQ_MAN;
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	10 c0       	rjmp	.+32     	; 0x578 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     558:	8f 30       	cpi	r24, 0x0F	; 15
     55a:	f9 f4       	brne	.+62     	; 0x59a <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	0c c0       	rjmp	.+24     	; 0x578 <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     560:	80 31       	cpi	r24, 0x10	; 16
     562:	39 f4       	brne	.+14     	; 0x572 <UpdateManState+0xd4>
				mode = returnMode;
     564:	80 91 af 02 	lds	r24, 0x02AF
     568:	80 93 9f 02 	sts	0x029F, r24
				manPage = WELCOME;
     56c:	10 92 b2 02 	sts	0x02B2, r1
     570:	05 c0       	rjmp	.+10     	; 0x57c <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     572:	8e 30       	cpi	r24, 0x0E	; 14
     574:	39 f4       	brne	.+14     	; 0x584 <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	80 93 b2 02 	sts	0x02B2, r24
				justSwitched = 1;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 b3 02 	sts	0x02B3, r24
     582:	08 95       	ret
			}
			else if (key == 0x0F){
     584:	8f 30       	cpi	r24, 0x0F	; 15
     586:	49 f4       	brne	.+18     	; 0x59a <UpdateManState+0xfc>
				mode = returnMode;
     588:	80 91 af 02 	lds	r24, 0x02AF
     58c:	80 93 9f 02 	sts	0x029F, r24
				manPage = WELCOME;
     590:	10 92 b2 02 	sts	0x02B2, r1
				justSwitched = 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 b3 02 	sts	0x02B3, r24
     59a:	08 95       	ret

0000059c <UpdateDMMState>:
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     59c:	20 91 ab 02 	lds	r18, 0x02AB
	if (curKey){
     5a0:	80 91 ab 02 	lds	r24, 0x02AB
     5a4:	88 23       	and	r24, r24
     5a6:	11 f0       	breq	.+4      	; 0x5ac <UpdateDMMState+0x10>
		curKey = 0;
     5a8:	10 92 ab 02 	sts	0x02AB, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     5ac:	22 23       	and	r18, r18
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <UpdateDMMState+0x16>
     5b0:	f3 c0       	rjmp	.+486    	; 0x798 <UpdateDMMState+0x1fc>
     5b2:	80 91 b3 02 	lds	r24, 0x02B3
     5b6:	88 23       	and	r24, r24
     5b8:	09 f0       	breq	.+2      	; 0x5bc <UpdateDMMState+0x20>
     5ba:	ee c0       	rjmp	.+476    	; 0x798 <UpdateDMMState+0x1fc>
		switch (mode){
     5bc:	90 91 9f 02 	lds	r25, 0x029F
     5c0:	92 30       	cpi	r25, 0x02	; 2
     5c2:	f9 f0       	breq	.+62     	; 0x602 <UpdateDMMState+0x66>
     5c4:	93 30       	cpi	r25, 0x03	; 3
     5c6:	30 f4       	brcc	.+12     	; 0x5d4 <UpdateDMMState+0x38>
     5c8:	99 23       	and	r25, r25
     5ca:	59 f0       	breq	.+22     	; 0x5e2 <UpdateDMMState+0x46>
     5cc:	91 30       	cpi	r25, 0x01	; 1
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <UpdateDMMState+0x36>
     5d0:	e3 c0       	rjmp	.+454    	; 0x798 <UpdateDMMState+0x1fc>
     5d2:	13 c0       	rjmp	.+38     	; 0x5fa <UpdateDMMState+0x5e>
     5d4:	93 30       	cpi	r25, 0x03	; 3
     5d6:	09 f4       	brne	.+2      	; 0x5da <UpdateDMMState+0x3e>
     5d8:	4e c0       	rjmp	.+156    	; 0x676 <UpdateDMMState+0xda>
     5da:	94 30       	cpi	r25, 0x04	; 4
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <UpdateDMMState+0x44>
     5de:	dc c0       	rjmp	.+440    	; 0x798 <UpdateDMMState+0x1fc>
     5e0:	8b c0       	rjmp	.+278    	; 0x6f8 <UpdateDMMState+0x15c>
			case INIT:
				if (key == 0x0F){
     5e2:	2f 30       	cpi	r18, 0x0F	; 15
     5e4:	31 f4       	brne	.+12     	; 0x5f2 <UpdateDMMState+0x56>
					PORTB = ~0x20;
     5e6:	8f ed       	ldi	r24, 0xDF	; 223
     5e8:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 af 02 	sts	0x02AF, r24
     5f0:	46 c0       	rjmp	.+140    	; 0x67e <UpdateDMMState+0xe2>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					mode = VOLTMETER;
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	80 93 9f 02 	sts	0x029F, r24
     5f8:	b9 c0       	rjmp	.+370    	; 0x76c <UpdateDMMState+0x1d0>
					justSwitched = 1;
				}
				break; 

			case MAN:
				UpdateManState(key);
     5fa:	82 2f       	mov	r24, r18
     5fc:	0e 94 4f 02 	call	0x49e	; 0x49e <UpdateManState>
     600:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     602:	2f 30       	cpi	r18, 0x0F	; 15
     604:	31 f4       	brne	.+12     	; 0x612 <UpdateDMMState+0x76>
					mode = MAN;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 9f 02 	sts	0x029F, r24
					returnMode = VOLTMETER;
     60c:	90 93 af 02 	sts	0x02AF, r25
     610:	ae c0       	rjmp	.+348    	; 0x76e <UpdateDMMState+0x1d2>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     612:	2d 30       	cpi	r18, 0x0D	; 13
     614:	09 f4       	brne	.+2      	; 0x618 <UpdateDMMState+0x7c>
     616:	75 c0       	rjmp	.+234    	; 0x702 <UpdateDMMState+0x166>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     618:	80 91 97 02 	lds	r24, 0x0297
     61c:	88 23       	and	r24, r24
     61e:	29 f5       	brne	.+74     	; 0x66a <UpdateDMMState+0xce>
     620:	21 30       	cpi	r18, 0x01	; 1
     622:	19 f5       	brne	.+70     	; 0x66a <UpdateDMMState+0xce>
					rangeIdx++;
     624:	80 91 b0 02 	lds	r24, 0x02B0
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	80 93 b0 02 	sts	0x02B0, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     62e:	80 91 b0 02 	lds	r24, 0x02B0
     632:	60 91 94 02 	lds	r22, 0x0294
     636:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     63a:	90 93 b0 02 	sts	0x02B0, r25
					Vref = VrefRanges[rangeIdx];
     63e:	e0 91 b0 02 	lds	r30, 0x02B0
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ed 5f       	subi	r30, 0xFD	; 253
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	a2 81       	ldd	r26, Z+2	; 0x02
     656:	b3 81       	ldd	r27, Z+3	; 0x03
     658:	80 93 a7 02 	sts	0x02A7, r24
     65c:	90 93 a8 02 	sts	0x02A8, r25
     660:	a0 93 a9 02 	sts	0x02A9, r26
     664:	b0 93 aa 02 	sts	0x02AA, r27
     668:	23 c0       	rjmp	.+70     	; 0x6b0 <UpdateDMMState+0x114>
					justSwitched = 1;
				}
				else if (key == 0x0B){
     66a:	2b 30       	cpi	r18, 0x0B	; 11
     66c:	e9 f5       	brne	.+122    	; 0x6e8 <UpdateDMMState+0x14c>
					mode = OHMMETER;
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	80 93 9f 02 	sts	0x029F, r24
     674:	71 c0       	rjmp	.+226    	; 0x758 <UpdateDMMState+0x1bc>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     676:	2f 30       	cpi	r18, 0x0F	; 15
     678:	31 f4       	brne	.+12     	; 0x686 <UpdateDMMState+0xea>
					returnMode = OHMMETER;
     67a:	90 93 af 02 	sts	0x02AF, r25
					mode = MAN;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 9f 02 	sts	0x029F, r24
     684:	74 c0       	rjmp	.+232    	; 0x76e <UpdateDMMState+0x1d2>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     686:	2d 30       	cpi	r18, 0x0D	; 13
     688:	e1 f1       	breq	.+120    	; 0x702 <UpdateDMMState+0x166>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     68a:	80 91 97 02 	lds	r24, 0x0297
     68e:	88 23       	and	r24, r24
     690:	91 f4       	brne	.+36     	; 0x6b6 <UpdateDMMState+0x11a>
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	81 f4       	brne	.+32     	; 0x6b6 <UpdateDMMState+0x11a>
					rangeIdx++;
     696:	80 91 b0 02 	lds	r24, 0x02B0
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	80 93 b0 02 	sts	0x02B0, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6a0:	80 91 b0 02 	lds	r24, 0x02B0
     6a4:	60 91 94 02 	lds	r22, 0x0294
     6a8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     6ac:	90 93 b0 02 	sts	0x02B0, r25
					justSwitched = 1;
     6b0:	20 93 b3 02 	sts	0x02B3, r18
     6b4:	08 95       	ret
				}
				else if (key == 0x0A){
     6b6:	2a 30       	cpi	r18, 0x0A	; 10
     6b8:	b9 f4       	brne	.+46     	; 0x6e8 <UpdateDMMState+0x14c>
					mode = VOLTMETER;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	80 93 9f 02 	sts	0x029F, r24
					rangeIdxMod = 3;
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6c6:	80 91 b0 02 	lds	r24, 0x02B0
     6ca:	60 91 94 02 	lds	r22, 0x0294
     6ce:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     6d2:	90 93 b0 02 	sts	0x02B0, r25
					ohmRef = resistorRanges[rangeIdx];
     6d6:	e0 91 b0 02 	lds	r30, 0x02B0
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e1 5f       	subi	r30, 0xF1	; 241
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	80 81       	ld	r24, Z
     6e2:	80 93 98 02 	sts	0x0298, r24
     6e6:	42 c0       	rjmp	.+132    	; 0x76c <UpdateDMMState+0x1d0>
					justSwitched = 1;
				}
				else if (key == 0x0C){
     6e8:	2c 30       	cpi	r18, 0x0C	; 12
     6ea:	09 f0       	breq	.+2      	; 0x6ee <UpdateDMMState+0x152>
     6ec:	55 c0       	rjmp	.+170    	; 0x798 <UpdateDMMState+0x1fc>
					mode = FREQMETER;
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	80 93 9f 02 	sts	0x029F, r24
					rangeIdxMod = 2;
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	30 c0       	rjmp	.+96     	; 0x758 <UpdateDMMState+0x1bc>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     6f8:	2f 30       	cpi	r18, 0x0F	; 15
     6fa:	09 f4       	brne	.+2      	; 0x6fe <UpdateDMMState+0x162>
     6fc:	be cf       	rjmp	.-132    	; 0x67a <UpdateDMMState+0xde>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     6fe:	2d 30       	cpi	r18, 0x0D	; 13
     700:	49 f4       	brne	.+18     	; 0x714 <UpdateDMMState+0x178>
					autoRange ^= 1;
     702:	80 91 97 02 	lds	r24, 0x0297
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	89 27       	eor	r24, r25
     70a:	80 93 97 02 	sts	0x0297, r24
					justSwitched = 1;
     70e:	90 93 b3 02 	sts	0x02B3, r25
     712:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
     714:	80 91 97 02 	lds	r24, 0x0297
     718:	88 23       	and	r24, r24
     71a:	c1 f4       	brne	.+48     	; 0x74c <UpdateDMMState+0x1b0>
     71c:	21 30       	cpi	r18, 0x01	; 1
     71e:	b1 f4       	brne	.+44     	; 0x74c <UpdateDMMState+0x1b0>
					rangeIdx++;
     720:	80 91 b0 02 	lds	r24, 0x02B0
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	80 93 b0 02 	sts	0x02B0, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     72a:	80 91 b0 02 	lds	r24, 0x02B0
     72e:	60 91 94 02 	lds	r22, 0x0294
     732:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     736:	90 93 b0 02 	sts	0x02B0, r25
					frequencyRef = frequencyRanges[rangeIdx];
     73a:	e0 91 b0 02 	lds	r30, 0x02B0
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ee 5e       	subi	r30, 0xEE	; 238
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	80 81       	ld	r24, Z
     746:	80 93 b4 02 	sts	0x02B4, r24
     74a:	10 c0       	rjmp	.+32     	; 0x76c <UpdateDMMState+0x1d0>
					justSwitched = 1;
				}
				else if (key == 0x0A){
     74c:	2a 30       	cpi	r18, 0x0A	; 10
     74e:	91 f4       	brne	.+36     	; 0x774 <UpdateDMMState+0x1d8>
					mode = VOLTMETER;
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	80 93 9f 02 	sts	0x029F, r24
					rangeIdxMod = 3;
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     75c:	80 91 b0 02 	lds	r24, 0x02B0
     760:	60 91 94 02 	lds	r22, 0x0294
     764:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     768:	90 93 b0 02 	sts	0x02B0, r25
					justSwitched = 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 b3 02 	sts	0x02B3, r24
     772:	08 95       	ret
				}
				else if (key == 0x0B){
     774:	2b 30       	cpi	r18, 0x0B	; 11
     776:	81 f4       	brne	.+32     	; 0x798 <UpdateDMMState+0x1fc>
					mode = OHMMETER;
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	80 93 9f 02 	sts	0x029F, r24
					rangeIdxMod = 3;
     77e:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     782:	80 91 b0 02 	lds	r24, 0x02B0
     786:	60 91 94 02 	lds	r22, 0x0294
     78a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodqi4>
     78e:	90 93 b0 02 	sts	0x02B0, r25
					justSwitched = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 b3 02 	sts	0x02B3, r24
     798:	08 95       	ret

0000079a <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
	//check for overflow. If the elapsedTime overflows, reset debounceTime
	//as well
	
	uint8_t debounceFlag1 = 1;
	uint8_t debounceFlag2 = 0;
	if (elapsedTime >= debounceTime && debounceTime < DEBOUNCE_TIME){
     7bc:	20 91 95 02 	lds	r18, 0x0295
     7c0:	30 91 96 02 	lds	r19, 0x0296
     7c4:	80 91 ac 02 	lds	r24, 0x02AC
     7c8:	90 91 ad 02 	lds	r25, 0x02AD
     7cc:	28 17       	cp	r18, r24
     7ce:	39 07       	cpc	r19, r25
     7d0:	38 f0       	brcs	.+14     	; 0x7e0 <__vector_16+0x46>
     7d2:	80 91 ac 02 	lds	r24, 0x02AC
     7d6:	90 91 ad 02 	lds	r25, 0x02AD
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	4e 97       	sbiw	r24, 0x1e	; 30
     7de:	08 f0       	brcs	.+2      	; 0x7e2 <__vector_16+0x48>
     7e0:	71 e0       	ldi	r23, 0x01	; 1
		debounceFlag1 = 0;
	}
	
	//check if we are waiting to debounce. If we are, then take precautions
	//so that there are no overflow errors
	if (0xff - debounceTime < DEBOUNCE_TIME){
     7e2:	20 91 ac 02 	lds	r18, 0x02AC
     7e6:	30 91 ad 02 	lds	r19, 0x02AD
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	82 1b       	sub	r24, r18
     7f0:	93 0b       	sbc	r25, r19
     7f2:	4e 97       	sbiw	r24, 0x1e	; 30
     7f4:	10 f0       	brcs	.+4      	; 0x7fa <__vector_16+0x60>
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	12 c0       	rjmp	.+36     	; 0x81e <__vector_16+0x84>
		uint8_t diff = 0xff - debounceTime;
     7fa:	80 91 ac 02 	lds	r24, 0x02AC
     7fe:	90 91 ad 02 	lds	r25, 0x02AD
		if (elapsedTime >= DEBOUNCE_TIME - diff){
     802:	40 91 95 02 	lds	r20, 0x0295
     806:	50 91 96 02 	lds	r21, 0x0296
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	80 95       	com	r24
     80e:	2e e1       	ldi	r18, 0x1E	; 30
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	28 1b       	sub	r18, r24
     814:	31 09       	sbc	r19, r1
     816:	42 17       	cp	r20, r18
     818:	53 07       	cpc	r21, r19
     81a:	08 f0       	brcs	.+2      	; 0x81e <__vector_16+0x84>
     81c:	61 e0       	ldi	r22, 0x01	; 1
			debounceFlag2 = 1;
		}
	}

	elapsedTime++;
     81e:	80 91 95 02 	lds	r24, 0x0295
     822:	90 91 96 02 	lds	r25, 0x0296
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	90 93 96 02 	sts	0x0296, r25
     82c:	80 93 95 02 	sts	0x0295, r24
	if ((elapsedTime >= debounceTime && debounceFlag1) || (elapsedTime < debounceTime && debounceFlag2)){
     830:	20 91 95 02 	lds	r18, 0x0295
     834:	30 91 96 02 	lds	r19, 0x0296
     838:	80 91 ac 02 	lds	r24, 0x02AC
     83c:	90 91 ad 02 	lds	r25, 0x02AD
     840:	28 17       	cp	r18, r24
     842:	39 07       	cpc	r19, r25
     844:	10 f0       	brcs	.+4      	; 0x84a <__vector_16+0xb0>
     846:	77 23       	and	r23, r23
     848:	69 f4       	brne	.+26     	; 0x864 <__vector_16+0xca>
     84a:	20 91 95 02 	lds	r18, 0x0295
     84e:	30 91 96 02 	lds	r19, 0x0296
     852:	80 91 ac 02 	lds	r24, 0x02AC
     856:	90 91 ad 02 	lds	r25, 0x02AD
     85a:	28 17       	cp	r18, r24
     85c:	39 07       	cpc	r19, r25
     85e:	30 f4       	brcc	.+12     	; 0x86c <__vector_16+0xd2>
     860:	66 23       	and	r22, r22
     862:	21 f0       	breq	.+8      	; 0x86c <__vector_16+0xd2>
		Debounce();
     864:	0e 94 df 01 	call	0x3be	; 0x3be <Debounce>
		UpdateDMMState();
     868:	0e 94 ce 02 	call	0x59c	; 0x59c <UpdateDMMState>
	}

	if((elapsedTime % 100) == 0) {
     86c:	80 91 95 02 	lds	r24, 0x0295
     870:	90 91 96 02 	lds	r25, 0x0296
     874:	64 e6       	ldi	r22, 0x64	; 100
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodhi4>
     87c:	89 2b       	or	r24, r25
     87e:	19 f4       	brne	.+6      	; 0x886 <__vector_16+0xec>
    	triggerPoll = 1;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 9e 02 	sts	0x029E, r24
  	}
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <poll>:
			}
			break;
	}
}

void poll(void) {
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
  //get the sample
  Ain = ADCH;
     8ac:	80 91 79 00 	lds	r24, 0x0079
     8b0:	80 93 b1 02 	sts	0x02B1, r24
  //start another conversion
  ADCSRA |= (1<<ADSC);
     8b4:	ea e7       	ldi	r30, 0x7A	; 122
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	80 64       	ori	r24, 0x40	; 64
     8bc:	80 83       	st	Z, r24
  //results to hyperterm
  //printf("%d\n\r",Ain);
  //results to LCD
  LCDclr();
     8be:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
  sprintf(LCDBuffer, "%d", Ain);
     8c2:	20 91 b1 02 	lds	r18, 0x02B1
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <poll+0x20>
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <poll+0x22>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <poll+0x24>
     8cc:	ed b7       	in	r30, 0x3d	; 61
     8ce:	fe b7       	in	r31, 0x3e	; 62
     8d0:	31 96       	adiw	r30, 0x01	; 1
     8d2:	01 ea       	ldi	r16, 0xA1	; 161
     8d4:	12 e0       	ldi	r17, 0x02	; 2
     8d6:	ad b7       	in	r26, 0x3d	; 61
     8d8:	be b7       	in	r27, 0x3e	; 62
     8da:	12 96       	adiw	r26, 0x02	; 2
     8dc:	1c 93       	st	X, r17
     8de:	0e 93       	st	-X, r16
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	93 83       	std	Z+3, r25	; 0x03
     8e8:	82 83       	std	Z+2, r24	; 0x02
     8ea:	24 83       	std	Z+4, r18	; 0x04
     8ec:	15 82       	std	Z+5, r1	; 0x05
     8ee:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <sprintf>
  LCDGotoXY(0, 0);
     8f2:	8d b7       	in	r24, 0x3d	; 61
     8f4:	9e b7       	in	r25, 0x3e	; 62
     8f6:	06 96       	adiw	r24, 0x06	; 6
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	9e bf       	out	0x3e, r25	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	8d bf       	out	0x3d, r24	; 61
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCDGotoXY>
  LCDstring(LCDBuffer, strlen(LCDBuffer));
     90a:	f8 01       	movw	r30, r16
     90c:	01 90       	ld	r0, Z+
     90e:	00 20       	and	r0, r0
     910:	e9 f7       	brne	.-6      	; 0x90c <poll+0x64>
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	e0 1b       	sub	r30, r16
     916:	f1 0b       	sbc	r31, r17
     918:	c8 01       	movw	r24, r16
     91a:	6e 2f       	mov	r22, r30
     91c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <LCDstring>
  //voltage = (float)Ain;
  //voltage = (voltage/1024.0)*Vref;
  //dtostrf(voltage, 6, 3, v_string);
  //("%s",v_string);
  //finished polling
  triggerPoll = 0;
     920:	10 92 9e 02 	sts	0x029E, r1
}
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     92a:	0e 94 14 07 	call	0xe28	; 0xe28 <LCDinit>
	LCDcursorOFF();
     92e:	0e 94 7c 07 	call	0xef8	; 0xef8 <LCDcursorOFF>
	LCDclr();				//clear the display
     932:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
	LCDGotoXY(0,0);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     93e:	80 e7       	ldi	r24, 0x70	; 112
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     94a:	82 e8       	ldi	r24, 0x82	; 130
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
}
     956:	08 95       	ret

00000958 <Initialize>:
	  }
      break;
  }
}

void Initialize(void) {
     958:	1f 93       	push	r17
  //set up the ports
  triggerPoll = 0;
     95a:	10 92 9e 02 	sts	0x029E, r1
  //ADCSRA = (1<<ADEN) | (1<<ADSC) + 7;

  // Set A to input (high impedence)
  // Set E as output
  // Set D as input
  DDRA = 0xff;
     95e:	1f ef       	ldi	r17, 0xFF	; 255
     960:	11 b9       	out	0x01, r17	; 1
  // Set to an input to send high
  PORTA = 0xff;
     962:	12 b9       	out	0x02, r17	; 2

  //DDRE = 0xff;
  //PORTE = 0;
  
  // PortB: LEDs, output
  DDRB=0xff;
     964:	14 b9       	out	0x04, r17	; 4
  PORTB=0xff;
     966:	15 b9       	out	0x05, r17	; 5
  // PortD: Keypad
  DDRD=0x00;
     968:	1a b8       	out	0x0a, r1	; 10

  //set up timer 0 for 1 mSec ticks
  TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249;  	//set the compare reg to 250 time ticks
     970:	89 ef       	ldi	r24, 0xF9	; 249
     972:	87 bd       	out	0x27, r24	; 39
  TCCR0A = 0b00000010; // turn on clear-on-match
     974:	94 bd       	out	0x24, r25	; 36
  TCCR0B = 0b00000011;	// clock prescalar to 64
     976:	23 e0       	ldi	r18, 0x03	; 3
     978:	25 bd       	out	0x25, r18	; 37
  //uart_init();
  //stdout = stdin = stderr = &uart_str;
  //fprintf(stdout,"Starting ADC demo...\n\r");

  //initialize the current key to null
  curKey = 0;
     97a:	10 92 ab 02 	sts	0x02AB, r1
  elapsedTime = 30;
     97e:	8e e1       	ldi	r24, 0x1E	; 30
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 96 02 	sts	0x0296, r25
     986:	80 93 95 02 	sts	0x0295, r24
  debounceTime = 30;
     98a:	90 93 ad 02 	sts	0x02AD, r25
     98e:	80 93 ac 02 	sts	0x02AC, r24
  autoRange = 0;
     992:	10 92 97 02 	sts	0x0297, r1
  mode = INIT;
     996:	10 92 9f 02 	sts	0x029F, r1
  manPage = WELCOME;
     99a:	10 92 b2 02 	sts	0x02B2, r1
  keyState = RELEASED;
     99e:	10 92 99 02 	sts	0x0299, r1
  rangeIdx = 0;
     9a2:	10 92 b0 02 	sts	0x02B0, r1
  rangeIdxMod = 3;
     9a6:	20 93 94 02 	sts	0x0294, r18
  Vref = VrefRanges[rangeIdx];
     9aa:	e0 91 b0 02 	lds	r30, 0x02B0
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ed 5f       	subi	r30, 0xFD	; 253
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	a2 81       	ldd	r26, Z+2	; 0x02
     9c2:	b3 81       	ldd	r27, Z+3	; 0x03
     9c4:	80 93 a7 02 	sts	0x02A7, r24
     9c8:	90 93 a8 02 	sts	0x02A8, r25
     9cc:	a0 93 a9 02 	sts	0x02A9, r26
     9d0:	b0 93 aa 02 	sts	0x02AA, r27
  ohmRef = resistorRanges[rangeIdx];
     9d4:	80 91 b0 02 	lds	r24, 0x02B0
     9d8:	ef e0       	ldi	r30, 0x0F	; 15
     9da:	f1 e0       	ldi	r31, 0x01	; 1
     9dc:	e8 0f       	add	r30, r24
     9de:	f1 1d       	adc	r31, r1
     9e0:	80 81       	ld	r24, Z
     9e2:	80 93 98 02 	sts	0x0298, r24
  frequencyRef = frequencyRanges[rangeIdx];
     9e6:	80 91 b0 02 	lds	r24, 0x02B0
     9ea:	e2 e1       	ldi	r30, 0x12	; 18
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	e8 0f       	add	r30, r24
     9f0:	f1 1d       	adc	r31, r1
     9f2:	80 81       	ld	r24, Z
     9f4:	80 93 b4 02 	sts	0x02B4, r24
  justSwitched = 0;
     9f8:	10 92 b3 02 	sts	0x02B3, r1
  PORTB = ~0x01;
     9fc:	8e ef       	ldi	r24, 0xFE	; 254
     9fe:	85 b9       	out	0x05, r24	; 5
  InitLCD();
     a00:	0e 94 95 04 	call	0x92a	; 0x92a <InitLCD>
  PORTB = 0xFF;
     a04:	15 b9       	out	0x05, r17	; 5
  sei();
     a06:	78 94       	sei

}
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <main>:
  triggerPoll = 0;
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
	Initialize();
     a18:	0e 94 ac 04 	call	0x958	; 0x958 <Initialize>

     		ADCSRA |= (1<<ADSC);
			triggerPoll = 0;
			voltage = (float)Ain ;
      		voltage = (voltage/255.0)*Vref ; //(fraction of full scale)*Vref
			dtostrf(voltage, 6, 3, LCDBuffer);
     a1c:	c1 ea       	ldi	r28, 0xA1	; 161
     a1e:	d2 e0       	ldi	r29, 0x02	; 2

int main(void){
	Initialize();
	
	while(1){
	uint8_t key = curKey;
     a20:	80 91 ab 02 	lds	r24, 0x02AB
		if (key){
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <main+0x20>
			PORTB = ~key;
     a28:	80 95       	com	r24
     a2a:	85 b9       	out	0x05, r24	; 5
		}
		if(triggerPoll) {
     a2c:	80 91 9e 02 	lds	r24, 0x029E
     a30:	88 23       	and	r24, r24
     a32:	81 f1       	breq	.+96     	; 0xa94 <main+0x88>
			//print the previous result then start a new conversion

     		ADCSRA |= (1<<ADSC);
     a34:	80 91 7a 00 	lds	r24, 0x007A
     a38:	80 64       	ori	r24, 0x40	; 64
     a3a:	80 93 7a 00 	sts	0x007A, r24
			triggerPoll = 0;
     a3e:	10 92 9e 02 	sts	0x029E, r1
			voltage = (float)Ain ;
     a42:	60 91 b1 02 	lds	r22, 0x02B1
      		voltage = (voltage/255.0)*Vref ; //(fraction of full scale)*Vref
     a46:	e0 90 a7 02 	lds	r14, 0x02A7
     a4a:	f0 90 a8 02 	lds	r15, 0x02A8
     a4e:	00 91 a9 02 	lds	r16, 0x02A9
     a52:	10 91 aa 02 	lds	r17, 0x02AA
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__floatunsisf>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4f e7       	ldi	r20, 0x7F	; 127
     a66:	53 e4       	ldi	r21, 0x43	; 67
     a68:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divsf3>
     a6c:	a8 01       	movw	r20, r16
     a6e:	97 01       	movw	r18, r14
     a70:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__mulsf3>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	20 93 9a 02 	sts	0x029A, r18
     a7c:	30 93 9b 02 	sts	0x029B, r19
     a80:	40 93 9c 02 	sts	0x029C, r20
     a84:	50 93 9d 02 	sts	0x029D, r21
			dtostrf(voltage, 6, 3, LCDBuffer);
     a88:	46 e0       	ldi	r20, 0x06	; 6
     a8a:	23 e0       	ldi	r18, 0x03	; 3
     a8c:	01 ea       	ldi	r16, 0xA1	; 161
     a8e:	12 e0       	ldi	r17, 0x02	; 2
     a90:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <dtostrf>
    	}
	    if (justSwitched){
     a94:	80 91 b3 02 	lds	r24, 0x02B3
     a98:	88 23       	and	r24, r24
     a9a:	09 f4       	brne	.+2      	; 0xa9e <main+0x92>
     a9c:	06 c1       	rjmp	.+524    	; 0xcaa <main+0x29e>
			switch (mode){
     a9e:	80 91 9f 02 	lds	r24, 0x029F
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <main+0x9c>
     aa6:	7c c0       	rjmp	.+248    	; 0xba0 <main+0x194>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	20 f4       	brcc	.+8      	; 0xab4 <main+0xa8>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	09 f0       	breq	.+2      	; 0xab2 <main+0xa6>
     ab0:	f9 c0       	rjmp	.+498    	; 0xca4 <main+0x298>
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <main+0xb6>
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	09 f4       	brne	.+2      	; 0xaba <main+0xae>
     ab8:	9f c0       	rjmp	.+318    	; 0xbf8 <main+0x1ec>
     aba:	84 30       	cpi	r24, 0x04	; 4
     abc:	09 f0       	breq	.+2      	; 0xac0 <main+0xb4>
     abe:	f2 c0       	rjmp	.+484    	; 0xca4 <main+0x298>
     ac0:	c5 c0       	rjmp	.+394    	; 0xc4c <main+0x240>
				case MAN:
		  			switch (manPage){
     ac2:	80 91 b2 02 	lds	r24, 0x02B2
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	a1 f1       	breq	.+104    	; 0xb32 <main+0x126>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	28 f4       	brcc	.+10     	; 0xad8 <main+0xcc>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	d1 f0       	breq	.+52     	; 0xb06 <main+0xfa>
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	18 f5       	brcc	.+70     	; 0xb1c <main+0x110>
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <main+0xe4>
     ad8:	85 30       	cpi	r24, 0x05	; 5
     ada:	09 f4       	brne	.+2      	; 0xade <main+0xd2>
     adc:	40 c0       	rjmp	.+128    	; 0xb5e <main+0x152>
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	98 f1       	brcs	.+102    	; 0xb48 <main+0x13c>
     ae2:	86 30       	cpi	r24, 0x06	; 6
     ae4:	09 f4       	brne	.+2      	; 0xae8 <main+0xdc>
     ae6:	46 c0       	rjmp	.+140    	; 0xb74 <main+0x168>
     ae8:	87 30       	cpi	r24, 0x07	; 7
     aea:	09 f0       	breq	.+2      	; 0xaee <main+0xe2>
     aec:	db c0       	rjmp	.+438    	; 0xca4 <main+0x298>
     aee:	4d c0       	rjmp	.+154    	; 0xb8a <main+0x17e>
					  	case WELCOME:
							LCDclr();
     af0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     af4:	8f e1       	ldi	r24, 0x1F	; 31
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     b00:	8a e2       	ldi	r24, 0x2A	; 42
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	b7 c0       	rjmp	.+366    	; 0xc74 <main+0x268>
							break;
					    case NAVIGATION_1:
							LCDclr();
     b06:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     b0a:	89 e3       	ldi	r24, 0x39	; 57
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     b16:	8b e4       	ldi	r24, 0x4B	; 75
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	ac c0       	rjmp	.+344    	; 0xc74 <main+0x268>
							break;
						case NAVIGATION_2:
							LCDclr();
     b1c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     b20:	8d e5       	ldi	r24, 0x5D	; 93
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     b2c:	8e e6       	ldi	r24, 0x6E	; 110
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	a1 c0       	rjmp	.+322    	; 0xc74 <main+0x268>
							break;
					 	case VOLT_MAN:
							LCDclr();
     b32:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDVoltManTop, 0, 0);
     b36:	8d e7       	ldi	r24, 0x7D	; 125
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDVoltManBot, 0, 1);
     b42:	8e e8       	ldi	r24, 0x8E	; 142
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	96 c0       	rjmp	.+300    	; 0xc74 <main+0x268>
							break;
						case OHM_MAN:
							LCDclr();
     b48:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDOhmManTop, 0, 0);
     b4c:	89 e9       	ldi	r24, 0x99	; 153
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDOhmManBot, 0, 1);
     b58:	89 ea       	ldi	r24, 0xA9	; 169
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	8b c0       	rjmp	.+278    	; 0xc74 <main+0x268>
							break;
						case FREQ_MAN:
							LCDclr();
     b5e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDFreqManTop, 0, 0);
     b62:	83 eb       	ldi	r24, 0xB3	; 179
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDFreqManBot, 0, 1);
     b6e:	84 ec       	ldi	r24, 0xC4	; 196
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	80 c0       	rjmp	.+256    	; 0xc74 <main+0x268>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     b74:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     b78:	81 ed       	ldi	r24, 0xD1	; 209
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     b84:	8e ed       	ldi	r24, 0xDE	; 222
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	75 c0       	rjmp	.+234    	; 0xc74 <main+0x268>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     b8a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     b8e:	89 ee       	ldi	r24, 0xE9	; 233
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     b9a:	86 ef       	ldi	r24, 0xF6	; 246
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	6a c0       	rjmp	.+212    	; 0xc74 <main+0x268>
							break;
					}
			    		break;

				case VOLTMETER:
			    	LCDclr();
     ba0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     ba4:	86 ef       	ldi	r24, 0xF6	; 246
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
     bb0:	8e ef       	ldi	r24, 0xFE	; 254
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	66 e0       	ldi	r22, 0x06	; 6
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
					if (autoRange){
     bbc:	80 91 97 02 	lds	r24, 0x0297
     bc0:	88 23       	and	r24, r24
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <main+0x1ba>
     bc4:	55 c0       	rjmp	.+170    	; 0xc70 <main+0x264>
				  		CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     bc6:	84 e9       	ldi	r24, 0x94	; 148
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
						switch (rangeIdx){
     bd2:	80 91 b0 02 	lds	r24, 0x02B0
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	49 f0       	breq	.+18     	; 0xbec <main+0x1e0>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <main+0x1da>
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	09 f0       	breq	.+2      	; 0xbe4 <main+0x1d8>
     be2:	60 c0       	rjmp	.+192    	; 0xca4 <main+0x298>
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <main+0x1e6>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     be6:	8c ea       	ldi	r24, 0xAC	; 172
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	58 c0       	rjmp	.+176    	; 0xc9c <main+0x290>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     bec:	85 eb       	ldi	r24, 0xB5	; 181
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	55 c0       	rjmp	.+170    	; 0xc9c <main+0x290>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     bf2:	81 ec       	ldi	r24, 0xC1	; 193
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	52 c0       	rjmp	.+164    	; 0xc9c <main+0x290>
						}
				  	}	
			    	break;

			  	case OHMMETER:
			    	LCDclr();
     bf8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
     bfc:	86 ef       	ldi	r24, 0xF6	; 246
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDOhm, MODE_START, 0);
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	66 e0       	ldi	r22, 0x06	; 6
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
				  	if (autoRange){
     c14:	80 91 97 02 	lds	r24, 0x0297
     c18:	88 23       	and	r24, r24
     c1a:	51 f5       	brne	.+84     	; 0xc70 <main+0x264>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     c1c:	84 e9       	ldi	r24, 0x94	; 148
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
						switch (rangeIdx){
     c28:	80 91 b0 02 	lds	r24, 0x02B0
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	41 f0       	breq	.+16     	; 0xc40 <main+0x234>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	18 f0       	brcs	.+6      	; 0xc3a <main+0x22e>
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	b1 f5       	brne	.+108    	; 0xca4 <main+0x298>
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <main+0x23a>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     c3a:	8d ed       	ldi	r24, 0xDD	; 221
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2e c0       	rjmp	.+92     	; 0xc9c <main+0x290>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     c40:	84 ed       	ldi	r24, 0xD4	; 212
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2b c0       	rjmp	.+86     	; 0xc9c <main+0x290>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     c46:	8c ec       	ldi	r24, 0xCC	; 204
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	28 c0       	rjmp	.+80     	; 0xc9c <main+0x290>
						}
				  	}
			    	break;

			  	case FREQMETER:
			  		LCDclr();
     c4c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
     c50:	86 ef       	ldi	r24, 0xF6	; 246
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDFreq, MODE_START, 0);
     c5c:	84 e1       	ldi	r24, 0x14	; 20
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	66 e0       	ldi	r22, 0x06	; 6
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
				  	if (autoRange){
     c68:	80 91 97 02 	lds	r24, 0x0297
     c6c:	88 23       	and	r24, r24
     c6e:	21 f0       	breq	.+8      	; 0xc78 <main+0x26c>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     c70:	8d e9       	ldi	r24, 0x9D	; 157
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <main+0x292>
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
     c78:	84 e9       	ldi	r24, 0x94	; 148
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
						switch (rangeIdx){
     c84:	80 91 b0 02 	lds	r24, 0x02B0
     c88:	88 23       	and	r24, r24
     c8a:	19 f0       	breq	.+6      	; 0xc92 <main+0x286>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	51 f4       	brne	.+20     	; 0xca4 <main+0x298>
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <main+0x28c>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     c92:	8e ee       	ldi	r24, 0xEE	; 238
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <main+0x290>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     c98:	87 ee       	ldi	r24, 0xE7	; 231
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	67 e0       	ldi	r22, 0x07	; 7
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <CopyStringtoLCD>
						}
				  	}
				    break;
			}

			justSwitched = 0;
     ca4:	10 92 b3 02 	sts	0x02B3, r1
     ca8:	bb ce       	rjmp	.-650    	; 0xa20 <main+0x14>
		}
		else{
			switch (mode){
     caa:	80 91 9f 02 	lds	r24, 0x029F
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	29 f0       	breq	.+10     	; 0xcbc <main+0x2b0>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	19 f0       	breq	.+6      	; 0xcbc <main+0x2b0>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	09 f0       	breq	.+2      	; 0xcbc <main+0x2b0>
     cba:	b2 ce       	rjmp	.-668    	; 0xa20 <main+0x14>
				case OHMMETER:
					LCDGotoXY(0, 0);
					LCDstring(LCDBuffer, strlen(LCDBuffer));
					break;
				case FREQMETER:
					LCDGotoXY(0, 0);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCDGotoXY>
				  	LCDstring(LCDBuffer, strlen(LCDBuffer));
     cc4:	fe 01       	movw	r30, r28
     cc6:	01 90       	ld	r0, Z+
     cc8:	00 20       	and	r0, r0
     cca:	e9 f7       	brne	.-6      	; 0xcc6 <main+0x2ba>
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	e1 5a       	subi	r30, 0xA1	; 161
     cd0:	f2 40       	sbci	r31, 0x02	; 2
     cd2:	81 ea       	ldi	r24, 0xA1	; 161
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	6e 2f       	mov	r22, r30
     cd8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <LCDstring>
     cdc:	a1 ce       	rjmp	.-702    	; 0xa20 <main+0x14>

00000cde <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     cde:	28 2f       	mov	r18, r24
     ce0:	20 7f       	andi	r18, 0xF0	; 240
     ce2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     ce4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     ce6:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce8:	20 ea       	ldi	r18, 0xA0	; 160
     cea:	3f e0       	ldi	r19, 0x0F	; 15
     cec:	f9 01       	movw	r30, r18
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     cf2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     cf4:	40 98       	cbi	0x08, 0	; 8
     cf6:	f9 01       	movw	r30, r18
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	44 e0       	ldi	r20, 0x04	; 4
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	4a 95       	dec	r20
     d06:	e1 f7       	brne	.-8      	; 0xd00 <LCDsendChar+0x22>
     d08:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     d0a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d0c:	42 9a       	sbi	0x08, 2	; 8
     d0e:	c9 01       	movw	r24, r18
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d14:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d16:	40 98       	cbi	0x08, 0	; 8
     d18:	c9 01       	movw	r24, r18
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     d1e:	08 95       	ret

00000d20 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     d20:	28 2f       	mov	r18, r24
     d22:	20 7f       	andi	r18, 0xF0	; 240
     d24:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     d26:	42 9a       	sbi	0x08, 2	; 8
     d28:	20 ea       	ldi	r18, 0xA0	; 160
     d2a:	3f e0       	ldi	r19, 0x0F	; 15
     d2c:	f9 01       	movw	r30, r18
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d32:	42 98       	cbi	0x08, 2	; 8
     d34:	f9 01       	movw	r30, r18
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	54 e0       	ldi	r21, 0x04	; 4
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	5a 95       	dec	r21
     d44:	e1 f7       	brne	.-8      	; 0xd3e <LCDsendCommand+0x1e>
     d46:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     d48:	42 9a       	sbi	0x08, 2	; 8
     d4a:	c9 01       	movw	r24, r18
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d50:	42 98       	cbi	0x08, 2	; 8
     d52:	c9 01       	movw	r24, r18
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     d58:	08 95       	ret

00000d5a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     d60:	08 95       	ret

00000d62 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     d68:	08 95       	ret

00000d6a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	49 f0       	breq	.+18     	; 0xd8a <LCDstring+0x20>
     d78:	ec 01       	movw	r28, r24
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     d7e:	89 91       	ld	r24, Y+
     d80:	0e 94 6f 06 	call	0xcde	; 0xcde <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     d84:	1f 5f       	subi	r17, 0xFF	; 255
     d86:	10 17       	cp	r17, r16
     d88:	d0 f3       	brcs	.-12     	; 0xd7e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     d94:	62 30       	cpi	r22, 0x02	; 2
     d96:	31 f0       	breq	.+12     	; 0xda4 <LCDGotoXY+0x10>
     d98:	63 30       	cpi	r22, 0x03	; 3
     d9a:	31 f0       	breq	.+12     	; 0xda8 <LCDGotoXY+0x14>
     d9c:	61 30       	cpi	r22, 0x01	; 1
     d9e:	29 f4       	brne	.+10     	; 0xdaa <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     da0:	80 5c       	subi	r24, 0xC0	; 192
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     da4:	8c 5e       	subi	r24, 0xEC	; 236
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     da8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
	
}
     db0:	08 95       	ret

00000db2 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ec 01       	movw	r28, r24
     dba:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     dbc:	64 2f       	mov	r22, r20
     dbe:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCDGotoXY>
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     dc6:	0e 94 6f 06 	call	0xcde	; 0xcde <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     dca:	1f 5f       	subi	r17, 0xFF	; 255
     dcc:	fe 01       	movw	r30, r28
     dce:	e1 0f       	add	r30, r17
     dd0:	f1 1d       	adc	r31, r1
     dd2:	84 91       	lpm	r24, Z+
     dd4:	88 23       	and	r24, r24
     dd6:	b9 f7       	brne	.-18     	; 0xdc6 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	7c 01       	movw	r14, r24
     dee:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     df0:	11 0f       	add	r17, r17
     df2:	11 0f       	add	r17, r17
     df4:	11 0f       	add	r17, r17
     df6:	10 64       	ori	r17, 0x40	; 64
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     dfc:	f7 01       	movw	r30, r14
     dfe:	ec 0f       	add	r30, r28
     e00:	fd 1f       	adc	r31, r29
     e02:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     e04:	81 2f       	mov	r24, r17
     e06:	8c 0f       	add	r24, r28
     e08:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
		LCDsendChar(pcc);
     e0c:	80 2f       	mov	r24, r16
     e0e:	0e 94 6f 06 	call	0xcde	; 0xcde <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	c8 30       	cpi	r28, 0x08	; 8
     e16:	d1 05       	cpc	r29, r1
     e18:	89 f7       	brne	.-30     	; 0xdfc <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	80 e6       	ldi	r24, 0x60	; 96
     e30:	9a ee       	ldi	r25, 0xEA	; 234
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     e36:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     e38:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     e3a:	87 b1       	in	r24, 0x07	; 7
     e3c:	80 6f       	ori	r24, 0xF0	; 240
     e3e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     e40:	87 b1       	in	r24, 0x07	; 7
     e42:	87 60       	ori	r24, 0x07	; 7
     e44:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e46:	80 e3       	ldi	r24, 0x30	; 48
     e48:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e4a:	42 9a       	sbi	0x08, 2	; 8
     e4c:	20 ea       	ldi	r18, 0xA0	; 160
     e4e:	3f e0       	ldi	r19, 0x0F	; 15
     e50:	f9 01       	movw	r30, r18
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e56:	42 98       	cbi	0x08, 2	; 8
     e58:	f9 01       	movw	r30, r18
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e5e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e60:	42 9a       	sbi	0x08, 2	; 8
     e62:	c9 01       	movw	r24, r18
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e68:	42 98       	cbi	0x08, 2	; 8
     e6a:	c9 01       	movw	r24, r18
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e74:	42 9a       	sbi	0x08, 2	; 8
     e76:	c9 01       	movw	r24, r18
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e7c:	42 98       	cbi	0x08, 2	; 8
     e7e:	c9 01       	movw	r24, r18
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     e84:	88 e2       	ldi	r24, 0x28	; 40
     e86:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     e8a:	8c e0       	ldi	r24, 0x0C	; 12
     e8c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
     e90:	c7 e0       	ldi	r28, 0x07	; 7
     e92:	d2 e0       	ldi	r29, 0x02	; 2
     e94:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     e96:	16 2f       	mov	r17, r22
     e98:	1f 5f       	subi	r17, 0xFF	; 255
     e9a:	ce 01       	movw	r24, r28
     e9c:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCDdefinechar>
     ea0:	28 96       	adiw	r28, 0x08	; 8
     ea2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     ea4:	18 30       	cpi	r17, 0x08	; 8
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	08 95       	ret

00000eb0 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	08 2f       	mov	r16, r24
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     eba:	8e e1       	ldi	r24, 0x1E	; 30
     ebc:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     ec0:	1f 5f       	subi	r17, 0xFF	; 255
     ec2:	10 17       	cp	r17, r16
     ec4:	d0 f3       	brcs	.-12     	; 0xeba <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	08 2f       	mov	r16, r24
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	04 c0       	rjmp	.+8      	; 0xede <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     ed6:	88 e1       	ldi	r24, 0x18	; 24
     ed8:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     edc:	1f 5f       	subi	r17, 0xFF	; 255
     ede:	10 17       	cp	r17, r16
     ee0:	d0 f3       	brcs	.-12     	; 0xed6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     ee8:	8e e0       	ldi	r24, 0x0E	; 14
     eea:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     eee:	08 95       	ret

00000ef0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
     ef2:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     ef6:	08 95       	ret

00000ef8 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     ef8:	8c e0       	ldi	r24, 0x0C	; 12
     efa:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     efe:	08 95       	ret

00000f00 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     f06:	08 95       	ret

00000f08 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     f08:	8c e0       	ldi	r24, 0x0C	; 12
     f0a:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
}
     f0e:	08 95       	ret

00000f10 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	08 2f       	mov	r16, r24
     f16:	10 e0       	ldi	r17, 0x00	; 0
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f20:	1f 5f       	subi	r17, 0xFF	; 255
     f22:	10 17       	cp	r17, r16
     f24:	d0 f3       	brcs	.-12     	; 0xf1a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	08 2f       	mov	r16, r24
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     f36:	84 e1       	ldi	r24, 0x14	; 20
     f38:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f3c:	1f 5f       	subi	r17, 0xFF	; 255
     f3e:	10 17       	cp	r17, r16
     f40:	d0 f3       	brcs	.-12     	; 0xf36 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	89 9f       	mul	r24, r25
     f5c:	c0 01       	movw	r24, r0
     f5e:	11 24       	eor	r1, r1
     f60:	24 2f       	mov	r18, r20
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	ac 01       	movw	r20, r24
     f66:	42 9f       	mul	r20, r18
     f68:	c0 01       	movw	r24, r0
     f6a:	43 9f       	mul	r20, r19
     f6c:	90 0d       	add	r25, r0
     f6e:	52 9f       	mul	r21, r18
     f70:	90 0d       	add	r25, r0
     f72:	11 24       	eor	r1, r1
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__divmodhi4>
     f7a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     f7c:	cb 01       	movw	r24, r22
     f7e:	66 e0       	ldi	r22, 0x06	; 6
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodhi4>
     f86:	e8 2e       	mov	r14, r24
     f88:	ff 24       	eor	r15, r15
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	12 c0       	rjmp	.+36     	; 0xfb4 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     f90:	c8 01       	movw	r24, r16
     f92:	05 96       	adiw	r24, 0x05	; 5
     f94:	c8 17       	cp	r28, r24
     f96:	d9 07       	cpc	r29, r25
     f98:	10 f0       	brcs	.+4      	; 0xf9e <LCDprogressBar+0x56>
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     f9e:	c0 17       	cp	r28, r16
     fa0:	d1 07       	cpc	r29, r17
     fa2:	10 f0       	brcs	.+4      	; 0xfa8 <LCDprogressBar+0x60>
     fa4:	8e 2d       	mov	r24, r14
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <LCDprogressBar+0x62>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     faa:	0e 94 6f 06 	call	0xcde	; 0xcde <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     fae:	f3 94       	inc	r15
     fb0:	0a 5f       	subi	r16, 0xFA	; 250
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	fd 14       	cp	r15, r13
     fb6:	60 f3       	brcs	.-40     	; 0xf90 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	08 95       	ret

00000fc8 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     fc8:	87 e6       	ldi	r24, 0x67	; 103
     fca:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     fce:	88 e1       	ldi	r24, 0x18	; 24
     fd0:	80 93 c1 00 	sts	0x00C1, r24
}
     fd4:	08 95       	ret

00000fd6 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     fd6:	1f 93       	push	r17
     fd8:	18 2f       	mov	r17, r24

  if (c == '\a')
     fda:	87 30       	cpi	r24, 0x07	; 7
     fdc:	49 f4       	brne	.+18     	; 0xff0 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     fde:	60 91 b9 02 	lds	r22, 0x02B9
     fe2:	70 91 ba 02 	lds	r23, 0x02BA
     fe6:	82 e3       	ldi	r24, 0x32	; 50
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <fputs>
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     ff0:	8a 30       	cpi	r24, 0x0A	; 10
     ff2:	19 f4       	brne	.+6      	; 0xffa <uart_putchar+0x24>
    uart_putchar('\r', stream);
     ff4:	8d e0       	ldi	r24, 0x0D	; 13
     ff6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     ffa:	80 91 c0 00 	lds	r24, 0x00C0
     ffe:	85 ff       	sbrs	r24, 5
    1000:	fc cf       	rjmp	.-8      	; 0xffa <uart_putchar+0x24>
  UDR0 = c;
    1002:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    101c:	80 91 42 02 	lds	r24, 0x0242
    1020:	90 91 43 02 	lds	r25, 0x0243
    1024:	89 2b       	or	r24, r25
    1026:	09 f0       	breq	.+2      	; 0x102a <uart_getchar+0x1c>
    1028:	9f c0       	rjmp	.+318    	; 0x1168 <__stack+0x69>
    102a:	04 e4       	ldi	r16, 0x44	; 68
    102c:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    102e:	80 91 c0 00 	lds	r24, 0x00C0
    1032:	87 ff       	sbrs	r24, 7
    1034:	fc cf       	rjmp	.-8      	; 0x102e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1036:	80 91 c0 00 	lds	r24, 0x00C0
    103a:	84 ff       	sbrs	r24, 4
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <uart_getchar+0x36>
    103e:	2e ef       	ldi	r18, 0xFE	; 254
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	a6 c0       	rjmp	.+332    	; 0x1190 <__stack+0x91>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1044:	80 91 c0 00 	lds	r24, 0x00C0
    1048:	83 fd       	sbrc	r24, 3
    104a:	a0 c0       	rjmp	.+320    	; 0x118c <__stack+0x8d>
	  return _FDEV_ERR;
	c = UDR0;
    104c:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1050:	9d 30       	cpi	r25, 0x0D	; 13
    1052:	11 f0       	breq	.+4      	; 0x1058 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1054:	9a 30       	cpi	r25, 0x0A	; 10
    1056:	69 f4       	brne	.+26     	; 0x1072 <uart_getchar+0x64>
	  {
	    *cp = c;
    1058:	8a e0       	ldi	r24, 0x0A	; 10
    105a:	f8 01       	movw	r30, r16
    105c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    105e:	b7 01       	movw	r22, r14
    1060:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
	    rxp = b;
    1064:	84 e4       	ldi	r24, 0x44	; 68
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	90 93 43 02 	sts	0x0243, r25
    106c:	80 93 42 02 	sts	0x0242, r24
    1070:	7b c0       	rjmp	.+246    	; 0x1168 <__stack+0x69>
	    break;
	  }
	else if (c == '\t')
    1072:	99 30       	cpi	r25, 0x09	; 9
    1074:	09 f4       	brne	.+2      	; 0x1078 <uart_getchar+0x6a>
    1076:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1078:	89 2f       	mov	r24, r25
    107a:	80 52       	subi	r24, 0x20	; 32
    107c:	8f 35       	cpi	r24, 0x5F	; 95
    107e:	10 f0       	brcs	.+4      	; 0x1084 <uart_getchar+0x76>
    1080:	90 3a       	cpi	r25, 0xA0	; 160
    1082:	70 f0       	brcs	.+28     	; 0x10a0 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1084:	f2 e0       	ldi	r31, 0x02	; 2
    1086:	03 39       	cpi	r16, 0x93	; 147
    1088:	1f 07       	cpc	r17, r31
    108a:	11 f4       	brne	.+4      	; 0x1090 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    108c:	87 e0       	ldi	r24, 0x07	; 7
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1090:	f8 01       	movw	r30, r16
    1092:	91 93       	st	Z+, r25
    1094:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1096:	89 2f       	mov	r24, r25
    1098:	b7 01       	movw	r22, r14
    109a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
    109e:	c7 cf       	rjmp	.-114    	; 0x102e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    10a0:	92 31       	cpi	r25, 0x12	; 18
    10a2:	39 f1       	breq	.+78     	; 0x10f2 <uart_getchar+0xe4>
    10a4:	93 31       	cpi	r25, 0x13	; 19
    10a6:	38 f4       	brcc	.+14     	; 0x10b6 <uart_getchar+0xa8>
    10a8:	93 30       	cpi	r25, 0x03	; 3
    10aa:	09 f4       	brne	.+2      	; 0x10ae <uart_getchar+0xa0>
    10ac:	6f c0       	rjmp	.+222    	; 0x118c <__stack+0x8d>
    10ae:	98 30       	cpi	r25, 0x08	; 8
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <uart_getchar+0xa6>
    10b2:	bd cf       	rjmp	.-134    	; 0x102e <uart_getchar+0x20>
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <uart_getchar+0xba>
    10b6:	97 31       	cpi	r25, 0x17	; 23
    10b8:	09 f4       	brne	.+2      	; 0x10bc <uart_getchar+0xae>
    10ba:	4b c0       	rjmp	.+150    	; 0x1152 <__stack+0x53>
    10bc:	9f 37       	cpi	r25, 0x7F	; 127
    10be:	21 f0       	breq	.+8      	; 0x10c8 <uart_getchar+0xba>
    10c0:	95 31       	cpi	r25, 0x15	; 21
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <uart_getchar+0xb8>
    10c4:	b4 cf       	rjmp	.-152    	; 0x102e <uart_getchar+0x20>
    10c6:	32 c0       	rjmp	.+100    	; 0x112c <__stack+0x2d>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    10c8:	f2 e0       	ldi	r31, 0x02	; 2
    10ca:	04 34       	cpi	r16, 0x44	; 68
    10cc:	1f 07       	cpc	r17, r31
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <uart_getchar+0xc4>
    10d0:	08 f4       	brcc	.+2      	; 0x10d4 <uart_getchar+0xc6>
    10d2:	ad cf       	rjmp	.-166    	; 0x102e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	b7 01       	movw	r22, r14
    10d8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar(' ', stream);
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	b7 01       	movw	r22, r14
    10e0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar('\b', stream);
    10e4:	88 e0       	ldi	r24, 0x08	; 8
    10e6:	b7 01       	movw	r22, r14
    10e8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		cp--;
    10ec:	01 50       	subi	r16, 0x01	; 1
    10ee:	10 40       	sbci	r17, 0x00	; 0
    10f0:	9e cf       	rjmp	.-196    	; 0x102e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    10f2:	8d e0       	ldi	r24, 0x0D	; 13
    10f4:	b7 01       	movw	r22, r14
    10f6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
    10fa:	c4 e4       	ldi	r28, 0x44	; 68
    10fc:	d2 e0       	ldi	r29, 0x02	; 2
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__stack+0x9>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1100:	89 91       	ld	r24, Y+
    1102:	b7 01       	movw	r22, r14
    1104:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1108:	c0 17       	cp	r28, r16
    110a:	d1 07       	cpc	r29, r17
    110c:	c8 f3       	brcs	.-14     	; 0x1100 <__stack+0x1>
    110e:	8f cf       	rjmp	.-226    	; 0x102e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	b7 01       	movw	r22, r14
    1114:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar(' ', stream);
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	b7 01       	movw	r22, r14
    111c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar('\b', stream);
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	b7 01       	movw	r22, r14
    1124:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		cp--;
    1128:	01 50       	subi	r16, 0x01	; 1
    112a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	04 34       	cpi	r16, 0x44	; 68
    1130:	18 07       	cpc	r17, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <__stack+0x37>
    1134:	68 f7       	brcc	.-38     	; 0x1110 <__stack+0x11>
    1136:	7b cf       	rjmp	.-266    	; 0x102e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	b7 01       	movw	r22, r14
    113c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar(' ', stream);
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	b7 01       	movw	r22, r14
    1144:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
		uart_putchar('\b', stream);
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	b7 01       	movw	r22, r14
    114c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <uart_putchar>
    1150:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1152:	e2 e0       	ldi	r30, 0x02	; 2
    1154:	04 34       	cpi	r16, 0x44	; 68
    1156:	1e 07       	cpc	r17, r30
    1158:	09 f0       	breq	.+2      	; 0x115c <__stack+0x5d>
    115a:	08 f4       	brcc	.+2      	; 0x115e <__stack+0x5f>
    115c:	68 cf       	rjmp	.-304    	; 0x102e <uart_getchar+0x20>
    115e:	e8 01       	movw	r28, r16
    1160:	8a 91       	ld	r24, -Y
    1162:	80 32       	cpi	r24, 0x20	; 32
    1164:	49 f7       	brne	.-46     	; 0x1138 <__stack+0x39>
    1166:	63 cf       	rjmp	.-314    	; 0x102e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1168:	e0 91 42 02 	lds	r30, 0x0242
    116c:	f0 91 43 02 	lds	r31, 0x0243
    1170:	81 91       	ld	r24, Z+
    1172:	f0 93 43 02 	sts	0x0243, r31
    1176:	e0 93 42 02 	sts	0x0242, r30
  if (c == '\n')
    117a:	8a 30       	cpi	r24, 0x0A	; 10
    117c:	21 f4       	brne	.+8      	; 0x1186 <__stack+0x87>
    rxp = 0;
    117e:	10 92 43 02 	sts	0x0243, r1
    1182:	10 92 42 02 	sts	0x0242, r1

  return c;
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <__stack+0x91>
    118c:	2f ef       	ldi	r18, 0xFF	; 255
    118e:	3f ef       	ldi	r19, 0xFF	; 255
}
    1190:	c9 01       	movw	r24, r18
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	08 95       	ret

000011a0 <__mulsf3>:
    11a0:	a0 e2       	ldi	r26, 0x20	; 32
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e6 ed       	ldi	r30, 0xD6	; 214
    11a6:	f8 e0       	ldi	r31, 0x08	; 8
    11a8:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
    11ac:	69 83       	std	Y+1, r22	; 0x01
    11ae:	7a 83       	std	Y+2, r23	; 0x02
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	2d 83       	std	Y+5, r18	; 0x05
    11b6:	3e 83       	std	Y+6, r19	; 0x06
    11b8:	4f 83       	std	Y+7, r20	; 0x07
    11ba:	58 87       	std	Y+8, r21	; 0x08
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	be 01       	movw	r22, r28
    11c2:	67 5f       	subi	r22, 0xF7	; 247
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__unpack_f>
    11ca:	ce 01       	movw	r24, r28
    11cc:	05 96       	adiw	r24, 0x05	; 5
    11ce:	be 01       	movw	r22, r28
    11d0:	6f 5e       	subi	r22, 0xEF	; 239
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	0e 94 13 0c 	call	0x1826	; 0x1826 <__unpack_f>
    11d8:	99 85       	ldd	r25, Y+9	; 0x09
    11da:	92 30       	cpi	r25, 0x02	; 2
    11dc:	88 f0       	brcs	.+34     	; 0x1200 <__mulsf3+0x60>
    11de:	89 89       	ldd	r24, Y+17	; 0x11
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	c8 f0       	brcs	.+50     	; 0x1216 <__mulsf3+0x76>
    11e4:	94 30       	cpi	r25, 0x04	; 4
    11e6:	19 f4       	brne	.+6      	; 0x11ee <__mulsf3+0x4e>
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	51 f4       	brne	.+20     	; 0x1200 <__mulsf3+0x60>
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <__mulsf3+0x56>
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	29 f4       	brne	.+10     	; 0x11fc <__mulsf3+0x5c>
    11f2:	92 30       	cpi	r25, 0x02	; 2
    11f4:	81 f4       	brne	.+32     	; 0x1216 <__mulsf3+0x76>
    11f6:	8a e3       	ldi	r24, 0x3A	; 58
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	c6 c0       	rjmp	.+396    	; 0x1388 <__mulsf3+0x1e8>
    11fc:	92 30       	cpi	r25, 0x02	; 2
    11fe:	49 f4       	brne	.+18     	; 0x1212 <__mulsf3+0x72>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	8a 89       	ldd	r24, Y+18	; 0x12
    1206:	98 13       	cpse	r25, r24
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	2a 87       	std	Y+10, r18	; 0x0a
    120c:	ce 01       	movw	r24, r28
    120e:	09 96       	adiw	r24, 0x09	; 9
    1210:	bb c0       	rjmp	.+374    	; 0x1388 <__mulsf3+0x1e8>
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	49 f4       	brne	.+18     	; 0x1228 <__mulsf3+0x88>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	8a 89       	ldd	r24, Y+18	; 0x12
    121c:	98 13       	cpse	r25, r24
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	2a 8b       	std	Y+18, r18	; 0x12
    1222:	ce 01       	movw	r24, r28
    1224:	41 96       	adiw	r24, 0x11	; 17
    1226:	b0 c0       	rjmp	.+352    	; 0x1388 <__mulsf3+0x1e8>
    1228:	2d 84       	ldd	r2, Y+13	; 0x0d
    122a:	3e 84       	ldd	r3, Y+14	; 0x0e
    122c:	4f 84       	ldd	r4, Y+15	; 0x0f
    122e:	58 88       	ldd	r5, Y+16	; 0x10
    1230:	6d 88       	ldd	r6, Y+21	; 0x15
    1232:	7e 88       	ldd	r7, Y+22	; 0x16
    1234:	8f 88       	ldd	r8, Y+23	; 0x17
    1236:	98 8c       	ldd	r9, Y+24	; 0x18
    1238:	ee 24       	eor	r14, r14
    123a:	ff 24       	eor	r15, r15
    123c:	87 01       	movw	r16, r14
    123e:	aa 24       	eor	r10, r10
    1240:	bb 24       	eor	r11, r11
    1242:	65 01       	movw	r12, r10
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	e0 e0       	ldi	r30, 0x00	; 0
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	c1 01       	movw	r24, r2
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	90 70       	andi	r25, 0x00	; 0
    1256:	89 2b       	or	r24, r25
    1258:	e9 f0       	breq	.+58     	; 0x1294 <__mulsf3+0xf4>
    125a:	e6 0c       	add	r14, r6
    125c:	f7 1c       	adc	r15, r7
    125e:	08 1d       	adc	r16, r8
    1260:	19 1d       	adc	r17, r9
    1262:	9a 01       	movw	r18, r20
    1264:	ab 01       	movw	r20, r22
    1266:	2a 0d       	add	r18, r10
    1268:	3b 1d       	adc	r19, r11
    126a:	4c 1d       	adc	r20, r12
    126c:	5d 1d       	adc	r21, r13
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e6 14       	cp	r14, r6
    1278:	f7 04       	cpc	r15, r7
    127a:	08 05       	cpc	r16, r8
    127c:	19 05       	cpc	r17, r9
    127e:	20 f4       	brcc	.+8      	; 0x1288 <__mulsf3+0xe8>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ba 01       	movw	r22, r20
    128a:	a9 01       	movw	r20, r18
    128c:	48 0f       	add	r20, r24
    128e:	59 1f       	adc	r21, r25
    1290:	6a 1f       	adc	r22, r26
    1292:	7b 1f       	adc	r23, r27
    1294:	aa 0c       	add	r10, r10
    1296:	bb 1c       	adc	r11, r11
    1298:	cc 1c       	adc	r12, r12
    129a:	dd 1c       	adc	r13, r13
    129c:	97 fe       	sbrs	r9, 7
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <__mulsf3+0x110>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e0       	ldi	r26, 0x00	; 0
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	a8 2a       	or	r10, r24
    12aa:	b9 2a       	or	r11, r25
    12ac:	ca 2a       	or	r12, r26
    12ae:	db 2a       	or	r13, r27
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	e0 32       	cpi	r30, 0x20	; 32
    12b4:	f1 05       	cpc	r31, r1
    12b6:	49 f0       	breq	.+18     	; 0x12ca <__mulsf3+0x12a>
    12b8:	66 0c       	add	r6, r6
    12ba:	77 1c       	adc	r7, r7
    12bc:	88 1c       	adc	r8, r8
    12be:	99 1c       	adc	r9, r9
    12c0:	56 94       	lsr	r5
    12c2:	47 94       	ror	r4
    12c4:	37 94       	ror	r3
    12c6:	27 94       	ror	r2
    12c8:	c3 cf       	rjmp	.-122    	; 0x1250 <__mulsf3+0xb0>
    12ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    12cc:	ea 89       	ldd	r30, Y+18	; 0x12
    12ce:	2b 89       	ldd	r18, Y+19	; 0x13
    12d0:	3c 89       	ldd	r19, Y+20	; 0x14
    12d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d6:	28 0f       	add	r18, r24
    12d8:	39 1f       	adc	r19, r25
    12da:	2e 5f       	subi	r18, 0xFE	; 254
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	17 c0       	rjmp	.+46     	; 0x130e <__mulsf3+0x16e>
    12e0:	ca 01       	movw	r24, r20
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	90 70       	andi	r25, 0x00	; 0
    12e6:	89 2b       	or	r24, r25
    12e8:	61 f0       	breq	.+24     	; 0x1302 <__mulsf3+0x162>
    12ea:	16 95       	lsr	r17
    12ec:	07 95       	ror	r16
    12ee:	f7 94       	ror	r15
    12f0:	e7 94       	ror	r14
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	e8 2a       	or	r14, r24
    12fc:	f9 2a       	or	r15, r25
    12fe:	0a 2b       	or	r16, r26
    1300:	1b 2b       	or	r17, r27
    1302:	76 95       	lsr	r23
    1304:	67 95       	ror	r22
    1306:	57 95       	ror	r21
    1308:	47 95       	ror	r20
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	77 fd       	sbrc	r23, 7
    1310:	e7 cf       	rjmp	.-50     	; 0x12e0 <__mulsf3+0x140>
    1312:	0c c0       	rjmp	.+24     	; 0x132c <__mulsf3+0x18c>
    1314:	44 0f       	add	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	17 fd       	sbrc	r17, 7
    131e:	41 60       	ori	r20, 0x01	; 1
    1320:	ee 0c       	add	r14, r14
    1322:	ff 1c       	adc	r15, r15
    1324:	00 1f       	adc	r16, r16
    1326:	11 1f       	adc	r17, r17
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	30 40       	sbci	r19, 0x00	; 0
    132c:	40 30       	cpi	r20, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	59 07       	cpc	r21, r25
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	69 07       	cpc	r22, r25
    1336:	90 e4       	ldi	r25, 0x40	; 64
    1338:	79 07       	cpc	r23, r25
    133a:	60 f3       	brcs	.-40     	; 0x1314 <__mulsf3+0x174>
    133c:	2b 8f       	std	Y+27, r18	; 0x1b
    133e:	3c 8f       	std	Y+28, r19	; 0x1c
    1340:	db 01       	movw	r26, r22
    1342:	ca 01       	movw	r24, r20
    1344:	8f 77       	andi	r24, 0x7F	; 127
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	a0 70       	andi	r26, 0x00	; 0
    134a:	b0 70       	andi	r27, 0x00	; 0
    134c:	80 34       	cpi	r24, 0x40	; 64
    134e:	91 05       	cpc	r25, r1
    1350:	a1 05       	cpc	r26, r1
    1352:	b1 05       	cpc	r27, r1
    1354:	61 f4       	brne	.+24     	; 0x136e <__mulsf3+0x1ce>
    1356:	47 fd       	sbrc	r20, 7
    1358:	0a c0       	rjmp	.+20     	; 0x136e <__mulsf3+0x1ce>
    135a:	e1 14       	cp	r14, r1
    135c:	f1 04       	cpc	r15, r1
    135e:	01 05       	cpc	r16, r1
    1360:	11 05       	cpc	r17, r1
    1362:	29 f0       	breq	.+10     	; 0x136e <__mulsf3+0x1ce>
    1364:	40 5c       	subi	r20, 0xC0	; 192
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	6f 4f       	sbci	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	40 78       	andi	r20, 0x80	; 128
    136e:	1a 8e       	std	Y+26, r1	; 0x1a
    1370:	fe 17       	cp	r31, r30
    1372:	11 f0       	breq	.+4      	; 0x1378 <__mulsf3+0x1d8>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8a 8f       	std	Y+26, r24	; 0x1a
    1378:	4d 8f       	std	Y+29, r20	; 0x1d
    137a:	5e 8f       	std	Y+30, r21	; 0x1e
    137c:	6f 8f       	std	Y+31, r22	; 0x1f
    137e:	78 a3       	std	Y+32, r23	; 0x20
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	89 8f       	std	Y+25, r24	; 0x19
    1384:	ce 01       	movw	r24, r28
    1386:	49 96       	adiw	r24, 0x19	; 25
    1388:	0e 94 3e 0b 	call	0x167c	; 0x167c <__pack_f>
    138c:	a0 96       	adiw	r28, 0x20	; 32
    138e:	e2 e1       	ldi	r30, 0x12	; 18
    1390:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

00001394 <__divsf3>:
    1394:	a8 e1       	ldi	r26, 0x18	; 24
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e0 ed       	ldi	r30, 0xD0	; 208
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__+0x10>
    13a0:	69 83       	std	Y+1, r22	; 0x01
    13a2:	7a 83       	std	Y+2, r23	; 0x02
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	2d 83       	std	Y+5, r18	; 0x05
    13aa:	3e 83       	std	Y+6, r19	; 0x06
    13ac:	4f 83       	std	Y+7, r20	; 0x07
    13ae:	58 87       	std	Y+8, r21	; 0x08
    13b0:	b9 e0       	ldi	r27, 0x09	; 9
    13b2:	eb 2e       	mov	r14, r27
    13b4:	f1 2c       	mov	r15, r1
    13b6:	ec 0e       	add	r14, r28
    13b8:	fd 1e       	adc	r15, r29
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	b7 01       	movw	r22, r14
    13c0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__unpack_f>
    13c4:	8e 01       	movw	r16, r28
    13c6:	0f 5e       	subi	r16, 0xEF	; 239
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	ce 01       	movw	r24, r28
    13cc:	05 96       	adiw	r24, 0x05	; 5
    13ce:	b8 01       	movw	r22, r16
    13d0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__unpack_f>
    13d4:	29 85       	ldd	r18, Y+9	; 0x09
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <__divsf3+0x48>
    13da:	7e c0       	rjmp	.+252    	; 0x14d8 <__divsf3+0x144>
    13dc:	39 89       	ldd	r19, Y+17	; 0x11
    13de:	32 30       	cpi	r19, 0x02	; 2
    13e0:	10 f4       	brcc	.+4      	; 0x13e6 <__divsf3+0x52>
    13e2:	b8 01       	movw	r22, r16
    13e4:	7c c0       	rjmp	.+248    	; 0x14de <__divsf3+0x14a>
    13e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e8:	9a 89       	ldd	r25, Y+18	; 0x12
    13ea:	89 27       	eor	r24, r25
    13ec:	8a 87       	std	Y+10, r24	; 0x0a
    13ee:	24 30       	cpi	r18, 0x04	; 4
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <__divsf3+0x62>
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 f4       	brne	.+12     	; 0x1402 <__divsf3+0x6e>
    13f6:	23 17       	cp	r18, r19
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__divsf3+0x68>
    13fa:	6e c0       	rjmp	.+220    	; 0x14d8 <__divsf3+0x144>
    13fc:	6a e3       	ldi	r22, 0x3A	; 58
    13fe:	71 e0       	ldi	r23, 0x01	; 1
    1400:	6e c0       	rjmp	.+220    	; 0x14de <__divsf3+0x14a>
    1402:	34 30       	cpi	r19, 0x04	; 4
    1404:	39 f4       	brne	.+14     	; 0x1414 <__divsf3+0x80>
    1406:	1d 86       	std	Y+13, r1	; 0x0d
    1408:	1e 86       	std	Y+14, r1	; 0x0e
    140a:	1f 86       	std	Y+15, r1	; 0x0f
    140c:	18 8a       	std	Y+16, r1	; 0x10
    140e:	1c 86       	std	Y+12, r1	; 0x0c
    1410:	1b 86       	std	Y+11, r1	; 0x0b
    1412:	04 c0       	rjmp	.+8      	; 0x141c <__divsf3+0x88>
    1414:	32 30       	cpi	r19, 0x02	; 2
    1416:	21 f4       	brne	.+8      	; 0x1420 <__divsf3+0x8c>
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	89 87       	std	Y+9, r24	; 0x09
    141c:	b7 01       	movw	r22, r14
    141e:	5f c0       	rjmp	.+190    	; 0x14de <__divsf3+0x14a>
    1420:	2b 85       	ldd	r18, Y+11	; 0x0b
    1422:	3c 85       	ldd	r19, Y+12	; 0x0c
    1424:	8b 89       	ldd	r24, Y+19	; 0x13
    1426:	9c 89       	ldd	r25, Y+20	; 0x14
    1428:	28 1b       	sub	r18, r24
    142a:	39 0b       	sbc	r19, r25
    142c:	3c 87       	std	Y+12, r19	; 0x0c
    142e:	2b 87       	std	Y+11, r18	; 0x0b
    1430:	ed 84       	ldd	r14, Y+13	; 0x0d
    1432:	fe 84       	ldd	r15, Y+14	; 0x0e
    1434:	0f 85       	ldd	r16, Y+15	; 0x0f
    1436:	18 89       	ldd	r17, Y+16	; 0x10
    1438:	ad 88       	ldd	r10, Y+21	; 0x15
    143a:	be 88       	ldd	r11, Y+22	; 0x16
    143c:	cf 88       	ldd	r12, Y+23	; 0x17
    143e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1440:	ea 14       	cp	r14, r10
    1442:	fb 04       	cpc	r15, r11
    1444:	0c 05       	cpc	r16, r12
    1446:	1d 05       	cpc	r17, r13
    1448:	40 f4       	brcc	.+16     	; 0x145a <__divsf3+0xc6>
    144a:	ee 0c       	add	r14, r14
    144c:	ff 1c       	adc	r15, r15
    144e:	00 1f       	adc	r16, r16
    1450:	11 1f       	adc	r17, r17
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	30 40       	sbci	r19, 0x00	; 0
    1456:	3c 87       	std	Y+12, r19	; 0x0c
    1458:	2b 87       	std	Y+11, r18	; 0x0b
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	b0 e4       	ldi	r27, 0x40	; 64
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	ea 14       	cp	r14, r10
    1470:	fb 04       	cpc	r15, r11
    1472:	0c 05       	cpc	r16, r12
    1474:	1d 05       	cpc	r17, r13
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0xf4>
    1478:	28 2b       	or	r18, r24
    147a:	39 2b       	or	r19, r25
    147c:	4a 2b       	or	r20, r26
    147e:	5b 2b       	or	r21, r27
    1480:	ea 18       	sub	r14, r10
    1482:	fb 08       	sbc	r15, r11
    1484:	0c 09       	sbc	r16, r12
    1486:	1d 09       	sbc	r17, r13
    1488:	b6 95       	lsr	r27
    148a:	a7 95       	ror	r26
    148c:	97 95       	ror	r25
    148e:	87 95       	ror	r24
    1490:	ee 0c       	add	r14, r14
    1492:	ff 1c       	adc	r15, r15
    1494:	00 1f       	adc	r16, r16
    1496:	11 1f       	adc	r17, r17
    1498:	6f 5f       	subi	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	6f 31       	cpi	r22, 0x1F	; 31
    149e:	71 05       	cpc	r23, r1
    14a0:	31 f7       	brne	.-52     	; 0x146e <__divsf3+0xda>
    14a2:	da 01       	movw	r26, r20
    14a4:	c9 01       	movw	r24, r18
    14a6:	8f 77       	andi	r24, 0x7F	; 127
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	a0 70       	andi	r26, 0x00	; 0
    14ac:	b0 70       	andi	r27, 0x00	; 0
    14ae:	80 34       	cpi	r24, 0x40	; 64
    14b0:	91 05       	cpc	r25, r1
    14b2:	a1 05       	cpc	r26, r1
    14b4:	b1 05       	cpc	r27, r1
    14b6:	61 f4       	brne	.+24     	; 0x14d0 <__divsf3+0x13c>
    14b8:	27 fd       	sbrc	r18, 7
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <__divsf3+0x13c>
    14bc:	e1 14       	cp	r14, r1
    14be:	f1 04       	cpc	r15, r1
    14c0:	01 05       	cpc	r16, r1
    14c2:	11 05       	cpc	r17, r1
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <__divsf3+0x13c>
    14c6:	20 5c       	subi	r18, 0xC0	; 192
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	4f 4f       	sbci	r20, 0xFF	; 255
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	20 78       	andi	r18, 0x80	; 128
    14d0:	2d 87       	std	Y+13, r18	; 0x0d
    14d2:	3e 87       	std	Y+14, r19	; 0x0e
    14d4:	4f 87       	std	Y+15, r20	; 0x0f
    14d6:	58 8b       	std	Y+16, r21	; 0x10
    14d8:	be 01       	movw	r22, r28
    14da:	67 5f       	subi	r22, 0xF7	; 247
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	cb 01       	movw	r24, r22
    14e0:	0e 94 3e 0b 	call	0x167c	; 0x167c <__pack_f>
    14e4:	68 96       	adiw	r28, 0x18	; 24
    14e6:	ea e0       	ldi	r30, 0x0A	; 10
    14e8:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__+0x10>

000014ec <__floatunsisf>:
    14ec:	a8 e0       	ldi	r26, 0x08	; 8
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ec e7       	ldi	r30, 0x7C	; 124
    14f2:	fa e0       	ldi	r31, 0x0A	; 10
    14f4:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__+0x10>
    14f8:	7b 01       	movw	r14, r22
    14fa:	8c 01       	movw	r16, r24
    14fc:	61 15       	cp	r22, r1
    14fe:	71 05       	cpc	r23, r1
    1500:	81 05       	cpc	r24, r1
    1502:	91 05       	cpc	r25, r1
    1504:	19 f4       	brne	.+6      	; 0x150c <__floatunsisf+0x20>
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	60 c0       	rjmp	.+192    	; 0x15cc <__floatunsisf+0xe0>
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	8e e1       	ldi	r24, 0x1E	; 30
    1512:	c8 2e       	mov	r12, r24
    1514:	d1 2c       	mov	r13, r1
    1516:	dc 82       	std	Y+4, r13	; 0x04
    1518:	cb 82       	std	Y+3, r12	; 0x03
    151a:	ed 82       	std	Y+5, r14	; 0x05
    151c:	fe 82       	std	Y+6, r15	; 0x06
    151e:	0f 83       	std	Y+7, r16	; 0x07
    1520:	18 87       	std	Y+8, r17	; 0x08
    1522:	c8 01       	movw	r24, r16
    1524:	b7 01       	movw	r22, r14
    1526:	0e 94 ef 0a 	call	0x15de	; 0x15de <__clzsi2>
    152a:	fc 01       	movw	r30, r24
    152c:	31 97       	sbiw	r30, 0x01	; 1
    152e:	f7 ff       	sbrs	r31, 7
    1530:	3b c0       	rjmp	.+118    	; 0x15a8 <__floatunsisf+0xbc>
    1532:	22 27       	eor	r18, r18
    1534:	33 27       	eor	r19, r19
    1536:	2e 1b       	sub	r18, r30
    1538:	3f 0b       	sbc	r19, r31
    153a:	57 01       	movw	r10, r14
    153c:	68 01       	movw	r12, r16
    153e:	02 2e       	mov	r0, r18
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__floatunsisf+0x5e>
    1542:	d6 94       	lsr	r13
    1544:	c7 94       	ror	r12
    1546:	b7 94       	ror	r11
    1548:	a7 94       	ror	r10
    154a:	0a 94       	dec	r0
    154c:	d2 f7       	brpl	.-12     	; 0x1542 <__floatunsisf+0x56>
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <__floatunsisf+0x7c>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	2a 95       	dec	r18
    156a:	d2 f7       	brpl	.-12     	; 0x1560 <__floatunsisf+0x74>
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	a1 09       	sbc	r26, r1
    1570:	b1 09       	sbc	r27, r1
    1572:	8e 21       	and	r24, r14
    1574:	9f 21       	and	r25, r15
    1576:	a0 23       	and	r26, r16
    1578:	b1 23       	and	r27, r17
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	a1 05       	cpc	r26, r1
    157e:	b1 05       	cpc	r27, r1
    1580:	21 f0       	breq	.+8      	; 0x158a <__floatunsisf+0x9e>
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	4a 29       	or	r20, r10
    158c:	5b 29       	or	r21, r11
    158e:	6c 29       	or	r22, r12
    1590:	7d 29       	or	r23, r13
    1592:	4d 83       	std	Y+5, r20	; 0x05
    1594:	5e 83       	std	Y+6, r21	; 0x06
    1596:	6f 83       	std	Y+7, r22	; 0x07
    1598:	78 87       	std	Y+8, r23	; 0x08
    159a:	8e e1       	ldi	r24, 0x1E	; 30
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	8e 1b       	sub	r24, r30
    15a0:	9f 0b       	sbc	r25, r31
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <__floatunsisf+0xe0>
    15a8:	30 97       	sbiw	r30, 0x00	; 0
    15aa:	81 f0       	breq	.+32     	; 0x15cc <__floatunsisf+0xe0>
    15ac:	0e 2e       	mov	r0, r30
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <__floatunsisf+0xcc>
    15b0:	ee 0c       	add	r14, r14
    15b2:	ff 1c       	adc	r15, r15
    15b4:	00 1f       	adc	r16, r16
    15b6:	11 1f       	adc	r17, r17
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <__floatunsisf+0xc4>
    15bc:	ed 82       	std	Y+5, r14	; 0x05
    15be:	fe 82       	std	Y+6, r15	; 0x06
    15c0:	0f 83       	std	Y+7, r16	; 0x07
    15c2:	18 87       	std	Y+8, r17	; 0x08
    15c4:	ce 1a       	sub	r12, r30
    15c6:	df 0a       	sbc	r13, r31
    15c8:	dc 82       	std	Y+4, r13	; 0x04
    15ca:	cb 82       	std	Y+3, r12	; 0x03
    15cc:	1a 82       	std	Y+2, r1	; 0x02
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	0e 94 3e 0b 	call	0x167c	; 0x167c <__pack_f>
    15d6:	28 96       	adiw	r28, 0x08	; 8
    15d8:	ea e0       	ldi	r30, 0x0A	; 10
    15da:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__+0x10>

000015de <__clzsi2>:
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	7b 01       	movw	r14, r22
    15e8:	8c 01       	movw	r16, r24
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	e8 16       	cp	r14, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	f8 06       	cpc	r15, r24
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	08 07       	cpc	r16, r24
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	18 07       	cpc	r17, r24
    15fa:	88 f4       	brcc	.+34     	; 0x161e <__clzsi2+0x40>
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	e8 16       	cp	r14, r24
    1600:	f1 04       	cpc	r15, r1
    1602:	01 05       	cpc	r16, r1
    1604:	11 05       	cpc	r17, r1
    1606:	31 f0       	breq	.+12     	; 0x1614 <__clzsi2+0x36>
    1608:	28 f0       	brcs	.+10     	; 0x1614 <__clzsi2+0x36>
    160a:	88 e0       	ldi	r24, 0x08	; 8
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	17 c0       	rjmp	.+46     	; 0x1642 <__clzsi2+0x64>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	12 c0       	rjmp	.+36     	; 0x1642 <__clzsi2+0x64>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	e8 16       	cp	r14, r24
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	f8 06       	cpc	r15, r24
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	08 07       	cpc	r16, r24
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	18 07       	cpc	r17, r24
    162e:	28 f0       	brcs	.+10     	; 0x163a <__clzsi2+0x5c>
    1630:	88 e1       	ldi	r24, 0x18	; 24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e0       	ldi	r26, 0x00	; 0
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <__clzsi2+0x64>
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	20 e2       	ldi	r18, 0x20	; 32
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	28 1b       	sub	r18, r24
    164c:	39 0b       	sbc	r19, r25
    164e:	4a 0b       	sbc	r20, r26
    1650:	5b 0b       	sbc	r21, r27
    1652:	04 c0       	rjmp	.+8      	; 0x165c <__clzsi2+0x7e>
    1654:	16 95       	lsr	r17
    1656:	07 95       	ror	r16
    1658:	f7 94       	ror	r15
    165a:	e7 94       	ror	r14
    165c:	8a 95       	dec	r24
    165e:	d2 f7       	brpl	.-12     	; 0x1654 <__clzsi2+0x76>
    1660:	f7 01       	movw	r30, r14
    1662:	ee 5b       	subi	r30, 0xBE	; 190
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	80 81       	ld	r24, Z
    1668:	28 1b       	sub	r18, r24
    166a:	31 09       	sbc	r19, r1
    166c:	41 09       	sbc	r20, r1
    166e:	51 09       	sbc	r21, r1
    1670:	c9 01       	movw	r24, r18
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	08 95       	ret

0000167c <__pack_f>:
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	fc 01       	movw	r30, r24
    1688:	e4 80       	ldd	r14, Z+4	; 0x04
    168a:	f5 80       	ldd	r15, Z+5	; 0x05
    168c:	06 81       	ldd	r16, Z+6	; 0x06
    168e:	17 81       	ldd	r17, Z+7	; 0x07
    1690:	d1 80       	ldd	r13, Z+1	; 0x01
    1692:	80 81       	ld	r24, Z
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	48 f4       	brcc	.+18     	; 0x16aa <__pack_f+0x2e>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e1       	ldi	r26, 0x10	; 16
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e8 2a       	or	r14, r24
    16a2:	f9 2a       	or	r15, r25
    16a4:	0a 2b       	or	r16, r26
    16a6:	1b 2b       	or	r17, r27
    16a8:	a5 c0       	rjmp	.+330    	; 0x17f4 <__pack_f+0x178>
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__pack_f+0x34>
    16ae:	9f c0       	rjmp	.+318    	; 0x17ee <__pack_f+0x172>
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	21 f4       	brne	.+8      	; 0x16bc <__pack_f+0x40>
    16b4:	ee 24       	eor	r14, r14
    16b6:	ff 24       	eor	r15, r15
    16b8:	87 01       	movw	r16, r14
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <__pack_f+0x4a>
    16bc:	e1 14       	cp	r14, r1
    16be:	f1 04       	cpc	r15, r1
    16c0:	01 05       	cpc	r16, r1
    16c2:	11 05       	cpc	r17, r1
    16c4:	19 f4       	brne	.+6      	; 0x16cc <__pack_f+0x50>
    16c6:	e0 e0       	ldi	r30, 0x00	; 0
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	96 c0       	rjmp	.+300    	; 0x17f8 <__pack_f+0x17c>
    16cc:	62 81       	ldd	r22, Z+2	; 0x02
    16ce:	73 81       	ldd	r23, Z+3	; 0x03
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	62 38       	cpi	r22, 0x82	; 130
    16d4:	79 07       	cpc	r23, r25
    16d6:	0c f0       	brlt	.+2      	; 0x16da <__pack_f+0x5e>
    16d8:	5b c0       	rjmp	.+182    	; 0x1790 <__pack_f+0x114>
    16da:	22 e8       	ldi	r18, 0x82	; 130
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	26 1b       	sub	r18, r22
    16e0:	37 0b       	sbc	r19, r23
    16e2:	2a 31       	cpi	r18, 0x1A	; 26
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f0       	brlt	.+10     	; 0x16f2 <__pack_f+0x76>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	2a c0       	rjmp	.+84     	; 0x1746 <__pack_f+0xca>
    16f2:	b8 01       	movw	r22, r16
    16f4:	a7 01       	movw	r20, r14
    16f6:	02 2e       	mov	r0, r18
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__pack_f+0x86>
    16fa:	76 95       	lsr	r23
    16fc:	67 95       	ror	r22
    16fe:	57 95       	ror	r21
    1700:	47 95       	ror	r20
    1702:	0a 94       	dec	r0
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__pack_f+0x7e>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a0 e0       	ldi	r26, 0x00	; 0
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <__pack_f+0x9c>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	aa 1f       	adc	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	2a 95       	dec	r18
    171a:	d2 f7       	brpl	.-12     	; 0x1710 <__pack_f+0x94>
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	a1 09       	sbc	r26, r1
    1720:	b1 09       	sbc	r27, r1
    1722:	8e 21       	and	r24, r14
    1724:	9f 21       	and	r25, r15
    1726:	a0 23       	and	r26, r16
    1728:	b1 23       	and	r27, r17
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	a1 05       	cpc	r26, r1
    172e:	b1 05       	cpc	r27, r1
    1730:	21 f0       	breq	.+8      	; 0x173a <__pack_f+0xbe>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	9a 01       	movw	r18, r20
    173c:	ab 01       	movw	r20, r22
    173e:	28 2b       	or	r18, r24
    1740:	39 2b       	or	r19, r25
    1742:	4a 2b       	or	r20, r26
    1744:	5b 2b       	or	r21, r27
    1746:	da 01       	movw	r26, r20
    1748:	c9 01       	movw	r24, r18
    174a:	8f 77       	andi	r24, 0x7F	; 127
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	a0 70       	andi	r26, 0x00	; 0
    1750:	b0 70       	andi	r27, 0x00	; 0
    1752:	80 34       	cpi	r24, 0x40	; 64
    1754:	91 05       	cpc	r25, r1
    1756:	a1 05       	cpc	r26, r1
    1758:	b1 05       	cpc	r27, r1
    175a:	39 f4       	brne	.+14     	; 0x176a <__pack_f+0xee>
    175c:	27 ff       	sbrs	r18, 7
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <__pack_f+0xf6>
    1760:	20 5c       	subi	r18, 0xC0	; 192
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	4f 4f       	sbci	r20, 0xFF	; 255
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__pack_f+0xf6>
    176a:	21 5c       	subi	r18, 0xC1	; 193
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	4f 4f       	sbci	r20, 0xFF	; 255
    1770:	5f 4f       	sbci	r21, 0xFF	; 255
    1772:	e0 e0       	ldi	r30, 0x00	; 0
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	20 30       	cpi	r18, 0x00	; 0
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	3a 07       	cpc	r19, r26
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	4a 07       	cpc	r20, r26
    1780:	a0 e4       	ldi	r26, 0x40	; 64
    1782:	5a 07       	cpc	r21, r26
    1784:	10 f0       	brcs	.+4      	; 0x178a <__pack_f+0x10e>
    1786:	e1 e0       	ldi	r30, 0x01	; 1
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	79 01       	movw	r14, r18
    178c:	8a 01       	movw	r16, r20
    178e:	27 c0       	rjmp	.+78     	; 0x17de <__pack_f+0x162>
    1790:	60 38       	cpi	r22, 0x80	; 128
    1792:	71 05       	cpc	r23, r1
    1794:	64 f5       	brge	.+88     	; 0x17ee <__pack_f+0x172>
    1796:	fb 01       	movw	r30, r22
    1798:	e1 58       	subi	r30, 0x81	; 129
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	d8 01       	movw	r26, r16
    179e:	c7 01       	movw	r24, r14
    17a0:	8f 77       	andi	r24, 0x7F	; 127
    17a2:	90 70       	andi	r25, 0x00	; 0
    17a4:	a0 70       	andi	r26, 0x00	; 0
    17a6:	b0 70       	andi	r27, 0x00	; 0
    17a8:	80 34       	cpi	r24, 0x40	; 64
    17aa:	91 05       	cpc	r25, r1
    17ac:	a1 05       	cpc	r26, r1
    17ae:	b1 05       	cpc	r27, r1
    17b0:	39 f4       	brne	.+14     	; 0x17c0 <__pack_f+0x144>
    17b2:	e7 fe       	sbrs	r14, 7
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <__pack_f+0x154>
    17b6:	80 e4       	ldi	r24, 0x40	; 64
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <__pack_f+0x14c>
    17c0:	8f e3       	ldi	r24, 0x3F	; 63
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 0e       	add	r14, r24
    17ca:	f9 1e       	adc	r15, r25
    17cc:	0a 1f       	adc	r16, r26
    17ce:	1b 1f       	adc	r17, r27
    17d0:	17 ff       	sbrs	r17, 7
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <__pack_f+0x162>
    17d4:	16 95       	lsr	r17
    17d6:	07 95       	ror	r16
    17d8:	f7 94       	ror	r15
    17da:	e7 94       	ror	r14
    17dc:	31 96       	adiw	r30, 0x01	; 1
    17de:	87 e0       	ldi	r24, 0x07	; 7
    17e0:	16 95       	lsr	r17
    17e2:	07 95       	ror	r16
    17e4:	f7 94       	ror	r15
    17e6:	e7 94       	ror	r14
    17e8:	8a 95       	dec	r24
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__pack_f+0x164>
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <__pack_f+0x17c>
    17ee:	ee 24       	eor	r14, r14
    17f0:	ff 24       	eor	r15, r15
    17f2:	87 01       	movw	r16, r14
    17f4:	ef ef       	ldi	r30, 0xFF	; 255
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	6e 2f       	mov	r22, r30
    17fa:	67 95       	ror	r22
    17fc:	66 27       	eor	r22, r22
    17fe:	67 95       	ror	r22
    1800:	90 2f       	mov	r25, r16
    1802:	9f 77       	andi	r25, 0x7F	; 127
    1804:	d7 94       	ror	r13
    1806:	dd 24       	eor	r13, r13
    1808:	d7 94       	ror	r13
    180a:	8e 2f       	mov	r24, r30
    180c:	86 95       	lsr	r24
    180e:	49 2f       	mov	r20, r25
    1810:	46 2b       	or	r20, r22
    1812:	58 2f       	mov	r21, r24
    1814:	5d 29       	or	r21, r13
    1816:	b7 01       	movw	r22, r14
    1818:	ca 01       	movw	r24, r20
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	08 95       	ret

00001826 <__unpack_f>:
    1826:	fc 01       	movw	r30, r24
    1828:	db 01       	movw	r26, r22
    182a:	40 81       	ld	r20, Z
    182c:	51 81       	ldd	r21, Z+1	; 0x01
    182e:	22 81       	ldd	r18, Z+2	; 0x02
    1830:	62 2f       	mov	r22, r18
    1832:	6f 77       	andi	r22, 0x7F	; 127
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	22 1f       	adc	r18, r18
    1838:	22 27       	eor	r18, r18
    183a:	22 1f       	adc	r18, r18
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	89 2f       	mov	r24, r25
    1840:	88 0f       	add	r24, r24
    1842:	82 2b       	or	r24, r18
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	99 1f       	adc	r25, r25
    184a:	99 27       	eor	r25, r25
    184c:	99 1f       	adc	r25, r25
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	9c 93       	st	X, r25
    1852:	11 97       	sbiw	r26, 0x01	; 1
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	a9 f5       	brne	.+106    	; 0x18c4 <__unpack_f+0x9e>
    185a:	41 15       	cp	r20, r1
    185c:	51 05       	cpc	r21, r1
    185e:	61 05       	cpc	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	11 f4       	brne	.+4      	; 0x1868 <__unpack_f+0x42>
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	37 c0       	rjmp	.+110    	; 0x18d6 <__unpack_f+0xb0>
    1868:	82 e8       	ldi	r24, 0x82	; 130
    186a:	9f ef       	ldi	r25, 0xFF	; 255
    186c:	13 96       	adiw	r26, 0x03	; 3
    186e:	9c 93       	st	X, r25
    1870:	8e 93       	st	-X, r24
    1872:	12 97       	sbiw	r26, 0x02	; 2
    1874:	9a 01       	movw	r18, r20
    1876:	ab 01       	movw	r20, r22
    1878:	67 e0       	ldi	r22, 0x07	; 7
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	44 1f       	adc	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	6a 95       	dec	r22
    1884:	d1 f7       	brne	.-12     	; 0x187a <__unpack_f+0x54>
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	8c 93       	st	X, r24
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <__unpack_f+0x80>
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	44 1f       	adc	r20, r20
    1892:	55 1f       	adc	r21, r21
    1894:	12 96       	adiw	r26, 0x02	; 2
    1896:	8d 91       	ld	r24, X+
    1898:	9c 91       	ld	r25, X
    189a:	13 97       	sbiw	r26, 0x03	; 3
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	13 96       	adiw	r26, 0x03	; 3
    18a0:	9c 93       	st	X, r25
    18a2:	8e 93       	st	-X, r24
    18a4:	12 97       	sbiw	r26, 0x02	; 2
    18a6:	20 30       	cpi	r18, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	38 07       	cpc	r19, r24
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	48 07       	cpc	r20, r24
    18b0:	80 e4       	ldi	r24, 0x40	; 64
    18b2:	58 07       	cpc	r21, r24
    18b4:	58 f3       	brcs	.-42     	; 0x188c <__unpack_f+0x66>
    18b6:	14 96       	adiw	r26, 0x04	; 4
    18b8:	2d 93       	st	X+, r18
    18ba:	3d 93       	st	X+, r19
    18bc:	4d 93       	st	X+, r20
    18be:	5c 93       	st	X, r21
    18c0:	17 97       	sbiw	r26, 0x07	; 7
    18c2:	08 95       	ret
    18c4:	2f 3f       	cpi	r18, 0xFF	; 255
    18c6:	31 05       	cpc	r19, r1
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <__unpack_f+0xc2>
    18ca:	41 15       	cp	r20, r1
    18cc:	51 05       	cpc	r21, r1
    18ce:	61 05       	cpc	r22, r1
    18d0:	71 05       	cpc	r23, r1
    18d2:	19 f4       	brne	.+6      	; 0x18da <__unpack_f+0xb4>
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	8c 93       	st	X, r24
    18d8:	08 95       	ret
    18da:	64 ff       	sbrs	r22, 4
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <__unpack_f+0xbe>
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	8c 93       	st	X, r24
    18e2:	12 c0       	rjmp	.+36     	; 0x1908 <__unpack_f+0xe2>
    18e4:	1c 92       	st	X, r1
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <__unpack_f+0xe2>
    18e8:	2f 57       	subi	r18, 0x7F	; 127
    18ea:	30 40       	sbci	r19, 0x00	; 0
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	3c 93       	st	X, r19
    18f0:	2e 93       	st	-X, r18
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	8c 93       	st	X, r24
    18f8:	87 e0       	ldi	r24, 0x07	; 7
    18fa:	44 0f       	add	r20, r20
    18fc:	55 1f       	adc	r21, r21
    18fe:	66 1f       	adc	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	8a 95       	dec	r24
    1904:	d1 f7       	brne	.-12     	; 0x18fa <__unpack_f+0xd4>
    1906:	70 64       	ori	r23, 0x40	; 64
    1908:	14 96       	adiw	r26, 0x04	; 4
    190a:	4d 93       	st	X+, r20
    190c:	5d 93       	st	X+, r21
    190e:	6d 93       	st	X+, r22
    1910:	7c 93       	st	X, r23
    1912:	17 97       	sbiw	r26, 0x07	; 7
    1914:	08 95       	ret

00001916 <__udivmodqi4>:
    1916:	99 1b       	sub	r25, r25
    1918:	79 e0       	ldi	r23, 0x09	; 9
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__udivmodqi4_ep>

0000191c <__udivmodqi4_loop>:
    191c:	99 1f       	adc	r25, r25
    191e:	96 17       	cp	r25, r22
    1920:	08 f0       	brcs	.+2      	; 0x1924 <__udivmodqi4_ep>
    1922:	96 1b       	sub	r25, r22

00001924 <__udivmodqi4_ep>:
    1924:	88 1f       	adc	r24, r24
    1926:	7a 95       	dec	r23
    1928:	c9 f7       	brne	.-14     	; 0x191c <__udivmodqi4_loop>
    192a:	80 95       	com	r24
    192c:	08 95       	ret

0000192e <__udivmodhi4>:
    192e:	aa 1b       	sub	r26, r26
    1930:	bb 1b       	sub	r27, r27
    1932:	51 e1       	ldi	r21, 0x11	; 17
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <__udivmodhi4_ep>

00001936 <__udivmodhi4_loop>:
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	a6 17       	cp	r26, r22
    193c:	b7 07       	cpc	r27, r23
    193e:	10 f0       	brcs	.+4      	; 0x1944 <__udivmodhi4_ep>
    1940:	a6 1b       	sub	r26, r22
    1942:	b7 0b       	sbc	r27, r23

00001944 <__udivmodhi4_ep>:
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	5a 95       	dec	r21
    194a:	a9 f7       	brne	.-22     	; 0x1936 <__udivmodhi4_loop>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	08 95       	ret

00001956 <__divmodhi4>:
    1956:	97 fb       	bst	r25, 7
    1958:	09 2e       	mov	r0, r25
    195a:	07 26       	eor	r0, r23
    195c:	0a d0       	rcall	.+20     	; 0x1972 <__divmodhi4_neg1>
    195e:	77 fd       	sbrc	r23, 7
    1960:	04 d0       	rcall	.+8      	; 0x196a <__divmodhi4_neg2>
    1962:	e5 df       	rcall	.-54     	; 0x192e <__udivmodhi4>
    1964:	06 d0       	rcall	.+12     	; 0x1972 <__divmodhi4_neg1>
    1966:	00 20       	and	r0, r0
    1968:	1a f4       	brpl	.+6      	; 0x1970 <__divmodhi4_exit>

0000196a <__divmodhi4_neg2>:
    196a:	70 95       	com	r23
    196c:	61 95       	neg	r22
    196e:	7f 4f       	sbci	r23, 0xFF	; 255

00001970 <__divmodhi4_exit>:
    1970:	08 95       	ret

00001972 <__divmodhi4_neg1>:
    1972:	f6 f7       	brtc	.-4      	; 0x1970 <__divmodhi4_exit>
    1974:	90 95       	com	r25
    1976:	81 95       	neg	r24
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	08 95       	ret

0000197c <__prologue_saves__>:
    197c:	2f 92       	push	r2
    197e:	3f 92       	push	r3
    1980:	4f 92       	push	r4
    1982:	5f 92       	push	r5
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	ca 1b       	sub	r28, r26
    19a6:	db 0b       	sbc	r29, r27
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	09 94       	ijmp

000019b4 <__epilogue_restores__>:
    19b4:	2a 88       	ldd	r2, Y+18	; 0x12
    19b6:	39 88       	ldd	r3, Y+17	; 0x11
    19b8:	48 88       	ldd	r4, Y+16	; 0x10
    19ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    19bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19be:	7d 84       	ldd	r7, Y+13	; 0x0d
    19c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c6:	b9 84       	ldd	r11, Y+9	; 0x09
    19c8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ca:	df 80       	ldd	r13, Y+7	; 0x07
    19cc:	ee 80       	ldd	r14, Y+6	; 0x06
    19ce:	fd 80       	ldd	r15, Y+5	; 0x05
    19d0:	0c 81       	ldd	r16, Y+4	; 0x04
    19d2:	1b 81       	ldd	r17, Y+3	; 0x03
    19d4:	aa 81       	ldd	r26, Y+2	; 0x02
    19d6:	b9 81       	ldd	r27, Y+1	; 0x01
    19d8:	ce 0f       	add	r28, r30
    19da:	d1 1d       	adc	r29, r1
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	ed 01       	movw	r28, r26
    19e8:	08 95       	ret

000019ea <dtostrf>:
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	f2 2f       	mov	r31, r18
    19f4:	f0 2e       	mov	r15, r16
    19f6:	47 fd       	sbrc	r20, 7
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <dtostrf+0x14>
    19fa:	e4 e0       	ldi	r30, 0x04	; 4
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <dtostrf+0x16>
    19fe:	e4 e1       	ldi	r30, 0x14	; 20
    1a00:	24 2f       	mov	r18, r20
    1a02:	33 27       	eor	r19, r19
    1a04:	27 fd       	sbrc	r18, 7
    1a06:	30 95       	com	r19
    1a08:	37 ff       	sbrs	r19, 7
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <dtostrf+0x28>
    1a0c:	30 95       	com	r19
    1a0e:	21 95       	neg	r18
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	4f 2d       	mov	r20, r15
    1a14:	51 2f       	mov	r21, r17
    1a16:	0f 2f       	mov	r16, r31
    1a18:	ee 2e       	mov	r14, r30
    1a1a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <dtoa_prf>
    1a1e:	8f 2d       	mov	r24, r15
    1a20:	91 2f       	mov	r25, r17
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	08 95       	ret

00001a2c <fputs>:
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	7c 01       	movw	r14, r24
    1a3a:	8b 01       	movw	r16, r22
    1a3c:	db 01       	movw	r26, r22
    1a3e:	13 96       	adiw	r26, 0x03	; 3
    1a40:	8c 91       	ld	r24, X
    1a42:	81 fd       	sbrc	r24, 1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <fputs+0x20>
    1a46:	cf ef       	ldi	r28, 0xFF	; 255
    1a48:	df ef       	ldi	r29, 0xFF	; 255
    1a4a:	13 c0       	rjmp	.+38     	; 0x1a72 <fputs+0x46>
    1a4c:	c0 e0       	ldi	r28, 0x00	; 0
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
    1a50:	0b c0       	rjmp	.+22     	; 0x1a68 <fputs+0x3c>
    1a52:	d8 01       	movw	r26, r16
    1a54:	18 96       	adiw	r26, 0x08	; 8
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	19 97       	sbiw	r26, 0x09	; 9
    1a5c:	b8 01       	movw	r22, r16
    1a5e:	09 95       	icall
    1a60:	89 2b       	or	r24, r25
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <fputs+0x3c>
    1a64:	cf ef       	ldi	r28, 0xFF	; 255
    1a66:	df ef       	ldi	r29, 0xFF	; 255
    1a68:	f7 01       	movw	r30, r14
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	7f 01       	movw	r14, r30
    1a6e:	88 23       	and	r24, r24
    1a70:	81 f7       	brne	.-32     	; 0x1a52 <fputs+0x26>
    1a72:	ce 01       	movw	r24, r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	e6 e0       	ldi	r30, 0x06	; 6
    1a7a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

00001a7e <sprintf>:
    1a7e:	ae e0       	ldi	r26, 0x0E	; 14
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e4       	ldi	r30, 0x45	; 69
    1a84:	fd e0       	ldi	r31, 0x0D	; 13
    1a86:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__prologue_saves__+0x1c>
    1a8a:	0d 89       	ldd	r16, Y+21	; 0x15
    1a8c:	1e 89       	ldd	r17, Y+22	; 0x16
    1a8e:	86 e0       	ldi	r24, 0x06	; 6
    1a90:	8c 83       	std	Y+4, r24	; 0x04
    1a92:	1a 83       	std	Y+2, r17	; 0x02
    1a94:	09 83       	std	Y+1, r16	; 0x01
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	9f e7       	ldi	r25, 0x7F	; 127
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	9e 01       	movw	r18, r28
    1aa0:	27 5e       	subi	r18, 0xE7	; 231
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	6f 89       	ldd	r22, Y+23	; 0x17
    1aaa:	78 8d       	ldd	r23, Y+24	; 0x18
    1aac:	a9 01       	movw	r20, r18
    1aae:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <vfprintf>
    1ab2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab4:	38 85       	ldd	r19, Y+8	; 0x08
    1ab6:	02 0f       	add	r16, r18
    1ab8:	13 1f       	adc	r17, r19
    1aba:	f8 01       	movw	r30, r16
    1abc:	10 82       	st	Z, r1
    1abe:	2e 96       	adiw	r28, 0x0e	; 14
    1ac0:	e4 e0       	ldi	r30, 0x04	; 4
    1ac2:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__epilogue_restores__+0x1c>

00001ac6 <vfprintf>:
    1ac6:	ab e0       	ldi	r26, 0x0B	; 11
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 e6       	ldi	r30, 0x69	; 105
    1acc:	fd e0       	ldi	r31, 0x0D	; 13
    1ace:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
    1ad2:	3c 01       	movw	r6, r24
    1ad4:	2b 01       	movw	r4, r22
    1ad6:	5a 01       	movw	r10, r20
    1ad8:	fc 01       	movw	r30, r24
    1ada:	17 82       	std	Z+7, r1	; 0x07
    1adc:	16 82       	std	Z+6, r1	; 0x06
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	81 fd       	sbrc	r24, 1
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <vfprintf+0x24>
    1ae4:	6f ef       	ldi	r22, 0xFF	; 255
    1ae6:	7f ef       	ldi	r23, 0xFF	; 255
    1ae8:	c6 c1       	rjmp	.+908    	; 0x1e76 <vfprintf+0x3b0>
    1aea:	9a e0       	ldi	r25, 0x0A	; 10
    1aec:	89 2e       	mov	r8, r25
    1aee:	1e 01       	movw	r2, r28
    1af0:	08 94       	sec
    1af2:	21 1c       	adc	r2, r1
    1af4:	31 1c       	adc	r3, r1
    1af6:	f3 01       	movw	r30, r6
    1af8:	23 81       	ldd	r18, Z+3	; 0x03
    1afa:	f2 01       	movw	r30, r4
    1afc:	23 fd       	sbrc	r18, 3
    1afe:	85 91       	lpm	r24, Z+
    1b00:	23 ff       	sbrs	r18, 3
    1b02:	81 91       	ld	r24, Z+
    1b04:	2f 01       	movw	r4, r30
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <vfprintf+0x46>
    1b0a:	b2 c1       	rjmp	.+868    	; 0x1e70 <vfprintf+0x3aa>
    1b0c:	85 32       	cpi	r24, 0x25	; 37
    1b0e:	39 f4       	brne	.+14     	; 0x1b1e <vfprintf+0x58>
    1b10:	23 fd       	sbrc	r18, 3
    1b12:	85 91       	lpm	r24, Z+
    1b14:	23 ff       	sbrs	r18, 3
    1b16:	81 91       	ld	r24, Z+
    1b18:	2f 01       	movw	r4, r30
    1b1a:	85 32       	cpi	r24, 0x25	; 37
    1b1c:	29 f4       	brne	.+10     	; 0x1b28 <vfprintf+0x62>
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b3 01       	movw	r22, r6
    1b22:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1b26:	e7 cf       	rjmp	.-50     	; 0x1af6 <vfprintf+0x30>
    1b28:	98 2f       	mov	r25, r24
    1b2a:	ff 24       	eor	r15, r15
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	99 24       	eor	r9, r9
    1b30:	ff e1       	ldi	r31, 0x1F	; 31
    1b32:	ff 15       	cp	r31, r15
    1b34:	d0 f0       	brcs	.+52     	; 0x1b6a <vfprintf+0xa4>
    1b36:	9b 32       	cpi	r25, 0x2B	; 43
    1b38:	69 f0       	breq	.+26     	; 0x1b54 <vfprintf+0x8e>
    1b3a:	9c 32       	cpi	r25, 0x2C	; 44
    1b3c:	28 f4       	brcc	.+10     	; 0x1b48 <vfprintf+0x82>
    1b3e:	90 32       	cpi	r25, 0x20	; 32
    1b40:	59 f0       	breq	.+22     	; 0x1b58 <vfprintf+0x92>
    1b42:	93 32       	cpi	r25, 0x23	; 35
    1b44:	91 f4       	brne	.+36     	; 0x1b6a <vfprintf+0xa4>
    1b46:	0e c0       	rjmp	.+28     	; 0x1b64 <vfprintf+0x9e>
    1b48:	9d 32       	cpi	r25, 0x2D	; 45
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <vfprintf+0x98>
    1b4c:	90 33       	cpi	r25, 0x30	; 48
    1b4e:	69 f4       	brne	.+26     	; 0x1b6a <vfprintf+0xa4>
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	24 c0       	rjmp	.+72     	; 0x1b9c <vfprintf+0xd6>
    1b54:	52 e0       	ldi	r21, 0x02	; 2
    1b56:	f5 2a       	or	r15, r21
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	f8 2a       	or	r15, r24
    1b5c:	28 c0       	rjmp	.+80     	; 0x1bae <vfprintf+0xe8>
    1b5e:	98 e0       	ldi	r25, 0x08	; 8
    1b60:	f9 2a       	or	r15, r25
    1b62:	25 c0       	rjmp	.+74     	; 0x1bae <vfprintf+0xe8>
    1b64:	e0 e1       	ldi	r30, 0x10	; 16
    1b66:	fe 2a       	or	r15, r30
    1b68:	22 c0       	rjmp	.+68     	; 0x1bae <vfprintf+0xe8>
    1b6a:	f7 fc       	sbrc	r15, 7
    1b6c:	29 c0       	rjmp	.+82     	; 0x1bc0 <vfprintf+0xfa>
    1b6e:	89 2f       	mov	r24, r25
    1b70:	80 53       	subi	r24, 0x30	; 48
    1b72:	8a 30       	cpi	r24, 0x0A	; 10
    1b74:	70 f4       	brcc	.+28     	; 0x1b92 <vfprintf+0xcc>
    1b76:	f6 fe       	sbrs	r15, 6
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <vfprintf+0xbe>
    1b7a:	98 9c       	mul	r9, r8
    1b7c:	90 2c       	mov	r9, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	98 0e       	add	r9, r24
    1b82:	15 c0       	rjmp	.+42     	; 0x1bae <vfprintf+0xe8>
    1b84:	e8 9c       	mul	r14, r8
    1b86:	e0 2c       	mov	r14, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	e8 0e       	add	r14, r24
    1b8c:	f0 e2       	ldi	r31, 0x20	; 32
    1b8e:	ff 2a       	or	r15, r31
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <vfprintf+0xe8>
    1b92:	9e 32       	cpi	r25, 0x2E	; 46
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <vfprintf+0xda>
    1b96:	f6 fc       	sbrc	r15, 6
    1b98:	6b c1       	rjmp	.+726    	; 0x1e70 <vfprintf+0x3aa>
    1b9a:	40 e4       	ldi	r20, 0x40	; 64
    1b9c:	f4 2a       	or	r15, r20
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <vfprintf+0xe8>
    1ba0:	9c 36       	cpi	r25, 0x6C	; 108
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <vfprintf+0xe4>
    1ba4:	50 e8       	ldi	r21, 0x80	; 128
    1ba6:	f5 2a       	or	r15, r21
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0xe8>
    1baa:	98 36       	cpi	r25, 0x68	; 104
    1bac:	49 f4       	brne	.+18     	; 0x1bc0 <vfprintf+0xfa>
    1bae:	f2 01       	movw	r30, r4
    1bb0:	23 fd       	sbrc	r18, 3
    1bb2:	95 91       	lpm	r25, Z+
    1bb4:	23 ff       	sbrs	r18, 3
    1bb6:	91 91       	ld	r25, Z+
    1bb8:	2f 01       	movw	r4, r30
    1bba:	99 23       	and	r25, r25
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <vfprintf+0xfa>
    1bbe:	b8 cf       	rjmp	.-144    	; 0x1b30 <vfprintf+0x6a>
    1bc0:	89 2f       	mov	r24, r25
    1bc2:	85 54       	subi	r24, 0x45	; 69
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	18 f0       	brcs	.+6      	; 0x1bce <vfprintf+0x108>
    1bc8:	80 52       	subi	r24, 0x20	; 32
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	38 f4       	brcc	.+14     	; 0x1bdc <vfprintf+0x116>
    1bce:	44 e0       	ldi	r20, 0x04	; 4
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	a4 0e       	add	r10, r20
    1bd4:	b5 1e       	adc	r11, r21
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	59 83       	std	Y+1, r21	; 0x01
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <vfprintf+0x134>
    1bdc:	93 36       	cpi	r25, 0x63	; 99
    1bde:	31 f0       	breq	.+12     	; 0x1bec <vfprintf+0x126>
    1be0:	93 37       	cpi	r25, 0x73	; 115
    1be2:	79 f0       	breq	.+30     	; 0x1c02 <vfprintf+0x13c>
    1be4:	93 35       	cpi	r25, 0x53	; 83
    1be6:	09 f0       	breq	.+2      	; 0x1bea <vfprintf+0x124>
    1be8:	56 c0       	rjmp	.+172    	; 0x1c96 <vfprintf+0x1d0>
    1bea:	20 c0       	rjmp	.+64     	; 0x1c2c <vfprintf+0x166>
    1bec:	f5 01       	movw	r30, r10
    1bee:	80 81       	ld	r24, Z
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	42 e0       	ldi	r20, 0x02	; 2
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	a4 0e       	add	r10, r20
    1bf8:	b5 1e       	adc	r11, r21
    1bfa:	61 01       	movw	r12, r2
    1bfc:	01 e0       	ldi	r16, 0x01	; 1
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <vfprintf+0x160>
    1c02:	f5 01       	movw	r30, r10
    1c04:	c0 80       	ld	r12, Z
    1c06:	d1 80       	ldd	r13, Z+1	; 0x01
    1c08:	f6 fc       	sbrc	r15, 6
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <vfprintf+0x14c>
    1c0c:	6f ef       	ldi	r22, 0xFF	; 255
    1c0e:	7f ef       	ldi	r23, 0xFF	; 255
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x150>
    1c12:	69 2d       	mov	r22, r9
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	42 e0       	ldi	r20, 0x02	; 2
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	a4 0e       	add	r10, r20
    1c1c:	b5 1e       	adc	r11, r21
    1c1e:	c6 01       	movw	r24, r12
    1c20:	0e 94 85 11 	call	0x230a	; 0x230a <strnlen>
    1c24:	8c 01       	movw	r16, r24
    1c26:	5f e7       	ldi	r21, 0x7F	; 127
    1c28:	f5 22       	and	r15, r21
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <vfprintf+0x18e>
    1c2c:	f5 01       	movw	r30, r10
    1c2e:	c0 80       	ld	r12, Z
    1c30:	d1 80       	ldd	r13, Z+1	; 0x01
    1c32:	f6 fc       	sbrc	r15, 6
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <vfprintf+0x176>
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <vfprintf+0x17a>
    1c3c:	69 2d       	mov	r22, r9
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	42 e0       	ldi	r20, 0x02	; 2
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	a4 0e       	add	r10, r20
    1c46:	b5 1e       	adc	r11, r21
    1c48:	c6 01       	movw	r24, r12
    1c4a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <strnlen_P>
    1c4e:	8c 01       	movw	r16, r24
    1c50:	50 e8       	ldi	r21, 0x80	; 128
    1c52:	f5 2a       	or	r15, r21
    1c54:	f3 fe       	sbrs	r15, 3
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <vfprintf+0x1a0>
    1c58:	1a c0       	rjmp	.+52     	; 0x1c8e <vfprintf+0x1c8>
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b3 01       	movw	r22, r6
    1c60:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1c64:	ea 94       	dec	r14
    1c66:	8e 2d       	mov	r24, r14
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	08 17       	cp	r16, r24
    1c6c:	19 07       	cpc	r17, r25
    1c6e:	a8 f3       	brcs	.-22     	; 0x1c5a <vfprintf+0x194>
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <vfprintf+0x1c8>
    1c72:	f6 01       	movw	r30, r12
    1c74:	f7 fc       	sbrc	r15, 7
    1c76:	85 91       	lpm	r24, Z+
    1c78:	f7 fe       	sbrs	r15, 7
    1c7a:	81 91       	ld	r24, Z+
    1c7c:	6f 01       	movw	r12, r30
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	b3 01       	movw	r22, r6
    1c82:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1c86:	e1 10       	cpse	r14, r1
    1c88:	ea 94       	dec	r14
    1c8a:	01 50       	subi	r16, 0x01	; 1
    1c8c:	10 40       	sbci	r17, 0x00	; 0
    1c8e:	01 15       	cp	r16, r1
    1c90:	11 05       	cpc	r17, r1
    1c92:	79 f7       	brne	.-34     	; 0x1c72 <vfprintf+0x1ac>
    1c94:	ea c0       	rjmp	.+468    	; 0x1e6a <vfprintf+0x3a4>
    1c96:	94 36       	cpi	r25, 0x64	; 100
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <vfprintf+0x1d8>
    1c9a:	99 36       	cpi	r25, 0x69	; 105
    1c9c:	69 f5       	brne	.+90     	; 0x1cf8 <vfprintf+0x232>
    1c9e:	f7 fe       	sbrs	r15, 7
    1ca0:	08 c0       	rjmp	.+16     	; 0x1cb2 <vfprintf+0x1ec>
    1ca2:	f5 01       	movw	r30, r10
    1ca4:	20 81       	ld	r18, Z
    1ca6:	31 81       	ldd	r19, Z+1	; 0x01
    1ca8:	42 81       	ldd	r20, Z+2	; 0x02
    1caa:	53 81       	ldd	r21, Z+3	; 0x03
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <vfprintf+0x200>
    1cb2:	f5 01       	movw	r30, r10
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	9c 01       	movw	r18, r24
    1cba:	44 27       	eor	r20, r20
    1cbc:	37 fd       	sbrc	r19, 7
    1cbe:	40 95       	com	r20
    1cc0:	54 2f       	mov	r21, r20
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a8 0e       	add	r10, r24
    1cc8:	b9 1e       	adc	r11, r25
    1cca:	9f e6       	ldi	r25, 0x6F	; 111
    1ccc:	f9 22       	and	r15, r25
    1cce:	57 ff       	sbrs	r21, 7
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <vfprintf+0x21e>
    1cd2:	50 95       	com	r21
    1cd4:	40 95       	com	r20
    1cd6:	30 95       	com	r19
    1cd8:	21 95       	neg	r18
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	fe 2a       	or	r15, r30
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	b9 01       	movw	r22, r18
    1ce8:	a1 01       	movw	r20, r2
    1cea:	2a e0       	ldi	r18, 0x0A	; 10
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	0e 94 bc 11 	call	0x2378	; 0x2378 <__ultoa_invert>
    1cf2:	d8 2e       	mov	r13, r24
    1cf4:	d2 18       	sub	r13, r2
    1cf6:	40 c0       	rjmp	.+128    	; 0x1d78 <vfprintf+0x2b2>
    1cf8:	95 37       	cpi	r25, 0x75	; 117
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <vfprintf+0x240>
    1cfc:	1f 2d       	mov	r17, r15
    1cfe:	1f 7e       	andi	r17, 0xEF	; 239
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	1d c0       	rjmp	.+58     	; 0x1d40 <vfprintf+0x27a>
    1d06:	1f 2d       	mov	r17, r15
    1d08:	19 7f       	andi	r17, 0xF9	; 249
    1d0a:	9f 36       	cpi	r25, 0x6F	; 111
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <vfprintf+0x260>
    1d0e:	90 37       	cpi	r25, 0x70	; 112
    1d10:	20 f4       	brcc	.+8      	; 0x1d1a <vfprintf+0x254>
    1d12:	98 35       	cpi	r25, 0x58	; 88
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <vfprintf+0x252>
    1d16:	ac c0       	rjmp	.+344    	; 0x1e70 <vfprintf+0x3aa>
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <vfprintf+0x272>
    1d1a:	90 37       	cpi	r25, 0x70	; 112
    1d1c:	39 f0       	breq	.+14     	; 0x1d2c <vfprintf+0x266>
    1d1e:	98 37       	cpi	r25, 0x78	; 120
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <vfprintf+0x25e>
    1d22:	a6 c0       	rjmp	.+332    	; 0x1e70 <vfprintf+0x3aa>
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <vfprintf+0x268>
    1d26:	28 e0       	ldi	r18, 0x08	; 8
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <vfprintf+0x27a>
    1d2c:	10 61       	ori	r17, 0x10	; 16
    1d2e:	14 fd       	sbrc	r17, 4
    1d30:	14 60       	ori	r17, 0x04	; 4
    1d32:	20 e1       	ldi	r18, 0x10	; 16
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <vfprintf+0x27a>
    1d38:	14 fd       	sbrc	r17, 4
    1d3a:	16 60       	ori	r17, 0x06	; 6
    1d3c:	20 e1       	ldi	r18, 0x10	; 16
    1d3e:	32 e0       	ldi	r19, 0x02	; 2
    1d40:	17 ff       	sbrs	r17, 7
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <vfprintf+0x28e>
    1d44:	f5 01       	movw	r30, r10
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	44 e0       	ldi	r20, 0x04	; 4
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <vfprintf+0x29e>
    1d54:	f5 01       	movw	r30, r10
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	42 e0       	ldi	r20, 0x02	; 2
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	a4 0e       	add	r10, r20
    1d66:	b5 1e       	adc	r11, r21
    1d68:	a1 01       	movw	r20, r2
    1d6a:	0e 94 bc 11 	call	0x2378	; 0x2378 <__ultoa_invert>
    1d6e:	d8 2e       	mov	r13, r24
    1d70:	d2 18       	sub	r13, r2
    1d72:	8f e7       	ldi	r24, 0x7F	; 127
    1d74:	f8 2e       	mov	r15, r24
    1d76:	f1 22       	and	r15, r17
    1d78:	f6 fe       	sbrs	r15, 6
    1d7a:	0b c0       	rjmp	.+22     	; 0x1d92 <vfprintf+0x2cc>
    1d7c:	5e ef       	ldi	r21, 0xFE	; 254
    1d7e:	f5 22       	and	r15, r21
    1d80:	d9 14       	cp	r13, r9
    1d82:	38 f4       	brcc	.+14     	; 0x1d92 <vfprintf+0x2cc>
    1d84:	f4 fe       	sbrs	r15, 4
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <vfprintf+0x2d0>
    1d88:	f2 fc       	sbrc	r15, 2
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <vfprintf+0x2d0>
    1d8c:	8f ee       	ldi	r24, 0xEF	; 239
    1d8e:	f8 22       	and	r15, r24
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <vfprintf+0x2d0>
    1d92:	1d 2d       	mov	r17, r13
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <vfprintf+0x2d2>
    1d96:	19 2d       	mov	r17, r9
    1d98:	f4 fe       	sbrs	r15, 4
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <vfprintf+0x2f0>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ed 0d       	add	r30, r13
    1da0:	f1 1d       	adc	r31, r1
    1da2:	80 81       	ld	r24, Z
    1da4:	80 33       	cpi	r24, 0x30	; 48
    1da6:	19 f4       	brne	.+6      	; 0x1dae <vfprintf+0x2e8>
    1da8:	99 ee       	ldi	r25, 0xE9	; 233
    1daa:	f9 22       	and	r15, r25
    1dac:	08 c0       	rjmp	.+16     	; 0x1dbe <vfprintf+0x2f8>
    1dae:	1f 5f       	subi	r17, 0xFF	; 255
    1db0:	f2 fe       	sbrs	r15, 2
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <vfprintf+0x2f8>
    1db4:	03 c0       	rjmp	.+6      	; 0x1dbc <vfprintf+0x2f6>
    1db6:	8f 2d       	mov	r24, r15
    1db8:	86 78       	andi	r24, 0x86	; 134
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <vfprintf+0x2f8>
    1dbc:	1f 5f       	subi	r17, 0xFF	; 255
    1dbe:	0f 2d       	mov	r16, r15
    1dc0:	f3 fc       	sbrc	r15, 3
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <vfprintf+0x326>
    1dc4:	f0 fe       	sbrs	r15, 0
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <vfprintf+0x320>
    1dc8:	1e 15       	cp	r17, r14
    1dca:	10 f0       	brcs	.+4      	; 0x1dd0 <vfprintf+0x30a>
    1dcc:	9d 2c       	mov	r9, r13
    1dce:	0b c0       	rjmp	.+22     	; 0x1de6 <vfprintf+0x320>
    1dd0:	9d 2c       	mov	r9, r13
    1dd2:	9e 0c       	add	r9, r14
    1dd4:	91 1a       	sub	r9, r17
    1dd6:	1e 2d       	mov	r17, r14
    1dd8:	06 c0       	rjmp	.+12     	; 0x1de6 <vfprintf+0x320>
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	b3 01       	movw	r22, r6
    1de0:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1de4:	1f 5f       	subi	r17, 0xFF	; 255
    1de6:	1e 15       	cp	r17, r14
    1de8:	c0 f3       	brcs	.-16     	; 0x1dda <vfprintf+0x314>
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <vfprintf+0x32e>
    1dec:	1e 15       	cp	r17, r14
    1dee:	10 f4       	brcc	.+4      	; 0x1df4 <vfprintf+0x32e>
    1df0:	e1 1a       	sub	r14, r17
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <vfprintf+0x330>
    1df4:	ee 24       	eor	r14, r14
    1df6:	04 ff       	sbrs	r16, 4
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <vfprintf+0x352>
    1dfa:	80 e3       	ldi	r24, 0x30	; 48
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	b3 01       	movw	r22, r6
    1e00:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1e04:	02 ff       	sbrs	r16, 2
    1e06:	1d c0       	rjmp	.+58     	; 0x1e42 <vfprintf+0x37c>
    1e08:	01 fd       	sbrc	r16, 1
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <vfprintf+0x34c>
    1e0c:	88 e7       	ldi	r24, 0x78	; 120
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e c0       	rjmp	.+28     	; 0x1e2e <vfprintf+0x368>
    1e12:	88 e5       	ldi	r24, 0x58	; 88
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0b c0       	rjmp	.+22     	; 0x1e2e <vfprintf+0x368>
    1e18:	80 2f       	mov	r24, r16
    1e1a:	86 78       	andi	r24, 0x86	; 134
    1e1c:	91 f0       	breq	.+36     	; 0x1e42 <vfprintf+0x37c>
    1e1e:	01 ff       	sbrs	r16, 1
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <vfprintf+0x360>
    1e22:	8b e2       	ldi	r24, 0x2B	; 43
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <vfprintf+0x362>
    1e26:	80 e2       	ldi	r24, 0x20	; 32
    1e28:	f7 fc       	sbrc	r15, 7
    1e2a:	8d e2       	ldi	r24, 0x2D	; 45
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	b3 01       	movw	r22, r6
    1e30:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <vfprintf+0x37c>
    1e36:	80 e3       	ldi	r24, 0x30	; 48
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	b3 01       	movw	r22, r6
    1e3c:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1e40:	9a 94       	dec	r9
    1e42:	d9 14       	cp	r13, r9
    1e44:	c0 f3       	brcs	.-16     	; 0x1e36 <vfprintf+0x370>
    1e46:	da 94       	dec	r13
    1e48:	f1 01       	movw	r30, r2
    1e4a:	ed 0d       	add	r30, r13
    1e4c:	f1 1d       	adc	r31, r1
    1e4e:	80 81       	ld	r24, Z
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	b3 01       	movw	r22, r6
    1e54:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1e58:	dd 20       	and	r13, r13
    1e5a:	a9 f7       	brne	.-22     	; 0x1e46 <vfprintf+0x380>
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x3a4>
    1e5e:	80 e2       	ldi	r24, 0x20	; 32
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	b3 01       	movw	r22, r6
    1e64:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1e68:	ea 94       	dec	r14
    1e6a:	ee 20       	and	r14, r14
    1e6c:	c1 f7       	brne	.-16     	; 0x1e5e <vfprintf+0x398>
    1e6e:	43 ce       	rjmp	.-890    	; 0x1af6 <vfprintf+0x30>
    1e70:	f3 01       	movw	r30, r6
    1e72:	66 81       	ldd	r22, Z+6	; 0x06
    1e74:	77 81       	ldd	r23, Z+7	; 0x07
    1e76:	cb 01       	movw	r24, r22
    1e78:	2b 96       	adiw	r28, 0x0b	; 11
    1e7a:	e2 e1       	ldi	r30, 0x12	; 18
    1e7c:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

00001e80 <dtoa_prf>:
    1e80:	a9 e0       	ldi	r26, 0x09	; 9
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e6 e4       	ldi	r30, 0x46	; 70
    1e86:	ff e0       	ldi	r31, 0x0F	; 15
    1e88:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__prologue_saves__+0x8>
    1e8c:	6a 01       	movw	r12, r20
    1e8e:	12 2f       	mov	r17, r18
    1e90:	a0 2e       	mov	r10, r16
    1e92:	be 2c       	mov	r11, r14
    1e94:	2b e3       	ldi	r18, 0x3B	; 59
    1e96:	20 17       	cp	r18, r16
    1e98:	18 f4       	brcc	.+6      	; 0x1ea0 <dtoa_prf+0x20>
    1e9a:	2c e3       	ldi	r18, 0x3C	; 60
    1e9c:	92 2e       	mov	r9, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <dtoa_prf+0x24>
    1ea0:	90 2e       	mov	r9, r16
    1ea2:	93 94       	inc	r9
    1ea4:	ae 01       	movw	r20, r28
    1ea6:	4f 5f       	subi	r20, 0xFF	; 255
    1ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eaa:	27 e0       	ldi	r18, 0x07	; 7
    1eac:	09 2d       	mov	r16, r9
    1eae:	0e 94 a2 10 	call	0x2144	; 0x2144 <__ftoa_engine>
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	e8 2e       	mov	r14, r24
    1eb8:	ff 24       	eor	r15, r15
    1eba:	c7 01       	movw	r24, r14
    1ebc:	89 70       	andi	r24, 0x09	; 9
    1ebe:	90 70       	andi	r25, 0x00	; 0
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	11 f4       	brne	.+4      	; 0x1ec8 <dtoa_prf+0x48>
    1ec4:	ad e2       	ldi	r26, 0x2D	; 45
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <dtoa_prf+0x5a>
    1ec8:	b1 fe       	sbrs	r11, 1
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <dtoa_prf+0x50>
    1ecc:	ab e2       	ldi	r26, 0x2B	; 43
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <dtoa_prf+0x5a>
    1ed0:	b0 fc       	sbrc	r11, 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <dtoa_prf+0x58>
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <dtoa_prf+0x5a>
    1ed8:	a0 e2       	ldi	r26, 0x20	; 32
    1eda:	e3 fe       	sbrs	r14, 3
    1edc:	3b c0       	rjmp	.+118    	; 0x1f54 <dtoa_prf+0xd4>
    1ede:	aa 23       	and	r26, r26
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <dtoa_prf+0x66>
    1ee2:	23 e0       	ldi	r18, 0x03	; 3
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <dtoa_prf+0x68>
    1ee6:	24 e0       	ldi	r18, 0x04	; 4
    1ee8:	21 17       	cp	r18, r17
    1eea:	10 f0       	brcs	.+4      	; 0x1ef0 <dtoa_prf+0x70>
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <dtoa_prf+0x74>
    1ef0:	12 1b       	sub	r17, r18
    1ef2:	21 2f       	mov	r18, r17
    1ef4:	eb 2c       	mov	r14, r11
    1ef6:	b4 fe       	sbrs	r11, 4
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <dtoa_prf+0x7e>
    1efa:	32 2f       	mov	r19, r18
    1efc:	0a c0       	rjmp	.+20     	; 0x1f12 <dtoa_prf+0x92>
    1efe:	f6 01       	movw	r30, r12
    1f00:	32 2f       	mov	r19, r18
    1f02:	80 e2       	ldi	r24, 0x20	; 32
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <dtoa_prf+0x8a>
    1f06:	81 93       	st	Z+, r24
    1f08:	31 50       	subi	r19, 0x01	; 1
    1f0a:	33 23       	and	r19, r19
    1f0c:	e1 f7       	brne	.-8      	; 0x1f06 <dtoa_prf+0x86>
    1f0e:	c2 0e       	add	r12, r18
    1f10:	d1 1c       	adc	r13, r1
    1f12:	aa 23       	and	r26, r26
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <dtoa_prf+0x9c>
    1f16:	f6 01       	movw	r30, r12
    1f18:	a1 93       	st	Z+, r26
    1f1a:	6f 01       	movw	r12, r30
    1f1c:	f6 01       	movw	r30, r12
    1f1e:	31 96       	adiw	r30, 0x01	; 1
    1f20:	e2 fe       	sbrs	r14, 2
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <dtoa_prf+0xae>
    1f24:	9e e4       	ldi	r25, 0x4E	; 78
    1f26:	d6 01       	movw	r26, r12
    1f28:	9c 93       	st	X, r25
    1f2a:	81 e4       	ldi	r24, 0x41	; 65
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <dtoa_prf+0xb6>
    1f2e:	9e e6       	ldi	r25, 0x6E	; 110
    1f30:	d6 01       	movw	r26, r12
    1f32:	9c 93       	st	X, r25
    1f34:	81 e6       	ldi	r24, 0x61	; 97
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	8c 93       	st	X, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	32 96       	adiw	r30, 0x02	; 2
    1f3e:	df 01       	movw	r26, r30
    1f40:	83 2f       	mov	r24, r19
    1f42:	90 e2       	ldi	r25, 0x20	; 32
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <dtoa_prf+0xca>
    1f46:	9d 93       	st	X+, r25
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	88 23       	and	r24, r24
    1f4c:	e1 f7       	brne	.-8      	; 0x1f46 <dtoa_prf+0xc6>
    1f4e:	e3 0f       	add	r30, r19
    1f50:	f1 1d       	adc	r31, r1
    1f52:	40 c0       	rjmp	.+128    	; 0x1fd4 <dtoa_prf+0x154>
    1f54:	e2 fe       	sbrs	r14, 2
    1f56:	42 c0       	rjmp	.+132    	; 0x1fdc <dtoa_prf+0x15c>
    1f58:	aa 23       	and	r26, r26
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <dtoa_prf+0xe0>
    1f5c:	23 e0       	ldi	r18, 0x03	; 3
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <dtoa_prf+0xe2>
    1f60:	24 e0       	ldi	r18, 0x04	; 4
    1f62:	21 17       	cp	r18, r17
    1f64:	10 f0       	brcs	.+4      	; 0x1f6a <dtoa_prf+0xea>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <dtoa_prf+0xee>
    1f6a:	12 1b       	sub	r17, r18
    1f6c:	21 2f       	mov	r18, r17
    1f6e:	eb 2c       	mov	r14, r11
    1f70:	b4 fe       	sbrs	r11, 4
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <dtoa_prf+0xf8>
    1f74:	92 2f       	mov	r25, r18
    1f76:	0a c0       	rjmp	.+20     	; 0x1f8c <dtoa_prf+0x10c>
    1f78:	f6 01       	movw	r30, r12
    1f7a:	92 2f       	mov	r25, r18
    1f7c:	80 e2       	ldi	r24, 0x20	; 32
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <dtoa_prf+0x104>
    1f80:	81 93       	st	Z+, r24
    1f82:	91 50       	subi	r25, 0x01	; 1
    1f84:	99 23       	and	r25, r25
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <dtoa_prf+0x100>
    1f88:	c2 0e       	add	r12, r18
    1f8a:	d1 1c       	adc	r13, r1
    1f8c:	aa 23       	and	r26, r26
    1f8e:	19 f0       	breq	.+6      	; 0x1f96 <dtoa_prf+0x116>
    1f90:	f6 01       	movw	r30, r12
    1f92:	a1 93       	st	Z+, r26
    1f94:	6f 01       	movw	r12, r30
    1f96:	f6 01       	movw	r30, r12
    1f98:	31 96       	adiw	r30, 0x01	; 1
    1f9a:	e2 fe       	sbrs	r14, 2
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <dtoa_prf+0x12e>
    1f9e:	89 e4       	ldi	r24, 0x49	; 73
    1fa0:	d6 01       	movw	r26, r12
    1fa2:	8c 93       	st	X, r24
    1fa4:	8e e4       	ldi	r24, 0x4E	; 78
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	8c 93       	st	X, r24
    1faa:	86 e4       	ldi	r24, 0x46	; 70
    1fac:	07 c0       	rjmp	.+14     	; 0x1fbc <dtoa_prf+0x13c>
    1fae:	89 e6       	ldi	r24, 0x69	; 105
    1fb0:	d6 01       	movw	r26, r12
    1fb2:	8c 93       	st	X, r24
    1fb4:	8e e6       	ldi	r24, 0x6E	; 110
    1fb6:	11 96       	adiw	r26, 0x01	; 1
    1fb8:	8c 93       	st	X, r24
    1fba:	86 e6       	ldi	r24, 0x66	; 102
    1fbc:	81 83       	std	Z+1, r24	; 0x01
    1fbe:	32 96       	adiw	r30, 0x02	; 2
    1fc0:	df 01       	movw	r26, r30
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	20 e2       	ldi	r18, 0x20	; 32
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <dtoa_prf+0x14c>
    1fc8:	2d 93       	st	X+, r18
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	88 23       	and	r24, r24
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <dtoa_prf+0x148>
    1fd0:	e9 0f       	add	r30, r25
    1fd2:	f1 1d       	adc	r31, r1
    1fd4:	10 82       	st	Z, r1
    1fd6:	2e ef       	ldi	r18, 0xFE	; 254
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	af c0       	rjmp	.+350    	; 0x213a <dtoa_prf+0x2ba>
    1fdc:	16 16       	cp	r1, r22
    1fde:	17 06       	cpc	r1, r23
    1fe0:	1c f0       	brlt	.+6      	; 0x1fe8 <dtoa_prf+0x168>
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <dtoa_prf+0x16e>
    1fe8:	ab 01       	movw	r20, r22
    1fea:	4f 5f       	subi	r20, 0xFF	; 255
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    1fee:	aa 20       	and	r10, r10
    1ff0:	19 f4       	brne	.+6      	; 0x1ff8 <dtoa_prf+0x178>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <dtoa_prf+0x17e>
    1ff8:	8a 2d       	mov	r24, r10
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	aa 23       	and	r26, r26
    2004:	11 f0       	breq	.+4      	; 0x200a <dtoa_prf+0x18a>
    2006:	21 e0       	ldi	r18, 0x01	; 1
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	24 0f       	add	r18, r20
    200c:	35 1f       	adc	r19, r21
    200e:	28 0f       	add	r18, r24
    2010:	39 1f       	adc	r19, r25
    2012:	81 2f       	mov	r24, r17
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	28 17       	cp	r18, r24
    2018:	39 07       	cpc	r19, r25
    201a:	14 f0       	brlt	.+4      	; 0x2020 <dtoa_prf+0x1a0>
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <dtoa_prf+0x1a4>
    2020:	12 1b       	sub	r17, r18
    2022:	21 2f       	mov	r18, r17
    2024:	4b 2d       	mov	r20, r11
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	ca 01       	movw	r24, r20
    202a:	80 71       	andi	r24, 0x10	; 16
    202c:	90 70       	andi	r25, 0x00	; 0
    202e:	b4 fc       	sbrc	r11, 4
    2030:	0d c0       	rjmp	.+26     	; 0x204c <dtoa_prf+0x1cc>
    2032:	b3 fc       	sbrc	r11, 3
    2034:	0b c0       	rjmp	.+22     	; 0x204c <dtoa_prf+0x1cc>
    2036:	f6 01       	movw	r30, r12
    2038:	32 2f       	mov	r19, r18
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <dtoa_prf+0x1c2>
    203e:	41 93       	st	Z+, r20
    2040:	31 50       	subi	r19, 0x01	; 1
    2042:	33 23       	and	r19, r19
    2044:	e1 f7       	brne	.-8      	; 0x203e <dtoa_prf+0x1be>
    2046:	c2 0e       	add	r12, r18
    2048:	d1 1c       	adc	r13, r1
    204a:	01 c0       	rjmp	.+2      	; 0x204e <dtoa_prf+0x1ce>
    204c:	32 2f       	mov	r19, r18
    204e:	aa 23       	and	r26, r26
    2050:	19 f0       	breq	.+6      	; 0x2058 <dtoa_prf+0x1d8>
    2052:	f6 01       	movw	r30, r12
    2054:	a1 93       	st	Z+, r26
    2056:	6f 01       	movw	r12, r30
    2058:	89 2b       	or	r24, r25
    205a:	11 f0       	breq	.+4      	; 0x2060 <dtoa_prf+0x1e0>
    205c:	13 2f       	mov	r17, r19
    205e:	0a c0       	rjmp	.+20     	; 0x2074 <dtoa_prf+0x1f4>
    2060:	f6 01       	movw	r30, r12
    2062:	13 2f       	mov	r17, r19
    2064:	80 e3       	ldi	r24, 0x30	; 48
    2066:	02 c0       	rjmp	.+4      	; 0x206c <dtoa_prf+0x1ec>
    2068:	81 93       	st	Z+, r24
    206a:	11 50       	subi	r17, 0x01	; 1
    206c:	11 23       	and	r17, r17
    206e:	e1 f7       	brne	.-8      	; 0x2068 <dtoa_prf+0x1e8>
    2070:	c3 0e       	add	r12, r19
    2072:	d1 1c       	adc	r13, r1
    2074:	09 2d       	mov	r16, r9
    2076:	06 0f       	add	r16, r22
    2078:	ba 80       	ldd	r11, Y+2	; 0x02
    207a:	90 e1       	ldi	r25, 0x10	; 16
    207c:	89 2e       	mov	r8, r25
    207e:	91 2c       	mov	r9, r1
    2080:	8e 20       	and	r8, r14
    2082:	9f 20       	and	r9, r15
    2084:	e4 fe       	sbrs	r14, 4
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <dtoa_prf+0x210>
    2088:	f1 e3       	ldi	r31, 0x31	; 49
    208a:	bf 16       	cp	r11, r31
    208c:	09 f4       	brne	.+2      	; 0x2090 <dtoa_prf+0x210>
    208e:	01 50       	subi	r16, 0x01	; 1
    2090:	10 16       	cp	r1, r16
    2092:	14 f0       	brlt	.+4      	; 0x2098 <dtoa_prf+0x218>
    2094:	01 e0       	ldi	r16, 0x01	; 1
    2096:	03 c0       	rjmp	.+6      	; 0x209e <dtoa_prf+0x21e>
    2098:	09 30       	cpi	r16, 0x09	; 9
    209a:	08 f0       	brcs	.+2      	; 0x209e <dtoa_prf+0x21e>
    209c:	08 e0       	ldi	r16, 0x08	; 8
    209e:	9b 01       	movw	r18, r22
    20a0:	77 ff       	sbrs	r23, 7
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <dtoa_prf+0x228>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	cb 01       	movw	r24, r22
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	82 1b       	sub	r24, r18
    20ae:	93 0b       	sbc	r25, r19
    20b0:	fe 01       	movw	r30, r28
    20b2:	31 96       	adiw	r30, 0x01	; 1
    20b4:	e8 0f       	add	r30, r24
    20b6:	f9 1f       	adc	r31, r25
    20b8:	8e e2       	ldi	r24, 0x2E	; 46
    20ba:	f8 2e       	mov	r15, r24
    20bc:	3b 01       	movw	r6, r22
    20be:	60 1a       	sub	r6, r16
    20c0:	71 08       	sbc	r7, r1
    20c2:	8a 2d       	mov	r24, r10
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	44 27       	eor	r20, r20
    20c8:	55 27       	eor	r21, r21
    20ca:	48 1b       	sub	r20, r24
    20cc:	59 0b       	sbc	r21, r25
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	2f 3f       	cpi	r18, 0xFF	; 255
    20d2:	38 07       	cpc	r19, r24
    20d4:	19 f4       	brne	.+6      	; 0x20dc <dtoa_prf+0x25c>
    20d6:	d6 01       	movw	r26, r12
    20d8:	fd 92       	st	X+, r15
    20da:	6d 01       	movw	r12, r26
    20dc:	62 17       	cp	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	2c f0       	brlt	.+10     	; 0x20ec <dtoa_prf+0x26c>
    20e2:	62 16       	cp	r6, r18
    20e4:	73 06       	cpc	r7, r19
    20e6:	14 f4       	brge	.+4      	; 0x20ec <dtoa_prf+0x26c>
    20e8:	80 81       	ld	r24, Z
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <dtoa_prf+0x26e>
    20ec:	80 e3       	ldi	r24, 0x30	; 48
    20ee:	21 50       	subi	r18, 0x01	; 1
    20f0:	30 40       	sbci	r19, 0x00	; 0
    20f2:	31 96       	adiw	r30, 0x01	; 1
    20f4:	24 17       	cp	r18, r20
    20f6:	35 07       	cpc	r19, r21
    20f8:	24 f0       	brlt	.+8      	; 0x2102 <dtoa_prf+0x282>
    20fa:	d6 01       	movw	r26, r12
    20fc:	8d 93       	st	X+, r24
    20fe:	6d 01       	movw	r12, r26
    2100:	e6 cf       	rjmp	.-52     	; 0x20ce <dtoa_prf+0x24e>
    2102:	26 17       	cp	r18, r22
    2104:	37 07       	cpc	r19, r23
    2106:	49 f4       	brne	.+18     	; 0x211a <dtoa_prf+0x29a>
    2108:	b5 e3       	ldi	r27, 0x35	; 53
    210a:	bb 15       	cp	r27, r11
    210c:	28 f0       	brcs	.+10     	; 0x2118 <dtoa_prf+0x298>
    210e:	bb 16       	cp	r11, r27
    2110:	21 f4       	brne	.+8      	; 0x211a <dtoa_prf+0x29a>
    2112:	81 14       	cp	r8, r1
    2114:	91 04       	cpc	r9, r1
    2116:	09 f4       	brne	.+2      	; 0x211a <dtoa_prf+0x29a>
    2118:	81 e3       	ldi	r24, 0x31	; 49
    211a:	f6 01       	movw	r30, r12
    211c:	81 93       	st	Z+, r24
    211e:	d6 01       	movw	r26, r12
    2120:	81 2f       	mov	r24, r17
    2122:	90 e2       	ldi	r25, 0x20	; 32
    2124:	02 c0       	rjmp	.+4      	; 0x212a <dtoa_prf+0x2aa>
    2126:	9c 93       	st	X, r25
    2128:	81 50       	subi	r24, 0x01	; 1
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	88 23       	and	r24, r24
    212e:	d9 f7       	brne	.-10     	; 0x2126 <dtoa_prf+0x2a6>
    2130:	e1 0f       	add	r30, r17
    2132:	f1 1d       	adc	r31, r1
    2134:	10 82       	st	Z, r1
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	c9 01       	movw	r24, r18
    213c:	29 96       	adiw	r28, 0x09	; 9
    213e:	ee e0       	ldi	r30, 0x0E	; 14
    2140:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__epilogue_restores__+0x8>

00002144 <__ftoa_engine>:
    2144:	28 30       	cpi	r18, 0x08	; 8
    2146:	08 f0       	brcs	.+2      	; 0x214a <__ftoa_engine+0x6>
    2148:	27 e0       	ldi	r18, 0x07	; 7
    214a:	33 27       	eor	r19, r19
    214c:	da 01       	movw	r26, r20
    214e:	99 0f       	add	r25, r25
    2150:	31 1d       	adc	r19, r1
    2152:	87 fd       	sbrc	r24, 7
    2154:	91 60       	ori	r25, 0x01	; 1
    2156:	00 96       	adiw	r24, 0x00	; 0
    2158:	61 05       	cpc	r22, r1
    215a:	71 05       	cpc	r23, r1
    215c:	39 f4       	brne	.+14     	; 0x216c <__ftoa_engine+0x28>
    215e:	32 60       	ori	r19, 0x02	; 2
    2160:	2e 5f       	subi	r18, 0xFE	; 254
    2162:	3d 93       	st	X+, r19
    2164:	30 e3       	ldi	r19, 0x30	; 48
    2166:	2a 95       	dec	r18
    2168:	e1 f7       	brne	.-8      	; 0x2162 <__ftoa_engine+0x1e>
    216a:	08 95       	ret
    216c:	9f 3f       	cpi	r25, 0xFF	; 255
    216e:	30 f0       	brcs	.+12     	; 0x217c <__ftoa_engine+0x38>
    2170:	80 38       	cpi	r24, 0x80	; 128
    2172:	71 05       	cpc	r23, r1
    2174:	61 05       	cpc	r22, r1
    2176:	09 f0       	breq	.+2      	; 0x217a <__ftoa_engine+0x36>
    2178:	3c 5f       	subi	r19, 0xFC	; 252
    217a:	3c 5f       	subi	r19, 0xFC	; 252
    217c:	3d 93       	st	X+, r19
    217e:	91 30       	cpi	r25, 0x01	; 1
    2180:	08 f0       	brcs	.+2      	; 0x2184 <__ftoa_engine+0x40>
    2182:	80 68       	ori	r24, 0x80	; 128
    2184:	91 1d       	adc	r25, r1
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	1f 93       	push	r17
    218c:	0f 93       	push	r16
    218e:	ff 92       	push	r15
    2190:	ef 92       	push	r14
    2192:	19 2f       	mov	r17, r25
    2194:	98 7f       	andi	r25, 0xF8	; 248
    2196:	96 95       	lsr	r25
    2198:	e9 2f       	mov	r30, r25
    219a:	96 95       	lsr	r25
    219c:	96 95       	lsr	r25
    219e:	e9 0f       	add	r30, r25
    21a0:	ff 27       	eor	r31, r31
    21a2:	ef 55       	subi	r30, 0x5F	; 95
    21a4:	fd 4f       	sbci	r31, 0xFD	; 253
    21a6:	99 27       	eor	r25, r25
    21a8:	33 27       	eor	r19, r19
    21aa:	ee 24       	eor	r14, r14
    21ac:	ff 24       	eor	r15, r15
    21ae:	a7 01       	movw	r20, r14
    21b0:	e7 01       	movw	r28, r14
    21b2:	05 90       	lpm	r0, Z+
    21b4:	08 94       	sec
    21b6:	07 94       	ror	r0
    21b8:	28 f4       	brcc	.+10     	; 0x21c4 <__ftoa_engine+0x80>
    21ba:	36 0f       	add	r19, r22
    21bc:	e7 1e       	adc	r14, r23
    21be:	f8 1e       	adc	r15, r24
    21c0:	49 1f       	adc	r20, r25
    21c2:	51 1d       	adc	r21, r1
    21c4:	66 0f       	add	r22, r22
    21c6:	77 1f       	adc	r23, r23
    21c8:	88 1f       	adc	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	06 94       	lsr	r0
    21ce:	a1 f7       	brne	.-24     	; 0x21b8 <__ftoa_engine+0x74>
    21d0:	05 90       	lpm	r0, Z+
    21d2:	07 94       	ror	r0
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <__ftoa_engine+0x9c>
    21d6:	e7 0e       	add	r14, r23
    21d8:	f8 1e       	adc	r15, r24
    21da:	49 1f       	adc	r20, r25
    21dc:	56 1f       	adc	r21, r22
    21de:	c1 1d       	adc	r28, r1
    21e0:	77 0f       	add	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	66 1f       	adc	r22, r22
    21e8:	06 94       	lsr	r0
    21ea:	a1 f7       	brne	.-24     	; 0x21d4 <__ftoa_engine+0x90>
    21ec:	05 90       	lpm	r0, Z+
    21ee:	07 94       	ror	r0
    21f0:	28 f4       	brcc	.+10     	; 0x21fc <__ftoa_engine+0xb8>
    21f2:	f8 0e       	add	r15, r24
    21f4:	49 1f       	adc	r20, r25
    21f6:	56 1f       	adc	r21, r22
    21f8:	c7 1f       	adc	r28, r23
    21fa:	d1 1d       	adc	r29, r1
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	66 1f       	adc	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	06 94       	lsr	r0
    2206:	a1 f7       	brne	.-24     	; 0x21f0 <__ftoa_engine+0xac>
    2208:	05 90       	lpm	r0, Z+
    220a:	07 94       	ror	r0
    220c:	20 f4       	brcc	.+8      	; 0x2216 <__ftoa_engine+0xd2>
    220e:	49 0f       	add	r20, r25
    2210:	56 1f       	adc	r21, r22
    2212:	c7 1f       	adc	r28, r23
    2214:	d8 1f       	adc	r29, r24
    2216:	99 0f       	add	r25, r25
    2218:	66 1f       	adc	r22, r22
    221a:	77 1f       	adc	r23, r23
    221c:	88 1f       	adc	r24, r24
    221e:	06 94       	lsr	r0
    2220:	a9 f7       	brne	.-22     	; 0x220c <__ftoa_engine+0xc8>
    2222:	84 91       	lpm	r24, Z+
    2224:	10 95       	com	r17
    2226:	17 70       	andi	r17, 0x07	; 7
    2228:	41 f0       	breq	.+16     	; 0x223a <__ftoa_engine+0xf6>
    222a:	d6 95       	lsr	r29
    222c:	c7 95       	ror	r28
    222e:	57 95       	ror	r21
    2230:	47 95       	ror	r20
    2232:	f7 94       	ror	r15
    2234:	e7 94       	ror	r14
    2236:	1a 95       	dec	r17
    2238:	c1 f7       	brne	.-16     	; 0x222a <__ftoa_engine+0xe6>
    223a:	e7 e4       	ldi	r30, 0x47	; 71
    223c:	f2 e0       	ldi	r31, 0x02	; 2
    223e:	68 94       	set
    2240:	15 90       	lpm	r1, Z+
    2242:	15 91       	lpm	r17, Z+
    2244:	35 91       	lpm	r19, Z+
    2246:	65 91       	lpm	r22, Z+
    2248:	95 91       	lpm	r25, Z+
    224a:	05 90       	lpm	r0, Z+
    224c:	7f e2       	ldi	r23, 0x2F	; 47
    224e:	73 95       	inc	r23
    2250:	e1 18       	sub	r14, r1
    2252:	f1 0a       	sbc	r15, r17
    2254:	43 0b       	sbc	r20, r19
    2256:	56 0b       	sbc	r21, r22
    2258:	c9 0b       	sbc	r28, r25
    225a:	d0 09       	sbc	r29, r0
    225c:	c0 f7       	brcc	.-16     	; 0x224e <__ftoa_engine+0x10a>
    225e:	e1 0c       	add	r14, r1
    2260:	f1 1e       	adc	r15, r17
    2262:	43 1f       	adc	r20, r19
    2264:	56 1f       	adc	r21, r22
    2266:	c9 1f       	adc	r28, r25
    2268:	d0 1d       	adc	r29, r0
    226a:	7e f4       	brtc	.+30     	; 0x228a <__ftoa_engine+0x146>
    226c:	70 33       	cpi	r23, 0x30	; 48
    226e:	11 f4       	brne	.+4      	; 0x2274 <__ftoa_engine+0x130>
    2270:	8a 95       	dec	r24
    2272:	e6 cf       	rjmp	.-52     	; 0x2240 <__ftoa_engine+0xfc>
    2274:	e8 94       	clt
    2276:	01 50       	subi	r16, 0x01	; 1
    2278:	30 f0       	brcs	.+12     	; 0x2286 <__ftoa_engine+0x142>
    227a:	08 0f       	add	r16, r24
    227c:	0a f4       	brpl	.+2      	; 0x2280 <__ftoa_engine+0x13c>
    227e:	00 27       	eor	r16, r16
    2280:	02 17       	cp	r16, r18
    2282:	08 f4       	brcc	.+2      	; 0x2286 <__ftoa_engine+0x142>
    2284:	20 2f       	mov	r18, r16
    2286:	23 95       	inc	r18
    2288:	02 2f       	mov	r16, r18
    228a:	7a 33       	cpi	r23, 0x3A	; 58
    228c:	28 f0       	brcs	.+10     	; 0x2298 <__ftoa_engine+0x154>
    228e:	79 e3       	ldi	r23, 0x39	; 57
    2290:	7d 93       	st	X+, r23
    2292:	2a 95       	dec	r18
    2294:	e9 f7       	brne	.-6      	; 0x2290 <__ftoa_engine+0x14c>
    2296:	10 c0       	rjmp	.+32     	; 0x22b8 <__ftoa_engine+0x174>
    2298:	7d 93       	st	X+, r23
    229a:	2a 95       	dec	r18
    229c:	89 f6       	brne	.-94     	; 0x2240 <__ftoa_engine+0xfc>
    229e:	06 94       	lsr	r0
    22a0:	97 95       	ror	r25
    22a2:	67 95       	ror	r22
    22a4:	37 95       	ror	r19
    22a6:	17 95       	ror	r17
    22a8:	17 94       	ror	r1
    22aa:	e1 18       	sub	r14, r1
    22ac:	f1 0a       	sbc	r15, r17
    22ae:	43 0b       	sbc	r20, r19
    22b0:	56 0b       	sbc	r21, r22
    22b2:	c9 0b       	sbc	r28, r25
    22b4:	d0 09       	sbc	r29, r0
    22b6:	98 f0       	brcs	.+38     	; 0x22de <__ftoa_engine+0x19a>
    22b8:	23 95       	inc	r18
    22ba:	7e 91       	ld	r23, -X
    22bc:	73 95       	inc	r23
    22be:	7a 33       	cpi	r23, 0x3A	; 58
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <__ftoa_engine+0x180>
    22c2:	70 e3       	ldi	r23, 0x30	; 48
    22c4:	7c 93       	st	X, r23
    22c6:	20 13       	cpse	r18, r16
    22c8:	b8 f7       	brcc	.-18     	; 0x22b8 <__ftoa_engine+0x174>
    22ca:	7e 91       	ld	r23, -X
    22cc:	70 61       	ori	r23, 0x10	; 16
    22ce:	7d 93       	st	X+, r23
    22d0:	30 f0       	brcs	.+12     	; 0x22de <__ftoa_engine+0x19a>
    22d2:	83 95       	inc	r24
    22d4:	71 e3       	ldi	r23, 0x31	; 49
    22d6:	7d 93       	st	X+, r23
    22d8:	70 e3       	ldi	r23, 0x30	; 48
    22da:	2a 95       	dec	r18
    22dc:	e1 f7       	brne	.-8      	; 0x22d6 <__ftoa_engine+0x192>
    22de:	11 24       	eor	r1, r1
    22e0:	ef 90       	pop	r14
    22e2:	ff 90       	pop	r15
    22e4:	0f 91       	pop	r16
    22e6:	1f 91       	pop	r17
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	99 27       	eor	r25, r25
    22ee:	87 fd       	sbrc	r24, 7
    22f0:	90 95       	com	r25
    22f2:	08 95       	ret

000022f4 <strnlen_P>:
    22f4:	fc 01       	movw	r30, r24
    22f6:	05 90       	lpm	r0, Z+
    22f8:	61 50       	subi	r22, 0x01	; 1
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	01 10       	cpse	r0, r1
    22fe:	d8 f7       	brcc	.-10     	; 0x22f6 <strnlen_P+0x2>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	8e 0f       	add	r24, r30
    2306:	9f 1f       	adc	r25, r31
    2308:	08 95       	ret

0000230a <strnlen>:
    230a:	fc 01       	movw	r30, r24
    230c:	61 50       	subi	r22, 0x01	; 1
    230e:	70 40       	sbci	r23, 0x00	; 0
    2310:	01 90       	ld	r0, Z+
    2312:	01 10       	cpse	r0, r1
    2314:	d8 f7       	brcc	.-10     	; 0x230c <strnlen+0x2>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	8e 0f       	add	r24, r30
    231c:	9f 1f       	adc	r25, r31
    231e:	08 95       	ret

00002320 <fputc>:
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	8c 01       	movw	r16, r24
    232a:	eb 01       	movw	r28, r22
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	81 ff       	sbrs	r24, 1
    2330:	1b c0       	rjmp	.+54     	; 0x2368 <fputc+0x48>
    2332:	82 ff       	sbrs	r24, 2
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <fputc+0x30>
    2336:	2e 81       	ldd	r18, Y+6	; 0x06
    2338:	3f 81       	ldd	r19, Y+7	; 0x07
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	28 17       	cp	r18, r24
    2340:	39 07       	cpc	r19, r25
    2342:	64 f4       	brge	.+24     	; 0x235c <fputc+0x3c>
    2344:	e8 81       	ld	r30, Y
    2346:	f9 81       	ldd	r31, Y+1	; 0x01
    2348:	01 93       	st	Z+, r16
    234a:	f9 83       	std	Y+1, r31	; 0x01
    234c:	e8 83       	st	Y, r30
    234e:	06 c0       	rjmp	.+12     	; 0x235c <fputc+0x3c>
    2350:	e8 85       	ldd	r30, Y+8	; 0x08
    2352:	f9 85       	ldd	r31, Y+9	; 0x09
    2354:	80 2f       	mov	r24, r16
    2356:	09 95       	icall
    2358:	89 2b       	or	r24, r25
    235a:	31 f4       	brne	.+12     	; 0x2368 <fputc+0x48>
    235c:	8e 81       	ldd	r24, Y+6	; 0x06
    235e:	9f 81       	ldd	r25, Y+7	; 0x07
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	9f 83       	std	Y+7, r25	; 0x07
    2364:	8e 83       	std	Y+6, r24	; 0x06
    2366:	02 c0       	rjmp	.+4      	; 0x236c <fputc+0x4c>
    2368:	0f ef       	ldi	r16, 0xFF	; 255
    236a:	1f ef       	ldi	r17, 0xFF	; 255
    236c:	c8 01       	movw	r24, r16
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	08 95       	ret

00002378 <__ultoa_invert>:
    2378:	fa 01       	movw	r30, r20
    237a:	aa 27       	eor	r26, r26
    237c:	28 30       	cpi	r18, 0x08	; 8
    237e:	51 f1       	breq	.+84     	; 0x23d4 <__ultoa_invert+0x5c>
    2380:	20 31       	cpi	r18, 0x10	; 16
    2382:	81 f1       	breq	.+96     	; 0x23e4 <__ultoa_invert+0x6c>
    2384:	e8 94       	clt
    2386:	6f 93       	push	r22
    2388:	6e 7f       	andi	r22, 0xFE	; 254
    238a:	6e 5f       	subi	r22, 0xFE	; 254
    238c:	7f 4f       	sbci	r23, 0xFF	; 255
    238e:	8f 4f       	sbci	r24, 0xFF	; 255
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	af 4f       	sbci	r26, 0xFF	; 255
    2394:	b1 e0       	ldi	r27, 0x01	; 1
    2396:	3e d0       	rcall	.+124    	; 0x2414 <__ultoa_invert+0x9c>
    2398:	b4 e0       	ldi	r27, 0x04	; 4
    239a:	3c d0       	rcall	.+120    	; 0x2414 <__ultoa_invert+0x9c>
    239c:	67 0f       	add	r22, r23
    239e:	78 1f       	adc	r23, r24
    23a0:	89 1f       	adc	r24, r25
    23a2:	9a 1f       	adc	r25, r26
    23a4:	a1 1d       	adc	r26, r1
    23a6:	68 0f       	add	r22, r24
    23a8:	79 1f       	adc	r23, r25
    23aa:	8a 1f       	adc	r24, r26
    23ac:	91 1d       	adc	r25, r1
    23ae:	a1 1d       	adc	r26, r1
    23b0:	6a 0f       	add	r22, r26
    23b2:	71 1d       	adc	r23, r1
    23b4:	81 1d       	adc	r24, r1
    23b6:	91 1d       	adc	r25, r1
    23b8:	a1 1d       	adc	r26, r1
    23ba:	20 d0       	rcall	.+64     	; 0x23fc <__ultoa_invert+0x84>
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__ultoa_invert+0x48>
    23be:	68 94       	set
    23c0:	3f 91       	pop	r19
    23c2:	2a e0       	ldi	r18, 0x0A	; 10
    23c4:	26 9f       	mul	r18, r22
    23c6:	11 24       	eor	r1, r1
    23c8:	30 19       	sub	r19, r0
    23ca:	30 5d       	subi	r19, 0xD0	; 208
    23cc:	31 93       	st	Z+, r19
    23ce:	de f6       	brtc	.-74     	; 0x2386 <__ultoa_invert+0xe>
    23d0:	cf 01       	movw	r24, r30
    23d2:	08 95       	ret
    23d4:	46 2f       	mov	r20, r22
    23d6:	47 70       	andi	r20, 0x07	; 7
    23d8:	40 5d       	subi	r20, 0xD0	; 208
    23da:	41 93       	st	Z+, r20
    23dc:	b3 e0       	ldi	r27, 0x03	; 3
    23de:	0f d0       	rcall	.+30     	; 0x23fe <__ultoa_invert+0x86>
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__ultoa_invert+0x5c>
    23e2:	f6 cf       	rjmp	.-20     	; 0x23d0 <__ultoa_invert+0x58>
    23e4:	46 2f       	mov	r20, r22
    23e6:	4f 70       	andi	r20, 0x0F	; 15
    23e8:	40 5d       	subi	r20, 0xD0	; 208
    23ea:	4a 33       	cpi	r20, 0x3A	; 58
    23ec:	18 f0       	brcs	.+6      	; 0x23f4 <__ultoa_invert+0x7c>
    23ee:	49 5d       	subi	r20, 0xD9	; 217
    23f0:	31 fd       	sbrc	r19, 1
    23f2:	40 52       	subi	r20, 0x20	; 32
    23f4:	41 93       	st	Z+, r20
    23f6:	02 d0       	rcall	.+4      	; 0x23fc <__ultoa_invert+0x84>
    23f8:	a9 f7       	brne	.-22     	; 0x23e4 <__ultoa_invert+0x6c>
    23fa:	ea cf       	rjmp	.-44     	; 0x23d0 <__ultoa_invert+0x58>
    23fc:	b4 e0       	ldi	r27, 0x04	; 4
    23fe:	a6 95       	lsr	r26
    2400:	97 95       	ror	r25
    2402:	87 95       	ror	r24
    2404:	77 95       	ror	r23
    2406:	67 95       	ror	r22
    2408:	ba 95       	dec	r27
    240a:	c9 f7       	brne	.-14     	; 0x23fe <__ultoa_invert+0x86>
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	61 05       	cpc	r22, r1
    2410:	71 05       	cpc	r23, r1
    2412:	08 95       	ret
    2414:	9b 01       	movw	r18, r22
    2416:	ac 01       	movw	r20, r24
    2418:	0a 2e       	mov	r0, r26
    241a:	06 94       	lsr	r0
    241c:	57 95       	ror	r21
    241e:	47 95       	ror	r20
    2420:	37 95       	ror	r19
    2422:	27 95       	ror	r18
    2424:	ba 95       	dec	r27
    2426:	c9 f7       	brne	.-14     	; 0x241a <__ultoa_invert+0xa2>
    2428:	62 0f       	add	r22, r18
    242a:	73 1f       	adc	r23, r19
    242c:	84 1f       	adc	r24, r20
    242e:	95 1f       	adc	r25, r21
    2430:	a0 1d       	adc	r26, r0
    2432:	08 95       	ret

00002434 <_exit>:
    2434:	f8 94       	cli

00002436 <__stop_program>:
    2436:	ff cf       	rjmp	.-2      	; 0x2436 <__stop_program>
