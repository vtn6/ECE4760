
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000e9a  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800126  00800126  00000f54  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000053b  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001310  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000563  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f65  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089e  00000000  00000000  00004427  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_16>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  68:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  6c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000070 <LCDHelloTop>:
  70:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000082 <LCDHelloBot>:
  82:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

00000094 <LCDRange>:
  94:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

0000009d <LCDAutorangeOn>:
  9d:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000ac <LCD5Volts>:
  ac:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000b5 <LCD256Volts>:
  b5:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000c1 <LCD11Volts>:
  c1:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000cc <LCD1kOhm>:
  cc:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000d4 <LCD10kOhm>:
  d4:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000dd <LCD100kOhm>:
  dd:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000e7 <LCD1kHz>:
  e7:	31 20 6b 48 5a 00 00                                1 kHZ..

000000ee <LCD10kHz>:
  ee:	31 30 20 6b 48 5a 00 00                             10 kHZ..

000000f6 <LCDMode>:
  f6:	4d 4f 44 45 3a 20 00 00                             MODE: ..

000000fe <LCDVolt>:
  fe:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000010a <LCDOhm>:
 10a:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000114 <LCDFreq>:
 114:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

0000011f <LCDManWelcomeTop>:
 11f:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000012a <LCDManWelcomeBot>:
 12a:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

00000139 <LCDNavigation1Top>:
 139:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000014b <LCDNavigation1Bot>:
 14b:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000015d <LCDNavigation2Top>:
 15d:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

0000016e <LCDNavigation2Bot>:
 16e:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000017d <LCDVoltManTop>:
 17d:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

0000018e <LCDVoltManBot>:
 18e:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

00000199 <LCDOhmManTop>:
 199:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001a9 <LCDOhmManBot>:
 1a9:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001b3 <LCDFreqManTop>:
 1b3:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001c4 <LCDFreqManBot>:
 1c4:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001d1 <LCDAutorangeMan1Top>:
 1d1:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001de <LCDAutorangeMan1Bot>:
 1de:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001e9 <LCDAutorangeMan2Top>:
 1e9:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

000001f6 <LCDAutorangeMan2Bot>:
 1f6:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000207 <LcdCustomChar>:
 207:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
 217:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
 227:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
 237:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d0 e1       	ldi	r29, 0x10	; 16
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	ea e9       	ldi	r30, 0x9A	; 154
 25c:	fe e0       	ldi	r31, 0x0E	; 14
 25e:	02 c0       	rjmp	.+4      	; 0x264 <.do_copy_data_start>

00000260 <.do_copy_data_loop>:
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0

00000264 <.do_copy_data_start>:
 264:	a6 32       	cpi	r26, 0x26	; 38
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <.do_copy_data_loop>

0000026a <__do_clear_bss>:
 26a:	11 e0       	ldi	r17, 0x01	; 1
 26c:	a6 e2       	ldi	r26, 0x26	; 38
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
 272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
 274:	ae 38       	cpi	r26, 0x8E	; 142
 276:	b1 07       	cpc	r27, r17
 278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
 27a:	0e 94 8b 03 	call	0x716	; 0x716 <main>
 27e:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <_exit>

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
  	DDRD = 0x0f;
 286:	2f e0       	ldi	r18, 0x0F	; 15
 288:	2a b9       	out	0x0a, r18	; 10
  	PORTD = 0xf0; 
 28a:	80 ef       	ldi	r24, 0xF0	; 240
 28c:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 28e:	9a e1       	ldi	r25, 0x1A	; 26
 290:	39 2f       	mov	r19, r25
 292:	3a 95       	dec	r19
 294:	f1 f7       	brne	.-4      	; 0x292 <ScanKeypad+0xc>
  	_delay_us(5);
  	key = PIND;
 296:	39 b1       	in	r19, 0x09	; 9
  	  
  	//get upper nibble
  	DDRD = 0xf0;
 298:	8a b9       	out	0x0a, r24	; 10
  	PORTD = 0x0f; 
 29a:	2b b9       	out	0x0b, r18	; 11
 29c:	9a 95       	dec	r25
 29e:	f1 f7       	brne	.-4      	; 0x29c <ScanKeypad+0x16>
  	_delay_us(5);
  	key = key | PIND;
 2a0:	29 b1       	in	r18, 0x09	; 9
 2a2:	23 2b       	or	r18, r19
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
 2a4:	2f 3f       	cpi	r18, 0xFF	; 255
 2a6:	61 f0       	breq	.+24     	; 0x2c0 <ScanKeypad+0x3a>
 2a8:	ee e0       	ldi	r30, 0x0E	; 14
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
  	  begin   
  	  	if (keytbl[butnum]==key)  break;   
 2ae:	80 81       	ld	r24, Z
 2b0:	9f 5f       	subi	r25, 0xFF	; 255
 2b2:	82 17       	cp	r24, r18
 2b4:	11 f4       	brne	.+4      	; 0x2ba <ScanKeypad+0x34>
  	  end

  	  if (butnum==MAX_KEYS) butnum=0;
  	  else butnum++;	   //adjust by one to make range 1-16
 2b6:	89 2f       	mov	r24, r25
 2b8:	08 95       	ret
  	key = key | PIND;
  	  
  	//find matching keycode in keytbl
  	if (key != 0xff)
  	begin   
  	  for (butnum=0; butnum<MAX_KEYS; butnum++)
 2ba:	31 96       	adiw	r30, 0x01	; 1
 2bc:	90 31       	cpi	r25, 0x10	; 16
 2be:	b9 f7       	brne	.-18     	; 0x2ae <ScanKeypad+0x28>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
  	  else butnum++;	   //adjust by one to make range 1-16
  	end  
  	else butnum=0;
  	 
  	return butnum;
}
 2c2:	08 95       	ret

000002c4 <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
 2c4:	0e 94 43 01 	call	0x286	; 0x286 <ScanKeypad>
 2c8:	28 2f       	mov	r18, r24
	switch(keyState){
 2ca:	90 91 7c 01 	lds	r25, 0x017C
 2ce:	91 30       	cpi	r25, 0x01	; 1
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <Debounce+0x2c>
 2d2:	91 30       	cpi	r25, 0x01	; 1
 2d4:	20 f0       	brcs	.+8      	; 0x2de <Debounce+0x1a>
 2d6:	92 30       	cpi	r25, 0x02	; 2
 2d8:	09 f0       	breq	.+2      	; 0x2dc <Debounce+0x18>
 2da:	59 c0       	rjmp	.+178    	; 0x38e <Debounce+0xca>
 2dc:	2f c0       	rjmp	.+94     	; 0x33c <Debounce+0x78>
	
    //in the RELEASED state: stay in this state if a key is not pressed
    //go to UNKNOWN if any key is pressed and reset the debounce countdown.
    case RELEASED:
	  if (key){
 2de:	88 23       	and	r24, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <Debounce+0x20>
 2e2:	55 c0       	rjmp	.+170    	; 0x38e <Debounce+0xca>
        keyState = UNKNOWN;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 7c 01 	sts	0x017C, r24
		prevKeyState = RELEASED;
 2ea:	10 92 7f 01 	sts	0x017F, r1
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <Debounce+0x44>

    //in the UNKNOWN state: go to released if the button is not down Update
    //pressedAndReleased if the button was previously pressed.
    //go to PUSHED if the button is down
    case UNKNOWN:
	  if (key){
 2f0:	88 23       	and	r24, r24
 2f2:	b1 f0       	breq	.+44     	; 0x320 <Debounce+0x5c>
	  	if (key == checkKey){
 2f4:	80 91 83 01 	lds	r24, 0x0183
 2f8:	28 17       	cp	r18, r24
 2fa:	31 f4       	brne	.+12     	; 0x308 <Debounce+0x44>
		  keyState = PUSHED;
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	80 93 7c 01 	sts	0x017C, r24
		  prevKeyState = UNKNOWN;
 302:	90 93 7f 01 	sts	0x017F, r25
 306:	08 95       	ret
		}
		else {
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
 308:	80 91 79 01 	lds	r24, 0x0179
 30c:	90 91 7a 01 	lds	r25, 0x017A
 310:	4e 96       	adiw	r24, 0x1e	; 30
 312:	90 93 82 01 	sts	0x0182, r25
 316:	80 93 81 01 	sts	0x0181, r24
		  checkKey = key;
 31a:	20 93 83 01 	sts	0x0183, r18
 31e:	08 95       	ret
		}
      }
      else{
	    keyState = RELEASED;
 320:	10 92 7c 01 	sts	0x017C, r1
	    if (prevKeyState == PUSHED) {
 324:	80 91 7f 01 	lds	r24, 0x017F
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	21 f4       	brne	.+8      	; 0x334 <Debounce+0x70>
		  curKey = checkKey; //The key to be checked has been pressed and debounced
 32c:	80 91 83 01 	lds	r24, 0x0183
 330:	80 93 80 01 	sts	0x0180, r24
	    }
		prevKeyState = UNKNOWN;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 7f 01 	sts	0x017F, r24
 33a:	08 95       	ret
      break;

    //in the PUSHED state go to UnKnown if the button is not down.
    //stay in PUSHED if the button is down
    case PUSHED:
	  if (!key){
 33c:	88 23       	and	r24, r24
 33e:	79 f4       	brne	.+30     	; 0x35e <Debounce+0x9a>
	  	keyState = UNKNOWN;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 7c 01 	sts	0x017C, r24
		prevKeyState = PUSHED;
 346:	90 93 7f 01 	sts	0x017F, r25
        debounceTime = elapsedTime + DEBOUNCE_TIME;
 34a:	80 91 79 01 	lds	r24, 0x0179
 34e:	90 91 7a 01 	lds	r25, 0x017A
 352:	4e 96       	adiw	r24, 0x1e	; 30
 354:	90 93 82 01 	sts	0x0182, r25
 358:	80 93 81 01 	sts	0x0181, r24
 35c:	08 95       	ret
      }
	  else{
	  	if (key != checkKey){
 35e:	80 91 83 01 	lds	r24, 0x0183
 362:	28 17       	cp	r18, r24
 364:	a1 f0       	breq	.+40     	; 0x38e <Debounce+0xca>
		  keyState = UNKNOWN;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 7c 01 	sts	0x017C, r24
		  prevKeyState = RELEASED; //...???
 36c:	10 92 7f 01 	sts	0x017F, r1
		  debounceTime = elapsedTime + DEBOUNCE_TIME;
 370:	80 91 79 01 	lds	r24, 0x0179
 374:	90 91 7a 01 	lds	r25, 0x017A
 378:	4e 96       	adiw	r24, 0x1e	; 30
 37a:	90 93 82 01 	sts	0x0182, r25
 37e:	80 93 81 01 	sts	0x0181, r24
		  curKey = checkKey;
 382:	80 91 83 01 	lds	r24, 0x0183
 386:	80 93 80 01 	sts	0x0180, r24
		  checkKey = key;
 38a:	20 93 83 01 	sts	0x0183, r18
 38e:	08 95       	ret

00000390 <getCurKey>:
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
 390:	90 91 80 01 	lds	r25, 0x0180
	if (curKey){
 394:	80 91 80 01 	lds	r24, 0x0180
 398:	88 23       	and	r24, r24
 39a:	11 f0       	breq	.+4      	; 0x3a0 <getCurKey+0x10>
		curKey = 0;
 39c:	10 92 80 01 	sts	0x0180, r1
	}
	return tmpKey;
}
 3a0:	89 2f       	mov	r24, r25
 3a2:	08 95       	ret

000003a4 <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
 3a4:	90 91 86 01 	lds	r25, 0x0186
 3a8:	93 30       	cpi	r25, 0x03	; 3
 3aa:	c1 f1       	breq	.+112    	; 0x41c <UpdateManState+0x78>
 3ac:	94 30       	cpi	r25, 0x04	; 4
 3ae:	28 f4       	brcc	.+10     	; 0x3ba <UpdateManState+0x16>
 3b0:	91 30       	cpi	r25, 0x01	; 1
 3b2:	99 f0       	breq	.+38     	; 0x3da <UpdateManState+0x36>
 3b4:	92 30       	cpi	r25, 0x02	; 2
 3b6:	30 f5       	brcc	.+76     	; 0x404 <UpdateManState+0x60>
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <UpdateManState+0x2e>
 3ba:	95 30       	cpi	r25, 0x05	; 5
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <UpdateManState+0x1c>
 3be:	40 c0       	rjmp	.+128    	; 0x440 <UpdateManState+0x9c>
 3c0:	95 30       	cpi	r25, 0x05	; 5
 3c2:	a8 f1       	brcs	.+106    	; 0x42e <UpdateManState+0x8a>
 3c4:	96 30       	cpi	r25, 0x06	; 6
 3c6:	09 f4       	brne	.+2      	; 0x3ca <UpdateManState+0x26>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <UpdateManState+0xae>
 3ca:	97 30       	cpi	r25, 0x07	; 7
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <UpdateManState+0x2c>
 3ce:	68 c0       	rjmp	.+208    	; 0x4a0 <UpdateManState+0xfc>
 3d0:	4a c0       	rjmp	.+148    	; 0x466 <UpdateManState+0xc2>
		case WELCOME:
			if (key){
 3d2:	88 23       	and	r24, r24
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <UpdateManState+0x34>
 3d6:	64 c0       	rjmp	.+200    	; 0x4a0 <UpdateManState+0xfc>
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
	    case NAVIGATION_1:
			if (key == 0x10){
 3da:	80 31       	cpi	r24, 0x10	; 16
 3dc:	29 f4       	brne	.+10     	; 0x3e8 <UpdateManState+0x44>
				mode = returnMode;
 3de:	80 91 84 01 	lds	r24, 0x0184
 3e2:	80 93 7e 01 	sts	0x017E, r24
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 3e8:	8e 30       	cpi	r24, 0x0E	; 14
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <UpdateManState+0x4e>
				manPage = WELCOME;
 3ec:	10 92 86 01 	sts	0x0186, r1
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 3f2:	8f 30       	cpi	r24, 0x0F	; 15
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <UpdateManState+0x54>
 3f6:	54 c0       	rjmp	.+168    	; 0x4a0 <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 86 01 	sts	0x0186, r24
				justSwitched = 1;
 3fe:	90 93 87 01 	sts	0x0187, r25
 402:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
 404:	80 31       	cpi	r24, 0x10	; 16
 406:	89 f1       	breq	.+98     	; 0x46a <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 408:	8e 30       	cpi	r24, 0x0E	; 14
 40a:	21 f4       	brne	.+8      	; 0x414 <UpdateManState+0x70>
				manPage = NAVIGATION_1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 86 01 	sts	0x0186, r24
 412:	38 c0       	rjmp	.+112    	; 0x484 <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 414:	8f 30       	cpi	r24, 0x0F	; 15
 416:	09 f0       	breq	.+2      	; 0x41a <UpdateManState+0x76>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <UpdateManState+0xfc>
 41a:	0d c0       	rjmp	.+26     	; 0x436 <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
 41c:	80 31       	cpi	r24, 0x10	; 16
 41e:	29 f1       	breq	.+74     	; 0x46a <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 420:	8e 30       	cpi	r24, 0x0E	; 14
 422:	11 f4       	brne	.+4      	; 0x428 <UpdateManState+0x84>
				manPage = NAVIGATION_2;
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	2b c0       	rjmp	.+86     	; 0x47e <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 428:	8f 30       	cpi	r24, 0x0F	; 15
 42a:	d1 f5       	brne	.+116    	; 0x4a0 <UpdateManState+0xfc>
 42c:	0d c0       	rjmp	.+26     	; 0x448 <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
 42e:	80 31       	cpi	r24, 0x10	; 16
 430:	e1 f0       	breq	.+56     	; 0x46a <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 432:	8e 30       	cpi	r24, 0x0E	; 14
 434:	11 f4       	brne	.+4      	; 0x43a <UpdateManState+0x96>
				manPage = VOLT_MAN;
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	22 c0       	rjmp	.+68     	; 0x47e <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 43a:	8f 30       	cpi	r24, 0x0F	; 15
 43c:	89 f5       	brne	.+98     	; 0x4a0 <UpdateManState+0xfc>
 43e:	0d c0       	rjmp	.+26     	; 0x45a <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
 440:	80 31       	cpi	r24, 0x10	; 16
 442:	99 f0       	breq	.+38     	; 0x46a <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 444:	8e 30       	cpi	r24, 0x0E	; 14
 446:	11 f4       	brne	.+4      	; 0x44c <UpdateManState+0xa8>
				manPage = OHM_MAN;
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	19 c0       	rjmp	.+50     	; 0x47e <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 44c:	8f 30       	cpi	r24, 0x0F	; 15
 44e:	41 f5       	brne	.+80     	; 0x4a0 <UpdateManState+0xfc>
 450:	15 c0       	rjmp	.+42     	; 0x47c <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
 452:	80 31       	cpi	r24, 0x10	; 16
 454:	51 f0       	breq	.+20     	; 0x46a <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
 456:	8e 30       	cpi	r24, 0x0E	; 14
 458:	11 f4       	brne	.+4      	; 0x45e <UpdateManState+0xba>
				manPage = FREQ_MAN;
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	10 c0       	rjmp	.+32     	; 0x47e <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
 45e:	8f 30       	cpi	r24, 0x0F	; 15
 460:	f9 f4       	brne	.+62     	; 0x4a0 <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
 462:	87 e0       	ldi	r24, 0x07	; 7
 464:	0c c0       	rjmp	.+24     	; 0x47e <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
 466:	80 31       	cpi	r24, 0x10	; 16
 468:	39 f4       	brne	.+14     	; 0x478 <UpdateManState+0xd4>
				mode = returnMode;
 46a:	80 91 84 01 	lds	r24, 0x0184
 46e:	80 93 7e 01 	sts	0x017E, r24
				manPage = WELCOME;
 472:	10 92 86 01 	sts	0x0186, r1
 476:	05 c0       	rjmp	.+10     	; 0x482 <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
 478:	8e 30       	cpi	r24, 0x0E	; 14
 47a:	39 f4       	brne	.+14     	; 0x48a <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 86 01 	sts	0x0186, r24
				justSwitched = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	80 93 87 01 	sts	0x0187, r24
 488:	08 95       	ret
			}
			else if (key == 0x0F){
 48a:	8f 30       	cpi	r24, 0x0F	; 15
 48c:	49 f4       	brne	.+18     	; 0x4a0 <UpdateManState+0xfc>
				mode = returnMode;
 48e:	80 91 84 01 	lds	r24, 0x0184
 492:	80 93 7e 01 	sts	0x017E, r24
				manPage = WELCOME;
 496:	10 92 86 01 	sts	0x0186, r1
				justSwitched = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 87 01 	sts	0x0187, r24
 4a0:	08 95       	ret

000004a2 <UpdateDMMState>:
  sei();

}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
 4a2:	20 91 80 01 	lds	r18, 0x0180
	if (curKey){
 4a6:	80 91 80 01 	lds	r24, 0x0180
 4aa:	88 23       	and	r24, r24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <UpdateDMMState+0x10>
		curKey = 0;
 4ae:	10 92 80 01 	sts	0x0180, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
 4b2:	22 23       	and	r18, r18
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <UpdateDMMState+0x16>
 4b6:	a6 c0       	rjmp	.+332    	; 0x604 <UpdateDMMState+0x162>
 4b8:	80 91 87 01 	lds	r24, 0x0187
 4bc:	88 23       	and	r24, r24
 4be:	09 f0       	breq	.+2      	; 0x4c2 <UpdateDMMState+0x20>
 4c0:	a1 c0       	rjmp	.+322    	; 0x604 <UpdateDMMState+0x162>
		switch (mode){
 4c2:	90 91 7e 01 	lds	r25, 0x017E
 4c6:	92 30       	cpi	r25, 0x02	; 2
 4c8:	f1 f0       	breq	.+60     	; 0x506 <UpdateDMMState+0x64>
 4ca:	93 30       	cpi	r25, 0x03	; 3
 4cc:	30 f4       	brcc	.+12     	; 0x4da <UpdateDMMState+0x38>
 4ce:	99 23       	and	r25, r25
 4d0:	51 f0       	breq	.+20     	; 0x4e6 <UpdateDMMState+0x44>
 4d2:	91 30       	cpi	r25, 0x01	; 1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <UpdateDMMState+0x36>
 4d6:	96 c0       	rjmp	.+300    	; 0x604 <UpdateDMMState+0x162>
 4d8:	12 c0       	rjmp	.+36     	; 0x4fe <UpdateDMMState+0x5c>
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	51 f1       	breq	.+84     	; 0x532 <UpdateDMMState+0x90>
 4de:	94 30       	cpi	r25, 0x04	; 4
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <UpdateDMMState+0x42>
 4e2:	90 c0       	rjmp	.+288    	; 0x604 <UpdateDMMState+0x162>
 4e4:	50 c0       	rjmp	.+160    	; 0x586 <UpdateDMMState+0xe4>
			case INIT:
				if (key == 0x0F){
 4e6:	2f 30       	cpi	r18, 0x0F	; 15
 4e8:	31 f4       	brne	.+12     	; 0x4f6 <UpdateDMMState+0x54>
					PORTB = ~0x20;
 4ea:	8f ed       	ldi	r24, 0xDF	; 223
 4ec:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	80 93 84 01 	sts	0x0184, r24
 4f4:	22 c0       	rjmp	.+68     	; 0x53a <UpdateDMMState+0x98>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					mode = VOLTMETER;
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	80 93 7e 01 	sts	0x017E, r24
 4fc:	6d c0       	rjmp	.+218    	; 0x5d8 <UpdateDMMState+0x136>
					justSwitched = 1;
				}
				break; 

			case MAN:
				UpdateManState(key);
 4fe:	82 2f       	mov	r24, r18
 500:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UpdateManState>
 504:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
 506:	2f 30       	cpi	r18, 0x0F	; 15
 508:	31 f4       	brne	.+12     	; 0x516 <UpdateDMMState+0x74>
					mode = MAN;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 7e 01 	sts	0x017E, r24
					returnMode = VOLTMETER;
 510:	90 93 84 01 	sts	0x0184, r25
 514:	62 c0       	rjmp	.+196    	; 0x5da <UpdateDMMState+0x138>
					justSwitched = 1;
				}
				else if (key == 0x0D){
 516:	2d 30       	cpi	r18, 0x0D	; 13
 518:	d1 f1       	breq	.+116    	; 0x58e <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
 51a:	80 91 7b 01 	lds	r24, 0x017B
 51e:	88 23       	and	r24, r24
 520:	11 f4       	brne	.+4      	; 0x526 <UpdateDMMState+0x84>
 522:	21 30       	cpi	r18, 0x01	; 1
 524:	b1 f0       	breq	.+44     	; 0x552 <UpdateDMMState+0xb0>
					rangeIdx++;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
 526:	2b 30       	cpi	r18, 0x0B	; 11
 528:	31 f5       	brne	.+76     	; 0x576 <UpdateDMMState+0xd4>
					mode = OHMMETER;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	80 93 7e 01 	sts	0x017E, r24
 530:	49 c0       	rjmp	.+146    	; 0x5c4 <UpdateDMMState+0x122>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
 532:	2f 30       	cpi	r18, 0x0F	; 15
 534:	31 f4       	brne	.+12     	; 0x542 <UpdateDMMState+0xa0>
					returnMode = OHMMETER;
 536:	90 93 84 01 	sts	0x0184, r25
					mode = MAN;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	80 93 7e 01 	sts	0x017E, r24
 540:	4c c0       	rjmp	.+152    	; 0x5da <UpdateDMMState+0x138>
					justSwitched = 1;
				}
				else if (key == 0x0D){
 542:	2d 30       	cpi	r18, 0x0D	; 13
 544:	21 f1       	breq	.+72     	; 0x58e <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
 546:	80 91 7b 01 	lds	r24, 0x017B
 54a:	88 23       	and	r24, r24
 54c:	91 f4       	brne	.+36     	; 0x572 <UpdateDMMState+0xd0>
 54e:	21 30       	cpi	r18, 0x01	; 1
 550:	81 f4       	brne	.+32     	; 0x572 <UpdateDMMState+0xd0>
					rangeIdx++;
 552:	80 91 85 01 	lds	r24, 0x0185
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	80 93 85 01 	sts	0x0185, r24
					rangeIdx = rangeIdx % rangeIdxMod;
 55c:	80 91 85 01 	lds	r24, 0x0185
 560:	60 91 78 01 	lds	r22, 0x0178
 564:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodqi4>
 568:	90 93 85 01 	sts	0x0185, r25
					justSwitched = 1;
 56c:	20 93 87 01 	sts	0x0187, r18
 570:	08 95       	ret
				}
				else if (key == 0x0A){
 572:	2a 30       	cpi	r18, 0x0A	; 10
 574:	19 f1       	breq	.+70     	; 0x5bc <UpdateDMMState+0x11a>
					mode = VOLTMETER;
					rangeIdxMod = 3;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0C){
 576:	2c 30       	cpi	r18, 0x0C	; 12
 578:	09 f0       	breq	.+2      	; 0x57c <UpdateDMMState+0xda>
 57a:	44 c0       	rjmp	.+136    	; 0x604 <UpdateDMMState+0x162>
					mode = FREQMETER;
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	80 93 7e 01 	sts	0x017E, r24
					rangeIdxMod = 2;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	1f c0       	rjmp	.+62     	; 0x5c4 <UpdateDMMState+0x122>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
 586:	2f 30       	cpi	r18, 0x0F	; 15
 588:	b1 f2       	breq	.-84     	; 0x536 <UpdateDMMState+0x94>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
 58a:	2d 30       	cpi	r18, 0x0D	; 13
 58c:	49 f4       	brne	.+18     	; 0x5a0 <UpdateDMMState+0xfe>
					autoRange ^= 1;
 58e:	80 91 7b 01 	lds	r24, 0x017B
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	89 27       	eor	r24, r25
 596:	80 93 7b 01 	sts	0x017B, r24
					justSwitched = 1;
 59a:	90 93 87 01 	sts	0x0187, r25
 59e:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
 5a0:	80 91 7b 01 	lds	r24, 0x017B
 5a4:	88 23       	and	r24, r24
 5a6:	41 f4       	brne	.+16     	; 0x5b8 <UpdateDMMState+0x116>
 5a8:	21 30       	cpi	r18, 0x01	; 1
 5aa:	31 f4       	brne	.+12     	; 0x5b8 <UpdateDMMState+0x116>
					rangeIdx++;
 5ac:	80 91 85 01 	lds	r24, 0x0185
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	80 93 85 01 	sts	0x0185, r24
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <UpdateDMMState+0x126>
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0A){
 5b8:	2a 30       	cpi	r18, 0x0A	; 10
 5ba:	91 f4       	brne	.+36     	; 0x5e0 <UpdateDMMState+0x13e>
					mode = VOLTMETER;
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	80 93 7e 01 	sts	0x017E, r24
					rangeIdxMod = 3;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	80 93 78 01 	sts	0x0178, r24
					rangeIdx = rangeIdx % rangeIdxMod;
 5c8:	80 91 85 01 	lds	r24, 0x0185
 5cc:	60 91 78 01 	lds	r22, 0x0178
 5d0:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodqi4>
 5d4:	90 93 85 01 	sts	0x0185, r25
					justSwitched = 1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 87 01 	sts	0x0187, r24
 5de:	08 95       	ret
				}
				else if (key == 0x0B){
 5e0:	2b 30       	cpi	r18, 0x0B	; 11
 5e2:	81 f4       	brne	.+32     	; 0x604 <UpdateDMMState+0x162>
					mode = OHMMETER;
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	80 93 7e 01 	sts	0x017E, r24
					rangeIdxMod = 3;
 5ea:	80 93 78 01 	sts	0x0178, r24
					rangeIdx = rangeIdx % rangeIdxMod;
 5ee:	80 91 85 01 	lds	r24, 0x0185
 5f2:	60 91 78 01 	lds	r22, 0x0178
 5f6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__udivmodqi4>
 5fa:	90 93 85 01 	sts	0x0185, r25
					justSwitched = 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 87 01 	sts	0x0187, r24
 604:	08 95       	ret

00000606 <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31

	//Check to see if we are currently debouncing a signal
	//if the signal isn't being debounced, checK if the button has been pressed
	//if we are waiting for it to be pressed or checK if it is not pressed if we are waiting for
	//the release event
	if (++elapsedTime >= debounceTime){
 628:	80 91 79 01 	lds	r24, 0x0179
 62c:	90 91 7a 01 	lds	r25, 0x017A
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	90 93 7a 01 	sts	0x017A, r25
 636:	80 93 79 01 	sts	0x0179, r24
 63a:	20 91 79 01 	lds	r18, 0x0179
 63e:	30 91 7a 01 	lds	r19, 0x017A
 642:	80 91 81 01 	lds	r24, 0x0181
 646:	90 91 82 01 	lds	r25, 0x0182
 64a:	28 17       	cp	r18, r24
 64c:	39 07       	cpc	r19, r25
 64e:	20 f0       	brcs	.+8      	; 0x658 <__vector_16+0x52>
		Debounce();
 650:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Debounce>
		UpdateDMMState();
 654:	0e 94 51 02 	call	0x4a2	; 0x4a2 <UpdateDMMState>
	}
}
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	7f 91       	pop	r23
 666:	6f 91       	pop	r22
 668:	5f 91       	pop	r21
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
 67a:	0e 94 18 05 	call	0xa30	; 0xa30 <LCDinit>
	LCDcursorOFF();
 67e:	0e 94 80 05 	call	0xb00	; 0xb00 <LCDcursorOFF>
	LCDclr();				//clear the display
 682:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
	LCDGotoXY(0,0);
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	0e 94 ce 04 	call	0x99c	; 0x99c <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
 68e:	80 e7       	ldi	r24, 0x70	; 112
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
 69a:	82 e8       	ldi	r24, 0x82	; 130
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
}
 6a6:	08 95       	ret

000006a8 <Initialize>:
	  }
      break;
  }
}

void Initialize(void) {
 6a8:	1f 93       	push	r17
  //set up the ports
  triggerPoll = 0;
 6aa:	10 92 7d 01 	sts	0x017D, r1

  //init the A to D converter
  //channel zero/ left adj /EXTERNAL Aref
  //!!!CONNECT Aref jumper!!!!
  ADMUX = (1<<ADLAR);
 6ae:	80 e2       	ldi	r24, 0x20	; 32
 6b0:	80 93 7c 00 	sts	0x007C, r24

  //enable ADC and set prescaler to 1/128*16MHz=125,000
  //and clear interupt enable
  //and start a conversion
  ADCSRA = (1<<ADEN) | (1<<ADSC) + 7;
 6b4:	87 ec       	ldi	r24, 0xC7	; 199
 6b6:	80 93 7a 00 	sts	0x007A, r24

  // Set A to input (high impedence)
  // Set E as output
  // Set D as input
  DDRA = 0xff;
 6ba:	1f ef       	ldi	r17, 0xFF	; 255
 6bc:	11 b9       	out	0x01, r17	; 1
  // Set to an input to send high
  PORTA = 0xff;
 6be:	12 b9       	out	0x02, r17	; 2

  //DDRE = 0xff;
  //PORTE = 0;
  
  // PortB: LEDs, output
  DDRB=0xff;
 6c0:	14 b9       	out	0x04, r17	; 4
  PORTB=0xff;
 6c2:	15 b9       	out	0x05, r17	; 5
  // PortD: Keypad
  DDRD=0x00;
 6c4:	1a b8       	out	0x0a, r1	; 10

  //set up timer 0 for 1 mSec ticks
  TIMSK0 = 2;		//turn on timer 0 cmp match ISR
 6c6:	92 e0       	ldi	r25, 0x02	; 2
 6c8:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249;  	//set the compare reg to 250 time ticks
 6cc:	89 ef       	ldi	r24, 0xF9	; 249
 6ce:	87 bd       	out	0x27, r24	; 39
  TCCR0A = 0b00000010; // turn on clear-on-match
 6d0:	94 bd       	out	0x24, r25	; 36
  TCCR0B = 0b00000011;	// clock prescalar to 64
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	85 bd       	out	0x25, r24	; 37

  //initialize the current key to null
  curKey = 0;
 6d6:	10 92 80 01 	sts	0x0180, r1
  elapsedTime = 0;
 6da:	10 92 7a 01 	sts	0x017A, r1
 6de:	10 92 79 01 	sts	0x0179, r1
  debounceTime = 0;
 6e2:	10 92 82 01 	sts	0x0182, r1
 6e6:	10 92 81 01 	sts	0x0181, r1
  autoRange = 0;
 6ea:	10 92 7b 01 	sts	0x017B, r1
  mode = INIT;
 6ee:	10 92 7e 01 	sts	0x017E, r1
  manPage = WELCOME;
 6f2:	10 92 86 01 	sts	0x0186, r1
  keyState = RELEASED;
 6f6:	10 92 7c 01 	sts	0x017C, r1
  rangeIdx = 0;
 6fa:	10 92 85 01 	sts	0x0185, r1
  rangeIdxMod = 3;
 6fe:	80 93 78 01 	sts	0x0178, r24
  justSwitched = 0;
 702:	10 92 87 01 	sts	0x0187, r1
  PORTB = ~0x01;
 706:	8e ef       	ldi	r24, 0xFE	; 254
 708:	85 b9       	out	0x05, r24	; 5
  InitLCD();
 70a:	0e 94 3d 03 	call	0x67a	; 0x67a <InitLCD>
  PORTB = 0xFF;
 70e:	15 b9       	out	0x05, r17	; 5
  sei();
 710:	78 94       	sei

}
 712:	1f 91       	pop	r17
 714:	08 95       	ret

00000716 <main>:
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
	Initialize();
 716:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Initialize>
	
	while(1){
	uint8_t key = curKey;
 71a:	80 91 80 01 	lds	r24, 0x0180
		if (key){
 71e:	88 23       	and	r24, r24
 720:	11 f0       	breq	.+4      	; 0x726 <main+0x10>
			PORTB = ~key;
 722:	80 95       	com	r24
 724:	85 b9       	out	0x05, r24	; 5
		}
	    if (justSwitched){
 726:	80 91 87 01 	lds	r24, 0x0187
 72a:	88 23       	and	r24, r24
 72c:	b1 f3       	breq	.-20     	; 0x71a <main+0x4>
			switch (mode){
 72e:	80 91 7e 01 	lds	r24, 0x017E
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	09 f4       	brne	.+2      	; 0x738 <main+0x22>
 736:	7c c0       	rjmp	.+248    	; 0x830 <main+0x11a>
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	20 f4       	brcc	.+8      	; 0x744 <main+0x2e>
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	09 f0       	breq	.+2      	; 0x742 <main+0x2c>
 740:	cf c0       	rjmp	.+414    	; 0x8e0 <main+0x1ca>
 742:	07 c0       	rjmp	.+14     	; 0x752 <main+0x3c>
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	09 f4       	brne	.+2      	; 0x74a <main+0x34>
 748:	8e c0       	rjmp	.+284    	; 0x866 <main+0x150>
 74a:	84 30       	cpi	r24, 0x04	; 4
 74c:	09 f0       	breq	.+2      	; 0x750 <main+0x3a>
 74e:	c8 c0       	rjmp	.+400    	; 0x8e0 <main+0x1ca>
 750:	a5 c0       	rjmp	.+330    	; 0x89c <main+0x186>
				case MAN:
		  			switch (manPage){
 752:	80 91 86 01 	lds	r24, 0x0186
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	a1 f1       	breq	.+104    	; 0x7c2 <main+0xac>
 75a:	84 30       	cpi	r24, 0x04	; 4
 75c:	28 f4       	brcc	.+10     	; 0x768 <main+0x52>
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	d1 f0       	breq	.+52     	; 0x796 <main+0x80>
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	18 f5       	brcc	.+70     	; 0x7ac <main+0x96>
 766:	0c c0       	rjmp	.+24     	; 0x780 <main+0x6a>
 768:	85 30       	cpi	r24, 0x05	; 5
 76a:	09 f4       	brne	.+2      	; 0x76e <main+0x58>
 76c:	40 c0       	rjmp	.+128    	; 0x7ee <main+0xd8>
 76e:	85 30       	cpi	r24, 0x05	; 5
 770:	98 f1       	brcs	.+102    	; 0x7d8 <main+0xc2>
 772:	86 30       	cpi	r24, 0x06	; 6
 774:	09 f4       	brne	.+2      	; 0x778 <main+0x62>
 776:	46 c0       	rjmp	.+140    	; 0x804 <main+0xee>
 778:	87 30       	cpi	r24, 0x07	; 7
 77a:	09 f0       	breq	.+2      	; 0x77e <main+0x68>
 77c:	b1 c0       	rjmp	.+354    	; 0x8e0 <main+0x1ca>
 77e:	4d c0       	rjmp	.+154    	; 0x81a <main+0x104>
					  	case WELCOME:
							LCDclr();
 780:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
 784:	8f e1       	ldi	r24, 0x1F	; 31
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
 790:	8a e2       	ldi	r24, 0x2A	; 42
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	97 c0       	rjmp	.+302    	; 0x8c4 <main+0x1ae>
							break;
					    case NAVIGATION_1:
							LCDclr();
 796:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDNavigation1Top, 0, 0);
 79a:	89 e3       	ldi	r24, 0x39	; 57
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	40 e0       	ldi	r20, 0x00	; 0
 7a2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
 7a6:	8b e4       	ldi	r24, 0x4B	; 75
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	8c c0       	rjmp	.+280    	; 0x8c4 <main+0x1ae>
							break;
						case NAVIGATION_2:
							LCDclr();
 7ac:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDNavigation2Top, 0, 0);
 7b0:	8d e5       	ldi	r24, 0x5D	; 93
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
 7bc:	8e e6       	ldi	r24, 0x6E	; 110
 7be:	91 e0       	ldi	r25, 0x01	; 1
 7c0:	81 c0       	rjmp	.+258    	; 0x8c4 <main+0x1ae>
							break;
					 	case VOLT_MAN:
							LCDclr();
 7c2:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDVoltManTop, 0, 0);
 7c6:	8d e7       	ldi	r24, 0x7D	; 125
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDVoltManBot, 0, 1);
 7d2:	8e e8       	ldi	r24, 0x8E	; 142
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	76 c0       	rjmp	.+236    	; 0x8c4 <main+0x1ae>
							break;
						case OHM_MAN:
							LCDclr();
 7d8:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDOhmManTop, 0, 0);
 7dc:	89 e9       	ldi	r24, 0x99	; 153
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDOhmManBot, 0, 1);
 7e8:	89 ea       	ldi	r24, 0xA9	; 169
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	6b c0       	rjmp	.+214    	; 0x8c4 <main+0x1ae>
							break;
						case FREQ_MAN:
							LCDclr();
 7ee:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDFreqManTop, 0, 0);
 7f2:	83 eb       	ldi	r24, 0xB3	; 179
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDFreqManTop, 0, 1);
 7fe:	83 eb       	ldi	r24, 0xB3	; 179
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	60 c0       	rjmp	.+192    	; 0x8c4 <main+0x1ae>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
 804:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
 808:	81 ed       	ldi	r24, 0xD1	; 209
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
 814:	8e ed       	ldi	r24, 0xDE	; 222
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	55 c0       	rjmp	.+170    	; 0x8c4 <main+0x1ae>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
 81a:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
					  		CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
 81e:	89 ee       	ldi	r24, 0xE9	; 233
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					  		CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
 82a:	86 ef       	ldi	r24, 0xF6	; 246
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	4a c0       	rjmp	.+148    	; 0x8c4 <main+0x1ae>
							break;
					}
			    		break;

				case VOLTMETER:
			    	LCDclr();
 830:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
 834:	86 ef       	ldi	r24, 0xF6	; 246
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
 840:	8e ef       	ldi	r24, 0xFE	; 254
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	66 e0       	ldi	r22, 0x06	; 6
 846:	40 e0       	ldi	r20, 0x00	; 0
 848:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
					if (autoRange){
 84c:	80 91 7b 01 	lds	r24, 0x017B
 850:	88 23       	and	r24, r24
 852:	b1 f5       	brne	.+108    	; 0x8c0 <main+0x1aa>
				  		CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
 854:	84 e9       	ldi	r24, 0x94	; 148
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
						CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
 860:	8c ea       	ldi	r24, 0xAC	; 172
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	39 c0       	rjmp	.+114    	; 0x8d8 <main+0x1c2>
				  	}
			    	break;

			  	case OHMMETER:
			    	LCDclr();
 866:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
 86a:	86 ef       	ldi	r24, 0xF6	; 246
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	40 e0       	ldi	r20, 0x00	; 0
 872:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDOhm, MODE_START, 0);
 876:	8a e0       	ldi	r24, 0x0A	; 10
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	66 e0       	ldi	r22, 0x06	; 6
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
				  	if (autoRange){
 882:	80 91 7b 01 	lds	r24, 0x017B
 886:	88 23       	and	r24, r24
 888:	d9 f4       	brne	.+54     	; 0x8c0 <main+0x1aa>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
 88a:	84 e9       	ldi	r24, 0x94	; 148
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	41 e0       	ldi	r20, 0x01	; 1
 892:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
						CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
 896:	8c ec       	ldi	r24, 0xCC	; 204
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	1e c0       	rjmp	.+60     	; 0x8d8 <main+0x1c2>
				  	}
			    	break;

			  	case FREQMETER:
			  		LCDclr();
 89c:	0e 94 b1 04 	call	0x962	; 0x962 <LCDclr>
				  	CopyStringtoLCD(LCDMode, 0, 0);
 8a0:	86 ef       	ldi	r24, 0xF6	; 246
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
				  	CopyStringtoLCD(LCDFreq, MODE_START, 0);
 8ac:	84 e1       	ldi	r24, 0x14	; 20
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	66 e0       	ldi	r22, 0x06	; 6
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
				  	if (autoRange){
 8b8:	80 91 7b 01 	lds	r24, 0x017B
 8bc:	88 23       	and	r24, r24
 8be:	21 f0       	breq	.+8      	; 0x8c8 <main+0x1b2>
				    	CopyStringtoLCD(LCDAutorangeOn, 0, 1);
 8c0:	8d e9       	ldi	r24, 0x9D	; 157
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <main+0x1c4>
				  	}
				  	else{
				  		CopyStringtoLCD(LCDRange, 0, 1);
 8c8:	84 e9       	ldi	r24, 0x94	; 148
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
						CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
 8d4:	8e ee       	ldi	r24, 0xEE	; 238
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	67 e0       	ldi	r22, 0x07	; 7
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <CopyStringtoLCD>
				  	}
				    break;
			}

			justSwitched = 0;
 8e0:	10 92 87 01 	sts	0x0187, r1
 8e4:	1a cf       	rjmp	.-460    	; 0x71a <main+0x4>

000008e6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 8e6:	28 2f       	mov	r18, r24
 8e8:	20 7f       	andi	r18, 0xF0	; 240
 8ea:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
 8ec:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 8ee:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8f0:	20 ea       	ldi	r18, 0xA0	; 160
 8f2:	3f e0       	ldi	r19, 0x0F	; 15
 8f4:	f9 01       	movw	r30, r18
 8f6:	31 97       	sbiw	r30, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 8fa:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 8fc:	40 98       	cbi	0x08, 0	; 8
 8fe:	f9 01       	movw	r30, r18
 900:	31 97       	sbiw	r30, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	44 e0       	ldi	r20, 0x04	; 4
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	4a 95       	dec	r20
 90e:	e1 f7       	brne	.-8      	; 0x908 <LCDsendChar+0x22>
 910:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
 912:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
 914:	42 9a       	sbi	0x08, 2	; 8
 916:	c9 01       	movw	r24, r18
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	f1 f7       	brne	.-4      	; 0x918 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 91c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
 91e:	40 98       	cbi	0x08, 0	; 8
 920:	c9 01       	movw	r24, r18
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 926:	08 95       	ret

00000928 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 928:	28 2f       	mov	r18, r24
 92a:	20 7f       	andi	r18, 0xF0	; 240
 92c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
 92e:	42 9a       	sbi	0x08, 2	; 8
 930:	20 ea       	ldi	r18, 0xA0	; 160
 932:	3f e0       	ldi	r19, 0x0F	; 15
 934:	f9 01       	movw	r30, r18
 936:	31 97       	sbiw	r30, 0x01	; 1
 938:	f1 f7       	brne	.-4      	; 0x936 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 93a:	42 98       	cbi	0x08, 2	; 8
 93c:	f9 01       	movw	r30, r18
 93e:	31 97       	sbiw	r30, 0x01	; 1
 940:	f1 f7       	brne	.-4      	; 0x93e <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	54 e0       	ldi	r21, 0x04	; 4
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	5a 95       	dec	r21
 94c:	e1 f7       	brne	.-8      	; 0x946 <LCDsendCommand+0x1e>
 94e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
 950:	42 9a       	sbi	0x08, 2	; 8
 952:	c9 01       	movw	r24, r18
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	f1 f7       	brne	.-4      	; 0x954 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 958:	42 98       	cbi	0x08, 2	; 8
 95a:	c9 01       	movw	r24, r18
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 960:	08 95       	ret

00000962 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 968:	08 95       	ret

0000096a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 970:	08 95       	ret

00000972 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	49 f0       	breq	.+18     	; 0x992 <LCDstring+0x20>
 980:	ec 01       	movw	r28, r24
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	04 c0       	rjmp	.+8      	; 0x98e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 986:	89 91       	ld	r24, Y+
 988:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 98c:	1f 5f       	subi	r17, 0xFF	; 255
 98e:	10 17       	cp	r17, r16
 990:	d0 f3       	brcs	.-12     	; 0x986 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	08 95       	ret

0000099c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 99c:	62 30       	cpi	r22, 0x02	; 2
 99e:	31 f0       	breq	.+12     	; 0x9ac <LCDGotoXY+0x10>
 9a0:	63 30       	cpi	r22, 0x03	; 3
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <LCDGotoXY+0x14>
 9a4:	61 30       	cpi	r22, 0x01	; 1
 9a6:	29 f4       	brne	.+10     	; 0x9b2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 9a8:	80 5c       	subi	r24, 0xC0	; 192
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 9ac:	8c 5e       	subi	r24, 0xEC	; 236
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 9b0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 9b2:	80 68       	ori	r24, 0x80	; 128
 9b4:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
	
}
 9b8:	08 95       	ret

000009ba <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	ec 01       	movw	r28, r24
 9c2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 9c4:	64 2f       	mov	r22, r20
 9c6:	0e 94 ce 04 	call	0x99c	; 0x99c <LCDGotoXY>
 9ca:	10 e0       	ldi	r17, 0x00	; 0
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 9ce:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 9d2:	1f 5f       	subi	r17, 0xFF	; 255
 9d4:	fe 01       	movw	r30, r28
 9d6:	e1 0f       	add	r30, r17
 9d8:	f1 1d       	adc	r31, r1
 9da:	84 91       	lpm	r24, Z+
 9dc:	88 23       	and	r24, r24
 9de:	b9 f7       	brne	.-18     	; 0x9ce <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	08 95       	ret

000009e8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 9e8:	ef 92       	push	r14
 9ea:	ff 92       	push	r15
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	7c 01       	movw	r14, r24
 9f6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 9f8:	11 0f       	add	r17, r17
 9fa:	11 0f       	add	r17, r17
 9fc:	11 0f       	add	r17, r17
 9fe:	10 64       	ori	r17, 0x40	; 64
 a00:	c0 e0       	ldi	r28, 0x00	; 0
 a02:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 a04:	f7 01       	movw	r30, r14
 a06:	ec 0f       	add	r30, r28
 a08:	fd 1f       	adc	r31, r29
 a0a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 a0c:	81 2f       	mov	r24, r17
 a0e:	8c 0f       	add	r24, r28
 a10:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
		LCDsendChar(pcc);
 a14:	80 2f       	mov	r24, r16
 a16:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 a1a:	21 96       	adiw	r28, 0x01	; 1
 a1c:	c8 30       	cpi	r28, 0x08	; 8
 a1e:	d1 05       	cpc	r29, r1
 a20:	89 f7       	brne	.-30     	; 0xa04 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	08 95       	ret

00000a30 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	80 e6       	ldi	r24, 0x60	; 96
 a38:	9a ee       	ldi	r25, 0xEA	; 234
 a3a:	01 97       	sbiw	r24, 0x01	; 1
 a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 a3e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
 a40:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 a42:	87 b1       	in	r24, 0x07	; 7
 a44:	80 6f       	ori	r24, 0xF0	; 240
 a46:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 a48:	87 b1       	in	r24, 0x07	; 7
 a4a:	87 60       	ori	r24, 0x07	; 7
 a4c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 a4e:	80 e3       	ldi	r24, 0x30	; 48
 a50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 a52:	42 9a       	sbi	0x08, 2	; 8
 a54:	20 ea       	ldi	r18, 0xA0	; 160
 a56:	3f e0       	ldi	r19, 0x0F	; 15
 a58:	f9 01       	movw	r30, r18
 a5a:	31 97       	sbiw	r30, 0x01	; 1
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a5e:	42 98       	cbi	0x08, 2	; 8
 a60:	f9 01       	movw	r30, r18
 a62:	31 97       	sbiw	r30, 0x01	; 1
 a64:	f1 f7       	brne	.-4      	; 0xa62 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 a66:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 a68:	42 9a       	sbi	0x08, 2	; 8
 a6a:	c9 01       	movw	r24, r18
 a6c:	01 97       	sbiw	r24, 0x01	; 1
 a6e:	f1 f7       	brne	.-4      	; 0xa6c <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a70:	42 98       	cbi	0x08, 2	; 8
 a72:	c9 01       	movw	r24, r18
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	f1 f7       	brne	.-4      	; 0xa74 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 a7c:	42 9a       	sbi	0x08, 2	; 8
 a7e:	c9 01       	movw	r24, r18
 a80:	01 97       	sbiw	r24, 0x01	; 1
 a82:	f1 f7       	brne	.-4      	; 0xa80 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a84:	42 98       	cbi	0x08, 2	; 8
 a86:	c9 01       	movw	r24, r18
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 a8c:	88 e2       	ldi	r24, 0x28	; 40
 a8e:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 a92:	8c e0       	ldi	r24, 0x0C	; 12
 a94:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
 a98:	c7 e0       	ldi	r28, 0x07	; 7
 a9a:	d2 e0       	ldi	r29, 0x02	; 2
 a9c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 a9e:	16 2f       	mov	r17, r22
 aa0:	1f 5f       	subi	r17, 0xFF	; 255
 aa2:	ce 01       	movw	r24, r28
 aa4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCDdefinechar>
 aa8:	28 96       	adiw	r28, 0x08	; 8
 aaa:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 aac:	18 30       	cpi	r17, 0x08	; 8
 aae:	b9 f7       	brne	.-18     	; 0xa9e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	08 95       	ret

00000ab8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 ab8:	0f 93       	push	r16
 aba:	1f 93       	push	r17
 abc:	08 2f       	mov	r16, r24
 abe:	10 e0       	ldi	r17, 0x00	; 0
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 ac2:	8e e1       	ldi	r24, 0x1E	; 30
 ac4:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 ac8:	1f 5f       	subi	r17, 0xFF	; 255
 aca:	10 17       	cp	r17, r16
 acc:	d0 f3       	brcs	.-12     	; 0xac2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 ad4:	0f 93       	push	r16
 ad6:	1f 93       	push	r17
 ad8:	08 2f       	mov	r16, r24
 ada:	10 e0       	ldi	r17, 0x00	; 0
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 ade:	88 e1       	ldi	r24, 0x18	; 24
 ae0:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 ae4:	1f 5f       	subi	r17, 0xFF	; 255
 ae6:	10 17       	cp	r17, r16
 ae8:	d0 f3       	brcs	.-12     	; 0xade <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	08 95       	ret

00000af0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 af0:	8e e0       	ldi	r24, 0x0E	; 14
 af2:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 af6:	08 95       	ret

00000af8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 af8:	8f e0       	ldi	r24, 0x0F	; 15
 afa:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 afe:	08 95       	ret

00000b00 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 b00:	8c e0       	ldi	r24, 0x0C	; 12
 b02:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 b06:	08 95       	ret

00000b08 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 b08:	88 e0       	ldi	r24, 0x08	; 8
 b0a:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 b0e:	08 95       	ret

00000b10 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 b10:	8c e0       	ldi	r24, 0x0C	; 12
 b12:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
}
 b16:	08 95       	ret

00000b18 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 b18:	0f 93       	push	r16
 b1a:	1f 93       	push	r17
 b1c:	08 2f       	mov	r16, r24
 b1e:	10 e0       	ldi	r17, 0x00	; 0
 b20:	04 c0       	rjmp	.+8      	; 0xb2a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 b22:	80 e1       	ldi	r24, 0x10	; 16
 b24:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 b28:	1f 5f       	subi	r17, 0xFF	; 255
 b2a:	10 17       	cp	r17, r16
 b2c:	d0 f3       	brcs	.-12     	; 0xb22 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 b34:	0f 93       	push	r16
 b36:	1f 93       	push	r17
 b38:	08 2f       	mov	r16, r24
 b3a:	10 e0       	ldi	r17, 0x00	; 0
 b3c:	04 c0       	rjmp	.+8      	; 0xb46 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 b3e:	84 e1       	ldi	r24, 0x14	; 20
 b40:	0e 94 94 04 	call	0x928	; 0x928 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 b44:	1f 5f       	subi	r17, 0xFF	; 255
 b46:	10 17       	cp	r17, r16
 b48:	d0 f3       	brcs	.-12     	; 0xb3e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 b4a:	1f 91       	pop	r17
 b4c:	0f 91       	pop	r16
 b4e:	08 95       	ret

00000b50 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 b50:	df 92       	push	r13
 b52:	ef 92       	push	r14
 b54:	ff 92       	push	r15
 b56:	0f 93       	push	r16
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 b60:	96 e0       	ldi	r25, 0x06	; 6
 b62:	89 9f       	mul	r24, r25
 b64:	c0 01       	movw	r24, r0
 b66:	11 24       	eor	r1, r1
 b68:	24 2f       	mov	r18, r20
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	ac 01       	movw	r20, r24
 b6e:	42 9f       	mul	r20, r18
 b70:	c0 01       	movw	r24, r0
 b72:	43 9f       	mul	r20, r19
 b74:	90 0d       	add	r25, r0
 b76:	52 9f       	mul	r21, r18
 b78:	90 0d       	add	r25, r0
 b7a:	11 24       	eor	r1, r1
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	0e 94 f4 06 	call	0xde8	; 0xde8 <__divmodhi4>
 b82:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 b84:	cb 01       	movw	r24, r22
 b86:	66 e0       	ldi	r22, 0x06	; 6
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__udivmodhi4>
 b8e:	e8 2e       	mov	r14, r24
 b90:	ff 24       	eor	r15, r15
 b92:	00 e0       	ldi	r16, 0x00	; 0
 b94:	10 e0       	ldi	r17, 0x00	; 0
 b96:	12 c0       	rjmp	.+36     	; 0xbbc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 b98:	c8 01       	movw	r24, r16
 b9a:	05 96       	adiw	r24, 0x05	; 5
 b9c:	c8 17       	cp	r28, r24
 b9e:	d9 07       	cpc	r29, r25
 ba0:	10 f0       	brcs	.+4      	; 0xba6 <LCDprogressBar+0x56>
 ba2:	85 e0       	ldi	r24, 0x05	; 5
 ba4:	06 c0       	rjmp	.+12     	; 0xbb2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 ba6:	c0 17       	cp	r28, r16
 ba8:	d1 07       	cpc	r29, r17
 baa:	10 f0       	brcs	.+4      	; 0xbb0 <LCDprogressBar+0x60>
 bac:	8e 2d       	mov	r24, r14
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <LCDprogressBar+0x62>
 bb0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 bb2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 bb6:	f3 94       	inc	r15
 bb8:	0a 5f       	subi	r16, 0xFA	; 250
 bba:	1f 4f       	sbci	r17, 0xFF	; 255
 bbc:	fd 14       	cp	r15, r13
 bbe:	60 f3       	brcs	.-40     	; 0xb98 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 bc0:	df 91       	pop	r29
 bc2:	cf 91       	pop	r28
 bc4:	1f 91       	pop	r17
 bc6:	0f 91       	pop	r16
 bc8:	ff 90       	pop	r15
 bca:	ef 90       	pop	r14
 bcc:	df 90       	pop	r13
 bce:	08 95       	ret

00000bd0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 bd0:	87 e6       	ldi	r24, 0x67	; 103
 bd2:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 bd6:	88 e1       	ldi	r24, 0x18	; 24
 bd8:	80 93 c1 00 	sts	0x00C1, r24
}
 bdc:	08 95       	ret

00000bde <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 bde:	1f 93       	push	r17
 be0:	18 2f       	mov	r17, r24

  if (c == '\a')
 be2:	87 30       	cpi	r24, 0x07	; 7
 be4:	49 f4       	brne	.+18     	; 0xbf8 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
 be6:	60 91 8c 01 	lds	r22, 0x018C
 bea:	70 91 8d 01 	lds	r23, 0x018D
 bee:	8e e1       	ldi	r24, 0x1E	; 30
 bf0:	91 e0       	ldi	r25, 0x01	; 1
 bf2:	0e 94 07 07 	call	0xe0e	; 0xe0e <fputs>
 bf6:	0b c0       	rjmp	.+22     	; 0xc0e <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
 bf8:	8a 30       	cpi	r24, 0x0A	; 10
 bfa:	19 f4       	brne	.+6      	; 0xc02 <uart_putchar+0x24>
    uart_putchar('\r', stream);
 bfc:	8d e0       	ldi	r24, 0x0D	; 13
 bfe:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 c02:	80 91 c0 00 	lds	r24, 0x00C0
 c06:	85 ff       	sbrs	r24, 5
 c08:	fc cf       	rjmp	.-8      	; 0xc02 <uart_putchar+0x24>
  UDR0 = c;
 c0a:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	1f 91       	pop	r17
 c14:	08 95       	ret

00000c16 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 c16:	ef 92       	push	r14
 c18:	ff 92       	push	r15
 c1a:	0f 93       	push	r16
 c1c:	1f 93       	push	r17
 c1e:	cf 93       	push	r28
 c20:	df 93       	push	r29
 c22:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 c24:	80 91 26 01 	lds	r24, 0x0126
 c28:	90 91 27 01 	lds	r25, 0x0127
 c2c:	89 2b       	or	r24, r25
 c2e:	09 f0       	breq	.+2      	; 0xc32 <uart_getchar+0x1c>
 c30:	9f c0       	rjmp	.+318    	; 0xd70 <uart_getchar+0x15a>
 c32:	08 e2       	ldi	r16, 0x28	; 40
 c34:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 c36:	80 91 c0 00 	lds	r24, 0x00C0
 c3a:	87 ff       	sbrs	r24, 7
 c3c:	fc cf       	rjmp	.-8      	; 0xc36 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 c3e:	80 91 c0 00 	lds	r24, 0x00C0
 c42:	84 ff       	sbrs	r24, 4
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <uart_getchar+0x36>
 c46:	2e ef       	ldi	r18, 0xFE	; 254
 c48:	3f ef       	ldi	r19, 0xFF	; 255
 c4a:	a6 c0       	rjmp	.+332    	; 0xd98 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 c4c:	80 91 c0 00 	lds	r24, 0x00C0
 c50:	83 fd       	sbrc	r24, 3
 c52:	a0 c0       	rjmp	.+320    	; 0xd94 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
 c54:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 c58:	9d 30       	cpi	r25, 0x0D	; 13
 c5a:	11 f0       	breq	.+4      	; 0xc60 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
 c5c:	9a 30       	cpi	r25, 0x0A	; 10
 c5e:	69 f4       	brne	.+26     	; 0xc7a <uart_getchar+0x64>
	  {
	    *cp = c;
 c60:	8a e0       	ldi	r24, 0x0A	; 10
 c62:	f8 01       	movw	r30, r16
 c64:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 c66:	b7 01       	movw	r22, r14
 c68:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
	    rxp = b;
 c6c:	88 e2       	ldi	r24, 0x28	; 40
 c6e:	91 e0       	ldi	r25, 0x01	; 1
 c70:	90 93 27 01 	sts	0x0127, r25
 c74:	80 93 26 01 	sts	0x0126, r24
 c78:	7b c0       	rjmp	.+246    	; 0xd70 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
 c7a:	99 30       	cpi	r25, 0x09	; 9
 c7c:	09 f4       	brne	.+2      	; 0xc80 <uart_getchar+0x6a>
 c7e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 c80:	89 2f       	mov	r24, r25
 c82:	80 52       	subi	r24, 0x20	; 32
 c84:	8f 35       	cpi	r24, 0x5F	; 95
 c86:	10 f0       	brcs	.+4      	; 0xc8c <uart_getchar+0x76>
 c88:	90 3a       	cpi	r25, 0xA0	; 160
 c8a:	70 f0       	brcs	.+28     	; 0xca8 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 c8c:	f1 e0       	ldi	r31, 0x01	; 1
 c8e:	07 37       	cpi	r16, 0x77	; 119
 c90:	1f 07       	cpc	r17, r31
 c92:	11 f4       	brne	.+4      	; 0xc98 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
 c94:	87 e0       	ldi	r24, 0x07	; 7
 c96:	04 c0       	rjmp	.+8      	; 0xca0 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
 c98:	f8 01       	movw	r30, r16
 c9a:	91 93       	st	Z+, r25
 c9c:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
 c9e:	89 2f       	mov	r24, r25
 ca0:	b7 01       	movw	r22, r14
 ca2:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
 ca6:	c7 cf       	rjmp	.-114    	; 0xc36 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
 ca8:	92 31       	cpi	r25, 0x12	; 18
 caa:	39 f1       	breq	.+78     	; 0xcfa <uart_getchar+0xe4>
 cac:	93 31       	cpi	r25, 0x13	; 19
 cae:	38 f4       	brcc	.+14     	; 0xcbe <uart_getchar+0xa8>
 cb0:	93 30       	cpi	r25, 0x03	; 3
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <uart_getchar+0xa0>
 cb4:	6f c0       	rjmp	.+222    	; 0xd94 <uart_getchar+0x17e>
 cb6:	98 30       	cpi	r25, 0x08	; 8
 cb8:	09 f0       	breq	.+2      	; 0xcbc <uart_getchar+0xa6>
 cba:	bd cf       	rjmp	.-134    	; 0xc36 <uart_getchar+0x20>
 cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <uart_getchar+0xba>
 cbe:	97 31       	cpi	r25, 0x17	; 23
 cc0:	09 f4       	brne	.+2      	; 0xcc4 <uart_getchar+0xae>
 cc2:	4b c0       	rjmp	.+150    	; 0xd5a <uart_getchar+0x144>
 cc4:	9f 37       	cpi	r25, 0x7F	; 127
 cc6:	21 f0       	breq	.+8      	; 0xcd0 <uart_getchar+0xba>
 cc8:	95 31       	cpi	r25, 0x15	; 21
 cca:	09 f0       	breq	.+2      	; 0xcce <uart_getchar+0xb8>
 ccc:	b4 cf       	rjmp	.-152    	; 0xc36 <uart_getchar+0x20>
 cce:	32 c0       	rjmp	.+100    	; 0xd34 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 cd0:	f1 e0       	ldi	r31, 0x01	; 1
 cd2:	08 32       	cpi	r16, 0x28	; 40
 cd4:	1f 07       	cpc	r17, r31
 cd6:	09 f0       	breq	.+2      	; 0xcda <uart_getchar+0xc4>
 cd8:	08 f4       	brcc	.+2      	; 0xcdc <uart_getchar+0xc6>
 cda:	ad cf       	rjmp	.-166    	; 0xc36 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 cdc:	88 e0       	ldi	r24, 0x08	; 8
 cde:	b7 01       	movw	r22, r14
 ce0:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar(' ', stream);
 ce4:	80 e2       	ldi	r24, 0x20	; 32
 ce6:	b7 01       	movw	r22, r14
 ce8:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar('\b', stream);
 cec:	88 e0       	ldi	r24, 0x08	; 8
 cee:	b7 01       	movw	r22, r14
 cf0:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		cp--;
 cf4:	01 50       	subi	r16, 0x01	; 1
 cf6:	10 40       	sbci	r17, 0x00	; 0
 cf8:	9e cf       	rjmp	.-196    	; 0xc36 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 cfa:	8d e0       	ldi	r24, 0x0D	; 13
 cfc:	b7 01       	movw	r22, r14
 cfe:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
 d02:	c8 e2       	ldi	r28, 0x28	; 40
 d04:	d1 e0       	ldi	r29, 0x01	; 1
 d06:	04 c0       	rjmp	.+8      	; 0xd10 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
 d08:	89 91       	ld	r24, Y+
 d0a:	b7 01       	movw	r22, r14
 d0c:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 d10:	c0 17       	cp	r28, r16
 d12:	d1 07       	cpc	r29, r17
 d14:	c8 f3       	brcs	.-14     	; 0xd08 <uart_getchar+0xf2>
 d16:	8f cf       	rjmp	.-226    	; 0xc36 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 d18:	88 e0       	ldi	r24, 0x08	; 8
 d1a:	b7 01       	movw	r22, r14
 d1c:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar(' ', stream);
 d20:	80 e2       	ldi	r24, 0x20	; 32
 d22:	b7 01       	movw	r22, r14
 d24:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar('\b', stream);
 d28:	88 e0       	ldi	r24, 0x08	; 8
 d2a:	b7 01       	movw	r22, r14
 d2c:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		cp--;
 d30:	01 50       	subi	r16, 0x01	; 1
 d32:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 d34:	81 e0       	ldi	r24, 0x01	; 1
 d36:	08 32       	cpi	r16, 0x28	; 40
 d38:	18 07       	cpc	r17, r24
 d3a:	09 f0       	breq	.+2      	; 0xd3e <uart_getchar+0x128>
 d3c:	68 f7       	brcc	.-38     	; 0xd18 <uart_getchar+0x102>
 d3e:	7b cf       	rjmp	.-266    	; 0xc36 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 d40:	88 e0       	ldi	r24, 0x08	; 8
 d42:	b7 01       	movw	r22, r14
 d44:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar(' ', stream);
 d48:	80 e2       	ldi	r24, 0x20	; 32
 d4a:	b7 01       	movw	r22, r14
 d4c:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
		uart_putchar('\b', stream);
 d50:	88 e0       	ldi	r24, 0x08	; 8
 d52:	b7 01       	movw	r22, r14
 d54:	0e 94 ef 05 	call	0xbde	; 0xbde <uart_putchar>
 d58:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 d5a:	e1 e0       	ldi	r30, 0x01	; 1
 d5c:	08 32       	cpi	r16, 0x28	; 40
 d5e:	1e 07       	cpc	r17, r30
 d60:	09 f0       	breq	.+2      	; 0xd64 <uart_getchar+0x14e>
 d62:	08 f4       	brcc	.+2      	; 0xd66 <uart_getchar+0x150>
 d64:	68 cf       	rjmp	.-304    	; 0xc36 <uart_getchar+0x20>
 d66:	e8 01       	movw	r28, r16
 d68:	8a 91       	ld	r24, -Y
 d6a:	80 32       	cpi	r24, 0x20	; 32
 d6c:	49 f7       	brne	.-46     	; 0xd40 <uart_getchar+0x12a>
 d6e:	63 cf       	rjmp	.-314    	; 0xc36 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 d70:	e0 91 26 01 	lds	r30, 0x0126
 d74:	f0 91 27 01 	lds	r31, 0x0127
 d78:	81 91       	ld	r24, Z+
 d7a:	f0 93 27 01 	sts	0x0127, r31
 d7e:	e0 93 26 01 	sts	0x0126, r30
  if (c == '\n')
 d82:	8a 30       	cpi	r24, 0x0A	; 10
 d84:	21 f4       	brne	.+8      	; 0xd8e <uart_getchar+0x178>
    rxp = 0;
 d86:	10 92 27 01 	sts	0x0127, r1
 d8a:	10 92 26 01 	sts	0x0126, r1

  return c;
 d8e:	28 2f       	mov	r18, r24
 d90:	30 e0       	ldi	r19, 0x00	; 0
 d92:	02 c0       	rjmp	.+4      	; 0xd98 <uart_getchar+0x182>
 d94:	2f ef       	ldi	r18, 0xFF	; 255
 d96:	3f ef       	ldi	r19, 0xFF	; 255
}
 d98:	c9 01       	movw	r24, r18
 d9a:	df 91       	pop	r29
 d9c:	cf 91       	pop	r28
 d9e:	1f 91       	pop	r17
 da0:	0f 91       	pop	r16
 da2:	ff 90       	pop	r15
 da4:	ef 90       	pop	r14
 da6:	08 95       	ret

00000da8 <__udivmodqi4>:
 da8:	99 1b       	sub	r25, r25
 daa:	79 e0       	ldi	r23, 0x09	; 9
 dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__udivmodqi4_ep>

00000dae <__udivmodqi4_loop>:
 dae:	99 1f       	adc	r25, r25
 db0:	96 17       	cp	r25, r22
 db2:	08 f0       	brcs	.+2      	; 0xdb6 <__udivmodqi4_ep>
 db4:	96 1b       	sub	r25, r22

00000db6 <__udivmodqi4_ep>:
 db6:	88 1f       	adc	r24, r24
 db8:	7a 95       	dec	r23
 dba:	c9 f7       	brne	.-14     	; 0xdae <__udivmodqi4_loop>
 dbc:	80 95       	com	r24
 dbe:	08 95       	ret

00000dc0 <__udivmodhi4>:
 dc0:	aa 1b       	sub	r26, r26
 dc2:	bb 1b       	sub	r27, r27
 dc4:	51 e1       	ldi	r21, 0x11	; 17
 dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <__udivmodhi4_ep>

00000dc8 <__udivmodhi4_loop>:
 dc8:	aa 1f       	adc	r26, r26
 dca:	bb 1f       	adc	r27, r27
 dcc:	a6 17       	cp	r26, r22
 dce:	b7 07       	cpc	r27, r23
 dd0:	10 f0       	brcs	.+4      	; 0xdd6 <__udivmodhi4_ep>
 dd2:	a6 1b       	sub	r26, r22
 dd4:	b7 0b       	sbc	r27, r23

00000dd6 <__udivmodhi4_ep>:
 dd6:	88 1f       	adc	r24, r24
 dd8:	99 1f       	adc	r25, r25
 dda:	5a 95       	dec	r21
 ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__udivmodhi4_loop>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	bc 01       	movw	r22, r24
 de4:	cd 01       	movw	r24, r26
 de6:	08 95       	ret

00000de8 <__divmodhi4>:
 de8:	97 fb       	bst	r25, 7
 dea:	09 2e       	mov	r0, r25
 dec:	07 26       	eor	r0, r23
 dee:	0a d0       	rcall	.+20     	; 0xe04 <__divmodhi4_neg1>
 df0:	77 fd       	sbrc	r23, 7
 df2:	04 d0       	rcall	.+8      	; 0xdfc <__divmodhi4_neg2>
 df4:	e5 df       	rcall	.-54     	; 0xdc0 <__udivmodhi4>
 df6:	06 d0       	rcall	.+12     	; 0xe04 <__divmodhi4_neg1>
 df8:	00 20       	and	r0, r0
 dfa:	1a f4       	brpl	.+6      	; 0xe02 <__divmodhi4_exit>

00000dfc <__divmodhi4_neg2>:
 dfc:	70 95       	com	r23
 dfe:	61 95       	neg	r22
 e00:	7f 4f       	sbci	r23, 0xFF	; 255

00000e02 <__divmodhi4_exit>:
 e02:	08 95       	ret

00000e04 <__divmodhi4_neg1>:
 e04:	f6 f7       	brtc	.-4      	; 0xe02 <__divmodhi4_exit>
 e06:	90 95       	com	r25
 e08:	81 95       	neg	r24
 e0a:	9f 4f       	sbci	r25, 0xFF	; 255
 e0c:	08 95       	ret

00000e0e <fputs>:
 e0e:	ef 92       	push	r14
 e10:	ff 92       	push	r15
 e12:	0f 93       	push	r16
 e14:	1f 93       	push	r17
 e16:	cf 93       	push	r28
 e18:	df 93       	push	r29
 e1a:	7c 01       	movw	r14, r24
 e1c:	8b 01       	movw	r16, r22
 e1e:	db 01       	movw	r26, r22
 e20:	13 96       	adiw	r26, 0x03	; 3
 e22:	8c 91       	ld	r24, X
 e24:	81 fd       	sbrc	r24, 1
 e26:	03 c0       	rjmp	.+6      	; 0xe2e <fputs+0x20>
 e28:	cf ef       	ldi	r28, 0xFF	; 255
 e2a:	df ef       	ldi	r29, 0xFF	; 255
 e2c:	13 c0       	rjmp	.+38     	; 0xe54 <fputs+0x46>
 e2e:	c0 e0       	ldi	r28, 0x00	; 0
 e30:	d0 e0       	ldi	r29, 0x00	; 0
 e32:	0b c0       	rjmp	.+22     	; 0xe4a <fputs+0x3c>
 e34:	d8 01       	movw	r26, r16
 e36:	18 96       	adiw	r26, 0x08	; 8
 e38:	ed 91       	ld	r30, X+
 e3a:	fc 91       	ld	r31, X
 e3c:	19 97       	sbiw	r26, 0x09	; 9
 e3e:	b8 01       	movw	r22, r16
 e40:	09 95       	icall
 e42:	89 2b       	or	r24, r25
 e44:	11 f0       	breq	.+4      	; 0xe4a <fputs+0x3c>
 e46:	cf ef       	ldi	r28, 0xFF	; 255
 e48:	df ef       	ldi	r29, 0xFF	; 255
 e4a:	f7 01       	movw	r30, r14
 e4c:	81 91       	ld	r24, Z+
 e4e:	7f 01       	movw	r14, r30
 e50:	88 23       	and	r24, r24
 e52:	81 f7       	brne	.-32     	; 0xe34 <fputs+0x26>
 e54:	ce 01       	movw	r24, r28
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	e6 e0       	ldi	r30, 0x06	; 6
 e5c:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__epilogue_restores__+0x18>

00000e60 <__epilogue_restores__>:
 e60:	2a 88       	ldd	r2, Y+18	; 0x12
 e62:	39 88       	ldd	r3, Y+17	; 0x11
 e64:	48 88       	ldd	r4, Y+16	; 0x10
 e66:	5f 84       	ldd	r5, Y+15	; 0x0f
 e68:	6e 84       	ldd	r6, Y+14	; 0x0e
 e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e70:	aa 84       	ldd	r10, Y+10	; 0x0a
 e72:	b9 84       	ldd	r11, Y+9	; 0x09
 e74:	c8 84       	ldd	r12, Y+8	; 0x08
 e76:	df 80       	ldd	r13, Y+7	; 0x07
 e78:	ee 80       	ldd	r14, Y+6	; 0x06
 e7a:	fd 80       	ldd	r15, Y+5	; 0x05
 e7c:	0c 81       	ldd	r16, Y+4	; 0x04
 e7e:	1b 81       	ldd	r17, Y+3	; 0x03
 e80:	aa 81       	ldd	r26, Y+2	; 0x02
 e82:	b9 81       	ldd	r27, Y+1	; 0x01
 e84:	ce 0f       	add	r28, r30
 e86:	d1 1d       	adc	r29, r1
 e88:	0f b6       	in	r0, 0x3f	; 63
 e8a:	f8 94       	cli
 e8c:	de bf       	out	0x3e, r29	; 62
 e8e:	0f be       	out	0x3f, r0	; 63
 e90:	cd bf       	out	0x3d, r28	; 61
 e92:	ed 01       	movw	r28, r26
 e94:	08 95       	ret

00000e96 <_exit>:
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
