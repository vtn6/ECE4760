
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  0000255a  000025ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000255a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800242  00800242  00002730  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007ba  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002eaf  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000131d  00000000  00000000  00005ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002031  00000000  00000000  00007216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  00009248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000898  00000000  00000000  000095e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011fd  00000000  00000000  00009e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b07d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_12>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_15>
      40:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_16>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      58:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      60:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      64:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      68:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      6c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000070 <LCDBlank>:
      70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000082 <LCDHelloTop>:
      82:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000094 <LCDHelloBot>:
      94:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000a6 <LCDRange>:
      a6:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

000000af <LCDAutorangeOn>:
      af:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000be <LCD5Volts>:
      be:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000c7 <LCD256Volts>:
      c7:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000d3 <LCD11Volts>:
      d3:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000de <LCD1kOhm>:
      de:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000e6 <LCD10kOhm>:
      e6:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000ef <LCD100kOhm>:
      ef:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000f9 <LCD1kHz>:
      f9:	31 20 6b 48 5a 00 00                                1 kHZ..

00000100 <LCD10kHz>:
     100:	31 30 20 6b 48 5a 00 00                             10 kHZ..

00000108 <LCDMode>:
     108:	4d 4f 44 45 3a 20 00 00                             MODE: ..

00000110 <LCDVolt>:
     110:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000011c <LCDOhm>:
     11c:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000126 <LCDFreq>:
     126:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

00000131 <LCDManWelcomeTop>:
     131:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000013c <LCDManWelcomeBot>:
     13c:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

0000014b <LCDNavigation1Top>:
     14b:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000015d <LCDNavigation1Bot>:
     15d:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000016f <LCDNavigation2Top>:
     16f:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

00000180 <LCDNavigation2Bot>:
     180:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000018f <LCDVoltManTop>:
     18f:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

000001a0 <LCDVoltManBot>:
     1a0:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

000001ab <LCDOhmManTop>:
     1ab:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001bb <LCDOhmManBot>:
     1bb:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001c5 <LCDFreqManTop>:
     1c5:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001d6 <LCDFreqManBot>:
     1d6:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001e3 <LCDAutorangeMan1Top>:
     1e3:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001f0 <LCDAutorangeMan1Bot>:
     1f0:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001fb <LCDAutorangeMan2Top>:
     1fb:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

00000208 <LCDAutorangeMan2Bot>:
     208:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000219 <LcdCustomChar>:
     219:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     229:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     239:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     249:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     259:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     269:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     279:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     289:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     299:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     2a9:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2b9:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2c9:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2d9:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2e9:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2f9:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     309:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     319:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     329:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     339:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     349:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e1       	ldi	r29, 0x10	; 16
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	ea e5       	ldi	r30, 0x5A	; 90
     368:	f5 e2       	ldi	r31, 0x25	; 37
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	a2 34       	cpi	r26, 0x42	; 66
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a2 e4       	ldi	r26, 0x42	; 66
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a6 3c       	cpi	r26, 0xC6	; 198
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
     38a:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <__vector_12>:
	if((elapsedTime % 200) == 0) {
		triggerPoll = 1;
	}
}

ISR (TIMER1_CAPT_vect){
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	6f 93       	push	r22
     39e:	7f 93       	push	r23
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
	//read the timer1 capture register
	T1Capture = ICR1;
     3a8:	80 91 86 00 	lds	r24, 0x0086
     3ac:	90 91 87 00 	lds	r25, 0x0087
     3b0:	80 93 99 02 	sts	0x0299, r24
	
	//period is the difference between this capture and the previous one
	period = T1Capture - lastT1Capture;
     3b4:	80 91 99 02 	lds	r24, 0x0299
     3b8:	90 91 a5 02 	lds	r25, 0x02A5
     3bc:	89 1b       	sub	r24, r25
     3be:	80 93 b8 02 	sts	0x02B8, r24
	lastT1Capture = T1Capture;
     3c2:	80 91 99 02 	lds	r24, 0x0299
     3c6:	80 93 a5 02 	sts	0x02A5, r24

	//if the period is too small, change the prescalar
	if (period < 100){
     3ca:	80 91 b8 02 	lds	r24, 0x02B8
     3ce:	84 36       	cpi	r24, 0x64	; 100
     3d0:	40 f5       	brcc	.+80     	; 0x422 <__vector_12+0x90>
		rangeIdx--;
     3d2:	80 91 bb 02 	lds	r24, 0x02BB
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	80 93 bb 02 	sts	0x02BB, r24
		rangeIdx = rangeIdx % rangeIdxMod;
     3dc:	80 91 bb 02 	lds	r24, 0x02BB
     3e0:	60 91 94 02 	lds	r22, 0x0294
     3e4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     3e8:	90 93 bb 02 	sts	0x02BB, r25
		frequencyRef = frequencyRanges[rangeIdx];
     3ec:	e0 91 bb 02 	lds	r30, 0x02BB
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e1 5f       	subi	r30, 0xF1	; 241
     3f4:	fe 4f       	sbci	r31, 0xFE	; 254
     3f6:	80 81       	ld	r24, Z
     3f8:	80 93 bf 02 	sts	0x02BF, r24
		
		//Set up the TIMERA prescalar
		TCCR1B &= ~0x07;
     3fc:	80 91 81 00 	lds	r24, 0x0081
     400:	88 7f       	andi	r24, 0xF8	; 248
     402:	80 93 81 00 	sts	0x0081, r24
		TCCR1B |= TIMERAprescalars[rangeIdx];
     406:	90 91 81 00 	lds	r25, 0x0081
     40a:	e0 91 bb 02 	lds	r30, 0x02BB
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	ef 5e       	subi	r30, 0xEF	; 239
     412:	fe 4f       	sbci	r31, 0xFE	; 254
     414:	80 81       	ld	r24, Z
     416:	98 2b       	or	r25, r24
     418:	90 93 81 00 	sts	0x0081, r25
		justSwitched = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 be 02 	sts	0x02BE, r24
	}
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_15>:

ISR (TIMER1_OVF_vect){
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	6f 93       	push	r22
     444:	7f 93       	push	r23
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	//the clock is running too fast, slow down the frequency
	rangeIdx++;
     452:	80 91 bb 02 	lds	r24, 0x02BB
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	80 93 bb 02 	sts	0x02BB, r24
	rangeIdx = rangeIdx % rangeIdxMod;
     45c:	80 91 bb 02 	lds	r24, 0x02BB
     460:	60 91 94 02 	lds	r22, 0x0294
     464:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     468:	90 93 bb 02 	sts	0x02BB, r25
	frequencyRef = frequencyRanges[rangeIdx];
     46c:	80 91 bb 02 	lds	r24, 0x02BB
     470:	ef e0       	ldi	r30, 0x0F	; 15
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	e8 0f       	add	r30, r24
     476:	f1 1d       	adc	r31, r1
     478:	80 81       	ld	r24, Z
     47a:	80 93 bf 02 	sts	0x02BF, r24
	
	//Set up the TIMERA prescalar
	TCCR1B &= ~0x07;
     47e:	a1 e8       	ldi	r26, 0x81	; 129
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	8c 91       	ld	r24, X
     484:	88 7f       	andi	r24, 0xF8	; 248
     486:	8c 93       	st	X, r24
	TCCR1B |= TIMERAprescalars[rangeIdx];
     488:	9c 91       	ld	r25, X
     48a:	80 91 bb 02 	lds	r24, 0x02BB
     48e:	e1 e1       	ldi	r30, 0x11	; 17
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	e8 0f       	add	r30, r24
     494:	f1 1d       	adc	r31, r1
     496:	80 81       	ld	r24, Z
     498:	98 2b       	or	r25, r24
     49a:	9c 93       	st	X, r25
	justSwitched = 1;	
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 be 02 	sts	0x02BE, r24
}
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
	DDRD = 0x0f;
     4bc:	2f e0       	ldi	r18, 0x0F	; 15
     4be:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     4c0:	80 ef       	ldi	r24, 0xF0	; 240
     4c2:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	39 2f       	mov	r19, r25
     4c8:	3a 95       	dec	r19
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <ScanKeypad+0xc>
	_delay_us(5);
	key = PIND;
     4cc:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     4ce:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     4d0:	2b b9       	out	0x0b, r18	; 11
     4d2:	9a 95       	dec	r25
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <ScanKeypad+0x16>
	_delay_us(5);
	key = key | PIND;
     4d6:	29 b1       	in	r18, 0x09	; 9
     4d8:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff)
     4da:	2f 3f       	cpi	r18, 0xFF	; 255
     4dc:	61 f0       	breq	.+24     	; 0x4f6 <ScanKeypad+0x3a>
     4de:	e1 e2       	ldi	r30, 0x21	; 33
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
		begin   
		if (keytbl[butnum]==key)  break;   
     4e4:	80 81       	ld	r24, Z
     4e6:	9f 5f       	subi	r25, 0xFF	; 255
     4e8:	82 17       	cp	r24, r18
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <ScanKeypad+0x34>
		end

		if (butnum==MAX_KEYS) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     4ec:	89 2f       	mov	r24, r25
     4ee:	08 95       	ret
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff)
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	90 31       	cpi	r25, 0x10	; 16
     4f4:	b9 f7       	brne	.-18     	; 0x4e4 <ScanKeypad+0x28>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	end
	else butnum=0;
	
	return butnum;
}
     4f8:	08 95       	ret

000004fa <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     4fa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ScanKeypad>
     4fe:	28 2f       	mov	r18, r24
	switch(keyState){
     500:	90 91 9a 02 	lds	r25, 0x029A
     504:	91 30       	cpi	r25, 0x01	; 1
     506:	79 f0       	breq	.+30     	; 0x526 <Debounce+0x2c>
     508:	91 30       	cpi	r25, 0x01	; 1
     50a:	20 f0       	brcs	.+8      	; 0x514 <Debounce+0x1a>
     50c:	92 30       	cpi	r25, 0x02	; 2
     50e:	09 f0       	breq	.+2      	; 0x512 <Debounce+0x18>
     510:	59 c0       	rjmp	.+178    	; 0x5c4 <Debounce+0xca>
     512:	2f c0       	rjmp	.+94     	; 0x572 <Debounce+0x78>
	
	//in the RELEASED state: stay in this state if a key is not pressed
	//go to UNKNOWN if any key is pressed and reset the debounce countdown.
	case RELEASED:
		if (key){
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <Debounce+0x20>
     518:	55 c0       	rjmp	.+170    	; 0x5c4 <Debounce+0xca>
			keyState = UNKNOWN;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED;
     520:	10 92 a6 02 	sts	0x02A6, r1
     524:	0c c0       	rjmp	.+24     	; 0x53e <Debounce+0x44>

	//in the UNKNOWN state: go to released if the button is not down Update
	//pressedAndReleased if the button was previously pressed.
	//go to PUSHED if the button is down
	case UNKNOWN:
		if (key){
     526:	88 23       	and	r24, r24
     528:	b1 f0       	breq	.+44     	; 0x556 <Debounce+0x5c>
			if (key == checkKey){
     52a:	80 91 b9 02 	lds	r24, 0x02B9
     52e:	28 17       	cp	r18, r24
     530:	31 f4       	brne	.+12     	; 0x53e <Debounce+0x44>
				keyState = PUSHED;
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	80 93 9a 02 	sts	0x029A, r24
				prevKeyState = UNKNOWN;
     538:	90 93 a6 02 	sts	0x02A6, r25
     53c:	08 95       	ret
			}
			else {
				debounceTime = elapsedTime + DEBOUNCE_TIME;
     53e:	80 91 95 02 	lds	r24, 0x0295
     542:	90 91 96 02 	lds	r25, 0x0296
     546:	4e 96       	adiw	r24, 0x1e	; 30
     548:	90 93 b7 02 	sts	0x02B7, r25
     54c:	80 93 b6 02 	sts	0x02B6, r24
				checkKey = key;
     550:	20 93 b9 02 	sts	0x02B9, r18
     554:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     556:	10 92 9a 02 	sts	0x029A, r1
			if (prevKeyState == PUSHED) {
     55a:	80 91 a6 02 	lds	r24, 0x02A6
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	21 f4       	brne	.+8      	; 0x56a <Debounce+0x70>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     562:	80 91 b9 02 	lds	r24, 0x02B9
     566:	80 93 b5 02 	sts	0x02B5, r24
			}
			prevKeyState = UNKNOWN;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 a6 02 	sts	0x02A6, r24
     570:	08 95       	ret
		break;

	//in the PUSHED state go to UnKnown if the button is not down.
	//stay in PUSHED if the button is down
	case PUSHED:
		if (!key){
     572:	88 23       	and	r24, r24
     574:	79 f4       	brne	.+30     	; 0x594 <Debounce+0x9a>
			keyState = UNKNOWN;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = PUSHED;
     57c:	90 93 a6 02 	sts	0x02A6, r25
			debounceTime = elapsedTime + DEBOUNCE_TIME;
     580:	80 91 95 02 	lds	r24, 0x0295
     584:	90 91 96 02 	lds	r25, 0x0296
     588:	4e 96       	adiw	r24, 0x1e	; 30
     58a:	90 93 b7 02 	sts	0x02B7, r25
     58e:	80 93 b6 02 	sts	0x02B6, r24
     592:	08 95       	ret
		}
		else if (key != checkKey){
     594:	80 91 b9 02 	lds	r24, 0x02B9
     598:	28 17       	cp	r18, r24
     59a:	a1 f0       	breq	.+40     	; 0x5c4 <Debounce+0xca>
			keyState = UNKNOWN;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED; //...???
     5a2:	10 92 a6 02 	sts	0x02A6, r1
			debounceTime = elapsedTime + DEBOUNCE_TIME;
     5a6:	80 91 95 02 	lds	r24, 0x0295
     5aa:	90 91 96 02 	lds	r25, 0x0296
     5ae:	4e 96       	adiw	r24, 0x1e	; 30
     5b0:	90 93 b7 02 	sts	0x02B7, r25
     5b4:	80 93 b6 02 	sts	0x02B6, r24
			curKey = checkKey;
     5b8:	80 91 b9 02 	lds	r24, 0x02B9
     5bc:	80 93 b5 02 	sts	0x02B5, r24
			checkKey = key;
     5c0:	20 93 b9 02 	sts	0x02B9, r18
     5c4:	08 95       	ret

000005c6 <getCurKey>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     5c6:	90 91 b5 02 	lds	r25, 0x02B5
	if (curKey){
     5ca:	80 91 b5 02 	lds	r24, 0x02B5
     5ce:	88 23       	and	r24, r24
     5d0:	11 f0       	breq	.+4      	; 0x5d6 <getCurKey+0x10>
		curKey = 0;
     5d2:	10 92 b5 02 	sts	0x02B5, r1
	}
	return tmpKey;
}
     5d6:	89 2f       	mov	r24, r25
     5d8:	08 95       	ret

000005da <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     5da:	90 91 bd 02 	lds	r25, 0x02BD
     5de:	93 30       	cpi	r25, 0x03	; 3
     5e0:	c1 f1       	breq	.+112    	; 0x652 <UpdateManState+0x78>
     5e2:	94 30       	cpi	r25, 0x04	; 4
     5e4:	28 f4       	brcc	.+10     	; 0x5f0 <UpdateManState+0x16>
     5e6:	91 30       	cpi	r25, 0x01	; 1
     5e8:	99 f0       	breq	.+38     	; 0x610 <UpdateManState+0x36>
     5ea:	92 30       	cpi	r25, 0x02	; 2
     5ec:	30 f5       	brcc	.+76     	; 0x63a <UpdateManState+0x60>
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <UpdateManState+0x2e>
     5f0:	95 30       	cpi	r25, 0x05	; 5
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <UpdateManState+0x1c>
     5f4:	40 c0       	rjmp	.+128    	; 0x676 <UpdateManState+0x9c>
     5f6:	95 30       	cpi	r25, 0x05	; 5
     5f8:	a8 f1       	brcs	.+106    	; 0x664 <UpdateManState+0x8a>
     5fa:	96 30       	cpi	r25, 0x06	; 6
     5fc:	09 f4       	brne	.+2      	; 0x600 <UpdateManState+0x26>
     5fe:	44 c0       	rjmp	.+136    	; 0x688 <UpdateManState+0xae>
     600:	97 30       	cpi	r25, 0x07	; 7
     602:	09 f0       	breq	.+2      	; 0x606 <UpdateManState+0x2c>
     604:	68 c0       	rjmp	.+208    	; 0x6d6 <UpdateManState+0xfc>
     606:	4a c0       	rjmp	.+148    	; 0x69c <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <UpdateManState+0x34>
     60c:	64 c0       	rjmp	.+200    	; 0x6d6 <UpdateManState+0xfc>
     60e:	19 c0       	rjmp	.+50     	; 0x642 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
		case NAVIGATION_1:
			if (key == 0x10){
     610:	80 31       	cpi	r24, 0x10	; 16
     612:	29 f4       	brne	.+10     	; 0x61e <UpdateManState+0x44>
				mode = returnMode;
     614:	80 91 ba 02 	lds	r24, 0x02BA
     618:	80 93 a4 02 	sts	0x02A4, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     61e:	8e 30       	cpi	r24, 0x0E	; 14
     620:	19 f4       	brne	.+6      	; 0x628 <UpdateManState+0x4e>
				manPage = WELCOME;
     622:	10 92 bd 02 	sts	0x02BD, r1
     626:	06 c0       	rjmp	.+12     	; 0x634 <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     628:	8f 30       	cpi	r24, 0x0F	; 15
     62a:	09 f0       	breq	.+2      	; 0x62e <UpdateManState+0x54>
     62c:	54 c0       	rjmp	.+168    	; 0x6d6 <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     634:	90 93 be 02 	sts	0x02BE, r25
     638:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	89 f1       	breq	.+98     	; 0x6a0 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     63e:	8e 30       	cpi	r24, 0x0E	; 14
     640:	21 f4       	brne	.+8      	; 0x64a <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 bd 02 	sts	0x02BD, r24
     648:	38 c0       	rjmp	.+112    	; 0x6ba <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     64a:	8f 30       	cpi	r24, 0x0F	; 15
     64c:	09 f0       	breq	.+2      	; 0x650 <UpdateManState+0x76>
     64e:	43 c0       	rjmp	.+134    	; 0x6d6 <UpdateManState+0xfc>
     650:	0d c0       	rjmp	.+26     	; 0x66c <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     652:	80 31       	cpi	r24, 0x10	; 16
     654:	29 f1       	breq	.+74     	; 0x6a0 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     656:	8e 30       	cpi	r24, 0x0E	; 14
     658:	11 f4       	brne	.+4      	; 0x65e <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	2b c0       	rjmp	.+86     	; 0x6b4 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     65e:	8f 30       	cpi	r24, 0x0F	; 15
     660:	d1 f5       	brne	.+116    	; 0x6d6 <UpdateManState+0xfc>
     662:	0d c0       	rjmp	.+26     	; 0x67e <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     664:	80 31       	cpi	r24, 0x10	; 16
     666:	e1 f0       	breq	.+56     	; 0x6a0 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     668:	8e 30       	cpi	r24, 0x0E	; 14
     66a:	11 f4       	brne	.+4      	; 0x670 <UpdateManState+0x96>
				manPage = VOLT_MAN;
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	22 c0       	rjmp	.+68     	; 0x6b4 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     670:	8f 30       	cpi	r24, 0x0F	; 15
     672:	89 f5       	brne	.+98     	; 0x6d6 <UpdateManState+0xfc>
     674:	0d c0       	rjmp	.+26     	; 0x690 <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     676:	80 31       	cpi	r24, 0x10	; 16
     678:	99 f0       	breq	.+38     	; 0x6a0 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     67a:	8e 30       	cpi	r24, 0x0E	; 14
     67c:	11 f4       	brne	.+4      	; 0x682 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	19 c0       	rjmp	.+50     	; 0x6b4 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     682:	8f 30       	cpi	r24, 0x0F	; 15
     684:	41 f5       	brne	.+80     	; 0x6d6 <UpdateManState+0xfc>
     686:	15 c0       	rjmp	.+42     	; 0x6b2 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     688:	80 31       	cpi	r24, 0x10	; 16
     68a:	51 f0       	breq	.+20     	; 0x6a0 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     68c:	8e 30       	cpi	r24, 0x0E	; 14
     68e:	11 f4       	brne	.+4      	; 0x694 <UpdateManState+0xba>
				manPage = FREQ_MAN;
     690:	85 e0       	ldi	r24, 0x05	; 5
     692:	10 c0       	rjmp	.+32     	; 0x6b4 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     694:	8f 30       	cpi	r24, 0x0F	; 15
     696:	f9 f4       	brne	.+62     	; 0x6d6 <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     69c:	80 31       	cpi	r24, 0x10	; 16
     69e:	39 f4       	brne	.+14     	; 0x6ae <UpdateManState+0xd4>
				mode = returnMode;
     6a0:	80 91 ba 02 	lds	r24, 0x02BA
     6a4:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     6a8:	10 92 bd 02 	sts	0x02BD, r1
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     6ae:	8e 30       	cpi	r24, 0x0E	; 14
     6b0:	39 f4       	brne	.+14     	; 0x6c0 <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 be 02 	sts	0x02BE, r24
     6be:	08 95       	ret
			}
			else if (key == 0x0F){
     6c0:	8f 30       	cpi	r24, 0x0F	; 15
     6c2:	49 f4       	brne	.+18     	; 0x6d6 <UpdateManState+0xfc>
				mode = returnMode;
     6c4:	80 91 ba 02 	lds	r24, 0x02BA
     6c8:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     6cc:	10 92 bd 02 	sts	0x02BD, r1
				justSwitched = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 be 02 	sts	0x02BE, r24
     6d6:	08 95       	ret

000006d8 <UpdateDMMState>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     6d8:	20 91 b5 02 	lds	r18, 0x02B5
	if (curKey){
     6dc:	80 91 b5 02 	lds	r24, 0x02B5
     6e0:	88 23       	and	r24, r24
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <UpdateDMMState+0x10>
		curKey = 0;
     6e4:	10 92 b5 02 	sts	0x02B5, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     6e8:	22 23       	and	r18, r18
     6ea:	09 f4       	brne	.+2      	; 0x6ee <UpdateDMMState+0x16>
     6ec:	b6 c0       	rjmp	.+364    	; 0x85a <UpdateDMMState+0x182>
     6ee:	80 91 be 02 	lds	r24, 0x02BE
     6f2:	88 23       	and	r24, r24
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <UpdateDMMState+0x20>
     6f6:	b1 c0       	rjmp	.+354    	; 0x85a <UpdateDMMState+0x182>
		switch (mode){
     6f8:	90 91 a4 02 	lds	r25, 0x02A4
     6fc:	92 30       	cpi	r25, 0x02	; 2
     6fe:	f1 f0       	breq	.+60     	; 0x73c <UpdateDMMState+0x64>
     700:	93 30       	cpi	r25, 0x03	; 3
     702:	30 f4       	brcc	.+12     	; 0x710 <UpdateDMMState+0x38>
     704:	99 23       	and	r25, r25
     706:	51 f0       	breq	.+20     	; 0x71c <UpdateDMMState+0x44>
     708:	91 30       	cpi	r25, 0x01	; 1
     70a:	09 f0       	breq	.+2      	; 0x70e <UpdateDMMState+0x36>
     70c:	a6 c0       	rjmp	.+332    	; 0x85a <UpdateDMMState+0x182>
     70e:	12 c0       	rjmp	.+36     	; 0x734 <UpdateDMMState+0x5c>
     710:	93 30       	cpi	r25, 0x03	; 3
     712:	51 f1       	breq	.+84     	; 0x768 <UpdateDMMState+0x90>
     714:	94 30       	cpi	r25, 0x04	; 4
     716:	09 f0       	breq	.+2      	; 0x71a <UpdateDMMState+0x42>
     718:	a0 c0       	rjmp	.+320    	; 0x85a <UpdateDMMState+0x182>
     71a:	50 c0       	rjmp	.+160    	; 0x7bc <UpdateDMMState+0xe4>
			case INIT:
				if (key == 0x0F){
     71c:	2f 30       	cpi	r18, 0x0F	; 15
     71e:	31 f4       	brne	.+12     	; 0x72c <UpdateDMMState+0x54>
					PORTB = ~0x20;
     720:	8f ed       	ldi	r24, 0xDF	; 223
     722:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	80 93 ba 02 	sts	0x02BA, r24
     72a:	22 c0       	rjmp	.+68     	; 0x770 <UpdateDMMState+0x98>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					mode = VOLTMETER;
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	80 93 a4 02 	sts	0x02A4, r24
     732:	7d c0       	rjmp	.+250    	; 0x82e <UpdateDMMState+0x156>
					justSwitched = 1;
				}
				break; 

			case MAN:
				UpdateManState(key);
     734:	82 2f       	mov	r24, r18
     736:	0e 94 ed 02 	call	0x5da	; 0x5da <UpdateManState>
     73a:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     73c:	2f 30       	cpi	r18, 0x0F	; 15
     73e:	31 f4       	brne	.+12     	; 0x74c <UpdateDMMState+0x74>
					mode = MAN;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 a4 02 	sts	0x02A4, r24
					returnMode = VOLTMETER;
     746:	90 93 ba 02 	sts	0x02BA, r25
     74a:	72 c0       	rjmp	.+228    	; 0x830 <UpdateDMMState+0x158>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     74c:	2d 30       	cpi	r18, 0x0D	; 13
     74e:	d1 f1       	breq	.+116    	; 0x7c4 <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     750:	80 91 97 02 	lds	r24, 0x0297
     754:	88 23       	and	r24, r24
     756:	11 f4       	brne	.+4      	; 0x75c <UpdateDMMState+0x84>
     758:	21 30       	cpi	r18, 0x01	; 1
     75a:	b1 f0       	breq	.+44     	; 0x788 <UpdateDMMState+0xb0>
					rangeIdx++;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
     75c:	2b 30       	cpi	r18, 0x0B	; 11
     75e:	31 f5       	brne	.+76     	; 0x7ac <UpdateDMMState+0xd4>
					mode = OHMMETER;
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	80 93 a4 02 	sts	0x02A4, r24
     766:	59 c0       	rjmp	.+178    	; 0x81a <UpdateDMMState+0x142>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     768:	2f 30       	cpi	r18, 0x0F	; 15
     76a:	31 f4       	brne	.+12     	; 0x778 <UpdateDMMState+0xa0>
					returnMode = OHMMETER;
     76c:	90 93 ba 02 	sts	0x02BA, r25
					mode = MAN;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 a4 02 	sts	0x02A4, r24
     776:	5c c0       	rjmp	.+184    	; 0x830 <UpdateDMMState+0x158>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     778:	2d 30       	cpi	r18, 0x0D	; 13
     77a:	21 f1       	breq	.+72     	; 0x7c4 <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     77c:	80 91 97 02 	lds	r24, 0x0297
     780:	88 23       	and	r24, r24
     782:	91 f4       	brne	.+36     	; 0x7a8 <UpdateDMMState+0xd0>
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	81 f4       	brne	.+32     	; 0x7a8 <UpdateDMMState+0xd0>
					rangeIdx++;
     788:	80 91 bb 02 	lds	r24, 0x02BB
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     792:	80 91 bb 02 	lds	r24, 0x02BB
     796:	60 91 94 02 	lds	r22, 0x0294
     79a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     79e:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     7a2:	20 93 be 02 	sts	0x02BE, r18
     7a6:	08 95       	ret
				}
				else if (key == 0x0A){
     7a8:	2a 30       	cpi	r18, 0x0A	; 10
     7aa:	99 f1       	breq	.+102    	; 0x812 <UpdateDMMState+0x13a>
					mode = VOLTMETER;
					rangeIdxMod = 3;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0C){
     7ac:	2c 30       	cpi	r18, 0x0C	; 12
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <UpdateDMMState+0xda>
     7b0:	54 c0       	rjmp	.+168    	; 0x85a <UpdateDMMState+0x182>
					mode = FREQMETER;
     7b2:	84 e0       	ldi	r24, 0x04	; 4
     7b4:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 2;
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	2f c0       	rjmp	.+94     	; 0x81a <UpdateDMMState+0x142>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     7bc:	2f 30       	cpi	r18, 0x0F	; 15
     7be:	b1 f2       	breq	.-84     	; 0x76c <UpdateDMMState+0x94>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     7c0:	2d 30       	cpi	r18, 0x0D	; 13
     7c2:	49 f4       	brne	.+18     	; 0x7d6 <UpdateDMMState+0xfe>
					autoRange ^= 1;
     7c4:	80 91 97 02 	lds	r24, 0x0297
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	89 27       	eor	r24, r25
     7cc:	80 93 97 02 	sts	0x0297, r24
					justSwitched = 1;
     7d0:	90 93 be 02 	sts	0x02BE, r25
     7d4:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
     7d6:	80 91 97 02 	lds	r24, 0x0297
     7da:	88 23       	and	r24, r24
     7dc:	c1 f4       	brne	.+48     	; 0x80e <UpdateDMMState+0x136>
     7de:	21 30       	cpi	r18, 0x01	; 1
     7e0:	b1 f4       	brne	.+44     	; 0x80e <UpdateDMMState+0x136>
					rangeIdx++;
     7e2:	80 91 bb 02 	lds	r24, 0x02BB
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     7ec:	80 91 bb 02 	lds	r24, 0x02BB
     7f0:	60 91 94 02 	lds	r22, 0x0294
     7f4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     7f8:	90 93 bb 02 	sts	0x02BB, r25
					frequencyRef = frequencyRanges[rangeIdx];
     7fc:	e0 91 bb 02 	lds	r30, 0x02BB
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	e1 5f       	subi	r30, 0xF1	; 241
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	80 81       	ld	r24, Z
     808:	80 93 bf 02 	sts	0x02BF, r24
     80c:	10 c0       	rjmp	.+32     	; 0x82e <UpdateDMMState+0x156>
					justSwitched = 1;
				}
				else if (key == 0x0A){
     80e:	2a 30       	cpi	r18, 0x0A	; 10
     810:	91 f4       	brne	.+36     	; 0x836 <UpdateDMMState+0x15e>
					mode = VOLTMETER;
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     81e:	80 91 bb 02 	lds	r24, 0x02BB
     822:	60 91 94 02 	lds	r22, 0x0294
     826:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     82a:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 be 02 	sts	0x02BE, r24
     834:	08 95       	ret
				}
				else if (key == 0x0B){
     836:	2b 30       	cpi	r18, 0x0B	; 11
     838:	81 f4       	brne	.+32     	; 0x85a <UpdateDMMState+0x182>
					mode = OHMMETER;
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     840:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     844:	80 91 bb 02 	lds	r24, 0x02BB
     848:	60 91 94 02 	lds	r22, 0x0294
     84c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodqi4>
     850:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 be 02 	sts	0x02BE, r24
     85a:	08 95       	ret

0000085c <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	//check for overflow. If the elapsedTime overflows, reset debounceTime
	//as well
	
	uint8_t debounceFlag1 = 1;
	uint8_t debounceFlag2 = 0;
	if (elapsedTime >= debounceTime && debounceTime < DEBOUNCE_TIME){
     87e:	20 91 95 02 	lds	r18, 0x0295
     882:	30 91 96 02 	lds	r19, 0x0296
     886:	80 91 b6 02 	lds	r24, 0x02B6
     88a:	90 91 b7 02 	lds	r25, 0x02B7
     88e:	28 17       	cp	r18, r24
     890:	39 07       	cpc	r19, r25
     892:	38 f0       	brcs	.+14     	; 0x8a2 <__vector_16+0x46>
     894:	80 91 b6 02 	lds	r24, 0x02B6
     898:	90 91 b7 02 	lds	r25, 0x02B7
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	4e 97       	sbiw	r24, 0x1e	; 30
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__vector_16+0x48>
     8a2:	71 e0       	ldi	r23, 0x01	; 1
		debounceFlag1 = 0;
	}
	
	//check if we are waiting to debounce. If we are, then take precautions
	//so that there are no overflow errors
	if (0xff - debounceTime < DEBOUNCE_TIME){
     8a4:	20 91 b6 02 	lds	r18, 0x02B6
     8a8:	30 91 b7 02 	lds	r19, 0x02B7
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	4e 97       	sbiw	r24, 0x1e	; 30
     8b6:	10 f0       	brcs	.+4      	; 0x8bc <__vector_16+0x60>
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__vector_16+0x84>
		uint8_t diff = 0xff - debounceTime;
     8bc:	80 91 b6 02 	lds	r24, 0x02B6
     8c0:	90 91 b7 02 	lds	r25, 0x02B7
		if (elapsedTime >= DEBOUNCE_TIME - diff){
     8c4:	40 91 95 02 	lds	r20, 0x0295
     8c8:	50 91 96 02 	lds	r21, 0x0296
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	80 95       	com	r24
     8d0:	2e e1       	ldi	r18, 0x1E	; 30
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	28 1b       	sub	r18, r24
     8d6:	31 09       	sbc	r19, r1
     8d8:	42 17       	cp	r20, r18
     8da:	53 07       	cpc	r21, r19
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <__vector_16+0x84>
     8de:	61 e0       	ldi	r22, 0x01	; 1
			debounceFlag2 = 1;
		}
	}

	elapsedTime++;
     8e0:	80 91 95 02 	lds	r24, 0x0295
     8e4:	90 91 96 02 	lds	r25, 0x0296
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	90 93 96 02 	sts	0x0296, r25
     8ee:	80 93 95 02 	sts	0x0295, r24
	if ((elapsedTime >= debounceTime && debounceFlag1) || (elapsedTime < debounceTime && debounceFlag2)){
     8f2:	20 91 95 02 	lds	r18, 0x0295
     8f6:	30 91 96 02 	lds	r19, 0x0296
     8fa:	80 91 b6 02 	lds	r24, 0x02B6
     8fe:	90 91 b7 02 	lds	r25, 0x02B7
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	10 f0       	brcs	.+4      	; 0x90c <__vector_16+0xb0>
     908:	77 23       	and	r23, r23
     90a:	69 f4       	brne	.+26     	; 0x926 <__vector_16+0xca>
     90c:	20 91 95 02 	lds	r18, 0x0295
     910:	30 91 96 02 	lds	r19, 0x0296
     914:	80 91 b6 02 	lds	r24, 0x02B6
     918:	90 91 b7 02 	lds	r25, 0x02B7
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	30 f4       	brcc	.+12     	; 0x92e <__vector_16+0xd2>
     922:	66 23       	and	r22, r22
     924:	21 f0       	breq	.+8      	; 0x92e <__vector_16+0xd2>
		Debounce();
     926:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Debounce>
		UpdateDMMState();
     92a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <UpdateDMMState>
	}

	if((elapsedTime % 200) == 0) {
     92e:	80 91 95 02 	lds	r24, 0x0295
     932:	90 91 96 02 	lds	r25, 0x0296
     936:	68 ec       	ldi	r22, 0xC8	; 200
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__udivmodhi4>
     93e:	89 2b       	or	r24, r25
     940:	19 f4       	brne	.+6      	; 0x948 <__vector_16+0xec>
		triggerPoll = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 9f 02 	sts	0x029F, r24
	}
}
     948:	ff 91       	pop	r31
     94a:	ef 91       	pop	r30
     94c:	bf 91       	pop	r27
     94e:	af 91       	pop	r26
     950:	9f 91       	pop	r25
     952:	8f 91       	pop	r24
     954:	7f 91       	pop	r23
     956:	6f 91       	pop	r22
     958:	5f 91       	pop	r21
     95a:	4f 91       	pop	r20
     95c:	3f 91       	pop	r19
     95e:	2f 91       	pop	r18
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	0f 90       	pop	r0
     966:	1f 90       	pop	r1
     968:	18 95       	reti

0000096a <setVref>:
	CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void setVref(uint8_t idx) {
     96a:	e8 2f       	mov	r30, r24
	switch(idx) {
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	39 f0       	breq	.+14     	; 0x97e <setVref+0x14>
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	18 f0       	brcs	.+6      	; 0x97a <setVref+0x10>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	41 f4       	brne	.+16     	; 0x988 <setVref+0x1e>
     978:	04 c0       	rjmp	.+8      	; 0x982 <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     97a:	80 e6       	ldi	r24, 0x60	; 96
     97c:	03 c0       	rjmp	.+6      	; 0x984 <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     97e:	80 ee       	ldi	r24, 0xE0	; 224
     980:	01 c0       	rjmp	.+2      	; 0x984 <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     982:	80 ea       	ldi	r24, 0xA0	; 160
     984:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	e0 50       	subi	r30, 0x00	; 0
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	a2 81       	ldd	r26, Z+2	; 0x02
     99c:	b3 81       	ldd	r27, Z+3	; 0x03
     99e:	80 93 ad 02 	sts	0x02AD, r24
     9a2:	90 93 ae 02 	sts	0x02AE, r25
     9a6:	a0 93 af 02 	sts	0x02AF, r26
     9aa:	b0 93 b0 02 	sts	0x02B0, r27
}
     9ae:	08 95       	ret

000009b0 <setOref>:

void setOref(uint8_t idx) {
     9b0:	e8 2f       	mov	r30, r24
	// Don't use Oref
	if(idx < 0 || idx > 2) {
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	10 f0       	brcs	.+4      	; 0x9ba <setOref+0xa>
		DDRA = 0x00;
     9b6:	11 b8       	out	0x01, r1	; 1
     9b8:	08 95       	ret
		return;
	}
	switch(idx) {
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	39 f0       	breq	.+14     	; 0x9cc <setOref+0x1c>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	18 f0       	brcs	.+6      	; 0x9c8 <setOref+0x18>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	39 f4       	brne	.+14     	; 0x9d4 <setOref+0x24>
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <setOref+0x20>
		case 0:
			DDRA = (1 << 7); //100k resistor output
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <setOref+0x22>
			break;
		case 1:
			DDRA = (1 << 6); //10k resistor output
     9cc:	80 e4       	ldi	r24, 0x40	; 64
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <setOref+0x22>
			break;
		case 2:
			DDRA = (1 << 5); //1k resistor output
     9d0:	80 e2       	ldi	r24, 0x20	; 32
     9d2:	81 b9       	out	0x01, r24	; 1
			break;
	}
	ohmRef = resistorRanges[idx];
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e4 5f       	subi	r30, 0xF4	; 244
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	80 81       	ld	r24, Z
     9dc:	80 93 98 02 	sts	0x0298, r24
	PORTA = DDRA;
     9e0:	81 b1       	in	r24, 0x01	; 1
     9e2:	82 b9       	out	0x02, r24	; 2
     9e4:	08 95       	ret

000009e6 <Autorange>:
}

// Set rangeIdx if autoRange
void Autorange(void){
	if(autoRange) {
     9e6:	80 91 97 02 	lds	r24, 0x0297
     9ea:	88 23       	and	r24, r24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <Autorange+0xa>
     9ee:	52 c0       	rjmp	.+164    	; 0xa94 <Autorange+0xae>
		switch (mode){
     9f0:	80 91 a4 02 	lds	r24, 0x02A4
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	21 f0       	breq	.+8      	; 0xa00 <Autorange+0x1a>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	09 f0       	breq	.+2      	; 0x9fe <Autorange+0x18>
     9fc:	4b c0       	rjmp	.+150    	; 0xa94 <Autorange+0xae>
     9fe:	27 c0       	rjmp	.+78     	; 0xa4e <Autorange+0x68>
			case VOLTMETER:
				switch (rangeIdx){
     a00:	80 91 bb 02 	lds	r24, 0x02BB
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	51 f0       	breq	.+20     	; 0xa1c <Autorange+0x36>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	18 f0       	brcs	.+6      	; 0xa12 <Autorange+0x2c>
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	b9 f4       	brne	.+46     	; 0xa3e <Autorange+0x58>
     a10:	0d c0       	rjmp	.+26     	; 0xa2c <Autorange+0x46>
					//In the 5 Volt range, move to a smaller scale if the voltage is less than 0.525 of Vref
					case 0:
						if (Ain < 128){
     a12:	80 91 bc 02 	lds	r24, 0x02BC
     a16:	87 fd       	sbrc	r24, 7
     a18:	12 c0       	rjmp	.+36     	; 0xa3e <Autorange+0x58>
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <Autorange+0x3e>
						}
						break;
					//In the 2.56 Volt range, move to a smaller scale if the voltage is less than 0.4 of Vref
					//or move to a larger scale if the voltage is close to Vref
					case 1:
						if (Ain < 100){
     a1c:	80 91 bc 02 	lds	r24, 0x02BC
     a20:	84 36       	cpi	r24, 0x64	; 100
     a22:	20 f4       	brcc	.+8      	; 0xa2c <Autorange+0x46>
							rangeIdx++;
     a24:	80 91 bb 02 	lds	r24, 0x02BB
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <Autorange+0x54>
							rangeIdx--;
						}
						break;
					//In the 1.1 Volt range, move to a larger scale if the voltage is close to Vref
					case 2:
						if (Ain > 250){
     a2c:	80 91 bc 02 	lds	r24, 0x02BC
     a30:	8b 3f       	cpi	r24, 0xFB	; 251
     a32:	28 f0       	brcs	.+10     	; 0xa3e <Autorange+0x58>
							rangeIdx--;
     a34:	80 91 bb 02 	lds	r24, 0x02BB
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	80 93 bb 02 	sts	0x02BB, r24
						}
						break;
				}
				setOref(3); // disable ohmref
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <setOref>
				setVref(rangeIdx);
     a44:	80 91 bb 02 	lds	r24, 0x02BB
     a48:	0e 94 b5 04 	call	0x96a	; 0x96a <setVref>
     a4c:	08 95       	ret
				break;

			case OHMMETER:
				switch (rangeIdx){
     a4e:	80 91 bb 02 	lds	r24, 0x02BB
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	51 f0       	breq	.+20     	; 0xa6a <Autorange+0x84>
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	18 f0       	brcs	.+6      	; 0xa60 <Autorange+0x7a>
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	b9 f4       	brne	.+46     	; 0xa8c <Autorange+0xa6>
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <Autorange+0x94>
					//In the 100kOhm range, move to a smaller scale if the resistance is less than 0.4 of Vcc 
					//(R_test is less than 10% of R) 
					case 0:
						if (Ain < 100){
     a60:	80 91 bc 02 	lds	r24, 0x02BC
     a64:	84 36       	cpi	r24, 0x64	; 100
     a66:	90 f4       	brcc	.+36     	; 0xa8c <Autorange+0xa6>
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <Autorange+0x8c>
				
					//In the 10kOhm range, move to a smaller scale if the reading is less than 0.4 of Vcc
					//(R_test is less than 10% of R). Move to a larger sclae if the reading is almost Vcc
					//(R_test is almost 95% of R).
					case 1:
						if (Ain < 100){
     a6a:	80 91 bc 02 	lds	r24, 0x02BC
     a6e:	84 36       	cpi	r24, 0x64	; 100
     a70:	20 f4       	brcc	.+8      	; 0xa7a <Autorange+0x94>
								rangeIdx++;
     a72:	80 91 bb 02 	lds	r24, 0x02BB
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	07 c0       	rjmp	.+14     	; 0xa88 <Autorange+0xa2>
						break;
	
					//In the 10kOhm range, move to a larger scale if the reading is almost Vcc 
					//(R_test is almost 95% of R).
					case 2:
						if (Ain > 250){
     a7a:	80 91 bc 02 	lds	r24, 0x02BC
     a7e:	8b 3f       	cpi	r24, 0xFB	; 251
     a80:	28 f0       	brcs	.+10     	; 0xa8c <Autorange+0xa6>
							rangeIdx--;
     a82:	80 91 bb 02 	lds	r24, 0x02BB
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	80 93 bb 02 	sts	0x02BB, r24
						}
					break;
				}
				setOref(rangeIdx);
     a8c:	80 91 bb 02 	lds	r24, 0x02BB
     a90:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <setOref>
     a94:	08 95       	ret

00000a96 <poll>:
			}
			break;
	}
}

void poll(void) {
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
	//get the sample
	Ain = ADCH;
     aae:	80 91 79 00 	lds	r24, 0x0079
     ab2:	80 93 bc 02 	sts	0x02BC, r24
	//start another conversion
	ADCSRA |= (1<<ADSC);
     ab6:	80 91 7a 00 	lds	r24, 0x007A
     aba:	80 64       	ori	r24, 0x40	; 64
     abc:	80 93 7a 00 	sts	0x007A, r24
	voltage = (float)Ain;
     ac0:	60 91 bc 02 	lds	r22, 0x02BC
	voltage = (voltage/256.0) * Vref;
     ac4:	e0 90 ad 02 	lds	r14, 0x02AD
     ac8:	f0 90 ae 02 	lds	r15, 0x02AE
     acc:	00 91 af 02 	lds	r16, 0x02AF
     ad0:	10 91 b0 02 	lds	r17, 0x02B0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__floatunsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	5b e3       	ldi	r21, 0x3B	; 59
     ae6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__mulsf3>
     aea:	a8 01       	movw	r20, r16
     aec:	97 01       	movw	r18, r14
     aee:	0e 94 9d 0b 	call	0x173a	; 0x173a <__mulsf3>
     af2:	3b 01       	movw	r6, r22
     af4:	4c 01       	movw	r8, r24
     af6:	60 93 9b 02 	sts	0x029B, r22
     afa:	70 93 9c 02 	sts	0x029C, r23
     afe:	80 93 9d 02 	sts	0x029D, r24
     b02:	90 93 9e 02 	sts	0x029E, r25
	ohm = (ohmRef * voltage)/(Vref - voltage);
     b06:	60 91 98 02 	lds	r22, 0x0298
     b0a:	a0 90 ad 02 	lds	r10, 0x02AD
     b0e:	b0 90 ae 02 	lds	r11, 0x02AE
     b12:	c0 90 af 02 	lds	r12, 0x02AF
     b16:	d0 90 b0 02 	lds	r13, 0x02B0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	88 27       	eor	r24, r24
     b1e:	77 fd       	sbrc	r23, 7
     b20:	80 95       	com	r24
     b22:	98 2f       	mov	r25, r24
     b24:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__floatsisf>
     b28:	a4 01       	movw	r20, r8
     b2a:	93 01       	movw	r18, r6
     b2c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__mulsf3>
     b30:	7b 01       	movw	r14, r22
     b32:	8c 01       	movw	r16, r24
     b34:	c6 01       	movw	r24, r12
     b36:	b5 01       	movw	r22, r10
     b38:	a4 01       	movw	r20, r8
     b3a:	93 01       	movw	r18, r6
     b3c:	0e 94 3f 0b 	call	0x167e	; 0x167e <__subsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c8 01       	movw	r24, r16
     b46:	b7 01       	movw	r22, r14
     b48:	0e 94 97 0c 	call	0x192e	; 0x192e <__divsf3>
     b4c:	7b 01       	movw	r14, r22
     b4e:	8c 01       	movw	r16, r24
     b50:	cb 01       	movw	r24, r22
     b52:	d8 01       	movw	r26, r16
     b54:	80 93 a0 02 	sts	0x02A0, r24
     b58:	90 93 a1 02 	sts	0x02A1, r25
     b5c:	a0 93 a2 02 	sts	0x02A2, r26
     b60:	b0 93 a3 02 	sts	0x02A3, r27
	switch(mode) {
     b64:	80 91 a4 02 	lds	r24, 0x02A4
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	19 f0       	breq	.+6      	; 0xb72 <poll+0xdc>
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	61 f4       	brne	.+24     	; 0xb88 <poll+0xf2>
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <poll+0xe2>
		case VOLTMETER:
			dtostrf(voltage, 4, 2, v_string);
     b72:	c4 01       	movw	r24, r8
     b74:	b3 01       	movw	r22, r6
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <poll+0xe6>
			break;
		case OHMMETER:
			dtostrf(ohm, 4, 2, v_string);
     b78:	b7 01       	movw	r22, r14
     b7a:	c8 01       	movw	r24, r16
     b7c:	44 e0       	ldi	r20, 0x04	; 4
     b7e:	22 e0       	ldi	r18, 0x02	; 2
     b80:	01 eb       	ldi	r16, 0xB1	; 177
     b82:	12 e0       	ldi	r17, 0x02	; 2
     b84:	0e 94 20 10 	call	0x2040	; 0x2040 <dtostrf>
			break;
	}
	sprintf(LCDBuffer, "%s",v_string);
     b88:	07 ea       	ldi	r16, 0xA7	; 167
     b8a:	12 e0       	ldi	r17, 0x02	; 2
     b8c:	c8 01       	movw	r24, r16
     b8e:	61 eb       	ldi	r22, 0xB1	; 177
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	0e 94 41 10 	call	0x2082	; 0x2082 <strcpy>

	CopyStringtoLCD(LCDBlank, 0, 0);
     b96:	80 e7       	ldi	r24, 0x70	; 112
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
	LCDGotoXY(0, 0);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	0e 94 ed 07 	call	0xfda	; 0xfda <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     baa:	f8 01       	movw	r30, r16
     bac:	01 90       	ld	r0, Z+
     bae:	00 20       	and	r0, r0
     bb0:	e9 f7       	brne	.-6      	; 0xbac <poll+0x116>
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	e0 1b       	sub	r30, r16
     bb6:	f1 0b       	sbc	r31, r17
     bb8:	c8 01       	movw	r24, r16
     bba:	6e 2f       	mov	r22, r30
     bbc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCDstring>
}
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	08 95       	ret

00000bda <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     bda:	0e 94 37 08 	call	0x106e	; 0x106e <LCDinit>
	LCDcursorOFF();
     bde:	0e 94 9f 08 	call	0x113e	; 0x113e <LCDcursorOFF>
	LCDclr();				//clear the display
     be2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
	LCDGotoXY(0,0);
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 ed 07 	call	0xfda	; 0xfda <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     bee:	82 e8       	ldi	r24, 0x82	; 130
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     bfa:	84 e9       	ldi	r24, 0x94	; 148
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
}
     c06:	08 95       	ret

00000c08 <Initialize>:
		}
		break;
	}
}

void Initialize(void) {
     c08:	1f 93       	push	r17
	//set up the ports
	triggerPoll = 0;
     c0a:	10 92 9f 02 	sts	0x029F, r1

	//init the A to D converter
	setVref(0); //Set to 5v Vref
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	0e 94 b5 04 	call	0x96a	; 0x96a <setVref>
	setOref(3); //Disable ohmref
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <setOref>

	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + 7;
     c1a:	87 e8       	ldi	r24, 0x87	; 135
     c1c:	80 93 7a 00 	sts	0x007A, r24

	// Set A to input (high impedence)
	DDRA = 0x00;
     c20:	11 b8       	out	0x01, r1	; 1

	// PortB: LEDs, output
	DDRB=0xff;
     c22:	1f ef       	ldi	r17, 0xFF	; 255
     c24:	14 b9       	out	0x04, r17	; 4
	PORTB=0xff;
     c26:	15 b9       	out	0x05, r17	; 5
	// PortD: Keypad
	DDRD=0x00;
     c28:	1a b8       	out	0x0a, r1	; 10

	//set up timer 0 for 1 mSec ticks
	TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;	//set the compare reg to 250 time ticks
     c30:	89 ef       	ldi	r24, 0xF9	; 249
     c32:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b00000010; // turn on clear-on-match
     c34:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011;	// clock prescalar to 64
     c36:	23 e0       	ldi	r18, 0x03	; 3
     c38:	25 bd       	out	0x25, r18	; 37

	//set up timer 1 to interrupt on capture
	TIMSK1 = (1 << ICIE1); //turn on timer1 input capture ISR
     c3a:	80 e2       	ldi	r24, 0x20	; 32
     c3c:	80 93 6f 00 	sts	0x006F, r24
	TCCR1A = 0b00000010;
     c40:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | 0b00000001; // Start 
     c44:	81 ec       	ldi	r24, 0xC1	; 193
     c46:	80 93 81 00 	sts	0x0081, r24
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting ADC demo...\n\r");

	//initialize the current key to null
	curKey = 0;
     c4a:	10 92 b5 02 	sts	0x02B5, r1
	elapsedTime = 30;
     c4e:	8e e1       	ldi	r24, 0x1E	; 30
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 96 02 	sts	0x0296, r25
     c56:	80 93 95 02 	sts	0x0295, r24
	debounceTime = 30;
     c5a:	90 93 b7 02 	sts	0x02B7, r25
     c5e:	80 93 b6 02 	sts	0x02B6, r24
	autoRange = 0;
     c62:	10 92 97 02 	sts	0x0297, r1
	mode = INIT;
     c66:	10 92 a4 02 	sts	0x02A4, r1
	manPage = WELCOME;
     c6a:	10 92 bd 02 	sts	0x02BD, r1
	keyState = RELEASED;
     c6e:	10 92 9a 02 	sts	0x029A, r1
	rangeIdx = 0;
     c72:	10 92 bb 02 	sts	0x02BB, r1
	rangeIdxMod = 3;
     c76:	20 93 94 02 	sts	0x0294, r18
	frequencyRef = frequencyRanges[rangeIdx];
     c7a:	80 91 bb 02 	lds	r24, 0x02BB
     c7e:	ef e0       	ldi	r30, 0x0F	; 15
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	e8 0f       	add	r30, r24
     c84:	f1 1d       	adc	r31, r1
     c86:	80 81       	ld	r24, Z
     c88:	80 93 bf 02 	sts	0x02BF, r24
	justSwitched = 0;
     c8c:	10 92 be 02 	sts	0x02BE, r1
	PORTB = ~0x01;
     c90:	8e ef       	ldi	r24, 0xFE	; 254
     c92:	85 b9       	out	0x05, r24	; 5
	InitLCD();
     c94:	0e 94 ed 05 	call	0xbda	; 0xbda <InitLCD>
	PORTB = 0xFF;
     c98:	15 b9       	out	0x05, r17	; 5
	sei();
     c9a:	78 94       	sei
}
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <main>:
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
	Initialize();
     ca0:	0e 94 04 06 	call	0xc08	; 0xc08 <Initialize>
	
	while(1){
	uint8_t key = curKey;
     ca4:	80 91 b5 02 	lds	r24, 0x02B5
		if (key){
     ca8:	88 23       	and	r24, r24
     caa:	11 f0       	breq	.+4      	; 0xcb0 <main+0x10>
			PORTB = ~key;
     cac:	80 95       	com	r24
     cae:	85 b9       	out	0x05, r24	; 5
		}
		if(triggerPoll) {
     cb0:	80 91 9f 02 	lds	r24, 0x029F
     cb4:	88 23       	and	r24, r24
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <main+0x24>
			poll();
     cb8:	0e 94 4b 05 	call	0xa96	; 0xa96 <poll>
			Autorange();
     cbc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Autorange>
			triggerPoll = 0;
     cc0:	10 92 9f 02 	sts	0x029F, r1
		}
		if (justSwitched){
     cc4:	80 91 be 02 	lds	r24, 0x02BE
     cc8:	88 23       	and	r24, r24
     cca:	61 f3       	breq	.-40     	; 0xca4 <main+0x4>
			switch (mode){
     ccc:	80 91 a4 02 	lds	r24, 0x02A4
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <main+0x36>
     cd4:	7c c0       	rjmp	.+248    	; 0xdce <main+0x12e>
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	20 f4       	brcc	.+8      	; 0xce2 <main+0x42>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <main+0x40>
     cde:	1f c1       	rjmp	.+574    	; 0xf1e <main+0x27e>
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <main+0x50>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	09 f4       	brne	.+2      	; 0xce8 <main+0x48>
     ce6:	a9 c0       	rjmp	.+338    	; 0xe3a <main+0x19a>
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	09 f0       	breq	.+2      	; 0xcee <main+0x4e>
     cec:	18 c1       	rjmp	.+560    	; 0xf1e <main+0x27e>
     cee:	db c0       	rjmp	.+438    	; 0xea6 <main+0x206>
				case MAN:
					switch (manPage){
     cf0:	80 91 bd 02 	lds	r24, 0x02BD
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	a1 f1       	breq	.+104    	; 0xd60 <main+0xc0>
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	28 f4       	brcc	.+10     	; 0xd06 <main+0x66>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <main+0x94>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	18 f5       	brcc	.+70     	; 0xd4a <main+0xaa>
     d04:	0c c0       	rjmp	.+24     	; 0xd1e <main+0x7e>
     d06:	85 30       	cpi	r24, 0x05	; 5
     d08:	09 f4       	brne	.+2      	; 0xd0c <main+0x6c>
     d0a:	40 c0       	rjmp	.+128    	; 0xd8c <main+0xec>
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	98 f1       	brcs	.+102    	; 0xd76 <main+0xd6>
     d10:	86 30       	cpi	r24, 0x06	; 6
     d12:	09 f4       	brne	.+2      	; 0xd16 <main+0x76>
     d14:	46 c0       	rjmp	.+140    	; 0xda2 <main+0x102>
     d16:	87 30       	cpi	r24, 0x07	; 7
     d18:	09 f0       	breq	.+2      	; 0xd1c <main+0x7c>
     d1a:	01 c1       	rjmp	.+514    	; 0xf1e <main+0x27e>
     d1c:	4d c0       	rjmp	.+154    	; 0xdb8 <main+0x118>
						case WELCOME:
							LCDclr();
     d1e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     d22:	81 e3       	ldi	r24, 0x31	; 49
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     d2e:	8c e3       	ldi	r24, 0x3C	; 60
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	dd c0       	rjmp	.+442    	; 0xeee <main+0x24e>
							break;
						case NAVIGATION_1:
							LCDclr();
     d34:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     d38:	8b e4       	ldi	r24, 0x4B	; 75
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     d44:	8d e5       	ldi	r24, 0x5D	; 93
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	d2 c0       	rjmp	.+420    	; 0xeee <main+0x24e>
							break;
						case NAVIGATION_2:
							LCDclr();
     d4a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     d4e:	8f e6       	ldi	r24, 0x6F	; 111
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     d5a:	80 e8       	ldi	r24, 0x80	; 128
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	c7 c0       	rjmp	.+398    	; 0xeee <main+0x24e>
							break;
					 	case VOLT_MAN:
							LCDclr();
     d60:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDVoltManTop, 0, 0);
     d64:	8f e8       	ldi	r24, 0x8F	; 143
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDVoltManBot, 0, 1);
     d70:	80 ea       	ldi	r24, 0xA0	; 160
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	bc c0       	rjmp	.+376    	; 0xeee <main+0x24e>
							break;
						case OHM_MAN:
							LCDclr();
     d76:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDOhmManTop, 0, 0);
     d7a:	8b ea       	ldi	r24, 0xAB	; 171
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDOhmManBot, 0, 1);
     d86:	8b eb       	ldi	r24, 0xBB	; 187
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	b1 c0       	rjmp	.+354    	; 0xeee <main+0x24e>
							break;
						case FREQ_MAN:
							LCDclr();
     d8c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDFreqManTop, 0, 0);
     d90:	85 ec       	ldi	r24, 0xC5	; 197
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDFreqManBot, 0, 1);
     d9c:	86 ed       	ldi	r24, 0xD6	; 214
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	a6 c0       	rjmp	.+332    	; 0xeee <main+0x24e>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     da2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     da6:	83 ee       	ldi	r24, 0xE3	; 227
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     db2:	80 ef       	ldi	r24, 0xF0	; 240
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	9b c0       	rjmp	.+310    	; 0xeee <main+0x24e>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     db8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     dbc:	8b ef       	ldi	r24, 0xFB	; 251
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	90 c0       	rjmp	.+288    	; 0xeee <main+0x24e>
							break;
					}
						break;

				case VOLTMETER:
					LCDclr();
     dce:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	66 e0       	ldi	r22, 0x06	; 6
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					setOref(3); // disable ohmmeter
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <setOref>
					if (autoRange){
     df0:	80 91 97 02 	lds	r24, 0x0297
     df4:	88 23       	and	r24, r24
     df6:	09 f0       	breq	.+2      	; 0xdfa <main+0x15a>
     df8:	78 c0       	rjmp	.+240    	; 0xeea <main+0x24a>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     dfa:	86 ea       	ldi	r24, 0xA6	; 166
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
						switch (rangeIdx){
     e06:	80 91 bb 02 	lds	r24, 0x02BB
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	41 f0       	breq	.+16     	; 0xe1e <main+0x17e>
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	18 f0       	brcs	.+6      	; 0xe18 <main+0x178>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	69 f4       	brne	.+26     	; 0xe30 <main+0x190>
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <main+0x184>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     e18:	8e eb       	ldi	r24, 0xBE	; 190
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <main+0x188>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     e1e:	87 ec       	ldi	r24, 0xC7	; 199
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <main+0x188>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     e24:	83 ed       	ldi	r24, 0xD3	; 211
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	67 e0       	ldi	r22, 0x07	; 7
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
								break;
						}
						setVref(rangeIdx);
     e30:	80 91 bb 02 	lds	r24, 0x02BB
     e34:	0e 94 b5 04 	call	0x96a	; 0x96a <setVref>
     e38:	72 c0       	rjmp	.+228    	; 0xf1e <main+0x27e>
					}	
					break;

				case OHMMETER:
					LCDclr();
     e3a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					CopyStringtoLCD(LCDOhm, MODE_START, 0);
     e4a:	8c e1       	ldi	r24, 0x1C	; 28
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	66 e0       	ldi	r22, 0x06	; 6
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					setVref(0); // 5v reference
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	0e 94 b5 04 	call	0x96a	; 0x96a <setVref>
					if (autoRange){
     e5c:	80 91 97 02 	lds	r24, 0x0297
     e60:	88 23       	and	r24, r24
     e62:	09 f0       	breq	.+2      	; 0xe66 <main+0x1c6>
     e64:	42 c0       	rjmp	.+132    	; 0xeea <main+0x24a>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     e66:	86 ea       	ldi	r24, 0xA6	; 166
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
						switch (rangeIdx){
     e72:	80 91 bb 02 	lds	r24, 0x02BB
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	41 f0       	breq	.+16     	; 0xe8a <main+0x1ea>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	18 f0       	brcs	.+6      	; 0xe84 <main+0x1e4>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	69 f4       	brne	.+26     	; 0xe9c <main+0x1fc>
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <main+0x1f0>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     e84:	8f ee       	ldi	r24, 0xEF	; 239
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <main+0x1f4>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     e8a:	86 ee       	ldi	r24, 0xE6	; 230
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <main+0x1f4>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     e90:	8e ed       	ldi	r24, 0xDE	; 222
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
								break;
						}
						setOref(rangeIdx);
     e9c:	80 91 bb 02 	lds	r24, 0x02BB
     ea0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <setOref>
     ea4:	3c c0       	rjmp	.+120    	; 0xf1e <main+0x27e>
					}
					break;

				case FREQMETER:
					LCDclr();
     ea6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
					CopyStringtoLCD(LCDFreq, MODE_START, 0);
     eb6:	86 e2       	ldi	r24, 0x26	; 38
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>

					//Set the prescalar on TIMER1 to the appropriate range
 					TCCR1B &= ~0x07;
     ec2:	80 91 81 00 	lds	r24, 0x0081
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	80 93 81 00 	sts	0x0081, r24
 					TCCR1B |= TIMERAprescalars[rangeIdx];
     ecc:	90 91 81 00 	lds	r25, 0x0081
     ed0:	e0 91 bb 02 	lds	r30, 0x02BB
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	ef 5e       	subi	r30, 0xEF	; 239
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	80 81       	ld	r24, Z
     edc:	98 2b       	or	r25, r24
     ede:	90 93 81 00 	sts	0x0081, r25

					if (autoRange){
     ee2:	80 91 97 02 	lds	r24, 0x0297
     ee6:	88 23       	and	r24, r24
     ee8:	21 f0       	breq	.+8      	; 0xef2 <main+0x252>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     eea:	8f ea       	ldi	r24, 0xAF	; 175
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	13 c0       	rjmp	.+38     	; 0xf18 <main+0x278>
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     ef2:	86 ea       	ldi	r24, 0xA6	; 166
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
						switch (rangeIdx){
     efe:	80 91 bb 02 	lds	r24, 0x02BB
     f02:	88 23       	and	r24, r24
     f04:	19 f0       	breq	.+6      	; 0xf0c <main+0x26c>
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	51 f4       	brne	.+20     	; 0xf1e <main+0x27e>
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <main+0x272>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <main+0x276>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     f12:	89 ef       	ldi	r24, 0xF9	; 249
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	67 e0       	ldi	r22, 0x07	; 7
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 fc 07 	call	0xff8	; 0xff8 <CopyStringtoLCD>
						}
					}
					break;
			}

			justSwitched = 0;
     f1e:	10 92 be 02 	sts	0x02BE, r1
     f22:	c0 ce       	rjmp	.-640    	; 0xca4 <main+0x4>

00000f24 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     f24:	28 2f       	mov	r18, r24
     f26:	20 7f       	andi	r18, 0xF0	; 240
     f28:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     f2a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f2c:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f2e:	2a ef       	ldi	r18, 0xFA	; 250
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f38:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f3a:	40 98       	cbi	0x08, 0	; 8
     f3c:	f9 01       	movw	r30, r18
     f3e:	31 97       	sbiw	r30, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	44 e0       	ldi	r20, 0x04	; 4
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	4a 95       	dec	r20
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <LCDsendChar+0x22>
     f4e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     f50:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f52:	42 9a       	sbi	0x08, 2	; 8
     f54:	c9 01       	movw	r24, r18
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f5a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f5c:	40 98       	cbi	0x08, 0	; 8
     f5e:	c9 01       	movw	r24, r18
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     f64:	08 95       	ret

00000f66 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     f66:	28 2f       	mov	r18, r24
     f68:	20 7f       	andi	r18, 0xF0	; 240
     f6a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     f6c:	42 9a       	sbi	0x08, 2	; 8
     f6e:	2a ef       	ldi	r18, 0xFA	; 250
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	31 97       	sbiw	r30, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f78:	42 98       	cbi	0x08, 2	; 8
     f7a:	f9 01       	movw	r30, r18
     f7c:	31 97       	sbiw	r30, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	54 e0       	ldi	r21, 0x04	; 4
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	5a 95       	dec	r21
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <LCDsendCommand+0x1e>
     f8c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     f8e:	42 9a       	sbi	0x08, 2	; 8
     f90:	c9 01       	movw	r24, r18
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f96:	42 98       	cbi	0x08, 2	; 8
     f98:	c9 01       	movw	r24, r18
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     f9e:	08 95       	ret

00000fa0 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
     fa6:	08 95       	ret

00000fa8 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
     fae:	08 95       	ret

00000fb0 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <LCDstring+0x20>
     fbe:	ec 01       	movw	r28, r24
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     fc4:	89 91       	ld	r24, Y+
     fc6:	0e 94 92 07 	call	0xf24	; 0xf24 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     fca:	1f 5f       	subi	r17, 0xFF	; 255
     fcc:	10 17       	cp	r17, r16
     fce:	d0 f3       	brcs	.-12     	; 0xfc4 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     fda:	62 30       	cpi	r22, 0x02	; 2
     fdc:	31 f0       	breq	.+12     	; 0xfea <LCDGotoXY+0x10>
     fde:	63 30       	cpi	r22, 0x03	; 3
     fe0:	31 f0       	breq	.+12     	; 0xfee <LCDGotoXY+0x14>
     fe2:	61 30       	cpi	r22, 0x01	; 1
     fe4:	29 f4       	brne	.+10     	; 0xff0 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     fe6:	80 5c       	subi	r24, 0xC0	; 192
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     fea:	8c 5e       	subi	r24, 0xEC	; 236
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     fee:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
	
}
     ff6:	08 95       	ret

00000ff8 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
    1000:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1002:	64 2f       	mov	r22, r20
    1004:	0e 94 ed 07 	call	0xfda	; 0xfda <LCDGotoXY>
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    100c:	0e 94 92 07 	call	0xf24	; 0xf24 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1010:	1f 5f       	subi	r17, 0xFF	; 255
    1012:	fe 01       	movw	r30, r28
    1014:	e1 0f       	add	r30, r17
    1016:	f1 1d       	adc	r31, r1
    1018:	84 91       	lpm	r24, Z+
    101a:	88 23       	and	r24, r24
    101c:	b9 f7       	brne	.-18     	; 0x100c <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	08 95       	ret

00001026 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	7c 01       	movw	r14, r24
    1034:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1036:	11 0f       	add	r17, r17
    1038:	11 0f       	add	r17, r17
    103a:	11 0f       	add	r17, r17
    103c:	10 64       	ori	r17, 0x40	; 64
    103e:	c0 e0       	ldi	r28, 0x00	; 0
    1040:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1042:	f7 01       	movw	r30, r14
    1044:	ec 0f       	add	r30, r28
    1046:	fd 1f       	adc	r31, r29
    1048:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    104a:	81 2f       	mov	r24, r17
    104c:	8c 0f       	add	r24, r28
    104e:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
		LCDsendChar(pcc);
    1052:	80 2f       	mov	r24, r16
    1054:	0e 94 92 07 	call	0xf24	; 0xf24 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1058:	21 96       	adiw	r28, 0x01	; 1
    105a:	c8 30       	cpi	r28, 0x08	; 8
    105c:	d1 05       	cpc	r29, r1
    105e:	89 f7       	brne	.-30     	; 0x1042 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	86 ea       	ldi	r24, 0xA6	; 166
    1076:	9e e0       	ldi	r25, 0x0E	; 14
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    107c:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    107e:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1080:	87 b1       	in	r24, 0x07	; 7
    1082:	80 6f       	ori	r24, 0xF0	; 240
    1084:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1086:	87 b1       	in	r24, 0x07	; 7
    1088:	87 60       	ori	r24, 0x07	; 7
    108a:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    108c:	80 e3       	ldi	r24, 0x30	; 48
    108e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1090:	42 9a       	sbi	0x08, 2	; 8
    1092:	2a ef       	ldi	r18, 0xFA	; 250
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	31 97       	sbiw	r30, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    109c:	42 98       	cbi	0x08, 2	; 8
    109e:	f9 01       	movw	r30, r18
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    10a4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    10a6:	42 9a       	sbi	0x08, 2	; 8
    10a8:	c9 01       	movw	r24, r18
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    10ae:	42 98       	cbi	0x08, 2	; 8
    10b0:	c9 01       	movw	r24, r18
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    10ba:	42 9a       	sbi	0x08, 2	; 8
    10bc:	c9 01       	movw	r24, r18
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    10c2:	42 98       	cbi	0x08, 2	; 8
    10c4:	c9 01       	movw	r24, r18
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    10ca:	88 e2       	ldi	r24, 0x28	; 40
    10cc:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    10d0:	8c e0       	ldi	r24, 0x0C	; 12
    10d2:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
    10d6:	c9 e1       	ldi	r28, 0x19	; 25
    10d8:	d2 e0       	ldi	r29, 0x02	; 2
    10da:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    10dc:	16 2f       	mov	r17, r22
    10de:	1f 5f       	subi	r17, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDdefinechar>
    10e6:	28 96       	adiw	r28, 0x08	; 8
    10e8:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    10ea:	18 30       	cpi	r17, 0x08	; 8
    10ec:	b9 f7       	brne	.-18     	; 0x10dc <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	08 95       	ret

000010f6 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	08 2f       	mov	r16, r24
    10fc:	10 e0       	ldi	r17, 0x00	; 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__stack+0x9>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1100:	8e e1       	ldi	r24, 0x1E	; 30
    1102:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1106:	1f 5f       	subi	r17, 0xFF	; 255
    1108:	10 17       	cp	r17, r16
    110a:	d0 f3       	brcs	.-12     	; 0x1100 <__stack+0x1>
	{
		LCDsendCommand(0x1E);
	}
}
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	08 2f       	mov	r16, r24
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    111c:	88 e1       	ldi	r24, 0x18	; 24
    111e:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1122:	1f 5f       	subi	r17, 0xFF	; 255
    1124:	10 17       	cp	r17, r16
    1126:	d0 f3       	brcs	.-12     	; 0x111c <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    112e:	8e e0       	ldi	r24, 0x0E	; 14
    1130:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
    1134:	08 95       	ret

00001136 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1136:	8f e0       	ldi	r24, 0x0F	; 15
    1138:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
    113c:	08 95       	ret

0000113e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    113e:	8c e0       	ldi	r24, 0x0C	; 12
    1140:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
    1144:	08 95       	ret

00001146 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1146:	88 e0       	ldi	r24, 0x08	; 8
    1148:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
    114c:	08 95       	ret

0000114e <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
}
    1154:	08 95       	ret

00001156 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	08 2f       	mov	r16, r24
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1160:	80 e1       	ldi	r24, 0x10	; 16
    1162:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1166:	1f 5f       	subi	r17, 0xFF	; 255
    1168:	10 17       	cp	r17, r16
    116a:	d0 f3       	brcs	.-12     	; 0x1160 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	08 2f       	mov	r16, r24
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    117c:	84 e1       	ldi	r24, 0x14	; 20
    117e:	0e 94 b3 07 	call	0xf66	; 0xf66 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1182:	1f 5f       	subi	r17, 0xFF	; 255
    1184:	10 17       	cp	r17, r16
    1186:	d0 f3       	brcs	.-12     	; 0x117c <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    119e:	96 e0       	ldi	r25, 0x06	; 6
    11a0:	89 9f       	mul	r24, r25
    11a2:	c0 01       	movw	r24, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	24 2f       	mov	r18, r20
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	ac 01       	movw	r20, r24
    11ac:	42 9f       	mul	r20, r18
    11ae:	c0 01       	movw	r24, r0
    11b0:	43 9f       	mul	r20, r19
    11b2:	90 0d       	add	r25, r0
    11b4:	52 9f       	mul	r21, r18
    11b6:	90 0d       	add	r25, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__divmodhi4>
    11c0:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    11c2:	cb 01       	movw	r24, r22
    11c4:	66 e0       	ldi	r22, 0x06	; 6
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__udivmodhi4>
    11cc:	e8 2e       	mov	r14, r24
    11ce:	ff 24       	eor	r15, r15
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	12 c0       	rjmp	.+36     	; 0x11fa <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    11d6:	c8 01       	movw	r24, r16
    11d8:	05 96       	adiw	r24, 0x05	; 5
    11da:	c8 17       	cp	r28, r24
    11dc:	d9 07       	cpc	r29, r25
    11de:	10 f0       	brcs	.+4      	; 0x11e4 <LCDprogressBar+0x56>
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    11e4:	c0 17       	cp	r28, r16
    11e6:	d1 07       	cpc	r29, r17
    11e8:	10 f0       	brcs	.+4      	; 0x11ee <LCDprogressBar+0x60>
    11ea:	8e 2d       	mov	r24, r14
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <LCDprogressBar+0x62>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    11f0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    11f4:	f3 94       	inc	r15
    11f6:	0a 5f       	subi	r16, 0xFA	; 250
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	fd 14       	cp	r15, r13
    11fc:	60 f3       	brcs	.-40     	; 0x11d6 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	08 95       	ret

0000120e <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    120e:	87 e6       	ldi	r24, 0x67	; 103
    1210:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1214:	88 e1       	ldi	r24, 0x18	; 24
    1216:	80 93 c1 00 	sts	0x00C1, r24
}
    121a:	08 95       	ret

0000121c <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    121c:	1f 93       	push	r17
    121e:	18 2f       	mov	r17, r24

  if (c == '\a')
    1220:	87 30       	cpi	r24, 0x07	; 7
    1222:	49 f4       	brne	.+18     	; 0x1236 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1224:	60 91 c4 02 	lds	r22, 0x02C4
    1228:	70 91 c5 02 	lds	r23, 0x02C5
    122c:	81 e3       	ldi	r24, 0x31	; 49
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 48 10 	call	0x2090	; 0x2090 <fputs>
    1234:	0b c0       	rjmp	.+22     	; 0x124c <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	19 f4       	brne	.+6      	; 0x1240 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    123a:	8d e0       	ldi	r24, 0x0D	; 13
    123c:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1240:	80 91 c0 00 	lds	r24, 0x00C0
    1244:	85 ff       	sbrs	r24, 5
    1246:	fc cf       	rjmp	.-8      	; 0x1240 <uart_putchar+0x24>
  UDR0 = c;
    1248:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	1f 91       	pop	r17
    1252:	08 95       	ret

00001254 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1262:	80 91 42 02 	lds	r24, 0x0242
    1266:	90 91 43 02 	lds	r25, 0x0243
    126a:	89 2b       	or	r24, r25
    126c:	09 f0       	breq	.+2      	; 0x1270 <uart_getchar+0x1c>
    126e:	9f c0       	rjmp	.+318    	; 0x13ae <uart_getchar+0x15a>
    1270:	04 e4       	ldi	r16, 0x44	; 68
    1272:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1274:	80 91 c0 00 	lds	r24, 0x00C0
    1278:	87 ff       	sbrs	r24, 7
    127a:	fc cf       	rjmp	.-8      	; 0x1274 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    127c:	80 91 c0 00 	lds	r24, 0x00C0
    1280:	84 ff       	sbrs	r24, 4
    1282:	03 c0       	rjmp	.+6      	; 0x128a <uart_getchar+0x36>
    1284:	2e ef       	ldi	r18, 0xFE	; 254
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	a6 c0       	rjmp	.+332    	; 0x13d6 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    128a:	80 91 c0 00 	lds	r24, 0x00C0
    128e:	83 fd       	sbrc	r24, 3
    1290:	a0 c0       	rjmp	.+320    	; 0x13d2 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    1292:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1296:	9d 30       	cpi	r25, 0x0D	; 13
    1298:	11 f0       	breq	.+4      	; 0x129e <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    129a:	9a 30       	cpi	r25, 0x0A	; 10
    129c:	69 f4       	brne	.+26     	; 0x12b8 <uart_getchar+0x64>
	  {
	    *cp = c;
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	f8 01       	movw	r30, r16
    12a2:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    12a4:	b7 01       	movw	r22, r14
    12a6:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
	    rxp = b;
    12aa:	84 e4       	ldi	r24, 0x44	; 68
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	90 93 43 02 	sts	0x0243, r25
    12b2:	80 93 42 02 	sts	0x0242, r24
    12b6:	7b c0       	rjmp	.+246    	; 0x13ae <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    12b8:	99 30       	cpi	r25, 0x09	; 9
    12ba:	09 f4       	brne	.+2      	; 0x12be <uart_getchar+0x6a>
    12bc:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    12be:	89 2f       	mov	r24, r25
    12c0:	80 52       	subi	r24, 0x20	; 32
    12c2:	8f 35       	cpi	r24, 0x5F	; 95
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <uart_getchar+0x76>
    12c6:	90 3a       	cpi	r25, 0xA0	; 160
    12c8:	70 f0       	brcs	.+28     	; 0x12e6 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    12ca:	f2 e0       	ldi	r31, 0x02	; 2
    12cc:	03 39       	cpi	r16, 0x93	; 147
    12ce:	1f 07       	cpc	r17, r31
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    12d2:	87 e0       	ldi	r24, 0x07	; 7
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    12d6:	f8 01       	movw	r30, r16
    12d8:	91 93       	st	Z+, r25
    12da:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    12dc:	89 2f       	mov	r24, r25
    12de:	b7 01       	movw	r22, r14
    12e0:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
    12e4:	c7 cf       	rjmp	.-114    	; 0x1274 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    12e6:	92 31       	cpi	r25, 0x12	; 18
    12e8:	39 f1       	breq	.+78     	; 0x1338 <uart_getchar+0xe4>
    12ea:	93 31       	cpi	r25, 0x13	; 19
    12ec:	38 f4       	brcc	.+14     	; 0x12fc <uart_getchar+0xa8>
    12ee:	93 30       	cpi	r25, 0x03	; 3
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <uart_getchar+0xa0>
    12f2:	6f c0       	rjmp	.+222    	; 0x13d2 <uart_getchar+0x17e>
    12f4:	98 30       	cpi	r25, 0x08	; 8
    12f6:	09 f0       	breq	.+2      	; 0x12fa <uart_getchar+0xa6>
    12f8:	bd cf       	rjmp	.-134    	; 0x1274 <uart_getchar+0x20>
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <uart_getchar+0xba>
    12fc:	97 31       	cpi	r25, 0x17	; 23
    12fe:	09 f4       	brne	.+2      	; 0x1302 <uart_getchar+0xae>
    1300:	4b c0       	rjmp	.+150    	; 0x1398 <uart_getchar+0x144>
    1302:	9f 37       	cpi	r25, 0x7F	; 127
    1304:	21 f0       	breq	.+8      	; 0x130e <uart_getchar+0xba>
    1306:	95 31       	cpi	r25, 0x15	; 21
    1308:	09 f0       	breq	.+2      	; 0x130c <uart_getchar+0xb8>
    130a:	b4 cf       	rjmp	.-152    	; 0x1274 <uart_getchar+0x20>
    130c:	32 c0       	rjmp	.+100    	; 0x1372 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    130e:	f2 e0       	ldi	r31, 0x02	; 2
    1310:	04 34       	cpi	r16, 0x44	; 68
    1312:	1f 07       	cpc	r17, r31
    1314:	09 f0       	breq	.+2      	; 0x1318 <uart_getchar+0xc4>
    1316:	08 f4       	brcc	.+2      	; 0x131a <uart_getchar+0xc6>
    1318:	ad cf       	rjmp	.-166    	; 0x1274 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    131a:	88 e0       	ldi	r24, 0x08	; 8
    131c:	b7 01       	movw	r22, r14
    131e:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar(' ', stream);
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	b7 01       	movw	r22, r14
    1326:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar('\b', stream);
    132a:	88 e0       	ldi	r24, 0x08	; 8
    132c:	b7 01       	movw	r22, r14
    132e:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		cp--;
    1332:	01 50       	subi	r16, 0x01	; 1
    1334:	10 40       	sbci	r17, 0x00	; 0
    1336:	9e cf       	rjmp	.-196    	; 0x1274 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1338:	8d e0       	ldi	r24, 0x0D	; 13
    133a:	b7 01       	movw	r22, r14
    133c:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
    1340:	c4 e4       	ldi	r28, 0x44	; 68
    1342:	d2 e0       	ldi	r29, 0x02	; 2
    1344:	04 c0       	rjmp	.+8      	; 0x134e <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1346:	89 91       	ld	r24, Y+
    1348:	b7 01       	movw	r22, r14
    134a:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    134e:	c0 17       	cp	r28, r16
    1350:	d1 07       	cpc	r29, r17
    1352:	c8 f3       	brcs	.-14     	; 0x1346 <uart_getchar+0xf2>
    1354:	8f cf       	rjmp	.-226    	; 0x1274 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1356:	88 e0       	ldi	r24, 0x08	; 8
    1358:	b7 01       	movw	r22, r14
    135a:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar(' ', stream);
    135e:	80 e2       	ldi	r24, 0x20	; 32
    1360:	b7 01       	movw	r22, r14
    1362:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar('\b', stream);
    1366:	88 e0       	ldi	r24, 0x08	; 8
    1368:	b7 01       	movw	r22, r14
    136a:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		cp--;
    136e:	01 50       	subi	r16, 0x01	; 1
    1370:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	04 34       	cpi	r16, 0x44	; 68
    1376:	18 07       	cpc	r17, r24
    1378:	09 f0       	breq	.+2      	; 0x137c <uart_getchar+0x128>
    137a:	68 f7       	brcc	.-38     	; 0x1356 <uart_getchar+0x102>
    137c:	7b cf       	rjmp	.-266    	; 0x1274 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    137e:	88 e0       	ldi	r24, 0x08	; 8
    1380:	b7 01       	movw	r22, r14
    1382:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar(' ', stream);
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	b7 01       	movw	r22, r14
    138a:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
		uart_putchar('\b', stream);
    138e:	88 e0       	ldi	r24, 0x08	; 8
    1390:	b7 01       	movw	r22, r14
    1392:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_putchar>
    1396:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1398:	e2 e0       	ldi	r30, 0x02	; 2
    139a:	04 34       	cpi	r16, 0x44	; 68
    139c:	1e 07       	cpc	r17, r30
    139e:	09 f0       	breq	.+2      	; 0x13a2 <uart_getchar+0x14e>
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <uart_getchar+0x150>
    13a2:	68 cf       	rjmp	.-304    	; 0x1274 <uart_getchar+0x20>
    13a4:	e8 01       	movw	r28, r16
    13a6:	8a 91       	ld	r24, -Y
    13a8:	80 32       	cpi	r24, 0x20	; 32
    13aa:	49 f7       	brne	.-46     	; 0x137e <uart_getchar+0x12a>
    13ac:	63 cf       	rjmp	.-314    	; 0x1274 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    13ae:	e0 91 42 02 	lds	r30, 0x0242
    13b2:	f0 91 43 02 	lds	r31, 0x0243
    13b6:	81 91       	ld	r24, Z+
    13b8:	f0 93 43 02 	sts	0x0243, r31
    13bc:	e0 93 42 02 	sts	0x0242, r30
  if (c == '\n')
    13c0:	8a 30       	cpi	r24, 0x0A	; 10
    13c2:	21 f4       	brne	.+8      	; 0x13cc <uart_getchar+0x178>
    rxp = 0;
    13c4:	10 92 43 02 	sts	0x0243, r1
    13c8:	10 92 42 02 	sts	0x0242, r1

  return c;
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <uart_getchar+0x182>
    13d2:	2f ef       	ldi	r18, 0xFF	; 255
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
}
    13d6:	c9 01       	movw	r24, r18
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	08 95       	ret

000013e6 <_fpadd_parts>:
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__prologue_saves__>
    13f2:	dc 01       	movw	r26, r24
    13f4:	2b 01       	movw	r4, r22
    13f6:	fa 01       	movw	r30, r20
    13f8:	9c 91       	ld	r25, X
    13fa:	92 30       	cpi	r25, 0x02	; 2
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <_fpadd_parts+0x1a>
    13fe:	39 c1       	rjmp	.+626    	; 0x1672 <_fpadd_parts+0x28c>
    1400:	eb 01       	movw	r28, r22
    1402:	88 81       	ld	r24, Y
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	08 f4       	brcc	.+2      	; 0x140a <_fpadd_parts+0x24>
    1408:	33 c1       	rjmp	.+614    	; 0x1670 <_fpadd_parts+0x28a>
    140a:	94 30       	cpi	r25, 0x04	; 4
    140c:	69 f4       	brne	.+26     	; 0x1428 <_fpadd_parts+0x42>
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	09 f0       	breq	.+2      	; 0x1414 <_fpadd_parts+0x2e>
    1412:	2f c1       	rjmp	.+606    	; 0x1672 <_fpadd_parts+0x28c>
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	9c 91       	ld	r25, X
    1418:	11 97       	sbiw	r26, 0x01	; 1
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	98 17       	cp	r25, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <_fpadd_parts+0x3c>
    1420:	28 c1       	rjmp	.+592    	; 0x1672 <_fpadd_parts+0x28c>
    1422:	a9 e3       	ldi	r26, 0x39	; 57
    1424:	b1 e0       	ldi	r27, 0x01	; 1
    1426:	25 c1       	rjmp	.+586    	; 0x1672 <_fpadd_parts+0x28c>
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	09 f4       	brne	.+2      	; 0x142e <_fpadd_parts+0x48>
    142c:	21 c1       	rjmp	.+578    	; 0x1670 <_fpadd_parts+0x28a>
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	a9 f4       	brne	.+42     	; 0x145c <_fpadd_parts+0x76>
    1432:	92 30       	cpi	r25, 0x02	; 2
    1434:	09 f0       	breq	.+2      	; 0x1438 <_fpadd_parts+0x52>
    1436:	1d c1       	rjmp	.+570    	; 0x1672 <_fpadd_parts+0x28c>
    1438:	9a 01       	movw	r18, r20
    143a:	ad 01       	movw	r20, r26
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	ea 01       	movw	r28, r20
    1440:	09 90       	ld	r0, Y+
    1442:	ae 01       	movw	r20, r28
    1444:	e9 01       	movw	r28, r18
    1446:	09 92       	st	Y+, r0
    1448:	9e 01       	movw	r18, r28
    144a:	81 50       	subi	r24, 0x01	; 1
    144c:	c1 f7       	brne	.-16     	; 0x143e <_fpadd_parts+0x58>
    144e:	e2 01       	movw	r28, r4
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	11 96       	adiw	r26, 0x01	; 1
    1454:	9c 91       	ld	r25, X
    1456:	89 23       	and	r24, r25
    1458:	81 83       	std	Z+1, r24	; 0x01
    145a:	08 c1       	rjmp	.+528    	; 0x166c <_fpadd_parts+0x286>
    145c:	92 30       	cpi	r25, 0x02	; 2
    145e:	09 f4       	brne	.+2      	; 0x1462 <_fpadd_parts+0x7c>
    1460:	07 c1       	rjmp	.+526    	; 0x1670 <_fpadd_parts+0x28a>
    1462:	12 96       	adiw	r26, 0x02	; 2
    1464:	2d 90       	ld	r2, X+
    1466:	3c 90       	ld	r3, X
    1468:	13 97       	sbiw	r26, 0x03	; 3
    146a:	eb 01       	movw	r28, r22
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	9b 81       	ldd	r25, Y+3	; 0x03
    1470:	14 96       	adiw	r26, 0x04	; 4
    1472:	ad 90       	ld	r10, X+
    1474:	bd 90       	ld	r11, X+
    1476:	cd 90       	ld	r12, X+
    1478:	dc 90       	ld	r13, X
    147a:	17 97       	sbiw	r26, 0x07	; 7
    147c:	ec 80       	ldd	r14, Y+4	; 0x04
    147e:	fd 80       	ldd	r15, Y+5	; 0x05
    1480:	0e 81       	ldd	r16, Y+6	; 0x06
    1482:	1f 81       	ldd	r17, Y+7	; 0x07
    1484:	91 01       	movw	r18, r2
    1486:	28 1b       	sub	r18, r24
    1488:	39 0b       	sbc	r19, r25
    148a:	b9 01       	movw	r22, r18
    148c:	37 ff       	sbrs	r19, 7
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <_fpadd_parts+0xb2>
    1490:	66 27       	eor	r22, r22
    1492:	77 27       	eor	r23, r23
    1494:	62 1b       	sub	r22, r18
    1496:	73 0b       	sbc	r23, r19
    1498:	60 32       	cpi	r22, 0x20	; 32
    149a:	71 05       	cpc	r23, r1
    149c:	0c f0       	brlt	.+2      	; 0x14a0 <_fpadd_parts+0xba>
    149e:	61 c0       	rjmp	.+194    	; 0x1562 <_fpadd_parts+0x17c>
    14a0:	12 16       	cp	r1, r18
    14a2:	13 06       	cpc	r1, r19
    14a4:	6c f5       	brge	.+90     	; 0x1500 <_fpadd_parts+0x11a>
    14a6:	37 01       	movw	r6, r14
    14a8:	48 01       	movw	r8, r16
    14aa:	06 2e       	mov	r0, r22
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <_fpadd_parts+0xd0>
    14ae:	96 94       	lsr	r9
    14b0:	87 94       	ror	r8
    14b2:	77 94       	ror	r7
    14b4:	67 94       	ror	r6
    14b6:	0a 94       	dec	r0
    14b8:	d2 f7       	brpl	.-12     	; 0x14ae <_fpadd_parts+0xc8>
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <_fpadd_parts+0xe6>
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	44 1f       	adc	r20, r20
    14ca:	55 1f       	adc	r21, r21
    14cc:	6a 95       	dec	r22
    14ce:	d2 f7       	brpl	.-12     	; 0x14c4 <_fpadd_parts+0xde>
    14d0:	21 50       	subi	r18, 0x01	; 1
    14d2:	30 40       	sbci	r19, 0x00	; 0
    14d4:	40 40       	sbci	r20, 0x00	; 0
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	2e 21       	and	r18, r14
    14da:	3f 21       	and	r19, r15
    14dc:	40 23       	and	r20, r16
    14de:	51 23       	and	r21, r17
    14e0:	21 15       	cp	r18, r1
    14e2:	31 05       	cpc	r19, r1
    14e4:	41 05       	cpc	r20, r1
    14e6:	51 05       	cpc	r21, r1
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <_fpadd_parts+0x10c>
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	79 01       	movw	r14, r18
    14f4:	8a 01       	movw	r16, r20
    14f6:	e6 28       	or	r14, r6
    14f8:	f7 28       	or	r15, r7
    14fa:	08 29       	or	r16, r8
    14fc:	19 29       	or	r17, r9
    14fe:	3c c0       	rjmp	.+120    	; 0x1578 <_fpadd_parts+0x192>
    1500:	23 2b       	or	r18, r19
    1502:	d1 f1       	breq	.+116    	; 0x1578 <_fpadd_parts+0x192>
    1504:	26 0e       	add	r2, r22
    1506:	37 1e       	adc	r3, r23
    1508:	35 01       	movw	r6, r10
    150a:	46 01       	movw	r8, r12
    150c:	06 2e       	mov	r0, r22
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <_fpadd_parts+0x132>
    1510:	96 94       	lsr	r9
    1512:	87 94       	ror	r8
    1514:	77 94       	ror	r7
    1516:	67 94       	ror	r6
    1518:	0a 94       	dec	r0
    151a:	d2 f7       	brpl	.-12     	; 0x1510 <_fpadd_parts+0x12a>
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	04 c0       	rjmp	.+8      	; 0x152e <_fpadd_parts+0x148>
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	44 1f       	adc	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	6a 95       	dec	r22
    1530:	d2 f7       	brpl	.-12     	; 0x1526 <_fpadd_parts+0x140>
    1532:	21 50       	subi	r18, 0x01	; 1
    1534:	30 40       	sbci	r19, 0x00	; 0
    1536:	40 40       	sbci	r20, 0x00	; 0
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	2a 21       	and	r18, r10
    153c:	3b 21       	and	r19, r11
    153e:	4c 21       	and	r20, r12
    1540:	5d 21       	and	r21, r13
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	41 05       	cpc	r20, r1
    1548:	51 05       	cpc	r21, r1
    154a:	21 f0       	breq	.+8      	; 0x1554 <_fpadd_parts+0x16e>
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	59 01       	movw	r10, r18
    1556:	6a 01       	movw	r12, r20
    1558:	a6 28       	or	r10, r6
    155a:	b7 28       	or	r11, r7
    155c:	c8 28       	or	r12, r8
    155e:	d9 28       	or	r13, r9
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <_fpadd_parts+0x192>
    1562:	82 15       	cp	r24, r2
    1564:	93 05       	cpc	r25, r3
    1566:	2c f0       	brlt	.+10     	; 0x1572 <_fpadd_parts+0x18c>
    1568:	1c 01       	movw	r2, r24
    156a:	aa 24       	eor	r10, r10
    156c:	bb 24       	eor	r11, r11
    156e:	65 01       	movw	r12, r10
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <_fpadd_parts+0x192>
    1572:	ee 24       	eor	r14, r14
    1574:	ff 24       	eor	r15, r15
    1576:	87 01       	movw	r16, r14
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	9c 91       	ld	r25, X
    157c:	d2 01       	movw	r26, r4
    157e:	11 96       	adiw	r26, 0x01	; 1
    1580:	8c 91       	ld	r24, X
    1582:	98 17       	cp	r25, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <_fpadd_parts+0x1a2>
    1586:	45 c0       	rjmp	.+138    	; 0x1612 <_fpadd_parts+0x22c>
    1588:	99 23       	and	r25, r25
    158a:	39 f0       	breq	.+14     	; 0x159a <_fpadd_parts+0x1b4>
    158c:	a8 01       	movw	r20, r16
    158e:	97 01       	movw	r18, r14
    1590:	2a 19       	sub	r18, r10
    1592:	3b 09       	sbc	r19, r11
    1594:	4c 09       	sbc	r20, r12
    1596:	5d 09       	sbc	r21, r13
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <_fpadd_parts+0x1c0>
    159a:	a6 01       	movw	r20, r12
    159c:	95 01       	movw	r18, r10
    159e:	2e 19       	sub	r18, r14
    15a0:	3f 09       	sbc	r19, r15
    15a2:	40 0b       	sbc	r20, r16
    15a4:	51 0b       	sbc	r21, r17
    15a6:	57 fd       	sbrc	r21, 7
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <_fpadd_parts+0x1d4>
    15aa:	11 82       	std	Z+1, r1	; 0x01
    15ac:	33 82       	std	Z+3, r3	; 0x03
    15ae:	22 82       	std	Z+2, r2	; 0x02
    15b0:	24 83       	std	Z+4, r18	; 0x04
    15b2:	35 83       	std	Z+5, r19	; 0x05
    15b4:	46 83       	std	Z+6, r20	; 0x06
    15b6:	57 83       	std	Z+7, r21	; 0x07
    15b8:	1d c0       	rjmp	.+58     	; 0x15f4 <_fpadd_parts+0x20e>
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	81 83       	std	Z+1, r24	; 0x01
    15be:	33 82       	std	Z+3, r3	; 0x03
    15c0:	22 82       	std	Z+2, r2	; 0x02
    15c2:	88 27       	eor	r24, r24
    15c4:	99 27       	eor	r25, r25
    15c6:	dc 01       	movw	r26, r24
    15c8:	82 1b       	sub	r24, r18
    15ca:	93 0b       	sbc	r25, r19
    15cc:	a4 0b       	sbc	r26, r20
    15ce:	b5 0b       	sbc	r27, r21
    15d0:	84 83       	std	Z+4, r24	; 0x04
    15d2:	95 83       	std	Z+5, r25	; 0x05
    15d4:	a6 83       	std	Z+6, r26	; 0x06
    15d6:	b7 83       	std	Z+7, r27	; 0x07
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <_fpadd_parts+0x20e>
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	44 1f       	adc	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	24 83       	std	Z+4, r18	; 0x04
    15e4:	35 83       	std	Z+5, r19	; 0x05
    15e6:	46 83       	std	Z+6, r20	; 0x06
    15e8:	57 83       	std	Z+7, r21	; 0x07
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	93 83       	std	Z+3, r25	; 0x03
    15f2:	82 83       	std	Z+2, r24	; 0x02
    15f4:	24 81       	ldd	r18, Z+4	; 0x04
    15f6:	35 81       	ldd	r19, Z+5	; 0x05
    15f8:	46 81       	ldd	r20, Z+6	; 0x06
    15fa:	57 81       	ldd	r21, Z+7	; 0x07
    15fc:	da 01       	movw	r26, r20
    15fe:	c9 01       	movw	r24, r18
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	a1 09       	sbc	r26, r1
    1604:	b1 09       	sbc	r27, r1
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	af 4f       	sbci	r26, 0xFF	; 255
    160c:	bf 43       	sbci	r27, 0x3F	; 63
    160e:	28 f3       	brcs	.-54     	; 0x15da <_fpadd_parts+0x1f4>
    1610:	0b c0       	rjmp	.+22     	; 0x1628 <_fpadd_parts+0x242>
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	33 82       	std	Z+3, r3	; 0x03
    1616:	22 82       	std	Z+2, r2	; 0x02
    1618:	ea 0c       	add	r14, r10
    161a:	fb 1c       	adc	r15, r11
    161c:	0c 1d       	adc	r16, r12
    161e:	1d 1d       	adc	r17, r13
    1620:	e4 82       	std	Z+4, r14	; 0x04
    1622:	f5 82       	std	Z+5, r15	; 0x05
    1624:	06 83       	std	Z+6, r16	; 0x06
    1626:	17 83       	std	Z+7, r17	; 0x07
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	80 83       	st	Z, r24
    162c:	24 81       	ldd	r18, Z+4	; 0x04
    162e:	35 81       	ldd	r19, Z+5	; 0x05
    1630:	46 81       	ldd	r20, Z+6	; 0x06
    1632:	57 81       	ldd	r21, Z+7	; 0x07
    1634:	57 ff       	sbrs	r21, 7
    1636:	1a c0       	rjmp	.+52     	; 0x166c <_fpadd_parts+0x286>
    1638:	c9 01       	movw	r24, r18
    163a:	aa 27       	eor	r26, r26
    163c:	97 fd       	sbrc	r25, 7
    163e:	a0 95       	com	r26
    1640:	ba 2f       	mov	r27, r26
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	a0 70       	andi	r26, 0x00	; 0
    1648:	b0 70       	andi	r27, 0x00	; 0
    164a:	56 95       	lsr	r21
    164c:	47 95       	ror	r20
    164e:	37 95       	ror	r19
    1650:	27 95       	ror	r18
    1652:	82 2b       	or	r24, r18
    1654:	93 2b       	or	r25, r19
    1656:	a4 2b       	or	r26, r20
    1658:	b5 2b       	or	r27, r21
    165a:	84 83       	std	Z+4, r24	; 0x04
    165c:	95 83       	std	Z+5, r25	; 0x05
    165e:	a6 83       	std	Z+6, r26	; 0x06
    1660:	b7 83       	std	Z+7, r27	; 0x07
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	93 83       	std	Z+3, r25	; 0x03
    166a:	82 83       	std	Z+2, r24	; 0x02
    166c:	df 01       	movw	r26, r30
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <_fpadd_parts+0x28c>
    1670:	d2 01       	movw	r26, r4
    1672:	cd 01       	movw	r24, r26
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	e2 e1       	ldi	r30, 0x12	; 18
    167a:	0c 94 05 10 	jmp	0x200a	; 0x200a <__epilogue_restores__>

0000167e <__subsf3>:
    167e:	a0 e2       	ldi	r26, 0x20	; 32
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e4       	ldi	r30, 0x45	; 69
    1684:	fb e0       	ldi	r31, 0x0B	; 11
    1686:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__prologue_saves__+0x18>
    168a:	69 83       	std	Y+1, r22	; 0x01
    168c:	7a 83       	std	Y+2, r23	; 0x02
    168e:	8b 83       	std	Y+3, r24	; 0x03
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	2d 83       	std	Y+5, r18	; 0x05
    1694:	3e 83       	std	Y+6, r19	; 0x06
    1696:	4f 83       	std	Y+7, r20	; 0x07
    1698:	58 87       	std	Y+8, r21	; 0x08
    169a:	e9 e0       	ldi	r30, 0x09	; 9
    169c:	ee 2e       	mov	r14, r30
    169e:	f1 2c       	mov	r15, r1
    16a0:	ec 0e       	add	r14, r28
    16a2:	fd 1e       	adc	r15, r29
    16a4:	ce 01       	movw	r24, r28
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	b7 01       	movw	r22, r14
    16aa:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    16ae:	8e 01       	movw	r16, r28
    16b0:	0f 5e       	subi	r16, 0xEF	; 239
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ce 01       	movw	r24, r28
    16b6:	05 96       	adiw	r24, 0x05	; 5
    16b8:	b8 01       	movw	r22, r16
    16ba:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    16be:	8a 89       	ldd	r24, Y+18	; 0x12
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	89 27       	eor	r24, r25
    16c4:	8a 8b       	std	Y+18, r24	; 0x12
    16c6:	c7 01       	movw	r24, r14
    16c8:	b8 01       	movw	r22, r16
    16ca:	ae 01       	movw	r20, r28
    16cc:	47 5e       	subi	r20, 0xE7	; 231
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_fpadd_parts>
    16d4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    16d8:	a0 96       	adiw	r28, 0x20	; 32
    16da:	e6 e0       	ldi	r30, 0x06	; 6
    16dc:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__epilogue_restores__+0x18>

000016e0 <__addsf3>:
    16e0:	a0 e2       	ldi	r26, 0x20	; 32
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e6 e7       	ldi	r30, 0x76	; 118
    16e6:	fb e0       	ldi	r31, 0x0B	; 11
    16e8:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__prologue_saves__+0x18>
    16ec:	69 83       	std	Y+1, r22	; 0x01
    16ee:	7a 83       	std	Y+2, r23	; 0x02
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	2d 83       	std	Y+5, r18	; 0x05
    16f6:	3e 83       	std	Y+6, r19	; 0x06
    16f8:	4f 83       	std	Y+7, r20	; 0x07
    16fa:	58 87       	std	Y+8, r21	; 0x08
    16fc:	f9 e0       	ldi	r31, 0x09	; 9
    16fe:	ef 2e       	mov	r14, r31
    1700:	f1 2c       	mov	r15, r1
    1702:	ec 0e       	add	r14, r28
    1704:	fd 1e       	adc	r15, r29
    1706:	ce 01       	movw	r24, r28
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	b7 01       	movw	r22, r14
    170c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    1710:	8e 01       	movw	r16, r28
    1712:	0f 5e       	subi	r16, 0xEF	; 239
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	ce 01       	movw	r24, r28
    1718:	05 96       	adiw	r24, 0x05	; 5
    171a:	b8 01       	movw	r22, r16
    171c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    1720:	c7 01       	movw	r24, r14
    1722:	b8 01       	movw	r22, r16
    1724:	ae 01       	movw	r20, r28
    1726:	47 5e       	subi	r20, 0xE7	; 231
    1728:	5f 4f       	sbci	r21, 0xFF	; 255
    172a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_fpadd_parts>
    172e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    1732:	a0 96       	adiw	r28, 0x20	; 32
    1734:	e6 e0       	ldi	r30, 0x06	; 6
    1736:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__epilogue_restores__+0x18>

0000173a <__mulsf3>:
    173a:	a0 e2       	ldi	r26, 0x20	; 32
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__prologue_saves__>
    1746:	69 83       	std	Y+1, r22	; 0x01
    1748:	7a 83       	std	Y+2, r23	; 0x02
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	2d 83       	std	Y+5, r18	; 0x05
    1750:	3e 83       	std	Y+6, r19	; 0x06
    1752:	4f 83       	std	Y+7, r20	; 0x07
    1754:	58 87       	std	Y+8, r21	; 0x08
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	be 01       	movw	r22, r28
    175c:	67 5f       	subi	r22, 0xF7	; 247
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    1764:	ce 01       	movw	r24, r28
    1766:	05 96       	adiw	r24, 0x05	; 5
    1768:	be 01       	movw	r22, r28
    176a:	6f 5e       	subi	r22, 0xEF	; 239
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    1772:	99 85       	ldd	r25, Y+9	; 0x09
    1774:	92 30       	cpi	r25, 0x02	; 2
    1776:	88 f0       	brcs	.+34     	; 0x179a <__mulsf3+0x60>
    1778:	89 89       	ldd	r24, Y+17	; 0x11
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	c8 f0       	brcs	.+50     	; 0x17b0 <__mulsf3+0x76>
    177e:	94 30       	cpi	r25, 0x04	; 4
    1780:	19 f4       	brne	.+6      	; 0x1788 <__mulsf3+0x4e>
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	51 f4       	brne	.+20     	; 0x179a <__mulsf3+0x60>
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <__mulsf3+0x56>
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	29 f4       	brne	.+10     	; 0x1796 <__mulsf3+0x5c>
    178c:	92 30       	cpi	r25, 0x02	; 2
    178e:	81 f4       	brne	.+32     	; 0x17b0 <__mulsf3+0x76>
    1790:	89 e3       	ldi	r24, 0x39	; 57
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	c6 c0       	rjmp	.+396    	; 0x1922 <__mulsf3+0x1e8>
    1796:	92 30       	cpi	r25, 0x02	; 2
    1798:	49 f4       	brne	.+18     	; 0x17ac <__mulsf3+0x72>
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	8a 89       	ldd	r24, Y+18	; 0x12
    17a0:	98 13       	cpse	r25, r24
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	2a 87       	std	Y+10, r18	; 0x0a
    17a6:	ce 01       	movw	r24, r28
    17a8:	09 96       	adiw	r24, 0x09	; 9
    17aa:	bb c0       	rjmp	.+374    	; 0x1922 <__mulsf3+0x1e8>
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	49 f4       	brne	.+18     	; 0x17c2 <__mulsf3+0x88>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	8a 89       	ldd	r24, Y+18	; 0x12
    17b6:	98 13       	cpse	r25, r24
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	2a 8b       	std	Y+18, r18	; 0x12
    17bc:	ce 01       	movw	r24, r28
    17be:	41 96       	adiw	r24, 0x11	; 17
    17c0:	b0 c0       	rjmp	.+352    	; 0x1922 <__mulsf3+0x1e8>
    17c2:	2d 84       	ldd	r2, Y+13	; 0x0d
    17c4:	3e 84       	ldd	r3, Y+14	; 0x0e
    17c6:	4f 84       	ldd	r4, Y+15	; 0x0f
    17c8:	58 88       	ldd	r5, Y+16	; 0x10
    17ca:	6d 88       	ldd	r6, Y+21	; 0x15
    17cc:	7e 88       	ldd	r7, Y+22	; 0x16
    17ce:	8f 88       	ldd	r8, Y+23	; 0x17
    17d0:	98 8c       	ldd	r9, Y+24	; 0x18
    17d2:	ee 24       	eor	r14, r14
    17d4:	ff 24       	eor	r15, r15
    17d6:	87 01       	movw	r16, r14
    17d8:	aa 24       	eor	r10, r10
    17da:	bb 24       	eor	r11, r11
    17dc:	65 01       	movw	r12, r10
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	e0 e0       	ldi	r30, 0x00	; 0
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	c1 01       	movw	r24, r2
    17ec:	81 70       	andi	r24, 0x01	; 1
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	89 2b       	or	r24, r25
    17f2:	e9 f0       	breq	.+58     	; 0x182e <__mulsf3+0xf4>
    17f4:	e6 0c       	add	r14, r6
    17f6:	f7 1c       	adc	r15, r7
    17f8:	08 1d       	adc	r16, r8
    17fa:	19 1d       	adc	r17, r9
    17fc:	9a 01       	movw	r18, r20
    17fe:	ab 01       	movw	r20, r22
    1800:	2a 0d       	add	r18, r10
    1802:	3b 1d       	adc	r19, r11
    1804:	4c 1d       	adc	r20, r12
    1806:	5d 1d       	adc	r21, r13
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e6 14       	cp	r14, r6
    1812:	f7 04       	cpc	r15, r7
    1814:	08 05       	cpc	r16, r8
    1816:	19 05       	cpc	r17, r9
    1818:	20 f4       	brcc	.+8      	; 0x1822 <__mulsf3+0xe8>
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e0       	ldi	r26, 0x00	; 0
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ba 01       	movw	r22, r20
    1824:	a9 01       	movw	r20, r18
    1826:	48 0f       	add	r20, r24
    1828:	59 1f       	adc	r21, r25
    182a:	6a 1f       	adc	r22, r26
    182c:	7b 1f       	adc	r23, r27
    182e:	aa 0c       	add	r10, r10
    1830:	bb 1c       	adc	r11, r11
    1832:	cc 1c       	adc	r12, r12
    1834:	dd 1c       	adc	r13, r13
    1836:	97 fe       	sbrs	r9, 7
    1838:	08 c0       	rjmp	.+16     	; 0x184a <__mulsf3+0x110>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	a8 2a       	or	r10, r24
    1844:	b9 2a       	or	r11, r25
    1846:	ca 2a       	or	r12, r26
    1848:	db 2a       	or	r13, r27
    184a:	31 96       	adiw	r30, 0x01	; 1
    184c:	e0 32       	cpi	r30, 0x20	; 32
    184e:	f1 05       	cpc	r31, r1
    1850:	49 f0       	breq	.+18     	; 0x1864 <__mulsf3+0x12a>
    1852:	66 0c       	add	r6, r6
    1854:	77 1c       	adc	r7, r7
    1856:	88 1c       	adc	r8, r8
    1858:	99 1c       	adc	r9, r9
    185a:	56 94       	lsr	r5
    185c:	47 94       	ror	r4
    185e:	37 94       	ror	r3
    1860:	27 94       	ror	r2
    1862:	c3 cf       	rjmp	.-122    	; 0x17ea <__mulsf3+0xb0>
    1864:	fa 85       	ldd	r31, Y+10	; 0x0a
    1866:	ea 89       	ldd	r30, Y+18	; 0x12
    1868:	2b 89       	ldd	r18, Y+19	; 0x13
    186a:	3c 89       	ldd	r19, Y+20	; 0x14
    186c:	8b 85       	ldd	r24, Y+11	; 0x0b
    186e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1870:	28 0f       	add	r18, r24
    1872:	39 1f       	adc	r19, r25
    1874:	2e 5f       	subi	r18, 0xFE	; 254
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	17 c0       	rjmp	.+46     	; 0x18a8 <__mulsf3+0x16e>
    187a:	ca 01       	movw	r24, r20
    187c:	81 70       	andi	r24, 0x01	; 1
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	89 2b       	or	r24, r25
    1882:	61 f0       	breq	.+24     	; 0x189c <__mulsf3+0x162>
    1884:	16 95       	lsr	r17
    1886:	07 95       	ror	r16
    1888:	f7 94       	ror	r15
    188a:	e7 94       	ror	r14
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e8       	ldi	r27, 0x80	; 128
    1894:	e8 2a       	or	r14, r24
    1896:	f9 2a       	or	r15, r25
    1898:	0a 2b       	or	r16, r26
    189a:	1b 2b       	or	r17, r27
    189c:	76 95       	lsr	r23
    189e:	67 95       	ror	r22
    18a0:	57 95       	ror	r21
    18a2:	47 95       	ror	r20
    18a4:	2f 5f       	subi	r18, 0xFF	; 255
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	77 fd       	sbrc	r23, 7
    18aa:	e7 cf       	rjmp	.-50     	; 0x187a <__mulsf3+0x140>
    18ac:	0c c0       	rjmp	.+24     	; 0x18c6 <__mulsf3+0x18c>
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	66 1f       	adc	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	17 fd       	sbrc	r17, 7
    18b8:	41 60       	ori	r20, 0x01	; 1
    18ba:	ee 0c       	add	r14, r14
    18bc:	ff 1c       	adc	r15, r15
    18be:	00 1f       	adc	r16, r16
    18c0:	11 1f       	adc	r17, r17
    18c2:	21 50       	subi	r18, 0x01	; 1
    18c4:	30 40       	sbci	r19, 0x00	; 0
    18c6:	40 30       	cpi	r20, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	59 07       	cpc	r21, r25
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	69 07       	cpc	r22, r25
    18d0:	90 e4       	ldi	r25, 0x40	; 64
    18d2:	79 07       	cpc	r23, r25
    18d4:	60 f3       	brcs	.-40     	; 0x18ae <__mulsf3+0x174>
    18d6:	2b 8f       	std	Y+27, r18	; 0x1b
    18d8:	3c 8f       	std	Y+28, r19	; 0x1c
    18da:	db 01       	movw	r26, r22
    18dc:	ca 01       	movw	r24, r20
    18de:	8f 77       	andi	r24, 0x7F	; 127
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	a0 70       	andi	r26, 0x00	; 0
    18e4:	b0 70       	andi	r27, 0x00	; 0
    18e6:	80 34       	cpi	r24, 0x40	; 64
    18e8:	91 05       	cpc	r25, r1
    18ea:	a1 05       	cpc	r26, r1
    18ec:	b1 05       	cpc	r27, r1
    18ee:	61 f4       	brne	.+24     	; 0x1908 <__mulsf3+0x1ce>
    18f0:	47 fd       	sbrc	r20, 7
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <__mulsf3+0x1ce>
    18f4:	e1 14       	cp	r14, r1
    18f6:	f1 04       	cpc	r15, r1
    18f8:	01 05       	cpc	r16, r1
    18fa:	11 05       	cpc	r17, r1
    18fc:	29 f0       	breq	.+10     	; 0x1908 <__mulsf3+0x1ce>
    18fe:	40 5c       	subi	r20, 0xC0	; 192
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	6f 4f       	sbci	r22, 0xFF	; 255
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	40 78       	andi	r20, 0x80	; 128
    1908:	1a 8e       	std	Y+26, r1	; 0x1a
    190a:	fe 17       	cp	r31, r30
    190c:	11 f0       	breq	.+4      	; 0x1912 <__mulsf3+0x1d8>
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	8a 8f       	std	Y+26, r24	; 0x1a
    1912:	4d 8f       	std	Y+29, r20	; 0x1d
    1914:	5e 8f       	std	Y+30, r21	; 0x1e
    1916:	6f 8f       	std	Y+31, r22	; 0x1f
    1918:	78 a3       	std	Y+32, r23	; 0x20
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	89 8f       	std	Y+25, r24	; 0x19
    191e:	ce 01       	movw	r24, r28
    1920:	49 96       	adiw	r24, 0x19	; 25
    1922:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    1926:	a0 96       	adiw	r28, 0x20	; 32
    1928:	e2 e1       	ldi	r30, 0x12	; 18
    192a:	0c 94 05 10 	jmp	0x200a	; 0x200a <__epilogue_restores__>

0000192e <__divsf3>:
    192e:	a8 e1       	ldi	r26, 0x18	; 24
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	ed e9       	ldi	r30, 0x9D	; 157
    1934:	fc e0       	ldi	r31, 0x0C	; 12
    1936:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__+0x10>
    193a:	69 83       	std	Y+1, r22	; 0x01
    193c:	7a 83       	std	Y+2, r23	; 0x02
    193e:	8b 83       	std	Y+3, r24	; 0x03
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	2d 83       	std	Y+5, r18	; 0x05
    1944:	3e 83       	std	Y+6, r19	; 0x06
    1946:	4f 83       	std	Y+7, r20	; 0x07
    1948:	58 87       	std	Y+8, r21	; 0x08
    194a:	b9 e0       	ldi	r27, 0x09	; 9
    194c:	eb 2e       	mov	r14, r27
    194e:	f1 2c       	mov	r15, r1
    1950:	ec 0e       	add	r14, r28
    1952:	fd 1e       	adc	r15, r29
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	b7 01       	movw	r22, r14
    195a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    195e:	8e 01       	movw	r16, r28
    1960:	0f 5e       	subi	r16, 0xEF	; 239
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	ce 01       	movw	r24, r28
    1966:	05 96       	adiw	r24, 0x05	; 5
    1968:	b8 01       	movw	r22, r16
    196a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__unpack_f>
    196e:	29 85       	ldd	r18, Y+9	; 0x09
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	08 f4       	brcc	.+2      	; 0x1976 <__divsf3+0x48>
    1974:	7e c0       	rjmp	.+252    	; 0x1a72 <__divsf3+0x144>
    1976:	39 89       	ldd	r19, Y+17	; 0x11
    1978:	32 30       	cpi	r19, 0x02	; 2
    197a:	10 f4       	brcc	.+4      	; 0x1980 <__divsf3+0x52>
    197c:	b8 01       	movw	r22, r16
    197e:	7c c0       	rjmp	.+248    	; 0x1a78 <__divsf3+0x14a>
    1980:	8a 85       	ldd	r24, Y+10	; 0x0a
    1982:	9a 89       	ldd	r25, Y+18	; 0x12
    1984:	89 27       	eor	r24, r25
    1986:	8a 87       	std	Y+10, r24	; 0x0a
    1988:	24 30       	cpi	r18, 0x04	; 4
    198a:	11 f0       	breq	.+4      	; 0x1990 <__divsf3+0x62>
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 f4       	brne	.+12     	; 0x199c <__divsf3+0x6e>
    1990:	23 17       	cp	r18, r19
    1992:	09 f0       	breq	.+2      	; 0x1996 <__divsf3+0x68>
    1994:	6e c0       	rjmp	.+220    	; 0x1a72 <__divsf3+0x144>
    1996:	69 e3       	ldi	r22, 0x39	; 57
    1998:	71 e0       	ldi	r23, 0x01	; 1
    199a:	6e c0       	rjmp	.+220    	; 0x1a78 <__divsf3+0x14a>
    199c:	34 30       	cpi	r19, 0x04	; 4
    199e:	39 f4       	brne	.+14     	; 0x19ae <__divsf3+0x80>
    19a0:	1d 86       	std	Y+13, r1	; 0x0d
    19a2:	1e 86       	std	Y+14, r1	; 0x0e
    19a4:	1f 86       	std	Y+15, r1	; 0x0f
    19a6:	18 8a       	std	Y+16, r1	; 0x10
    19a8:	1c 86       	std	Y+12, r1	; 0x0c
    19aa:	1b 86       	std	Y+11, r1	; 0x0b
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <__divsf3+0x88>
    19ae:	32 30       	cpi	r19, 0x02	; 2
    19b0:	21 f4       	brne	.+8      	; 0x19ba <__divsf3+0x8c>
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	89 87       	std	Y+9, r24	; 0x09
    19b6:	b7 01       	movw	r22, r14
    19b8:	5f c0       	rjmp	.+190    	; 0x1a78 <__divsf3+0x14a>
    19ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    19bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	28 1b       	sub	r18, r24
    19c4:	39 0b       	sbc	r19, r25
    19c6:	3c 87       	std	Y+12, r19	; 0x0c
    19c8:	2b 87       	std	Y+11, r18	; 0x0b
    19ca:	ed 84       	ldd	r14, Y+13	; 0x0d
    19cc:	fe 84       	ldd	r15, Y+14	; 0x0e
    19ce:	0f 85       	ldd	r16, Y+15	; 0x0f
    19d0:	18 89       	ldd	r17, Y+16	; 0x10
    19d2:	ad 88       	ldd	r10, Y+21	; 0x15
    19d4:	be 88       	ldd	r11, Y+22	; 0x16
    19d6:	cf 88       	ldd	r12, Y+23	; 0x17
    19d8:	d8 8c       	ldd	r13, Y+24	; 0x18
    19da:	ea 14       	cp	r14, r10
    19dc:	fb 04       	cpc	r15, r11
    19de:	0c 05       	cpc	r16, r12
    19e0:	1d 05       	cpc	r17, r13
    19e2:	40 f4       	brcc	.+16     	; 0x19f4 <__divsf3+0xc6>
    19e4:	ee 0c       	add	r14, r14
    19e6:	ff 1c       	adc	r15, r15
    19e8:	00 1f       	adc	r16, r16
    19ea:	11 1f       	adc	r17, r17
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	30 40       	sbci	r19, 0x00	; 0
    19f0:	3c 87       	std	Y+12, r19	; 0x0c
    19f2:	2b 87       	std	Y+11, r18	; 0x0b
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e4       	ldi	r27, 0x40	; 64
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	ea 14       	cp	r14, r10
    1a0a:	fb 04       	cpc	r15, r11
    1a0c:	0c 05       	cpc	r16, r12
    1a0e:	1d 05       	cpc	r17, r13
    1a10:	40 f0       	brcs	.+16     	; 0x1a22 <__divsf3+0xf4>
    1a12:	28 2b       	or	r18, r24
    1a14:	39 2b       	or	r19, r25
    1a16:	4a 2b       	or	r20, r26
    1a18:	5b 2b       	or	r21, r27
    1a1a:	ea 18       	sub	r14, r10
    1a1c:	fb 08       	sbc	r15, r11
    1a1e:	0c 09       	sbc	r16, r12
    1a20:	1d 09       	sbc	r17, r13
    1a22:	b6 95       	lsr	r27
    1a24:	a7 95       	ror	r26
    1a26:	97 95       	ror	r25
    1a28:	87 95       	ror	r24
    1a2a:	ee 0c       	add	r14, r14
    1a2c:	ff 1c       	adc	r15, r15
    1a2e:	00 1f       	adc	r16, r16
    1a30:	11 1f       	adc	r17, r17
    1a32:	6f 5f       	subi	r22, 0xFF	; 255
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	6f 31       	cpi	r22, 0x1F	; 31
    1a38:	71 05       	cpc	r23, r1
    1a3a:	31 f7       	brne	.-52     	; 0x1a08 <__divsf3+0xda>
    1a3c:	da 01       	movw	r26, r20
    1a3e:	c9 01       	movw	r24, r18
    1a40:	8f 77       	andi	r24, 0x7F	; 127
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	a0 70       	andi	r26, 0x00	; 0
    1a46:	b0 70       	andi	r27, 0x00	; 0
    1a48:	80 34       	cpi	r24, 0x40	; 64
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	a1 05       	cpc	r26, r1
    1a4e:	b1 05       	cpc	r27, r1
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <__divsf3+0x13c>
    1a52:	27 fd       	sbrc	r18, 7
    1a54:	0a c0       	rjmp	.+20     	; 0x1a6a <__divsf3+0x13c>
    1a56:	e1 14       	cp	r14, r1
    1a58:	f1 04       	cpc	r15, r1
    1a5a:	01 05       	cpc	r16, r1
    1a5c:	11 05       	cpc	r17, r1
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <__divsf3+0x13c>
    1a60:	20 5c       	subi	r18, 0xC0	; 192
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	4f 4f       	sbci	r20, 0xFF	; 255
    1a66:	5f 4f       	sbci	r21, 0xFF	; 255
    1a68:	20 78       	andi	r18, 0x80	; 128
    1a6a:	2d 87       	std	Y+13, r18	; 0x0d
    1a6c:	3e 87       	std	Y+14, r19	; 0x0e
    1a6e:	4f 87       	std	Y+15, r20	; 0x0f
    1a70:	58 8b       	std	Y+16, r21	; 0x10
    1a72:	be 01       	movw	r22, r28
    1a74:	67 5f       	subi	r22, 0xF7	; 247
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	cb 01       	movw	r24, r22
    1a7a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    1a7e:	68 96       	adiw	r28, 0x18	; 24
    1a80:	ea e0       	ldi	r30, 0x0A	; 10
    1a82:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__+0x10>

00001a86 <__floatsisf>:
    1a86:	a8 e0       	ldi	r26, 0x08	; 8
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e9 e4       	ldi	r30, 0x49	; 73
    1a8c:	fd e0       	ldi	r31, 0x0D	; 13
    1a8e:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x12>
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	da 01       	movw	r26, r20
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	88 27       	eor	r24, r24
    1aa0:	b7 fd       	sbrc	r27, 7
    1aa2:	83 95       	inc	r24
    1aa4:	99 27       	eor	r25, r25
    1aa6:	aa 27       	eor	r26, r26
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	b8 2e       	mov	r11, r24
    1aac:	21 15       	cp	r18, r1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	41 05       	cpc	r20, r1
    1ab2:	51 05       	cpc	r21, r1
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <__floatsisf+0x36>
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	3a c0       	rjmp	.+116    	; 0x1b30 <__floatsisf+0xaa>
    1abc:	88 23       	and	r24, r24
    1abe:	a9 f0       	breq	.+42     	; 0x1aea <__floatsisf+0x64>
    1ac0:	20 30       	cpi	r18, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	38 07       	cpc	r19, r24
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	48 07       	cpc	r20, r24
    1aca:	80 e8       	ldi	r24, 0x80	; 128
    1acc:	58 07       	cpc	r21, r24
    1ace:	29 f4       	brne	.+10     	; 0x1ada <__floatsisf+0x54>
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	9f ec       	ldi	r25, 0xCF	; 207
    1ad8:	30 c0       	rjmp	.+96     	; 0x1b3a <__floatsisf+0xb4>
    1ada:	ee 24       	eor	r14, r14
    1adc:	ff 24       	eor	r15, r15
    1ade:	87 01       	movw	r16, r14
    1ae0:	e2 1a       	sub	r14, r18
    1ae2:	f3 0a       	sbc	r15, r19
    1ae4:	04 0b       	sbc	r16, r20
    1ae6:	15 0b       	sbc	r17, r21
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <__floatsisf+0x68>
    1aea:	79 01       	movw	r14, r18
    1aec:	8a 01       	movw	r16, r20
    1aee:	8e e1       	ldi	r24, 0x1E	; 30
    1af0:	c8 2e       	mov	r12, r24
    1af2:	d1 2c       	mov	r13, r1
    1af4:	dc 82       	std	Y+4, r13	; 0x04
    1af6:	cb 82       	std	Y+3, r12	; 0x03
    1af8:	ed 82       	std	Y+5, r14	; 0x05
    1afa:	fe 82       	std	Y+6, r15	; 0x06
    1afc:	0f 83       	std	Y+7, r16	; 0x07
    1afe:	18 87       	std	Y+8, r17	; 0x08
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__clzsi2>
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	18 16       	cp	r1, r24
    1b0c:	19 06       	cpc	r1, r25
    1b0e:	84 f4       	brge	.+32     	; 0x1b30 <__floatsisf+0xaa>
    1b10:	08 2e       	mov	r0, r24
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <__floatsisf+0x96>
    1b14:	ee 0c       	add	r14, r14
    1b16:	ff 1c       	adc	r15, r15
    1b18:	00 1f       	adc	r16, r16
    1b1a:	11 1f       	adc	r17, r17
    1b1c:	0a 94       	dec	r0
    1b1e:	d2 f7       	brpl	.-12     	; 0x1b14 <__floatsisf+0x8e>
    1b20:	ed 82       	std	Y+5, r14	; 0x05
    1b22:	fe 82       	std	Y+6, r15	; 0x06
    1b24:	0f 83       	std	Y+7, r16	; 0x07
    1b26:	18 87       	std	Y+8, r17	; 0x08
    1b28:	c8 1a       	sub	r12, r24
    1b2a:	d9 0a       	sbc	r13, r25
    1b2c:	dc 82       	std	Y+4, r13	; 0x04
    1b2e:	cb 82       	std	Y+3, r12	; 0x03
    1b30:	ba 82       	std	Y+2, r11	; 0x02
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    1b3a:	28 96       	adiw	r28, 0x08	; 8
    1b3c:	e9 e0       	ldi	r30, 0x09	; 9
    1b3e:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x12>

00001b42 <__floatunsisf>:
    1b42:	a8 e0       	ldi	r26, 0x08	; 8
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e7 ea       	ldi	r30, 0xA7	; 167
    1b48:	fd e0       	ldi	r31, 0x0D	; 13
    1b4a:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__+0x10>
    1b4e:	7b 01       	movw	r14, r22
    1b50:	8c 01       	movw	r16, r24
    1b52:	61 15       	cp	r22, r1
    1b54:	71 05       	cpc	r23, r1
    1b56:	81 05       	cpc	r24, r1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	19 f4       	brne	.+6      	; 0x1b62 <__floatunsisf+0x20>
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	60 c0       	rjmp	.+192    	; 0x1c22 <__floatunsisf+0xe0>
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	8e e1       	ldi	r24, 0x1E	; 30
    1b68:	c8 2e       	mov	r12, r24
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	dc 82       	std	Y+4, r13	; 0x04
    1b6e:	cb 82       	std	Y+3, r12	; 0x03
    1b70:	ed 82       	std	Y+5, r14	; 0x05
    1b72:	fe 82       	std	Y+6, r15	; 0x06
    1b74:	0f 83       	std	Y+7, r16	; 0x07
    1b76:	18 87       	std	Y+8, r17	; 0x08
    1b78:	c8 01       	movw	r24, r16
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__clzsi2>
    1b80:	fc 01       	movw	r30, r24
    1b82:	31 97       	sbiw	r30, 0x01	; 1
    1b84:	f7 ff       	sbrs	r31, 7
    1b86:	3b c0       	rjmp	.+118    	; 0x1bfe <__floatunsisf+0xbc>
    1b88:	22 27       	eor	r18, r18
    1b8a:	33 27       	eor	r19, r19
    1b8c:	2e 1b       	sub	r18, r30
    1b8e:	3f 0b       	sbc	r19, r31
    1b90:	57 01       	movw	r10, r14
    1b92:	68 01       	movw	r12, r16
    1b94:	02 2e       	mov	r0, r18
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <__floatunsisf+0x5e>
    1b98:	d6 94       	lsr	r13
    1b9a:	c7 94       	ror	r12
    1b9c:	b7 94       	ror	r11
    1b9e:	a7 94       	ror	r10
    1ba0:	0a 94       	dec	r0
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <__floatunsisf+0x56>
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <__floatunsisf+0x7c>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	aa 1f       	adc	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	2a 95       	dec	r18
    1bc0:	d2 f7       	brpl	.-12     	; 0x1bb6 <__floatunsisf+0x74>
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	a1 09       	sbc	r26, r1
    1bc6:	b1 09       	sbc	r27, r1
    1bc8:	8e 21       	and	r24, r14
    1bca:	9f 21       	and	r25, r15
    1bcc:	a0 23       	and	r26, r16
    1bce:	b1 23       	and	r27, r17
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	a1 05       	cpc	r26, r1
    1bd4:	b1 05       	cpc	r27, r1
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <__floatunsisf+0x9e>
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	4a 29       	or	r20, r10
    1be2:	5b 29       	or	r21, r11
    1be4:	6c 29       	or	r22, r12
    1be6:	7d 29       	or	r23, r13
    1be8:	4d 83       	std	Y+5, r20	; 0x05
    1bea:	5e 83       	std	Y+6, r21	; 0x06
    1bec:	6f 83       	std	Y+7, r22	; 0x07
    1bee:	78 87       	std	Y+8, r23	; 0x08
    1bf0:	8e e1       	ldi	r24, 0x1E	; 30
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	8e 1b       	sub	r24, r30
    1bf6:	9f 0b       	sbc	r25, r31
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	12 c0       	rjmp	.+36     	; 0x1c22 <__floatunsisf+0xe0>
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	81 f0       	breq	.+32     	; 0x1c22 <__floatunsisf+0xe0>
    1c02:	0e 2e       	mov	r0, r30
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <__floatunsisf+0xcc>
    1c06:	ee 0c       	add	r14, r14
    1c08:	ff 1c       	adc	r15, r15
    1c0a:	00 1f       	adc	r16, r16
    1c0c:	11 1f       	adc	r17, r17
    1c0e:	0a 94       	dec	r0
    1c10:	d2 f7       	brpl	.-12     	; 0x1c06 <__floatunsisf+0xc4>
    1c12:	ed 82       	std	Y+5, r14	; 0x05
    1c14:	fe 82       	std	Y+6, r15	; 0x06
    1c16:	0f 83       	std	Y+7, r16	; 0x07
    1c18:	18 87       	std	Y+8, r17	; 0x08
    1c1a:	ce 1a       	sub	r12, r30
    1c1c:	df 0a       	sbc	r13, r31
    1c1e:	dc 82       	std	Y+4, r13	; 0x04
    1c20:	cb 82       	std	Y+3, r12	; 0x03
    1c22:	1a 82       	std	Y+2, r1	; 0x02
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__pack_f>
    1c2c:	28 96       	adiw	r28, 0x08	; 8
    1c2e:	ea e0       	ldi	r30, 0x0A	; 10
    1c30:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__+0x10>

00001c34 <__clzsi2>:
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	7b 01       	movw	r14, r22
    1c3e:	8c 01       	movw	r16, r24
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	e8 16       	cp	r14, r24
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	f8 06       	cpc	r15, r24
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 07       	cpc	r16, r24
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	18 07       	cpc	r17, r24
    1c50:	88 f4       	brcc	.+34     	; 0x1c74 <__clzsi2+0x40>
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	e8 16       	cp	r14, r24
    1c56:	f1 04       	cpc	r15, r1
    1c58:	01 05       	cpc	r16, r1
    1c5a:	11 05       	cpc	r17, r1
    1c5c:	31 f0       	breq	.+12     	; 0x1c6a <__clzsi2+0x36>
    1c5e:	28 f0       	brcs	.+10     	; 0x1c6a <__clzsi2+0x36>
    1c60:	88 e0       	ldi	r24, 0x08	; 8
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	17 c0       	rjmp	.+46     	; 0x1c98 <__clzsi2+0x64>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	12 c0       	rjmp	.+36     	; 0x1c98 <__clzsi2+0x64>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	e8 16       	cp	r14, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	f8 06       	cpc	r15, r24
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	08 07       	cpc	r16, r24
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	18 07       	cpc	r17, r24
    1c84:	28 f0       	brcs	.+10     	; 0x1c90 <__clzsi2+0x5c>
    1c86:	88 e1       	ldi	r24, 0x18	; 24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e0       	ldi	r26, 0x00	; 0
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <__clzsi2+0x64>
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	20 e2       	ldi	r18, 0x20	; 32
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	28 1b       	sub	r18, r24
    1ca2:	39 0b       	sbc	r19, r25
    1ca4:	4a 0b       	sbc	r20, r26
    1ca6:	5b 0b       	sbc	r21, r27
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <__clzsi2+0x7e>
    1caa:	16 95       	lsr	r17
    1cac:	07 95       	ror	r16
    1cae:	f7 94       	ror	r15
    1cb0:	e7 94       	ror	r14
    1cb2:	8a 95       	dec	r24
    1cb4:	d2 f7       	brpl	.-12     	; 0x1caa <__clzsi2+0x76>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	ef 5b       	subi	r30, 0xBF	; 191
    1cba:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbc:	80 81       	ld	r24, Z
    1cbe:	28 1b       	sub	r18, r24
    1cc0:	31 09       	sbc	r19, r1
    1cc2:	41 09       	sbc	r20, r1
    1cc4:	51 09       	sbc	r21, r1
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	ff 90       	pop	r15
    1cce:	ef 90       	pop	r14
    1cd0:	08 95       	ret

00001cd2 <__pack_f>:
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e4 80       	ldd	r14, Z+4	; 0x04
    1ce0:	f5 80       	ldd	r15, Z+5	; 0x05
    1ce2:	06 81       	ldd	r16, Z+6	; 0x06
    1ce4:	17 81       	ldd	r17, Z+7	; 0x07
    1ce6:	d1 80       	ldd	r13, Z+1	; 0x01
    1ce8:	80 81       	ld	r24, Z
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	48 f4       	brcc	.+18     	; 0x1d00 <__pack_f+0x2e>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e1       	ldi	r26, 0x10	; 16
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e8 2a       	or	r14, r24
    1cf8:	f9 2a       	or	r15, r25
    1cfa:	0a 2b       	or	r16, r26
    1cfc:	1b 2b       	or	r17, r27
    1cfe:	a5 c0       	rjmp	.+330    	; 0x1e4a <__pack_f+0x178>
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <__pack_f+0x34>
    1d04:	9f c0       	rjmp	.+318    	; 0x1e44 <__pack_f+0x172>
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <__pack_f+0x40>
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	ff 24       	eor	r15, r15
    1d0e:	87 01       	movw	r16, r14
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <__pack_f+0x4a>
    1d12:	e1 14       	cp	r14, r1
    1d14:	f1 04       	cpc	r15, r1
    1d16:	01 05       	cpc	r16, r1
    1d18:	11 05       	cpc	r17, r1
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <__pack_f+0x50>
    1d1c:	e0 e0       	ldi	r30, 0x00	; 0
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	96 c0       	rjmp	.+300    	; 0x1e4e <__pack_f+0x17c>
    1d22:	62 81       	ldd	r22, Z+2	; 0x02
    1d24:	73 81       	ldd	r23, Z+3	; 0x03
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    1d28:	62 38       	cpi	r22, 0x82	; 130
    1d2a:	79 07       	cpc	r23, r25
    1d2c:	0c f0       	brlt	.+2      	; 0x1d30 <__pack_f+0x5e>
    1d2e:	5b c0       	rjmp	.+182    	; 0x1de6 <__pack_f+0x114>
    1d30:	22 e8       	ldi	r18, 0x82	; 130
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	26 1b       	sub	r18, r22
    1d36:	37 0b       	sbc	r19, r23
    1d38:	2a 31       	cpi	r18, 0x1A	; 26
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	2c f0       	brlt	.+10     	; 0x1d48 <__pack_f+0x76>
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	2a c0       	rjmp	.+84     	; 0x1d9c <__pack_f+0xca>
    1d48:	b8 01       	movw	r22, r16
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <__pack_f+0x86>
    1d50:	76 95       	lsr	r23
    1d52:	67 95       	ror	r22
    1d54:	57 95       	ror	r21
    1d56:	47 95       	ror	r20
    1d58:	0a 94       	dec	r0
    1d5a:	d2 f7       	brpl	.-12     	; 0x1d50 <__pack_f+0x7e>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <__pack_f+0x9c>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	aa 1f       	adc	r26, r26
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	2a 95       	dec	r18
    1d70:	d2 f7       	brpl	.-12     	; 0x1d66 <__pack_f+0x94>
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	a1 09       	sbc	r26, r1
    1d76:	b1 09       	sbc	r27, r1
    1d78:	8e 21       	and	r24, r14
    1d7a:	9f 21       	and	r25, r15
    1d7c:	a0 23       	and	r26, r16
    1d7e:	b1 23       	and	r27, r17
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	a1 05       	cpc	r26, r1
    1d84:	b1 05       	cpc	r27, r1
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <__pack_f+0xbe>
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	9a 01       	movw	r18, r20
    1d92:	ab 01       	movw	r20, r22
    1d94:	28 2b       	or	r18, r24
    1d96:	39 2b       	or	r19, r25
    1d98:	4a 2b       	or	r20, r26
    1d9a:	5b 2b       	or	r21, r27
    1d9c:	da 01       	movw	r26, r20
    1d9e:	c9 01       	movw	r24, r18
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	a0 70       	andi	r26, 0x00	; 0
    1da6:	b0 70       	andi	r27, 0x00	; 0
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	91 05       	cpc	r25, r1
    1dac:	a1 05       	cpc	r26, r1
    1dae:	b1 05       	cpc	r27, r1
    1db0:	39 f4       	brne	.+14     	; 0x1dc0 <__pack_f+0xee>
    1db2:	27 ff       	sbrs	r18, 7
    1db4:	09 c0       	rjmp	.+18     	; 0x1dc8 <__pack_f+0xf6>
    1db6:	20 5c       	subi	r18, 0xC0	; 192
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <__pack_f+0xf6>
    1dc0:	21 5c       	subi	r18, 0xC1	; 193
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	e0 e0       	ldi	r30, 0x00	; 0
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	20 30       	cpi	r18, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	3a 07       	cpc	r19, r26
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	4a 07       	cpc	r20, r26
    1dd6:	a0 e4       	ldi	r26, 0x40	; 64
    1dd8:	5a 07       	cpc	r21, r26
    1dda:	10 f0       	brcs	.+4      	; 0x1de0 <__pack_f+0x10e>
    1ddc:	e1 e0       	ldi	r30, 0x01	; 1
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	79 01       	movw	r14, r18
    1de2:	8a 01       	movw	r16, r20
    1de4:	27 c0       	rjmp	.+78     	; 0x1e34 <__pack_f+0x162>
    1de6:	60 38       	cpi	r22, 0x80	; 128
    1de8:	71 05       	cpc	r23, r1
    1dea:	64 f5       	brge	.+88     	; 0x1e44 <__pack_f+0x172>
    1dec:	fb 01       	movw	r30, r22
    1dee:	e1 58       	subi	r30, 0x81	; 129
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	d8 01       	movw	r26, r16
    1df4:	c7 01       	movw	r24, r14
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	90 70       	andi	r25, 0x00	; 0
    1dfa:	a0 70       	andi	r26, 0x00	; 0
    1dfc:	b0 70       	andi	r27, 0x00	; 0
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	91 05       	cpc	r25, r1
    1e02:	a1 05       	cpc	r26, r1
    1e04:	b1 05       	cpc	r27, r1
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <__pack_f+0x144>
    1e08:	e7 fe       	sbrs	r14, 7
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <__pack_f+0x154>
    1e0c:	80 e4       	ldi	r24, 0x40	; 64
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <__pack_f+0x14c>
    1e16:	8f e3       	ldi	r24, 0x3F	; 63
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e0       	ldi	r26, 0x00	; 0
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e8 0e       	add	r14, r24
    1e20:	f9 1e       	adc	r15, r25
    1e22:	0a 1f       	adc	r16, r26
    1e24:	1b 1f       	adc	r17, r27
    1e26:	17 ff       	sbrs	r17, 7
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <__pack_f+0x162>
    1e2a:	16 95       	lsr	r17
    1e2c:	07 95       	ror	r16
    1e2e:	f7 94       	ror	r15
    1e30:	e7 94       	ror	r14
    1e32:	31 96       	adiw	r30, 0x01	; 1
    1e34:	87 e0       	ldi	r24, 0x07	; 7
    1e36:	16 95       	lsr	r17
    1e38:	07 95       	ror	r16
    1e3a:	f7 94       	ror	r15
    1e3c:	e7 94       	ror	r14
    1e3e:	8a 95       	dec	r24
    1e40:	d1 f7       	brne	.-12     	; 0x1e36 <__pack_f+0x164>
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <__pack_f+0x17c>
    1e44:	ee 24       	eor	r14, r14
    1e46:	ff 24       	eor	r15, r15
    1e48:	87 01       	movw	r16, r14
    1e4a:	ef ef       	ldi	r30, 0xFF	; 255
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	6e 2f       	mov	r22, r30
    1e50:	67 95       	ror	r22
    1e52:	66 27       	eor	r22, r22
    1e54:	67 95       	ror	r22
    1e56:	90 2f       	mov	r25, r16
    1e58:	9f 77       	andi	r25, 0x7F	; 127
    1e5a:	d7 94       	ror	r13
    1e5c:	dd 24       	eor	r13, r13
    1e5e:	d7 94       	ror	r13
    1e60:	8e 2f       	mov	r24, r30
    1e62:	86 95       	lsr	r24
    1e64:	49 2f       	mov	r20, r25
    1e66:	46 2b       	or	r20, r22
    1e68:	58 2f       	mov	r21, r24
    1e6a:	5d 29       	or	r21, r13
    1e6c:	b7 01       	movw	r22, r14
    1e6e:	ca 01       	movw	r24, r20
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	08 95       	ret

00001e7c <__unpack_f>:
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	db 01       	movw	r26, r22
    1e80:	40 81       	ld	r20, Z
    1e82:	51 81       	ldd	r21, Z+1	; 0x01
    1e84:	22 81       	ldd	r18, Z+2	; 0x02
    1e86:	62 2f       	mov	r22, r18
    1e88:	6f 77       	andi	r22, 0x7F	; 127
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	22 1f       	adc	r18, r18
    1e8e:	22 27       	eor	r18, r18
    1e90:	22 1f       	adc	r18, r18
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	89 2f       	mov	r24, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	82 2b       	or	r24, r18
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	99 27       	eor	r25, r25
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	9c 93       	st	X, r25
    1ea8:	11 97       	sbiw	r26, 0x01	; 1
    1eaa:	21 15       	cp	r18, r1
    1eac:	31 05       	cpc	r19, r1
    1eae:	a9 f5       	brne	.+106    	; 0x1f1a <__unpack_f+0x9e>
    1eb0:	41 15       	cp	r20, r1
    1eb2:	51 05       	cpc	r21, r1
    1eb4:	61 05       	cpc	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	11 f4       	brne	.+4      	; 0x1ebe <__unpack_f+0x42>
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	37 c0       	rjmp	.+110    	; 0x1f2c <__unpack_f+0xb0>
    1ebe:	82 e8       	ldi	r24, 0x82	; 130
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	13 96       	adiw	r26, 0x03	; 3
    1ec4:	9c 93       	st	X, r25
    1ec6:	8e 93       	st	-X, r24
    1ec8:	12 97       	sbiw	r26, 0x02	; 2
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	67 e0       	ldi	r22, 0x07	; 7
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	44 1f       	adc	r20, r20
    1ed6:	55 1f       	adc	r21, r21
    1ed8:	6a 95       	dec	r22
    1eda:	d1 f7       	brne	.-12     	; 0x1ed0 <__unpack_f+0x54>
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	8c 93       	st	X, r24
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <__unpack_f+0x80>
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	44 1f       	adc	r20, r20
    1ee8:	55 1f       	adc	r21, r21
    1eea:	12 96       	adiw	r26, 0x02	; 2
    1eec:	8d 91       	ld	r24, X+
    1eee:	9c 91       	ld	r25, X
    1ef0:	13 97       	sbiw	r26, 0x03	; 3
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	13 96       	adiw	r26, 0x03	; 3
    1ef6:	9c 93       	st	X, r25
    1ef8:	8e 93       	st	-X, r24
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	20 30       	cpi	r18, 0x00	; 0
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	38 07       	cpc	r19, r24
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	48 07       	cpc	r20, r24
    1f06:	80 e4       	ldi	r24, 0x40	; 64
    1f08:	58 07       	cpc	r21, r24
    1f0a:	58 f3       	brcs	.-42     	; 0x1ee2 <__unpack_f+0x66>
    1f0c:	14 96       	adiw	r26, 0x04	; 4
    1f0e:	2d 93       	st	X+, r18
    1f10:	3d 93       	st	X+, r19
    1f12:	4d 93       	st	X+, r20
    1f14:	5c 93       	st	X, r21
    1f16:	17 97       	sbiw	r26, 0x07	; 7
    1f18:	08 95       	ret
    1f1a:	2f 3f       	cpi	r18, 0xFF	; 255
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	79 f4       	brne	.+30     	; 0x1f3e <__unpack_f+0xc2>
    1f20:	41 15       	cp	r20, r1
    1f22:	51 05       	cpc	r21, r1
    1f24:	61 05       	cpc	r22, r1
    1f26:	71 05       	cpc	r23, r1
    1f28:	19 f4       	brne	.+6      	; 0x1f30 <__unpack_f+0xb4>
    1f2a:	84 e0       	ldi	r24, 0x04	; 4
    1f2c:	8c 93       	st	X, r24
    1f2e:	08 95       	ret
    1f30:	64 ff       	sbrs	r22, 4
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <__unpack_f+0xbe>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	8c 93       	st	X, r24
    1f38:	12 c0       	rjmp	.+36     	; 0x1f5e <__unpack_f+0xe2>
    1f3a:	1c 92       	st	X, r1
    1f3c:	10 c0       	rjmp	.+32     	; 0x1f5e <__unpack_f+0xe2>
    1f3e:	2f 57       	subi	r18, 0x7F	; 127
    1f40:	30 40       	sbci	r19, 0x00	; 0
    1f42:	13 96       	adiw	r26, 0x03	; 3
    1f44:	3c 93       	st	X, r19
    1f46:	2e 93       	st	-X, r18
    1f48:	12 97       	sbiw	r26, 0x02	; 2
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	8c 93       	st	X, r24
    1f4e:	87 e0       	ldi	r24, 0x07	; 7
    1f50:	44 0f       	add	r20, r20
    1f52:	55 1f       	adc	r21, r21
    1f54:	66 1f       	adc	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	8a 95       	dec	r24
    1f5a:	d1 f7       	brne	.-12     	; 0x1f50 <__unpack_f+0xd4>
    1f5c:	70 64       	ori	r23, 0x40	; 64
    1f5e:	14 96       	adiw	r26, 0x04	; 4
    1f60:	4d 93       	st	X+, r20
    1f62:	5d 93       	st	X+, r21
    1f64:	6d 93       	st	X+, r22
    1f66:	7c 93       	st	X, r23
    1f68:	17 97       	sbiw	r26, 0x07	; 7
    1f6a:	08 95       	ret

00001f6c <__udivmodqi4>:
    1f6c:	99 1b       	sub	r25, r25
    1f6e:	79 e0       	ldi	r23, 0x09	; 9
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <__udivmodqi4_ep>

00001f72 <__udivmodqi4_loop>:
    1f72:	99 1f       	adc	r25, r25
    1f74:	96 17       	cp	r25, r22
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <__udivmodqi4_ep>
    1f78:	96 1b       	sub	r25, r22

00001f7a <__udivmodqi4_ep>:
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	7a 95       	dec	r23
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__udivmodqi4_loop>
    1f80:	80 95       	com	r24
    1f82:	08 95       	ret

00001f84 <__udivmodhi4>:
    1f84:	aa 1b       	sub	r26, r26
    1f86:	bb 1b       	sub	r27, r27
    1f88:	51 e1       	ldi	r21, 0x11	; 17
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <__udivmodhi4_ep>

00001f8c <__udivmodhi4_loop>:
    1f8c:	aa 1f       	adc	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	a6 17       	cp	r26, r22
    1f92:	b7 07       	cpc	r27, r23
    1f94:	10 f0       	brcs	.+4      	; 0x1f9a <__udivmodhi4_ep>
    1f96:	a6 1b       	sub	r26, r22
    1f98:	b7 0b       	sbc	r27, r23

00001f9a <__udivmodhi4_ep>:
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	5a 95       	dec	r21
    1fa0:	a9 f7       	brne	.-22     	; 0x1f8c <__udivmodhi4_loop>
    1fa2:	80 95       	com	r24
    1fa4:	90 95       	com	r25
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	08 95       	ret

00001fac <__divmodhi4>:
    1fac:	97 fb       	bst	r25, 7
    1fae:	09 2e       	mov	r0, r25
    1fb0:	07 26       	eor	r0, r23
    1fb2:	0a d0       	rcall	.+20     	; 0x1fc8 <__divmodhi4_neg1>
    1fb4:	77 fd       	sbrc	r23, 7
    1fb6:	04 d0       	rcall	.+8      	; 0x1fc0 <__divmodhi4_neg2>
    1fb8:	e5 df       	rcall	.-54     	; 0x1f84 <__udivmodhi4>
    1fba:	06 d0       	rcall	.+12     	; 0x1fc8 <__divmodhi4_neg1>
    1fbc:	00 20       	and	r0, r0
    1fbe:	1a f4       	brpl	.+6      	; 0x1fc6 <__divmodhi4_exit>

00001fc0 <__divmodhi4_neg2>:
    1fc0:	70 95       	com	r23
    1fc2:	61 95       	neg	r22
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255

00001fc6 <__divmodhi4_exit>:
    1fc6:	08 95       	ret

00001fc8 <__divmodhi4_neg1>:
    1fc8:	f6 f7       	brtc	.-4      	; 0x1fc6 <__divmodhi4_exit>
    1fca:	90 95       	com	r25
    1fcc:	81 95       	neg	r24
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	08 95       	ret

00001fd2 <__prologue_saves__>:
    1fd2:	2f 92       	push	r2
    1fd4:	3f 92       	push	r3
    1fd6:	4f 92       	push	r4
    1fd8:	5f 92       	push	r5
    1fda:	6f 92       	push	r6
    1fdc:	7f 92       	push	r7
    1fde:	8f 92       	push	r8
    1fe0:	9f 92       	push	r9
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	ca 1b       	sub	r28, r26
    1ffc:	db 0b       	sbc	r29, r27
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	09 94       	ijmp

0000200a <__epilogue_restores__>:
    200a:	2a 88       	ldd	r2, Y+18	; 0x12
    200c:	39 88       	ldd	r3, Y+17	; 0x11
    200e:	48 88       	ldd	r4, Y+16	; 0x10
    2010:	5f 84       	ldd	r5, Y+15	; 0x0f
    2012:	6e 84       	ldd	r6, Y+14	; 0x0e
    2014:	7d 84       	ldd	r7, Y+13	; 0x0d
    2016:	8c 84       	ldd	r8, Y+12	; 0x0c
    2018:	9b 84       	ldd	r9, Y+11	; 0x0b
    201a:	aa 84       	ldd	r10, Y+10	; 0x0a
    201c:	b9 84       	ldd	r11, Y+9	; 0x09
    201e:	c8 84       	ldd	r12, Y+8	; 0x08
    2020:	df 80       	ldd	r13, Y+7	; 0x07
    2022:	ee 80       	ldd	r14, Y+6	; 0x06
    2024:	fd 80       	ldd	r15, Y+5	; 0x05
    2026:	0c 81       	ldd	r16, Y+4	; 0x04
    2028:	1b 81       	ldd	r17, Y+3	; 0x03
    202a:	aa 81       	ldd	r26, Y+2	; 0x02
    202c:	b9 81       	ldd	r27, Y+1	; 0x01
    202e:	ce 0f       	add	r28, r30
    2030:	d1 1d       	adc	r29, r1
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	ed 01       	movw	r28, r26
    203e:	08 95       	ret

00002040 <dtostrf>:
    2040:	ef 92       	push	r14
    2042:	ff 92       	push	r15
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	f2 2f       	mov	r31, r18
    204a:	f0 2e       	mov	r15, r16
    204c:	47 fd       	sbrc	r20, 7
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <dtostrf+0x14>
    2050:	e4 e0       	ldi	r30, 0x04	; 4
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <dtostrf+0x16>
    2054:	e4 e1       	ldi	r30, 0x14	; 20
    2056:	24 2f       	mov	r18, r20
    2058:	33 27       	eor	r19, r19
    205a:	27 fd       	sbrc	r18, 7
    205c:	30 95       	com	r19
    205e:	37 ff       	sbrs	r19, 7
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <dtostrf+0x28>
    2062:	30 95       	com	r19
    2064:	21 95       	neg	r18
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	4f 2d       	mov	r20, r15
    206a:	51 2f       	mov	r21, r17
    206c:	0f 2f       	mov	r16, r31
    206e:	ee 2e       	mov	r14, r30
    2070:	0e 94 71 10 	call	0x20e2	; 0x20e2 <dtoa_prf>
    2074:	8f 2d       	mov	r24, r15
    2076:	91 2f       	mov	r25, r17
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	08 95       	ret

00002082 <strcpy>:
    2082:	fb 01       	movw	r30, r22
    2084:	dc 01       	movw	r26, r24
    2086:	01 90       	ld	r0, Z+
    2088:	0d 92       	st	X+, r0
    208a:	00 20       	and	r0, r0
    208c:	e1 f7       	brne	.-8      	; 0x2086 <strcpy+0x4>
    208e:	08 95       	ret

00002090 <fputs>:
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	7c 01       	movw	r14, r24
    209e:	8b 01       	movw	r16, r22
    20a0:	db 01       	movw	r26, r22
    20a2:	13 96       	adiw	r26, 0x03	; 3
    20a4:	8c 91       	ld	r24, X
    20a6:	81 fd       	sbrc	r24, 1
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <fputs+0x20>
    20aa:	cf ef       	ldi	r28, 0xFF	; 255
    20ac:	df ef       	ldi	r29, 0xFF	; 255
    20ae:	13 c0       	rjmp	.+38     	; 0x20d6 <fputs+0x46>
    20b0:	c0 e0       	ldi	r28, 0x00	; 0
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <fputs+0x3c>
    20b6:	d8 01       	movw	r26, r16
    20b8:	18 96       	adiw	r26, 0x08	; 8
    20ba:	ed 91       	ld	r30, X+
    20bc:	fc 91       	ld	r31, X
    20be:	19 97       	sbiw	r26, 0x09	; 9
    20c0:	b8 01       	movw	r22, r16
    20c2:	09 95       	icall
    20c4:	89 2b       	or	r24, r25
    20c6:	11 f0       	breq	.+4      	; 0x20cc <fputs+0x3c>
    20c8:	cf ef       	ldi	r28, 0xFF	; 255
    20ca:	df ef       	ldi	r29, 0xFF	; 255
    20cc:	f7 01       	movw	r30, r14
    20ce:	81 91       	ld	r24, Z+
    20d0:	7f 01       	movw	r14, r30
    20d2:	88 23       	and	r24, r24
    20d4:	81 f7       	brne	.-32     	; 0x20b6 <fputs+0x26>
    20d6:	ce 01       	movw	r24, r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	e6 e0       	ldi	r30, 0x06	; 6
    20de:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__epilogue_restores__+0x18>

000020e2 <dtoa_prf>:
    20e2:	a9 e0       	ldi	r26, 0x09	; 9
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e7 e7       	ldi	r30, 0x77	; 119
    20e8:	f0 e1       	ldi	r31, 0x10	; 16
    20ea:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__prologue_saves__+0x8>
    20ee:	6a 01       	movw	r12, r20
    20f0:	12 2f       	mov	r17, r18
    20f2:	a0 2e       	mov	r10, r16
    20f4:	be 2c       	mov	r11, r14
    20f6:	2b e3       	ldi	r18, 0x3B	; 59
    20f8:	20 17       	cp	r18, r16
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <dtoa_prf+0x20>
    20fc:	2c e3       	ldi	r18, 0x3C	; 60
    20fe:	92 2e       	mov	r9, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <dtoa_prf+0x24>
    2102:	90 2e       	mov	r9, r16
    2104:	93 94       	inc	r9
    2106:	ae 01       	movw	r20, r28
    2108:	4f 5f       	subi	r20, 0xFF	; 255
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	27 e0       	ldi	r18, 0x07	; 7
    210e:	09 2d       	mov	r16, r9
    2110:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__ftoa_engine>
    2114:	bc 01       	movw	r22, r24
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	e8 2e       	mov	r14, r24
    211a:	ff 24       	eor	r15, r15
    211c:	c7 01       	movw	r24, r14
    211e:	89 70       	andi	r24, 0x09	; 9
    2120:	90 70       	andi	r25, 0x00	; 0
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	11 f4       	brne	.+4      	; 0x212a <dtoa_prf+0x48>
    2126:	ad e2       	ldi	r26, 0x2D	; 45
    2128:	09 c0       	rjmp	.+18     	; 0x213c <dtoa_prf+0x5a>
    212a:	b1 fe       	sbrs	r11, 1
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <dtoa_prf+0x50>
    212e:	ab e2       	ldi	r26, 0x2B	; 43
    2130:	05 c0       	rjmp	.+10     	; 0x213c <dtoa_prf+0x5a>
    2132:	b0 fc       	sbrc	r11, 0
    2134:	02 c0       	rjmp	.+4      	; 0x213a <dtoa_prf+0x58>
    2136:	a0 e0       	ldi	r26, 0x00	; 0
    2138:	01 c0       	rjmp	.+2      	; 0x213c <dtoa_prf+0x5a>
    213a:	a0 e2       	ldi	r26, 0x20	; 32
    213c:	e3 fe       	sbrs	r14, 3
    213e:	3b c0       	rjmp	.+118    	; 0x21b6 <dtoa_prf+0xd4>
    2140:	aa 23       	and	r26, r26
    2142:	11 f4       	brne	.+4      	; 0x2148 <dtoa_prf+0x66>
    2144:	23 e0       	ldi	r18, 0x03	; 3
    2146:	01 c0       	rjmp	.+2      	; 0x214a <dtoa_prf+0x68>
    2148:	24 e0       	ldi	r18, 0x04	; 4
    214a:	21 17       	cp	r18, r17
    214c:	10 f0       	brcs	.+4      	; 0x2152 <dtoa_prf+0x70>
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <dtoa_prf+0x74>
    2152:	12 1b       	sub	r17, r18
    2154:	21 2f       	mov	r18, r17
    2156:	eb 2c       	mov	r14, r11
    2158:	b4 fe       	sbrs	r11, 4
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <dtoa_prf+0x7e>
    215c:	32 2f       	mov	r19, r18
    215e:	0a c0       	rjmp	.+20     	; 0x2174 <dtoa_prf+0x92>
    2160:	f6 01       	movw	r30, r12
    2162:	32 2f       	mov	r19, r18
    2164:	80 e2       	ldi	r24, 0x20	; 32
    2166:	02 c0       	rjmp	.+4      	; 0x216c <dtoa_prf+0x8a>
    2168:	81 93       	st	Z+, r24
    216a:	31 50       	subi	r19, 0x01	; 1
    216c:	33 23       	and	r19, r19
    216e:	e1 f7       	brne	.-8      	; 0x2168 <dtoa_prf+0x86>
    2170:	c2 0e       	add	r12, r18
    2172:	d1 1c       	adc	r13, r1
    2174:	aa 23       	and	r26, r26
    2176:	19 f0       	breq	.+6      	; 0x217e <dtoa_prf+0x9c>
    2178:	f6 01       	movw	r30, r12
    217a:	a1 93       	st	Z+, r26
    217c:	6f 01       	movw	r12, r30
    217e:	f6 01       	movw	r30, r12
    2180:	31 96       	adiw	r30, 0x01	; 1
    2182:	e2 fe       	sbrs	r14, 2
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <dtoa_prf+0xae>
    2186:	9e e4       	ldi	r25, 0x4E	; 78
    2188:	d6 01       	movw	r26, r12
    218a:	9c 93       	st	X, r25
    218c:	81 e4       	ldi	r24, 0x41	; 65
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <dtoa_prf+0xb6>
    2190:	9e e6       	ldi	r25, 0x6E	; 110
    2192:	d6 01       	movw	r26, r12
    2194:	9c 93       	st	X, r25
    2196:	81 e6       	ldi	r24, 0x61	; 97
    2198:	11 96       	adiw	r26, 0x01	; 1
    219a:	8c 93       	st	X, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	32 96       	adiw	r30, 0x02	; 2
    21a0:	df 01       	movw	r26, r30
    21a2:	83 2f       	mov	r24, r19
    21a4:	90 e2       	ldi	r25, 0x20	; 32
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <dtoa_prf+0xca>
    21a8:	9d 93       	st	X+, r25
    21aa:	81 50       	subi	r24, 0x01	; 1
    21ac:	88 23       	and	r24, r24
    21ae:	e1 f7       	brne	.-8      	; 0x21a8 <dtoa_prf+0xc6>
    21b0:	e3 0f       	add	r30, r19
    21b2:	f1 1d       	adc	r31, r1
    21b4:	40 c0       	rjmp	.+128    	; 0x2236 <dtoa_prf+0x154>
    21b6:	e2 fe       	sbrs	r14, 2
    21b8:	42 c0       	rjmp	.+132    	; 0x223e <dtoa_prf+0x15c>
    21ba:	aa 23       	and	r26, r26
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <dtoa_prf+0xe0>
    21be:	23 e0       	ldi	r18, 0x03	; 3
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <dtoa_prf+0xe2>
    21c2:	24 e0       	ldi	r18, 0x04	; 4
    21c4:	21 17       	cp	r18, r17
    21c6:	10 f0       	brcs	.+4      	; 0x21cc <dtoa_prf+0xea>
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <dtoa_prf+0xee>
    21cc:	12 1b       	sub	r17, r18
    21ce:	21 2f       	mov	r18, r17
    21d0:	eb 2c       	mov	r14, r11
    21d2:	b4 fe       	sbrs	r11, 4
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <dtoa_prf+0xf8>
    21d6:	92 2f       	mov	r25, r18
    21d8:	0a c0       	rjmp	.+20     	; 0x21ee <dtoa_prf+0x10c>
    21da:	f6 01       	movw	r30, r12
    21dc:	92 2f       	mov	r25, r18
    21de:	80 e2       	ldi	r24, 0x20	; 32
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <dtoa_prf+0x104>
    21e2:	81 93       	st	Z+, r24
    21e4:	91 50       	subi	r25, 0x01	; 1
    21e6:	99 23       	and	r25, r25
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <dtoa_prf+0x100>
    21ea:	c2 0e       	add	r12, r18
    21ec:	d1 1c       	adc	r13, r1
    21ee:	aa 23       	and	r26, r26
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <dtoa_prf+0x116>
    21f2:	f6 01       	movw	r30, r12
    21f4:	a1 93       	st	Z+, r26
    21f6:	6f 01       	movw	r12, r30
    21f8:	f6 01       	movw	r30, r12
    21fa:	31 96       	adiw	r30, 0x01	; 1
    21fc:	e2 fe       	sbrs	r14, 2
    21fe:	08 c0       	rjmp	.+16     	; 0x2210 <dtoa_prf+0x12e>
    2200:	89 e4       	ldi	r24, 0x49	; 73
    2202:	d6 01       	movw	r26, r12
    2204:	8c 93       	st	X, r24
    2206:	8e e4       	ldi	r24, 0x4E	; 78
    2208:	11 96       	adiw	r26, 0x01	; 1
    220a:	8c 93       	st	X, r24
    220c:	86 e4       	ldi	r24, 0x46	; 70
    220e:	07 c0       	rjmp	.+14     	; 0x221e <dtoa_prf+0x13c>
    2210:	89 e6       	ldi	r24, 0x69	; 105
    2212:	d6 01       	movw	r26, r12
    2214:	8c 93       	st	X, r24
    2216:	8e e6       	ldi	r24, 0x6E	; 110
    2218:	11 96       	adiw	r26, 0x01	; 1
    221a:	8c 93       	st	X, r24
    221c:	86 e6       	ldi	r24, 0x66	; 102
    221e:	81 83       	std	Z+1, r24	; 0x01
    2220:	32 96       	adiw	r30, 0x02	; 2
    2222:	df 01       	movw	r26, r30
    2224:	89 2f       	mov	r24, r25
    2226:	20 e2       	ldi	r18, 0x20	; 32
    2228:	02 c0       	rjmp	.+4      	; 0x222e <dtoa_prf+0x14c>
    222a:	2d 93       	st	X+, r18
    222c:	81 50       	subi	r24, 0x01	; 1
    222e:	88 23       	and	r24, r24
    2230:	e1 f7       	brne	.-8      	; 0x222a <dtoa_prf+0x148>
    2232:	e9 0f       	add	r30, r25
    2234:	f1 1d       	adc	r31, r1
    2236:	10 82       	st	Z, r1
    2238:	2e ef       	ldi	r18, 0xFE	; 254
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	af c0       	rjmp	.+350    	; 0x239c <dtoa_prf+0x2ba>
    223e:	16 16       	cp	r1, r22
    2240:	17 06       	cpc	r1, r23
    2242:	1c f0       	brlt	.+6      	; 0x224a <dtoa_prf+0x168>
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <dtoa_prf+0x16e>
    224a:	ab 01       	movw	r20, r22
    224c:	4f 5f       	subi	r20, 0xFF	; 255
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
    2250:	aa 20       	and	r10, r10
    2252:	19 f4       	brne	.+6      	; 0x225a <dtoa_prf+0x178>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <dtoa_prf+0x17e>
    225a:	8a 2d       	mov	r24, r10
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	aa 23       	and	r26, r26
    2266:	11 f0       	breq	.+4      	; 0x226c <dtoa_prf+0x18a>
    2268:	21 e0       	ldi	r18, 0x01	; 1
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	24 0f       	add	r18, r20
    226e:	35 1f       	adc	r19, r21
    2270:	28 0f       	add	r18, r24
    2272:	39 1f       	adc	r19, r25
    2274:	81 2f       	mov	r24, r17
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	28 17       	cp	r18, r24
    227a:	39 07       	cpc	r19, r25
    227c:	14 f0       	brlt	.+4      	; 0x2282 <dtoa_prf+0x1a0>
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <dtoa_prf+0x1a4>
    2282:	12 1b       	sub	r17, r18
    2284:	21 2f       	mov	r18, r17
    2286:	4b 2d       	mov	r20, r11
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	ca 01       	movw	r24, r20
    228c:	80 71       	andi	r24, 0x10	; 16
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	b4 fc       	sbrc	r11, 4
    2292:	0d c0       	rjmp	.+26     	; 0x22ae <dtoa_prf+0x1cc>
    2294:	b3 fc       	sbrc	r11, 3
    2296:	0b c0       	rjmp	.+22     	; 0x22ae <dtoa_prf+0x1cc>
    2298:	f6 01       	movw	r30, r12
    229a:	32 2f       	mov	r19, r18
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <dtoa_prf+0x1c2>
    22a0:	41 93       	st	Z+, r20
    22a2:	31 50       	subi	r19, 0x01	; 1
    22a4:	33 23       	and	r19, r19
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <dtoa_prf+0x1be>
    22a8:	c2 0e       	add	r12, r18
    22aa:	d1 1c       	adc	r13, r1
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <dtoa_prf+0x1ce>
    22ae:	32 2f       	mov	r19, r18
    22b0:	aa 23       	and	r26, r26
    22b2:	19 f0       	breq	.+6      	; 0x22ba <dtoa_prf+0x1d8>
    22b4:	f6 01       	movw	r30, r12
    22b6:	a1 93       	st	Z+, r26
    22b8:	6f 01       	movw	r12, r30
    22ba:	89 2b       	or	r24, r25
    22bc:	11 f0       	breq	.+4      	; 0x22c2 <dtoa_prf+0x1e0>
    22be:	13 2f       	mov	r17, r19
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <dtoa_prf+0x1f4>
    22c2:	f6 01       	movw	r30, r12
    22c4:	13 2f       	mov	r17, r19
    22c6:	80 e3       	ldi	r24, 0x30	; 48
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <dtoa_prf+0x1ec>
    22ca:	81 93       	st	Z+, r24
    22cc:	11 50       	subi	r17, 0x01	; 1
    22ce:	11 23       	and	r17, r17
    22d0:	e1 f7       	brne	.-8      	; 0x22ca <dtoa_prf+0x1e8>
    22d2:	c3 0e       	add	r12, r19
    22d4:	d1 1c       	adc	r13, r1
    22d6:	09 2d       	mov	r16, r9
    22d8:	06 0f       	add	r16, r22
    22da:	ba 80       	ldd	r11, Y+2	; 0x02
    22dc:	90 e1       	ldi	r25, 0x10	; 16
    22de:	89 2e       	mov	r8, r25
    22e0:	91 2c       	mov	r9, r1
    22e2:	8e 20       	and	r8, r14
    22e4:	9f 20       	and	r9, r15
    22e6:	e4 fe       	sbrs	r14, 4
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <dtoa_prf+0x210>
    22ea:	f1 e3       	ldi	r31, 0x31	; 49
    22ec:	bf 16       	cp	r11, r31
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <dtoa_prf+0x210>
    22f0:	01 50       	subi	r16, 0x01	; 1
    22f2:	10 16       	cp	r1, r16
    22f4:	14 f0       	brlt	.+4      	; 0x22fa <dtoa_prf+0x218>
    22f6:	01 e0       	ldi	r16, 0x01	; 1
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <dtoa_prf+0x21e>
    22fa:	09 30       	cpi	r16, 0x09	; 9
    22fc:	08 f0       	brcs	.+2      	; 0x2300 <dtoa_prf+0x21e>
    22fe:	08 e0       	ldi	r16, 0x08	; 8
    2300:	9b 01       	movw	r18, r22
    2302:	77 ff       	sbrs	r23, 7
    2304:	02 c0       	rjmp	.+4      	; 0x230a <dtoa_prf+0x228>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	cb 01       	movw	r24, r22
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	82 1b       	sub	r24, r18
    2310:	93 0b       	sbc	r25, r19
    2312:	fe 01       	movw	r30, r28
    2314:	31 96       	adiw	r30, 0x01	; 1
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	8e e2       	ldi	r24, 0x2E	; 46
    231c:	f8 2e       	mov	r15, r24
    231e:	3b 01       	movw	r6, r22
    2320:	60 1a       	sub	r6, r16
    2322:	71 08       	sbc	r7, r1
    2324:	8a 2d       	mov	r24, r10
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	44 27       	eor	r20, r20
    232a:	55 27       	eor	r21, r21
    232c:	48 1b       	sub	r20, r24
    232e:	59 0b       	sbc	r21, r25
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	2f 3f       	cpi	r18, 0xFF	; 255
    2334:	38 07       	cpc	r19, r24
    2336:	19 f4       	brne	.+6      	; 0x233e <dtoa_prf+0x25c>
    2338:	d6 01       	movw	r26, r12
    233a:	fd 92       	st	X+, r15
    233c:	6d 01       	movw	r12, r26
    233e:	62 17       	cp	r22, r18
    2340:	73 07       	cpc	r23, r19
    2342:	2c f0       	brlt	.+10     	; 0x234e <dtoa_prf+0x26c>
    2344:	62 16       	cp	r6, r18
    2346:	73 06       	cpc	r7, r19
    2348:	14 f4       	brge	.+4      	; 0x234e <dtoa_prf+0x26c>
    234a:	80 81       	ld	r24, Z
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <dtoa_prf+0x26e>
    234e:	80 e3       	ldi	r24, 0x30	; 48
    2350:	21 50       	subi	r18, 0x01	; 1
    2352:	30 40       	sbci	r19, 0x00	; 0
    2354:	31 96       	adiw	r30, 0x01	; 1
    2356:	24 17       	cp	r18, r20
    2358:	35 07       	cpc	r19, r21
    235a:	24 f0       	brlt	.+8      	; 0x2364 <dtoa_prf+0x282>
    235c:	d6 01       	movw	r26, r12
    235e:	8d 93       	st	X+, r24
    2360:	6d 01       	movw	r12, r26
    2362:	e6 cf       	rjmp	.-52     	; 0x2330 <dtoa_prf+0x24e>
    2364:	26 17       	cp	r18, r22
    2366:	37 07       	cpc	r19, r23
    2368:	49 f4       	brne	.+18     	; 0x237c <dtoa_prf+0x29a>
    236a:	b5 e3       	ldi	r27, 0x35	; 53
    236c:	bb 15       	cp	r27, r11
    236e:	28 f0       	brcs	.+10     	; 0x237a <dtoa_prf+0x298>
    2370:	bb 16       	cp	r11, r27
    2372:	21 f4       	brne	.+8      	; 0x237c <dtoa_prf+0x29a>
    2374:	81 14       	cp	r8, r1
    2376:	91 04       	cpc	r9, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <dtoa_prf+0x29a>
    237a:	81 e3       	ldi	r24, 0x31	; 49
    237c:	f6 01       	movw	r30, r12
    237e:	81 93       	st	Z+, r24
    2380:	d6 01       	movw	r26, r12
    2382:	81 2f       	mov	r24, r17
    2384:	90 e2       	ldi	r25, 0x20	; 32
    2386:	02 c0       	rjmp	.+4      	; 0x238c <dtoa_prf+0x2aa>
    2388:	9c 93       	st	X, r25
    238a:	81 50       	subi	r24, 0x01	; 1
    238c:	11 96       	adiw	r26, 0x01	; 1
    238e:	88 23       	and	r24, r24
    2390:	d9 f7       	brne	.-10     	; 0x2388 <dtoa_prf+0x2a6>
    2392:	e1 0f       	add	r30, r17
    2394:	f1 1d       	adc	r31, r1
    2396:	10 82       	st	Z, r1
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	c9 01       	movw	r24, r18
    239e:	29 96       	adiw	r28, 0x09	; 9
    23a0:	ee e0       	ldi	r30, 0x0E	; 14
    23a2:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__epilogue_restores__+0x8>

000023a6 <__ftoa_engine>:
    23a6:	28 30       	cpi	r18, 0x08	; 8
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <__ftoa_engine+0x6>
    23aa:	27 e0       	ldi	r18, 0x07	; 7
    23ac:	33 27       	eor	r19, r19
    23ae:	da 01       	movw	r26, r20
    23b0:	99 0f       	add	r25, r25
    23b2:	31 1d       	adc	r19, r1
    23b4:	87 fd       	sbrc	r24, 7
    23b6:	91 60       	ori	r25, 0x01	; 1
    23b8:	00 96       	adiw	r24, 0x00	; 0
    23ba:	61 05       	cpc	r22, r1
    23bc:	71 05       	cpc	r23, r1
    23be:	39 f4       	brne	.+14     	; 0x23ce <__ftoa_engine+0x28>
    23c0:	32 60       	ori	r19, 0x02	; 2
    23c2:	2e 5f       	subi	r18, 0xFE	; 254
    23c4:	3d 93       	st	X+, r19
    23c6:	30 e3       	ldi	r19, 0x30	; 48
    23c8:	2a 95       	dec	r18
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <__ftoa_engine+0x1e>
    23cc:	08 95       	ret
    23ce:	9f 3f       	cpi	r25, 0xFF	; 255
    23d0:	30 f0       	brcs	.+12     	; 0x23de <__ftoa_engine+0x38>
    23d2:	80 38       	cpi	r24, 0x80	; 128
    23d4:	71 05       	cpc	r23, r1
    23d6:	61 05       	cpc	r22, r1
    23d8:	09 f0       	breq	.+2      	; 0x23dc <__ftoa_engine+0x36>
    23da:	3c 5f       	subi	r19, 0xFC	; 252
    23dc:	3c 5f       	subi	r19, 0xFC	; 252
    23de:	3d 93       	st	X+, r19
    23e0:	91 30       	cpi	r25, 0x01	; 1
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <__ftoa_engine+0x40>
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	91 1d       	adc	r25, r1
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	1f 93       	push	r17
    23ee:	0f 93       	push	r16
    23f0:	ff 92       	push	r15
    23f2:	ef 92       	push	r14
    23f4:	19 2f       	mov	r17, r25
    23f6:	98 7f       	andi	r25, 0xF8	; 248
    23f8:	96 95       	lsr	r25
    23fa:	e9 2f       	mov	r30, r25
    23fc:	96 95       	lsr	r25
    23fe:	96 95       	lsr	r25
    2400:	e9 0f       	add	r30, r25
    2402:	ff 27       	eor	r31, r31
    2404:	ed 54       	subi	r30, 0x4D	; 77
    2406:	fd 4f       	sbci	r31, 0xFD	; 253
    2408:	99 27       	eor	r25, r25
    240a:	33 27       	eor	r19, r19
    240c:	ee 24       	eor	r14, r14
    240e:	ff 24       	eor	r15, r15
    2410:	a7 01       	movw	r20, r14
    2412:	e7 01       	movw	r28, r14
    2414:	05 90       	lpm	r0, Z+
    2416:	08 94       	sec
    2418:	07 94       	ror	r0
    241a:	28 f4       	brcc	.+10     	; 0x2426 <__ftoa_engine+0x80>
    241c:	36 0f       	add	r19, r22
    241e:	e7 1e       	adc	r14, r23
    2420:	f8 1e       	adc	r15, r24
    2422:	49 1f       	adc	r20, r25
    2424:	51 1d       	adc	r21, r1
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	06 94       	lsr	r0
    2430:	a1 f7       	brne	.-24     	; 0x241a <__ftoa_engine+0x74>
    2432:	05 90       	lpm	r0, Z+
    2434:	07 94       	ror	r0
    2436:	28 f4       	brcc	.+10     	; 0x2442 <__ftoa_engine+0x9c>
    2438:	e7 0e       	add	r14, r23
    243a:	f8 1e       	adc	r15, r24
    243c:	49 1f       	adc	r20, r25
    243e:	56 1f       	adc	r21, r22
    2440:	c1 1d       	adc	r28, r1
    2442:	77 0f       	add	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	66 1f       	adc	r22, r22
    244a:	06 94       	lsr	r0
    244c:	a1 f7       	brne	.-24     	; 0x2436 <__ftoa_engine+0x90>
    244e:	05 90       	lpm	r0, Z+
    2450:	07 94       	ror	r0
    2452:	28 f4       	brcc	.+10     	; 0x245e <__ftoa_engine+0xb8>
    2454:	f8 0e       	add	r15, r24
    2456:	49 1f       	adc	r20, r25
    2458:	56 1f       	adc	r21, r22
    245a:	c7 1f       	adc	r28, r23
    245c:	d1 1d       	adc	r29, r1
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	66 1f       	adc	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	06 94       	lsr	r0
    2468:	a1 f7       	brne	.-24     	; 0x2452 <__ftoa_engine+0xac>
    246a:	05 90       	lpm	r0, Z+
    246c:	07 94       	ror	r0
    246e:	20 f4       	brcc	.+8      	; 0x2478 <__ftoa_engine+0xd2>
    2470:	49 0f       	add	r20, r25
    2472:	56 1f       	adc	r21, r22
    2474:	c7 1f       	adc	r28, r23
    2476:	d8 1f       	adc	r29, r24
    2478:	99 0f       	add	r25, r25
    247a:	66 1f       	adc	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	06 94       	lsr	r0
    2482:	a9 f7       	brne	.-22     	; 0x246e <__ftoa_engine+0xc8>
    2484:	84 91       	lpm	r24, Z+
    2486:	10 95       	com	r17
    2488:	17 70       	andi	r17, 0x07	; 7
    248a:	41 f0       	breq	.+16     	; 0x249c <__ftoa_engine+0xf6>
    248c:	d6 95       	lsr	r29
    248e:	c7 95       	ror	r28
    2490:	57 95       	ror	r21
    2492:	47 95       	ror	r20
    2494:	f7 94       	ror	r15
    2496:	e7 94       	ror	r14
    2498:	1a 95       	dec	r17
    249a:	c1 f7       	brne	.-16     	; 0x248c <__ftoa_engine+0xe6>
    249c:	e9 e5       	ldi	r30, 0x59	; 89
    249e:	f2 e0       	ldi	r31, 0x02	; 2
    24a0:	68 94       	set
    24a2:	15 90       	lpm	r1, Z+
    24a4:	15 91       	lpm	r17, Z+
    24a6:	35 91       	lpm	r19, Z+
    24a8:	65 91       	lpm	r22, Z+
    24aa:	95 91       	lpm	r25, Z+
    24ac:	05 90       	lpm	r0, Z+
    24ae:	7f e2       	ldi	r23, 0x2F	; 47
    24b0:	73 95       	inc	r23
    24b2:	e1 18       	sub	r14, r1
    24b4:	f1 0a       	sbc	r15, r17
    24b6:	43 0b       	sbc	r20, r19
    24b8:	56 0b       	sbc	r21, r22
    24ba:	c9 0b       	sbc	r28, r25
    24bc:	d0 09       	sbc	r29, r0
    24be:	c0 f7       	brcc	.-16     	; 0x24b0 <__ftoa_engine+0x10a>
    24c0:	e1 0c       	add	r14, r1
    24c2:	f1 1e       	adc	r15, r17
    24c4:	43 1f       	adc	r20, r19
    24c6:	56 1f       	adc	r21, r22
    24c8:	c9 1f       	adc	r28, r25
    24ca:	d0 1d       	adc	r29, r0
    24cc:	7e f4       	brtc	.+30     	; 0x24ec <__ftoa_engine+0x146>
    24ce:	70 33       	cpi	r23, 0x30	; 48
    24d0:	11 f4       	brne	.+4      	; 0x24d6 <__ftoa_engine+0x130>
    24d2:	8a 95       	dec	r24
    24d4:	e6 cf       	rjmp	.-52     	; 0x24a2 <__ftoa_engine+0xfc>
    24d6:	e8 94       	clt
    24d8:	01 50       	subi	r16, 0x01	; 1
    24da:	30 f0       	brcs	.+12     	; 0x24e8 <__ftoa_engine+0x142>
    24dc:	08 0f       	add	r16, r24
    24de:	0a f4       	brpl	.+2      	; 0x24e2 <__ftoa_engine+0x13c>
    24e0:	00 27       	eor	r16, r16
    24e2:	02 17       	cp	r16, r18
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <__ftoa_engine+0x142>
    24e6:	20 2f       	mov	r18, r16
    24e8:	23 95       	inc	r18
    24ea:	02 2f       	mov	r16, r18
    24ec:	7a 33       	cpi	r23, 0x3A	; 58
    24ee:	28 f0       	brcs	.+10     	; 0x24fa <__ftoa_engine+0x154>
    24f0:	79 e3       	ldi	r23, 0x39	; 57
    24f2:	7d 93       	st	X+, r23
    24f4:	2a 95       	dec	r18
    24f6:	e9 f7       	brne	.-6      	; 0x24f2 <__ftoa_engine+0x14c>
    24f8:	10 c0       	rjmp	.+32     	; 0x251a <__ftoa_engine+0x174>
    24fa:	7d 93       	st	X+, r23
    24fc:	2a 95       	dec	r18
    24fe:	89 f6       	brne	.-94     	; 0x24a2 <__ftoa_engine+0xfc>
    2500:	06 94       	lsr	r0
    2502:	97 95       	ror	r25
    2504:	67 95       	ror	r22
    2506:	37 95       	ror	r19
    2508:	17 95       	ror	r17
    250a:	17 94       	ror	r1
    250c:	e1 18       	sub	r14, r1
    250e:	f1 0a       	sbc	r15, r17
    2510:	43 0b       	sbc	r20, r19
    2512:	56 0b       	sbc	r21, r22
    2514:	c9 0b       	sbc	r28, r25
    2516:	d0 09       	sbc	r29, r0
    2518:	98 f0       	brcs	.+38     	; 0x2540 <__ftoa_engine+0x19a>
    251a:	23 95       	inc	r18
    251c:	7e 91       	ld	r23, -X
    251e:	73 95       	inc	r23
    2520:	7a 33       	cpi	r23, 0x3A	; 58
    2522:	08 f0       	brcs	.+2      	; 0x2526 <__ftoa_engine+0x180>
    2524:	70 e3       	ldi	r23, 0x30	; 48
    2526:	7c 93       	st	X, r23
    2528:	20 13       	cpse	r18, r16
    252a:	b8 f7       	brcc	.-18     	; 0x251a <__ftoa_engine+0x174>
    252c:	7e 91       	ld	r23, -X
    252e:	70 61       	ori	r23, 0x10	; 16
    2530:	7d 93       	st	X+, r23
    2532:	30 f0       	brcs	.+12     	; 0x2540 <__ftoa_engine+0x19a>
    2534:	83 95       	inc	r24
    2536:	71 e3       	ldi	r23, 0x31	; 49
    2538:	7d 93       	st	X+, r23
    253a:	70 e3       	ldi	r23, 0x30	; 48
    253c:	2a 95       	dec	r18
    253e:	e1 f7       	brne	.-8      	; 0x2538 <__ftoa_engine+0x192>
    2540:	11 24       	eor	r1, r1
    2542:	ef 90       	pop	r14
    2544:	ff 90       	pop	r15
    2546:	0f 91       	pop	r16
    2548:	1f 91       	pop	r17
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	99 27       	eor	r25, r25
    2550:	87 fd       	sbrc	r24, 7
    2552:	90 95       	com	r25
    2554:	08 95       	ret

00002556 <_exit>:
    2556:	f8 94       	cli

00002558 <__stop_program>:
    2558:	ff cf       	rjmp	.-2      	; 0x2558 <__stop_program>
