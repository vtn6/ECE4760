
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00002d26  00002dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  00800254  00800254  00002f0e  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00002f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000854  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000037f8  00000000  00000000  00003942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001864  00000000  00000000  0000713a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023b3  00000000  00000000  0000899e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  0000ad54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b6  00000000  00000000  0000b174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012a7  00000000  00000000  0000ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000ccd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_12>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_16>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      58:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      60:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      64:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      68:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      6c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000070 <LCDBlank>:
      70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000082 <LCDHelloTop>:
      82:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000094 <LCDHelloBot>:
      94:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000a6 <LCDRange>:
      a6:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

000000af <LCDAutorangeOn>:
      af:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000be <LCD5Volts>:
      be:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000c7 <LCD256Volts>:
      c7:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000d3 <LCD11Volts>:
      d3:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000de <LCD1kOhm>:
      de:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000e6 <LCD10kOhm>:
      e6:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000ef <LCD100kOhm>:
      ef:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000f9 <LCD1kHz>:
      f9:	31 20 6b 48 5a 00 00                                1 kHZ..

00000100 <LCD10kHz>:
     100:	31 30 20 6b 48 5a 00 00                             10 kHZ..

00000108 <LCDMode>:
     108:	4d 4f 44 45 3a 20 00 00                             MODE: ..

00000110 <LCDVolt>:
     110:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000011c <LCDOhm>:
     11c:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000126 <LCDFreq>:
     126:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

00000131 <LCDManWelcomeTop>:
     131:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000013c <LCDManWelcomeBot>:
     13c:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

0000014b <LCDNavigation1Top>:
     14b:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000015d <LCDNavigation1Bot>:
     15d:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000016f <LCDNavigation2Top>:
     16f:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

00000180 <LCDNavigation2Bot>:
     180:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000018f <LCDVoltManTop>:
     18f:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

000001a0 <LCDVoltManBot>:
     1a0:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

000001ab <LCDOhmManTop>:
     1ab:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001bb <LCDOhmManBot>:
     1bb:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001c5 <LCDFreqManTop>:
     1c5:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001d6 <LCDFreqManBot>:
     1d6:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001e3 <LCDAutorangeMan1Top>:
     1e3:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001f0 <LCDAutorangeMan1Bot>:
     1f0:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001fb <LCDAutorangeMan2Top>:
     1fb:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

00000208 <LCDAutorangeMan2Bot>:
     208:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000219 <LcdCustomChar>:
     219:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     229:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     239:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     249:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     259:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     269:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     279:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     289:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     299:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     2a9:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2b9:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2c9:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2d9:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2e9:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2f9:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     309:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     319:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     329:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     339:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     349:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e1       	ldi	r29, 0x10	; 16
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	e6 e2       	ldi	r30, 0x26	; 38
     368:	fd e2       	ldi	r31, 0x2D	; 45
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	a4 35       	cpi	r26, 0x54	; 84
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a4 e5       	ldi	r26, 0x54	; 84
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a3 3f       	cpi	r26, 0xF3	; 243
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 8b 06 	call	0xd16	; 0xd16 <main>
     38a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <__vector_12>:
			ADCSRA |= (1<<ADSC);
		}
	}
}

ISR (TIMER1_CAPT_vect){
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
	//read the timer1 capture register
	T1Capture = ICR1;
     3a4:	80 91 86 00 	lds	r24, 0x0086
     3a8:	90 91 87 00 	lds	r25, 0x0087
     3ac:	90 93 ae 02 	sts	0x02AE, r25
     3b0:	80 93 ad 02 	sts	0x02AD, r24
	
	//period is the difference between this capture and the previous one
	period = T1Capture - lastT1Capture;
     3b4:	80 91 ad 02 	lds	r24, 0x02AD
     3b8:	90 91 ae 02 	lds	r25, 0x02AE
     3bc:	20 91 ba 02 	lds	r18, 0x02BA
     3c0:	30 91 bb 02 	lds	r19, 0x02BB
     3c4:	82 1b       	sub	r24, r18
     3c6:	93 0b       	sbc	r25, r19
     3c8:	90 93 e5 02 	sts	0x02E5, r25
     3cc:	80 93 e4 02 	sts	0x02E4, r24
	lastT1Capture = T1Capture;
     3d0:	80 91 ad 02 	lds	r24, 0x02AD
     3d4:	90 91 ae 02 	lds	r25, 0x02AE
     3d8:	90 93 bb 02 	sts	0x02BB, r25
     3dc:	80 93 ba 02 	sts	0x02BA, r24
		//Set up the TIMERA prescalar
		//TCCR1B &= ~0x07;
		//TCCR1B |= TIMERAprescalars[rangeIdx];
	}
	*/
}
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRD = 0x0f;
     3f2:	2f e0       	ldi	r18, 0x0F	; 15
     3f4:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     3f6:	80 ef       	ldi	r24, 0xF0	; 240
     3f8:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3fa:	9a e1       	ldi	r25, 0x1A	; 26
     3fc:	39 2f       	mov	r19, r25
     3fe:	3a 95       	dec	r19
     400:	f1 f7       	brne	.-4      	; 0x3fe <ScanKeypad+0xc>
	_delay_us(5);
	key = PIND;
     402:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     404:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     406:	2b b9       	out	0x0b, r18	; 11
     408:	9a 95       	dec	r25
     40a:	f1 f7       	brne	.-4      	; 0x408 <ScanKeypad+0x16>
	_delay_us(5);
	key = key | PIND;
     40c:	29 b1       	in	r18, 0x09	; 9
     40e:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff)
     410:	2f 3f       	cpi	r18, 0xFF	; 255
     412:	61 f0       	breq	.+24     	; 0x42c <ScanKeypad+0x3a>
     414:	e4 e3       	ldi	r30, 0x34	; 52
     416:	f1 e0       	ldi	r31, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
		begin   
		if (keytbl[butnum]==key)  break;   
     41a:	80 81       	ld	r24, Z
     41c:	9f 5f       	subi	r25, 0xFF	; 255
     41e:	82 17       	cp	r24, r18
     420:	11 f4       	brne	.+4      	; 0x426 <ScanKeypad+0x34>
		end

		if (butnum==MAX_KEYS) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     422:	89 2f       	mov	r24, r25
     424:	08 95       	ret
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff)
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	90 31       	cpi	r25, 0x10	; 16
     42a:	b9 f7       	brne	.-18     	; 0x41a <ScanKeypad+0x28>
     42c:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	end
	else butnum=0;
	
	return butnum;
}
     42e:	08 95       	ret

00000430 <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     430:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ScanKeypad>
     434:	98 2f       	mov	r25, r24
	switch(keyState){
     436:	20 91 af 02 	lds	r18, 0x02AF
     43a:	21 30       	cpi	r18, 0x01	; 1
     43c:	89 f0       	breq	.+34     	; 0x460 <Debounce+0x30>
     43e:	21 30       	cpi	r18, 0x01	; 1
     440:	20 f0       	brcs	.+8      	; 0x44a <Debounce+0x1a>
     442:	22 30       	cpi	r18, 0x02	; 2
     444:	09 f0       	breq	.+2      	; 0x448 <Debounce+0x18>
     446:	51 c0       	rjmp	.+162    	; 0x4ea <Debounce+0xba>
     448:	2f c0       	rjmp	.+94     	; 0x4a8 <Debounce+0x78>
	
	//in the RELEASED state: stay in this state if a key is not pressed
	//go to UNKNOWN if any key is pressed and reset the debounce countdown.
	case RELEASED:
		if (key){
     44a:	88 23       	and	r24, r24
     44c:	09 f4       	brne	.+2      	; 0x450 <Debounce+0x20>
     44e:	4d c0       	rjmp	.+154    	; 0x4ea <Debounce+0xba>
			keyState = UNKNOWN;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 af 02 	sts	0x02AF, r24
			prevKeyState = RELEASED;
     456:	10 92 bc 02 	sts	0x02BC, r1
			debouncing = 1;
     45a:	80 93 e3 02 	sts	0x02E3, r24
     45e:	0e c0       	rjmp	.+28     	; 0x47c <Debounce+0x4c>

	//in the UNKNOWN state: go to released if the button is not down Update
	//pressedAndReleased if the button was previously pressed.
	//go to PUSHED if the button is down
	case UNKNOWN:
		if (key){
     460:	88 23       	and	r24, r24
     462:	91 f0       	breq	.+36     	; 0x488 <Debounce+0x58>
			if (key == checkKey){
     464:	80 91 e6 02 	lds	r24, 0x02E6
     468:	98 17       	cp	r25, r24
     46a:	31 f4       	brne	.+12     	; 0x478 <Debounce+0x48>
				keyState = PUSHED;
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	80 93 af 02 	sts	0x02AF, r24
				prevKeyState = UNKNOWN;
     472:	20 93 bc 02 	sts	0x02BC, r18
     476:	15 c0       	rjmp	.+42     	; 0x4a2 <Debounce+0x72>
				debouncing = 0;
			}
			else {
				debouncing = 1;
     478:	20 93 e3 02 	sts	0x02E3, r18
				debounceTime = DEBOUNCE_TIME;
     47c:	8e e1       	ldi	r24, 0x1E	; 30
     47e:	80 93 e2 02 	sts	0x02E2, r24
				checkKey = key;
     482:	90 93 e6 02 	sts	0x02E6, r25
     486:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     488:	10 92 af 02 	sts	0x02AF, r1
			if (prevKeyState == PUSHED) {
     48c:	80 91 bc 02 	lds	r24, 0x02BC
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	21 f4       	brne	.+8      	; 0x49c <Debounce+0x6c>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     494:	80 91 e6 02 	lds	r24, 0x02E6
     498:	80 93 e1 02 	sts	0x02E1, r24
			}
			prevKeyState = UNKNOWN;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 bc 02 	sts	0x02BC, r24
			debouncing = 0;
     4a2:	10 92 e3 02 	sts	0x02E3, r1
     4a6:	08 95       	ret
		break;

	//in the PUSHED state go to UnKnown if the button is not down.
	//stay in PUSHED if the button is down
	case PUSHED:
		if (!key){
     4a8:	88 23       	and	r24, r24
     4aa:	59 f4       	brne	.+22     	; 0x4c2 <Debounce+0x92>
			keyState = UNKNOWN;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 af 02 	sts	0x02AF, r24
			prevKeyState = PUSHED;
     4b2:	20 93 bc 02 	sts	0x02BC, r18
			debouncing = 1;
     4b6:	80 93 e3 02 	sts	0x02E3, r24
			debounceTime = DEBOUNCE_TIME;
     4ba:	8e e1       	ldi	r24, 0x1E	; 30
     4bc:	80 93 e2 02 	sts	0x02E2, r24
     4c0:	08 95       	ret
		}
		else if (key != checkKey){
     4c2:	80 91 e6 02 	lds	r24, 0x02E6
     4c6:	98 17       	cp	r25, r24
     4c8:	81 f0       	breq	.+32     	; 0x4ea <Debounce+0xba>
			keyState = UNKNOWN;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 af 02 	sts	0x02AF, r24
			prevKeyState = RELEASED; //...???
     4d0:	10 92 bc 02 	sts	0x02BC, r1
			debouncing = 1;
     4d4:	80 93 e3 02 	sts	0x02E3, r24
			debounceTime = DEBOUNCE_TIME;
     4d8:	8e e1       	ldi	r24, 0x1E	; 30
     4da:	80 93 e2 02 	sts	0x02E2, r24
			curKey = checkKey;
     4de:	80 91 e6 02 	lds	r24, 0x02E6
     4e2:	80 93 e1 02 	sts	0x02E1, r24
			checkKey = key;
     4e6:	90 93 e6 02 	sts	0x02E6, r25
     4ea:	08 95       	ret

000004ec <getCurKey>:

	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     4ec:	90 91 e1 02 	lds	r25, 0x02E1
	if (curKey){
     4f0:	80 91 e1 02 	lds	r24, 0x02E1
     4f4:	88 23       	and	r24, r24
     4f6:	11 f0       	breq	.+4      	; 0x4fc <getCurKey+0x10>
		curKey = 0;
     4f8:	10 92 e1 02 	sts	0x02E1, r1
	}
	return tmpKey;
}
     4fc:	89 2f       	mov	r24, r25
     4fe:	08 95       	ret

00000500 <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     500:	90 91 ea 02 	lds	r25, 0x02EA
     504:	93 30       	cpi	r25, 0x03	; 3
     506:	c1 f1       	breq	.+112    	; 0x578 <UpdateManState+0x78>
     508:	94 30       	cpi	r25, 0x04	; 4
     50a:	28 f4       	brcc	.+10     	; 0x516 <UpdateManState+0x16>
     50c:	91 30       	cpi	r25, 0x01	; 1
     50e:	99 f0       	breq	.+38     	; 0x536 <UpdateManState+0x36>
     510:	92 30       	cpi	r25, 0x02	; 2
     512:	30 f5       	brcc	.+76     	; 0x560 <UpdateManState+0x60>
     514:	0c c0       	rjmp	.+24     	; 0x52e <UpdateManState+0x2e>
     516:	95 30       	cpi	r25, 0x05	; 5
     518:	09 f4       	brne	.+2      	; 0x51c <UpdateManState+0x1c>
     51a:	40 c0       	rjmp	.+128    	; 0x59c <UpdateManState+0x9c>
     51c:	95 30       	cpi	r25, 0x05	; 5
     51e:	a8 f1       	brcs	.+106    	; 0x58a <UpdateManState+0x8a>
     520:	96 30       	cpi	r25, 0x06	; 6
     522:	09 f4       	brne	.+2      	; 0x526 <UpdateManState+0x26>
     524:	44 c0       	rjmp	.+136    	; 0x5ae <UpdateManState+0xae>
     526:	97 30       	cpi	r25, 0x07	; 7
     528:	09 f0       	breq	.+2      	; 0x52c <UpdateManState+0x2c>
     52a:	68 c0       	rjmp	.+208    	; 0x5fc <UpdateManState+0xfc>
     52c:	4a c0       	rjmp	.+148    	; 0x5c2 <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     52e:	88 23       	and	r24, r24
     530:	09 f4       	brne	.+2      	; 0x534 <UpdateManState+0x34>
     532:	64 c0       	rjmp	.+200    	; 0x5fc <UpdateManState+0xfc>
     534:	19 c0       	rjmp	.+50     	; 0x568 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
		case NAVIGATION_1:
			if (key == 0x10){
     536:	80 31       	cpi	r24, 0x10	; 16
     538:	29 f4       	brne	.+10     	; 0x544 <UpdateManState+0x44>
				mode = returnMode;
     53a:	80 91 e7 02 	lds	r24, 0x02E7
     53e:	80 93 b9 02 	sts	0x02B9, r24
     542:	02 c0       	rjmp	.+4      	; 0x548 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     544:	8e 30       	cpi	r24, 0x0E	; 14
     546:	19 f4       	brne	.+6      	; 0x54e <UpdateManState+0x4e>
				manPage = WELCOME;
     548:	10 92 ea 02 	sts	0x02EA, r1
     54c:	06 c0       	rjmp	.+12     	; 0x55a <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     54e:	8f 30       	cpi	r24, 0x0F	; 15
     550:	09 f0       	breq	.+2      	; 0x554 <UpdateManState+0x54>
     552:	54 c0       	rjmp	.+168    	; 0x5fc <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	80 93 ea 02 	sts	0x02EA, r24
				justSwitched = 1;
     55a:	90 93 eb 02 	sts	0x02EB, r25
     55e:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     560:	80 31       	cpi	r24, 0x10	; 16
     562:	89 f1       	breq	.+98     	; 0x5c6 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     564:	8e 30       	cpi	r24, 0x0E	; 14
     566:	21 f4       	brne	.+8      	; 0x570 <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 ea 02 	sts	0x02EA, r24
     56e:	38 c0       	rjmp	.+112    	; 0x5e0 <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     570:	8f 30       	cpi	r24, 0x0F	; 15
     572:	09 f0       	breq	.+2      	; 0x576 <UpdateManState+0x76>
     574:	43 c0       	rjmp	.+134    	; 0x5fc <UpdateManState+0xfc>
     576:	0d c0       	rjmp	.+26     	; 0x592 <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     578:	80 31       	cpi	r24, 0x10	; 16
     57a:	29 f1       	breq	.+74     	; 0x5c6 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     57c:	8e 30       	cpi	r24, 0x0E	; 14
     57e:	11 f4       	brne	.+4      	; 0x584 <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	2b c0       	rjmp	.+86     	; 0x5da <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     584:	8f 30       	cpi	r24, 0x0F	; 15
     586:	d1 f5       	brne	.+116    	; 0x5fc <UpdateManState+0xfc>
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     58a:	80 31       	cpi	r24, 0x10	; 16
     58c:	e1 f0       	breq	.+56     	; 0x5c6 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     58e:	8e 30       	cpi	r24, 0x0E	; 14
     590:	11 f4       	brne	.+4      	; 0x596 <UpdateManState+0x96>
				manPage = VOLT_MAN;
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	22 c0       	rjmp	.+68     	; 0x5da <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     596:	8f 30       	cpi	r24, 0x0F	; 15
     598:	89 f5       	brne	.+98     	; 0x5fc <UpdateManState+0xfc>
     59a:	0d c0       	rjmp	.+26     	; 0x5b6 <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     59c:	80 31       	cpi	r24, 0x10	; 16
     59e:	99 f0       	breq	.+38     	; 0x5c6 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     5a0:	8e 30       	cpi	r24, 0x0E	; 14
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	19 c0       	rjmp	.+50     	; 0x5da <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     5a8:	8f 30       	cpi	r24, 0x0F	; 15
     5aa:	41 f5       	brne	.+80     	; 0x5fc <UpdateManState+0xfc>
     5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     5ae:	80 31       	cpi	r24, 0x10	; 16
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     5b2:	8e 30       	cpi	r24, 0x0E	; 14
     5b4:	11 f4       	brne	.+4      	; 0x5ba <UpdateManState+0xba>
				manPage = FREQ_MAN;
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	10 c0       	rjmp	.+32     	; 0x5da <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     5ba:	8f 30       	cpi	r24, 0x0F	; 15
     5bc:	f9 f4       	brne	.+62     	; 0x5fc <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	0c c0       	rjmp	.+24     	; 0x5da <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     5c2:	80 31       	cpi	r24, 0x10	; 16
     5c4:	39 f4       	brne	.+14     	; 0x5d4 <UpdateManState+0xd4>
				mode = returnMode;
     5c6:	80 91 e7 02 	lds	r24, 0x02E7
     5ca:	80 93 b9 02 	sts	0x02B9, r24
				manPage = WELCOME;
     5ce:	10 92 ea 02 	sts	0x02EA, r1
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     5d4:	8e 30       	cpi	r24, 0x0E	; 14
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	80 93 ea 02 	sts	0x02EA, r24
				justSwitched = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 eb 02 	sts	0x02EB, r24
     5e4:	08 95       	ret
			}
			else if (key == 0x0F){
     5e6:	8f 30       	cpi	r24, 0x0F	; 15
     5e8:	49 f4       	brne	.+18     	; 0x5fc <UpdateManState+0xfc>
				mode = returnMode;
     5ea:	80 91 e7 02 	lds	r24, 0x02E7
     5ee:	80 93 b9 02 	sts	0x02B9, r24
				manPage = WELCOME;
     5f2:	10 92 ea 02 	sts	0x02EA, r1
				justSwitched = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 eb 02 	sts	0x02EB, r24
     5fc:	08 95       	ret

000005fe <UpdateDMMState>:

	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     5fe:	20 91 e1 02 	lds	r18, 0x02E1
	if (curKey){
     602:	80 91 e1 02 	lds	r24, 0x02E1
     606:	88 23       	and	r24, r24
     608:	11 f0       	breq	.+4      	; 0x60e <UpdateDMMState+0x10>
		curKey = 0;
     60a:	10 92 e1 02 	sts	0x02E1, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     60e:	22 23       	and	r18, r18
     610:	09 f4       	brne	.+2      	; 0x614 <UpdateDMMState+0x16>
     612:	a6 c0       	rjmp	.+332    	; 0x760 <UpdateDMMState+0x162>
     614:	80 91 eb 02 	lds	r24, 0x02EB
     618:	88 23       	and	r24, r24
     61a:	09 f0       	breq	.+2      	; 0x61e <UpdateDMMState+0x20>
     61c:	a1 c0       	rjmp	.+322    	; 0x760 <UpdateDMMState+0x162>
		switch (mode){
     61e:	90 91 b9 02 	lds	r25, 0x02B9
     622:	92 30       	cpi	r25, 0x02	; 2
     624:	f1 f0       	breq	.+60     	; 0x662 <UpdateDMMState+0x64>
     626:	93 30       	cpi	r25, 0x03	; 3
     628:	30 f4       	brcc	.+12     	; 0x636 <UpdateDMMState+0x38>
     62a:	99 23       	and	r25, r25
     62c:	51 f0       	breq	.+20     	; 0x642 <UpdateDMMState+0x44>
     62e:	91 30       	cpi	r25, 0x01	; 1
     630:	09 f0       	breq	.+2      	; 0x634 <UpdateDMMState+0x36>
     632:	96 c0       	rjmp	.+300    	; 0x760 <UpdateDMMState+0x162>
     634:	12 c0       	rjmp	.+36     	; 0x65a <UpdateDMMState+0x5c>
     636:	93 30       	cpi	r25, 0x03	; 3
     638:	51 f1       	breq	.+84     	; 0x68e <UpdateDMMState+0x90>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	09 f0       	breq	.+2      	; 0x640 <UpdateDMMState+0x42>
     63e:	90 c0       	rjmp	.+288    	; 0x760 <UpdateDMMState+0x162>
     640:	50 c0       	rjmp	.+160    	; 0x6e2 <UpdateDMMState+0xe4>
			case INIT:
				if (key == 0x0F){
     642:	2f 30       	cpi	r18, 0x0F	; 15
     644:	21 f4       	brne	.+8      	; 0x64e <UpdateDMMState+0x50>
					returnMode = VOLTMETER;
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	80 93 e7 02 	sts	0x02E7, r24
     64c:	24 c0       	rjmp	.+72     	; 0x696 <UpdateDMMState+0x98>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					if (key == 0x0A){
     64e:	2a 30       	cpi	r18, 0x0A	; 10
     650:	c1 f4       	brne	.+48     	; 0x682 <UpdateDMMState+0x84>
						mode = VOLTMETER;
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	80 93 b9 02 	sts	0x02B9, r24
     658:	6d c0       	rjmp	.+218    	; 0x734 <UpdateDMMState+0x136>
					}
				}
				break; 

			case MAN:
				UpdateManState(key);
     65a:	82 2f       	mov	r24, r18
     65c:	0e 94 80 02 	call	0x500	; 0x500 <UpdateManState>
     660:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     662:	2f 30       	cpi	r18, 0x0F	; 15
     664:	31 f4       	brne	.+12     	; 0x672 <UpdateDMMState+0x74>
					mode = MAN;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	80 93 b9 02 	sts	0x02B9, r24
					returnMode = VOLTMETER;
     66c:	90 93 e7 02 	sts	0x02E7, r25
     670:	62 c0       	rjmp	.+196    	; 0x736 <UpdateDMMState+0x138>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     672:	2d 30       	cpi	r18, 0x0D	; 13
     674:	d1 f1       	breq	.+116    	; 0x6ea <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     676:	80 91 ab 02 	lds	r24, 0x02AB
     67a:	88 23       	and	r24, r24
     67c:	11 f4       	brne	.+4      	; 0x682 <UpdateDMMState+0x84>
     67e:	21 30       	cpi	r18, 0x01	; 1
     680:	b1 f0       	breq	.+44     	; 0x6ae <UpdateDMMState+0xb0>
					rangeIdx++;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
     682:	2b 30       	cpi	r18, 0x0B	; 11
     684:	31 f5       	brne	.+76     	; 0x6d2 <UpdateDMMState+0xd4>
					mode = OHMMETER;
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	80 93 b9 02 	sts	0x02B9, r24
     68c:	49 c0       	rjmp	.+146    	; 0x720 <UpdateDMMState+0x122>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     68e:	2f 30       	cpi	r18, 0x0F	; 15
     690:	31 f4       	brne	.+12     	; 0x69e <UpdateDMMState+0xa0>
					returnMode = OHMMETER;
     692:	90 93 e7 02 	sts	0x02E7, r25
					mode = MAN;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 b9 02 	sts	0x02B9, r24
     69c:	4c c0       	rjmp	.+152    	; 0x736 <UpdateDMMState+0x138>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     69e:	2d 30       	cpi	r18, 0x0D	; 13
     6a0:	21 f1       	breq	.+72     	; 0x6ea <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     6a2:	80 91 ab 02 	lds	r24, 0x02AB
     6a6:	88 23       	and	r24, r24
     6a8:	91 f4       	brne	.+36     	; 0x6ce <UpdateDMMState+0xd0>
     6aa:	21 30       	cpi	r18, 0x01	; 1
     6ac:	81 f4       	brne	.+32     	; 0x6ce <UpdateDMMState+0xd0>
					rangeIdx++;
     6ae:	80 91 e8 02 	lds	r24, 0x02E8
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	80 93 e8 02 	sts	0x02E8, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6b8:	80 91 e8 02 	lds	r24, 0x02E8
     6bc:	60 91 a6 02 	lds	r22, 0x02A6
     6c0:	0e 94 c5 10 	call	0x218a	; 0x218a <__udivmodqi4>
     6c4:	90 93 e8 02 	sts	0x02E8, r25
					justSwitched = 1;
     6c8:	20 93 eb 02 	sts	0x02EB, r18
     6cc:	08 95       	ret
				}
				else if (key == 0x0A){
     6ce:	2a 30       	cpi	r18, 0x0A	; 10
     6d0:	19 f1       	breq	.+70     	; 0x718 <UpdateDMMState+0x11a>
					mode = VOLTMETER;
					rangeIdxMod = 3;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0C){
     6d2:	2c 30       	cpi	r18, 0x0C	; 12
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <UpdateDMMState+0xda>
     6d6:	44 c0       	rjmp	.+136    	; 0x760 <UpdateDMMState+0x162>
					mode = FREQMETER;
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	80 93 b9 02 	sts	0x02B9, r24
					rangeIdxMod = 2;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	1f c0       	rjmp	.+62     	; 0x720 <UpdateDMMState+0x122>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     6e2:	2f 30       	cpi	r18, 0x0F	; 15
     6e4:	b1 f2       	breq	.-84     	; 0x692 <UpdateDMMState+0x94>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     6e6:	2d 30       	cpi	r18, 0x0D	; 13
     6e8:	49 f4       	brne	.+18     	; 0x6fc <UpdateDMMState+0xfe>
					autoRange ^= 1;
     6ea:	80 91 ab 02 	lds	r24, 0x02AB
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	89 27       	eor	r24, r25
     6f2:	80 93 ab 02 	sts	0x02AB, r24
					justSwitched = 1;
     6f6:	90 93 eb 02 	sts	0x02EB, r25
     6fa:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
     6fc:	80 91 ab 02 	lds	r24, 0x02AB
     700:	88 23       	and	r24, r24
     702:	41 f4       	brne	.+16     	; 0x714 <UpdateDMMState+0x116>
     704:	21 30       	cpi	r18, 0x01	; 1
     706:	31 f4       	brne	.+12     	; 0x714 <UpdateDMMState+0x116>
					rangeIdx++;
     708:	80 91 e8 02 	lds	r24, 0x02E8
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	80 93 e8 02 	sts	0x02E8, r24
     712:	08 c0       	rjmp	.+16     	; 0x724 <UpdateDMMState+0x126>
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0A){
     714:	2a 30       	cpi	r18, 0x0A	; 10
     716:	91 f4       	brne	.+36     	; 0x73c <UpdateDMMState+0x13e>
					mode = VOLTMETER;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	80 93 b9 02 	sts	0x02B9, r24
					rangeIdxMod = 3;
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	80 93 a6 02 	sts	0x02A6, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     724:	80 91 e8 02 	lds	r24, 0x02E8
     728:	60 91 a6 02 	lds	r22, 0x02A6
     72c:	0e 94 c5 10 	call	0x218a	; 0x218a <__udivmodqi4>
     730:	90 93 e8 02 	sts	0x02E8, r25
					justSwitched = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 eb 02 	sts	0x02EB, r24
     73a:	08 95       	ret
				}
				else if (key == 0x0B){
     73c:	2b 30       	cpi	r18, 0x0B	; 11
     73e:	81 f4       	brne	.+32     	; 0x760 <UpdateDMMState+0x162>
					mode = OHMMETER;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	80 93 b9 02 	sts	0x02B9, r24
					rangeIdxMod = 3;
     746:	80 93 a6 02 	sts	0x02A6, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     74a:	80 91 e8 02 	lds	r24, 0x02E8
     74e:	60 91 a6 02 	lds	r22, 0x02A6
     752:	0e 94 c5 10 	call	0x218a	; 0x218a <__udivmodqi4>
     756:	90 93 e8 02 	sts	0x02E8, r25
					justSwitched = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 eb 02 	sts	0x02EB, r24
     760:	08 95       	ret

00000762 <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	elapsedTime++;
     784:	80 91 a7 02 	lds	r24, 0x02A7
     788:	90 91 a8 02 	lds	r25, 0x02A8
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	90 93 a8 02 	sts	0x02A8, r25
     792:	80 93 a7 02 	sts	0x02A7, r24
	//Check to see if we are currently debouncing a signal
	//if the signal isn't being debounced, checK if the button has been pressed
	//if we are waiting for it to be pressed or checK if it is not pressed if we are waiting for
	//the release event

	if (!debouncing){
     796:	80 91 e3 02 	lds	r24, 0x02E3
     79a:	88 23       	and	r24, r24
     79c:	69 f0       	breq	.+26     	; 0x7b8 <__vector_16+0x56>
		Debounce();
		UpdateDMMState();
	}
	else if (debouncing && !--debounceTime){
     79e:	80 91 e3 02 	lds	r24, 0x02E3
     7a2:	88 23       	and	r24, r24
     7a4:	69 f0       	breq	.+26     	; 0x7c0 <__vector_16+0x5e>
     7a6:	80 91 e2 02 	lds	r24, 0x02E2
     7aa:	81 50       	subi	r24, 0x01	; 1
     7ac:	80 93 e2 02 	sts	0x02E2, r24
     7b0:	80 91 e2 02 	lds	r24, 0x02E2
     7b4:	88 23       	and	r24, r24
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <__vector_16+0x5e>
		Debounce();
     7b8:	0e 94 18 02 	call	0x430	; 0x430 <Debounce>
		UpdateDMMState();
     7bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <UpdateDMMState>
	}
	if(mode != INIT && mode != MAN) {
     7c0:	80 91 b9 02 	lds	r24, 0x02B9
     7c4:	88 23       	and	r24, r24
     7c6:	29 f1       	breq	.+74     	; 0x812 <__vector_16+0xb0>
     7c8:	80 91 b9 02 	lds	r24, 0x02B9
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	09 f1       	breq	.+66     	; 0x812 <__vector_16+0xb0>
		if(elapsedTime % 200 == 0) {
     7d0:	80 91 a7 02 	lds	r24, 0x02A7
     7d4:	90 91 a8 02 	lds	r25, 0x02A8
     7d8:	68 ec       	ldi	r22, 0xC8	; 200
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__udivmodhi4>
     7e0:	89 2b       	or	r24, r25
     7e2:	19 f4       	brne	.+6      	; 0x7ea <__vector_16+0x88>
			triggerPoll = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 b4 02 	sts	0x02B4, r24
		}
		if(elapsedTime % 200 == 190 && mode != FREQMETER) {
     7ea:	80 91 a7 02 	lds	r24, 0x02A7
     7ee:	90 91 a8 02 	lds	r25, 0x02A8
     7f2:	68 ec       	ldi	r22, 0xC8	; 200
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__udivmodhi4>
     7fa:	8e 3b       	cpi	r24, 0xBE	; 190
     7fc:	91 05       	cpc	r25, r1
     7fe:	49 f4       	brne	.+18     	; 0x812 <__vector_16+0xb0>
     800:	80 91 b9 02 	lds	r24, 0x02B9
     804:	84 30       	cpi	r24, 0x04	; 4
     806:	29 f0       	breq	.+10     	; 0x812 <__vector_16+0xb0>
			//start another conversion
			ADCSRA |= (1<<ADSC);
     808:	80 91 7a 00 	lds	r24, 0x007A
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 93 7a 00 	sts	0x007A, r24
		}
	}
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <setVref>:
	//CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void setVref(uint8_t idx) {
     834:	e8 2f       	mov	r30, r24
	switch(idx) {
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	39 f0       	breq	.+14     	; 0x848 <setVref+0x14>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	18 f0       	brcs	.+6      	; 0x844 <setVref+0x10>
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	41 f4       	brne	.+16     	; 0x852 <setVref+0x1e>
     842:	04 c0       	rjmp	.+8      	; 0x84c <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     844:	80 e6       	ldi	r24, 0x60	; 96
     846:	03 c0       	rjmp	.+6      	; 0x84e <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     848:	80 ee       	ldi	r24, 0xE0	; 224
     84a:	01 c0       	rjmp	.+2      	; 0x84e <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     84c:	80 ea       	ldi	r24, 0xA0	; 160
     84e:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ed 5e       	subi	r30, 0xED	; 237
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	a2 81       	ldd	r26, Z+2	; 0x02
     866:	b3 81       	ldd	r27, Z+3	; 0x03
     868:	80 93 cd 02 	sts	0x02CD, r24
     86c:	90 93 ce 02 	sts	0x02CE, r25
     870:	a0 93 cf 02 	sts	0x02CF, r26
     874:	b0 93 d0 02 	sts	0x02D0, r27
}
     878:	08 95       	ret

0000087a <setOref>:

void setOref(uint8_t idx) {
     87a:	e8 2f       	mov	r30, r24
	// Don't use Oref
	if(idx < 0 || idx > 2) {
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	10 f0       	brcs	.+4      	; 0x884 <setOref+0xa>
		DDRA = 0x00;
     880:	11 b8       	out	0x01, r1	; 1
     882:	08 95       	ret
		return;
	}
	switch(idx) {
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	39 f0       	breq	.+14     	; 0x896 <setOref+0x1c>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	18 f0       	brcs	.+6      	; 0x892 <setOref+0x18>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	39 f4       	brne	.+14     	; 0x89e <setOref+0x24>
     890:	04 c0       	rjmp	.+8      	; 0x89a <setOref+0x20>
		case 0:
			DDRA = (1 << 7); //100k resistor output
     892:	80 e8       	ldi	r24, 0x80	; 128
     894:	03 c0       	rjmp	.+6      	; 0x89c <setOref+0x22>
			break;
		case 1:
			DDRA = (1 << 6); //10k resistor output
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	01 c0       	rjmp	.+2      	; 0x89c <setOref+0x22>
			break;
		case 2:
			DDRA = (1 << 5); //1k resistor output
     89a:	80 e2       	ldi	r24, 0x20	; 32
     89c:	81 b9       	out	0x01, r24	; 1
			break;
	}
	ohmRef = resistorRanges[idx];
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	e1 5e       	subi	r30, 0xE1	; 225
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	80 81       	ld	r24, Z
     8a6:	80 93 ac 02 	sts	0x02AC, r24
	PORTA = DDRA;
     8aa:	81 b1       	in	r24, 0x01	; 1
     8ac:	82 b9       	out	0x02, r24	; 2
     8ae:	08 95       	ret

000008b0 <Autorange>:
}

// Set rangeIdx if autoRange
void Autorange(void){
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
	if(autoRange) {
     8b8:	80 91 ab 02 	lds	r24, 0x02AB
     8bc:	88 23       	and	r24, r24
     8be:	09 f4       	brne	.+2      	; 0x8c2 <Autorange+0x12>
     8c0:	ae c0       	rjmp	.+348    	; 0xa1e <Autorange+0x16e>
		switch (mode){
     8c2:	80 91 b9 02 	lds	r24, 0x02B9
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <Autorange+0x22>
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <Autorange+0x20>
     8ce:	a7 c0       	rjmp	.+334    	; 0xa1e <Autorange+0x16e>
     8d0:	55 c0       	rjmp	.+170    	; 0x97c <Autorange+0xcc>
			case VOLTMETER:
				switch (rangeIdx){
     8d2:	80 91 e8 02 	lds	r24, 0x02E8
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	b9 f0       	breq	.+46     	; 0x908 <Autorange+0x58>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	20 f0       	brcs	.+8      	; 0x8e6 <Autorange+0x36>
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <Autorange+0x34>
     8e2:	44 c0       	rjmp	.+136    	; 0x96c <Autorange+0xbc>
     8e4:	2e c0       	rjmp	.+92     	; 0x942 <Autorange+0x92>
					//In the 5 Volt range, move to a smaller scale if the voltage is less than 0.525 of Vref
					case 0:
						if (voltage <= 2.0){
     8e6:	60 91 b0 02 	lds	r22, 0x02B0
     8ea:	70 91 b1 02 	lds	r23, 0x02B1
     8ee:	80 91 b2 02 	lds	r24, 0x02B2
     8f2:	90 91 b3 02 	lds	r25, 0x02B3
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e4       	ldi	r21, 0x40	; 64
     8fe:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__lesf2>
     902:	18 16       	cp	r1, r24
     904:	9c f4       	brge	.+38     	; 0x92c <Autorange+0x7c>
     906:	32 c0       	rjmp	.+100    	; 0x96c <Autorange+0xbc>
						}
						break;
					//In the 2.56 Volt range, move to a smaller scale if the voltage is less than 0.4 of Vref
					//or move to a larger scale if the voltage is close to Vref
					case 1:
						if (voltage < 0.9){
     908:	e0 90 b0 02 	lds	r14, 0x02B0
     90c:	f0 90 b1 02 	lds	r15, 0x02B1
     910:	00 91 b2 02 	lds	r16, 0x02B2
     914:	10 91 b3 02 	lds	r17, 0x02B3
     918:	c8 01       	movw	r24, r16
     91a:	b7 01       	movw	r22, r14
     91c:	26 e6       	ldi	r18, 0x66	; 102
     91e:	36 e6       	ldi	r19, 0x66	; 102
     920:	46 e6       	ldi	r20, 0x66	; 102
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__ltsf2>
     928:	88 23       	and	r24, r24
     92a:	24 f4       	brge	.+8      	; 0x934 <Autorange+0x84>
							rangeIdx++;
     92c:	80 91 e8 02 	lds	r24, 0x02E8
     930:	8f 5f       	subi	r24, 0xFF	; 255
     932:	1a c0       	rjmp	.+52     	; 0x968 <Autorange+0xb8>
						}
						else if (voltage > 2.0){
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	50 e4       	ldi	r21, 0x40	; 64
     940:	0c c0       	rjmp	.+24     	; 0x95a <Autorange+0xaa>
							rangeIdx--;
						}
						break;
					//In the 1.1 Volt range, move to a larger scale if the voltage is close to Vref
					case 2:
						if (voltage > 0.9){
     942:	60 91 b0 02 	lds	r22, 0x02B0
     946:	70 91 b1 02 	lds	r23, 0x02B1
     94a:	80 91 b2 02 	lds	r24, 0x02B2
     94e:	90 91 b3 02 	lds	r25, 0x02B3
     952:	26 e6       	ldi	r18, 0x66	; 102
     954:	36 e6       	ldi	r19, 0x66	; 102
     956:	46 e6       	ldi	r20, 0x66	; 102
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__gtsf2>
     95e:	18 16       	cp	r1, r24
     960:	2c f4       	brge	.+10     	; 0x96c <Autorange+0xbc>
							rangeIdx--;
     962:	80 91 e8 02 	lds	r24, 0x02E8
     966:	81 50       	subi	r24, 0x01	; 1
     968:	80 93 e8 02 	sts	0x02E8, r24
						}
						break;
				}
				setOref(3); // disable ohmref
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>
				setVref(rangeIdx);
     972:	80 91 e8 02 	lds	r24, 0x02E8
     976:	0e 94 1a 04 	call	0x834	; 0x834 <setVref>
     97a:	51 c0       	rjmp	.+162    	; 0xa1e <Autorange+0x16e>
				break;

			case OHMMETER:
				switch (rangeIdx){
     97c:	80 91 e8 02 	lds	r24, 0x02E8
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	b9 f0       	breq	.+46     	; 0x9b2 <Autorange+0x102>
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	20 f0       	brcs	.+8      	; 0x990 <Autorange+0xe0>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	09 f0       	breq	.+2      	; 0x98e <Autorange+0xde>
     98c:	44 c0       	rjmp	.+136    	; 0xa16 <Autorange+0x166>
     98e:	2e c0       	rjmp	.+92     	; 0x9ec <Autorange+0x13c>
					//In the 100kOhm range, move to a smaller scale if the resistance is less than 0.4 of Vcc 
					//(R_test is less than 10% of R) 
					case 0:
						if (ohm <= 10.5){
     990:	60 91 b5 02 	lds	r22, 0x02B5
     994:	70 91 b6 02 	lds	r23, 0x02B6
     998:	80 91 b7 02 	lds	r24, 0x02B7
     99c:	90 91 b8 02 	lds	r25, 0x02B8
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	48 e2       	ldi	r20, 0x28	; 40
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__lesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	9c f1       	brlt	.+102    	; 0xa16 <Autorange+0x166>
     9b0:	12 c0       	rjmp	.+36     	; 0x9d6 <Autorange+0x126>
				
					//In the 10kOhm range, move to a smaller scale if the reading is less than 0.4 of Vcc
					//(R_test is less than 10% of R). Move to a larger sclae if the reading is almost Vcc
					//(R_test is almost 95% of R).
					case 1:
						if (ohm <= 3.3){
     9b2:	e0 90 b5 02 	lds	r14, 0x02B5
     9b6:	f0 90 b6 02 	lds	r15, 0x02B6
     9ba:	00 91 b7 02 	lds	r16, 0x02B7
     9be:	10 91 b8 02 	lds	r17, 0x02B8
     9c2:	c8 01       	movw	r24, r16
     9c4:	b7 01       	movw	r22, r14
     9c6:	23 e3       	ldi	r18, 0x33	; 51
     9c8:	33 e3       	ldi	r19, 0x33	; 51
     9ca:	43 e5       	ldi	r20, 0x53	; 83
     9cc:	50 e4       	ldi	r21, 0x40	; 64
     9ce:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__lesf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	24 f0       	brlt	.+8      	; 0x9de <Autorange+0x12e>
							rangeIdx++;
     9d6:	80 91 e8 02 	lds	r24, 0x02E8
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	1a c0       	rjmp	.+52     	; 0xa12 <Autorange+0x162>
						}
						else if (ohm > 10.5){
     9de:	c8 01       	movw	r24, r16
     9e0:	b7 01       	movw	r22, r14
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	48 e2       	ldi	r20, 0x28	; 40
     9e8:	51 e4       	ldi	r21, 0x41	; 65
     9ea:	0c c0       	rjmp	.+24     	; 0xa04 <Autorange+0x154>
						break;
	
					//In the 10kOhm range, move to a larger scale if the reading is almost Vcc 
					//(R_test is almost 95% of R).
					case 2:
						if (ohm > 3.3){
     9ec:	60 91 b5 02 	lds	r22, 0x02B5
     9f0:	70 91 b6 02 	lds	r23, 0x02B6
     9f4:	80 91 b7 02 	lds	r24, 0x02B7
     9f8:	90 91 b8 02 	lds	r25, 0x02B8
     9fc:	23 e3       	ldi	r18, 0x33	; 51
     9fe:	33 e3       	ldi	r19, 0x33	; 51
     a00:	43 e5       	ldi	r20, 0x53	; 83
     a02:	50 e4       	ldi	r21, 0x40	; 64
     a04:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__gtsf2>
     a08:	18 16       	cp	r1, r24
     a0a:	2c f4       	brge	.+10     	; 0xa16 <Autorange+0x166>
							rangeIdx--;
     a0c:	80 91 e8 02 	lds	r24, 0x02E8
     a10:	81 50       	subi	r24, 0x01	; 1
     a12:	80 93 e8 02 	sts	0x02E8, r24
						}
					break;
				}
				setOref(rangeIdx);
     a16:	80 91 e8 02 	lds	r24, 0x02E8
     a1a:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>
				break;
		}
	}
}
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	08 95       	ret

00000a28 <pollFreq>:
	//CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void pollFreq(void) {
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
	frequency = 2000000 / (period);
     a30:	20 91 e4 02 	lds	r18, 0x02E4
     a34:	30 91 e5 02 	lds	r19, 0x02E5
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 e8       	ldi	r22, 0x80	; 128
     a3e:	74 e8       	ldi	r23, 0x84	; 132
     a40:	8e e1       	ldi	r24, 0x1E	; 30
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__divmodsi4>
     a48:	30 93 aa 02 	sts	0x02AA, r19
     a4c:	20 93 a9 02 	sts	0x02A9, r18
	dtostrf(frequency, 5, 0, v_string);
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	ca 01       	movw	r24, r20
     a56:	b9 01       	movw	r22, r18
     a58:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__floatunsisf>
     a5c:	21 ed       	ldi	r18, 0xD1	; 209
     a5e:	e2 2e       	mov	r14, r18
     a60:	22 e0       	ldi	r18, 0x02	; 2
     a62:	f2 2e       	mov	r15, r18
     a64:	45 e0       	ldi	r20, 0x05	; 5
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	87 01       	movw	r16, r14
     a6a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <dtostrf>
	sprintf(LCDBuffer, "%s Hz",v_string);
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <pollFreq+0x48>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <pollFreq+0x4a>
     a72:	00 d0       	rcall	.+0      	; 0xa74 <pollFreq+0x4c>
     a74:	ed b7       	in	r30, 0x3d	; 61
     a76:	fe b7       	in	r31, 0x3e	; 62
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	0d eb       	ldi	r16, 0xBD	; 189
     a7c:	12 e0       	ldi	r17, 0x02	; 2
     a7e:	ad b7       	in	r26, 0x3d	; 61
     a80:	be b7       	in	r27, 0x3e	; 62
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	1c 93       	st	X, r17
     a86:	0e 93       	st	-X, r16
     a88:	11 97       	sbiw	r26, 0x01	; 1
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	93 83       	std	Z+3, r25	; 0x03
     a90:	82 83       	std	Z+2, r24	; 0x02
     a92:	f5 82       	std	Z+5, r15	; 0x05
     a94:	e4 82       	std	Z+4, r14	; 0x04
     a96:	0e 94 b6 11 	call	0x236c	; 0x236c <sprintf>

	//CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
     a9a:	8d b7       	in	r24, 0x3d	; 61
     a9c:	9e b7       	in	r25, 0x3e	; 62
     a9e:	06 96       	adiw	r24, 0x06	; 6
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	9e bf       	out	0x3e, r25	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	8d bf       	out	0x3d, r24	; 61
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     ab2:	f8 01       	movw	r30, r16
     ab4:	01 90       	ld	r0, Z+
     ab6:	00 20       	and	r0, r0
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <pollFreq+0x8c>
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	e0 1b       	sub	r30, r16
     abe:	f1 0b       	sbc	r31, r17
     ac0:	c8 01       	movw	r24, r16
     ac2:	6e 2f       	mov	r22, r30
     ac4:	0e 94 fe 07 	call	0xffc	; 0xffc <LCDstring>
}
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <poll>:
			}
			break;
	}
}

void poll(void) {
     ad2:	6f 92       	push	r6
     ad4:	7f 92       	push	r7
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
	//get the sample
	Ain = ADCH;
     aea:	80 91 79 00 	lds	r24, 0x0079
     aee:	80 93 e9 02 	sts	0x02E9, r24
	voltage = (float)Ain;
     af2:	60 91 e9 02 	lds	r22, 0x02E9
	voltage = (voltage/256.0) * Vref;
     af6:	e0 90 cd 02 	lds	r14, 0x02CD
     afa:	f0 90 ce 02 	lds	r15, 0x02CE
     afe:	00 91 cf 02 	lds	r16, 0x02CF
     b02:	10 91 d0 02 	lds	r17, 0x02D0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__floatunsisf>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e8       	ldi	r20, 0x80	; 128
     b16:	5b e3       	ldi	r21, 0x3B	; 59
     b18:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     b1c:	a8 01       	movw	r20, r16
     b1e:	97 01       	movw	r18, r14
     b20:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     b24:	3b 01       	movw	r6, r22
     b26:	4c 01       	movw	r8, r24
     b28:	60 93 b0 02 	sts	0x02B0, r22
     b2c:	70 93 b1 02 	sts	0x02B1, r23
     b30:	80 93 b2 02 	sts	0x02B2, r24
     b34:	90 93 b3 02 	sts	0x02B3, r25
	ohm = (ohmRef * voltage)/(Vref - voltage);
     b38:	60 91 ac 02 	lds	r22, 0x02AC
     b3c:	a0 90 cd 02 	lds	r10, 0x02CD
     b40:	b0 90 ce 02 	lds	r11, 0x02CE
     b44:	c0 90 cf 02 	lds	r12, 0x02CF
     b48:	d0 90 d0 02 	lds	r13, 0x02D0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	88 27       	eor	r24, r24
     b50:	77 fd       	sbrc	r23, 7
     b52:	80 95       	com	r24
     b54:	98 2f       	mov	r25, r24
     b56:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__floatsisf>
     b5a:	a4 01       	movw	r20, r8
     b5c:	93 01       	movw	r18, r6
     b5e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__mulsf3>
     b62:	7b 01       	movw	r14, r22
     b64:	8c 01       	movw	r16, r24
     b66:	c6 01       	movw	r24, r12
     b68:	b5 01       	movw	r22, r10
     b6a:	a4 01       	movw	r20, r8
     b6c:	93 01       	movw	r18, r6
     b6e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__subsf3>
     b72:	9b 01       	movw	r18, r22
     b74:	ac 01       	movw	r20, r24
     b76:	c8 01       	movw	r24, r16
     b78:	b7 01       	movw	r22, r14
     b7a:	0e 94 bd 0c 	call	0x197a	; 0x197a <__divsf3>
     b7e:	5b 01       	movw	r10, r22
     b80:	6c 01       	movw	r12, r24
     b82:	cb 01       	movw	r24, r22
     b84:	d6 01       	movw	r26, r12
     b86:	80 93 b5 02 	sts	0x02B5, r24
     b8a:	90 93 b6 02 	sts	0x02B6, r25
     b8e:	a0 93 b7 02 	sts	0x02B7, r26
     b92:	b0 93 b8 02 	sts	0x02B8, r27
	switch(mode) {
     b96:	80 91 b9 02 	lds	r24, 0x02B9
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	21 f0       	breq	.+8      	; 0xba6 <poll+0xd4>
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	09 f0       	breq	.+2      	; 0xba4 <poll+0xd2>
     ba2:	46 c0       	rjmp	.+140    	; 0xc30 <poll+0x15e>
     ba4:	1c c0       	rjmp	.+56     	; 0xbde <poll+0x10c>
		case VOLTMETER:
			dtostrf(voltage, 6, 3, v_string);
     ba6:	41 ed       	ldi	r20, 0xD1	; 209
     ba8:	e4 2e       	mov	r14, r20
     baa:	42 e0       	ldi	r20, 0x02	; 2
     bac:	f4 2e       	mov	r15, r20
     bae:	c4 01       	movw	r24, r8
     bb0:	b3 01       	movw	r22, r6
     bb2:	46 e0       	ldi	r20, 0x06	; 6
     bb4:	23 e0       	ldi	r18, 0x03	; 3
     bb6:	87 01       	movw	r16, r14
     bb8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <dtostrf>
			sprintf(LCDBuffer, "%s V",v_string);
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <poll+0xec>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <poll+0xee>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <poll+0xf0>
     bc2:	ed b7       	in	r30, 0x3d	; 61
     bc4:	fe b7       	in	r31, 0x3e	; 62
     bc6:	31 96       	adiw	r30, 0x01	; 1
     bc8:	8d eb       	ldi	r24, 0xBD	; 189
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	ad b7       	in	r26, 0x3d	; 61
     bce:	be b7       	in	r27, 0x3e	; 62
     bd0:	12 96       	adiw	r26, 0x02	; 2
     bd2:	9c 93       	st	X, r25
     bd4:	8e 93       	st	-X, r24
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	1b c0       	rjmp	.+54     	; 0xc14 <poll+0x142>
			break;
		case OHMMETER:
			dtostrf(ohm, 6, 3, v_string);
     bde:	31 ed       	ldi	r19, 0xD1	; 209
     be0:	e3 2e       	mov	r14, r19
     be2:	32 e0       	ldi	r19, 0x02	; 2
     be4:	f3 2e       	mov	r15, r19
     be6:	b5 01       	movw	r22, r10
     be8:	c6 01       	movw	r24, r12
     bea:	46 e0       	ldi	r20, 0x06	; 6
     bec:	23 e0       	ldi	r18, 0x03	; 3
     bee:	87 01       	movw	r16, r14
     bf0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <dtostrf>
			sprintf(LCDBuffer, "%s kOhm",v_string);
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <poll+0x124>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <poll+0x126>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <poll+0x128>
     bfa:	ed b7       	in	r30, 0x3d	; 61
     bfc:	fe b7       	in	r31, 0x3e	; 62
     bfe:	31 96       	adiw	r30, 0x01	; 1
     c00:	8d eb       	ldi	r24, 0xBD	; 189
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	ad b7       	in	r26, 0x3d	; 61
     c06:	be b7       	in	r27, 0x3e	; 62
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	9c 93       	st	X, r25
     c0c:	8e 93       	st	-X, r24
     c0e:	11 97       	sbiw	r26, 0x01	; 1
     c10:	8b e0       	ldi	r24, 0x0B	; 11
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	93 83       	std	Z+3, r25	; 0x03
     c16:	82 83       	std	Z+2, r24	; 0x02
     c18:	f5 82       	std	Z+5, r15	; 0x05
     c1a:	e4 82       	std	Z+4, r14	; 0x04
     c1c:	0e 94 b6 11 	call	0x236c	; 0x236c <sprintf>
     c20:	8d b7       	in	r24, 0x3d	; 61
     c22:	9e b7       	in	r25, 0x3e	; 62
     c24:	06 96       	adiw	r24, 0x06	; 6
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	9e bf       	out	0x3e, r25	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	8d bf       	out	0x3d, r24	; 61
			break;
	}
	

	//CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     c38:	ad eb       	ldi	r26, 0xBD	; 189
     c3a:	b2 e0       	ldi	r27, 0x02	; 2
     c3c:	fd 01       	movw	r30, r26
     c3e:	01 90       	ld	r0, Z+
     c40:	00 20       	and	r0, r0
     c42:	e9 f7       	brne	.-6      	; 0xc3e <poll+0x16c>
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	ea 1b       	sub	r30, r26
     c48:	fb 0b       	sbc	r31, r27
     c4a:	cd 01       	movw	r24, r26
     c4c:	6e 2f       	mov	r22, r30
     c4e:	0e 94 fe 07 	call	0xffc	; 0xffc <LCDstring>
}
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	08 95       	ret

00000c6c <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     c6c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCDinit>
	LCDcursorOFF();
     c70:	0e 94 c5 08 	call	0x118a	; 0x118a <LCDcursorOFF>
	LCDclr();				//clear the display
     c74:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
	LCDGotoXY(0,0);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     c80:	82 e8       	ldi	r24, 0x82	; 130
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     c8c:	84 e9       	ldi	r24, 0x94	; 148
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
}
     c98:	08 95       	ret

00000c9a <Initialize>:
	}
}

void Initialize(void) {
	//set up the ports
	triggerPoll = 0;
     c9a:	10 92 b4 02 	sts	0x02B4, r1

	//init the A to D converter
	setVref(0); //Set to 5v Vref
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 1a 04 	call	0x834	; 0x834 <setVref>
	setOref(3); //Disable ohmref
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>

	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + 7;
     caa:	87 e8       	ldi	r24, 0x87	; 135
     cac:	80 93 7a 00 	sts	0x007A, r24

	// Set A to input (high impedence)
	DDRA = 0x00;
     cb0:	11 b8       	out	0x01, r1	; 1

	// PortB
	DDRB=0x00;
     cb2:	14 b8       	out	0x04, r1	; 4
	//PORTB=0xff;

	// PortD: Keypad
	DDRD=0x00;
     cb4:	1a b8       	out	0x0a, r1	; 10

	//set up timer 0 for 1 mSec ticks
	TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;	//set the compare reg to 250 time ticks
     cbc:	89 ef       	ldi	r24, 0xF9	; 249
     cbe:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b00000010; // turn on clear-on-match
     cc0:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011;	// clock prescalar to 64
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	95 bd       	out	0x25, r25	; 37

	//set up timer 1 to interrupt on capture
	//TIMSK1 = (1 << ICIE1); //turn on timer1 input capture ISR
	TCCR1B = (1 << ICES1) + 2; // Start 
     cc6:	82 e4       	ldi	r24, 0x42	; 66
     cc8:	80 93 81 00 	sts	0x0081, r24

	// Set analog comp to connect to timer capture input 
	// and turn on the band gap reference on the positive input  
	ACSR =  (1<<ACIC) ; //0b01000100  ;
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	80 bf       	out	0x30, r24	; 48


	//initialize the current key to null
	curKey = 0;
     cd0:	10 92 e1 02 	sts	0x02E1, r1
	elapsedTime = 0;
     cd4:	10 92 a8 02 	sts	0x02A8, r1
     cd8:	10 92 a7 02 	sts	0x02A7, r1
	debounceTime = 0;
     cdc:	10 92 e2 02 	sts	0x02E2, r1

	autoRange = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 ab 02 	sts	0x02AB, r24
	mode = INIT;
     ce6:	10 92 b9 02 	sts	0x02B9, r1
	manPage = WELCOME;
     cea:	10 92 ea 02 	sts	0x02EA, r1
	keyState = RELEASED;
     cee:	10 92 af 02 	sts	0x02AF, r1

	T1Capture = 0;
     cf2:	10 92 ae 02 	sts	0x02AE, r1
     cf6:	10 92 ad 02 	sts	0x02AD, r1
	lastT1Capture = 0;
     cfa:	10 92 bb 02 	sts	0x02BB, r1
     cfe:	10 92 ba 02 	sts	0x02BA, r1

	rangeIdx = 0;
     d02:	10 92 e8 02 	sts	0x02E8, r1
	rangeIdxMod = 3;
     d06:	90 93 a6 02 	sts	0x02A6, r25

	justSwitched = 0;
     d0a:	10 92 eb 02 	sts	0x02EB, r1

	InitLCD();
     d0e:	0e 94 36 06 	call	0xc6c	; 0xc6c <InitLCD>

	sei();
     d12:	78 94       	sei
}
     d14:	08 95       	ret

00000d16 <main>:
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
	Initialize();
     d16:	0e 94 4d 06 	call	0xc9a	; 0xc9a <Initialize>
	
	while(1){
		if(triggerPoll) {
     d1a:	80 91 b4 02 	lds	r24, 0x02B4
     d1e:	88 23       	and	r24, r24
     d20:	69 f0       	breq	.+26     	; 0xd3c <main+0x26>
			if(mode == FREQMETER) {
     d22:	80 91 b9 02 	lds	r24, 0x02B9
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	19 f4       	brne	.+6      	; 0xd30 <main+0x1a>
				pollFreq();
     d2a:	0e 94 14 05 	call	0xa28	; 0xa28 <pollFreq>
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <main+0x22>
			} else {
				poll();
     d30:	0e 94 69 05 	call	0xad2	; 0xad2 <poll>
				Autorange();
     d34:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Autorange>
			}
			triggerPoll = 0;
     d38:	10 92 b4 02 	sts	0x02B4, r1
		}
		if (justSwitched){
     d3c:	80 91 eb 02 	lds	r24, 0x02EB
     d40:	88 23       	and	r24, r24
     d42:	59 f3       	breq	.-42     	; 0xd1a <main+0x4>
			justSwitched = 0;
     d44:	10 92 eb 02 	sts	0x02EB, r1
			switch (mode){
     d48:	80 91 b9 02 	lds	r24, 0x02B9
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	09 f4       	brne	.+2      	; 0xd52 <main+0x3c>
     d50:	7b c0       	rjmp	.+246    	; 0xe48 <main+0x132>
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	18 f4       	brcc	.+6      	; 0xd5c <main+0x46>
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	01 f7       	brne	.-64     	; 0xd1a <main+0x4>
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <main+0x52>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	09 f4       	brne	.+2      	; 0xd62 <main+0x4c>
     d60:	a5 c0       	rjmp	.+330    	; 0xeac <main+0x196>
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	d1 f6       	brne	.-76     	; 0xd1a <main+0x4>
     d66:	d3 c0       	rjmp	.+422    	; 0xf0e <main+0x1f8>
				case MAN:
					TIMSK1 = 0; //turn off timer1 input capture ISR
     d68:	10 92 6f 00 	sts	0x006F, r1
					switch (manPage){
     d6c:	80 91 ea 02 	lds	r24, 0x02EA
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	99 f1       	breq	.+102    	; 0xdda <main+0xc4>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	28 f4       	brcc	.+10     	; 0xd82 <main+0x6c>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	c9 f0       	breq	.+50     	; 0xdae <main+0x98>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	10 f5       	brcc	.+68     	; 0xdc4 <main+0xae>
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <main+0x82>
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	09 f4       	brne	.+2      	; 0xd88 <main+0x72>
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <main+0xf0>
     d88:	85 30       	cpi	r24, 0x05	; 5
     d8a:	90 f1       	brcs	.+100    	; 0xdf0 <main+0xda>
     d8c:	86 30       	cpi	r24, 0x06	; 6
     d8e:	09 f4       	brne	.+2      	; 0xd92 <main+0x7c>
     d90:	45 c0       	rjmp	.+138    	; 0xe1c <main+0x106>
     d92:	87 30       	cpi	r24, 0x07	; 7
     d94:	11 f6       	brne	.-124    	; 0xd1a <main+0x4>
     d96:	4d c0       	rjmp	.+154    	; 0xe32 <main+0x11c>
						case WELCOME:
							LCDclr();
     d98:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     d9c:	81 e3       	ldi	r24, 0x31	; 49
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     da8:	8c e3       	ldi	r24, 0x3C	; 60
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	c7 c0       	rjmp	.+398    	; 0xf3c <main+0x226>
							break;
						case NAVIGATION_1:
							LCDclr();
     dae:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     db2:	8b e4       	ldi	r24, 0x4B	; 75
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     dbe:	8d e5       	ldi	r24, 0x5D	; 93
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	bc c0       	rjmp	.+376    	; 0xf3c <main+0x226>
							break;
						case NAVIGATION_2:
							LCDclr();
     dc4:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     dc8:	8f e6       	ldi	r24, 0x6F	; 111
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	b1 c0       	rjmp	.+354    	; 0xf3c <main+0x226>
							break;
					 	case VOLT_MAN:
							LCDclr();
     dda:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDVoltManTop, 0, 0);
     dde:	8f e8       	ldi	r24, 0x8F	; 143
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDVoltManBot, 0, 1);
     dea:	80 ea       	ldi	r24, 0xA0	; 160
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	a6 c0       	rjmp	.+332    	; 0xf3c <main+0x226>
							break;
						case OHM_MAN:
							LCDclr();
     df0:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDOhmManTop, 0, 0);
     df4:	8b ea       	ldi	r24, 0xAB	; 171
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDOhmManBot, 0, 1);
     e00:	8b eb       	ldi	r24, 0xBB	; 187
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	9b c0       	rjmp	.+310    	; 0xf3c <main+0x226>
							break;
						case FREQ_MAN:
							LCDclr();
     e06:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDFreqManTop, 0, 0);
     e0a:	85 ec       	ldi	r24, 0xC5	; 197
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDFreqManBot, 0, 1);
     e16:	86 ed       	ldi	r24, 0xD6	; 214
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	90 c0       	rjmp	.+288    	; 0xf3c <main+0x226>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     e1c:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     e20:	83 ee       	ldi	r24, 0xE3	; 227
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     e2c:	80 ef       	ldi	r24, 0xF0	; 240
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	85 c0       	rjmp	.+266    	; 0xf3c <main+0x226>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     e32:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     e36:	8b ef       	ldi	r24, 0xFB	; 251
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	7a c0       	rjmp	.+244    	; 0xf3c <main+0x226>
							break;
					}
						break;

				case VOLTMETER:
					LCDclr();
     e48:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
					//CopyStringtoLCD(LCDVolt, MODE_START, 0);
					TIMSK1 = 0; //turn off timer1 input capture ISR
     e58:	10 92 6f 00 	sts	0x006F, r1
					setOref(3); // disable ohmmeter
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>
					if (autoRange){
     e62:	80 91 ab 02 	lds	r24, 0x02AB
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <main+0x156>
     e6a:	66 c0       	rjmp	.+204    	; 0xf38 <main+0x222>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     e6c:	86 ea       	ldi	r24, 0xA6	; 166
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
						switch (rangeIdx){
     e78:	80 91 e8 02 	lds	r24, 0x02E8
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	41 f0       	breq	.+16     	; 0xe90 <main+0x17a>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	18 f0       	brcs	.+6      	; 0xe8a <main+0x174>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	69 f4       	brne	.+26     	; 0xea2 <main+0x18c>
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <main+0x180>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     e8a:	8e eb       	ldi	r24, 0xBE	; 190
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <main+0x184>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     e90:	87 ec       	ldi	r24, 0xC7	; 199
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <main+0x184>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     e96:	83 ed       	ldi	r24, 0xD3	; 211
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	67 e0       	ldi	r22, 0x07	; 7
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
								break;
						}
						setVref(rangeIdx);
     ea2:	80 91 e8 02 	lds	r24, 0x02E8
     ea6:	0e 94 1a 04 	call	0x834	; 0x834 <setVref>
     eaa:	37 cf       	rjmp	.-402    	; 0xd1a <main+0x4>
					}	
					break;

				case OHMMETER:
					LCDclr();
     eac:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
					//CopyStringtoLCD(LCDOhm, MODE_START, 0);
					TIMSK1 = 0; //turn off timer1 input capture ISR
     ebc:	10 92 6f 00 	sts	0x006F, r1
					setVref(0); // 5v reference
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 1a 04 	call	0x834	; 0x834 <setVref>
					if (autoRange){
     ec6:	80 91 ab 02 	lds	r24, 0x02AB
     eca:	88 23       	and	r24, r24
     ecc:	a9 f5       	brne	.+106    	; 0xf38 <main+0x222>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     ece:	86 ea       	ldi	r24, 0xA6	; 166
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
						switch (rangeIdx){
     eda:	80 91 e8 02 	lds	r24, 0x02E8
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	41 f0       	breq	.+16     	; 0xef2 <main+0x1dc>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	18 f0       	brcs	.+6      	; 0xeec <main+0x1d6>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	69 f4       	brne	.+26     	; 0xf04 <main+0x1ee>
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <main+0x1e2>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     eec:	8f ee       	ldi	r24, 0xEF	; 239
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <main+0x1e6>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     ef2:	86 ee       	ldi	r24, 0xE6	; 230
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <main+0x1e6>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     ef8:	8e ed       	ldi	r24, 0xDE	; 222
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	67 e0       	ldi	r22, 0x07	; 7
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
								break;
						}
						setOref(rangeIdx);
     f04:	80 91 e8 02 	lds	r24, 0x02E8
     f08:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>
     f0c:	06 cf       	rjmp	.-500    	; 0xd1a <main+0x4>
					}
					break;

				case FREQMETER:
					LCDclr();
     f0e:	0e 94 f6 07 	call	0xfec	; 0xfec <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
					//CopyStringtoLCD(LCDFreq, MODE_START, 0);

					setVref(0);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 1a 04 	call	0x834	; 0x834 <setVref>
					setOref(3);
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	0e 94 3d 04 	call	0x87a	; 0x87a <setOref>

					//Set the prescalar on TIMER1 to the appropriate range
					TIMSK1 = (1 << ICIE1); //turn on timer1 input capture ISR
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	80 93 6f 00 	sts	0x006F, r24

					if (autoRange){
     f30:	80 91 ab 02 	lds	r24, 0x02AB
     f34:	88 23       	and	r24, r24
     f36:	21 f0       	breq	.+8      	; 0xf40 <main+0x22a>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     f38:	8f ea       	ldi	r24, 0xAF	; 175
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <main+0x252>
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     f40:	86 ea       	ldi	r24, 0xA6	; 166
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
						switch (rangeIdx){
     f4c:	80 91 e8 02 	lds	r24, 0x02E8
     f50:	88 23       	and	r24, r24
     f52:	21 f0       	breq	.+8      	; 0xf5c <main+0x246>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	09 f0       	breq	.+2      	; 0xf5a <main+0x244>
     f58:	e0 ce       	rjmp	.-576    	; 0xd1a <main+0x4>
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <main+0x24c>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <main+0x250>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     f62:	89 ef       	ldi	r24, 0xF9	; 249
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	67 e0       	ldi	r22, 0x07	; 7
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 22 08 	call	0x1044	; 0x1044 <CopyStringtoLCD>
     f6e:	d5 ce       	rjmp	.-598    	; 0xd1a <main+0x4>

00000f70 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     f70:	28 2f       	mov	r18, r24
     f72:	20 7f       	andi	r18, 0xF0	; 240
     f74:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     f76:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f78:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f7a:	20 ea       	ldi	r18, 0xA0	; 160
     f7c:	3f e0       	ldi	r19, 0x0F	; 15
     f7e:	f9 01       	movw	r30, r18
     f80:	31 97       	sbiw	r30, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f84:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f86:	40 98       	cbi	0x08, 0	; 8
     f88:	f9 01       	movw	r30, r18
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	44 e0       	ldi	r20, 0x04	; 4
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	4a 95       	dec	r20
     f98:	e1 f7       	brne	.-8      	; 0xf92 <LCDsendChar+0x22>
     f9a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     f9c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f9e:	42 9a       	sbi	0x08, 2	; 8
     fa0:	c9 01       	movw	r24, r18
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     fa6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     fa8:	40 98       	cbi	0x08, 0	; 8
     faa:	c9 01       	movw	r24, r18
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     fb0:	08 95       	ret

00000fb2 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     fb2:	28 2f       	mov	r18, r24
     fb4:	20 7f       	andi	r18, 0xF0	; 240
     fb6:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     fb8:	42 9a       	sbi	0x08, 2	; 8
     fba:	20 ea       	ldi	r18, 0xA0	; 160
     fbc:	3f e0       	ldi	r19, 0x0F	; 15
     fbe:	f9 01       	movw	r30, r18
     fc0:	31 97       	sbiw	r30, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fc4:	42 98       	cbi	0x08, 2	; 8
     fc6:	f9 01       	movw	r30, r18
     fc8:	31 97       	sbiw	r30, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	54 e0       	ldi	r21, 0x04	; 4
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	5a 95       	dec	r21
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <LCDsendCommand+0x1e>
     fd8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     fda:	42 9a       	sbi	0x08, 2	; 8
     fdc:	c9 01       	movw	r24, r18
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fe2:	42 98       	cbi	0x08, 2	; 8
     fe4:	c9 01       	movw	r24, r18
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     fea:	08 95       	ret

00000fec <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
     ff2:	08 95       	ret

00000ff4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
     ffa:	08 95       	ret

00000ffc <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	49 f0       	breq	.+18     	; 0x101c <LCDstring+0x20>
    100a:	ec 01       	movw	r28, r24
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1010:	89 91       	ld	r24, Y+
    1012:	0e 94 b8 07 	call	0xf70	; 0xf70 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1016:	1f 5f       	subi	r17, 0xFF	; 255
    1018:	10 17       	cp	r17, r16
    101a:	d0 f3       	brcs	.-12     	; 0x1010 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1026:	62 30       	cpi	r22, 0x02	; 2
    1028:	31 f0       	breq	.+12     	; 0x1036 <LCDGotoXY+0x10>
    102a:	63 30       	cpi	r22, 0x03	; 3
    102c:	31 f0       	breq	.+12     	; 0x103a <LCDGotoXY+0x14>
    102e:	61 30       	cpi	r22, 0x01	; 1
    1030:	29 f4       	brne	.+10     	; 0x103c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1032:	80 5c       	subi	r24, 0xC0	; 192
    1034:	03 c0       	rjmp	.+6      	; 0x103c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1036:	8c 5e       	subi	r24, 0xEC	; 236
    1038:	01 c0       	rjmp	.+2      	; 0x103c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    103a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    103c:	80 68       	ori	r24, 0x80	; 128
    103e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
	
}
    1042:	08 95       	ret

00001044 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24
    104c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    104e:	64 2f       	mov	r22, r20
    1050:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDGotoXY>
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	03 c0       	rjmp	.+6      	; 0x105e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1058:	0e 94 b8 07 	call	0xf70	; 0xf70 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    105c:	1f 5f       	subi	r17, 0xFF	; 255
    105e:	fe 01       	movw	r30, r28
    1060:	e1 0f       	add	r30, r17
    1062:	f1 1d       	adc	r31, r1
    1064:	84 91       	lpm	r24, Z+
    1066:	88 23       	and	r24, r24
    1068:	b9 f7       	brne	.-18     	; 0x1058 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	08 95       	ret

00001072 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	7c 01       	movw	r14, r24
    1080:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1082:	11 0f       	add	r17, r17
    1084:	11 0f       	add	r17, r17
    1086:	11 0f       	add	r17, r17
    1088:	10 64       	ori	r17, 0x40	; 64
    108a:	c0 e0       	ldi	r28, 0x00	; 0
    108c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    108e:	f7 01       	movw	r30, r14
    1090:	ec 0f       	add	r30, r28
    1092:	fd 1f       	adc	r31, r29
    1094:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1096:	81 2f       	mov	r24, r17
    1098:	8c 0f       	add	r24, r28
    109a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
		LCDsendChar(pcc);
    109e:	80 2f       	mov	r24, r16
    10a0:	0e 94 b8 07 	call	0xf70	; 0xf70 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    10a4:	21 96       	adiw	r28, 0x01	; 1
    10a6:	c8 30       	cpi	r28, 0x08	; 8
    10a8:	d1 05       	cpc	r29, r1
    10aa:	89 f7       	brne	.-30     	; 0x108e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	08 95       	ret

000010ba <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	80 e6       	ldi	r24, 0x60	; 96
    10c2:	9a ee       	ldi	r25, 0xEA	; 234
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    10c8:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    10ca:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    10cc:	87 b1       	in	r24, 0x07	; 7
    10ce:	80 6f       	ori	r24, 0xF0	; 240
    10d0:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    10d2:	87 b1       	in	r24, 0x07	; 7
    10d4:	87 60       	ori	r24, 0x07	; 7
    10d6:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    10d8:	80 e3       	ldi	r24, 0x30	; 48
    10da:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    10dc:	42 9a       	sbi	0x08, 2	; 8
    10de:	20 ea       	ldi	r18, 0xA0	; 160
    10e0:	3f e0       	ldi	r19, 0x0F	; 15
    10e2:	f9 01       	movw	r30, r18
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    10e8:	42 98       	cbi	0x08, 2	; 8
    10ea:	f9 01       	movw	r30, r18
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    10f0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    10f2:	42 9a       	sbi	0x08, 2	; 8
    10f4:	c9 01       	movw	r24, r18
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    10fa:	42 98       	cbi	0x08, 2	; 8
    10fc:	c9 01       	movw	r24, r18
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1106:	42 9a       	sbi	0x08, 2	; 8
    1108:	c9 01       	movw	r24, r18
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <__stack+0xb>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    110e:	42 98       	cbi	0x08, 2	; 8
    1110:	c9 01       	movw	r24, r18
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <__stack+0x13>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1116:	88 e2       	ldi	r24, 0x28	; 40
    1118:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    111c:	8c e0       	ldi	r24, 0x0C	; 12
    111e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
    1122:	c9 e1       	ldi	r28, 0x19	; 25
    1124:	d2 e0       	ldi	r29, 0x02	; 2
    1126:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1128:	16 2f       	mov	r17, r22
    112a:	1f 5f       	subi	r17, 0xFF	; 255
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 39 08 	call	0x1072	; 0x1072 <LCDdefinechar>
    1132:	28 96       	adiw	r28, 0x08	; 8
    1134:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1136:	18 30       	cpi	r17, 0x08	; 8
    1138:	b9 f7       	brne	.-18     	; 0x1128 <__stack+0x29>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	08 2f       	mov	r16, r24
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    114c:	8e e1       	ldi	r24, 0x1E	; 30
    114e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1152:	1f 5f       	subi	r17, 0xFF	; 255
    1154:	10 17       	cp	r17, r16
    1156:	d0 f3       	brcs	.-12     	; 0x114c <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	08 2f       	mov	r16, r24
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1168:	88 e1       	ldi	r24, 0x18	; 24
    116a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    116e:	1f 5f       	subi	r17, 0xFF	; 255
    1170:	10 17       	cp	r17, r16
    1172:	d0 f3       	brcs	.-12     	; 0x1168 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    117a:	8e e0       	ldi	r24, 0x0E	; 14
    117c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
    1180:	08 95       	ret

00001182 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1182:	8f e0       	ldi	r24, 0x0F	; 15
    1184:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
    1188:	08 95       	ret

0000118a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    118a:	8c e0       	ldi	r24, 0x0C	; 12
    118c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
    1190:	08 95       	ret

00001192 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1192:	88 e0       	ldi	r24, 0x08	; 8
    1194:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
    1198:	08 95       	ret

0000119a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    119a:	8c e0       	ldi	r24, 0x0C	; 12
    119c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
}
    11a0:	08 95       	ret

000011a2 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	08 2f       	mov	r16, r24
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    11ac:	80 e1       	ldi	r24, 0x10	; 16
    11ae:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    11b2:	1f 5f       	subi	r17, 0xFF	; 255
    11b4:	10 17       	cp	r17, r16
    11b6:	d0 f3       	brcs	.-12     	; 0x11ac <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	08 2f       	mov	r16, r24
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    11c8:	84 e1       	ldi	r24, 0x14	; 20
    11ca:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    11ce:	1f 5f       	subi	r17, 0xFF	; 255
    11d0:	10 17       	cp	r17, r16
    11d2:	d0 f3       	brcs	.-12     	; 0x11c8 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    11ea:	96 e0       	ldi	r25, 0x06	; 6
    11ec:	89 9f       	mul	r24, r25
    11ee:	c0 01       	movw	r24, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	24 2f       	mov	r18, r20
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	42 9f       	mul	r20, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	43 9f       	mul	r20, r19
    11fe:	90 0d       	add	r25, r0
    1200:	52 9f       	mul	r21, r18
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__divmodhi4>
    120c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    120e:	cb 01       	movw	r24, r22
    1210:	66 e0       	ldi	r22, 0x06	; 6
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__udivmodhi4>
    1218:	e8 2e       	mov	r14, r24
    121a:	ff 24       	eor	r15, r15
    121c:	00 e0       	ldi	r16, 0x00	; 0
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	12 c0       	rjmp	.+36     	; 0x1246 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1222:	c8 01       	movw	r24, r16
    1224:	05 96       	adiw	r24, 0x05	; 5
    1226:	c8 17       	cp	r28, r24
    1228:	d9 07       	cpc	r29, r25
    122a:	10 f0       	brcs	.+4      	; 0x1230 <LCDprogressBar+0x56>
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	06 c0       	rjmp	.+12     	; 0x123c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1230:	c0 17       	cp	r28, r16
    1232:	d1 07       	cpc	r29, r17
    1234:	10 f0       	brcs	.+4      	; 0x123a <LCDprogressBar+0x60>
    1236:	8e 2d       	mov	r24, r14
    1238:	01 c0       	rjmp	.+2      	; 0x123c <LCDprogressBar+0x62>
    123a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    123c:	0e 94 b8 07 	call	0xf70	; 0xf70 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1240:	f3 94       	inc	r15
    1242:	0a 5f       	subi	r16, 0xFA	; 250
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	fd 14       	cp	r15, r13
    1248:	60 f3       	brcs	.-40     	; 0x1222 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	08 95       	ret

0000125a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    125a:	87 e6       	ldi	r24, 0x67	; 103
    125c:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1260:	88 e1       	ldi	r24, 0x18	; 24
    1262:	80 93 c1 00 	sts	0x00C1, r24
}
    1266:	08 95       	ret

00001268 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1268:	1f 93       	push	r17
    126a:	18 2f       	mov	r17, r24

  if (c == '\a')
    126c:	87 30       	cpi	r24, 0x07	; 7
    126e:	49 f4       	brne	.+18     	; 0x1282 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1270:	60 91 f1 02 	lds	r22, 0x02F1
    1274:	70 91 f2 02 	lds	r23, 0x02F2
    1278:	84 e4       	ldi	r24, 0x44	; 68
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 8d 11 	call	0x231a	; 0x231a <fputs>
    1280:	0b c0       	rjmp	.+22     	; 0x1298 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1282:	8a 30       	cpi	r24, 0x0A	; 10
    1284:	19 f4       	brne	.+6      	; 0x128c <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1286:	8d e0       	ldi	r24, 0x0D	; 13
    1288:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    128c:	80 91 c0 00 	lds	r24, 0x00C0
    1290:	85 ff       	sbrs	r24, 5
    1292:	fc cf       	rjmp	.-8      	; 0x128c <uart_putchar+0x24>
  UDR0 = c;
    1294:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	1f 91       	pop	r17
    129e:	08 95       	ret

000012a0 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    12ae:	80 91 54 02 	lds	r24, 0x0254
    12b2:	90 91 55 02 	lds	r25, 0x0255
    12b6:	89 2b       	or	r24, r25
    12b8:	09 f0       	breq	.+2      	; 0x12bc <uart_getchar+0x1c>
    12ba:	9f c0       	rjmp	.+318    	; 0x13fa <uart_getchar+0x15a>
    12bc:	06 e5       	ldi	r16, 0x56	; 86
    12be:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    12c0:	80 91 c0 00 	lds	r24, 0x00C0
    12c4:	87 ff       	sbrs	r24, 7
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    12c8:	80 91 c0 00 	lds	r24, 0x00C0
    12cc:	84 ff       	sbrs	r24, 4
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <uart_getchar+0x36>
    12d0:	2e ef       	ldi	r18, 0xFE	; 254
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	a6 c0       	rjmp	.+332    	; 0x1422 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    12d6:	80 91 c0 00 	lds	r24, 0x00C0
    12da:	83 fd       	sbrc	r24, 3
    12dc:	a0 c0       	rjmp	.+320    	; 0x141e <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    12de:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    12e2:	9d 30       	cpi	r25, 0x0D	; 13
    12e4:	11 f0       	breq	.+4      	; 0x12ea <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    12e6:	9a 30       	cpi	r25, 0x0A	; 10
    12e8:	69 f4       	brne	.+26     	; 0x1304 <uart_getchar+0x64>
	  {
	    *cp = c;
    12ea:	8a e0       	ldi	r24, 0x0A	; 10
    12ec:	f8 01       	movw	r30, r16
    12ee:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    12f0:	b7 01       	movw	r22, r14
    12f2:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
	    rxp = b;
    12f6:	86 e5       	ldi	r24, 0x56	; 86
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	90 93 55 02 	sts	0x0255, r25
    12fe:	80 93 54 02 	sts	0x0254, r24
    1302:	7b c0       	rjmp	.+246    	; 0x13fa <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1304:	99 30       	cpi	r25, 0x09	; 9
    1306:	09 f4       	brne	.+2      	; 0x130a <uart_getchar+0x6a>
    1308:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    130a:	89 2f       	mov	r24, r25
    130c:	80 52       	subi	r24, 0x20	; 32
    130e:	8f 35       	cpi	r24, 0x5F	; 95
    1310:	10 f0       	brcs	.+4      	; 0x1316 <uart_getchar+0x76>
    1312:	90 3a       	cpi	r25, 0xA0	; 160
    1314:	70 f0       	brcs	.+28     	; 0x1332 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	05 3a       	cpi	r16, 0xA5	; 165
    131a:	1f 07       	cpc	r17, r31
    131c:	11 f4       	brne	.+4      	; 0x1322 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    131e:	87 e0       	ldi	r24, 0x07	; 7
    1320:	04 c0       	rjmp	.+8      	; 0x132a <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1322:	f8 01       	movw	r30, r16
    1324:	91 93       	st	Z+, r25
    1326:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1328:	89 2f       	mov	r24, r25
    132a:	b7 01       	movw	r22, r14
    132c:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
    1330:	c7 cf       	rjmp	.-114    	; 0x12c0 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1332:	92 31       	cpi	r25, 0x12	; 18
    1334:	39 f1       	breq	.+78     	; 0x1384 <uart_getchar+0xe4>
    1336:	93 31       	cpi	r25, 0x13	; 19
    1338:	38 f4       	brcc	.+14     	; 0x1348 <uart_getchar+0xa8>
    133a:	93 30       	cpi	r25, 0x03	; 3
    133c:	09 f4       	brne	.+2      	; 0x1340 <uart_getchar+0xa0>
    133e:	6f c0       	rjmp	.+222    	; 0x141e <uart_getchar+0x17e>
    1340:	98 30       	cpi	r25, 0x08	; 8
    1342:	09 f0       	breq	.+2      	; 0x1346 <uart_getchar+0xa6>
    1344:	bd cf       	rjmp	.-134    	; 0x12c0 <uart_getchar+0x20>
    1346:	09 c0       	rjmp	.+18     	; 0x135a <uart_getchar+0xba>
    1348:	97 31       	cpi	r25, 0x17	; 23
    134a:	09 f4       	brne	.+2      	; 0x134e <uart_getchar+0xae>
    134c:	4b c0       	rjmp	.+150    	; 0x13e4 <uart_getchar+0x144>
    134e:	9f 37       	cpi	r25, 0x7F	; 127
    1350:	21 f0       	breq	.+8      	; 0x135a <uart_getchar+0xba>
    1352:	95 31       	cpi	r25, 0x15	; 21
    1354:	09 f0       	breq	.+2      	; 0x1358 <uart_getchar+0xb8>
    1356:	b4 cf       	rjmp	.-152    	; 0x12c0 <uart_getchar+0x20>
    1358:	32 c0       	rjmp	.+100    	; 0x13be <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	06 35       	cpi	r16, 0x56	; 86
    135e:	1f 07       	cpc	r17, r31
    1360:	09 f0       	breq	.+2      	; 0x1364 <uart_getchar+0xc4>
    1362:	08 f4       	brcc	.+2      	; 0x1366 <uart_getchar+0xc6>
    1364:	ad cf       	rjmp	.-166    	; 0x12c0 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1366:	88 e0       	ldi	r24, 0x08	; 8
    1368:	b7 01       	movw	r22, r14
    136a:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar(' ', stream);
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	b7 01       	movw	r22, r14
    1372:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar('\b', stream);
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	b7 01       	movw	r22, r14
    137a:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		cp--;
    137e:	01 50       	subi	r16, 0x01	; 1
    1380:	10 40       	sbci	r17, 0x00	; 0
    1382:	9e cf       	rjmp	.-196    	; 0x12c0 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1384:	8d e0       	ldi	r24, 0x0D	; 13
    1386:	b7 01       	movw	r22, r14
    1388:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
    138c:	c6 e5       	ldi	r28, 0x56	; 86
    138e:	d2 e0       	ldi	r29, 0x02	; 2
    1390:	04 c0       	rjmp	.+8      	; 0x139a <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1392:	89 91       	ld	r24, Y+
    1394:	b7 01       	movw	r22, r14
    1396:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    139a:	c0 17       	cp	r28, r16
    139c:	d1 07       	cpc	r29, r17
    139e:	c8 f3       	brcs	.-14     	; 0x1392 <uart_getchar+0xf2>
    13a0:	8f cf       	rjmp	.-226    	; 0x12c0 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    13a2:	88 e0       	ldi	r24, 0x08	; 8
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar(' ', stream);
    13aa:	80 e2       	ldi	r24, 0x20	; 32
    13ac:	b7 01       	movw	r22, r14
    13ae:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar('\b', stream);
    13b2:	88 e0       	ldi	r24, 0x08	; 8
    13b4:	b7 01       	movw	r22, r14
    13b6:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		cp--;
    13ba:	01 50       	subi	r16, 0x01	; 1
    13bc:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	06 35       	cpi	r16, 0x56	; 86
    13c2:	18 07       	cpc	r17, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <uart_getchar+0x128>
    13c6:	68 f7       	brcc	.-38     	; 0x13a2 <uart_getchar+0x102>
    13c8:	7b cf       	rjmp	.-266    	; 0x12c0 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    13ca:	88 e0       	ldi	r24, 0x08	; 8
    13cc:	b7 01       	movw	r22, r14
    13ce:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar(' ', stream);
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	b7 01       	movw	r22, r14
    13d6:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
		uart_putchar('\b', stream);
    13da:	88 e0       	ldi	r24, 0x08	; 8
    13dc:	b7 01       	movw	r22, r14
    13de:	0e 94 34 09 	call	0x1268	; 0x1268 <uart_putchar>
    13e2:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    13e4:	e2 e0       	ldi	r30, 0x02	; 2
    13e6:	06 35       	cpi	r16, 0x56	; 86
    13e8:	1e 07       	cpc	r17, r30
    13ea:	09 f0       	breq	.+2      	; 0x13ee <uart_getchar+0x14e>
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <uart_getchar+0x150>
    13ee:	68 cf       	rjmp	.-304    	; 0x12c0 <uart_getchar+0x20>
    13f0:	e8 01       	movw	r28, r16
    13f2:	8a 91       	ld	r24, -Y
    13f4:	80 32       	cpi	r24, 0x20	; 32
    13f6:	49 f7       	brne	.-46     	; 0x13ca <uart_getchar+0x12a>
    13f8:	63 cf       	rjmp	.-314    	; 0x12c0 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    13fa:	e0 91 54 02 	lds	r30, 0x0254
    13fe:	f0 91 55 02 	lds	r31, 0x0255
    1402:	81 91       	ld	r24, Z+
    1404:	f0 93 55 02 	sts	0x0255, r31
    1408:	e0 93 54 02 	sts	0x0254, r30
  if (c == '\n')
    140c:	8a 30       	cpi	r24, 0x0A	; 10
    140e:	21 f4       	brne	.+8      	; 0x1418 <uart_getchar+0x178>
    rxp = 0;
    1410:	10 92 55 02 	sts	0x0255, r1
    1414:	10 92 54 02 	sts	0x0254, r1

  return c;
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <uart_getchar+0x182>
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	3f ef       	ldi	r19, 0xFF	; 255
}
    1422:	c9 01       	movw	r24, r18
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <_fpadd_parts>:
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e1       	ldi	r30, 0x1F	; 31
    1438:	fa e0       	ldi	r31, 0x0A	; 10
    143a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__>
    143e:	dc 01       	movw	r26, r24
    1440:	2b 01       	movw	r4, r22
    1442:	fa 01       	movw	r30, r20
    1444:	9c 91       	ld	r25, X
    1446:	92 30       	cpi	r25, 0x02	; 2
    1448:	08 f4       	brcc	.+2      	; 0x144c <_fpadd_parts+0x1a>
    144a:	39 c1       	rjmp	.+626    	; 0x16be <_fpadd_parts+0x28c>
    144c:	eb 01       	movw	r28, r22
    144e:	88 81       	ld	r24, Y
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	08 f4       	brcc	.+2      	; 0x1456 <_fpadd_parts+0x24>
    1454:	33 c1       	rjmp	.+614    	; 0x16bc <_fpadd_parts+0x28a>
    1456:	94 30       	cpi	r25, 0x04	; 4
    1458:	69 f4       	brne	.+26     	; 0x1474 <_fpadd_parts+0x42>
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	09 f0       	breq	.+2      	; 0x1460 <_fpadd_parts+0x2e>
    145e:	2f c1       	rjmp	.+606    	; 0x16be <_fpadd_parts+0x28c>
    1460:	11 96       	adiw	r26, 0x01	; 1
    1462:	9c 91       	ld	r25, X
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	98 17       	cp	r25, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <_fpadd_parts+0x3c>
    146c:	28 c1       	rjmp	.+592    	; 0x16be <_fpadd_parts+0x28c>
    146e:	ac e4       	ldi	r26, 0x4C	; 76
    1470:	b1 e0       	ldi	r27, 0x01	; 1
    1472:	25 c1       	rjmp	.+586    	; 0x16be <_fpadd_parts+0x28c>
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	09 f4       	brne	.+2      	; 0x147a <_fpadd_parts+0x48>
    1478:	21 c1       	rjmp	.+578    	; 0x16bc <_fpadd_parts+0x28a>
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	a9 f4       	brne	.+42     	; 0x14a8 <_fpadd_parts+0x76>
    147e:	92 30       	cpi	r25, 0x02	; 2
    1480:	09 f0       	breq	.+2      	; 0x1484 <_fpadd_parts+0x52>
    1482:	1d c1       	rjmp	.+570    	; 0x16be <_fpadd_parts+0x28c>
    1484:	9a 01       	movw	r18, r20
    1486:	ad 01       	movw	r20, r26
    1488:	88 e0       	ldi	r24, 0x08	; 8
    148a:	ea 01       	movw	r28, r20
    148c:	09 90       	ld	r0, Y+
    148e:	ae 01       	movw	r20, r28
    1490:	e9 01       	movw	r28, r18
    1492:	09 92       	st	Y+, r0
    1494:	9e 01       	movw	r18, r28
    1496:	81 50       	subi	r24, 0x01	; 1
    1498:	c1 f7       	brne	.-16     	; 0x148a <_fpadd_parts+0x58>
    149a:	e2 01       	movw	r28, r4
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	9c 91       	ld	r25, X
    14a2:	89 23       	and	r24, r25
    14a4:	81 83       	std	Z+1, r24	; 0x01
    14a6:	08 c1       	rjmp	.+528    	; 0x16b8 <_fpadd_parts+0x286>
    14a8:	92 30       	cpi	r25, 0x02	; 2
    14aa:	09 f4       	brne	.+2      	; 0x14ae <_fpadd_parts+0x7c>
    14ac:	07 c1       	rjmp	.+526    	; 0x16bc <_fpadd_parts+0x28a>
    14ae:	12 96       	adiw	r26, 0x02	; 2
    14b0:	2d 90       	ld	r2, X+
    14b2:	3c 90       	ld	r3, X
    14b4:	13 97       	sbiw	r26, 0x03	; 3
    14b6:	eb 01       	movw	r28, r22
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	14 96       	adiw	r26, 0x04	; 4
    14be:	ad 90       	ld	r10, X+
    14c0:	bd 90       	ld	r11, X+
    14c2:	cd 90       	ld	r12, X+
    14c4:	dc 90       	ld	r13, X
    14c6:	17 97       	sbiw	r26, 0x07	; 7
    14c8:	ec 80       	ldd	r14, Y+4	; 0x04
    14ca:	fd 80       	ldd	r15, Y+5	; 0x05
    14cc:	0e 81       	ldd	r16, Y+6	; 0x06
    14ce:	1f 81       	ldd	r17, Y+7	; 0x07
    14d0:	91 01       	movw	r18, r2
    14d2:	28 1b       	sub	r18, r24
    14d4:	39 0b       	sbc	r19, r25
    14d6:	b9 01       	movw	r22, r18
    14d8:	37 ff       	sbrs	r19, 7
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <_fpadd_parts+0xb2>
    14dc:	66 27       	eor	r22, r22
    14de:	77 27       	eor	r23, r23
    14e0:	62 1b       	sub	r22, r18
    14e2:	73 0b       	sbc	r23, r19
    14e4:	60 32       	cpi	r22, 0x20	; 32
    14e6:	71 05       	cpc	r23, r1
    14e8:	0c f0       	brlt	.+2      	; 0x14ec <_fpadd_parts+0xba>
    14ea:	61 c0       	rjmp	.+194    	; 0x15ae <_fpadd_parts+0x17c>
    14ec:	12 16       	cp	r1, r18
    14ee:	13 06       	cpc	r1, r19
    14f0:	6c f5       	brge	.+90     	; 0x154c <_fpadd_parts+0x11a>
    14f2:	37 01       	movw	r6, r14
    14f4:	48 01       	movw	r8, r16
    14f6:	06 2e       	mov	r0, r22
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <_fpadd_parts+0xd0>
    14fa:	96 94       	lsr	r9
    14fc:	87 94       	ror	r8
    14fe:	77 94       	ror	r7
    1500:	67 94       	ror	r6
    1502:	0a 94       	dec	r0
    1504:	d2 f7       	brpl	.-12     	; 0x14fa <_fpadd_parts+0xc8>
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <_fpadd_parts+0xe6>
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	44 1f       	adc	r20, r20
    1516:	55 1f       	adc	r21, r21
    1518:	6a 95       	dec	r22
    151a:	d2 f7       	brpl	.-12     	; 0x1510 <_fpadd_parts+0xde>
    151c:	21 50       	subi	r18, 0x01	; 1
    151e:	30 40       	sbci	r19, 0x00	; 0
    1520:	40 40       	sbci	r20, 0x00	; 0
    1522:	50 40       	sbci	r21, 0x00	; 0
    1524:	2e 21       	and	r18, r14
    1526:	3f 21       	and	r19, r15
    1528:	40 23       	and	r20, r16
    152a:	51 23       	and	r21, r17
    152c:	21 15       	cp	r18, r1
    152e:	31 05       	cpc	r19, r1
    1530:	41 05       	cpc	r20, r1
    1532:	51 05       	cpc	r21, r1
    1534:	21 f0       	breq	.+8      	; 0x153e <_fpadd_parts+0x10c>
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	79 01       	movw	r14, r18
    1540:	8a 01       	movw	r16, r20
    1542:	e6 28       	or	r14, r6
    1544:	f7 28       	or	r15, r7
    1546:	08 29       	or	r16, r8
    1548:	19 29       	or	r17, r9
    154a:	3c c0       	rjmp	.+120    	; 0x15c4 <_fpadd_parts+0x192>
    154c:	23 2b       	or	r18, r19
    154e:	d1 f1       	breq	.+116    	; 0x15c4 <_fpadd_parts+0x192>
    1550:	26 0e       	add	r2, r22
    1552:	37 1e       	adc	r3, r23
    1554:	35 01       	movw	r6, r10
    1556:	46 01       	movw	r8, r12
    1558:	06 2e       	mov	r0, r22
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <_fpadd_parts+0x132>
    155c:	96 94       	lsr	r9
    155e:	87 94       	ror	r8
    1560:	77 94       	ror	r7
    1562:	67 94       	ror	r6
    1564:	0a 94       	dec	r0
    1566:	d2 f7       	brpl	.-12     	; 0x155c <_fpadd_parts+0x12a>
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	04 c0       	rjmp	.+8      	; 0x157a <_fpadd_parts+0x148>
    1572:	22 0f       	add	r18, r18
    1574:	33 1f       	adc	r19, r19
    1576:	44 1f       	adc	r20, r20
    1578:	55 1f       	adc	r21, r21
    157a:	6a 95       	dec	r22
    157c:	d2 f7       	brpl	.-12     	; 0x1572 <_fpadd_parts+0x140>
    157e:	21 50       	subi	r18, 0x01	; 1
    1580:	30 40       	sbci	r19, 0x00	; 0
    1582:	40 40       	sbci	r20, 0x00	; 0
    1584:	50 40       	sbci	r21, 0x00	; 0
    1586:	2a 21       	and	r18, r10
    1588:	3b 21       	and	r19, r11
    158a:	4c 21       	and	r20, r12
    158c:	5d 21       	and	r21, r13
    158e:	21 15       	cp	r18, r1
    1590:	31 05       	cpc	r19, r1
    1592:	41 05       	cpc	r20, r1
    1594:	51 05       	cpc	r21, r1
    1596:	21 f0       	breq	.+8      	; 0x15a0 <_fpadd_parts+0x16e>
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	59 01       	movw	r10, r18
    15a2:	6a 01       	movw	r12, r20
    15a4:	a6 28       	or	r10, r6
    15a6:	b7 28       	or	r11, r7
    15a8:	c8 28       	or	r12, r8
    15aa:	d9 28       	or	r13, r9
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <_fpadd_parts+0x192>
    15ae:	82 15       	cp	r24, r2
    15b0:	93 05       	cpc	r25, r3
    15b2:	2c f0       	brlt	.+10     	; 0x15be <_fpadd_parts+0x18c>
    15b4:	1c 01       	movw	r2, r24
    15b6:	aa 24       	eor	r10, r10
    15b8:	bb 24       	eor	r11, r11
    15ba:	65 01       	movw	r12, r10
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <_fpadd_parts+0x192>
    15be:	ee 24       	eor	r14, r14
    15c0:	ff 24       	eor	r15, r15
    15c2:	87 01       	movw	r16, r14
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	9c 91       	ld	r25, X
    15c8:	d2 01       	movw	r26, r4
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	8c 91       	ld	r24, X
    15ce:	98 17       	cp	r25, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <_fpadd_parts+0x1a2>
    15d2:	45 c0       	rjmp	.+138    	; 0x165e <_fpadd_parts+0x22c>
    15d4:	99 23       	and	r25, r25
    15d6:	39 f0       	breq	.+14     	; 0x15e6 <_fpadd_parts+0x1b4>
    15d8:	a8 01       	movw	r20, r16
    15da:	97 01       	movw	r18, r14
    15dc:	2a 19       	sub	r18, r10
    15de:	3b 09       	sbc	r19, r11
    15e0:	4c 09       	sbc	r20, r12
    15e2:	5d 09       	sbc	r21, r13
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <_fpadd_parts+0x1c0>
    15e6:	a6 01       	movw	r20, r12
    15e8:	95 01       	movw	r18, r10
    15ea:	2e 19       	sub	r18, r14
    15ec:	3f 09       	sbc	r19, r15
    15ee:	40 0b       	sbc	r20, r16
    15f0:	51 0b       	sbc	r21, r17
    15f2:	57 fd       	sbrc	r21, 7
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <_fpadd_parts+0x1d4>
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	33 82       	std	Z+3, r3	; 0x03
    15fa:	22 82       	std	Z+2, r2	; 0x02
    15fc:	24 83       	std	Z+4, r18	; 0x04
    15fe:	35 83       	std	Z+5, r19	; 0x05
    1600:	46 83       	std	Z+6, r20	; 0x06
    1602:	57 83       	std	Z+7, r21	; 0x07
    1604:	1d c0       	rjmp	.+58     	; 0x1640 <_fpadd_parts+0x20e>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	81 83       	std	Z+1, r24	; 0x01
    160a:	33 82       	std	Z+3, r3	; 0x03
    160c:	22 82       	std	Z+2, r2	; 0x02
    160e:	88 27       	eor	r24, r24
    1610:	99 27       	eor	r25, r25
    1612:	dc 01       	movw	r26, r24
    1614:	82 1b       	sub	r24, r18
    1616:	93 0b       	sbc	r25, r19
    1618:	a4 0b       	sbc	r26, r20
    161a:	b5 0b       	sbc	r27, r21
    161c:	84 83       	std	Z+4, r24	; 0x04
    161e:	95 83       	std	Z+5, r25	; 0x05
    1620:	a6 83       	std	Z+6, r26	; 0x06
    1622:	b7 83       	std	Z+7, r27	; 0x07
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <_fpadd_parts+0x20e>
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	44 1f       	adc	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	24 83       	std	Z+4, r18	; 0x04
    1630:	35 83       	std	Z+5, r19	; 0x05
    1632:	46 83       	std	Z+6, r20	; 0x06
    1634:	57 83       	std	Z+7, r21	; 0x07
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	93 83       	std	Z+3, r25	; 0x03
    163e:	82 83       	std	Z+2, r24	; 0x02
    1640:	24 81       	ldd	r18, Z+4	; 0x04
    1642:	35 81       	ldd	r19, Z+5	; 0x05
    1644:	46 81       	ldd	r20, Z+6	; 0x06
    1646:	57 81       	ldd	r21, Z+7	; 0x07
    1648:	da 01       	movw	r26, r20
    164a:	c9 01       	movw	r24, r18
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	a1 09       	sbc	r26, r1
    1650:	b1 09       	sbc	r27, r1
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	af 4f       	sbci	r26, 0xFF	; 255
    1658:	bf 43       	sbci	r27, 0x3F	; 63
    165a:	28 f3       	brcs	.-54     	; 0x1626 <_fpadd_parts+0x1f4>
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <_fpadd_parts+0x242>
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	33 82       	std	Z+3, r3	; 0x03
    1662:	22 82       	std	Z+2, r2	; 0x02
    1664:	ea 0c       	add	r14, r10
    1666:	fb 1c       	adc	r15, r11
    1668:	0c 1d       	adc	r16, r12
    166a:	1d 1d       	adc	r17, r13
    166c:	e4 82       	std	Z+4, r14	; 0x04
    166e:	f5 82       	std	Z+5, r15	; 0x05
    1670:	06 83       	std	Z+6, r16	; 0x06
    1672:	17 83       	std	Z+7, r17	; 0x07
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	80 83       	st	Z, r24
    1678:	24 81       	ldd	r18, Z+4	; 0x04
    167a:	35 81       	ldd	r19, Z+5	; 0x05
    167c:	46 81       	ldd	r20, Z+6	; 0x06
    167e:	57 81       	ldd	r21, Z+7	; 0x07
    1680:	57 ff       	sbrs	r21, 7
    1682:	1a c0       	rjmp	.+52     	; 0x16b8 <_fpadd_parts+0x286>
    1684:	c9 01       	movw	r24, r18
    1686:	aa 27       	eor	r26, r26
    1688:	97 fd       	sbrc	r25, 7
    168a:	a0 95       	com	r26
    168c:	ba 2f       	mov	r27, r26
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	a0 70       	andi	r26, 0x00	; 0
    1694:	b0 70       	andi	r27, 0x00	; 0
    1696:	56 95       	lsr	r21
    1698:	47 95       	ror	r20
    169a:	37 95       	ror	r19
    169c:	27 95       	ror	r18
    169e:	82 2b       	or	r24, r18
    16a0:	93 2b       	or	r25, r19
    16a2:	a4 2b       	or	r26, r20
    16a4:	b5 2b       	or	r27, r21
    16a6:	84 83       	std	Z+4, r24	; 0x04
    16a8:	95 83       	std	Z+5, r25	; 0x05
    16aa:	a6 83       	std	Z+6, r26	; 0x06
    16ac:	b7 83       	std	Z+7, r27	; 0x07
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	93 83       	std	Z+3, r25	; 0x03
    16b6:	82 83       	std	Z+2, r24	; 0x02
    16b8:	df 01       	movw	r26, r30
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <_fpadd_parts+0x28c>
    16bc:	d2 01       	movw	r26, r4
    16be:	cd 01       	movw	r24, r26
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	e2 e1       	ldi	r30, 0x12	; 18
    16c6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__>

000016ca <__subsf3>:
    16ca:	a0 e2       	ldi	r26, 0x20	; 32
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e6       	ldi	r30, 0x6B	; 107
    16d0:	fb e0       	ldi	r31, 0x0B	; 11
    16d2:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
    16d6:	69 83       	std	Y+1, r22	; 0x01
    16d8:	7a 83       	std	Y+2, r23	; 0x02
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	2d 83       	std	Y+5, r18	; 0x05
    16e0:	3e 83       	std	Y+6, r19	; 0x06
    16e2:	4f 83       	std	Y+7, r20	; 0x07
    16e4:	58 87       	std	Y+8, r21	; 0x08
    16e6:	e9 e0       	ldi	r30, 0x09	; 9
    16e8:	ee 2e       	mov	r14, r30
    16ea:	f1 2c       	mov	r15, r1
    16ec:	ec 0e       	add	r14, r28
    16ee:	fd 1e       	adc	r15, r29
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    16fa:	8e 01       	movw	r16, r28
    16fc:	0f 5e       	subi	r16, 0xEF	; 239
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	ce 01       	movw	r24, r28
    1702:	05 96       	adiw	r24, 0x05	; 5
    1704:	b8 01       	movw	r22, r16
    1706:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    170a:	8a 89       	ldd	r24, Y+18	; 0x12
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	89 27       	eor	r24, r25
    1710:	8a 8b       	std	Y+18, r24	; 0x12
    1712:	c7 01       	movw	r24, r14
    1714:	b8 01       	movw	r22, r16
    1716:	ae 01       	movw	r20, r28
    1718:	47 5e       	subi	r20, 0xE7	; 231
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	0e 94 19 0a 	call	0x1432	; 0x1432 <_fpadd_parts>
    1720:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    1724:	a0 96       	adiw	r28, 0x20	; 32
    1726:	e6 e0       	ldi	r30, 0x06	; 6
    1728:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

0000172c <__addsf3>:
    172c:	a0 e2       	ldi	r26, 0x20	; 32
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ec e9       	ldi	r30, 0x9C	; 156
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
    1738:	69 83       	std	Y+1, r22	; 0x01
    173a:	7a 83       	std	Y+2, r23	; 0x02
    173c:	8b 83       	std	Y+3, r24	; 0x03
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	2d 83       	std	Y+5, r18	; 0x05
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	4f 83       	std	Y+7, r20	; 0x07
    1746:	58 87       	std	Y+8, r21	; 0x08
    1748:	f9 e0       	ldi	r31, 0x09	; 9
    174a:	ef 2e       	mov	r14, r31
    174c:	f1 2c       	mov	r15, r1
    174e:	ec 0e       	add	r14, r28
    1750:	fd 1e       	adc	r15, r29
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	b7 01       	movw	r22, r14
    1758:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    175c:	8e 01       	movw	r16, r28
    175e:	0f 5e       	subi	r16, 0xEF	; 239
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	ce 01       	movw	r24, r28
    1764:	05 96       	adiw	r24, 0x05	; 5
    1766:	b8 01       	movw	r22, r16
    1768:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    176c:	c7 01       	movw	r24, r14
    176e:	b8 01       	movw	r22, r16
    1770:	ae 01       	movw	r20, r28
    1772:	47 5e       	subi	r20, 0xE7	; 231
    1774:	5f 4f       	sbci	r21, 0xFF	; 255
    1776:	0e 94 19 0a 	call	0x1432	; 0x1432 <_fpadd_parts>
    177a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    177e:	a0 96       	adiw	r28, 0x20	; 32
    1780:	e6 e0       	ldi	r30, 0x06	; 6
    1782:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00001786 <__mulsf3>:
    1786:	a0 e2       	ldi	r26, 0x20	; 32
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 ec       	ldi	r30, 0xC9	; 201
    178c:	fb e0       	ldi	r31, 0x0B	; 11
    178e:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__>
    1792:	69 83       	std	Y+1, r22	; 0x01
    1794:	7a 83       	std	Y+2, r23	; 0x02
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	3e 83       	std	Y+6, r19	; 0x06
    179e:	4f 83       	std	Y+7, r20	; 0x07
    17a0:	58 87       	std	Y+8, r21	; 0x08
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	be 01       	movw	r22, r28
    17a8:	67 5f       	subi	r22, 0xF7	; 247
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    17b0:	ce 01       	movw	r24, r28
    17b2:	05 96       	adiw	r24, 0x05	; 5
    17b4:	be 01       	movw	r22, r28
    17b6:	6f 5e       	subi	r22, 0xEF	; 239
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    17be:	99 85       	ldd	r25, Y+9	; 0x09
    17c0:	92 30       	cpi	r25, 0x02	; 2
    17c2:	88 f0       	brcs	.+34     	; 0x17e6 <__mulsf3+0x60>
    17c4:	89 89       	ldd	r24, Y+17	; 0x11
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	c8 f0       	brcs	.+50     	; 0x17fc <__mulsf3+0x76>
    17ca:	94 30       	cpi	r25, 0x04	; 4
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <__mulsf3+0x4e>
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	51 f4       	brne	.+20     	; 0x17e6 <__mulsf3+0x60>
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__mulsf3+0x56>
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	29 f4       	brne	.+10     	; 0x17e2 <__mulsf3+0x5c>
    17d8:	92 30       	cpi	r25, 0x02	; 2
    17da:	81 f4       	brne	.+32     	; 0x17fc <__mulsf3+0x76>
    17dc:	8c e4       	ldi	r24, 0x4C	; 76
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	c6 c0       	rjmp	.+396    	; 0x196e <__mulsf3+0x1e8>
    17e2:	92 30       	cpi	r25, 0x02	; 2
    17e4:	49 f4       	brne	.+18     	; 0x17f8 <__mulsf3+0x72>
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	8a 89       	ldd	r24, Y+18	; 0x12
    17ec:	98 13       	cpse	r25, r24
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	2a 87       	std	Y+10, r18	; 0x0a
    17f2:	ce 01       	movw	r24, r28
    17f4:	09 96       	adiw	r24, 0x09	; 9
    17f6:	bb c0       	rjmp	.+374    	; 0x196e <__mulsf3+0x1e8>
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	49 f4       	brne	.+18     	; 0x180e <__mulsf3+0x88>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	8a 89       	ldd	r24, Y+18	; 0x12
    1802:	98 13       	cpse	r25, r24
    1804:	21 e0       	ldi	r18, 0x01	; 1
    1806:	2a 8b       	std	Y+18, r18	; 0x12
    1808:	ce 01       	movw	r24, r28
    180a:	41 96       	adiw	r24, 0x11	; 17
    180c:	b0 c0       	rjmp	.+352    	; 0x196e <__mulsf3+0x1e8>
    180e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1810:	3e 84       	ldd	r3, Y+14	; 0x0e
    1812:	4f 84       	ldd	r4, Y+15	; 0x0f
    1814:	58 88       	ldd	r5, Y+16	; 0x10
    1816:	6d 88       	ldd	r6, Y+21	; 0x15
    1818:	7e 88       	ldd	r7, Y+22	; 0x16
    181a:	8f 88       	ldd	r8, Y+23	; 0x17
    181c:	98 8c       	ldd	r9, Y+24	; 0x18
    181e:	ee 24       	eor	r14, r14
    1820:	ff 24       	eor	r15, r15
    1822:	87 01       	movw	r16, r14
    1824:	aa 24       	eor	r10, r10
    1826:	bb 24       	eor	r11, r11
    1828:	65 01       	movw	r12, r10
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	e0 e0       	ldi	r30, 0x00	; 0
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	c1 01       	movw	r24, r2
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	89 2b       	or	r24, r25
    183e:	e9 f0       	breq	.+58     	; 0x187a <__mulsf3+0xf4>
    1840:	e6 0c       	add	r14, r6
    1842:	f7 1c       	adc	r15, r7
    1844:	08 1d       	adc	r16, r8
    1846:	19 1d       	adc	r17, r9
    1848:	9a 01       	movw	r18, r20
    184a:	ab 01       	movw	r20, r22
    184c:	2a 0d       	add	r18, r10
    184e:	3b 1d       	adc	r19, r11
    1850:	4c 1d       	adc	r20, r12
    1852:	5d 1d       	adc	r21, r13
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e6 14       	cp	r14, r6
    185e:	f7 04       	cpc	r15, r7
    1860:	08 05       	cpc	r16, r8
    1862:	19 05       	cpc	r17, r9
    1864:	20 f4       	brcc	.+8      	; 0x186e <__mulsf3+0xe8>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e0       	ldi	r26, 0x00	; 0
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ba 01       	movw	r22, r20
    1870:	a9 01       	movw	r20, r18
    1872:	48 0f       	add	r20, r24
    1874:	59 1f       	adc	r21, r25
    1876:	6a 1f       	adc	r22, r26
    1878:	7b 1f       	adc	r23, r27
    187a:	aa 0c       	add	r10, r10
    187c:	bb 1c       	adc	r11, r11
    187e:	cc 1c       	adc	r12, r12
    1880:	dd 1c       	adc	r13, r13
    1882:	97 fe       	sbrs	r9, 7
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <__mulsf3+0x110>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	a8 2a       	or	r10, r24
    1890:	b9 2a       	or	r11, r25
    1892:	ca 2a       	or	r12, r26
    1894:	db 2a       	or	r13, r27
    1896:	31 96       	adiw	r30, 0x01	; 1
    1898:	e0 32       	cpi	r30, 0x20	; 32
    189a:	f1 05       	cpc	r31, r1
    189c:	49 f0       	breq	.+18     	; 0x18b0 <__mulsf3+0x12a>
    189e:	66 0c       	add	r6, r6
    18a0:	77 1c       	adc	r7, r7
    18a2:	88 1c       	adc	r8, r8
    18a4:	99 1c       	adc	r9, r9
    18a6:	56 94       	lsr	r5
    18a8:	47 94       	ror	r4
    18aa:	37 94       	ror	r3
    18ac:	27 94       	ror	r2
    18ae:	c3 cf       	rjmp	.-122    	; 0x1836 <__mulsf3+0xb0>
    18b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    18b2:	ea 89       	ldd	r30, Y+18	; 0x12
    18b4:	2b 89       	ldd	r18, Y+19	; 0x13
    18b6:	3c 89       	ldd	r19, Y+20	; 0x14
    18b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    18bc:	28 0f       	add	r18, r24
    18be:	39 1f       	adc	r19, r25
    18c0:	2e 5f       	subi	r18, 0xFE	; 254
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	17 c0       	rjmp	.+46     	; 0x18f4 <__mulsf3+0x16e>
    18c6:	ca 01       	movw	r24, r20
    18c8:	81 70       	andi	r24, 0x01	; 1
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	89 2b       	or	r24, r25
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <__mulsf3+0x162>
    18d0:	16 95       	lsr	r17
    18d2:	07 95       	ror	r16
    18d4:	f7 94       	ror	r15
    18d6:	e7 94       	ror	r14
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e8       	ldi	r27, 0x80	; 128
    18e0:	e8 2a       	or	r14, r24
    18e2:	f9 2a       	or	r15, r25
    18e4:	0a 2b       	or	r16, r26
    18e6:	1b 2b       	or	r17, r27
    18e8:	76 95       	lsr	r23
    18ea:	67 95       	ror	r22
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	77 fd       	sbrc	r23, 7
    18f6:	e7 cf       	rjmp	.-50     	; 0x18c6 <__mulsf3+0x140>
    18f8:	0c c0       	rjmp	.+24     	; 0x1912 <__mulsf3+0x18c>
    18fa:	44 0f       	add	r20, r20
    18fc:	55 1f       	adc	r21, r21
    18fe:	66 1f       	adc	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	17 fd       	sbrc	r17, 7
    1904:	41 60       	ori	r20, 0x01	; 1
    1906:	ee 0c       	add	r14, r14
    1908:	ff 1c       	adc	r15, r15
    190a:	00 1f       	adc	r16, r16
    190c:	11 1f       	adc	r17, r17
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	30 40       	sbci	r19, 0x00	; 0
    1912:	40 30       	cpi	r20, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	59 07       	cpc	r21, r25
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	69 07       	cpc	r22, r25
    191c:	90 e4       	ldi	r25, 0x40	; 64
    191e:	79 07       	cpc	r23, r25
    1920:	60 f3       	brcs	.-40     	; 0x18fa <__mulsf3+0x174>
    1922:	2b 8f       	std	Y+27, r18	; 0x1b
    1924:	3c 8f       	std	Y+28, r19	; 0x1c
    1926:	db 01       	movw	r26, r22
    1928:	ca 01       	movw	r24, r20
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	a0 70       	andi	r26, 0x00	; 0
    1930:	b0 70       	andi	r27, 0x00	; 0
    1932:	80 34       	cpi	r24, 0x40	; 64
    1934:	91 05       	cpc	r25, r1
    1936:	a1 05       	cpc	r26, r1
    1938:	b1 05       	cpc	r27, r1
    193a:	61 f4       	brne	.+24     	; 0x1954 <__mulsf3+0x1ce>
    193c:	47 fd       	sbrc	r20, 7
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <__mulsf3+0x1ce>
    1940:	e1 14       	cp	r14, r1
    1942:	f1 04       	cpc	r15, r1
    1944:	01 05       	cpc	r16, r1
    1946:	11 05       	cpc	r17, r1
    1948:	29 f0       	breq	.+10     	; 0x1954 <__mulsf3+0x1ce>
    194a:	40 5c       	subi	r20, 0xC0	; 192
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	6f 4f       	sbci	r22, 0xFF	; 255
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	40 78       	andi	r20, 0x80	; 128
    1954:	1a 8e       	std	Y+26, r1	; 0x1a
    1956:	fe 17       	cp	r31, r30
    1958:	11 f0       	breq	.+4      	; 0x195e <__mulsf3+0x1d8>
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	8a 8f       	std	Y+26, r24	; 0x1a
    195e:	4d 8f       	std	Y+29, r20	; 0x1d
    1960:	5e 8f       	std	Y+30, r21	; 0x1e
    1962:	6f 8f       	std	Y+31, r22	; 0x1f
    1964:	78 a3       	std	Y+32, r23	; 0x20
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	89 8f       	std	Y+25, r24	; 0x19
    196a:	ce 01       	movw	r24, r28
    196c:	49 96       	adiw	r24, 0x19	; 25
    196e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    1972:	a0 96       	adiw	r28, 0x20	; 32
    1974:	e2 e1       	ldi	r30, 0x12	; 18
    1976:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__>

0000197a <__divsf3>:
    197a:	a8 e1       	ldi	r26, 0x18	; 24
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 ec       	ldi	r30, 0xC3	; 195
    1980:	fc e0       	ldi	r31, 0x0C	; 12
    1982:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x10>
    1986:	69 83       	std	Y+1, r22	; 0x01
    1988:	7a 83       	std	Y+2, r23	; 0x02
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	2d 83       	std	Y+5, r18	; 0x05
    1990:	3e 83       	std	Y+6, r19	; 0x06
    1992:	4f 83       	std	Y+7, r20	; 0x07
    1994:	58 87       	std	Y+8, r21	; 0x08
    1996:	b9 e0       	ldi	r27, 0x09	; 9
    1998:	eb 2e       	mov	r14, r27
    199a:	f1 2c       	mov	r15, r1
    199c:	ec 0e       	add	r14, r28
    199e:	fd 1e       	adc	r15, r29
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	b7 01       	movw	r22, r14
    19a6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    19aa:	8e 01       	movw	r16, r28
    19ac:	0f 5e       	subi	r16, 0xEF	; 239
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	ce 01       	movw	r24, r28
    19b2:	05 96       	adiw	r24, 0x05	; 5
    19b4:	b8 01       	movw	r22, r16
    19b6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    19ba:	29 85       	ldd	r18, Y+9	; 0x09
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <__divsf3+0x48>
    19c0:	7e c0       	rjmp	.+252    	; 0x1abe <__divsf3+0x144>
    19c2:	39 89       	ldd	r19, Y+17	; 0x11
    19c4:	32 30       	cpi	r19, 0x02	; 2
    19c6:	10 f4       	brcc	.+4      	; 0x19cc <__divsf3+0x52>
    19c8:	b8 01       	movw	r22, r16
    19ca:	7c c0       	rjmp	.+248    	; 0x1ac4 <__divsf3+0x14a>
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9a 89       	ldd	r25, Y+18	; 0x12
    19d0:	89 27       	eor	r24, r25
    19d2:	8a 87       	std	Y+10, r24	; 0x0a
    19d4:	24 30       	cpi	r18, 0x04	; 4
    19d6:	11 f0       	breq	.+4      	; 0x19dc <__divsf3+0x62>
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 f4       	brne	.+12     	; 0x19e8 <__divsf3+0x6e>
    19dc:	23 17       	cp	r18, r19
    19de:	09 f0       	breq	.+2      	; 0x19e2 <__divsf3+0x68>
    19e0:	6e c0       	rjmp	.+220    	; 0x1abe <__divsf3+0x144>
    19e2:	6c e4       	ldi	r22, 0x4C	; 76
    19e4:	71 e0       	ldi	r23, 0x01	; 1
    19e6:	6e c0       	rjmp	.+220    	; 0x1ac4 <__divsf3+0x14a>
    19e8:	34 30       	cpi	r19, 0x04	; 4
    19ea:	39 f4       	brne	.+14     	; 0x19fa <__divsf3+0x80>
    19ec:	1d 86       	std	Y+13, r1	; 0x0d
    19ee:	1e 86       	std	Y+14, r1	; 0x0e
    19f0:	1f 86       	std	Y+15, r1	; 0x0f
    19f2:	18 8a       	std	Y+16, r1	; 0x10
    19f4:	1c 86       	std	Y+12, r1	; 0x0c
    19f6:	1b 86       	std	Y+11, r1	; 0x0b
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <__divsf3+0x88>
    19fa:	32 30       	cpi	r19, 0x02	; 2
    19fc:	21 f4       	brne	.+8      	; 0x1a06 <__divsf3+0x8c>
    19fe:	84 e0       	ldi	r24, 0x04	; 4
    1a00:	89 87       	std	Y+9, r24	; 0x09
    1a02:	b7 01       	movw	r22, r14
    1a04:	5f c0       	rjmp	.+190    	; 0x1ac4 <__divsf3+0x14a>
    1a06:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a08:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0e:	28 1b       	sub	r18, r24
    1a10:	39 0b       	sbc	r19, r25
    1a12:	3c 87       	std	Y+12, r19	; 0x0c
    1a14:	2b 87       	std	Y+11, r18	; 0x0b
    1a16:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a18:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a1a:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a1c:	18 89       	ldd	r17, Y+16	; 0x10
    1a1e:	ad 88       	ldd	r10, Y+21	; 0x15
    1a20:	be 88       	ldd	r11, Y+22	; 0x16
    1a22:	cf 88       	ldd	r12, Y+23	; 0x17
    1a24:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a26:	ea 14       	cp	r14, r10
    1a28:	fb 04       	cpc	r15, r11
    1a2a:	0c 05       	cpc	r16, r12
    1a2c:	1d 05       	cpc	r17, r13
    1a2e:	40 f4       	brcc	.+16     	; 0x1a40 <__divsf3+0xc6>
    1a30:	ee 0c       	add	r14, r14
    1a32:	ff 1c       	adc	r15, r15
    1a34:	00 1f       	adc	r16, r16
    1a36:	11 1f       	adc	r17, r17
    1a38:	21 50       	subi	r18, 0x01	; 1
    1a3a:	30 40       	sbci	r19, 0x00	; 0
    1a3c:	3c 87       	std	Y+12, r19	; 0x0c
    1a3e:	2b 87       	std	Y+11, r18	; 0x0b
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e4       	ldi	r27, 0x40	; 64
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	ea 14       	cp	r14, r10
    1a56:	fb 04       	cpc	r15, r11
    1a58:	0c 05       	cpc	r16, r12
    1a5a:	1d 05       	cpc	r17, r13
    1a5c:	40 f0       	brcs	.+16     	; 0x1a6e <__divsf3+0xf4>
    1a5e:	28 2b       	or	r18, r24
    1a60:	39 2b       	or	r19, r25
    1a62:	4a 2b       	or	r20, r26
    1a64:	5b 2b       	or	r21, r27
    1a66:	ea 18       	sub	r14, r10
    1a68:	fb 08       	sbc	r15, r11
    1a6a:	0c 09       	sbc	r16, r12
    1a6c:	1d 09       	sbc	r17, r13
    1a6e:	b6 95       	lsr	r27
    1a70:	a7 95       	ror	r26
    1a72:	97 95       	ror	r25
    1a74:	87 95       	ror	r24
    1a76:	ee 0c       	add	r14, r14
    1a78:	ff 1c       	adc	r15, r15
    1a7a:	00 1f       	adc	r16, r16
    1a7c:	11 1f       	adc	r17, r17
    1a7e:	6f 5f       	subi	r22, 0xFF	; 255
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	6f 31       	cpi	r22, 0x1F	; 31
    1a84:	71 05       	cpc	r23, r1
    1a86:	31 f7       	brne	.-52     	; 0x1a54 <__divsf3+0xda>
    1a88:	da 01       	movw	r26, r20
    1a8a:	c9 01       	movw	r24, r18
    1a8c:	8f 77       	andi	r24, 0x7F	; 127
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	a0 70       	andi	r26, 0x00	; 0
    1a92:	b0 70       	andi	r27, 0x00	; 0
    1a94:	80 34       	cpi	r24, 0x40	; 64
    1a96:	91 05       	cpc	r25, r1
    1a98:	a1 05       	cpc	r26, r1
    1a9a:	b1 05       	cpc	r27, r1
    1a9c:	61 f4       	brne	.+24     	; 0x1ab6 <__divsf3+0x13c>
    1a9e:	27 fd       	sbrc	r18, 7
    1aa0:	0a c0       	rjmp	.+20     	; 0x1ab6 <__divsf3+0x13c>
    1aa2:	e1 14       	cp	r14, r1
    1aa4:	f1 04       	cpc	r15, r1
    1aa6:	01 05       	cpc	r16, r1
    1aa8:	11 05       	cpc	r17, r1
    1aaa:	29 f0       	breq	.+10     	; 0x1ab6 <__divsf3+0x13c>
    1aac:	20 5c       	subi	r18, 0xC0	; 192
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	20 78       	andi	r18, 0x80	; 128
    1ab6:	2d 87       	std	Y+13, r18	; 0x0d
    1ab8:	3e 87       	std	Y+14, r19	; 0x0e
    1aba:	4f 87       	std	Y+15, r20	; 0x0f
    1abc:	58 8b       	std	Y+16, r21	; 0x10
    1abe:	be 01       	movw	r22, r28
    1ac0:	67 5f       	subi	r22, 0xF7	; 247
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    1aca:	68 96       	adiw	r28, 0x18	; 24
    1acc:	ea e0       	ldi	r30, 0x0A	; 10
    1ace:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x10>

00001ad2 <__gtsf2>:
    1ad2:	a8 e1       	ldi	r26, 0x18	; 24
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e6       	ldi	r30, 0x6F	; 111
    1ad8:	fd e0       	ldi	r31, 0x0D	; 13
    1ada:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
    1ade:	69 83       	std	Y+1, r22	; 0x01
    1ae0:	7a 83       	std	Y+2, r23	; 0x02
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	2d 83       	std	Y+5, r18	; 0x05
    1ae8:	3e 83       	std	Y+6, r19	; 0x06
    1aea:	4f 83       	std	Y+7, r20	; 0x07
    1aec:	58 87       	std	Y+8, r21	; 0x08
    1aee:	89 e0       	ldi	r24, 0x09	; 9
    1af0:	e8 2e       	mov	r14, r24
    1af2:	f1 2c       	mov	r15, r1
    1af4:	ec 0e       	add	r14, r28
    1af6:	fd 1e       	adc	r15, r29
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	b7 01       	movw	r22, r14
    1afe:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1b02:	8e 01       	movw	r16, r28
    1b04:	0f 5e       	subi	r16, 0xEF	; 239
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	ce 01       	movw	r24, r28
    1b0a:	05 96       	adiw	r24, 0x05	; 5
    1b0c:	b8 01       	movw	r22, r16
    1b0e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	40 f0       	brcs	.+16     	; 0x1b28 <__gtsf2+0x56>
    1b18:	89 89       	ldd	r24, Y+17	; 0x11
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	28 f0       	brcs	.+10     	; 0x1b28 <__gtsf2+0x56>
    1b1e:	c7 01       	movw	r24, r14
    1b20:	b8 01       	movw	r22, r16
    1b22:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fpcmp_parts_f>
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <__gtsf2+0x58>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	68 96       	adiw	r28, 0x18	; 24
    1b2c:	e6 e0       	ldi	r30, 0x06	; 6
    1b2e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00001b32 <__ltsf2>:
    1b32:	a8 e1       	ldi	r26, 0x18	; 24
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ef e9       	ldi	r30, 0x9F	; 159
    1b38:	fd e0       	ldi	r31, 0x0D	; 13
    1b3a:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
    1b3e:	69 83       	std	Y+1, r22	; 0x01
    1b40:	7a 83       	std	Y+2, r23	; 0x02
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	3e 83       	std	Y+6, r19	; 0x06
    1b4a:	4f 83       	std	Y+7, r20	; 0x07
    1b4c:	58 87       	std	Y+8, r21	; 0x08
    1b4e:	89 e0       	ldi	r24, 0x09	; 9
    1b50:	e8 2e       	mov	r14, r24
    1b52:	f1 2c       	mov	r15, r1
    1b54:	ec 0e       	add	r14, r28
    1b56:	fd 1e       	adc	r15, r29
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1b62:	8e 01       	movw	r16, r28
    1b64:	0f 5e       	subi	r16, 0xEF	; 239
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	ce 01       	movw	r24, r28
    1b6a:	05 96       	adiw	r24, 0x05	; 5
    1b6c:	b8 01       	movw	r22, r16
    1b6e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	40 f0       	brcs	.+16     	; 0x1b88 <__ltsf2+0x56>
    1b78:	89 89       	ldd	r24, Y+17	; 0x11
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	28 f0       	brcs	.+10     	; 0x1b88 <__ltsf2+0x56>
    1b7e:	c7 01       	movw	r24, r14
    1b80:	b8 01       	movw	r22, r16
    1b82:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fpcmp_parts_f>
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <__ltsf2+0x58>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	68 96       	adiw	r28, 0x18	; 24
    1b8c:	e6 e0       	ldi	r30, 0x06	; 6
    1b8e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00001b92 <__lesf2>:
    1b92:	a8 e1       	ldi	r26, 0x18	; 24
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef ec       	ldi	r30, 0xCF	; 207
    1b98:	fd e0       	ldi	r31, 0x0D	; 13
    1b9a:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
    1b9e:	69 83       	std	Y+1, r22	; 0x01
    1ba0:	7a 83       	std	Y+2, r23	; 0x02
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	2d 83       	std	Y+5, r18	; 0x05
    1ba8:	3e 83       	std	Y+6, r19	; 0x06
    1baa:	4f 83       	std	Y+7, r20	; 0x07
    1bac:	58 87       	std	Y+8, r21	; 0x08
    1bae:	89 e0       	ldi	r24, 0x09	; 9
    1bb0:	e8 2e       	mov	r14, r24
    1bb2:	f1 2c       	mov	r15, r1
    1bb4:	ec 0e       	add	r14, r28
    1bb6:	fd 1e       	adc	r15, r29
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	b7 01       	movw	r22, r14
    1bbe:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1bc2:	8e 01       	movw	r16, r28
    1bc4:	0f 5e       	subi	r16, 0xEF	; 239
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	ce 01       	movw	r24, r28
    1bca:	05 96       	adiw	r24, 0x05	; 5
    1bcc:	b8 01       	movw	r22, r16
    1bce:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__unpack_f>
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	40 f0       	brcs	.+16     	; 0x1be8 <__lesf2+0x56>
    1bd8:	89 89       	ldd	r24, Y+17	; 0x11
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	28 f0       	brcs	.+10     	; 0x1be8 <__lesf2+0x56>
    1bde:	c7 01       	movw	r24, r14
    1be0:	b8 01       	movw	r22, r16
    1be2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fpcmp_parts_f>
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <__lesf2+0x58>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	68 96       	adiw	r28, 0x18	; 24
    1bec:	e6 e0       	ldi	r30, 0x06	; 6
    1bee:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00001bf2 <__floatsisf>:
    1bf2:	a8 e0       	ldi	r26, 0x08	; 8
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ef ef       	ldi	r30, 0xFF	; 255
    1bf8:	fd e0       	ldi	r31, 0x0D	; 13
    1bfa:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__+0x12>
    1bfe:	9b 01       	movw	r18, r22
    1c00:	ac 01       	movw	r20, r24
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	da 01       	movw	r26, r20
    1c08:	c9 01       	movw	r24, r18
    1c0a:	88 27       	eor	r24, r24
    1c0c:	b7 fd       	sbrc	r27, 7
    1c0e:	83 95       	inc	r24
    1c10:	99 27       	eor	r25, r25
    1c12:	aa 27       	eor	r26, r26
    1c14:	bb 27       	eor	r27, r27
    1c16:	b8 2e       	mov	r11, r24
    1c18:	21 15       	cp	r18, r1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	41 05       	cpc	r20, r1
    1c1e:	51 05       	cpc	r21, r1
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <__floatsisf+0x36>
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	3a c0       	rjmp	.+116    	; 0x1c9c <__floatsisf+0xaa>
    1c28:	88 23       	and	r24, r24
    1c2a:	a9 f0       	breq	.+42     	; 0x1c56 <__floatsisf+0x64>
    1c2c:	20 30       	cpi	r18, 0x00	; 0
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	38 07       	cpc	r19, r24
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	48 07       	cpc	r20, r24
    1c36:	80 e8       	ldi	r24, 0x80	; 128
    1c38:	58 07       	cpc	r21, r24
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <__floatsisf+0x54>
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	9f ec       	ldi	r25, 0xCF	; 207
    1c44:	30 c0       	rjmp	.+96     	; 0x1ca6 <__floatsisf+0xb4>
    1c46:	ee 24       	eor	r14, r14
    1c48:	ff 24       	eor	r15, r15
    1c4a:	87 01       	movw	r16, r14
    1c4c:	e2 1a       	sub	r14, r18
    1c4e:	f3 0a       	sbc	r15, r19
    1c50:	04 0b       	sbc	r16, r20
    1c52:	15 0b       	sbc	r17, r21
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <__floatsisf+0x68>
    1c56:	79 01       	movw	r14, r18
    1c58:	8a 01       	movw	r16, r20
    1c5a:	8e e1       	ldi	r24, 0x1E	; 30
    1c5c:	c8 2e       	mov	r12, r24
    1c5e:	d1 2c       	mov	r13, r1
    1c60:	dc 82       	std	Y+4, r13	; 0x04
    1c62:	cb 82       	std	Y+3, r12	; 0x03
    1c64:	ed 82       	std	Y+5, r14	; 0x05
    1c66:	fe 82       	std	Y+6, r15	; 0x06
    1c68:	0f 83       	std	Y+7, r16	; 0x07
    1c6a:	18 87       	std	Y+8, r17	; 0x08
    1c6c:	c8 01       	movw	r24, r16
    1c6e:	b7 01       	movw	r22, r14
    1c70:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__clzsi2>
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	18 16       	cp	r1, r24
    1c78:	19 06       	cpc	r1, r25
    1c7a:	84 f4       	brge	.+32     	; 0x1c9c <__floatsisf+0xaa>
    1c7c:	08 2e       	mov	r0, r24
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <__floatsisf+0x96>
    1c80:	ee 0c       	add	r14, r14
    1c82:	ff 1c       	adc	r15, r15
    1c84:	00 1f       	adc	r16, r16
    1c86:	11 1f       	adc	r17, r17
    1c88:	0a 94       	dec	r0
    1c8a:	d2 f7       	brpl	.-12     	; 0x1c80 <__floatsisf+0x8e>
    1c8c:	ed 82       	std	Y+5, r14	; 0x05
    1c8e:	fe 82       	std	Y+6, r15	; 0x06
    1c90:	0f 83       	std	Y+7, r16	; 0x07
    1c92:	18 87       	std	Y+8, r17	; 0x08
    1c94:	c8 1a       	sub	r12, r24
    1c96:	d9 0a       	sbc	r13, r25
    1c98:	dc 82       	std	Y+4, r13	; 0x04
    1c9a:	cb 82       	std	Y+3, r12	; 0x03
    1c9c:	ba 82       	std	Y+2, r11	; 0x02
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    1ca6:	28 96       	adiw	r28, 0x08	; 8
    1ca8:	e9 e0       	ldi	r30, 0x09	; 9
    1caa:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__+0x12>

00001cae <__floatunsisf>:
    1cae:	a8 e0       	ldi	r26, 0x08	; 8
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ed e5       	ldi	r30, 0x5D	; 93
    1cb4:	fe e0       	ldi	r31, 0x0E	; 14
    1cb6:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x10>
    1cba:	7b 01       	movw	r14, r22
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	61 15       	cp	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	81 05       	cpc	r24, r1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	19 f4       	brne	.+6      	; 0x1cce <__floatunsisf+0x20>
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	60 c0       	rjmp	.+192    	; 0x1d8e <__floatunsisf+0xe0>
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	8e e1       	ldi	r24, 0x1E	; 30
    1cd4:	c8 2e       	mov	r12, r24
    1cd6:	d1 2c       	mov	r13, r1
    1cd8:	dc 82       	std	Y+4, r13	; 0x04
    1cda:	cb 82       	std	Y+3, r12	; 0x03
    1cdc:	ed 82       	std	Y+5, r14	; 0x05
    1cde:	fe 82       	std	Y+6, r15	; 0x06
    1ce0:	0f 83       	std	Y+7, r16	; 0x07
    1ce2:	18 87       	std	Y+8, r17	; 0x08
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__clzsi2>
    1cec:	fc 01       	movw	r30, r24
    1cee:	31 97       	sbiw	r30, 0x01	; 1
    1cf0:	f7 ff       	sbrs	r31, 7
    1cf2:	3b c0       	rjmp	.+118    	; 0x1d6a <__floatunsisf+0xbc>
    1cf4:	22 27       	eor	r18, r18
    1cf6:	33 27       	eor	r19, r19
    1cf8:	2e 1b       	sub	r18, r30
    1cfa:	3f 0b       	sbc	r19, r31
    1cfc:	57 01       	movw	r10, r14
    1cfe:	68 01       	movw	r12, r16
    1d00:	02 2e       	mov	r0, r18
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <__floatunsisf+0x5e>
    1d04:	d6 94       	lsr	r13
    1d06:	c7 94       	ror	r12
    1d08:	b7 94       	ror	r11
    1d0a:	a7 94       	ror	r10
    1d0c:	0a 94       	dec	r0
    1d0e:	d2 f7       	brpl	.-12     	; 0x1d04 <__floatunsisf+0x56>
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <__floatunsisf+0x7c>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	2a 95       	dec	r18
    1d2c:	d2 f7       	brpl	.-12     	; 0x1d22 <__floatunsisf+0x74>
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	a1 09       	sbc	r26, r1
    1d32:	b1 09       	sbc	r27, r1
    1d34:	8e 21       	and	r24, r14
    1d36:	9f 21       	and	r25, r15
    1d38:	a0 23       	and	r26, r16
    1d3a:	b1 23       	and	r27, r17
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	a1 05       	cpc	r26, r1
    1d40:	b1 05       	cpc	r27, r1
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <__floatunsisf+0x9e>
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	4a 29       	or	r20, r10
    1d4e:	5b 29       	or	r21, r11
    1d50:	6c 29       	or	r22, r12
    1d52:	7d 29       	or	r23, r13
    1d54:	4d 83       	std	Y+5, r20	; 0x05
    1d56:	5e 83       	std	Y+6, r21	; 0x06
    1d58:	6f 83       	std	Y+7, r22	; 0x07
    1d5a:	78 87       	std	Y+8, r23	; 0x08
    1d5c:	8e e1       	ldi	r24, 0x1E	; 30
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	8e 1b       	sub	r24, r30
    1d62:	9f 0b       	sbc	r25, r31
    1d64:	9c 83       	std	Y+4, r25	; 0x04
    1d66:	8b 83       	std	Y+3, r24	; 0x03
    1d68:	12 c0       	rjmp	.+36     	; 0x1d8e <__floatunsisf+0xe0>
    1d6a:	30 97       	sbiw	r30, 0x00	; 0
    1d6c:	81 f0       	breq	.+32     	; 0x1d8e <__floatunsisf+0xe0>
    1d6e:	0e 2e       	mov	r0, r30
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <__floatunsisf+0xcc>
    1d72:	ee 0c       	add	r14, r14
    1d74:	ff 1c       	adc	r15, r15
    1d76:	00 1f       	adc	r16, r16
    1d78:	11 1f       	adc	r17, r17
    1d7a:	0a 94       	dec	r0
    1d7c:	d2 f7       	brpl	.-12     	; 0x1d72 <__floatunsisf+0xc4>
    1d7e:	ed 82       	std	Y+5, r14	; 0x05
    1d80:	fe 82       	std	Y+6, r15	; 0x06
    1d82:	0f 83       	std	Y+7, r16	; 0x07
    1d84:	18 87       	std	Y+8, r17	; 0x08
    1d86:	ce 1a       	sub	r12, r30
    1d88:	df 0a       	sbc	r13, r31
    1d8a:	dc 82       	std	Y+4, r13	; 0x04
    1d8c:	cb 82       	std	Y+3, r12	; 0x03
    1d8e:	1a 82       	std	Y+2, r1	; 0x02
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__pack_f>
    1d98:	28 96       	adiw	r28, 0x08	; 8
    1d9a:	ea e0       	ldi	r30, 0x0A	; 10
    1d9c:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x10>

00001da0 <__clzsi2>:
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	7b 01       	movw	r14, r22
    1daa:	8c 01       	movw	r16, r24
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	e8 16       	cp	r14, r24
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	f8 06       	cpc	r15, r24
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	08 07       	cpc	r16, r24
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	18 07       	cpc	r17, r24
    1dbc:	88 f4       	brcc	.+34     	; 0x1de0 <__clzsi2+0x40>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	e8 16       	cp	r14, r24
    1dc2:	f1 04       	cpc	r15, r1
    1dc4:	01 05       	cpc	r16, r1
    1dc6:	11 05       	cpc	r17, r1
    1dc8:	31 f0       	breq	.+12     	; 0x1dd6 <__clzsi2+0x36>
    1dca:	28 f0       	brcs	.+10     	; 0x1dd6 <__clzsi2+0x36>
    1dcc:	88 e0       	ldi	r24, 0x08	; 8
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e0       	ldi	r26, 0x00	; 0
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	17 c0       	rjmp	.+46     	; 0x1e04 <__clzsi2+0x64>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	12 c0       	rjmp	.+36     	; 0x1e04 <__clzsi2+0x64>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	e8 16       	cp	r14, r24
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	f8 06       	cpc	r15, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	08 07       	cpc	r16, r24
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	18 07       	cpc	r17, r24
    1df0:	28 f0       	brcs	.+10     	; 0x1dfc <__clzsi2+0x5c>
    1df2:	88 e1       	ldi	r24, 0x18	; 24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e0       	ldi	r26, 0x00	; 0
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <__clzsi2+0x64>
    1dfc:	80 e1       	ldi	r24, 0x10	; 16
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	20 e2       	ldi	r18, 0x20	; 32
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	28 1b       	sub	r18, r24
    1e0e:	39 0b       	sbc	r19, r25
    1e10:	4a 0b       	sbc	r20, r26
    1e12:	5b 0b       	sbc	r21, r27
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <__clzsi2+0x7e>
    1e16:	16 95       	lsr	r17
    1e18:	07 95       	ror	r16
    1e1a:	f7 94       	ror	r15
    1e1c:	e7 94       	ror	r14
    1e1e:	8a 95       	dec	r24
    1e20:	d2 f7       	brpl	.-12     	; 0x1e16 <__clzsi2+0x76>
    1e22:	f7 01       	movw	r30, r14
    1e24:	ec 5a       	subi	r30, 0xAC	; 172
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	80 81       	ld	r24, Z
    1e2a:	28 1b       	sub	r18, r24
    1e2c:	31 09       	sbc	r19, r1
    1e2e:	41 09       	sbc	r20, r1
    1e30:	51 09       	sbc	r21, r1
    1e32:	c9 01       	movw	r24, r18
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <__pack_f>:
    1e3e:	df 92       	push	r13
    1e40:	ef 92       	push	r14
    1e42:	ff 92       	push	r15
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e4 80       	ldd	r14, Z+4	; 0x04
    1e4c:	f5 80       	ldd	r15, Z+5	; 0x05
    1e4e:	06 81       	ldd	r16, Z+6	; 0x06
    1e50:	17 81       	ldd	r17, Z+7	; 0x07
    1e52:	d1 80       	ldd	r13, Z+1	; 0x01
    1e54:	80 81       	ld	r24, Z
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	48 f4       	brcc	.+18     	; 0x1e6c <__pack_f+0x2e>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 e1       	ldi	r26, 0x10	; 16
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e8 2a       	or	r14, r24
    1e64:	f9 2a       	or	r15, r25
    1e66:	0a 2b       	or	r16, r26
    1e68:	1b 2b       	or	r17, r27
    1e6a:	a5 c0       	rjmp	.+330    	; 0x1fb6 <__pack_f+0x178>
    1e6c:	84 30       	cpi	r24, 0x04	; 4
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__pack_f+0x34>
    1e70:	9f c0       	rjmp	.+318    	; 0x1fb0 <__pack_f+0x172>
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	21 f4       	brne	.+8      	; 0x1e7e <__pack_f+0x40>
    1e76:	ee 24       	eor	r14, r14
    1e78:	ff 24       	eor	r15, r15
    1e7a:	87 01       	movw	r16, r14
    1e7c:	05 c0       	rjmp	.+10     	; 0x1e88 <__pack_f+0x4a>
    1e7e:	e1 14       	cp	r14, r1
    1e80:	f1 04       	cpc	r15, r1
    1e82:	01 05       	cpc	r16, r1
    1e84:	11 05       	cpc	r17, r1
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <__pack_f+0x50>
    1e88:	e0 e0       	ldi	r30, 0x00	; 0
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	96 c0       	rjmp	.+300    	; 0x1fba <__pack_f+0x17c>
    1e8e:	62 81       	ldd	r22, Z+2	; 0x02
    1e90:	73 81       	ldd	r23, Z+3	; 0x03
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	62 38       	cpi	r22, 0x82	; 130
    1e96:	79 07       	cpc	r23, r25
    1e98:	0c f0       	brlt	.+2      	; 0x1e9c <__pack_f+0x5e>
    1e9a:	5b c0       	rjmp	.+182    	; 0x1f52 <__pack_f+0x114>
    1e9c:	22 e8       	ldi	r18, 0x82	; 130
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	26 1b       	sub	r18, r22
    1ea2:	37 0b       	sbc	r19, r23
    1ea4:	2a 31       	cpi	r18, 0x1A	; 26
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f0       	brlt	.+10     	; 0x1eb4 <__pack_f+0x76>
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	2a c0       	rjmp	.+84     	; 0x1f08 <__pack_f+0xca>
    1eb4:	b8 01       	movw	r22, r16
    1eb6:	a7 01       	movw	r20, r14
    1eb8:	02 2e       	mov	r0, r18
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <__pack_f+0x86>
    1ebc:	76 95       	lsr	r23
    1ebe:	67 95       	ror	r22
    1ec0:	57 95       	ror	r21
    1ec2:	47 95       	ror	r20
    1ec4:	0a 94       	dec	r0
    1ec6:	d2 f7       	brpl	.-12     	; 0x1ebc <__pack_f+0x7e>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <__pack_f+0x9c>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	2a 95       	dec	r18
    1edc:	d2 f7       	brpl	.-12     	; 0x1ed2 <__pack_f+0x94>
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	a1 09       	sbc	r26, r1
    1ee2:	b1 09       	sbc	r27, r1
    1ee4:	8e 21       	and	r24, r14
    1ee6:	9f 21       	and	r25, r15
    1ee8:	a0 23       	and	r26, r16
    1eea:	b1 23       	and	r27, r17
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	a1 05       	cpc	r26, r1
    1ef0:	b1 05       	cpc	r27, r1
    1ef2:	21 f0       	breq	.+8      	; 0x1efc <__pack_f+0xbe>
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e0       	ldi	r26, 0x00	; 0
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	9a 01       	movw	r18, r20
    1efe:	ab 01       	movw	r20, r22
    1f00:	28 2b       	or	r18, r24
    1f02:	39 2b       	or	r19, r25
    1f04:	4a 2b       	or	r20, r26
    1f06:	5b 2b       	or	r21, r27
    1f08:	da 01       	movw	r26, r20
    1f0a:	c9 01       	movw	r24, r18
    1f0c:	8f 77       	andi	r24, 0x7F	; 127
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	a0 70       	andi	r26, 0x00	; 0
    1f12:	b0 70       	andi	r27, 0x00	; 0
    1f14:	80 34       	cpi	r24, 0x40	; 64
    1f16:	91 05       	cpc	r25, r1
    1f18:	a1 05       	cpc	r26, r1
    1f1a:	b1 05       	cpc	r27, r1
    1f1c:	39 f4       	brne	.+14     	; 0x1f2c <__pack_f+0xee>
    1f1e:	27 ff       	sbrs	r18, 7
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <__pack_f+0xf6>
    1f22:	20 5c       	subi	r18, 0xC0	; 192
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	4f 4f       	sbci	r20, 0xFF	; 255
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <__pack_f+0xf6>
    1f2c:	21 5c       	subi	r18, 0xC1	; 193
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	4f 4f       	sbci	r20, 0xFF	; 255
    1f32:	5f 4f       	sbci	r21, 0xFF	; 255
    1f34:	e0 e0       	ldi	r30, 0x00	; 0
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	20 30       	cpi	r18, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	3a 07       	cpc	r19, r26
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	4a 07       	cpc	r20, r26
    1f42:	a0 e4       	ldi	r26, 0x40	; 64
    1f44:	5a 07       	cpc	r21, r26
    1f46:	10 f0       	brcs	.+4      	; 0x1f4c <__pack_f+0x10e>
    1f48:	e1 e0       	ldi	r30, 0x01	; 1
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	79 01       	movw	r14, r18
    1f4e:	8a 01       	movw	r16, r20
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <__pack_f+0x162>
    1f52:	60 38       	cpi	r22, 0x80	; 128
    1f54:	71 05       	cpc	r23, r1
    1f56:	64 f5       	brge	.+88     	; 0x1fb0 <__pack_f+0x172>
    1f58:	fb 01       	movw	r30, r22
    1f5a:	e1 58       	subi	r30, 0x81	; 129
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	d8 01       	movw	r26, r16
    1f60:	c7 01       	movw	r24, r14
    1f62:	8f 77       	andi	r24, 0x7F	; 127
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	a0 70       	andi	r26, 0x00	; 0
    1f68:	b0 70       	andi	r27, 0x00	; 0
    1f6a:	80 34       	cpi	r24, 0x40	; 64
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	a1 05       	cpc	r26, r1
    1f70:	b1 05       	cpc	r27, r1
    1f72:	39 f4       	brne	.+14     	; 0x1f82 <__pack_f+0x144>
    1f74:	e7 fe       	sbrs	r14, 7
    1f76:	0d c0       	rjmp	.+26     	; 0x1f92 <__pack_f+0x154>
    1f78:	80 e4       	ldi	r24, 0x40	; 64
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e0       	ldi	r26, 0x00	; 0
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <__pack_f+0x14c>
    1f82:	8f e3       	ldi	r24, 0x3F	; 63
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e8 0e       	add	r14, r24
    1f8c:	f9 1e       	adc	r15, r25
    1f8e:	0a 1f       	adc	r16, r26
    1f90:	1b 1f       	adc	r17, r27
    1f92:	17 ff       	sbrs	r17, 7
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <__pack_f+0x162>
    1f96:	16 95       	lsr	r17
    1f98:	07 95       	ror	r16
    1f9a:	f7 94       	ror	r15
    1f9c:	e7 94       	ror	r14
    1f9e:	31 96       	adiw	r30, 0x01	; 1
    1fa0:	87 e0       	ldi	r24, 0x07	; 7
    1fa2:	16 95       	lsr	r17
    1fa4:	07 95       	ror	r16
    1fa6:	f7 94       	ror	r15
    1fa8:	e7 94       	ror	r14
    1faa:	8a 95       	dec	r24
    1fac:	d1 f7       	brne	.-12     	; 0x1fa2 <__pack_f+0x164>
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <__pack_f+0x17c>
    1fb0:	ee 24       	eor	r14, r14
    1fb2:	ff 24       	eor	r15, r15
    1fb4:	87 01       	movw	r16, r14
    1fb6:	ef ef       	ldi	r30, 0xFF	; 255
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	6e 2f       	mov	r22, r30
    1fbc:	67 95       	ror	r22
    1fbe:	66 27       	eor	r22, r22
    1fc0:	67 95       	ror	r22
    1fc2:	90 2f       	mov	r25, r16
    1fc4:	9f 77       	andi	r25, 0x7F	; 127
    1fc6:	d7 94       	ror	r13
    1fc8:	dd 24       	eor	r13, r13
    1fca:	d7 94       	ror	r13
    1fcc:	8e 2f       	mov	r24, r30
    1fce:	86 95       	lsr	r24
    1fd0:	49 2f       	mov	r20, r25
    1fd2:	46 2b       	or	r20, r22
    1fd4:	58 2f       	mov	r21, r24
    1fd6:	5d 29       	or	r21, r13
    1fd8:	b7 01       	movw	r22, r14
    1fda:	ca 01       	movw	r24, r20
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	08 95       	ret

00001fe8 <__unpack_f>:
    1fe8:	fc 01       	movw	r30, r24
    1fea:	db 01       	movw	r26, r22
    1fec:	40 81       	ld	r20, Z
    1fee:	51 81       	ldd	r21, Z+1	; 0x01
    1ff0:	22 81       	ldd	r18, Z+2	; 0x02
    1ff2:	62 2f       	mov	r22, r18
    1ff4:	6f 77       	andi	r22, 0x7F	; 127
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	22 1f       	adc	r18, r18
    1ffa:	22 27       	eor	r18, r18
    1ffc:	22 1f       	adc	r18, r18
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	89 2f       	mov	r24, r25
    2002:	88 0f       	add	r24, r24
    2004:	82 2b       	or	r24, r18
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	99 1f       	adc	r25, r25
    200c:	99 27       	eor	r25, r25
    200e:	99 1f       	adc	r25, r25
    2010:	11 96       	adiw	r26, 0x01	; 1
    2012:	9c 93       	st	X, r25
    2014:	11 97       	sbiw	r26, 0x01	; 1
    2016:	21 15       	cp	r18, r1
    2018:	31 05       	cpc	r19, r1
    201a:	a9 f5       	brne	.+106    	; 0x2086 <__unpack_f+0x9e>
    201c:	41 15       	cp	r20, r1
    201e:	51 05       	cpc	r21, r1
    2020:	61 05       	cpc	r22, r1
    2022:	71 05       	cpc	r23, r1
    2024:	11 f4       	brne	.+4      	; 0x202a <__unpack_f+0x42>
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	37 c0       	rjmp	.+110    	; 0x2098 <__unpack_f+0xb0>
    202a:	82 e8       	ldi	r24, 0x82	; 130
    202c:	9f ef       	ldi	r25, 0xFF	; 255
    202e:	13 96       	adiw	r26, 0x03	; 3
    2030:	9c 93       	st	X, r25
    2032:	8e 93       	st	-X, r24
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	9a 01       	movw	r18, r20
    2038:	ab 01       	movw	r20, r22
    203a:	67 e0       	ldi	r22, 0x07	; 7
    203c:	22 0f       	add	r18, r18
    203e:	33 1f       	adc	r19, r19
    2040:	44 1f       	adc	r20, r20
    2042:	55 1f       	adc	r21, r21
    2044:	6a 95       	dec	r22
    2046:	d1 f7       	brne	.-12     	; 0x203c <__unpack_f+0x54>
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	8c 93       	st	X, r24
    204c:	0d c0       	rjmp	.+26     	; 0x2068 <__unpack_f+0x80>
    204e:	22 0f       	add	r18, r18
    2050:	33 1f       	adc	r19, r19
    2052:	44 1f       	adc	r20, r20
    2054:	55 1f       	adc	r21, r21
    2056:	12 96       	adiw	r26, 0x02	; 2
    2058:	8d 91       	ld	r24, X+
    205a:	9c 91       	ld	r25, X
    205c:	13 97       	sbiw	r26, 0x03	; 3
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	13 96       	adiw	r26, 0x03	; 3
    2062:	9c 93       	st	X, r25
    2064:	8e 93       	st	-X, r24
    2066:	12 97       	sbiw	r26, 0x02	; 2
    2068:	20 30       	cpi	r18, 0x00	; 0
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	38 07       	cpc	r19, r24
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	48 07       	cpc	r20, r24
    2072:	80 e4       	ldi	r24, 0x40	; 64
    2074:	58 07       	cpc	r21, r24
    2076:	58 f3       	brcs	.-42     	; 0x204e <__unpack_f+0x66>
    2078:	14 96       	adiw	r26, 0x04	; 4
    207a:	2d 93       	st	X+, r18
    207c:	3d 93       	st	X+, r19
    207e:	4d 93       	st	X+, r20
    2080:	5c 93       	st	X, r21
    2082:	17 97       	sbiw	r26, 0x07	; 7
    2084:	08 95       	ret
    2086:	2f 3f       	cpi	r18, 0xFF	; 255
    2088:	31 05       	cpc	r19, r1
    208a:	79 f4       	brne	.+30     	; 0x20aa <__unpack_f+0xc2>
    208c:	41 15       	cp	r20, r1
    208e:	51 05       	cpc	r21, r1
    2090:	61 05       	cpc	r22, r1
    2092:	71 05       	cpc	r23, r1
    2094:	19 f4       	brne	.+6      	; 0x209c <__unpack_f+0xb4>
    2096:	84 e0       	ldi	r24, 0x04	; 4
    2098:	8c 93       	st	X, r24
    209a:	08 95       	ret
    209c:	64 ff       	sbrs	r22, 4
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <__unpack_f+0xbe>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8c 93       	st	X, r24
    20a4:	12 c0       	rjmp	.+36     	; 0x20ca <__unpack_f+0xe2>
    20a6:	1c 92       	st	X, r1
    20a8:	10 c0       	rjmp	.+32     	; 0x20ca <__unpack_f+0xe2>
    20aa:	2f 57       	subi	r18, 0x7F	; 127
    20ac:	30 40       	sbci	r19, 0x00	; 0
    20ae:	13 96       	adiw	r26, 0x03	; 3
    20b0:	3c 93       	st	X, r19
    20b2:	2e 93       	st	-X, r18
    20b4:	12 97       	sbiw	r26, 0x02	; 2
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	8c 93       	st	X, r24
    20ba:	87 e0       	ldi	r24, 0x07	; 7
    20bc:	44 0f       	add	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	66 1f       	adc	r22, r22
    20c2:	77 1f       	adc	r23, r23
    20c4:	8a 95       	dec	r24
    20c6:	d1 f7       	brne	.-12     	; 0x20bc <__unpack_f+0xd4>
    20c8:	70 64       	ori	r23, 0x40	; 64
    20ca:	14 96       	adiw	r26, 0x04	; 4
    20cc:	4d 93       	st	X+, r20
    20ce:	5d 93       	st	X+, r21
    20d0:	6d 93       	st	X+, r22
    20d2:	7c 93       	st	X, r23
    20d4:	17 97       	sbiw	r26, 0x07	; 7
    20d6:	08 95       	ret

000020d8 <__fpcmp_parts_f>:
    20d8:	1f 93       	push	r17
    20da:	dc 01       	movw	r26, r24
    20dc:	fb 01       	movw	r30, r22
    20de:	9c 91       	ld	r25, X
    20e0:	92 30       	cpi	r25, 0x02	; 2
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <__fpcmp_parts_f+0xe>
    20e4:	47 c0       	rjmp	.+142    	; 0x2174 <__fpcmp_parts_f+0x9c>
    20e6:	80 81       	ld	r24, Z
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <__fpcmp_parts_f+0x16>
    20ec:	43 c0       	rjmp	.+134    	; 0x2174 <__fpcmp_parts_f+0x9c>
    20ee:	94 30       	cpi	r25, 0x04	; 4
    20f0:	51 f4       	brne	.+20     	; 0x2106 <__fpcmp_parts_f+0x2e>
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	1c 91       	ld	r17, X
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	99 f5       	brne	.+102    	; 0x2160 <__fpcmp_parts_f+0x88>
    20fa:	81 81       	ldd	r24, Z+1	; 0x01
    20fc:	68 2f       	mov	r22, r24
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	61 1b       	sub	r22, r17
    2102:	71 09       	sbc	r23, r1
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <__fpcmp_parts_f+0xac>
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	21 f0       	breq	.+8      	; 0x2112 <__fpcmp_parts_f+0x3a>
    210a:	92 30       	cpi	r25, 0x02	; 2
    210c:	31 f4       	brne	.+12     	; 0x211a <__fpcmp_parts_f+0x42>
    210e:	82 30       	cpi	r24, 0x02	; 2
    2110:	b9 f1       	breq	.+110    	; 0x2180 <__fpcmp_parts_f+0xa8>
    2112:	81 81       	ldd	r24, Z+1	; 0x01
    2114:	88 23       	and	r24, r24
    2116:	89 f1       	breq	.+98     	; 0x217a <__fpcmp_parts_f+0xa2>
    2118:	2d c0       	rjmp	.+90     	; 0x2174 <__fpcmp_parts_f+0x9c>
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	1c 91       	ld	r17, X
    211e:	11 97       	sbiw	r26, 0x01	; 1
    2120:	82 30       	cpi	r24, 0x02	; 2
    2122:	f1 f0       	breq	.+60     	; 0x2160 <__fpcmp_parts_f+0x88>
    2124:	81 81       	ldd	r24, Z+1	; 0x01
    2126:	18 17       	cp	r17, r24
    2128:	d9 f4       	brne	.+54     	; 0x2160 <__fpcmp_parts_f+0x88>
    212a:	12 96       	adiw	r26, 0x02	; 2
    212c:	2d 91       	ld	r18, X+
    212e:	3c 91       	ld	r19, X
    2130:	13 97       	sbiw	r26, 0x03	; 3
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	82 17       	cp	r24, r18
    2138:	93 07       	cpc	r25, r19
    213a:	94 f0       	brlt	.+36     	; 0x2160 <__fpcmp_parts_f+0x88>
    213c:	28 17       	cp	r18, r24
    213e:	39 07       	cpc	r19, r25
    2140:	bc f0       	brlt	.+46     	; 0x2170 <__fpcmp_parts_f+0x98>
    2142:	14 96       	adiw	r26, 0x04	; 4
    2144:	8d 91       	ld	r24, X+
    2146:	9d 91       	ld	r25, X+
    2148:	0d 90       	ld	r0, X+
    214a:	bc 91       	ld	r27, X
    214c:	a0 2d       	mov	r26, r0
    214e:	24 81       	ldd	r18, Z+4	; 0x04
    2150:	35 81       	ldd	r19, Z+5	; 0x05
    2152:	46 81       	ldd	r20, Z+6	; 0x06
    2154:	57 81       	ldd	r21, Z+7	; 0x07
    2156:	28 17       	cp	r18, r24
    2158:	39 07       	cpc	r19, r25
    215a:	4a 07       	cpc	r20, r26
    215c:	5b 07       	cpc	r21, r27
    215e:	18 f4       	brcc	.+6      	; 0x2166 <__fpcmp_parts_f+0x8e>
    2160:	11 23       	and	r17, r17
    2162:	41 f0       	breq	.+16     	; 0x2174 <__fpcmp_parts_f+0x9c>
    2164:	0a c0       	rjmp	.+20     	; 0x217a <__fpcmp_parts_f+0xa2>
    2166:	82 17       	cp	r24, r18
    2168:	93 07       	cpc	r25, r19
    216a:	a4 07       	cpc	r26, r20
    216c:	b5 07       	cpc	r27, r21
    216e:	40 f4       	brcc	.+16     	; 0x2180 <__fpcmp_parts_f+0xa8>
    2170:	11 23       	and	r17, r17
    2172:	19 f0       	breq	.+6      	; 0x217a <__fpcmp_parts_f+0xa2>
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <__fpcmp_parts_f+0xac>
    217a:	6f ef       	ldi	r22, 0xFF	; 255
    217c:	7f ef       	ldi	r23, 0xFF	; 255
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <__fpcmp_parts_f+0xac>
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	cb 01       	movw	r24, r22
    2186:	1f 91       	pop	r17
    2188:	08 95       	ret

0000218a <__udivmodqi4>:
    218a:	99 1b       	sub	r25, r25
    218c:	79 e0       	ldi	r23, 0x09	; 9
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <__udivmodqi4_ep>

00002190 <__udivmodqi4_loop>:
    2190:	99 1f       	adc	r25, r25
    2192:	96 17       	cp	r25, r22
    2194:	08 f0       	brcs	.+2      	; 0x2198 <__udivmodqi4_ep>
    2196:	96 1b       	sub	r25, r22

00002198 <__udivmodqi4_ep>:
    2198:	88 1f       	adc	r24, r24
    219a:	7a 95       	dec	r23
    219c:	c9 f7       	brne	.-14     	; 0x2190 <__udivmodqi4_loop>
    219e:	80 95       	com	r24
    21a0:	08 95       	ret

000021a2 <__udivmodhi4>:
    21a2:	aa 1b       	sub	r26, r26
    21a4:	bb 1b       	sub	r27, r27
    21a6:	51 e1       	ldi	r21, 0x11	; 17
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <__udivmodhi4_ep>

000021aa <__udivmodhi4_loop>:
    21aa:	aa 1f       	adc	r26, r26
    21ac:	bb 1f       	adc	r27, r27
    21ae:	a6 17       	cp	r26, r22
    21b0:	b7 07       	cpc	r27, r23
    21b2:	10 f0       	brcs	.+4      	; 0x21b8 <__udivmodhi4_ep>
    21b4:	a6 1b       	sub	r26, r22
    21b6:	b7 0b       	sbc	r27, r23

000021b8 <__udivmodhi4_ep>:
    21b8:	88 1f       	adc	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	5a 95       	dec	r21
    21be:	a9 f7       	brne	.-22     	; 0x21aa <__udivmodhi4_loop>
    21c0:	80 95       	com	r24
    21c2:	90 95       	com	r25
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	08 95       	ret

000021ca <__divmodhi4>:
    21ca:	97 fb       	bst	r25, 7
    21cc:	09 2e       	mov	r0, r25
    21ce:	07 26       	eor	r0, r23
    21d0:	0a d0       	rcall	.+20     	; 0x21e6 <__divmodhi4_neg1>
    21d2:	77 fd       	sbrc	r23, 7
    21d4:	04 d0       	rcall	.+8      	; 0x21de <__divmodhi4_neg2>
    21d6:	e5 df       	rcall	.-54     	; 0x21a2 <__udivmodhi4>
    21d8:	06 d0       	rcall	.+12     	; 0x21e6 <__divmodhi4_neg1>
    21da:	00 20       	and	r0, r0
    21dc:	1a f4       	brpl	.+6      	; 0x21e4 <__divmodhi4_exit>

000021de <__divmodhi4_neg2>:
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255

000021e4 <__divmodhi4_exit>:
    21e4:	08 95       	ret

000021e6 <__divmodhi4_neg1>:
    21e6:	f6 f7       	brtc	.-4      	; 0x21e4 <__divmodhi4_exit>
    21e8:	90 95       	com	r25
    21ea:	81 95       	neg	r24
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	08 95       	ret

000021f0 <__divmodsi4>:
    21f0:	97 fb       	bst	r25, 7
    21f2:	09 2e       	mov	r0, r25
    21f4:	05 26       	eor	r0, r21
    21f6:	0e d0       	rcall	.+28     	; 0x2214 <__divmodsi4_neg1>
    21f8:	57 fd       	sbrc	r21, 7
    21fa:	04 d0       	rcall	.+8      	; 0x2204 <__divmodsi4_neg2>
    21fc:	14 d0       	rcall	.+40     	; 0x2226 <__udivmodsi4>
    21fe:	0a d0       	rcall	.+20     	; 0x2214 <__divmodsi4_neg1>
    2200:	00 1c       	adc	r0, r0
    2202:	38 f4       	brcc	.+14     	; 0x2212 <__divmodsi4_exit>

00002204 <__divmodsi4_neg2>:
    2204:	50 95       	com	r21
    2206:	40 95       	com	r20
    2208:	30 95       	com	r19
    220a:	21 95       	neg	r18
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	4f 4f       	sbci	r20, 0xFF	; 255
    2210:	5f 4f       	sbci	r21, 0xFF	; 255

00002212 <__divmodsi4_exit>:
    2212:	08 95       	ret

00002214 <__divmodsi4_neg1>:
    2214:	f6 f7       	brtc	.-4      	; 0x2212 <__divmodsi4_exit>
    2216:	90 95       	com	r25
    2218:	80 95       	com	r24
    221a:	70 95       	com	r23
    221c:	61 95       	neg	r22
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	8f 4f       	sbci	r24, 0xFF	; 255
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	08 95       	ret

00002226 <__udivmodsi4>:
    2226:	a1 e2       	ldi	r26, 0x21	; 33
    2228:	1a 2e       	mov	r1, r26
    222a:	aa 1b       	sub	r26, r26
    222c:	bb 1b       	sub	r27, r27
    222e:	fd 01       	movw	r30, r26
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__udivmodsi4_ep>

00002232 <__udivmodsi4_loop>:
    2232:	aa 1f       	adc	r26, r26
    2234:	bb 1f       	adc	r27, r27
    2236:	ee 1f       	adc	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	a2 17       	cp	r26, r18
    223c:	b3 07       	cpc	r27, r19
    223e:	e4 07       	cpc	r30, r20
    2240:	f5 07       	cpc	r31, r21
    2242:	20 f0       	brcs	.+8      	; 0x224c <__udivmodsi4_ep>
    2244:	a2 1b       	sub	r26, r18
    2246:	b3 0b       	sbc	r27, r19
    2248:	e4 0b       	sbc	r30, r20
    224a:	f5 0b       	sbc	r31, r21

0000224c <__udivmodsi4_ep>:
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	1a 94       	dec	r1
    2256:	69 f7       	brne	.-38     	; 0x2232 <__udivmodsi4_loop>
    2258:	60 95       	com	r22
    225a:	70 95       	com	r23
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	bd 01       	movw	r22, r26
    2266:	cf 01       	movw	r24, r30
    2268:	08 95       	ret

0000226a <__prologue_saves__>:
    226a:	2f 92       	push	r2
    226c:	3f 92       	push	r3
    226e:	4f 92       	push	r4
    2270:	5f 92       	push	r5
    2272:	6f 92       	push	r6
    2274:	7f 92       	push	r7
    2276:	8f 92       	push	r8
    2278:	9f 92       	push	r9
    227a:	af 92       	push	r10
    227c:	bf 92       	push	r11
    227e:	cf 92       	push	r12
    2280:	df 92       	push	r13
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	ca 1b       	sub	r28, r26
    2294:	db 0b       	sbc	r29, r27
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	09 94       	ijmp

000022a2 <__epilogue_restores__>:
    22a2:	2a 88       	ldd	r2, Y+18	; 0x12
    22a4:	39 88       	ldd	r3, Y+17	; 0x11
    22a6:	48 88       	ldd	r4, Y+16	; 0x10
    22a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b4:	b9 84       	ldd	r11, Y+9	; 0x09
    22b6:	c8 84       	ldd	r12, Y+8	; 0x08
    22b8:	df 80       	ldd	r13, Y+7	; 0x07
    22ba:	ee 80       	ldd	r14, Y+6	; 0x06
    22bc:	fd 80       	ldd	r15, Y+5	; 0x05
    22be:	0c 81       	ldd	r16, Y+4	; 0x04
    22c0:	1b 81       	ldd	r17, Y+3	; 0x03
    22c2:	aa 81       	ldd	r26, Y+2	; 0x02
    22c4:	b9 81       	ldd	r27, Y+1	; 0x01
    22c6:	ce 0f       	add	r28, r30
    22c8:	d1 1d       	adc	r29, r1
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	ed 01       	movw	r28, r26
    22d6:	08 95       	ret

000022d8 <dtostrf>:
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	f2 2f       	mov	r31, r18
    22e2:	f0 2e       	mov	r15, r16
    22e4:	47 fd       	sbrc	r20, 7
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <dtostrf+0x14>
    22e8:	e4 e0       	ldi	r30, 0x04	; 4
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <dtostrf+0x16>
    22ec:	e4 e1       	ldi	r30, 0x14	; 20
    22ee:	24 2f       	mov	r18, r20
    22f0:	33 27       	eor	r19, r19
    22f2:	27 fd       	sbrc	r18, 7
    22f4:	30 95       	com	r19
    22f6:	37 ff       	sbrs	r19, 7
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <dtostrf+0x28>
    22fa:	30 95       	com	r19
    22fc:	21 95       	neg	r18
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	4f 2d       	mov	r20, r15
    2302:	51 2f       	mov	r21, r17
    2304:	0f 2f       	mov	r16, r31
    2306:	ee 2e       	mov	r14, r30
    2308:	0e 94 b7 13 	call	0x276e	; 0x276e <dtoa_prf>
    230c:	8f 2d       	mov	r24, r15
    230e:	91 2f       	mov	r25, r17
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	08 95       	ret

0000231a <fputs>:
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	7c 01       	movw	r14, r24
    2328:	8b 01       	movw	r16, r22
    232a:	db 01       	movw	r26, r22
    232c:	13 96       	adiw	r26, 0x03	; 3
    232e:	8c 91       	ld	r24, X
    2330:	81 fd       	sbrc	r24, 1
    2332:	03 c0       	rjmp	.+6      	; 0x233a <fputs+0x20>
    2334:	cf ef       	ldi	r28, 0xFF	; 255
    2336:	df ef       	ldi	r29, 0xFF	; 255
    2338:	13 c0       	rjmp	.+38     	; 0x2360 <fputs+0x46>
    233a:	c0 e0       	ldi	r28, 0x00	; 0
    233c:	d0 e0       	ldi	r29, 0x00	; 0
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <fputs+0x3c>
    2340:	d8 01       	movw	r26, r16
    2342:	18 96       	adiw	r26, 0x08	; 8
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	19 97       	sbiw	r26, 0x09	; 9
    234a:	b8 01       	movw	r22, r16
    234c:	09 95       	icall
    234e:	89 2b       	or	r24, r25
    2350:	11 f0       	breq	.+4      	; 0x2356 <fputs+0x3c>
    2352:	cf ef       	ldi	r28, 0xFF	; 255
    2354:	df ef       	ldi	r29, 0xFF	; 255
    2356:	f7 01       	movw	r30, r14
    2358:	81 91       	ld	r24, Z+
    235a:	7f 01       	movw	r14, r30
    235c:	88 23       	and	r24, r24
    235e:	81 f7       	brne	.-32     	; 0x2340 <fputs+0x26>
    2360:	ce 01       	movw	r24, r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	e6 e0       	ldi	r30, 0x06	; 6
    2368:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

0000236c <sprintf>:
    236c:	ae e0       	ldi	r26, 0x0E	; 14
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ec eb       	ldi	r30, 0xBC	; 188
    2372:	f1 e1       	ldi	r31, 0x11	; 17
    2374:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x1c>
    2378:	0d 89       	ldd	r16, Y+21	; 0x15
    237a:	1e 89       	ldd	r17, Y+22	; 0x16
    237c:	86 e0       	ldi	r24, 0x06	; 6
    237e:	8c 83       	std	Y+4, r24	; 0x04
    2380:	1a 83       	std	Y+2, r17	; 0x02
    2382:	09 83       	std	Y+1, r16	; 0x01
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	9f e7       	ldi	r25, 0x7F	; 127
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	9e 01       	movw	r18, r28
    238e:	27 5e       	subi	r18, 0xE7	; 231
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	6f 89       	ldd	r22, Y+23	; 0x17
    2398:	78 8d       	ldd	r23, Y+24	; 0x18
    239a:	a9 01       	movw	r20, r18
    239c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <vfprintf>
    23a0:	2f 81       	ldd	r18, Y+7	; 0x07
    23a2:	38 85       	ldd	r19, Y+8	; 0x08
    23a4:	02 0f       	add	r16, r18
    23a6:	13 1f       	adc	r17, r19
    23a8:	f8 01       	movw	r30, r16
    23aa:	10 82       	st	Z, r1
    23ac:	2e 96       	adiw	r28, 0x0e	; 14
    23ae:	e4 e0       	ldi	r30, 0x04	; 4
    23b0:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x1c>

000023b4 <vfprintf>:
    23b4:	ab e0       	ldi	r26, 0x0B	; 11
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e0 ee       	ldi	r30, 0xE0	; 224
    23ba:	f1 e1       	ldi	r31, 0x11	; 17
    23bc:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__>
    23c0:	3c 01       	movw	r6, r24
    23c2:	2b 01       	movw	r4, r22
    23c4:	5a 01       	movw	r10, r20
    23c6:	fc 01       	movw	r30, r24
    23c8:	17 82       	std	Z+7, r1	; 0x07
    23ca:	16 82       	std	Z+6, r1	; 0x06
    23cc:	83 81       	ldd	r24, Z+3	; 0x03
    23ce:	81 fd       	sbrc	r24, 1
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <vfprintf+0x24>
    23d2:	6f ef       	ldi	r22, 0xFF	; 255
    23d4:	7f ef       	ldi	r23, 0xFF	; 255
    23d6:	c6 c1       	rjmp	.+908    	; 0x2764 <vfprintf+0x3b0>
    23d8:	9a e0       	ldi	r25, 0x0A	; 10
    23da:	89 2e       	mov	r8, r25
    23dc:	1e 01       	movw	r2, r28
    23de:	08 94       	sec
    23e0:	21 1c       	adc	r2, r1
    23e2:	31 1c       	adc	r3, r1
    23e4:	f3 01       	movw	r30, r6
    23e6:	23 81       	ldd	r18, Z+3	; 0x03
    23e8:	f2 01       	movw	r30, r4
    23ea:	23 fd       	sbrc	r18, 3
    23ec:	85 91       	lpm	r24, Z+
    23ee:	23 ff       	sbrs	r18, 3
    23f0:	81 91       	ld	r24, Z+
    23f2:	2f 01       	movw	r4, r30
    23f4:	88 23       	and	r24, r24
    23f6:	09 f4       	brne	.+2      	; 0x23fa <vfprintf+0x46>
    23f8:	b2 c1       	rjmp	.+868    	; 0x275e <vfprintf+0x3aa>
    23fa:	85 32       	cpi	r24, 0x25	; 37
    23fc:	39 f4       	brne	.+14     	; 0x240c <vfprintf+0x58>
    23fe:	23 fd       	sbrc	r18, 3
    2400:	85 91       	lpm	r24, Z+
    2402:	23 ff       	sbrs	r18, 3
    2404:	81 91       	ld	r24, Z+
    2406:	2f 01       	movw	r4, r30
    2408:	85 32       	cpi	r24, 0x25	; 37
    240a:	29 f4       	brne	.+10     	; 0x2416 <vfprintf+0x62>
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	b3 01       	movw	r22, r6
    2410:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2414:	e7 cf       	rjmp	.-50     	; 0x23e4 <vfprintf+0x30>
    2416:	98 2f       	mov	r25, r24
    2418:	ff 24       	eor	r15, r15
    241a:	ee 24       	eor	r14, r14
    241c:	99 24       	eor	r9, r9
    241e:	ff e1       	ldi	r31, 0x1F	; 31
    2420:	ff 15       	cp	r31, r15
    2422:	d0 f0       	brcs	.+52     	; 0x2458 <vfprintf+0xa4>
    2424:	9b 32       	cpi	r25, 0x2B	; 43
    2426:	69 f0       	breq	.+26     	; 0x2442 <vfprintf+0x8e>
    2428:	9c 32       	cpi	r25, 0x2C	; 44
    242a:	28 f4       	brcc	.+10     	; 0x2436 <vfprintf+0x82>
    242c:	90 32       	cpi	r25, 0x20	; 32
    242e:	59 f0       	breq	.+22     	; 0x2446 <vfprintf+0x92>
    2430:	93 32       	cpi	r25, 0x23	; 35
    2432:	91 f4       	brne	.+36     	; 0x2458 <vfprintf+0xa4>
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <vfprintf+0x9e>
    2436:	9d 32       	cpi	r25, 0x2D	; 45
    2438:	49 f0       	breq	.+18     	; 0x244c <vfprintf+0x98>
    243a:	90 33       	cpi	r25, 0x30	; 48
    243c:	69 f4       	brne	.+26     	; 0x2458 <vfprintf+0xa4>
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	24 c0       	rjmp	.+72     	; 0x248a <vfprintf+0xd6>
    2442:	52 e0       	ldi	r21, 0x02	; 2
    2444:	f5 2a       	or	r15, r21
    2446:	84 e0       	ldi	r24, 0x04	; 4
    2448:	f8 2a       	or	r15, r24
    244a:	28 c0       	rjmp	.+80     	; 0x249c <vfprintf+0xe8>
    244c:	98 e0       	ldi	r25, 0x08	; 8
    244e:	f9 2a       	or	r15, r25
    2450:	25 c0       	rjmp	.+74     	; 0x249c <vfprintf+0xe8>
    2452:	e0 e1       	ldi	r30, 0x10	; 16
    2454:	fe 2a       	or	r15, r30
    2456:	22 c0       	rjmp	.+68     	; 0x249c <vfprintf+0xe8>
    2458:	f7 fc       	sbrc	r15, 7
    245a:	29 c0       	rjmp	.+82     	; 0x24ae <vfprintf+0xfa>
    245c:	89 2f       	mov	r24, r25
    245e:	80 53       	subi	r24, 0x30	; 48
    2460:	8a 30       	cpi	r24, 0x0A	; 10
    2462:	70 f4       	brcc	.+28     	; 0x2480 <vfprintf+0xcc>
    2464:	f6 fe       	sbrs	r15, 6
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <vfprintf+0xbe>
    2468:	98 9c       	mul	r9, r8
    246a:	90 2c       	mov	r9, r0
    246c:	11 24       	eor	r1, r1
    246e:	98 0e       	add	r9, r24
    2470:	15 c0       	rjmp	.+42     	; 0x249c <vfprintf+0xe8>
    2472:	e8 9c       	mul	r14, r8
    2474:	e0 2c       	mov	r14, r0
    2476:	11 24       	eor	r1, r1
    2478:	e8 0e       	add	r14, r24
    247a:	f0 e2       	ldi	r31, 0x20	; 32
    247c:	ff 2a       	or	r15, r31
    247e:	0e c0       	rjmp	.+28     	; 0x249c <vfprintf+0xe8>
    2480:	9e 32       	cpi	r25, 0x2E	; 46
    2482:	29 f4       	brne	.+10     	; 0x248e <vfprintf+0xda>
    2484:	f6 fc       	sbrc	r15, 6
    2486:	6b c1       	rjmp	.+726    	; 0x275e <vfprintf+0x3aa>
    2488:	40 e4       	ldi	r20, 0x40	; 64
    248a:	f4 2a       	or	r15, r20
    248c:	07 c0       	rjmp	.+14     	; 0x249c <vfprintf+0xe8>
    248e:	9c 36       	cpi	r25, 0x6C	; 108
    2490:	19 f4       	brne	.+6      	; 0x2498 <vfprintf+0xe4>
    2492:	50 e8       	ldi	r21, 0x80	; 128
    2494:	f5 2a       	or	r15, r21
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vfprintf+0xe8>
    2498:	98 36       	cpi	r25, 0x68	; 104
    249a:	49 f4       	brne	.+18     	; 0x24ae <vfprintf+0xfa>
    249c:	f2 01       	movw	r30, r4
    249e:	23 fd       	sbrc	r18, 3
    24a0:	95 91       	lpm	r25, Z+
    24a2:	23 ff       	sbrs	r18, 3
    24a4:	91 91       	ld	r25, Z+
    24a6:	2f 01       	movw	r4, r30
    24a8:	99 23       	and	r25, r25
    24aa:	09 f0       	breq	.+2      	; 0x24ae <vfprintf+0xfa>
    24ac:	b8 cf       	rjmp	.-144    	; 0x241e <vfprintf+0x6a>
    24ae:	89 2f       	mov	r24, r25
    24b0:	85 54       	subi	r24, 0x45	; 69
    24b2:	83 30       	cpi	r24, 0x03	; 3
    24b4:	18 f0       	brcs	.+6      	; 0x24bc <vfprintf+0x108>
    24b6:	80 52       	subi	r24, 0x20	; 32
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	38 f4       	brcc	.+14     	; 0x24ca <vfprintf+0x116>
    24bc:	44 e0       	ldi	r20, 0x04	; 4
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	a4 0e       	add	r10, r20
    24c2:	b5 1e       	adc	r11, r21
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	59 83       	std	Y+1, r21	; 0x01
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <vfprintf+0x134>
    24ca:	93 36       	cpi	r25, 0x63	; 99
    24cc:	31 f0       	breq	.+12     	; 0x24da <vfprintf+0x126>
    24ce:	93 37       	cpi	r25, 0x73	; 115
    24d0:	79 f0       	breq	.+30     	; 0x24f0 <vfprintf+0x13c>
    24d2:	93 35       	cpi	r25, 0x53	; 83
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <vfprintf+0x124>
    24d6:	56 c0       	rjmp	.+172    	; 0x2584 <vfprintf+0x1d0>
    24d8:	20 c0       	rjmp	.+64     	; 0x251a <vfprintf+0x166>
    24da:	f5 01       	movw	r30, r10
    24dc:	80 81       	ld	r24, Z
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	42 e0       	ldi	r20, 0x02	; 2
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	a4 0e       	add	r10, r20
    24e6:	b5 1e       	adc	r11, r21
    24e8:	61 01       	movw	r12, r2
    24ea:	01 e0       	ldi	r16, 0x01	; 1
    24ec:	10 e0       	ldi	r17, 0x00	; 0
    24ee:	12 c0       	rjmp	.+36     	; 0x2514 <vfprintf+0x160>
    24f0:	f5 01       	movw	r30, r10
    24f2:	c0 80       	ld	r12, Z
    24f4:	d1 80       	ldd	r13, Z+1	; 0x01
    24f6:	f6 fc       	sbrc	r15, 6
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <vfprintf+0x14c>
    24fa:	6f ef       	ldi	r22, 0xFF	; 255
    24fc:	7f ef       	ldi	r23, 0xFF	; 255
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <vfprintf+0x150>
    2500:	69 2d       	mov	r22, r9
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	42 e0       	ldi	r20, 0x02	; 2
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	a4 0e       	add	r10, r20
    250a:	b5 1e       	adc	r11, r21
    250c:	c6 01       	movw	r24, r12
    250e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <strnlen>
    2512:	8c 01       	movw	r16, r24
    2514:	5f e7       	ldi	r21, 0x7F	; 127
    2516:	f5 22       	and	r15, r21
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <vfprintf+0x18e>
    251a:	f5 01       	movw	r30, r10
    251c:	c0 80       	ld	r12, Z
    251e:	d1 80       	ldd	r13, Z+1	; 0x01
    2520:	f6 fc       	sbrc	r15, 6
    2522:	03 c0       	rjmp	.+6      	; 0x252a <vfprintf+0x176>
    2524:	6f ef       	ldi	r22, 0xFF	; 255
    2526:	7f ef       	ldi	r23, 0xFF	; 255
    2528:	02 c0       	rjmp	.+4      	; 0x252e <vfprintf+0x17a>
    252a:	69 2d       	mov	r22, r9
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	42 e0       	ldi	r20, 0x02	; 2
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	a4 0e       	add	r10, r20
    2534:	b5 1e       	adc	r11, r21
    2536:	c6 01       	movw	r24, r12
    2538:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <strnlen_P>
    253c:	8c 01       	movw	r16, r24
    253e:	50 e8       	ldi	r21, 0x80	; 128
    2540:	f5 2a       	or	r15, r21
    2542:	f3 fe       	sbrs	r15, 3
    2544:	07 c0       	rjmp	.+14     	; 0x2554 <vfprintf+0x1a0>
    2546:	1a c0       	rjmp	.+52     	; 0x257c <vfprintf+0x1c8>
    2548:	80 e2       	ldi	r24, 0x20	; 32
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	b3 01       	movw	r22, r6
    254e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2552:	ea 94       	dec	r14
    2554:	8e 2d       	mov	r24, r14
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	08 17       	cp	r16, r24
    255a:	19 07       	cpc	r17, r25
    255c:	a8 f3       	brcs	.-22     	; 0x2548 <vfprintf+0x194>
    255e:	0e c0       	rjmp	.+28     	; 0x257c <vfprintf+0x1c8>
    2560:	f6 01       	movw	r30, r12
    2562:	f7 fc       	sbrc	r15, 7
    2564:	85 91       	lpm	r24, Z+
    2566:	f7 fe       	sbrs	r15, 7
    2568:	81 91       	ld	r24, Z+
    256a:	6f 01       	movw	r12, r30
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	b3 01       	movw	r22, r6
    2570:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2574:	e1 10       	cpse	r14, r1
    2576:	ea 94       	dec	r14
    2578:	01 50       	subi	r16, 0x01	; 1
    257a:	10 40       	sbci	r17, 0x00	; 0
    257c:	01 15       	cp	r16, r1
    257e:	11 05       	cpc	r17, r1
    2580:	79 f7       	brne	.-34     	; 0x2560 <vfprintf+0x1ac>
    2582:	ea c0       	rjmp	.+468    	; 0x2758 <vfprintf+0x3a4>
    2584:	94 36       	cpi	r25, 0x64	; 100
    2586:	11 f0       	breq	.+4      	; 0x258c <vfprintf+0x1d8>
    2588:	99 36       	cpi	r25, 0x69	; 105
    258a:	69 f5       	brne	.+90     	; 0x25e6 <vfprintf+0x232>
    258c:	f7 fe       	sbrs	r15, 7
    258e:	08 c0       	rjmp	.+16     	; 0x25a0 <vfprintf+0x1ec>
    2590:	f5 01       	movw	r30, r10
    2592:	20 81       	ld	r18, Z
    2594:	31 81       	ldd	r19, Z+1	; 0x01
    2596:	42 81       	ldd	r20, Z+2	; 0x02
    2598:	53 81       	ldd	r21, Z+3	; 0x03
    259a:	84 e0       	ldi	r24, 0x04	; 4
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <vfprintf+0x200>
    25a0:	f5 01       	movw	r30, r10
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	9c 01       	movw	r18, r24
    25a8:	44 27       	eor	r20, r20
    25aa:	37 fd       	sbrc	r19, 7
    25ac:	40 95       	com	r20
    25ae:	54 2f       	mov	r21, r20
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a8 0e       	add	r10, r24
    25b6:	b9 1e       	adc	r11, r25
    25b8:	9f e6       	ldi	r25, 0x6F	; 111
    25ba:	f9 22       	and	r15, r25
    25bc:	57 ff       	sbrs	r21, 7
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <vfprintf+0x21e>
    25c0:	50 95       	com	r21
    25c2:	40 95       	com	r20
    25c4:	30 95       	com	r19
    25c6:	21 95       	neg	r18
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	4f 4f       	sbci	r20, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	e0 e8       	ldi	r30, 0x80	; 128
    25d0:	fe 2a       	or	r15, r30
    25d2:	ca 01       	movw	r24, r20
    25d4:	b9 01       	movw	r22, r18
    25d6:	a1 01       	movw	r20, r2
    25d8:	2a e0       	ldi	r18, 0x0A	; 10
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__ultoa_invert>
    25e0:	d8 2e       	mov	r13, r24
    25e2:	d2 18       	sub	r13, r2
    25e4:	40 c0       	rjmp	.+128    	; 0x2666 <vfprintf+0x2b2>
    25e6:	95 37       	cpi	r25, 0x75	; 117
    25e8:	29 f4       	brne	.+10     	; 0x25f4 <vfprintf+0x240>
    25ea:	1f 2d       	mov	r17, r15
    25ec:	1f 7e       	andi	r17, 0xEF	; 239
    25ee:	2a e0       	ldi	r18, 0x0A	; 10
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	1d c0       	rjmp	.+58     	; 0x262e <vfprintf+0x27a>
    25f4:	1f 2d       	mov	r17, r15
    25f6:	19 7f       	andi	r17, 0xF9	; 249
    25f8:	9f 36       	cpi	r25, 0x6F	; 111
    25fa:	61 f0       	breq	.+24     	; 0x2614 <vfprintf+0x260>
    25fc:	90 37       	cpi	r25, 0x70	; 112
    25fe:	20 f4       	brcc	.+8      	; 0x2608 <vfprintf+0x254>
    2600:	98 35       	cpi	r25, 0x58	; 88
    2602:	09 f0       	breq	.+2      	; 0x2606 <vfprintf+0x252>
    2604:	ac c0       	rjmp	.+344    	; 0x275e <vfprintf+0x3aa>
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <vfprintf+0x272>
    2608:	90 37       	cpi	r25, 0x70	; 112
    260a:	39 f0       	breq	.+14     	; 0x261a <vfprintf+0x266>
    260c:	98 37       	cpi	r25, 0x78	; 120
    260e:	09 f0       	breq	.+2      	; 0x2612 <vfprintf+0x25e>
    2610:	a6 c0       	rjmp	.+332    	; 0x275e <vfprintf+0x3aa>
    2612:	04 c0       	rjmp	.+8      	; 0x261c <vfprintf+0x268>
    2614:	28 e0       	ldi	r18, 0x08	; 8
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	0a c0       	rjmp	.+20     	; 0x262e <vfprintf+0x27a>
    261a:	10 61       	ori	r17, 0x10	; 16
    261c:	14 fd       	sbrc	r17, 4
    261e:	14 60       	ori	r17, 0x04	; 4
    2620:	20 e1       	ldi	r18, 0x10	; 16
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	04 c0       	rjmp	.+8      	; 0x262e <vfprintf+0x27a>
    2626:	14 fd       	sbrc	r17, 4
    2628:	16 60       	ori	r17, 0x06	; 6
    262a:	20 e1       	ldi	r18, 0x10	; 16
    262c:	32 e0       	ldi	r19, 0x02	; 2
    262e:	17 ff       	sbrs	r17, 7
    2630:	08 c0       	rjmp	.+16     	; 0x2642 <vfprintf+0x28e>
    2632:	f5 01       	movw	r30, r10
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	44 e0       	ldi	r20, 0x04	; 4
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <vfprintf+0x29e>
    2642:	f5 01       	movw	r30, r10
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	bc 01       	movw	r22, r24
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	42 e0       	ldi	r20, 0x02	; 2
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	a4 0e       	add	r10, r20
    2654:	b5 1e       	adc	r11, r21
    2656:	a1 01       	movw	r20, r2
    2658:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__ultoa_invert>
    265c:	d8 2e       	mov	r13, r24
    265e:	d2 18       	sub	r13, r2
    2660:	8f e7       	ldi	r24, 0x7F	; 127
    2662:	f8 2e       	mov	r15, r24
    2664:	f1 22       	and	r15, r17
    2666:	f6 fe       	sbrs	r15, 6
    2668:	0b c0       	rjmp	.+22     	; 0x2680 <vfprintf+0x2cc>
    266a:	5e ef       	ldi	r21, 0xFE	; 254
    266c:	f5 22       	and	r15, r21
    266e:	d9 14       	cp	r13, r9
    2670:	38 f4       	brcc	.+14     	; 0x2680 <vfprintf+0x2cc>
    2672:	f4 fe       	sbrs	r15, 4
    2674:	07 c0       	rjmp	.+14     	; 0x2684 <vfprintf+0x2d0>
    2676:	f2 fc       	sbrc	r15, 2
    2678:	05 c0       	rjmp	.+10     	; 0x2684 <vfprintf+0x2d0>
    267a:	8f ee       	ldi	r24, 0xEF	; 239
    267c:	f8 22       	and	r15, r24
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <vfprintf+0x2d0>
    2680:	1d 2d       	mov	r17, r13
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <vfprintf+0x2d2>
    2684:	19 2d       	mov	r17, r9
    2686:	f4 fe       	sbrs	r15, 4
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <vfprintf+0x2f0>
    268a:	fe 01       	movw	r30, r28
    268c:	ed 0d       	add	r30, r13
    268e:	f1 1d       	adc	r31, r1
    2690:	80 81       	ld	r24, Z
    2692:	80 33       	cpi	r24, 0x30	; 48
    2694:	19 f4       	brne	.+6      	; 0x269c <vfprintf+0x2e8>
    2696:	99 ee       	ldi	r25, 0xE9	; 233
    2698:	f9 22       	and	r15, r25
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <vfprintf+0x2f8>
    269c:	1f 5f       	subi	r17, 0xFF	; 255
    269e:	f2 fe       	sbrs	r15, 2
    26a0:	05 c0       	rjmp	.+10     	; 0x26ac <vfprintf+0x2f8>
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <vfprintf+0x2f6>
    26a4:	8f 2d       	mov	r24, r15
    26a6:	86 78       	andi	r24, 0x86	; 134
    26a8:	09 f0       	breq	.+2      	; 0x26ac <vfprintf+0x2f8>
    26aa:	1f 5f       	subi	r17, 0xFF	; 255
    26ac:	0f 2d       	mov	r16, r15
    26ae:	f3 fc       	sbrc	r15, 3
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <vfprintf+0x326>
    26b2:	f0 fe       	sbrs	r15, 0
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <vfprintf+0x320>
    26b6:	1e 15       	cp	r17, r14
    26b8:	10 f0       	brcs	.+4      	; 0x26be <vfprintf+0x30a>
    26ba:	9d 2c       	mov	r9, r13
    26bc:	0b c0       	rjmp	.+22     	; 0x26d4 <vfprintf+0x320>
    26be:	9d 2c       	mov	r9, r13
    26c0:	9e 0c       	add	r9, r14
    26c2:	91 1a       	sub	r9, r17
    26c4:	1e 2d       	mov	r17, r14
    26c6:	06 c0       	rjmp	.+12     	; 0x26d4 <vfprintf+0x320>
    26c8:	80 e2       	ldi	r24, 0x20	; 32
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	b3 01       	movw	r22, r6
    26ce:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    26d2:	1f 5f       	subi	r17, 0xFF	; 255
    26d4:	1e 15       	cp	r17, r14
    26d6:	c0 f3       	brcs	.-16     	; 0x26c8 <vfprintf+0x314>
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <vfprintf+0x32e>
    26da:	1e 15       	cp	r17, r14
    26dc:	10 f4       	brcc	.+4      	; 0x26e2 <vfprintf+0x32e>
    26de:	e1 1a       	sub	r14, r17
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <vfprintf+0x330>
    26e2:	ee 24       	eor	r14, r14
    26e4:	04 ff       	sbrs	r16, 4
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <vfprintf+0x352>
    26e8:	80 e3       	ldi	r24, 0x30	; 48
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	b3 01       	movw	r22, r6
    26ee:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    26f2:	02 ff       	sbrs	r16, 2
    26f4:	1d c0       	rjmp	.+58     	; 0x2730 <vfprintf+0x37c>
    26f6:	01 fd       	sbrc	r16, 1
    26f8:	03 c0       	rjmp	.+6      	; 0x2700 <vfprintf+0x34c>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e c0       	rjmp	.+28     	; 0x271c <vfprintf+0x368>
    2700:	88 e5       	ldi	r24, 0x58	; 88
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0b c0       	rjmp	.+22     	; 0x271c <vfprintf+0x368>
    2706:	80 2f       	mov	r24, r16
    2708:	86 78       	andi	r24, 0x86	; 134
    270a:	91 f0       	breq	.+36     	; 0x2730 <vfprintf+0x37c>
    270c:	01 ff       	sbrs	r16, 1
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <vfprintf+0x360>
    2710:	8b e2       	ldi	r24, 0x2B	; 43
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <vfprintf+0x362>
    2714:	80 e2       	ldi	r24, 0x20	; 32
    2716:	f7 fc       	sbrc	r15, 7
    2718:	8d e2       	ldi	r24, 0x2D	; 45
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	b3 01       	movw	r22, r6
    271e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2722:	06 c0       	rjmp	.+12     	; 0x2730 <vfprintf+0x37c>
    2724:	80 e3       	ldi	r24, 0x30	; 48
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	b3 01       	movw	r22, r6
    272a:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    272e:	9a 94       	dec	r9
    2730:	d9 14       	cp	r13, r9
    2732:	c0 f3       	brcs	.-16     	; 0x2724 <vfprintf+0x370>
    2734:	da 94       	dec	r13
    2736:	f1 01       	movw	r30, r2
    2738:	ed 0d       	add	r30, r13
    273a:	f1 1d       	adc	r31, r1
    273c:	80 81       	ld	r24, Z
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	b3 01       	movw	r22, r6
    2742:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2746:	dd 20       	and	r13, r13
    2748:	a9 f7       	brne	.-22     	; 0x2734 <vfprintf+0x380>
    274a:	06 c0       	rjmp	.+12     	; 0x2758 <vfprintf+0x3a4>
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	b3 01       	movw	r22, r6
    2752:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <fputc>
    2756:	ea 94       	dec	r14
    2758:	ee 20       	and	r14, r14
    275a:	c1 f7       	brne	.-16     	; 0x274c <vfprintf+0x398>
    275c:	43 ce       	rjmp	.-890    	; 0x23e4 <vfprintf+0x30>
    275e:	f3 01       	movw	r30, r6
    2760:	66 81       	ldd	r22, Z+6	; 0x06
    2762:	77 81       	ldd	r23, Z+7	; 0x07
    2764:	cb 01       	movw	r24, r22
    2766:	2b 96       	adiw	r28, 0x0b	; 11
    2768:	e2 e1       	ldi	r30, 0x12	; 18
    276a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__>

0000276e <dtoa_prf>:
    276e:	a9 e0       	ldi	r26, 0x09	; 9
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ed eb       	ldi	r30, 0xBD	; 189
    2774:	f3 e1       	ldi	r31, 0x13	; 19
    2776:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x8>
    277a:	6a 01       	movw	r12, r20
    277c:	12 2f       	mov	r17, r18
    277e:	a0 2e       	mov	r10, r16
    2780:	be 2c       	mov	r11, r14
    2782:	2b e3       	ldi	r18, 0x3B	; 59
    2784:	20 17       	cp	r18, r16
    2786:	18 f4       	brcc	.+6      	; 0x278e <dtoa_prf+0x20>
    2788:	2c e3       	ldi	r18, 0x3C	; 60
    278a:	92 2e       	mov	r9, r18
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <dtoa_prf+0x24>
    278e:	90 2e       	mov	r9, r16
    2790:	93 94       	inc	r9
    2792:	ae 01       	movw	r20, r28
    2794:	4f 5f       	subi	r20, 0xFF	; 255
    2796:	5f 4f       	sbci	r21, 0xFF	; 255
    2798:	27 e0       	ldi	r18, 0x07	; 7
    279a:	09 2d       	mov	r16, r9
    279c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__ftoa_engine>
    27a0:	bc 01       	movw	r22, r24
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	e8 2e       	mov	r14, r24
    27a6:	ff 24       	eor	r15, r15
    27a8:	c7 01       	movw	r24, r14
    27aa:	89 70       	andi	r24, 0x09	; 9
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	11 f4       	brne	.+4      	; 0x27b6 <dtoa_prf+0x48>
    27b2:	ad e2       	ldi	r26, 0x2D	; 45
    27b4:	09 c0       	rjmp	.+18     	; 0x27c8 <dtoa_prf+0x5a>
    27b6:	b1 fe       	sbrs	r11, 1
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <dtoa_prf+0x50>
    27ba:	ab e2       	ldi	r26, 0x2B	; 43
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <dtoa_prf+0x5a>
    27be:	b0 fc       	sbrc	r11, 0
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <dtoa_prf+0x58>
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <dtoa_prf+0x5a>
    27c6:	a0 e2       	ldi	r26, 0x20	; 32
    27c8:	e3 fe       	sbrs	r14, 3
    27ca:	3b c0       	rjmp	.+118    	; 0x2842 <dtoa_prf+0xd4>
    27cc:	aa 23       	and	r26, r26
    27ce:	11 f4       	brne	.+4      	; 0x27d4 <dtoa_prf+0x66>
    27d0:	23 e0       	ldi	r18, 0x03	; 3
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <dtoa_prf+0x68>
    27d4:	24 e0       	ldi	r18, 0x04	; 4
    27d6:	21 17       	cp	r18, r17
    27d8:	10 f0       	brcs	.+4      	; 0x27de <dtoa_prf+0x70>
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <dtoa_prf+0x74>
    27de:	12 1b       	sub	r17, r18
    27e0:	21 2f       	mov	r18, r17
    27e2:	eb 2c       	mov	r14, r11
    27e4:	b4 fe       	sbrs	r11, 4
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <dtoa_prf+0x7e>
    27e8:	32 2f       	mov	r19, r18
    27ea:	0a c0       	rjmp	.+20     	; 0x2800 <dtoa_prf+0x92>
    27ec:	f6 01       	movw	r30, r12
    27ee:	32 2f       	mov	r19, r18
    27f0:	80 e2       	ldi	r24, 0x20	; 32
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <dtoa_prf+0x8a>
    27f4:	81 93       	st	Z+, r24
    27f6:	31 50       	subi	r19, 0x01	; 1
    27f8:	33 23       	and	r19, r19
    27fa:	e1 f7       	brne	.-8      	; 0x27f4 <dtoa_prf+0x86>
    27fc:	c2 0e       	add	r12, r18
    27fe:	d1 1c       	adc	r13, r1
    2800:	aa 23       	and	r26, r26
    2802:	19 f0       	breq	.+6      	; 0x280a <dtoa_prf+0x9c>
    2804:	f6 01       	movw	r30, r12
    2806:	a1 93       	st	Z+, r26
    2808:	6f 01       	movw	r12, r30
    280a:	f6 01       	movw	r30, r12
    280c:	31 96       	adiw	r30, 0x01	; 1
    280e:	e2 fe       	sbrs	r14, 2
    2810:	05 c0       	rjmp	.+10     	; 0x281c <dtoa_prf+0xae>
    2812:	9e e4       	ldi	r25, 0x4E	; 78
    2814:	d6 01       	movw	r26, r12
    2816:	9c 93       	st	X, r25
    2818:	81 e4       	ldi	r24, 0x41	; 65
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <dtoa_prf+0xb6>
    281c:	9e e6       	ldi	r25, 0x6E	; 110
    281e:	d6 01       	movw	r26, r12
    2820:	9c 93       	st	X, r25
    2822:	81 e6       	ldi	r24, 0x61	; 97
    2824:	11 96       	adiw	r26, 0x01	; 1
    2826:	8c 93       	st	X, r24
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	32 96       	adiw	r30, 0x02	; 2
    282c:	df 01       	movw	r26, r30
    282e:	83 2f       	mov	r24, r19
    2830:	90 e2       	ldi	r25, 0x20	; 32
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <dtoa_prf+0xca>
    2834:	9d 93       	st	X+, r25
    2836:	81 50       	subi	r24, 0x01	; 1
    2838:	88 23       	and	r24, r24
    283a:	e1 f7       	brne	.-8      	; 0x2834 <dtoa_prf+0xc6>
    283c:	e3 0f       	add	r30, r19
    283e:	f1 1d       	adc	r31, r1
    2840:	40 c0       	rjmp	.+128    	; 0x28c2 <dtoa_prf+0x154>
    2842:	e2 fe       	sbrs	r14, 2
    2844:	42 c0       	rjmp	.+132    	; 0x28ca <dtoa_prf+0x15c>
    2846:	aa 23       	and	r26, r26
    2848:	11 f4       	brne	.+4      	; 0x284e <dtoa_prf+0xe0>
    284a:	23 e0       	ldi	r18, 0x03	; 3
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <dtoa_prf+0xe2>
    284e:	24 e0       	ldi	r18, 0x04	; 4
    2850:	21 17       	cp	r18, r17
    2852:	10 f0       	brcs	.+4      	; 0x2858 <dtoa_prf+0xea>
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	02 c0       	rjmp	.+4      	; 0x285c <dtoa_prf+0xee>
    2858:	12 1b       	sub	r17, r18
    285a:	21 2f       	mov	r18, r17
    285c:	eb 2c       	mov	r14, r11
    285e:	b4 fe       	sbrs	r11, 4
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <dtoa_prf+0xf8>
    2862:	92 2f       	mov	r25, r18
    2864:	0a c0       	rjmp	.+20     	; 0x287a <dtoa_prf+0x10c>
    2866:	f6 01       	movw	r30, r12
    2868:	92 2f       	mov	r25, r18
    286a:	80 e2       	ldi	r24, 0x20	; 32
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <dtoa_prf+0x104>
    286e:	81 93       	st	Z+, r24
    2870:	91 50       	subi	r25, 0x01	; 1
    2872:	99 23       	and	r25, r25
    2874:	e1 f7       	brne	.-8      	; 0x286e <dtoa_prf+0x100>
    2876:	c2 0e       	add	r12, r18
    2878:	d1 1c       	adc	r13, r1
    287a:	aa 23       	and	r26, r26
    287c:	19 f0       	breq	.+6      	; 0x2884 <dtoa_prf+0x116>
    287e:	f6 01       	movw	r30, r12
    2880:	a1 93       	st	Z+, r26
    2882:	6f 01       	movw	r12, r30
    2884:	f6 01       	movw	r30, r12
    2886:	31 96       	adiw	r30, 0x01	; 1
    2888:	e2 fe       	sbrs	r14, 2
    288a:	08 c0       	rjmp	.+16     	; 0x289c <dtoa_prf+0x12e>
    288c:	89 e4       	ldi	r24, 0x49	; 73
    288e:	d6 01       	movw	r26, r12
    2890:	8c 93       	st	X, r24
    2892:	8e e4       	ldi	r24, 0x4E	; 78
    2894:	11 96       	adiw	r26, 0x01	; 1
    2896:	8c 93       	st	X, r24
    2898:	86 e4       	ldi	r24, 0x46	; 70
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <dtoa_prf+0x13c>
    289c:	89 e6       	ldi	r24, 0x69	; 105
    289e:	d6 01       	movw	r26, r12
    28a0:	8c 93       	st	X, r24
    28a2:	8e e6       	ldi	r24, 0x6E	; 110
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	8c 93       	st	X, r24
    28a8:	86 e6       	ldi	r24, 0x66	; 102
    28aa:	81 83       	std	Z+1, r24	; 0x01
    28ac:	32 96       	adiw	r30, 0x02	; 2
    28ae:	df 01       	movw	r26, r30
    28b0:	89 2f       	mov	r24, r25
    28b2:	20 e2       	ldi	r18, 0x20	; 32
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <dtoa_prf+0x14c>
    28b6:	2d 93       	st	X+, r18
    28b8:	81 50       	subi	r24, 0x01	; 1
    28ba:	88 23       	and	r24, r24
    28bc:	e1 f7       	brne	.-8      	; 0x28b6 <dtoa_prf+0x148>
    28be:	e9 0f       	add	r30, r25
    28c0:	f1 1d       	adc	r31, r1
    28c2:	10 82       	st	Z, r1
    28c4:	2e ef       	ldi	r18, 0xFE	; 254
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	af c0       	rjmp	.+350    	; 0x2a28 <dtoa_prf+0x2ba>
    28ca:	16 16       	cp	r1, r22
    28cc:	17 06       	cpc	r1, r23
    28ce:	1c f0       	brlt	.+6      	; 0x28d6 <dtoa_prf+0x168>
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <dtoa_prf+0x16e>
    28d6:	ab 01       	movw	r20, r22
    28d8:	4f 5f       	subi	r20, 0xFF	; 255
    28da:	5f 4f       	sbci	r21, 0xFF	; 255
    28dc:	aa 20       	and	r10, r10
    28de:	19 f4       	brne	.+6      	; 0x28e6 <dtoa_prf+0x178>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	03 c0       	rjmp	.+6      	; 0x28ec <dtoa_prf+0x17e>
    28e6:	8a 2d       	mov	r24, r10
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	aa 23       	and	r26, r26
    28f2:	11 f0       	breq	.+4      	; 0x28f8 <dtoa_prf+0x18a>
    28f4:	21 e0       	ldi	r18, 0x01	; 1
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	24 0f       	add	r18, r20
    28fa:	35 1f       	adc	r19, r21
    28fc:	28 0f       	add	r18, r24
    28fe:	39 1f       	adc	r19, r25
    2900:	81 2f       	mov	r24, r17
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	14 f0       	brlt	.+4      	; 0x290e <dtoa_prf+0x1a0>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <dtoa_prf+0x1a4>
    290e:	12 1b       	sub	r17, r18
    2910:	21 2f       	mov	r18, r17
    2912:	4b 2d       	mov	r20, r11
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	ca 01       	movw	r24, r20
    2918:	80 71       	andi	r24, 0x10	; 16
    291a:	90 70       	andi	r25, 0x00	; 0
    291c:	b4 fc       	sbrc	r11, 4
    291e:	0d c0       	rjmp	.+26     	; 0x293a <dtoa_prf+0x1cc>
    2920:	b3 fc       	sbrc	r11, 3
    2922:	0b c0       	rjmp	.+22     	; 0x293a <dtoa_prf+0x1cc>
    2924:	f6 01       	movw	r30, r12
    2926:	32 2f       	mov	r19, r18
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <dtoa_prf+0x1c2>
    292c:	41 93       	st	Z+, r20
    292e:	31 50       	subi	r19, 0x01	; 1
    2930:	33 23       	and	r19, r19
    2932:	e1 f7       	brne	.-8      	; 0x292c <dtoa_prf+0x1be>
    2934:	c2 0e       	add	r12, r18
    2936:	d1 1c       	adc	r13, r1
    2938:	01 c0       	rjmp	.+2      	; 0x293c <dtoa_prf+0x1ce>
    293a:	32 2f       	mov	r19, r18
    293c:	aa 23       	and	r26, r26
    293e:	19 f0       	breq	.+6      	; 0x2946 <dtoa_prf+0x1d8>
    2940:	f6 01       	movw	r30, r12
    2942:	a1 93       	st	Z+, r26
    2944:	6f 01       	movw	r12, r30
    2946:	89 2b       	or	r24, r25
    2948:	11 f0       	breq	.+4      	; 0x294e <dtoa_prf+0x1e0>
    294a:	13 2f       	mov	r17, r19
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <dtoa_prf+0x1f4>
    294e:	f6 01       	movw	r30, r12
    2950:	13 2f       	mov	r17, r19
    2952:	80 e3       	ldi	r24, 0x30	; 48
    2954:	02 c0       	rjmp	.+4      	; 0x295a <dtoa_prf+0x1ec>
    2956:	81 93       	st	Z+, r24
    2958:	11 50       	subi	r17, 0x01	; 1
    295a:	11 23       	and	r17, r17
    295c:	e1 f7       	brne	.-8      	; 0x2956 <dtoa_prf+0x1e8>
    295e:	c3 0e       	add	r12, r19
    2960:	d1 1c       	adc	r13, r1
    2962:	09 2d       	mov	r16, r9
    2964:	06 0f       	add	r16, r22
    2966:	ba 80       	ldd	r11, Y+2	; 0x02
    2968:	90 e1       	ldi	r25, 0x10	; 16
    296a:	89 2e       	mov	r8, r25
    296c:	91 2c       	mov	r9, r1
    296e:	8e 20       	and	r8, r14
    2970:	9f 20       	and	r9, r15
    2972:	e4 fe       	sbrs	r14, 4
    2974:	04 c0       	rjmp	.+8      	; 0x297e <dtoa_prf+0x210>
    2976:	f1 e3       	ldi	r31, 0x31	; 49
    2978:	bf 16       	cp	r11, r31
    297a:	09 f4       	brne	.+2      	; 0x297e <dtoa_prf+0x210>
    297c:	01 50       	subi	r16, 0x01	; 1
    297e:	10 16       	cp	r1, r16
    2980:	14 f0       	brlt	.+4      	; 0x2986 <dtoa_prf+0x218>
    2982:	01 e0       	ldi	r16, 0x01	; 1
    2984:	03 c0       	rjmp	.+6      	; 0x298c <dtoa_prf+0x21e>
    2986:	09 30       	cpi	r16, 0x09	; 9
    2988:	08 f0       	brcs	.+2      	; 0x298c <dtoa_prf+0x21e>
    298a:	08 e0       	ldi	r16, 0x08	; 8
    298c:	9b 01       	movw	r18, r22
    298e:	77 ff       	sbrs	r23, 7
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <dtoa_prf+0x228>
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	cb 01       	movw	r24, r22
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	82 1b       	sub	r24, r18
    299c:	93 0b       	sbc	r25, r19
    299e:	fe 01       	movw	r30, r28
    29a0:	31 96       	adiw	r30, 0x01	; 1
    29a2:	e8 0f       	add	r30, r24
    29a4:	f9 1f       	adc	r31, r25
    29a6:	8e e2       	ldi	r24, 0x2E	; 46
    29a8:	f8 2e       	mov	r15, r24
    29aa:	3b 01       	movw	r6, r22
    29ac:	60 1a       	sub	r6, r16
    29ae:	71 08       	sbc	r7, r1
    29b0:	8a 2d       	mov	r24, r10
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	44 27       	eor	r20, r20
    29b6:	55 27       	eor	r21, r21
    29b8:	48 1b       	sub	r20, r24
    29ba:	59 0b       	sbc	r21, r25
    29bc:	8f ef       	ldi	r24, 0xFF	; 255
    29be:	2f 3f       	cpi	r18, 0xFF	; 255
    29c0:	38 07       	cpc	r19, r24
    29c2:	19 f4       	brne	.+6      	; 0x29ca <dtoa_prf+0x25c>
    29c4:	d6 01       	movw	r26, r12
    29c6:	fd 92       	st	X+, r15
    29c8:	6d 01       	movw	r12, r26
    29ca:	62 17       	cp	r22, r18
    29cc:	73 07       	cpc	r23, r19
    29ce:	2c f0       	brlt	.+10     	; 0x29da <dtoa_prf+0x26c>
    29d0:	62 16       	cp	r6, r18
    29d2:	73 06       	cpc	r7, r19
    29d4:	14 f4       	brge	.+4      	; 0x29da <dtoa_prf+0x26c>
    29d6:	80 81       	ld	r24, Z
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <dtoa_prf+0x26e>
    29da:	80 e3       	ldi	r24, 0x30	; 48
    29dc:	21 50       	subi	r18, 0x01	; 1
    29de:	30 40       	sbci	r19, 0x00	; 0
    29e0:	31 96       	adiw	r30, 0x01	; 1
    29e2:	24 17       	cp	r18, r20
    29e4:	35 07       	cpc	r19, r21
    29e6:	24 f0       	brlt	.+8      	; 0x29f0 <dtoa_prf+0x282>
    29e8:	d6 01       	movw	r26, r12
    29ea:	8d 93       	st	X+, r24
    29ec:	6d 01       	movw	r12, r26
    29ee:	e6 cf       	rjmp	.-52     	; 0x29bc <dtoa_prf+0x24e>
    29f0:	26 17       	cp	r18, r22
    29f2:	37 07       	cpc	r19, r23
    29f4:	49 f4       	brne	.+18     	; 0x2a08 <dtoa_prf+0x29a>
    29f6:	b5 e3       	ldi	r27, 0x35	; 53
    29f8:	bb 15       	cp	r27, r11
    29fa:	28 f0       	brcs	.+10     	; 0x2a06 <dtoa_prf+0x298>
    29fc:	bb 16       	cp	r11, r27
    29fe:	21 f4       	brne	.+8      	; 0x2a08 <dtoa_prf+0x29a>
    2a00:	81 14       	cp	r8, r1
    2a02:	91 04       	cpc	r9, r1
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <dtoa_prf+0x29a>
    2a06:	81 e3       	ldi	r24, 0x31	; 49
    2a08:	f6 01       	movw	r30, r12
    2a0a:	81 93       	st	Z+, r24
    2a0c:	d6 01       	movw	r26, r12
    2a0e:	81 2f       	mov	r24, r17
    2a10:	90 e2       	ldi	r25, 0x20	; 32
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <dtoa_prf+0x2aa>
    2a14:	9c 93       	st	X, r25
    2a16:	81 50       	subi	r24, 0x01	; 1
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	88 23       	and	r24, r24
    2a1c:	d9 f7       	brne	.-10     	; 0x2a14 <dtoa_prf+0x2a6>
    2a1e:	e1 0f       	add	r30, r17
    2a20:	f1 1d       	adc	r31, r1
    2a22:	10 82       	st	Z, r1
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	c9 01       	movw	r24, r18
    2a2a:	29 96       	adiw	r28, 0x09	; 9
    2a2c:	ee e0       	ldi	r30, 0x0E	; 14
    2a2e:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x8>

00002a32 <__ftoa_engine>:
    2a32:	28 30       	cpi	r18, 0x08	; 8
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <__ftoa_engine+0x6>
    2a36:	27 e0       	ldi	r18, 0x07	; 7
    2a38:	33 27       	eor	r19, r19
    2a3a:	da 01       	movw	r26, r20
    2a3c:	99 0f       	add	r25, r25
    2a3e:	31 1d       	adc	r19, r1
    2a40:	87 fd       	sbrc	r24, 7
    2a42:	91 60       	ori	r25, 0x01	; 1
    2a44:	00 96       	adiw	r24, 0x00	; 0
    2a46:	61 05       	cpc	r22, r1
    2a48:	71 05       	cpc	r23, r1
    2a4a:	39 f4       	brne	.+14     	; 0x2a5a <__ftoa_engine+0x28>
    2a4c:	32 60       	ori	r19, 0x02	; 2
    2a4e:	2e 5f       	subi	r18, 0xFE	; 254
    2a50:	3d 93       	st	X+, r19
    2a52:	30 e3       	ldi	r19, 0x30	; 48
    2a54:	2a 95       	dec	r18
    2a56:	e1 f7       	brne	.-8      	; 0x2a50 <__ftoa_engine+0x1e>
    2a58:	08 95       	ret
    2a5a:	9f 3f       	cpi	r25, 0xFF	; 255
    2a5c:	30 f0       	brcs	.+12     	; 0x2a6a <__ftoa_engine+0x38>
    2a5e:	80 38       	cpi	r24, 0x80	; 128
    2a60:	71 05       	cpc	r23, r1
    2a62:	61 05       	cpc	r22, r1
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <__ftoa_engine+0x36>
    2a66:	3c 5f       	subi	r19, 0xFC	; 252
    2a68:	3c 5f       	subi	r19, 0xFC	; 252
    2a6a:	3d 93       	st	X+, r19
    2a6c:	91 30       	cpi	r25, 0x01	; 1
    2a6e:	08 f0       	brcs	.+2      	; 0x2a72 <__ftoa_engine+0x40>
    2a70:	80 68       	ori	r24, 0x80	; 128
    2a72:	91 1d       	adc	r25, r1
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	1f 93       	push	r17
    2a7a:	0f 93       	push	r16
    2a7c:	ff 92       	push	r15
    2a7e:	ef 92       	push	r14
    2a80:	19 2f       	mov	r17, r25
    2a82:	98 7f       	andi	r25, 0xF8	; 248
    2a84:	96 95       	lsr	r25
    2a86:	e9 2f       	mov	r30, r25
    2a88:	96 95       	lsr	r25
    2a8a:	96 95       	lsr	r25
    2a8c:	e9 0f       	add	r30, r25
    2a8e:	ff 27       	eor	r31, r31
    2a90:	ed 54       	subi	r30, 0x4D	; 77
    2a92:	fd 4f       	sbci	r31, 0xFD	; 253
    2a94:	99 27       	eor	r25, r25
    2a96:	33 27       	eor	r19, r19
    2a98:	ee 24       	eor	r14, r14
    2a9a:	ff 24       	eor	r15, r15
    2a9c:	a7 01       	movw	r20, r14
    2a9e:	e7 01       	movw	r28, r14
    2aa0:	05 90       	lpm	r0, Z+
    2aa2:	08 94       	sec
    2aa4:	07 94       	ror	r0
    2aa6:	28 f4       	brcc	.+10     	; 0x2ab2 <__ftoa_engine+0x80>
    2aa8:	36 0f       	add	r19, r22
    2aaa:	e7 1e       	adc	r14, r23
    2aac:	f8 1e       	adc	r15, r24
    2aae:	49 1f       	adc	r20, r25
    2ab0:	51 1d       	adc	r21, r1
    2ab2:	66 0f       	add	r22, r22
    2ab4:	77 1f       	adc	r23, r23
    2ab6:	88 1f       	adc	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	06 94       	lsr	r0
    2abc:	a1 f7       	brne	.-24     	; 0x2aa6 <__ftoa_engine+0x74>
    2abe:	05 90       	lpm	r0, Z+
    2ac0:	07 94       	ror	r0
    2ac2:	28 f4       	brcc	.+10     	; 0x2ace <__ftoa_engine+0x9c>
    2ac4:	e7 0e       	add	r14, r23
    2ac6:	f8 1e       	adc	r15, r24
    2ac8:	49 1f       	adc	r20, r25
    2aca:	56 1f       	adc	r21, r22
    2acc:	c1 1d       	adc	r28, r1
    2ace:	77 0f       	add	r23, r23
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	66 1f       	adc	r22, r22
    2ad6:	06 94       	lsr	r0
    2ad8:	a1 f7       	brne	.-24     	; 0x2ac2 <__ftoa_engine+0x90>
    2ada:	05 90       	lpm	r0, Z+
    2adc:	07 94       	ror	r0
    2ade:	28 f4       	brcc	.+10     	; 0x2aea <__ftoa_engine+0xb8>
    2ae0:	f8 0e       	add	r15, r24
    2ae2:	49 1f       	adc	r20, r25
    2ae4:	56 1f       	adc	r21, r22
    2ae6:	c7 1f       	adc	r28, r23
    2ae8:	d1 1d       	adc	r29, r1
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	66 1f       	adc	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	06 94       	lsr	r0
    2af4:	a1 f7       	brne	.-24     	; 0x2ade <__ftoa_engine+0xac>
    2af6:	05 90       	lpm	r0, Z+
    2af8:	07 94       	ror	r0
    2afa:	20 f4       	brcc	.+8      	; 0x2b04 <__ftoa_engine+0xd2>
    2afc:	49 0f       	add	r20, r25
    2afe:	56 1f       	adc	r21, r22
    2b00:	c7 1f       	adc	r28, r23
    2b02:	d8 1f       	adc	r29, r24
    2b04:	99 0f       	add	r25, r25
    2b06:	66 1f       	adc	r22, r22
    2b08:	77 1f       	adc	r23, r23
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	06 94       	lsr	r0
    2b0e:	a9 f7       	brne	.-22     	; 0x2afa <__ftoa_engine+0xc8>
    2b10:	84 91       	lpm	r24, Z+
    2b12:	10 95       	com	r17
    2b14:	17 70       	andi	r17, 0x07	; 7
    2b16:	41 f0       	breq	.+16     	; 0x2b28 <__ftoa_engine+0xf6>
    2b18:	d6 95       	lsr	r29
    2b1a:	c7 95       	ror	r28
    2b1c:	57 95       	ror	r21
    2b1e:	47 95       	ror	r20
    2b20:	f7 94       	ror	r15
    2b22:	e7 94       	ror	r14
    2b24:	1a 95       	dec	r17
    2b26:	c1 f7       	brne	.-16     	; 0x2b18 <__ftoa_engine+0xe6>
    2b28:	e9 e5       	ldi	r30, 0x59	; 89
    2b2a:	f2 e0       	ldi	r31, 0x02	; 2
    2b2c:	68 94       	set
    2b2e:	15 90       	lpm	r1, Z+
    2b30:	15 91       	lpm	r17, Z+
    2b32:	35 91       	lpm	r19, Z+
    2b34:	65 91       	lpm	r22, Z+
    2b36:	95 91       	lpm	r25, Z+
    2b38:	05 90       	lpm	r0, Z+
    2b3a:	7f e2       	ldi	r23, 0x2F	; 47
    2b3c:	73 95       	inc	r23
    2b3e:	e1 18       	sub	r14, r1
    2b40:	f1 0a       	sbc	r15, r17
    2b42:	43 0b       	sbc	r20, r19
    2b44:	56 0b       	sbc	r21, r22
    2b46:	c9 0b       	sbc	r28, r25
    2b48:	d0 09       	sbc	r29, r0
    2b4a:	c0 f7       	brcc	.-16     	; 0x2b3c <__ftoa_engine+0x10a>
    2b4c:	e1 0c       	add	r14, r1
    2b4e:	f1 1e       	adc	r15, r17
    2b50:	43 1f       	adc	r20, r19
    2b52:	56 1f       	adc	r21, r22
    2b54:	c9 1f       	adc	r28, r25
    2b56:	d0 1d       	adc	r29, r0
    2b58:	7e f4       	brtc	.+30     	; 0x2b78 <__ftoa_engine+0x146>
    2b5a:	70 33       	cpi	r23, 0x30	; 48
    2b5c:	11 f4       	brne	.+4      	; 0x2b62 <__ftoa_engine+0x130>
    2b5e:	8a 95       	dec	r24
    2b60:	e6 cf       	rjmp	.-52     	; 0x2b2e <__ftoa_engine+0xfc>
    2b62:	e8 94       	clt
    2b64:	01 50       	subi	r16, 0x01	; 1
    2b66:	30 f0       	brcs	.+12     	; 0x2b74 <__ftoa_engine+0x142>
    2b68:	08 0f       	add	r16, r24
    2b6a:	0a f4       	brpl	.+2      	; 0x2b6e <__ftoa_engine+0x13c>
    2b6c:	00 27       	eor	r16, r16
    2b6e:	02 17       	cp	r16, r18
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <__ftoa_engine+0x142>
    2b72:	20 2f       	mov	r18, r16
    2b74:	23 95       	inc	r18
    2b76:	02 2f       	mov	r16, r18
    2b78:	7a 33       	cpi	r23, 0x3A	; 58
    2b7a:	28 f0       	brcs	.+10     	; 0x2b86 <__ftoa_engine+0x154>
    2b7c:	79 e3       	ldi	r23, 0x39	; 57
    2b7e:	7d 93       	st	X+, r23
    2b80:	2a 95       	dec	r18
    2b82:	e9 f7       	brne	.-6      	; 0x2b7e <__ftoa_engine+0x14c>
    2b84:	10 c0       	rjmp	.+32     	; 0x2ba6 <__ftoa_engine+0x174>
    2b86:	7d 93       	st	X+, r23
    2b88:	2a 95       	dec	r18
    2b8a:	89 f6       	brne	.-94     	; 0x2b2e <__ftoa_engine+0xfc>
    2b8c:	06 94       	lsr	r0
    2b8e:	97 95       	ror	r25
    2b90:	67 95       	ror	r22
    2b92:	37 95       	ror	r19
    2b94:	17 95       	ror	r17
    2b96:	17 94       	ror	r1
    2b98:	e1 18       	sub	r14, r1
    2b9a:	f1 0a       	sbc	r15, r17
    2b9c:	43 0b       	sbc	r20, r19
    2b9e:	56 0b       	sbc	r21, r22
    2ba0:	c9 0b       	sbc	r28, r25
    2ba2:	d0 09       	sbc	r29, r0
    2ba4:	98 f0       	brcs	.+38     	; 0x2bcc <__ftoa_engine+0x19a>
    2ba6:	23 95       	inc	r18
    2ba8:	7e 91       	ld	r23, -X
    2baa:	73 95       	inc	r23
    2bac:	7a 33       	cpi	r23, 0x3A	; 58
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <__ftoa_engine+0x180>
    2bb0:	70 e3       	ldi	r23, 0x30	; 48
    2bb2:	7c 93       	st	X, r23
    2bb4:	20 13       	cpse	r18, r16
    2bb6:	b8 f7       	brcc	.-18     	; 0x2ba6 <__ftoa_engine+0x174>
    2bb8:	7e 91       	ld	r23, -X
    2bba:	70 61       	ori	r23, 0x10	; 16
    2bbc:	7d 93       	st	X+, r23
    2bbe:	30 f0       	brcs	.+12     	; 0x2bcc <__ftoa_engine+0x19a>
    2bc0:	83 95       	inc	r24
    2bc2:	71 e3       	ldi	r23, 0x31	; 49
    2bc4:	7d 93       	st	X+, r23
    2bc6:	70 e3       	ldi	r23, 0x30	; 48
    2bc8:	2a 95       	dec	r18
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <__ftoa_engine+0x192>
    2bcc:	11 24       	eor	r1, r1
    2bce:	ef 90       	pop	r14
    2bd0:	ff 90       	pop	r15
    2bd2:	0f 91       	pop	r16
    2bd4:	1f 91       	pop	r17
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	99 27       	eor	r25, r25
    2bdc:	87 fd       	sbrc	r24, 7
    2bde:	90 95       	com	r25
    2be0:	08 95       	ret

00002be2 <strnlen_P>:
    2be2:	fc 01       	movw	r30, r24
    2be4:	05 90       	lpm	r0, Z+
    2be6:	61 50       	subi	r22, 0x01	; 1
    2be8:	70 40       	sbci	r23, 0x00	; 0
    2bea:	01 10       	cpse	r0, r1
    2bec:	d8 f7       	brcc	.-10     	; 0x2be4 <strnlen_P+0x2>
    2bee:	80 95       	com	r24
    2bf0:	90 95       	com	r25
    2bf2:	8e 0f       	add	r24, r30
    2bf4:	9f 1f       	adc	r25, r31
    2bf6:	08 95       	ret

00002bf8 <strnlen>:
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	61 50       	subi	r22, 0x01	; 1
    2bfc:	70 40       	sbci	r23, 0x00	; 0
    2bfe:	01 90       	ld	r0, Z+
    2c00:	01 10       	cpse	r0, r1
    2c02:	d8 f7       	brcc	.-10     	; 0x2bfa <strnlen+0x2>
    2c04:	80 95       	com	r24
    2c06:	90 95       	com	r25
    2c08:	8e 0f       	add	r24, r30
    2c0a:	9f 1f       	adc	r25, r31
    2c0c:	08 95       	ret

00002c0e <fputc>:
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	8c 01       	movw	r16, r24
    2c18:	eb 01       	movw	r28, r22
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	81 ff       	sbrs	r24, 1
    2c1e:	1b c0       	rjmp	.+54     	; 0x2c56 <fputc+0x48>
    2c20:	82 ff       	sbrs	r24, 2
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <fputc+0x30>
    2c24:	2e 81       	ldd	r18, Y+6	; 0x06
    2c26:	3f 81       	ldd	r19, Y+7	; 0x07
    2c28:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	64 f4       	brge	.+24     	; 0x2c4a <fputc+0x3c>
    2c32:	e8 81       	ld	r30, Y
    2c34:	f9 81       	ldd	r31, Y+1	; 0x01
    2c36:	01 93       	st	Z+, r16
    2c38:	f9 83       	std	Y+1, r31	; 0x01
    2c3a:	e8 83       	st	Y, r30
    2c3c:	06 c0       	rjmp	.+12     	; 0x2c4a <fputc+0x3c>
    2c3e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c40:	f9 85       	ldd	r31, Y+9	; 0x09
    2c42:	80 2f       	mov	r24, r16
    2c44:	09 95       	icall
    2c46:	89 2b       	or	r24, r25
    2c48:	31 f4       	brne	.+12     	; 0x2c56 <fputc+0x48>
    2c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	9f 83       	std	Y+7, r25	; 0x07
    2c52:	8e 83       	std	Y+6, r24	; 0x06
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <fputc+0x4c>
    2c56:	0f ef       	ldi	r16, 0xFF	; 255
    2c58:	1f ef       	ldi	r17, 0xFF	; 255
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	08 95       	ret

00002c66 <__ultoa_invert>:
    2c66:	fa 01       	movw	r30, r20
    2c68:	aa 27       	eor	r26, r26
    2c6a:	28 30       	cpi	r18, 0x08	; 8
    2c6c:	51 f1       	breq	.+84     	; 0x2cc2 <__ultoa_invert+0x5c>
    2c6e:	20 31       	cpi	r18, 0x10	; 16
    2c70:	81 f1       	breq	.+96     	; 0x2cd2 <__ultoa_invert+0x6c>
    2c72:	e8 94       	clt
    2c74:	6f 93       	push	r22
    2c76:	6e 7f       	andi	r22, 0xFE	; 254
    2c78:	6e 5f       	subi	r22, 0xFE	; 254
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c80:	af 4f       	sbci	r26, 0xFF	; 255
    2c82:	b1 e0       	ldi	r27, 0x01	; 1
    2c84:	3e d0       	rcall	.+124    	; 0x2d02 <__ultoa_invert+0x9c>
    2c86:	b4 e0       	ldi	r27, 0x04	; 4
    2c88:	3c d0       	rcall	.+120    	; 0x2d02 <__ultoa_invert+0x9c>
    2c8a:	67 0f       	add	r22, r23
    2c8c:	78 1f       	adc	r23, r24
    2c8e:	89 1f       	adc	r24, r25
    2c90:	9a 1f       	adc	r25, r26
    2c92:	a1 1d       	adc	r26, r1
    2c94:	68 0f       	add	r22, r24
    2c96:	79 1f       	adc	r23, r25
    2c98:	8a 1f       	adc	r24, r26
    2c9a:	91 1d       	adc	r25, r1
    2c9c:	a1 1d       	adc	r26, r1
    2c9e:	6a 0f       	add	r22, r26
    2ca0:	71 1d       	adc	r23, r1
    2ca2:	81 1d       	adc	r24, r1
    2ca4:	91 1d       	adc	r25, r1
    2ca6:	a1 1d       	adc	r26, r1
    2ca8:	20 d0       	rcall	.+64     	; 0x2cea <__ultoa_invert+0x84>
    2caa:	09 f4       	brne	.+2      	; 0x2cae <__ultoa_invert+0x48>
    2cac:	68 94       	set
    2cae:	3f 91       	pop	r19
    2cb0:	2a e0       	ldi	r18, 0x0A	; 10
    2cb2:	26 9f       	mul	r18, r22
    2cb4:	11 24       	eor	r1, r1
    2cb6:	30 19       	sub	r19, r0
    2cb8:	30 5d       	subi	r19, 0xD0	; 208
    2cba:	31 93       	st	Z+, r19
    2cbc:	de f6       	brtc	.-74     	; 0x2c74 <__ultoa_invert+0xe>
    2cbe:	cf 01       	movw	r24, r30
    2cc0:	08 95       	ret
    2cc2:	46 2f       	mov	r20, r22
    2cc4:	47 70       	andi	r20, 0x07	; 7
    2cc6:	40 5d       	subi	r20, 0xD0	; 208
    2cc8:	41 93       	st	Z+, r20
    2cca:	b3 e0       	ldi	r27, 0x03	; 3
    2ccc:	0f d0       	rcall	.+30     	; 0x2cec <__ultoa_invert+0x86>
    2cce:	c9 f7       	brne	.-14     	; 0x2cc2 <__ultoa_invert+0x5c>
    2cd0:	f6 cf       	rjmp	.-20     	; 0x2cbe <__ultoa_invert+0x58>
    2cd2:	46 2f       	mov	r20, r22
    2cd4:	4f 70       	andi	r20, 0x0F	; 15
    2cd6:	40 5d       	subi	r20, 0xD0	; 208
    2cd8:	4a 33       	cpi	r20, 0x3A	; 58
    2cda:	18 f0       	brcs	.+6      	; 0x2ce2 <__ultoa_invert+0x7c>
    2cdc:	49 5d       	subi	r20, 0xD9	; 217
    2cde:	31 fd       	sbrc	r19, 1
    2ce0:	40 52       	subi	r20, 0x20	; 32
    2ce2:	41 93       	st	Z+, r20
    2ce4:	02 d0       	rcall	.+4      	; 0x2cea <__ultoa_invert+0x84>
    2ce6:	a9 f7       	brne	.-22     	; 0x2cd2 <__ultoa_invert+0x6c>
    2ce8:	ea cf       	rjmp	.-44     	; 0x2cbe <__ultoa_invert+0x58>
    2cea:	b4 e0       	ldi	r27, 0x04	; 4
    2cec:	a6 95       	lsr	r26
    2cee:	97 95       	ror	r25
    2cf0:	87 95       	ror	r24
    2cf2:	77 95       	ror	r23
    2cf4:	67 95       	ror	r22
    2cf6:	ba 95       	dec	r27
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <__ultoa_invert+0x86>
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	61 05       	cpc	r22, r1
    2cfe:	71 05       	cpc	r23, r1
    2d00:	08 95       	ret
    2d02:	9b 01       	movw	r18, r22
    2d04:	ac 01       	movw	r20, r24
    2d06:	0a 2e       	mov	r0, r26
    2d08:	06 94       	lsr	r0
    2d0a:	57 95       	ror	r21
    2d0c:	47 95       	ror	r20
    2d0e:	37 95       	ror	r19
    2d10:	27 95       	ror	r18
    2d12:	ba 95       	dec	r27
    2d14:	c9 f7       	brne	.-14     	; 0x2d08 <__ultoa_invert+0xa2>
    2d16:	62 0f       	add	r22, r18
    2d18:	73 1f       	adc	r23, r19
    2d1a:	84 1f       	adc	r24, r20
    2d1c:	95 1f       	adc	r25, r21
    2d1e:	a0 1d       	adc	r26, r0
    2d20:	08 95       	ret

00002d22 <_exit>:
    2d22:	f8 94       	cli

00002d24 <__stop_program>:
    2d24:	ff cf       	rjmp	.-2      	; 0x2d24 <__stop_program>
