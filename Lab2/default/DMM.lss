
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00002714  000027a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800242  00800242  000028ea  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000083a  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000383c  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001866  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002381  00000000  00000000  000083a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  0000a728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c0  00000000  00000000  0000ab48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001301  00000000  00000000  0000b408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_12>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_15>
      40:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_16>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      58:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      5c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      60:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      64:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      68:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      6c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000070 <LCDBlank>:
      70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000082 <LCDHelloTop>:
      82:	44 4d 4d 20 4d 41 53 54 45 52 20 76 39 30 30 31     DMM MASTER v9001
	...

00000094 <LCDHelloBot>:
      94:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000a6 <LCDRange>:
      a6:	52 41 4e 47 45 3a 20 00 00                          RANGE: ..

000000af <LCDAutorangeOn>:
      af:	41 55 54 4f 52 41 4e 47 45 3a 20 4f 4e 00 00        AUTORANGE: ON..

000000be <LCD5Volts>:
      be:	35 20 56 4f 4c 54 53 00 00                          5 VOLTS..

000000c7 <LCD256Volts>:
      c7:	32 2e 35 36 20 56 4f 4c 54 53 00 00                 2.56 VOLTS..

000000d3 <LCD11Volts>:
      d3:	31 2e 31 20 56 4f 4c 54 53 00 00                    1.1 VOLTS..

000000de <LCD1kOhm>:
      de:	31 20 6b 4f 48 4d 00 00                             1 kOHM..

000000e6 <LCD10kOhm>:
      e6:	31 30 20 6b 4f 48 4d 00 00                          10 kOHM..

000000ef <LCD100kOhm>:
      ef:	31 30 30 20 6b 4f 48 4d 00 00                       100 kOHM..

000000f9 <LCD1kHz>:
      f9:	31 20 6b 48 5a 00 00                                1 kHZ..

00000100 <LCD10kHz>:
     100:	31 30 20 6b 48 5a 00 00                             10 kHZ..

00000108 <LCDMode>:
     108:	4d 4f 44 45 3a 20 00 00                             MODE: ..

00000110 <LCDVolt>:
     110:	56 4f 4c 54 4d 45 54 45 52 20 00 00                 VOLTMETER ..

0000011c <LCDOhm>:
     11c:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

00000126 <LCDFreq>:
     126:	46 52 45 51 55 45 4e 43 59 00 00                    FREQUENCY..

00000131 <LCDManWelcomeTop>:
     131:	48 45 4c 50 20 4d 45 4e 55 00 00                    HELP MENU..

0000013c <LCDManWelcomeBot>:
     13c:	50 52 45 53 53 20 41 4e 59 20 4b 45 59 00 00        PRESS ANY KEY..

0000014b <LCDNavigation1Top>:
     14b:	50 52 45 53 53 20 23 20 46 4f 52 20 4e 45 58 54     PRESS # FOR NEXT
	...

0000015d <LCDNavigation1Bot>:
     15d:	50 52 45 53 53 20 2a 20 46 4f 52 20 50 52 45 56     PRESS * FOR PREV
	...

0000016f <LCDNavigation2Top>:
     16f:	50 52 45 53 53 20 30 20 54 4f 20 45 58 49 54 00     PRESS 0 TO EXIT.
	...

00000180 <LCDNavigation2Bot>:
     180:	54 48 45 20 48 45 4c 50 20 4d 45 4e 55 00 00        THE HELP MENU..

0000018f <LCDVoltManTop>:
     18f:	41 20 46 4f 52 20 56 4f 4c 54 4d 45 54 45 52 00     A FOR VOLTMETER.
	...

000001a0 <LCDVoltManBot>:
     1a0:	56 4f 4c 54 4d 45 54 45 52 00 00                    VOLTMETER..

000001ab <LCDOhmManTop>:
     1ab:	42 20 46 4f 52 20 4f 48 4d 4d 45 54 45 52 00 00     B FOR OHMMETER..

000001bb <LCDOhmManBot>:
     1bb:	4f 48 4d 4d 45 54 45 52 00 00                       OHMMETER..

000001c5 <LCDFreqManTop>:
     1c5:	43 20 46 4f 52 20 46 52 45 51 55 45 4e 43 59 00     C FOR FREQUENCY.
	...

000001d6 <LCDFreqManBot>:
     1d6:	46 52 45 51 55 45 4e 43 49 45 53 00 00              FREQUENCIES..

000001e3 <LCDAutorangeMan1Top>:
     1e3:	44 20 54 4f 20 54 4f 47 47 4c 45 00 00              D TO TOGGLE..

000001f0 <LCDAutorangeMan1Bot>:
     1f0:	41 55 54 4f 52 41 4e 47 45 00 00                    AUTORANGE..

000001fb <LCDAutorangeMan2Top>:
     1fb:	31 20 54 4f 20 53 57 49 54 43 48 00 00              1 TO SWITCH..

00000208 <LCDAutorangeMan2Bot>:
     208:	41 55 54 4f 52 41 4e 47 45 20 56 41 4c 55 45 00     AUTORANGE VALUE.
	...

00000219 <LcdCustomChar>:
     219:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     229:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     239:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     249:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     259:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     269:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     279:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     289:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     299:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     2a9:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     2b9:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     2c9:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     2d9:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     2e9:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     2f9:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     309:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     319:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     329:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     339:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     349:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d0 e1       	ldi	r29, 0x10	; 16
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	e4 e1       	ldi	r30, 0x14	; 20
     368:	f7 e2       	ldi	r31, 0x27	; 39
     36a:	02 c0       	rjmp	.+4      	; 0x370 <.do_copy_data_start>

0000036c <.do_copy_data_loop>:
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0

00000370 <.do_copy_data_start>:
     370:	a2 34       	cpi	r26, 0x42	; 66
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <.do_copy_data_loop>

00000376 <__do_clear_bss>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a2 e4       	ldi	r26, 0x42	; 66
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a6 3c       	cpi	r26, 0xC6	; 198
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 46 06 	call	0xc8c	; 0xc8c <main>
     38a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <__vector_12>:
		//start another conversion
		ADCSRA |= (1<<ADSC);
	}
}

ISR (TIMER1_CAPT_vect){
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
		//Set up the TIMERA prescalar
		TCCR1B &= ~0x07;
		TCCR1B |= TIMERAprescalars[rangeIdx];
	}
	*/
}
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_15>:

ISR (TIMER1_OVF_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
	
	//Set up the TIMERA prescalar
	TCCR1B &= ~0x07;
	TCCR1B |= TIMERAprescalars[rangeIdx];
	*/
}
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <ScanKeypad>:
//HELPER FUNCTIONS*************************************************************
uint8_t ScanKeypad(void){
	uint8_t key;
	uint8_t butnum;
//get lower nibble
	DDRD = 0x0f;
     3ba:	2f e0       	ldi	r18, 0x0F	; 15
     3bc:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     3be:	80 ef       	ldi	r24, 0xF0	; 240
     3c0:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c2:	9a e1       	ldi	r25, 0x1A	; 26
     3c4:	39 2f       	mov	r19, r25
     3c6:	3a 95       	dec	r19
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <ScanKeypad+0xc>
	_delay_us(5);
	key = PIND;
     3ca:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     3cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     3ce:	2b b9       	out	0x0b, r18	; 11
     3d0:	9a 95       	dec	r25
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <ScanKeypad+0x16>
	_delay_us(5);
	key = key | PIND;
     3d4:	29 b1       	in	r18, 0x09	; 9
     3d6:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff)
     3d8:	2f 3f       	cpi	r18, 0xFF	; 255
     3da:	61 f0       	breq	.+24     	; 0x3f4 <ScanKeypad+0x3a>
     3dc:	e1 e2       	ldi	r30, 0x21	; 33
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
		begin   
		if (keytbl[butnum]==key)  break;   
     3e2:	80 81       	ld	r24, Z
     3e4:	9f 5f       	subi	r25, 0xFF	; 255
     3e6:	82 17       	cp	r24, r18
     3e8:	11 f4       	brne	.+4      	; 0x3ee <ScanKeypad+0x34>
		end

		if (butnum==MAX_KEYS) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     3ea:	89 2f       	mov	r24, r25
     3ec:	08 95       	ret
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff)
	begin
		for (butnum=0; butnum<MAX_KEYS; butnum++)
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	90 31       	cpi	r25, 0x10	; 16
     3f2:	b9 f7       	brne	.-18     	; 0x3e2 <ScanKeypad+0x28>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	end
	else butnum=0;
	
	return butnum;
}
     3f6:	08 95       	ret

000003f8 <Debounce>:

//Debounce the button using a debounce state machine
void Debounce(void){
	uint8_t key = ScanKeypad(); //Scan the keypad
     3f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ScanKeypad>
     3fc:	28 2f       	mov	r18, r24
	switch(keyState){
     3fe:	90 91 9a 02 	lds	r25, 0x029A
     402:	91 30       	cpi	r25, 0x01	; 1
     404:	79 f0       	breq	.+30     	; 0x424 <Debounce+0x2c>
     406:	91 30       	cpi	r25, 0x01	; 1
     408:	20 f0       	brcs	.+8      	; 0x412 <Debounce+0x1a>
     40a:	92 30       	cpi	r25, 0x02	; 2
     40c:	09 f0       	breq	.+2      	; 0x410 <Debounce+0x18>
     40e:	59 c0       	rjmp	.+178    	; 0x4c2 <Debounce+0xca>
     410:	2f c0       	rjmp	.+94     	; 0x470 <Debounce+0x78>
	
	//in the RELEASED state: stay in this state if a key is not pressed
	//go to UNKNOWN if any key is pressed and reset the debounce countdown.
	case RELEASED:
		if (key){
     412:	88 23       	and	r24, r24
     414:	09 f4       	brne	.+2      	; 0x418 <Debounce+0x20>
     416:	55 c0       	rjmp	.+170    	; 0x4c2 <Debounce+0xca>
			keyState = UNKNOWN;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED;
     41e:	10 92 a6 02 	sts	0x02A6, r1
     422:	0c c0       	rjmp	.+24     	; 0x43c <Debounce+0x44>

	//in the UNKNOWN state: go to released if the button is not down Update
	//pressedAndReleased if the button was previously pressed.
	//go to PUSHED if the button is down
	case UNKNOWN:
		if (key){
     424:	88 23       	and	r24, r24
     426:	b1 f0       	breq	.+44     	; 0x454 <Debounce+0x5c>
			if (key == checkKey){
     428:	80 91 b9 02 	lds	r24, 0x02B9
     42c:	28 17       	cp	r18, r24
     42e:	31 f4       	brne	.+12     	; 0x43c <Debounce+0x44>
				keyState = PUSHED;
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	80 93 9a 02 	sts	0x029A, r24
				prevKeyState = UNKNOWN;
     436:	90 93 a6 02 	sts	0x02A6, r25
     43a:	08 95       	ret
			}
			else {
				debounceTime = elapsedTime + DEBOUNCE_TIME;
     43c:	80 91 95 02 	lds	r24, 0x0295
     440:	90 91 96 02 	lds	r25, 0x0296
     444:	4e 96       	adiw	r24, 0x1e	; 30
     446:	90 93 b7 02 	sts	0x02B7, r25
     44a:	80 93 b6 02 	sts	0x02B6, r24
				checkKey = key;
     44e:	20 93 b9 02 	sts	0x02B9, r18
     452:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     454:	10 92 9a 02 	sts	0x029A, r1
			if (prevKeyState == PUSHED) {
     458:	80 91 a6 02 	lds	r24, 0x02A6
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	21 f4       	brne	.+8      	; 0x468 <Debounce+0x70>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     460:	80 91 b9 02 	lds	r24, 0x02B9
     464:	80 93 b5 02 	sts	0x02B5, r24
			}
			prevKeyState = UNKNOWN;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 a6 02 	sts	0x02A6, r24
     46e:	08 95       	ret
		break;

	//in the PUSHED state go to UnKnown if the button is not down.
	//stay in PUSHED if the button is down
	case PUSHED:
		if (!key){
     470:	88 23       	and	r24, r24
     472:	79 f4       	brne	.+30     	; 0x492 <Debounce+0x9a>
			keyState = UNKNOWN;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = PUSHED;
     47a:	90 93 a6 02 	sts	0x02A6, r25
			debounceTime = elapsedTime + DEBOUNCE_TIME;
     47e:	80 91 95 02 	lds	r24, 0x0295
     482:	90 91 96 02 	lds	r25, 0x0296
     486:	4e 96       	adiw	r24, 0x1e	; 30
     488:	90 93 b7 02 	sts	0x02B7, r25
     48c:	80 93 b6 02 	sts	0x02B6, r24
     490:	08 95       	ret
		}
		else if (key != checkKey){
     492:	80 91 b9 02 	lds	r24, 0x02B9
     496:	28 17       	cp	r18, r24
     498:	a1 f0       	breq	.+40     	; 0x4c2 <Debounce+0xca>
			keyState = UNKNOWN;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 9a 02 	sts	0x029A, r24
			prevKeyState = RELEASED; //...???
     4a0:	10 92 a6 02 	sts	0x02A6, r1
			debounceTime = elapsedTime + DEBOUNCE_TIME;
     4a4:	80 91 95 02 	lds	r24, 0x0295
     4a8:	90 91 96 02 	lds	r25, 0x0296
     4ac:	4e 96       	adiw	r24, 0x1e	; 30
     4ae:	90 93 b7 02 	sts	0x02B7, r25
     4b2:	80 93 b6 02 	sts	0x02B6, r24
			curKey = checkKey;
     4b6:	80 91 b9 02 	lds	r24, 0x02B9
     4ba:	80 93 b5 02 	sts	0x02B5, r24
			checkKey = key;
     4be:	20 93 b9 02 	sts	0x02B9, r18
     4c2:	08 95       	ret

000004c4 <getCurKey>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     4c4:	90 91 b5 02 	lds	r25, 0x02B5
	if (curKey){
     4c8:	80 91 b5 02 	lds	r24, 0x02B5
     4cc:	88 23       	and	r24, r24
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <getCurKey+0x10>
		curKey = 0;
     4d0:	10 92 b5 02 	sts	0x02B5, r1
	}
	return tmpKey;
}
     4d4:	89 2f       	mov	r24, r25
     4d6:	08 95       	ret

000004d8 <UpdateManState>:
	}
}

//Update the manual based on button presses
void UpdateManState(uint8_t key){
	switch (manPage){
     4d8:	90 91 bd 02 	lds	r25, 0x02BD
     4dc:	93 30       	cpi	r25, 0x03	; 3
     4de:	c1 f1       	breq	.+112    	; 0x550 <UpdateManState+0x78>
     4e0:	94 30       	cpi	r25, 0x04	; 4
     4e2:	28 f4       	brcc	.+10     	; 0x4ee <UpdateManState+0x16>
     4e4:	91 30       	cpi	r25, 0x01	; 1
     4e6:	99 f0       	breq	.+38     	; 0x50e <UpdateManState+0x36>
     4e8:	92 30       	cpi	r25, 0x02	; 2
     4ea:	30 f5       	brcc	.+76     	; 0x538 <UpdateManState+0x60>
     4ec:	0c c0       	rjmp	.+24     	; 0x506 <UpdateManState+0x2e>
     4ee:	95 30       	cpi	r25, 0x05	; 5
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <UpdateManState+0x1c>
     4f2:	40 c0       	rjmp	.+128    	; 0x574 <UpdateManState+0x9c>
     4f4:	95 30       	cpi	r25, 0x05	; 5
     4f6:	a8 f1       	brcs	.+106    	; 0x562 <UpdateManState+0x8a>
     4f8:	96 30       	cpi	r25, 0x06	; 6
     4fa:	09 f4       	brne	.+2      	; 0x4fe <UpdateManState+0x26>
     4fc:	44 c0       	rjmp	.+136    	; 0x586 <UpdateManState+0xae>
     4fe:	97 30       	cpi	r25, 0x07	; 7
     500:	09 f0       	breq	.+2      	; 0x504 <UpdateManState+0x2c>
     502:	68 c0       	rjmp	.+208    	; 0x5d4 <UpdateManState+0xfc>
     504:	4a c0       	rjmp	.+148    	; 0x59a <UpdateManState+0xc2>
		case WELCOME:
			if (key){
     506:	88 23       	and	r24, r24
     508:	09 f4       	brne	.+2      	; 0x50c <UpdateManState+0x34>
     50a:	64 c0       	rjmp	.+200    	; 0x5d4 <UpdateManState+0xfc>
     50c:	19 c0       	rjmp	.+50     	; 0x540 <UpdateManState+0x68>
				manPage = NAVIGATION_1;
				justSwitched = 1;
			}
			break;
		case NAVIGATION_1:
			if (key == 0x10){
     50e:	80 31       	cpi	r24, 0x10	; 16
     510:	29 f4       	brne	.+10     	; 0x51c <UpdateManState+0x44>
				mode = returnMode;
     512:	80 91 ba 02 	lds	r24, 0x02BA
     516:	80 93 a4 02 	sts	0x02A4, r24
     51a:	02 c0       	rjmp	.+4      	; 0x520 <UpdateManState+0x48>
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     51c:	8e 30       	cpi	r24, 0x0E	; 14
     51e:	19 f4       	brne	.+6      	; 0x526 <UpdateManState+0x4e>
				manPage = WELCOME;
     520:	10 92 bd 02 	sts	0x02BD, r1
     524:	06 c0       	rjmp	.+12     	; 0x532 <UpdateManState+0x5a>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     526:	8f 30       	cpi	r24, 0x0F	; 15
     528:	09 f0       	breq	.+2      	; 0x52c <UpdateManState+0x54>
     52a:	54 c0       	rjmp	.+168    	; 0x5d4 <UpdateManState+0xfc>
				manPage = NAVIGATION_2;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     532:	90 93 be 02 	sts	0x02BE, r25
     536:	08 95       	ret
			}
			break;
		case NAVIGATION_2:
			if (key == 0x10){
     538:	80 31       	cpi	r24, 0x10	; 16
     53a:	89 f1       	breq	.+98     	; 0x59e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     53c:	8e 30       	cpi	r24, 0x0E	; 14
     53e:	21 f4       	brne	.+8      	; 0x548 <UpdateManState+0x70>
				manPage = NAVIGATION_1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 bd 02 	sts	0x02BD, r24
     546:	38 c0       	rjmp	.+112    	; 0x5b8 <UpdateManState+0xe0>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     548:	8f 30       	cpi	r24, 0x0F	; 15
     54a:	09 f0       	breq	.+2      	; 0x54e <UpdateManState+0x76>
     54c:	43 c0       	rjmp	.+134    	; 0x5d4 <UpdateManState+0xfc>
     54e:	0d c0       	rjmp	.+26     	; 0x56a <UpdateManState+0x92>
				manPage = VOLT_MAN;
				justSwitched = 1;
			}
			break;
	 	case VOLT_MAN:
			if (key == 0x10){
     550:	80 31       	cpi	r24, 0x10	; 16
     552:	29 f1       	breq	.+74     	; 0x59e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     554:	8e 30       	cpi	r24, 0x0E	; 14
     556:	11 f4       	brne	.+4      	; 0x55c <UpdateManState+0x84>
				manPage = NAVIGATION_2;
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	2b c0       	rjmp	.+86     	; 0x5b2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     55c:	8f 30       	cpi	r24, 0x0F	; 15
     55e:	d1 f5       	brne	.+116    	; 0x5d4 <UpdateManState+0xfc>
     560:	0d c0       	rjmp	.+26     	; 0x57c <UpdateManState+0xa4>
				manPage = OHM_MAN;
				justSwitched = 1;
			}
			break;
		case OHM_MAN:
			if (key == 0x10){
     562:	80 31       	cpi	r24, 0x10	; 16
     564:	e1 f0       	breq	.+56     	; 0x59e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     566:	8e 30       	cpi	r24, 0x0E	; 14
     568:	11 f4       	brne	.+4      	; 0x56e <UpdateManState+0x96>
				manPage = VOLT_MAN;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	22 c0       	rjmp	.+68     	; 0x5b2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     56e:	8f 30       	cpi	r24, 0x0F	; 15
     570:	89 f5       	brne	.+98     	; 0x5d4 <UpdateManState+0xfc>
     572:	0d c0       	rjmp	.+26     	; 0x58e <UpdateManState+0xb6>
				manPage = FREQ_MAN;
				justSwitched = 1;
			}
			break;
		case FREQ_MAN:
			if (key == 0x10){
     574:	80 31       	cpi	r24, 0x10	; 16
     576:	99 f0       	breq	.+38     	; 0x59e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     578:	8e 30       	cpi	r24, 0x0E	; 14
     57a:	11 f4       	brne	.+4      	; 0x580 <UpdateManState+0xa8>
				manPage = OHM_MAN;
     57c:	84 e0       	ldi	r24, 0x04	; 4
     57e:	19 c0       	rjmp	.+50     	; 0x5b2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     580:	8f 30       	cpi	r24, 0x0F	; 15
     582:	41 f5       	brne	.+80     	; 0x5d4 <UpdateManState+0xfc>
     584:	15 c0       	rjmp	.+42     	; 0x5b0 <UpdateManState+0xd8>
				manPage = AUTORANGE_MAN_1;
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_1:
			if (key == 0x10){
     586:	80 31       	cpi	r24, 0x10	; 16
     588:	51 f0       	breq	.+20     	; 0x59e <UpdateManState+0xc6>
				mode = returnMode;
				manPage = WELCOME;
				justSwitched = 1;
			}
			else if (key == 0x0E){
     58a:	8e 30       	cpi	r24, 0x0E	; 14
     58c:	11 f4       	brne	.+4      	; 0x592 <UpdateManState+0xba>
				manPage = FREQ_MAN;
     58e:	85 e0       	ldi	r24, 0x05	; 5
     590:	10 c0       	rjmp	.+32     	; 0x5b2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			else if (key == 0x0F){
     592:	8f 30       	cpi	r24, 0x0F	; 15
     594:	f9 f4       	brne	.+62     	; 0x5d4 <UpdateManState+0xfc>
				manPage = AUTORANGE_MAN_2;
     596:	87 e0       	ldi	r24, 0x07	; 7
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <UpdateManState+0xda>
				justSwitched = 1;
			}
			break;
		case AUTORANGE_MAN_2:
			if (key == 0x10){
     59a:	80 31       	cpi	r24, 0x10	; 16
     59c:	39 f4       	brne	.+14     	; 0x5ac <UpdateManState+0xd4>
				mode = returnMode;
     59e:	80 91 ba 02 	lds	r24, 0x02BA
     5a2:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     5a6:	10 92 bd 02 	sts	0x02BD, r1
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <UpdateManState+0xde>
				justSwitched = 1;
			}
			else if (key == 0x0E){
     5ac:	8e 30       	cpi	r24, 0x0E	; 14
     5ae:	39 f4       	brne	.+14     	; 0x5be <UpdateManState+0xe6>
				manPage = AUTORANGE_MAN_1;
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	80 93 bd 02 	sts	0x02BD, r24
				justSwitched = 1;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 be 02 	sts	0x02BE, r24
     5bc:	08 95       	ret
			}
			else if (key == 0x0F){
     5be:	8f 30       	cpi	r24, 0x0F	; 15
     5c0:	49 f4       	brne	.+18     	; 0x5d4 <UpdateManState+0xfc>
				mode = returnMode;
     5c2:	80 91 ba 02 	lds	r24, 0x02BA
     5c6:	80 93 a4 02 	sts	0x02A4, r24
				manPage = WELCOME;
     5ca:	10 92 bd 02 	sts	0x02BD, r1
				justSwitched = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 be 02 	sts	0x02BE, r24
     5d4:	08 95       	ret

000005d6 <UpdateDMMState>:
	PORTB = 0xFF;
	sei();
}

uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     5d6:	20 91 b5 02 	lds	r18, 0x02B5
	if (curKey){
     5da:	80 91 b5 02 	lds	r24, 0x02B5
     5de:	88 23       	and	r24, r24
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <UpdateDMMState+0x10>
		curKey = 0;
     5e2:	10 92 b5 02 	sts	0x02B5, r1
}

//Update the DMM based on button presses
void UpdateDMMState(void){
	uint8_t key = getCurKey();
	if (key and !justSwitched){
     5e6:	22 23       	and	r18, r18
     5e8:	09 f4       	brne	.+2      	; 0x5ec <UpdateDMMState+0x16>
     5ea:	b6 c0       	rjmp	.+364    	; 0x758 <UpdateDMMState+0x182>
     5ec:	80 91 be 02 	lds	r24, 0x02BE
     5f0:	88 23       	and	r24, r24
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <UpdateDMMState+0x20>
     5f4:	b1 c0       	rjmp	.+354    	; 0x758 <UpdateDMMState+0x182>
		switch (mode){
     5f6:	90 91 a4 02 	lds	r25, 0x02A4
     5fa:	92 30       	cpi	r25, 0x02	; 2
     5fc:	f1 f0       	breq	.+60     	; 0x63a <UpdateDMMState+0x64>
     5fe:	93 30       	cpi	r25, 0x03	; 3
     600:	30 f4       	brcc	.+12     	; 0x60e <UpdateDMMState+0x38>
     602:	99 23       	and	r25, r25
     604:	51 f0       	breq	.+20     	; 0x61a <UpdateDMMState+0x44>
     606:	91 30       	cpi	r25, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <UpdateDMMState+0x36>
     60a:	a6 c0       	rjmp	.+332    	; 0x758 <UpdateDMMState+0x182>
     60c:	12 c0       	rjmp	.+36     	; 0x632 <UpdateDMMState+0x5c>
     60e:	93 30       	cpi	r25, 0x03	; 3
     610:	51 f1       	breq	.+84     	; 0x666 <UpdateDMMState+0x90>
     612:	94 30       	cpi	r25, 0x04	; 4
     614:	09 f0       	breq	.+2      	; 0x618 <UpdateDMMState+0x42>
     616:	a0 c0       	rjmp	.+320    	; 0x758 <UpdateDMMState+0x182>
     618:	50 c0       	rjmp	.+160    	; 0x6ba <UpdateDMMState+0xe4>
			case INIT:
				if (key == 0x0F){
     61a:	2f 30       	cpi	r18, 0x0F	; 15
     61c:	31 f4       	brne	.+12     	; 0x62a <UpdateDMMState+0x54>
					PORTB = ~0x20;
     61e:	8f ed       	ldi	r24, 0xDF	; 223
     620:	85 b9       	out	0x05, r24	; 5
					returnMode = VOLTMETER;
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	80 93 ba 02 	sts	0x02BA, r24
     628:	22 c0       	rjmp	.+68     	; 0x66e <UpdateDMMState+0x98>
					mode = MAN;
					justSwitched = 1;
				}
				else {
					mode = VOLTMETER;
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	80 93 a4 02 	sts	0x02A4, r24
     630:	7d c0       	rjmp	.+250    	; 0x72c <UpdateDMMState+0x156>
					justSwitched = 1;
				}
				break; 

			case MAN:
				UpdateManState(key);
     632:	82 2f       	mov	r24, r18
     634:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UpdateManState>
     638:	08 95       	ret
				break;
			
			case VOLTMETER:
				if (key == 0x0F){
     63a:	2f 30       	cpi	r18, 0x0F	; 15
     63c:	31 f4       	brne	.+12     	; 0x64a <UpdateDMMState+0x74>
					mode = MAN;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 a4 02 	sts	0x02A4, r24
					returnMode = VOLTMETER;
     644:	90 93 ba 02 	sts	0x02BA, r25
     648:	72 c0       	rjmp	.+228    	; 0x72e <UpdateDMMState+0x158>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     64a:	2d 30       	cpi	r18, 0x0D	; 13
     64c:	d1 f1       	breq	.+116    	; 0x6c2 <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     64e:	80 91 97 02 	lds	r24, 0x0297
     652:	88 23       	and	r24, r24
     654:	11 f4       	brne	.+4      	; 0x65a <UpdateDMMState+0x84>
     656:	21 30       	cpi	r18, 0x01	; 1
     658:	b1 f0       	breq	.+44     	; 0x686 <UpdateDMMState+0xb0>
					rangeIdx++;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0B){
     65a:	2b 30       	cpi	r18, 0x0B	; 11
     65c:	31 f5       	brne	.+76     	; 0x6aa <UpdateDMMState+0xd4>
					mode = OHMMETER;
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	80 93 a4 02 	sts	0x02A4, r24
     664:	59 c0       	rjmp	.+178    	; 0x718 <UpdateDMMState+0x142>
					justSwitched = 1;
				}
				break;

			case OHMMETER:
				if (key == 0x0F){
     666:	2f 30       	cpi	r18, 0x0F	; 15
     668:	31 f4       	brne	.+12     	; 0x676 <UpdateDMMState+0xa0>
					returnMode = OHMMETER;
     66a:	90 93 ba 02 	sts	0x02BA, r25
					mode = MAN;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 a4 02 	sts	0x02A4, r24
     674:	5c c0       	rjmp	.+184    	; 0x72e <UpdateDMMState+0x158>
					justSwitched = 1;
				}
				else if (key == 0x0D){
     676:	2d 30       	cpi	r18, 0x0D	; 13
     678:	21 f1       	breq	.+72     	; 0x6c2 <UpdateDMMState+0xec>
					autoRange ^= 1;
					justSwitched = 1;
				}
				else if (!autoRange && key == 0x01){
     67a:	80 91 97 02 	lds	r24, 0x0297
     67e:	88 23       	and	r24, r24
     680:	91 f4       	brne	.+36     	; 0x6a6 <UpdateDMMState+0xd0>
     682:	21 30       	cpi	r18, 0x01	; 1
     684:	81 f4       	brne	.+32     	; 0x6a6 <UpdateDMMState+0xd0>
					rangeIdx++;
     686:	80 91 bb 02 	lds	r24, 0x02BB
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     690:	80 91 bb 02 	lds	r24, 0x02BB
     694:	60 91 94 02 	lds	r22, 0x0294
     698:	0e 94 93 10 	call	0x2126	; 0x2126 <__udivmodqi4>
     69c:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     6a0:	20 93 be 02 	sts	0x02BE, r18
     6a4:	08 95       	ret
				}
				else if (key == 0x0A){
     6a6:	2a 30       	cpi	r18, 0x0A	; 10
     6a8:	99 f1       	breq	.+102    	; 0x710 <UpdateDMMState+0x13a>
					mode = VOLTMETER;
					rangeIdxMod = 3;
					rangeIdx = rangeIdx % rangeIdxMod;
					justSwitched = 1;
				}
				else if (key == 0x0C){
     6aa:	2c 30       	cpi	r18, 0x0C	; 12
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <UpdateDMMState+0xda>
     6ae:	54 c0       	rjmp	.+168    	; 0x758 <UpdateDMMState+0x182>
					mode = FREQMETER;
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 2;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	2f c0       	rjmp	.+94     	; 0x718 <UpdateDMMState+0x142>
					justSwitched = 1;
				}
				break;

			case FREQMETER:
				if (key == 0x0F){
     6ba:	2f 30       	cpi	r18, 0x0F	; 15
     6bc:	b1 f2       	breq	.-84     	; 0x66a <UpdateDMMState+0x94>
					returnMode = FREQMETER;
					mode = MAN;
					justSwitched = 1;
				}
				else if (key == 0x0D){
     6be:	2d 30       	cpi	r18, 0x0D	; 13
     6c0:	49 f4       	brne	.+18     	; 0x6d4 <UpdateDMMState+0xfe>
					autoRange ^= 1;
     6c2:	80 91 97 02 	lds	r24, 0x0297
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	89 27       	eor	r24, r25
     6ca:	80 93 97 02 	sts	0x0297, r24
					justSwitched = 1;
     6ce:	90 93 be 02 	sts	0x02BE, r25
     6d2:	08 95       	ret
				}
				else if (!autoRange && key == 0x01){
     6d4:	80 91 97 02 	lds	r24, 0x0297
     6d8:	88 23       	and	r24, r24
     6da:	c1 f4       	brne	.+48     	; 0x70c <UpdateDMMState+0x136>
     6dc:	21 30       	cpi	r18, 0x01	; 1
     6de:	b1 f4       	brne	.+44     	; 0x70c <UpdateDMMState+0x136>
					rangeIdx++;
     6e0:	80 91 bb 02 	lds	r24, 0x02BB
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
     6e6:	80 93 bb 02 	sts	0x02BB, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     6ea:	80 91 bb 02 	lds	r24, 0x02BB
     6ee:	60 91 94 02 	lds	r22, 0x0294
     6f2:	0e 94 93 10 	call	0x2126	; 0x2126 <__udivmodqi4>
     6f6:	90 93 bb 02 	sts	0x02BB, r25
					frequencyRef = frequencyRanges[rangeIdx];
     6fa:	e0 91 bb 02 	lds	r30, 0x02BB
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	e1 5f       	subi	r30, 0xF1	; 241
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	80 81       	ld	r24, Z
     706:	80 93 bf 02 	sts	0x02BF, r24
     70a:	10 c0       	rjmp	.+32     	; 0x72c <UpdateDMMState+0x156>
					justSwitched = 1;
				}
				else if (key == 0x0A){
     70c:	2a 30       	cpi	r18, 0x0A	; 10
     70e:	91 f4       	brne	.+36     	; 0x734 <UpdateDMMState+0x15e>
					mode = VOLTMETER;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     71c:	80 91 bb 02 	lds	r24, 0x02BB
     720:	60 91 94 02 	lds	r22, 0x0294
     724:	0e 94 93 10 	call	0x2126	; 0x2126 <__udivmodqi4>
     728:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 be 02 	sts	0x02BE, r24
     732:	08 95       	ret
				}
				else if (key == 0x0B){
     734:	2b 30       	cpi	r18, 0x0B	; 11
     736:	81 f4       	brne	.+32     	; 0x758 <UpdateDMMState+0x182>
					mode = OHMMETER;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	80 93 a4 02 	sts	0x02A4, r24
					rangeIdxMod = 3;
     73e:	80 93 94 02 	sts	0x0294, r24
					rangeIdx = rangeIdx % rangeIdxMod;
     742:	80 91 bb 02 	lds	r24, 0x02BB
     746:	60 91 94 02 	lds	r22, 0x0294
     74a:	0e 94 93 10 	call	0x2126	; 0x2126 <__udivmodqi4>
     74e:	90 93 bb 02 	sts	0x02BB, r25
					justSwitched = 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 be 02 	sts	0x02BE, r24
     758:	08 95       	ret

0000075a <__vector_16>:

//TIMER INTERRUPTS*************************************************************

//timer 0 compare ISR
//Executes every 1ms
ISR (TIMER0_COMPA_vect){
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	//check for overflow. If the elapsedTime overflows, reset debounceTime
	//as well
	
	uint8_t debounceFlag1 = 1;
	uint8_t debounceFlag2 = 0;
	if (elapsedTime >= debounceTime && debounceTime < DEBOUNCE_TIME){
     77c:	20 91 95 02 	lds	r18, 0x0295
     780:	30 91 96 02 	lds	r19, 0x0296
     784:	80 91 b6 02 	lds	r24, 0x02B6
     788:	90 91 b7 02 	lds	r25, 0x02B7
     78c:	28 17       	cp	r18, r24
     78e:	39 07       	cpc	r19, r25
     790:	38 f0       	brcs	.+14     	; 0x7a0 <__vector_16+0x46>
     792:	80 91 b6 02 	lds	r24, 0x02B6
     796:	90 91 b7 02 	lds	r25, 0x02B7
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	4e 97       	sbiw	r24, 0x1e	; 30
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <__vector_16+0x48>
     7a0:	71 e0       	ldi	r23, 0x01	; 1
		debounceFlag1 = 0;
	}
	
	//check if we are waiting to debounce. If we are, then take precautions
	//so that there are no overflow errors
	if (0xff - debounceTime < DEBOUNCE_TIME){
     7a2:	20 91 b6 02 	lds	r18, 0x02B6
     7a6:	30 91 b7 02 	lds	r19, 0x02B7
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	82 1b       	sub	r24, r18
     7b0:	93 0b       	sbc	r25, r19
     7b2:	4e 97       	sbiw	r24, 0x1e	; 30
     7b4:	10 f0       	brcs	.+4      	; 0x7ba <__vector_16+0x60>
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__vector_16+0x84>
		uint8_t diff = 0xff - debounceTime;
     7ba:	80 91 b6 02 	lds	r24, 0x02B6
     7be:	90 91 b7 02 	lds	r25, 0x02B7
		if (elapsedTime >= DEBOUNCE_TIME - diff){
     7c2:	40 91 95 02 	lds	r20, 0x0295
     7c6:	50 91 96 02 	lds	r21, 0x0296
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	80 95       	com	r24
     7ce:	2e e1       	ldi	r18, 0x1E	; 30
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	28 1b       	sub	r18, r24
     7d4:	31 09       	sbc	r19, r1
     7d6:	42 17       	cp	r20, r18
     7d8:	53 07       	cpc	r21, r19
     7da:	08 f0       	brcs	.+2      	; 0x7de <__vector_16+0x84>
     7dc:	61 e0       	ldi	r22, 0x01	; 1
			debounceFlag2 = 1;
		}
	}

	elapsedTime++;
     7de:	80 91 95 02 	lds	r24, 0x0295
     7e2:	90 91 96 02 	lds	r25, 0x0296
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	90 93 96 02 	sts	0x0296, r25
     7ec:	80 93 95 02 	sts	0x0295, r24
	if ((elapsedTime >= debounceTime && debounceFlag1) || (elapsedTime < debounceTime && debounceFlag2)){
     7f0:	20 91 95 02 	lds	r18, 0x0295
     7f4:	30 91 96 02 	lds	r19, 0x0296
     7f8:	80 91 b6 02 	lds	r24, 0x02B6
     7fc:	90 91 b7 02 	lds	r25, 0x02B7
     800:	28 17       	cp	r18, r24
     802:	39 07       	cpc	r19, r25
     804:	10 f0       	brcs	.+4      	; 0x80a <__vector_16+0xb0>
     806:	77 23       	and	r23, r23
     808:	69 f4       	brne	.+26     	; 0x824 <__vector_16+0xca>
     80a:	20 91 95 02 	lds	r18, 0x0295
     80e:	30 91 96 02 	lds	r19, 0x0296
     812:	80 91 b6 02 	lds	r24, 0x02B6
     816:	90 91 b7 02 	lds	r25, 0x02B7
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	30 f4       	brcc	.+12     	; 0x82c <__vector_16+0xd2>
     820:	66 23       	and	r22, r22
     822:	21 f0       	breq	.+8      	; 0x82c <__vector_16+0xd2>
		Debounce();
     824:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Debounce>
		UpdateDMMState();
     828:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <UpdateDMMState>
	}

	if((elapsedTime % 200) == 0 && mode != INIT && mode != MAN) {
     82c:	80 91 95 02 	lds	r24, 0x0295
     830:	90 91 96 02 	lds	r25, 0x0296
     834:	68 ec       	ldi	r22, 0xC8	; 200
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	0e 94 9f 10 	call	0x213e	; 0x213e <__udivmodhi4>
     83c:	89 2b       	or	r24, r25
     83e:	59 f4       	brne	.+22     	; 0x856 <__vector_16+0xfc>
     840:	80 91 a4 02 	lds	r24, 0x02A4
     844:	88 23       	and	r24, r24
     846:	39 f0       	breq	.+14     	; 0x856 <__vector_16+0xfc>
     848:	80 91 a4 02 	lds	r24, 0x02A4
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	19 f0       	breq	.+6      	; 0x856 <__vector_16+0xfc>
		triggerPoll = 1;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 9f 02 	sts	0x029F, r24
	}
	if(elapsedTime % 200 == 190) {
     856:	80 91 95 02 	lds	r24, 0x0295
     85a:	90 91 96 02 	lds	r25, 0x0296
     85e:	68 ec       	ldi	r22, 0xC8	; 200
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 9f 10 	call	0x213e	; 0x213e <__udivmodhi4>
     866:	8e 3b       	cpi	r24, 0xBE	; 190
     868:	91 05       	cpc	r25, r1
     86a:	29 f4       	brne	.+10     	; 0x876 <__vector_16+0x11c>
		//start another conversion
		ADCSRA |= (1<<ADSC);
     86c:	80 91 7a 00 	lds	r24, 0x007A
     870:	80 64       	ori	r24, 0x40	; 64
     872:	80 93 7a 00 	sts	0x007A, r24
	}
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <setVref>:
	CopyStringtoLCD(LCDBlank, 0, 0);
	LCDGotoXY(0, 0);
	LCDstring(LCDBuffer, strlen(LCDBuffer));
}

void setVref(uint8_t idx) {
     898:	e8 2f       	mov	r30, r24
	switch(idx) {
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	39 f0       	breq	.+14     	; 0x8ac <setVref+0x14>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	18 f0       	brcs	.+6      	; 0x8a8 <setVref+0x10>
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	41 f4       	brne	.+16     	; 0x8b6 <setVref+0x1e>
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     8a8:	80 e6       	ldi	r24, 0x60	; 96
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     8ac:	80 ee       	ldi	r24, 0xE0	; 224
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     8b0:	80 ea       	ldi	r24, 0xA0	; 160
     8b2:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e0 50       	subi	r30, 0x00	; 0
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	a2 81       	ldd	r26, Z+2	; 0x02
     8ca:	b3 81       	ldd	r27, Z+3	; 0x03
     8cc:	80 93 ad 02 	sts	0x02AD, r24
     8d0:	90 93 ae 02 	sts	0x02AE, r25
     8d4:	a0 93 af 02 	sts	0x02AF, r26
     8d8:	b0 93 b0 02 	sts	0x02B0, r27
}
     8dc:	08 95       	ret

000008de <setOref>:

void setOref(uint8_t idx) {
     8de:	e8 2f       	mov	r30, r24
	// Don't use Oref
	if(idx < 0 || idx > 2) {
     8e0:	83 30       	cpi	r24, 0x03	; 3
     8e2:	10 f0       	brcs	.+4      	; 0x8e8 <setOref+0xa>
		DDRA = 0x00;
     8e4:	11 b8       	out	0x01, r1	; 1
     8e6:	08 95       	ret
		return;
	}
	switch(idx) {
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	39 f0       	breq	.+14     	; 0x8fa <setOref+0x1c>
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	18 f0       	brcs	.+6      	; 0x8f6 <setOref+0x18>
     8f0:	82 30       	cpi	r24, 0x02	; 2
     8f2:	39 f4       	brne	.+14     	; 0x902 <setOref+0x24>
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <setOref+0x20>
		case 0:
			DDRA = (1 << 7); //100k resistor output
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <setOref+0x22>
			break;
		case 1:
			DDRA = (1 << 6); //10k resistor output
     8fa:	80 e4       	ldi	r24, 0x40	; 64
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <setOref+0x22>
			break;
		case 2:
			DDRA = (1 << 5); //1k resistor output
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	81 b9       	out	0x01, r24	; 1
			break;
	}
	ohmRef = resistorRanges[idx];
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e4 5f       	subi	r30, 0xF4	; 244
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	80 81       	ld	r24, Z
     90a:	80 93 98 02 	sts	0x0298, r24
	PORTA = DDRA;
     90e:	81 b1       	in	r24, 0x01	; 1
     910:	82 b9       	out	0x02, r24	; 2
     912:	08 95       	ret

00000914 <Autorange>:
}

// Set rangeIdx if autoRange
void Autorange(void){
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
	if(autoRange) {
     91c:	80 91 97 02 	lds	r24, 0x0297
     920:	88 23       	and	r24, r24
     922:	09 f4       	brne	.+2      	; 0x926 <Autorange+0x12>
     924:	ae c0       	rjmp	.+348    	; 0xa82 <Autorange+0x16e>
		switch (mode){
     926:	80 91 a4 02 	lds	r24, 0x02A4
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	21 f0       	breq	.+8      	; 0x936 <Autorange+0x22>
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	09 f0       	breq	.+2      	; 0x934 <Autorange+0x20>
     932:	a7 c0       	rjmp	.+334    	; 0xa82 <Autorange+0x16e>
     934:	55 c0       	rjmp	.+170    	; 0x9e0 <Autorange+0xcc>
			case VOLTMETER:
				switch (rangeIdx){
     936:	80 91 bb 02 	lds	r24, 0x02BB
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	b9 f0       	breq	.+46     	; 0x96c <Autorange+0x58>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	20 f0       	brcs	.+8      	; 0x94a <Autorange+0x36>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	09 f0       	breq	.+2      	; 0x948 <Autorange+0x34>
     946:	44 c0       	rjmp	.+136    	; 0x9d0 <Autorange+0xbc>
     948:	2e c0       	rjmp	.+92     	; 0x9a6 <Autorange+0x92>
					//In the 5 Volt range, move to a smaller scale if the voltage is less than 0.525 of Vref
					case 0:
						if (voltage <= 2.0){
     94a:	60 91 9b 02 	lds	r22, 0x029B
     94e:	70 91 9c 02 	lds	r23, 0x029C
     952:	80 91 9d 02 	lds	r24, 0x029D
     956:	90 91 9e 02 	lds	r25, 0x029E
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e4       	ldi	r21, 0x40	; 64
     962:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__lesf2>
     966:	18 16       	cp	r1, r24
     968:	9c f4       	brge	.+38     	; 0x990 <Autorange+0x7c>
     96a:	32 c0       	rjmp	.+100    	; 0x9d0 <Autorange+0xbc>
						}
						break;
					//In the 2.56 Volt range, move to a smaller scale if the voltage is less than 0.4 of Vref
					//or move to a larger scale if the voltage is close to Vref
					case 1:
						if (voltage < 0.9){
     96c:	e0 90 9b 02 	lds	r14, 0x029B
     970:	f0 90 9c 02 	lds	r15, 0x029C
     974:	00 91 9d 02 	lds	r16, 0x029D
     978:	10 91 9e 02 	lds	r17, 0x029E
     97c:	c8 01       	movw	r24, r16
     97e:	b7 01       	movw	r22, r14
     980:	26 e6       	ldi	r18, 0x66	; 102
     982:	36 e6       	ldi	r19, 0x66	; 102
     984:	46 e6       	ldi	r20, 0x66	; 102
     986:	5f e3       	ldi	r21, 0x3F	; 63
     988:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ltsf2>
     98c:	88 23       	and	r24, r24
     98e:	24 f4       	brge	.+8      	; 0x998 <Autorange+0x84>
							rangeIdx++;
     990:	80 91 bb 02 	lds	r24, 0x02BB
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	1a c0       	rjmp	.+52     	; 0x9cc <Autorange+0xb8>
						}
						else if (voltage > 2.0){
     998:	c8 01       	movw	r24, r16
     99a:	b7 01       	movw	r22, r14
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e4       	ldi	r21, 0x40	; 64
     9a4:	0c c0       	rjmp	.+24     	; 0x9be <Autorange+0xaa>
							rangeIdx--;
						}
						break;
					//In the 1.1 Volt range, move to a larger scale if the voltage is close to Vref
					case 2:
						if (voltage > 0.9){
     9a6:	60 91 9b 02 	lds	r22, 0x029B
     9aa:	70 91 9c 02 	lds	r23, 0x029C
     9ae:	80 91 9d 02 	lds	r24, 0x029D
     9b2:	90 91 9e 02 	lds	r25, 0x029E
     9b6:	26 e6       	ldi	r18, 0x66	; 102
     9b8:	36 e6       	ldi	r19, 0x66	; 102
     9ba:	46 e6       	ldi	r20, 0x66	; 102
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gtsf2>
     9c2:	18 16       	cp	r1, r24
     9c4:	2c f4       	brge	.+10     	; 0x9d0 <Autorange+0xbc>
							rangeIdx--;
     9c6:	80 91 bb 02 	lds	r24, 0x02BB
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	80 93 bb 02 	sts	0x02BB, r24
						}
						break;
				}
				setOref(3); // disable ohmref
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	0e 94 6f 04 	call	0x8de	; 0x8de <setOref>
				setVref(rangeIdx);
     9d6:	80 91 bb 02 	lds	r24, 0x02BB
     9da:	0e 94 4c 04 	call	0x898	; 0x898 <setVref>
     9de:	51 c0       	rjmp	.+162    	; 0xa82 <Autorange+0x16e>
				break;

			case OHMMETER:
				switch (rangeIdx){
     9e0:	80 91 bb 02 	lds	r24, 0x02BB
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	b9 f0       	breq	.+46     	; 0xa16 <Autorange+0x102>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	20 f0       	brcs	.+8      	; 0x9f4 <Autorange+0xe0>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <Autorange+0xde>
     9f0:	44 c0       	rjmp	.+136    	; 0xa7a <Autorange+0x166>
     9f2:	2e c0       	rjmp	.+92     	; 0xa50 <Autorange+0x13c>
					//In the 100kOhm range, move to a smaller scale if the resistance is less than 0.4 of Vcc 
					//(R_test is less than 10% of R) 
					case 0:
						if (ohm <= 10.5){
     9f4:	60 91 a0 02 	lds	r22, 0x02A0
     9f8:	70 91 a1 02 	lds	r23, 0x02A1
     9fc:	80 91 a2 02 	lds	r24, 0x02A2
     a00:	90 91 a3 02 	lds	r25, 0x02A3
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	48 e2       	ldi	r20, 0x28	; 40
     a0a:	51 e4       	ldi	r21, 0x41	; 65
     a0c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__lesf2>
     a10:	18 16       	cp	r1, r24
     a12:	9c f1       	brlt	.+102    	; 0xa7a <Autorange+0x166>
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <Autorange+0x126>
				
					//In the 10kOhm range, move to a smaller scale if the reading is less than 0.4 of Vcc
					//(R_test is less than 10% of R). Move to a larger sclae if the reading is almost Vcc
					//(R_test is almost 95% of R).
					case 1:
						if (ohm <= 3.3){
     a16:	e0 90 a0 02 	lds	r14, 0x02A0
     a1a:	f0 90 a1 02 	lds	r15, 0x02A1
     a1e:	00 91 a2 02 	lds	r16, 0x02A2
     a22:	10 91 a3 02 	lds	r17, 0x02A3
     a26:	c8 01       	movw	r24, r16
     a28:	b7 01       	movw	r22, r14
     a2a:	23 e3       	ldi	r18, 0x33	; 51
     a2c:	33 e3       	ldi	r19, 0x33	; 51
     a2e:	43 e5       	ldi	r20, 0x53	; 83
     a30:	50 e4       	ldi	r21, 0x40	; 64
     a32:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__lesf2>
     a36:	18 16       	cp	r1, r24
     a38:	24 f0       	brlt	.+8      	; 0xa42 <Autorange+0x12e>
							rangeIdx++;
     a3a:	80 91 bb 02 	lds	r24, 0x02BB
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	1a c0       	rjmp	.+52     	; 0xa76 <Autorange+0x162>
						}
						else if (ohm > 10.5){
     a42:	c8 01       	movw	r24, r16
     a44:	b7 01       	movw	r22, r14
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	48 e2       	ldi	r20, 0x28	; 40
     a4c:	51 e4       	ldi	r21, 0x41	; 65
     a4e:	0c c0       	rjmp	.+24     	; 0xa68 <Autorange+0x154>
						break;
	
					//In the 10kOhm range, move to a larger scale if the reading is almost Vcc 
					//(R_test is almost 95% of R).
					case 2:
						if (ohm > 3.3){
     a50:	60 91 a0 02 	lds	r22, 0x02A0
     a54:	70 91 a1 02 	lds	r23, 0x02A1
     a58:	80 91 a2 02 	lds	r24, 0x02A2
     a5c:	90 91 a3 02 	lds	r25, 0x02A3
     a60:	23 e3       	ldi	r18, 0x33	; 51
     a62:	33 e3       	ldi	r19, 0x33	; 51
     a64:	43 e5       	ldi	r20, 0x53	; 83
     a66:	50 e4       	ldi	r21, 0x40	; 64
     a68:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gtsf2>
     a6c:	18 16       	cp	r1, r24
     a6e:	2c f4       	brge	.+10     	; 0xa7a <Autorange+0x166>
							rangeIdx--;
     a70:	80 91 bb 02 	lds	r24, 0x02BB
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	80 93 bb 02 	sts	0x02BB, r24
						}
					break;
				}
				setOref(rangeIdx);
     a7a:	80 91 bb 02 	lds	r24, 0x02BB
     a7e:	0e 94 6f 04 	call	0x8de	; 0x8de <setOref>
				break;
		}
	}
}
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <poll>:
			}
			break;
	}
}

void poll(void) {
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
	//get the sample
	Ain = ADCH;
     aa4:	80 91 79 00 	lds	r24, 0x0079
     aa8:	80 93 bc 02 	sts	0x02BC, r24
	voltage = (float)Ain;
     aac:	60 91 bc 02 	lds	r22, 0x02BC
	voltage = (voltage/256.0) * Vref;
     ab0:	e0 90 ad 02 	lds	r14, 0x02AD
     ab4:	f0 90 ae 02 	lds	r15, 0x02AE
     ab8:	00 91 af 02 	lds	r16, 0x02AF
     abc:	10 91 b0 02 	lds	r17, 0x02B0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__floatunsisf>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e8       	ldi	r20, 0x80	; 128
     ad0:	5b e3       	ldi	r21, 0x3B	; 59
     ad2:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     ad6:	a8 01       	movw	r20, r16
     ad8:	97 01       	movw	r18, r14
     ada:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     ade:	3b 01       	movw	r6, r22
     ae0:	4c 01       	movw	r8, r24
     ae2:	60 93 9b 02 	sts	0x029B, r22
     ae6:	70 93 9c 02 	sts	0x029C, r23
     aea:	80 93 9d 02 	sts	0x029D, r24
     aee:	90 93 9e 02 	sts	0x029E, r25
	ohm = (ohmRef * voltage)/(Vref - voltage);
     af2:	60 91 98 02 	lds	r22, 0x0298
     af6:	a0 90 ad 02 	lds	r10, 0x02AD
     afa:	b0 90 ae 02 	lds	r11, 0x02AE
     afe:	c0 90 af 02 	lds	r12, 0x02AF
     b02:	d0 90 b0 02 	lds	r13, 0x02B0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	88 27       	eor	r24, r24
     b0a:	77 fd       	sbrc	r23, 7
     b0c:	80 95       	com	r24
     b0e:	98 2f       	mov	r25, r24
     b10:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__floatsisf>
     b14:	a4 01       	movw	r20, r8
     b16:	93 01       	movw	r18, r6
     b18:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     b1c:	7b 01       	movw	r14, r22
     b1e:	8c 01       	movw	r16, r24
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 33 0b 	call	0x1666	; 0x1666 <__subsf3>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	c8 01       	movw	r24, r16
     b32:	b7 01       	movw	r22, r14
     b34:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__divsf3>
     b38:	7b 01       	movw	r14, r22
     b3a:	8c 01       	movw	r16, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	d8 01       	movw	r26, r16
     b40:	80 93 a0 02 	sts	0x02A0, r24
     b44:	90 93 a1 02 	sts	0x02A1, r25
     b48:	a0 93 a2 02 	sts	0x02A2, r26
     b4c:	b0 93 a3 02 	sts	0x02A3, r27
	switch(mode) {
     b50:	80 91 a4 02 	lds	r24, 0x02A4
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	19 f0       	breq	.+6      	; 0xb5e <poll+0xd2>
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	61 f4       	brne	.+24     	; 0xb74 <poll+0xe8>
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <poll+0xd8>
		case VOLTMETER:
			dtostrf(voltage, 4, 2, v_string);
     b5e:	c4 01       	movw	r24, r8
     b60:	b3 01       	movw	r22, r6
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <poll+0xdc>
			break;
		case OHMMETER:
			dtostrf(ohm, 4, 2, v_string);
     b64:	b7 01       	movw	r22, r14
     b66:	c8 01       	movw	r24, r16
     b68:	44 e0       	ldi	r20, 0x04	; 4
     b6a:	22 e0       	ldi	r18, 0x02	; 2
     b6c:	01 eb       	ldi	r16, 0xB1	; 177
     b6e:	12 e0       	ldi	r17, 0x02	; 2
     b70:	0e 94 fd 10 	call	0x21fa	; 0x21fa <dtostrf>
			break;
	}
	sprintf(LCDBuffer, "%s",v_string);
     b74:	07 ea       	ldi	r16, 0xA7	; 167
     b76:	12 e0       	ldi	r17, 0x02	; 2
     b78:	c8 01       	movw	r24, r16
     b7a:	61 eb       	ldi	r22, 0xB1	; 177
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	0e 94 1e 11 	call	0x223c	; 0x223c <strcpy>

	CopyStringtoLCD(LCDBlank, 0, 0);
     b82:	80 e7       	ldi	r24, 0x70	; 112
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
	LCDGotoXY(0, 0);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <LCDGotoXY>
	LCDstring(LCDBuffer, strlen(LCDBuffer));
     b96:	f8 01       	movw	r30, r16
     b98:	01 90       	ld	r0, Z+
     b9a:	00 20       	and	r0, r0
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <poll+0x10c>
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	e0 1b       	sub	r30, r16
     ba2:	f1 0b       	sbc	r31, r17
     ba4:	c8 01       	movw	r24, r16
     ba6:	6e 2f       	mov	r22, r30
     ba8:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCDstring>
}
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	08 95       	ret

00000bc6 <InitLCD>:
	return tmpKey;
}

//Initialize the LCD
void InitLCD(void){
	LCDinit();	//initialize the display
     bc6:	0e 94 2b 08 	call	0x1056	; 0x1056 <LCDinit>
	LCDcursorOFF();
     bca:	0e 94 93 08 	call	0x1126	; 0x1126 <LCDcursorOFF>
	LCDclr();				//clear the display
     bce:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
	LCDGotoXY(0,0);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     bda:	82 e8       	ldi	r24, 0x82	; 130
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     be6:	84 e9       	ldi	r24, 0x94	; 148
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
}
     bf2:	08 95       	ret

00000bf4 <Initialize>:
		}
		break;
	}
}

void Initialize(void) {
     bf4:	1f 93       	push	r17
	//set up the ports
	triggerPoll = 0;
     bf6:	10 92 9f 02 	sts	0x029F, r1

	//init the A to D converter
	setVref(0); //Set to 5v Vref
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 4c 04 	call	0x898	; 0x898 <setVref>
	setOref(3); //Disable ohmref
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	0e 94 6f 04 	call	0x8de	; 0x8de <setOref>

	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + 7;
     c06:	87 e8       	ldi	r24, 0x87	; 135
     c08:	80 93 7a 00 	sts	0x007A, r24

	// Set A to input (high impedence)
	DDRA = 0x00;
     c0c:	11 b8       	out	0x01, r1	; 1

	// PortB: LEDs, output
	DDRB=0xff;
     c0e:	1f ef       	ldi	r17, 0xFF	; 255
     c10:	14 b9       	out	0x04, r17	; 4
	PORTB=0xff;
     c12:	15 b9       	out	0x05, r17	; 5
	// PortD: Keypad
	DDRD=0x00;
     c14:	1a b8       	out	0x0a, r1	; 10

	//set up timer 0 for 1 mSec ticks
	TIMSK0 = 2;		//turn on timer 0 cmp match ISR
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	90 93 6e 00 	sts	0x006E, r25
	OCR0A = 249;	//set the compare reg to 250 time ticks
     c1c:	89 ef       	ldi	r24, 0xF9	; 249
     c1e:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b00000010; // turn on clear-on-match
     c20:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011;	// clock prescalar to 64
     c22:	23 e0       	ldi	r18, 0x03	; 3
     c24:	25 bd       	out	0x25, r18	; 37

	//set up timer 1 to interrupt on capture
	TIMSK1 = (1 << ICIE1); //turn on timer1 input capture ISR
     c26:	80 e2       	ldi	r24, 0x20	; 32
     c28:	80 93 6f 00 	sts	0x006F, r24
	TCCR1A = 0b00000010;
     c2c:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | 0b00000001; // Start 
     c30:	81 ec       	ldi	r24, 0xC1	; 193
     c32:	80 93 81 00 	sts	0x0081, r24
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting ADC demo...\n\r");

	//initialize the current key to null
	curKey = 0;
     c36:	10 92 b5 02 	sts	0x02B5, r1
	elapsedTime = 30;
     c3a:	8e e1       	ldi	r24, 0x1E	; 30
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 96 02 	sts	0x0296, r25
     c42:	80 93 95 02 	sts	0x0295, r24
	debounceTime = 30;
     c46:	90 93 b7 02 	sts	0x02B7, r25
     c4a:	80 93 b6 02 	sts	0x02B6, r24
	autoRange = 0;
     c4e:	10 92 97 02 	sts	0x0297, r1
	mode = INIT;
     c52:	10 92 a4 02 	sts	0x02A4, r1
	manPage = WELCOME;
     c56:	10 92 bd 02 	sts	0x02BD, r1
	keyState = RELEASED;
     c5a:	10 92 9a 02 	sts	0x029A, r1
	rangeIdx = 0;
     c5e:	10 92 bb 02 	sts	0x02BB, r1
	rangeIdxMod = 3;
     c62:	20 93 94 02 	sts	0x0294, r18
	frequencyRef = frequencyRanges[rangeIdx];
     c66:	80 91 bb 02 	lds	r24, 0x02BB
     c6a:	ef e0       	ldi	r30, 0x0F	; 15
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	e8 0f       	add	r30, r24
     c70:	f1 1d       	adc	r31, r1
     c72:	80 81       	ld	r24, Z
     c74:	80 93 bf 02 	sts	0x02BF, r24
	justSwitched = 0;
     c78:	10 92 be 02 	sts	0x02BE, r1
	PORTB = ~0x01;
     c7c:	8e ef       	ldi	r24, 0xFE	; 254
     c7e:	85 b9       	out	0x05, r24	; 5
	InitLCD();
     c80:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <InitLCD>
	PORTB = 0xFF;
     c84:	15 b9       	out	0x05, r17	; 5
	sei();
     c86:	78 94       	sei
}
     c88:	1f 91       	pop	r17
     c8a:	08 95       	ret

00000c8c <main>:
}

//END HELPER FUNCTIONS*********************************************************

int main(void){
	Initialize();
     c8c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <Initialize>
	
	while(1){
	uint8_t key = curKey;
     c90:	80 91 b5 02 	lds	r24, 0x02B5
		if (key){
     c94:	88 23       	and	r24, r24
     c96:	11 f0       	breq	.+4      	; 0xc9c <main+0x10>
			PORTB = ~key;
     c98:	80 95       	com	r24
     c9a:	85 b9       	out	0x05, r24	; 5
		}
		if(triggerPoll) {
     c9c:	80 91 9f 02 	lds	r24, 0x029F
     ca0:	88 23       	and	r24, r24
     ca2:	31 f0       	breq	.+12     	; 0xcb0 <main+0x24>
			poll();
     ca4:	0e 94 46 05 	call	0xa8c	; 0xa8c <poll>
			Autorange();
     ca8:	0e 94 8a 04 	call	0x914	; 0x914 <Autorange>
			triggerPoll = 0;
     cac:	10 92 9f 02 	sts	0x029F, r1
		}
		if (justSwitched){
     cb0:	80 91 be 02 	lds	r24, 0x02BE
     cb4:	88 23       	and	r24, r24
     cb6:	61 f3       	breq	.-40     	; 0xc90 <main+0x4>
			justSwitched = 0;
     cb8:	10 92 be 02 	sts	0x02BE, r1
			switch (mode){
     cbc:	80 91 a4 02 	lds	r24, 0x02A4
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <main+0x3a>
     cc4:	79 c0       	rjmp	.+242    	; 0xdb8 <main+0x12c>
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <main+0x44>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f7       	brne	.-62     	; 0xc90 <main+0x4>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <main+0x50>
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <main+0x4a>
     cd4:	a7 c0       	rjmp	.+334    	; 0xe24 <main+0x198>
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	d9 f6       	brne	.-74     	; 0xc90 <main+0x4>
     cda:	da c0       	rjmp	.+436    	; 0xe90 <main+0x204>
				case MAN:
					switch (manPage){
     cdc:	80 91 bd 02 	lds	r24, 0x02BD
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	99 f1       	breq	.+102    	; 0xd4a <main+0xbe>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	28 f4       	brcc	.+10     	; 0xcf2 <main+0x66>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	c9 f0       	breq	.+50     	; 0xd1e <main+0x92>
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	10 f5       	brcc	.+68     	; 0xd34 <main+0xa8>
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <main+0x7c>
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <main+0x6c>
     cf6:	3f c0       	rjmp	.+126    	; 0xd76 <main+0xea>
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	90 f1       	brcs	.+100    	; 0xd60 <main+0xd4>
     cfc:	86 30       	cpi	r24, 0x06	; 6
     cfe:	09 f4       	brne	.+2      	; 0xd02 <main+0x76>
     d00:	45 c0       	rjmp	.+138    	; 0xd8c <main+0x100>
     d02:	87 30       	cpi	r24, 0x07	; 7
     d04:	29 f6       	brne	.-118    	; 0xc90 <main+0x4>
     d06:	4d c0       	rjmp	.+154    	; 0xda2 <main+0x116>
						case WELCOME:
							LCDclr();
     d08:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDManWelcomeTop, 0, 0);
     d0c:	81 e3       	ldi	r24, 0x31	; 49
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDManWelcomeBot, 0, 1);
     d18:	8c e3       	ldi	r24, 0x3C	; 60
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	dd c0       	rjmp	.+442    	; 0xed8 <main+0x24c>
							break;
						case NAVIGATION_1:
							LCDclr();
     d1e:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDNavigation1Top, 0, 0);
     d22:	8b e4       	ldi	r24, 0x4B	; 75
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					 		CopyStringtoLCD(LCDNavigation1Bot, 0, 1);
     d2e:	8d e5       	ldi	r24, 0x5D	; 93
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	d2 c0       	rjmp	.+420    	; 0xed8 <main+0x24c>
							break;
						case NAVIGATION_2:
							LCDclr();
     d34:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDNavigation2Top, 0, 0);
     d38:	8f e6       	ldi	r24, 0x6F	; 111
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDNavigation2Bot, 0, 1);
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	c7 c0       	rjmp	.+398    	; 0xed8 <main+0x24c>
							break;
					 	case VOLT_MAN:
							LCDclr();
     d4a:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDVoltManTop, 0, 0);
     d4e:	8f e8       	ldi	r24, 0x8F	; 143
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDVoltManBot, 0, 1);
     d5a:	80 ea       	ldi	r24, 0xA0	; 160
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	bc c0       	rjmp	.+376    	; 0xed8 <main+0x24c>
							break;
						case OHM_MAN:
							LCDclr();
     d60:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDOhmManTop, 0, 0);
     d64:	8b ea       	ldi	r24, 0xAB	; 171
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDOhmManBot, 0, 1);
     d70:	8b eb       	ldi	r24, 0xBB	; 187
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	b1 c0       	rjmp	.+354    	; 0xed8 <main+0x24c>
							break;
						case FREQ_MAN:
							LCDclr();
     d76:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDFreqManTop, 0, 0);
     d7a:	85 ec       	ldi	r24, 0xC5	; 197
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDFreqManBot, 0, 1);
     d86:	86 ed       	ldi	r24, 0xD6	; 214
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	a6 c0       	rjmp	.+332    	; 0xed8 <main+0x24c>
							break;
						case AUTORANGE_MAN_1:
							LCDclr();
     d8c:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan1Top, 0, 0);
     d90:	83 ee       	ldi	r24, 0xE3	; 227
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan1Bot, 0, 1);
     d9c:	80 ef       	ldi	r24, 0xF0	; 240
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	9b c0       	rjmp	.+310    	; 0xed8 <main+0x24c>
							break;
						case AUTORANGE_MAN_2:
							LCDclr();
     da2:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
							CopyStringtoLCD(LCDAutorangeMan2Top, 0, 0);
     da6:	8b ef       	ldi	r24, 0xFB	; 251
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
							CopyStringtoLCD(LCDAutorangeMan2Bot, 0, 1);
     db2:	88 e0       	ldi	r24, 0x08	; 8
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	90 c0       	rjmp	.+288    	; 0xed8 <main+0x24c>
							break;
					}
						break;

				case VOLTMETER:
					LCDclr();
     db8:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
				 	CopyStringtoLCD(LCDMode, 0, 0);
     dbc:	88 e0       	ldi	r24, 0x08	; 8
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					CopyStringtoLCD(LCDVolt, MODE_START, 0);
     dc8:	80 e1       	ldi	r24, 0x10	; 16
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	66 e0       	ldi	r22, 0x06	; 6
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					setOref(3); // disable ohmmeter
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	0e 94 6f 04 	call	0x8de	; 0x8de <setOref>
					if (autoRange){
     dda:	80 91 97 02 	lds	r24, 0x0297
     dde:	88 23       	and	r24, r24
     de0:	09 f0       	breq	.+2      	; 0xde4 <main+0x158>
     de2:	78 c0       	rjmp	.+240    	; 0xed4 <main+0x248>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     de4:	86 ea       	ldi	r24, 0xA6	; 166
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
						switch (rangeIdx){
     df0:	80 91 bb 02 	lds	r24, 0x02BB
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	41 f0       	breq	.+16     	; 0xe08 <main+0x17c>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	18 f0       	brcs	.+6      	; 0xe02 <main+0x176>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	69 f4       	brne	.+26     	; 0xe1a <main+0x18e>
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <main+0x182>
							case 0:
								CopyStringtoLCD(LCD5Volts, RANGE_START, 1);
     e02:	8e eb       	ldi	r24, 0xBE	; 190
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <main+0x186>
								break;
							case 1:
								CopyStringtoLCD(LCD256Volts, RANGE_START, 1);
     e08:	87 ec       	ldi	r24, 0xC7	; 199
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <main+0x186>
								break;
							case 2:
								CopyStringtoLCD(LCD11Volts, RANGE_START, 1);
     e0e:	83 ed       	ldi	r24, 0xD3	; 211
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	67 e0       	ldi	r22, 0x07	; 7
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
								break;
						}
						setVref(rangeIdx);
     e1a:	80 91 bb 02 	lds	r24, 0x02BB
     e1e:	0e 94 4c 04 	call	0x898	; 0x898 <setVref>
     e22:	36 cf       	rjmp	.-404    	; 0xc90 <main+0x4>
					}	
					break;

				case OHMMETER:
					LCDclr();
     e24:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					CopyStringtoLCD(LCDOhm, MODE_START, 0);
     e34:	8c e1       	ldi	r24, 0x1C	; 28
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	66 e0       	ldi	r22, 0x06	; 6
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					setVref(0); // 5v reference
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 4c 04 	call	0x898	; 0x898 <setVref>
					if (autoRange){
     e46:	80 91 97 02 	lds	r24, 0x0297
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <main+0x1c4>
     e4e:	42 c0       	rjmp	.+132    	; 0xed4 <main+0x248>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     e50:	86 ea       	ldi	r24, 0xA6	; 166
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
						switch (rangeIdx){
     e5c:	80 91 bb 02 	lds	r24, 0x02BB
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	41 f0       	breq	.+16     	; 0xe74 <main+0x1e8>
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	18 f0       	brcs	.+6      	; 0xe6e <main+0x1e2>
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	69 f4       	brne	.+26     	; 0xe86 <main+0x1fa>
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <main+0x1ee>
							case 0:
								CopyStringtoLCD(LCD100kOhm, RANGE_START, 1);
     e6e:	8f ee       	ldi	r24, 0xEF	; 239
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <main+0x1f2>
								break;
							case 1:
								CopyStringtoLCD(LCD10kOhm, RANGE_START, 1);
     e74:	86 ee       	ldi	r24, 0xE6	; 230
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <main+0x1f2>
								break;
							case 2:
								CopyStringtoLCD(LCD1kOhm, RANGE_START, 1);
     e7a:	8e ed       	ldi	r24, 0xDE	; 222
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	67 e0       	ldi	r22, 0x07	; 7
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
								break;
						}
						setOref(rangeIdx);
     e86:	80 91 bb 02 	lds	r24, 0x02BB
     e8a:	0e 94 6f 04 	call	0x8de	; 0x8de <setOref>
     e8e:	00 cf       	rjmp	.-512    	; 0xc90 <main+0x4>
					}
					break;

				case FREQMETER:
					LCDclr();
     e90:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCDclr>
					CopyStringtoLCD(LCDMode, 0, 0);
     e94:	88 e0       	ldi	r24, 0x08	; 8
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
					CopyStringtoLCD(LCDFreq, MODE_START, 0);
     ea0:	86 e2       	ldi	r24, 0x26	; 38
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	66 e0       	ldi	r22, 0x06	; 6
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>

					//Set the prescalar on TIMER1 to the appropriate range
 					TCCR1B &= ~0x07;
     eac:	80 91 81 00 	lds	r24, 0x0081
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	80 93 81 00 	sts	0x0081, r24
 					TCCR1B |= TIMERAprescalars[rangeIdx];
     eb6:	90 91 81 00 	lds	r25, 0x0081
     eba:	e0 91 bb 02 	lds	r30, 0x02BB
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	ef 5e       	subi	r30, 0xEF	; 239
     ec2:	fe 4f       	sbci	r31, 0xFE	; 254
     ec4:	80 81       	ld	r24, Z
     ec6:	98 2b       	or	r25, r24
     ec8:	90 93 81 00 	sts	0x0081, r25

					if (autoRange){
     ecc:	80 91 97 02 	lds	r24, 0x0297
     ed0:	88 23       	and	r24, r24
     ed2:	21 f0       	breq	.+8      	; 0xedc <main+0x250>
						CopyStringtoLCD(LCDAutorangeOn, 0, 1);
     ed4:	8f ea       	ldi	r24, 0xAF	; 175
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	14 c0       	rjmp	.+40     	; 0xf04 <main+0x278>
					}
					else{
						CopyStringtoLCD(LCDRange, 0, 1);
     edc:	86 ea       	ldi	r24, 0xA6	; 166
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
						switch (rangeIdx){
     ee8:	80 91 bb 02 	lds	r24, 0x02BB
     eec:	88 23       	and	r24, r24
     eee:	21 f0       	breq	.+8      	; 0xef8 <main+0x26c>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <main+0x26a>
     ef4:	cd ce       	rjmp	.-614    	; 0xc90 <main+0x4>
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <main+0x272>
							case 0:
								CopyStringtoLCD(LCD10kHz, RANGE_START, 1);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <main+0x276>
								break;
							case 1:
								CopyStringtoLCD(LCD1kHz, RANGE_START, 1);
     efe:	89 ef       	ldi	r24, 0xF9	; 249
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	67 e0       	ldi	r22, 0x07	; 7
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CopyStringtoLCD>
     f0a:	c2 ce       	rjmp	.-636    	; 0xc90 <main+0x4>

00000f0c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     f0c:	28 2f       	mov	r18, r24
     f0e:	20 7f       	andi	r18, 0xF0	; 240
     f10:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     f12:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f14:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f16:	20 ea       	ldi	r18, 0xA0	; 160
     f18:	3f e0       	ldi	r19, 0x0F	; 15
     f1a:	f9 01       	movw	r30, r18
     f1c:	31 97       	sbiw	r30, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f20:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f22:	40 98       	cbi	0x08, 0	; 8
     f24:	f9 01       	movw	r30, r18
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	44 e0       	ldi	r20, 0x04	; 4
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	4a 95       	dec	r20
     f34:	e1 f7       	brne	.-8      	; 0xf2e <LCDsendChar+0x22>
     f36:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     f38:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     f3a:	42 9a       	sbi	0x08, 2	; 8
     f3c:	c9 01       	movw	r24, r18
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f42:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f44:	40 98       	cbi	0x08, 0	; 8
     f46:	c9 01       	movw	r24, r18
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     f4c:	08 95       	ret

00000f4e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     f4e:	28 2f       	mov	r18, r24
     f50:	20 7f       	andi	r18, 0xF0	; 240
     f52:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     f54:	42 9a       	sbi	0x08, 2	; 8
     f56:	20 ea       	ldi	r18, 0xA0	; 160
     f58:	3f e0       	ldi	r19, 0x0F	; 15
     f5a:	f9 01       	movw	r30, r18
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f60:	42 98       	cbi	0x08, 2	; 8
     f62:	f9 01       	movw	r30, r18
     f64:	31 97       	sbiw	r30, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	54 e0       	ldi	r21, 0x04	; 4
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	5a 95       	dec	r21
     f72:	e1 f7       	brne	.-8      	; 0xf6c <LCDsendCommand+0x1e>
     f74:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     f76:	42 9a       	sbi	0x08, 2	; 8
     f78:	c9 01       	movw	r24, r18
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     f7e:	42 98       	cbi	0x08, 2	; 8
     f80:	c9 01       	movw	r24, r18
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     f86:	08 95       	ret

00000f88 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
     f8e:	08 95       	ret

00000f90 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
     f96:	08 95       	ret

00000f98 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	49 f0       	breq	.+18     	; 0xfb8 <LCDstring+0x20>
     fa6:	ec 01       	movw	r28, r24
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     fac:	89 91       	ld	r24, Y+
     fae:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     fb2:	1f 5f       	subi	r17, 0xFF	; 255
     fb4:	10 17       	cp	r17, r16
     fb6:	d0 f3       	brcs	.-12     	; 0xfac <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     fc2:	62 30       	cpi	r22, 0x02	; 2
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <LCDGotoXY+0x10>
     fc6:	63 30       	cpi	r22, 0x03	; 3
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <LCDGotoXY+0x14>
     fca:	61 30       	cpi	r22, 0x01	; 1
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     fce:	80 5c       	subi	r24, 0xC0	; 192
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     fd2:	8c 5e       	subi	r24, 0xEC	; 236
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     fd6:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
	
}
     fde:	08 95       	ret

00000fe0 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
     fe8:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     fea:	64 2f       	mov	r22, r20
     fec:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <LCDGotoXY>
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ff4:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ff8:	1f 5f       	subi	r17, 0xFF	; 255
     ffa:	fe 01       	movw	r30, r28
     ffc:	e1 0f       	add	r30, r17
     ffe:	f1 1d       	adc	r31, r1
    1000:	84 91       	lpm	r24, Z+
    1002:	88 23       	and	r24, r24
    1004:	b9 f7       	brne	.-18     	; 0xff4 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	7c 01       	movw	r14, r24
    101c:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    101e:	11 0f       	add	r17, r17
    1020:	11 0f       	add	r17, r17
    1022:	11 0f       	add	r17, r17
    1024:	10 64       	ori	r17, 0x40	; 64
    1026:	c0 e0       	ldi	r28, 0x00	; 0
    1028:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    102a:	f7 01       	movw	r30, r14
    102c:	ec 0f       	add	r30, r28
    102e:	fd 1f       	adc	r31, r29
    1030:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1032:	81 2f       	mov	r24, r17
    1034:	8c 0f       	add	r24, r28
    1036:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
		LCDsendChar(pcc);
    103a:	80 2f       	mov	r24, r16
    103c:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1040:	21 96       	adiw	r28, 0x01	; 1
    1042:	c8 30       	cpi	r28, 0x08	; 8
    1044:	d1 05       	cpc	r29, r1
    1046:	89 f7       	brne	.-30     	; 0x102a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	08 95       	ret

00001056 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	80 e6       	ldi	r24, 0x60	; 96
    105e:	9a ee       	ldi	r25, 0xEA	; 234
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1064:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1066:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1068:	87 b1       	in	r24, 0x07	; 7
    106a:	80 6f       	ori	r24, 0xF0	; 240
    106c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    106e:	87 b1       	in	r24, 0x07	; 7
    1070:	87 60       	ori	r24, 0x07	; 7
    1072:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1074:	80 e3       	ldi	r24, 0x30	; 48
    1076:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1078:	42 9a       	sbi	0x08, 2	; 8
    107a:	20 ea       	ldi	r18, 0xA0	; 160
    107c:	3f e0       	ldi	r19, 0x0F	; 15
    107e:	f9 01       	movw	r30, r18
    1080:	31 97       	sbiw	r30, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1084:	42 98       	cbi	0x08, 2	; 8
    1086:	f9 01       	movw	r30, r18
    1088:	31 97       	sbiw	r30, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    108c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    108e:	42 9a       	sbi	0x08, 2	; 8
    1090:	c9 01       	movw	r24, r18
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1096:	42 98       	cbi	0x08, 2	; 8
    1098:	c9 01       	movw	r24, r18
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    109e:	80 e2       	ldi	r24, 0x20	; 32
    10a0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    10a2:	42 9a       	sbi	0x08, 2	; 8
    10a4:	c9 01       	movw	r24, r18
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    10aa:	42 98       	cbi	0x08, 2	; 8
    10ac:	c9 01       	movw	r24, r18
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    10b2:	88 e2       	ldi	r24, 0x28	; 40
    10b4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    10b8:	8c e0       	ldi	r24, 0x0C	; 12
    10ba:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
    10be:	c9 e1       	ldi	r28, 0x19	; 25
    10c0:	d2 e0       	ldi	r29, 0x02	; 2
    10c2:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    10c4:	16 2f       	mov	r17, r22
    10c6:	1f 5f       	subi	r17, 0xFF	; 255
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 07 08 	call	0x100e	; 0x100e <LCDdefinechar>
    10ce:	28 96       	adiw	r28, 0x08	; 8
    10d0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    10d2:	18 30       	cpi	r17, 0x08	; 8
    10d4:	b9 f7       	brne	.-18     	; 0x10c4 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	08 95       	ret

000010de <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	08 2f       	mov	r16, r24
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    10e8:	8e e1       	ldi	r24, 0x1E	; 30
    10ea:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    10ee:	1f 5f       	subi	r17, 0xFF	; 255
    10f0:	10 17       	cp	r17, r16
    10f2:	d0 f3       	brcs	.-12     	; 0x10e8 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	08 2f       	mov	r16, r24
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <__stack+0xd>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1104:	88 e1       	ldi	r24, 0x18	; 24
    1106:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    110a:	1f 5f       	subi	r17, 0xFF	; 255
    110c:	10 17       	cp	r17, r16
    110e:	d0 f3       	brcs	.-12     	; 0x1104 <__stack+0x5>
	{
		LCDsendCommand(0x18);
	}
}
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	08 95       	ret

00001116 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1116:	8e e0       	ldi	r24, 0x0E	; 14
    1118:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
    111c:	08 95       	ret

0000111e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    111e:	8f e0       	ldi	r24, 0x0F	; 15
    1120:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
    1124:	08 95       	ret

00001126 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1126:	8c e0       	ldi	r24, 0x0C	; 12
    1128:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
    112c:	08 95       	ret

0000112e <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
    1134:	08 95       	ret

00001136 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1136:	8c e0       	ldi	r24, 0x0C	; 12
    1138:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
}
    113c:	08 95       	ret

0000113e <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	08 2f       	mov	r16, r24
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1148:	80 e1       	ldi	r24, 0x10	; 16
    114a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    114e:	1f 5f       	subi	r17, 0xFF	; 255
    1150:	10 17       	cp	r17, r16
    1152:	d0 f3       	brcs	.-12     	; 0x1148 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	08 2f       	mov	r16, r24
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	04 c0       	rjmp	.+8      	; 0x116c <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1164:	84 e1       	ldi	r24, 0x14	; 20
    1166:	0e 94 a7 07 	call	0xf4e	; 0xf4e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    116a:	1f 5f       	subi	r17, 0xFF	; 255
    116c:	10 17       	cp	r17, r16
    116e:	d0 f3       	brcs	.-12     	; 0x1164 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1186:	96 e0       	ldi	r25, 0x06	; 6
    1188:	89 9f       	mul	r24, r25
    118a:	c0 01       	movw	r24, r0
    118c:	11 24       	eor	r1, r1
    118e:	24 2f       	mov	r18, r20
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ac 01       	movw	r20, r24
    1194:	42 9f       	mul	r20, r18
    1196:	c0 01       	movw	r24, r0
    1198:	43 9f       	mul	r20, r19
    119a:	90 0d       	add	r25, r0
    119c:	52 9f       	mul	r21, r18
    119e:	90 0d       	add	r25, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodhi4>
    11a8:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    11aa:	cb 01       	movw	r24, r22
    11ac:	66 e0       	ldi	r22, 0x06	; 6
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 9f 10 	call	0x213e	; 0x213e <__udivmodhi4>
    11b4:	e8 2e       	mov	r14, r24
    11b6:	ff 24       	eor	r15, r15
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	12 c0       	rjmp	.+36     	; 0x11e2 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    11be:	c8 01       	movw	r24, r16
    11c0:	05 96       	adiw	r24, 0x05	; 5
    11c2:	c8 17       	cp	r28, r24
    11c4:	d9 07       	cpc	r29, r25
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <LCDprogressBar+0x56>
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    11cc:	c0 17       	cp	r28, r16
    11ce:	d1 07       	cpc	r29, r17
    11d0:	10 f0       	brcs	.+4      	; 0x11d6 <LCDprogressBar+0x60>
    11d2:	8e 2d       	mov	r24, r14
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <LCDprogressBar+0x62>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    11d8:	0e 94 86 07 	call	0xf0c	; 0xf0c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    11dc:	f3 94       	inc	r15
    11de:	0a 5f       	subi	r16, 0xFA	; 250
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	fd 14       	cp	r15, r13
    11e4:	60 f3       	brcs	.-40     	; 0x11be <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	08 95       	ret

000011f6 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    11f6:	87 e6       	ldi	r24, 0x67	; 103
    11f8:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    11fc:	88 e1       	ldi	r24, 0x18	; 24
    11fe:	80 93 c1 00 	sts	0x00C1, r24
}
    1202:	08 95       	ret

00001204 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1204:	1f 93       	push	r17
    1206:	18 2f       	mov	r17, r24

  if (c == '\a')
    1208:	87 30       	cpi	r24, 0x07	; 7
    120a:	49 f4       	brne	.+18     	; 0x121e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    120c:	60 91 c4 02 	lds	r22, 0x02C4
    1210:	70 91 c5 02 	lds	r23, 0x02C5
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 25 11 	call	0x224a	; 0x224a <fputs>
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    121e:	8a 30       	cpi	r24, 0x0A	; 10
    1220:	19 f4       	brne	.+6      	; 0x1228 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1222:	8d e0       	ldi	r24, 0x0D	; 13
    1224:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1228:	80 91 c0 00 	lds	r24, 0x00C0
    122c:	85 ff       	sbrs	r24, 5
    122e:	fc cf       	rjmp	.-8      	; 0x1228 <uart_putchar+0x24>
  UDR0 = c;
    1230:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	1f 91       	pop	r17
    123a:	08 95       	ret

0000123c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    124a:	80 91 42 02 	lds	r24, 0x0242
    124e:	90 91 43 02 	lds	r25, 0x0243
    1252:	89 2b       	or	r24, r25
    1254:	09 f0       	breq	.+2      	; 0x1258 <uart_getchar+0x1c>
    1256:	9f c0       	rjmp	.+318    	; 0x1396 <uart_getchar+0x15a>
    1258:	04 e4       	ldi	r16, 0x44	; 68
    125a:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    125c:	80 91 c0 00 	lds	r24, 0x00C0
    1260:	87 ff       	sbrs	r24, 7
    1262:	fc cf       	rjmp	.-8      	; 0x125c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1264:	80 91 c0 00 	lds	r24, 0x00C0
    1268:	84 ff       	sbrs	r24, 4
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <uart_getchar+0x36>
    126c:	2e ef       	ldi	r18, 0xFE	; 254
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	a6 c0       	rjmp	.+332    	; 0x13be <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1272:	80 91 c0 00 	lds	r24, 0x00C0
    1276:	83 fd       	sbrc	r24, 3
    1278:	a0 c0       	rjmp	.+320    	; 0x13ba <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    127a:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    127e:	9d 30       	cpi	r25, 0x0D	; 13
    1280:	11 f0       	breq	.+4      	; 0x1286 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1282:	9a 30       	cpi	r25, 0x0A	; 10
    1284:	69 f4       	brne	.+26     	; 0x12a0 <uart_getchar+0x64>
	  {
	    *cp = c;
    1286:	8a e0       	ldi	r24, 0x0A	; 10
    1288:	f8 01       	movw	r30, r16
    128a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    128c:	b7 01       	movw	r22, r14
    128e:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
	    rxp = b;
    1292:	84 e4       	ldi	r24, 0x44	; 68
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	90 93 43 02 	sts	0x0243, r25
    129a:	80 93 42 02 	sts	0x0242, r24
    129e:	7b c0       	rjmp	.+246    	; 0x1396 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    12a0:	99 30       	cpi	r25, 0x09	; 9
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <uart_getchar+0x6a>
    12a4:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    12a6:	89 2f       	mov	r24, r25
    12a8:	80 52       	subi	r24, 0x20	; 32
    12aa:	8f 35       	cpi	r24, 0x5F	; 95
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <uart_getchar+0x76>
    12ae:	90 3a       	cpi	r25, 0xA0	; 160
    12b0:	70 f0       	brcs	.+28     	; 0x12ce <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    12b2:	f2 e0       	ldi	r31, 0x02	; 2
    12b4:	03 39       	cpi	r16, 0x93	; 147
    12b6:	1f 07       	cpc	r17, r31
    12b8:	11 f4       	brne	.+4      	; 0x12be <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    12ba:	87 e0       	ldi	r24, 0x07	; 7
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    12be:	f8 01       	movw	r30, r16
    12c0:	91 93       	st	Z+, r25
    12c2:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    12c4:	89 2f       	mov	r24, r25
    12c6:	b7 01       	movw	r22, r14
    12c8:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
    12cc:	c7 cf       	rjmp	.-114    	; 0x125c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    12ce:	92 31       	cpi	r25, 0x12	; 18
    12d0:	39 f1       	breq	.+78     	; 0x1320 <uart_getchar+0xe4>
    12d2:	93 31       	cpi	r25, 0x13	; 19
    12d4:	38 f4       	brcc	.+14     	; 0x12e4 <uart_getchar+0xa8>
    12d6:	93 30       	cpi	r25, 0x03	; 3
    12d8:	09 f4       	brne	.+2      	; 0x12dc <uart_getchar+0xa0>
    12da:	6f c0       	rjmp	.+222    	; 0x13ba <uart_getchar+0x17e>
    12dc:	98 30       	cpi	r25, 0x08	; 8
    12de:	09 f0       	breq	.+2      	; 0x12e2 <uart_getchar+0xa6>
    12e0:	bd cf       	rjmp	.-134    	; 0x125c <uart_getchar+0x20>
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <uart_getchar+0xba>
    12e4:	97 31       	cpi	r25, 0x17	; 23
    12e6:	09 f4       	brne	.+2      	; 0x12ea <uart_getchar+0xae>
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <uart_getchar+0x144>
    12ea:	9f 37       	cpi	r25, 0x7F	; 127
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <uart_getchar+0xba>
    12ee:	95 31       	cpi	r25, 0x15	; 21
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <uart_getchar+0xb8>
    12f2:	b4 cf       	rjmp	.-152    	; 0x125c <uart_getchar+0x20>
    12f4:	32 c0       	rjmp	.+100    	; 0x135a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    12f6:	f2 e0       	ldi	r31, 0x02	; 2
    12f8:	04 34       	cpi	r16, 0x44	; 68
    12fa:	1f 07       	cpc	r17, r31
    12fc:	09 f0       	breq	.+2      	; 0x1300 <uart_getchar+0xc4>
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <uart_getchar+0xc6>
    1300:	ad cf       	rjmp	.-166    	; 0x125c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	b7 01       	movw	r22, r14
    1306:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar(' ', stream);
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	b7 01       	movw	r22, r14
    130e:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar('\b', stream);
    1312:	88 e0       	ldi	r24, 0x08	; 8
    1314:	b7 01       	movw	r22, r14
    1316:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		cp--;
    131a:	01 50       	subi	r16, 0x01	; 1
    131c:	10 40       	sbci	r17, 0x00	; 0
    131e:	9e cf       	rjmp	.-196    	; 0x125c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1320:	8d e0       	ldi	r24, 0x0D	; 13
    1322:	b7 01       	movw	r22, r14
    1324:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
    1328:	c4 e4       	ldi	r28, 0x44	; 68
    132a:	d2 e0       	ldi	r29, 0x02	; 2
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    132e:	89 91       	ld	r24, Y+
    1330:	b7 01       	movw	r22, r14
    1332:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1336:	c0 17       	cp	r28, r16
    1338:	d1 07       	cpc	r29, r17
    133a:	c8 f3       	brcs	.-14     	; 0x132e <uart_getchar+0xf2>
    133c:	8f cf       	rjmp	.-226    	; 0x125c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    133e:	88 e0       	ldi	r24, 0x08	; 8
    1340:	b7 01       	movw	r22, r14
    1342:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar(' ', stream);
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	b7 01       	movw	r22, r14
    134a:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar('\b', stream);
    134e:	88 e0       	ldi	r24, 0x08	; 8
    1350:	b7 01       	movw	r22, r14
    1352:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		cp--;
    1356:	01 50       	subi	r16, 0x01	; 1
    1358:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	04 34       	cpi	r16, 0x44	; 68
    135e:	18 07       	cpc	r17, r24
    1360:	09 f0       	breq	.+2      	; 0x1364 <uart_getchar+0x128>
    1362:	68 f7       	brcc	.-38     	; 0x133e <uart_getchar+0x102>
    1364:	7b cf       	rjmp	.-266    	; 0x125c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1366:	88 e0       	ldi	r24, 0x08	; 8
    1368:	b7 01       	movw	r22, r14
    136a:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar(' ', stream);
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	b7 01       	movw	r22, r14
    1372:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
		uart_putchar('\b', stream);
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	b7 01       	movw	r22, r14
    137a:	0e 94 02 09 	call	0x1204	; 0x1204 <uart_putchar>
    137e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1380:	e2 e0       	ldi	r30, 0x02	; 2
    1382:	04 34       	cpi	r16, 0x44	; 68
    1384:	1e 07       	cpc	r17, r30
    1386:	09 f0       	breq	.+2      	; 0x138a <uart_getchar+0x14e>
    1388:	08 f4       	brcc	.+2      	; 0x138c <uart_getchar+0x150>
    138a:	68 cf       	rjmp	.-304    	; 0x125c <uart_getchar+0x20>
    138c:	e8 01       	movw	r28, r16
    138e:	8a 91       	ld	r24, -Y
    1390:	80 32       	cpi	r24, 0x20	; 32
    1392:	49 f7       	brne	.-46     	; 0x1366 <uart_getchar+0x12a>
    1394:	63 cf       	rjmp	.-314    	; 0x125c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1396:	e0 91 42 02 	lds	r30, 0x0242
    139a:	f0 91 43 02 	lds	r31, 0x0243
    139e:	81 91       	ld	r24, Z+
    13a0:	f0 93 43 02 	sts	0x0243, r31
    13a4:	e0 93 42 02 	sts	0x0242, r30
  if (c == '\n')
    13a8:	8a 30       	cpi	r24, 0x0A	; 10
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <uart_getchar+0x178>
    rxp = 0;
    13ac:	10 92 43 02 	sts	0x0243, r1
    13b0:	10 92 42 02 	sts	0x0242, r1

  return c;
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <uart_getchar+0x182>
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
}
    13be:	c9 01       	movw	r24, r18
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	08 95       	ret

000013ce <_fpadd_parts>:
    13ce:	a0 e0       	ldi	r26, 0x00	; 0
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ed ee       	ldi	r30, 0xED	; 237
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__>
    13da:	dc 01       	movw	r26, r24
    13dc:	2b 01       	movw	r4, r22
    13de:	fa 01       	movw	r30, r20
    13e0:	9c 91       	ld	r25, X
    13e2:	92 30       	cpi	r25, 0x02	; 2
    13e4:	08 f4       	brcc	.+2      	; 0x13e8 <_fpadd_parts+0x1a>
    13e6:	39 c1       	rjmp	.+626    	; 0x165a <_fpadd_parts+0x28c>
    13e8:	eb 01       	movw	r28, r22
    13ea:	88 81       	ld	r24, Y
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <_fpadd_parts+0x24>
    13f0:	33 c1       	rjmp	.+614    	; 0x1658 <_fpadd_parts+0x28a>
    13f2:	94 30       	cpi	r25, 0x04	; 4
    13f4:	69 f4       	brne	.+26     	; 0x1410 <_fpadd_parts+0x42>
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	09 f0       	breq	.+2      	; 0x13fc <_fpadd_parts+0x2e>
    13fa:	2f c1       	rjmp	.+606    	; 0x165a <_fpadd_parts+0x28c>
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	9c 91       	ld	r25, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	98 17       	cp	r25, r24
    1406:	09 f4       	brne	.+2      	; 0x140a <_fpadd_parts+0x3c>
    1408:	28 c1       	rjmp	.+592    	; 0x165a <_fpadd_parts+0x28c>
    140a:	a9 e3       	ldi	r26, 0x39	; 57
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	25 c1       	rjmp	.+586    	; 0x165a <_fpadd_parts+0x28c>
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	09 f4       	brne	.+2      	; 0x1416 <_fpadd_parts+0x48>
    1414:	21 c1       	rjmp	.+578    	; 0x1658 <_fpadd_parts+0x28a>
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	a9 f4       	brne	.+42     	; 0x1444 <_fpadd_parts+0x76>
    141a:	92 30       	cpi	r25, 0x02	; 2
    141c:	09 f0       	breq	.+2      	; 0x1420 <_fpadd_parts+0x52>
    141e:	1d c1       	rjmp	.+570    	; 0x165a <_fpadd_parts+0x28c>
    1420:	9a 01       	movw	r18, r20
    1422:	ad 01       	movw	r20, r26
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	ea 01       	movw	r28, r20
    1428:	09 90       	ld	r0, Y+
    142a:	ae 01       	movw	r20, r28
    142c:	e9 01       	movw	r28, r18
    142e:	09 92       	st	Y+, r0
    1430:	9e 01       	movw	r18, r28
    1432:	81 50       	subi	r24, 0x01	; 1
    1434:	c1 f7       	brne	.-16     	; 0x1426 <_fpadd_parts+0x58>
    1436:	e2 01       	movw	r28, r4
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	9c 91       	ld	r25, X
    143e:	89 23       	and	r24, r25
    1440:	81 83       	std	Z+1, r24	; 0x01
    1442:	08 c1       	rjmp	.+528    	; 0x1654 <_fpadd_parts+0x286>
    1444:	92 30       	cpi	r25, 0x02	; 2
    1446:	09 f4       	brne	.+2      	; 0x144a <_fpadd_parts+0x7c>
    1448:	07 c1       	rjmp	.+526    	; 0x1658 <_fpadd_parts+0x28a>
    144a:	12 96       	adiw	r26, 0x02	; 2
    144c:	2d 90       	ld	r2, X+
    144e:	3c 90       	ld	r3, X
    1450:	13 97       	sbiw	r26, 0x03	; 3
    1452:	eb 01       	movw	r28, r22
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	14 96       	adiw	r26, 0x04	; 4
    145a:	ad 90       	ld	r10, X+
    145c:	bd 90       	ld	r11, X+
    145e:	cd 90       	ld	r12, X+
    1460:	dc 90       	ld	r13, X
    1462:	17 97       	sbiw	r26, 0x07	; 7
    1464:	ec 80       	ldd	r14, Y+4	; 0x04
    1466:	fd 80       	ldd	r15, Y+5	; 0x05
    1468:	0e 81       	ldd	r16, Y+6	; 0x06
    146a:	1f 81       	ldd	r17, Y+7	; 0x07
    146c:	91 01       	movw	r18, r2
    146e:	28 1b       	sub	r18, r24
    1470:	39 0b       	sbc	r19, r25
    1472:	b9 01       	movw	r22, r18
    1474:	37 ff       	sbrs	r19, 7
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <_fpadd_parts+0xb2>
    1478:	66 27       	eor	r22, r22
    147a:	77 27       	eor	r23, r23
    147c:	62 1b       	sub	r22, r18
    147e:	73 0b       	sbc	r23, r19
    1480:	60 32       	cpi	r22, 0x20	; 32
    1482:	71 05       	cpc	r23, r1
    1484:	0c f0       	brlt	.+2      	; 0x1488 <_fpadd_parts+0xba>
    1486:	61 c0       	rjmp	.+194    	; 0x154a <_fpadd_parts+0x17c>
    1488:	12 16       	cp	r1, r18
    148a:	13 06       	cpc	r1, r19
    148c:	6c f5       	brge	.+90     	; 0x14e8 <_fpadd_parts+0x11a>
    148e:	37 01       	movw	r6, r14
    1490:	48 01       	movw	r8, r16
    1492:	06 2e       	mov	r0, r22
    1494:	04 c0       	rjmp	.+8      	; 0x149e <_fpadd_parts+0xd0>
    1496:	96 94       	lsr	r9
    1498:	87 94       	ror	r8
    149a:	77 94       	ror	r7
    149c:	67 94       	ror	r6
    149e:	0a 94       	dec	r0
    14a0:	d2 f7       	brpl	.-12     	; 0x1496 <_fpadd_parts+0xc8>
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <_fpadd_parts+0xe6>
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	44 1f       	adc	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	6a 95       	dec	r22
    14b6:	d2 f7       	brpl	.-12     	; 0x14ac <_fpadd_parts+0xde>
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	30 40       	sbci	r19, 0x00	; 0
    14bc:	40 40       	sbci	r20, 0x00	; 0
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	2e 21       	and	r18, r14
    14c2:	3f 21       	and	r19, r15
    14c4:	40 23       	and	r20, r16
    14c6:	51 23       	and	r21, r17
    14c8:	21 15       	cp	r18, r1
    14ca:	31 05       	cpc	r19, r1
    14cc:	41 05       	cpc	r20, r1
    14ce:	51 05       	cpc	r21, r1
    14d0:	21 f0       	breq	.+8      	; 0x14da <_fpadd_parts+0x10c>
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	79 01       	movw	r14, r18
    14dc:	8a 01       	movw	r16, r20
    14de:	e6 28       	or	r14, r6
    14e0:	f7 28       	or	r15, r7
    14e2:	08 29       	or	r16, r8
    14e4:	19 29       	or	r17, r9
    14e6:	3c c0       	rjmp	.+120    	; 0x1560 <_fpadd_parts+0x192>
    14e8:	23 2b       	or	r18, r19
    14ea:	d1 f1       	breq	.+116    	; 0x1560 <_fpadd_parts+0x192>
    14ec:	26 0e       	add	r2, r22
    14ee:	37 1e       	adc	r3, r23
    14f0:	35 01       	movw	r6, r10
    14f2:	46 01       	movw	r8, r12
    14f4:	06 2e       	mov	r0, r22
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <_fpadd_parts+0x132>
    14f8:	96 94       	lsr	r9
    14fa:	87 94       	ror	r8
    14fc:	77 94       	ror	r7
    14fe:	67 94       	ror	r6
    1500:	0a 94       	dec	r0
    1502:	d2 f7       	brpl	.-12     	; 0x14f8 <_fpadd_parts+0x12a>
    1504:	21 e0       	ldi	r18, 0x01	; 1
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <_fpadd_parts+0x148>
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	44 1f       	adc	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	6a 95       	dec	r22
    1518:	d2 f7       	brpl	.-12     	; 0x150e <_fpadd_parts+0x140>
    151a:	21 50       	subi	r18, 0x01	; 1
    151c:	30 40       	sbci	r19, 0x00	; 0
    151e:	40 40       	sbci	r20, 0x00	; 0
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	2a 21       	and	r18, r10
    1524:	3b 21       	and	r19, r11
    1526:	4c 21       	and	r20, r12
    1528:	5d 21       	and	r21, r13
    152a:	21 15       	cp	r18, r1
    152c:	31 05       	cpc	r19, r1
    152e:	41 05       	cpc	r20, r1
    1530:	51 05       	cpc	r21, r1
    1532:	21 f0       	breq	.+8      	; 0x153c <_fpadd_parts+0x16e>
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	59 01       	movw	r10, r18
    153e:	6a 01       	movw	r12, r20
    1540:	a6 28       	or	r10, r6
    1542:	b7 28       	or	r11, r7
    1544:	c8 28       	or	r12, r8
    1546:	d9 28       	or	r13, r9
    1548:	0b c0       	rjmp	.+22     	; 0x1560 <_fpadd_parts+0x192>
    154a:	82 15       	cp	r24, r2
    154c:	93 05       	cpc	r25, r3
    154e:	2c f0       	brlt	.+10     	; 0x155a <_fpadd_parts+0x18c>
    1550:	1c 01       	movw	r2, r24
    1552:	aa 24       	eor	r10, r10
    1554:	bb 24       	eor	r11, r11
    1556:	65 01       	movw	r12, r10
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <_fpadd_parts+0x192>
    155a:	ee 24       	eor	r14, r14
    155c:	ff 24       	eor	r15, r15
    155e:	87 01       	movw	r16, r14
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	9c 91       	ld	r25, X
    1564:	d2 01       	movw	r26, r4
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	8c 91       	ld	r24, X
    156a:	98 17       	cp	r25, r24
    156c:	09 f4       	brne	.+2      	; 0x1570 <_fpadd_parts+0x1a2>
    156e:	45 c0       	rjmp	.+138    	; 0x15fa <_fpadd_parts+0x22c>
    1570:	99 23       	and	r25, r25
    1572:	39 f0       	breq	.+14     	; 0x1582 <_fpadd_parts+0x1b4>
    1574:	a8 01       	movw	r20, r16
    1576:	97 01       	movw	r18, r14
    1578:	2a 19       	sub	r18, r10
    157a:	3b 09       	sbc	r19, r11
    157c:	4c 09       	sbc	r20, r12
    157e:	5d 09       	sbc	r21, r13
    1580:	06 c0       	rjmp	.+12     	; 0x158e <_fpadd_parts+0x1c0>
    1582:	a6 01       	movw	r20, r12
    1584:	95 01       	movw	r18, r10
    1586:	2e 19       	sub	r18, r14
    1588:	3f 09       	sbc	r19, r15
    158a:	40 0b       	sbc	r20, r16
    158c:	51 0b       	sbc	r21, r17
    158e:	57 fd       	sbrc	r21, 7
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <_fpadd_parts+0x1d4>
    1592:	11 82       	std	Z+1, r1	; 0x01
    1594:	33 82       	std	Z+3, r3	; 0x03
    1596:	22 82       	std	Z+2, r2	; 0x02
    1598:	24 83       	std	Z+4, r18	; 0x04
    159a:	35 83       	std	Z+5, r19	; 0x05
    159c:	46 83       	std	Z+6, r20	; 0x06
    159e:	57 83       	std	Z+7, r21	; 0x07
    15a0:	1d c0       	rjmp	.+58     	; 0x15dc <_fpadd_parts+0x20e>
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	81 83       	std	Z+1, r24	; 0x01
    15a6:	33 82       	std	Z+3, r3	; 0x03
    15a8:	22 82       	std	Z+2, r2	; 0x02
    15aa:	88 27       	eor	r24, r24
    15ac:	99 27       	eor	r25, r25
    15ae:	dc 01       	movw	r26, r24
    15b0:	82 1b       	sub	r24, r18
    15b2:	93 0b       	sbc	r25, r19
    15b4:	a4 0b       	sbc	r26, r20
    15b6:	b5 0b       	sbc	r27, r21
    15b8:	84 83       	std	Z+4, r24	; 0x04
    15ba:	95 83       	std	Z+5, r25	; 0x05
    15bc:	a6 83       	std	Z+6, r26	; 0x06
    15be:	b7 83       	std	Z+7, r27	; 0x07
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <_fpadd_parts+0x20e>
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	44 1f       	adc	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	24 83       	std	Z+4, r18	; 0x04
    15cc:	35 83       	std	Z+5, r19	; 0x05
    15ce:	46 83       	std	Z+6, r20	; 0x06
    15d0:	57 83       	std	Z+7, r21	; 0x07
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	93 83       	std	Z+3, r25	; 0x03
    15da:	82 83       	std	Z+2, r24	; 0x02
    15dc:	24 81       	ldd	r18, Z+4	; 0x04
    15de:	35 81       	ldd	r19, Z+5	; 0x05
    15e0:	46 81       	ldd	r20, Z+6	; 0x06
    15e2:	57 81       	ldd	r21, Z+7	; 0x07
    15e4:	da 01       	movw	r26, r20
    15e6:	c9 01       	movw	r24, r18
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	a1 09       	sbc	r26, r1
    15ec:	b1 09       	sbc	r27, r1
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	af 4f       	sbci	r26, 0xFF	; 255
    15f4:	bf 43       	sbci	r27, 0x3F	; 63
    15f6:	28 f3       	brcs	.-54     	; 0x15c2 <_fpadd_parts+0x1f4>
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <_fpadd_parts+0x242>
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	33 82       	std	Z+3, r3	; 0x03
    15fe:	22 82       	std	Z+2, r2	; 0x02
    1600:	ea 0c       	add	r14, r10
    1602:	fb 1c       	adc	r15, r11
    1604:	0c 1d       	adc	r16, r12
    1606:	1d 1d       	adc	r17, r13
    1608:	e4 82       	std	Z+4, r14	; 0x04
    160a:	f5 82       	std	Z+5, r15	; 0x05
    160c:	06 83       	std	Z+6, r16	; 0x06
    160e:	17 83       	std	Z+7, r17	; 0x07
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	80 83       	st	Z, r24
    1614:	24 81       	ldd	r18, Z+4	; 0x04
    1616:	35 81       	ldd	r19, Z+5	; 0x05
    1618:	46 81       	ldd	r20, Z+6	; 0x06
    161a:	57 81       	ldd	r21, Z+7	; 0x07
    161c:	57 ff       	sbrs	r21, 7
    161e:	1a c0       	rjmp	.+52     	; 0x1654 <_fpadd_parts+0x286>
    1620:	c9 01       	movw	r24, r18
    1622:	aa 27       	eor	r26, r26
    1624:	97 fd       	sbrc	r25, 7
    1626:	a0 95       	com	r26
    1628:	ba 2f       	mov	r27, r26
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	a0 70       	andi	r26, 0x00	; 0
    1630:	b0 70       	andi	r27, 0x00	; 0
    1632:	56 95       	lsr	r21
    1634:	47 95       	ror	r20
    1636:	37 95       	ror	r19
    1638:	27 95       	ror	r18
    163a:	82 2b       	or	r24, r18
    163c:	93 2b       	or	r25, r19
    163e:	a4 2b       	or	r26, r20
    1640:	b5 2b       	or	r27, r21
    1642:	84 83       	std	Z+4, r24	; 0x04
    1644:	95 83       	std	Z+5, r25	; 0x05
    1646:	a6 83       	std	Z+6, r26	; 0x06
    1648:	b7 83       	std	Z+7, r27	; 0x07
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	93 83       	std	Z+3, r25	; 0x03
    1652:	82 83       	std	Z+2, r24	; 0x02
    1654:	df 01       	movw	r26, r30
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_fpadd_parts+0x28c>
    1658:	d2 01       	movw	r26, r4
    165a:	cd 01       	movw	r24, r26
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	e2 e1       	ldi	r30, 0x12	; 18
    1662:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__>

00001666 <__subsf3>:
    1666:	a0 e2       	ldi	r26, 0x20	; 32
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__prologue_saves__+0x18>
    1672:	69 83       	std	Y+1, r22	; 0x01
    1674:	7a 83       	std	Y+2, r23	; 0x02
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	4f 83       	std	Y+7, r20	; 0x07
    1680:	58 87       	std	Y+8, r21	; 0x08
    1682:	e9 e0       	ldi	r30, 0x09	; 9
    1684:	ee 2e       	mov	r14, r30
    1686:	f1 2c       	mov	r15, r1
    1688:	ec 0e       	add	r14, r28
    168a:	fd 1e       	adc	r15, r29
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	b7 01       	movw	r22, r14
    1692:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1696:	8e 01       	movw	r16, r28
    1698:	0f 5e       	subi	r16, 0xEF	; 239
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	ce 01       	movw	r24, r28
    169e:	05 96       	adiw	r24, 0x05	; 5
    16a0:	b8 01       	movw	r22, r16
    16a2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    16a6:	8a 89       	ldd	r24, Y+18	; 0x12
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	89 27       	eor	r24, r25
    16ac:	8a 8b       	std	Y+18, r24	; 0x12
    16ae:	c7 01       	movw	r24, r14
    16b0:	b8 01       	movw	r22, r16
    16b2:	ae 01       	movw	r20, r28
    16b4:	47 5e       	subi	r20, 0xE7	; 231
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_fpadd_parts>
    16bc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    16c0:	a0 96       	adiw	r28, 0x20	; 32
    16c2:	e6 e0       	ldi	r30, 0x06	; 6
    16c4:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

000016c8 <__addsf3>:
    16c8:	a0 e2       	ldi	r26, 0x20	; 32
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ea e6       	ldi	r30, 0x6A	; 106
    16ce:	fb e0       	ldi	r31, 0x0B	; 11
    16d0:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__prologue_saves__+0x18>
    16d4:	69 83       	std	Y+1, r22	; 0x01
    16d6:	7a 83       	std	Y+2, r23	; 0x02
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	2d 83       	std	Y+5, r18	; 0x05
    16de:	3e 83       	std	Y+6, r19	; 0x06
    16e0:	4f 83       	std	Y+7, r20	; 0x07
    16e2:	58 87       	std	Y+8, r21	; 0x08
    16e4:	f9 e0       	ldi	r31, 0x09	; 9
    16e6:	ef 2e       	mov	r14, r31
    16e8:	f1 2c       	mov	r15, r1
    16ea:	ec 0e       	add	r14, r28
    16ec:	fd 1e       	adc	r15, r29
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	b7 01       	movw	r22, r14
    16f4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    16f8:	8e 01       	movw	r16, r28
    16fa:	0f 5e       	subi	r16, 0xEF	; 239
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	ce 01       	movw	r24, r28
    1700:	05 96       	adiw	r24, 0x05	; 5
    1702:	b8 01       	movw	r22, r16
    1704:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1708:	c7 01       	movw	r24, r14
    170a:	b8 01       	movw	r22, r16
    170c:	ae 01       	movw	r20, r28
    170e:	47 5e       	subi	r20, 0xE7	; 231
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_fpadd_parts>
    1716:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    171a:	a0 96       	adiw	r28, 0x20	; 32
    171c:	e6 e0       	ldi	r30, 0x06	; 6
    171e:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

00001722 <__mulsf3>:
    1722:	a0 e2       	ldi	r26, 0x20	; 32
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e9       	ldi	r30, 0x97	; 151
    1728:	fb e0       	ldi	r31, 0x0B	; 11
    172a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__>
    172e:	69 83       	std	Y+1, r22	; 0x01
    1730:	7a 83       	std	Y+2, r23	; 0x02
    1732:	8b 83       	std	Y+3, r24	; 0x03
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	2d 83       	std	Y+5, r18	; 0x05
    1738:	3e 83       	std	Y+6, r19	; 0x06
    173a:	4f 83       	std	Y+7, r20	; 0x07
    173c:	58 87       	std	Y+8, r21	; 0x08
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	be 01       	movw	r22, r28
    1744:	67 5f       	subi	r22, 0xF7	; 247
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    174c:	ce 01       	movw	r24, r28
    174e:	05 96       	adiw	r24, 0x05	; 5
    1750:	be 01       	movw	r22, r28
    1752:	6f 5e       	subi	r22, 0xEF	; 239
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    175a:	99 85       	ldd	r25, Y+9	; 0x09
    175c:	92 30       	cpi	r25, 0x02	; 2
    175e:	88 f0       	brcs	.+34     	; 0x1782 <__mulsf3+0x60>
    1760:	89 89       	ldd	r24, Y+17	; 0x11
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	c8 f0       	brcs	.+50     	; 0x1798 <__mulsf3+0x76>
    1766:	94 30       	cpi	r25, 0x04	; 4
    1768:	19 f4       	brne	.+6      	; 0x1770 <__mulsf3+0x4e>
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	51 f4       	brne	.+20     	; 0x1782 <__mulsf3+0x60>
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <__mulsf3+0x56>
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	29 f4       	brne	.+10     	; 0x177e <__mulsf3+0x5c>
    1774:	92 30       	cpi	r25, 0x02	; 2
    1776:	81 f4       	brne	.+32     	; 0x1798 <__mulsf3+0x76>
    1778:	89 e3       	ldi	r24, 0x39	; 57
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	c6 c0       	rjmp	.+396    	; 0x190a <__mulsf3+0x1e8>
    177e:	92 30       	cpi	r25, 0x02	; 2
    1780:	49 f4       	brne	.+18     	; 0x1794 <__mulsf3+0x72>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	8a 89       	ldd	r24, Y+18	; 0x12
    1788:	98 13       	cpse	r25, r24
    178a:	21 e0       	ldi	r18, 0x01	; 1
    178c:	2a 87       	std	Y+10, r18	; 0x0a
    178e:	ce 01       	movw	r24, r28
    1790:	09 96       	adiw	r24, 0x09	; 9
    1792:	bb c0       	rjmp	.+374    	; 0x190a <__mulsf3+0x1e8>
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	49 f4       	brne	.+18     	; 0x17aa <__mulsf3+0x88>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	8a 89       	ldd	r24, Y+18	; 0x12
    179e:	98 13       	cpse	r25, r24
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	2a 8b       	std	Y+18, r18	; 0x12
    17a4:	ce 01       	movw	r24, r28
    17a6:	41 96       	adiw	r24, 0x11	; 17
    17a8:	b0 c0       	rjmp	.+352    	; 0x190a <__mulsf3+0x1e8>
    17aa:	2d 84       	ldd	r2, Y+13	; 0x0d
    17ac:	3e 84       	ldd	r3, Y+14	; 0x0e
    17ae:	4f 84       	ldd	r4, Y+15	; 0x0f
    17b0:	58 88       	ldd	r5, Y+16	; 0x10
    17b2:	6d 88       	ldd	r6, Y+21	; 0x15
    17b4:	7e 88       	ldd	r7, Y+22	; 0x16
    17b6:	8f 88       	ldd	r8, Y+23	; 0x17
    17b8:	98 8c       	ldd	r9, Y+24	; 0x18
    17ba:	ee 24       	eor	r14, r14
    17bc:	ff 24       	eor	r15, r15
    17be:	87 01       	movw	r16, r14
    17c0:	aa 24       	eor	r10, r10
    17c2:	bb 24       	eor	r11, r11
    17c4:	65 01       	movw	r12, r10
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	e0 e0       	ldi	r30, 0x00	; 0
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	c1 01       	movw	r24, r2
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	89 2b       	or	r24, r25
    17da:	e9 f0       	breq	.+58     	; 0x1816 <__mulsf3+0xf4>
    17dc:	e6 0c       	add	r14, r6
    17de:	f7 1c       	adc	r15, r7
    17e0:	08 1d       	adc	r16, r8
    17e2:	19 1d       	adc	r17, r9
    17e4:	9a 01       	movw	r18, r20
    17e6:	ab 01       	movw	r20, r22
    17e8:	2a 0d       	add	r18, r10
    17ea:	3b 1d       	adc	r19, r11
    17ec:	4c 1d       	adc	r20, r12
    17ee:	5d 1d       	adc	r21, r13
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e6 14       	cp	r14, r6
    17fa:	f7 04       	cpc	r15, r7
    17fc:	08 05       	cpc	r16, r8
    17fe:	19 05       	cpc	r17, r9
    1800:	20 f4       	brcc	.+8      	; 0x180a <__mulsf3+0xe8>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ba 01       	movw	r22, r20
    180c:	a9 01       	movw	r20, r18
    180e:	48 0f       	add	r20, r24
    1810:	59 1f       	adc	r21, r25
    1812:	6a 1f       	adc	r22, r26
    1814:	7b 1f       	adc	r23, r27
    1816:	aa 0c       	add	r10, r10
    1818:	bb 1c       	adc	r11, r11
    181a:	cc 1c       	adc	r12, r12
    181c:	dd 1c       	adc	r13, r13
    181e:	97 fe       	sbrs	r9, 7
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <__mulsf3+0x110>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	a8 2a       	or	r10, r24
    182c:	b9 2a       	or	r11, r25
    182e:	ca 2a       	or	r12, r26
    1830:	db 2a       	or	r13, r27
    1832:	31 96       	adiw	r30, 0x01	; 1
    1834:	e0 32       	cpi	r30, 0x20	; 32
    1836:	f1 05       	cpc	r31, r1
    1838:	49 f0       	breq	.+18     	; 0x184c <__mulsf3+0x12a>
    183a:	66 0c       	add	r6, r6
    183c:	77 1c       	adc	r7, r7
    183e:	88 1c       	adc	r8, r8
    1840:	99 1c       	adc	r9, r9
    1842:	56 94       	lsr	r5
    1844:	47 94       	ror	r4
    1846:	37 94       	ror	r3
    1848:	27 94       	ror	r2
    184a:	c3 cf       	rjmp	.-122    	; 0x17d2 <__mulsf3+0xb0>
    184c:	fa 85       	ldd	r31, Y+10	; 0x0a
    184e:	ea 89       	ldd	r30, Y+18	; 0x12
    1850:	2b 89       	ldd	r18, Y+19	; 0x13
    1852:	3c 89       	ldd	r19, Y+20	; 0x14
    1854:	8b 85       	ldd	r24, Y+11	; 0x0b
    1856:	9c 85       	ldd	r25, Y+12	; 0x0c
    1858:	28 0f       	add	r18, r24
    185a:	39 1f       	adc	r19, r25
    185c:	2e 5f       	subi	r18, 0xFE	; 254
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	17 c0       	rjmp	.+46     	; 0x1890 <__mulsf3+0x16e>
    1862:	ca 01       	movw	r24, r20
    1864:	81 70       	andi	r24, 0x01	; 1
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	89 2b       	or	r24, r25
    186a:	61 f0       	breq	.+24     	; 0x1884 <__mulsf3+0x162>
    186c:	16 95       	lsr	r17
    186e:	07 95       	ror	r16
    1870:	f7 94       	ror	r15
    1872:	e7 94       	ror	r14
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e0       	ldi	r26, 0x00	; 0
    187a:	b0 e8       	ldi	r27, 0x80	; 128
    187c:	e8 2a       	or	r14, r24
    187e:	f9 2a       	or	r15, r25
    1880:	0a 2b       	or	r16, r26
    1882:	1b 2b       	or	r17, r27
    1884:	76 95       	lsr	r23
    1886:	67 95       	ror	r22
    1888:	57 95       	ror	r21
    188a:	47 95       	ror	r20
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	77 fd       	sbrc	r23, 7
    1892:	e7 cf       	rjmp	.-50     	; 0x1862 <__mulsf3+0x140>
    1894:	0c c0       	rjmp	.+24     	; 0x18ae <__mulsf3+0x18c>
    1896:	44 0f       	add	r20, r20
    1898:	55 1f       	adc	r21, r21
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	17 fd       	sbrc	r17, 7
    18a0:	41 60       	ori	r20, 0x01	; 1
    18a2:	ee 0c       	add	r14, r14
    18a4:	ff 1c       	adc	r15, r15
    18a6:	00 1f       	adc	r16, r16
    18a8:	11 1f       	adc	r17, r17
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	30 40       	sbci	r19, 0x00	; 0
    18ae:	40 30       	cpi	r20, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	59 07       	cpc	r21, r25
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	69 07       	cpc	r22, r25
    18b8:	90 e4       	ldi	r25, 0x40	; 64
    18ba:	79 07       	cpc	r23, r25
    18bc:	60 f3       	brcs	.-40     	; 0x1896 <__mulsf3+0x174>
    18be:	2b 8f       	std	Y+27, r18	; 0x1b
    18c0:	3c 8f       	std	Y+28, r19	; 0x1c
    18c2:	db 01       	movw	r26, r22
    18c4:	ca 01       	movw	r24, r20
    18c6:	8f 77       	andi	r24, 0x7F	; 127
    18c8:	90 70       	andi	r25, 0x00	; 0
    18ca:	a0 70       	andi	r26, 0x00	; 0
    18cc:	b0 70       	andi	r27, 0x00	; 0
    18ce:	80 34       	cpi	r24, 0x40	; 64
    18d0:	91 05       	cpc	r25, r1
    18d2:	a1 05       	cpc	r26, r1
    18d4:	b1 05       	cpc	r27, r1
    18d6:	61 f4       	brne	.+24     	; 0x18f0 <__mulsf3+0x1ce>
    18d8:	47 fd       	sbrc	r20, 7
    18da:	0a c0       	rjmp	.+20     	; 0x18f0 <__mulsf3+0x1ce>
    18dc:	e1 14       	cp	r14, r1
    18de:	f1 04       	cpc	r15, r1
    18e0:	01 05       	cpc	r16, r1
    18e2:	11 05       	cpc	r17, r1
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <__mulsf3+0x1ce>
    18e6:	40 5c       	subi	r20, 0xC0	; 192
    18e8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ea:	6f 4f       	sbci	r22, 0xFF	; 255
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	40 78       	andi	r20, 0x80	; 128
    18f0:	1a 8e       	std	Y+26, r1	; 0x1a
    18f2:	fe 17       	cp	r31, r30
    18f4:	11 f0       	breq	.+4      	; 0x18fa <__mulsf3+0x1d8>
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8a 8f       	std	Y+26, r24	; 0x1a
    18fa:	4d 8f       	std	Y+29, r20	; 0x1d
    18fc:	5e 8f       	std	Y+30, r21	; 0x1e
    18fe:	6f 8f       	std	Y+31, r22	; 0x1f
    1900:	78 a3       	std	Y+32, r23	; 0x20
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	89 8f       	std	Y+25, r24	; 0x19
    1906:	ce 01       	movw	r24, r28
    1908:	49 96       	adiw	r24, 0x19	; 25
    190a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    190e:	a0 96       	adiw	r28, 0x20	; 32
    1910:	e2 e1       	ldi	r30, 0x12	; 18
    1912:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__>

00001916 <__divsf3>:
    1916:	a8 e1       	ldi	r26, 0x18	; 24
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e1 e9       	ldi	r30, 0x91	; 145
    191c:	fc e0       	ldi	r31, 0x0C	; 12
    191e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x10>
    1922:	69 83       	std	Y+1, r22	; 0x01
    1924:	7a 83       	std	Y+2, r23	; 0x02
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	2d 83       	std	Y+5, r18	; 0x05
    192c:	3e 83       	std	Y+6, r19	; 0x06
    192e:	4f 83       	std	Y+7, r20	; 0x07
    1930:	58 87       	std	Y+8, r21	; 0x08
    1932:	b9 e0       	ldi	r27, 0x09	; 9
    1934:	eb 2e       	mov	r14, r27
    1936:	f1 2c       	mov	r15, r1
    1938:	ec 0e       	add	r14, r28
    193a:	fd 1e       	adc	r15, r29
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	b7 01       	movw	r22, r14
    1942:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1946:	8e 01       	movw	r16, r28
    1948:	0f 5e       	subi	r16, 0xEF	; 239
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	ce 01       	movw	r24, r28
    194e:	05 96       	adiw	r24, 0x05	; 5
    1950:	b8 01       	movw	r22, r16
    1952:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1956:	29 85       	ldd	r18, Y+9	; 0x09
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	08 f4       	brcc	.+2      	; 0x195e <__divsf3+0x48>
    195c:	7e c0       	rjmp	.+252    	; 0x1a5a <__divsf3+0x144>
    195e:	39 89       	ldd	r19, Y+17	; 0x11
    1960:	32 30       	cpi	r19, 0x02	; 2
    1962:	10 f4       	brcc	.+4      	; 0x1968 <__divsf3+0x52>
    1964:	b8 01       	movw	r22, r16
    1966:	7c c0       	rjmp	.+248    	; 0x1a60 <__divsf3+0x14a>
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	89 27       	eor	r24, r25
    196e:	8a 87       	std	Y+10, r24	; 0x0a
    1970:	24 30       	cpi	r18, 0x04	; 4
    1972:	11 f0       	breq	.+4      	; 0x1978 <__divsf3+0x62>
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 f4       	brne	.+12     	; 0x1984 <__divsf3+0x6e>
    1978:	23 17       	cp	r18, r19
    197a:	09 f0       	breq	.+2      	; 0x197e <__divsf3+0x68>
    197c:	6e c0       	rjmp	.+220    	; 0x1a5a <__divsf3+0x144>
    197e:	69 e3       	ldi	r22, 0x39	; 57
    1980:	71 e0       	ldi	r23, 0x01	; 1
    1982:	6e c0       	rjmp	.+220    	; 0x1a60 <__divsf3+0x14a>
    1984:	34 30       	cpi	r19, 0x04	; 4
    1986:	39 f4       	brne	.+14     	; 0x1996 <__divsf3+0x80>
    1988:	1d 86       	std	Y+13, r1	; 0x0d
    198a:	1e 86       	std	Y+14, r1	; 0x0e
    198c:	1f 86       	std	Y+15, r1	; 0x0f
    198e:	18 8a       	std	Y+16, r1	; 0x10
    1990:	1c 86       	std	Y+12, r1	; 0x0c
    1992:	1b 86       	std	Y+11, r1	; 0x0b
    1994:	04 c0       	rjmp	.+8      	; 0x199e <__divsf3+0x88>
    1996:	32 30       	cpi	r19, 0x02	; 2
    1998:	21 f4       	brne	.+8      	; 0x19a2 <__divsf3+0x8c>
    199a:	84 e0       	ldi	r24, 0x04	; 4
    199c:	89 87       	std	Y+9, r24	; 0x09
    199e:	b7 01       	movw	r22, r14
    19a0:	5f c0       	rjmp	.+190    	; 0x1a60 <__divsf3+0x14a>
    19a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    19a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    19a6:	8b 89       	ldd	r24, Y+19	; 0x13
    19a8:	9c 89       	ldd	r25, Y+20	; 0x14
    19aa:	28 1b       	sub	r18, r24
    19ac:	39 0b       	sbc	r19, r25
    19ae:	3c 87       	std	Y+12, r19	; 0x0c
    19b0:	2b 87       	std	Y+11, r18	; 0x0b
    19b2:	ed 84       	ldd	r14, Y+13	; 0x0d
    19b4:	fe 84       	ldd	r15, Y+14	; 0x0e
    19b6:	0f 85       	ldd	r16, Y+15	; 0x0f
    19b8:	18 89       	ldd	r17, Y+16	; 0x10
    19ba:	ad 88       	ldd	r10, Y+21	; 0x15
    19bc:	be 88       	ldd	r11, Y+22	; 0x16
    19be:	cf 88       	ldd	r12, Y+23	; 0x17
    19c0:	d8 8c       	ldd	r13, Y+24	; 0x18
    19c2:	ea 14       	cp	r14, r10
    19c4:	fb 04       	cpc	r15, r11
    19c6:	0c 05       	cpc	r16, r12
    19c8:	1d 05       	cpc	r17, r13
    19ca:	40 f4       	brcc	.+16     	; 0x19dc <__divsf3+0xc6>
    19cc:	ee 0c       	add	r14, r14
    19ce:	ff 1c       	adc	r15, r15
    19d0:	00 1f       	adc	r16, r16
    19d2:	11 1f       	adc	r17, r17
    19d4:	21 50       	subi	r18, 0x01	; 1
    19d6:	30 40       	sbci	r19, 0x00	; 0
    19d8:	3c 87       	std	Y+12, r19	; 0x0c
    19da:	2b 87       	std	Y+11, r18	; 0x0b
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	ea 14       	cp	r14, r10
    19f2:	fb 04       	cpc	r15, r11
    19f4:	0c 05       	cpc	r16, r12
    19f6:	1d 05       	cpc	r17, r13
    19f8:	40 f0       	brcs	.+16     	; 0x1a0a <__divsf3+0xf4>
    19fa:	28 2b       	or	r18, r24
    19fc:	39 2b       	or	r19, r25
    19fe:	4a 2b       	or	r20, r26
    1a00:	5b 2b       	or	r21, r27
    1a02:	ea 18       	sub	r14, r10
    1a04:	fb 08       	sbc	r15, r11
    1a06:	0c 09       	sbc	r16, r12
    1a08:	1d 09       	sbc	r17, r13
    1a0a:	b6 95       	lsr	r27
    1a0c:	a7 95       	ror	r26
    1a0e:	97 95       	ror	r25
    1a10:	87 95       	ror	r24
    1a12:	ee 0c       	add	r14, r14
    1a14:	ff 1c       	adc	r15, r15
    1a16:	00 1f       	adc	r16, r16
    1a18:	11 1f       	adc	r17, r17
    1a1a:	6f 5f       	subi	r22, 0xFF	; 255
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	6f 31       	cpi	r22, 0x1F	; 31
    1a20:	71 05       	cpc	r23, r1
    1a22:	31 f7       	brne	.-52     	; 0x19f0 <__divsf3+0xda>
    1a24:	da 01       	movw	r26, r20
    1a26:	c9 01       	movw	r24, r18
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	a0 70       	andi	r26, 0x00	; 0
    1a2e:	b0 70       	andi	r27, 0x00	; 0
    1a30:	80 34       	cpi	r24, 0x40	; 64
    1a32:	91 05       	cpc	r25, r1
    1a34:	a1 05       	cpc	r26, r1
    1a36:	b1 05       	cpc	r27, r1
    1a38:	61 f4       	brne	.+24     	; 0x1a52 <__divsf3+0x13c>
    1a3a:	27 fd       	sbrc	r18, 7
    1a3c:	0a c0       	rjmp	.+20     	; 0x1a52 <__divsf3+0x13c>
    1a3e:	e1 14       	cp	r14, r1
    1a40:	f1 04       	cpc	r15, r1
    1a42:	01 05       	cpc	r16, r1
    1a44:	11 05       	cpc	r17, r1
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__divsf3+0x13c>
    1a48:	20 5c       	subi	r18, 0xC0	; 192
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	20 78       	andi	r18, 0x80	; 128
    1a52:	2d 87       	std	Y+13, r18	; 0x0d
    1a54:	3e 87       	std	Y+14, r19	; 0x0e
    1a56:	4f 87       	std	Y+15, r20	; 0x0f
    1a58:	58 8b       	std	Y+16, r21	; 0x10
    1a5a:	be 01       	movw	r22, r28
    1a5c:	67 5f       	subi	r22, 0xF7	; 247
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	cb 01       	movw	r24, r22
    1a62:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1a66:	68 96       	adiw	r28, 0x18	; 24
    1a68:	ea e0       	ldi	r30, 0x0A	; 10
    1a6a:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__epilogue_restores__+0x10>

00001a6e <__gtsf2>:
    1a6e:	a8 e1       	ldi	r26, 0x18	; 24
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e3       	ldi	r30, 0x3D	; 61
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__prologue_saves__+0x18>
    1a7a:	69 83       	std	Y+1, r22	; 0x01
    1a7c:	7a 83       	std	Y+2, r23	; 0x02
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	2d 83       	std	Y+5, r18	; 0x05
    1a84:	3e 83       	std	Y+6, r19	; 0x06
    1a86:	4f 83       	std	Y+7, r20	; 0x07
    1a88:	58 87       	std	Y+8, r21	; 0x08
    1a8a:	89 e0       	ldi	r24, 0x09	; 9
    1a8c:	e8 2e       	mov	r14, r24
    1a8e:	f1 2c       	mov	r15, r1
    1a90:	ec 0e       	add	r14, r28
    1a92:	fd 1e       	adc	r15, r29
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	b7 01       	movw	r22, r14
    1a9a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	0f 5e       	subi	r16, 0xEF	; 239
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	05 96       	adiw	r24, 0x05	; 5
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	40 f0       	brcs	.+16     	; 0x1ac4 <__gtsf2+0x56>
    1ab4:	89 89       	ldd	r24, Y+17	; 0x11
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	28 f0       	brcs	.+10     	; 0x1ac4 <__gtsf2+0x56>
    1aba:	c7 01       	movw	r24, r14
    1abc:	b8 01       	movw	r22, r16
    1abe:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fpcmp_parts_f>
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <__gtsf2+0x58>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	68 96       	adiw	r28, 0x18	; 24
    1ac8:	e6 e0       	ldi	r30, 0x06	; 6
    1aca:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

00001ace <__ltsf2>:
    1ace:	a8 e1       	ldi	r26, 0x18	; 24
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ed e6       	ldi	r30, 0x6D	; 109
    1ad4:	fd e0       	ldi	r31, 0x0D	; 13
    1ad6:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__prologue_saves__+0x18>
    1ada:	69 83       	std	Y+1, r22	; 0x01
    1adc:	7a 83       	std	Y+2, r23	; 0x02
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	3e 83       	std	Y+6, r19	; 0x06
    1ae6:	4f 83       	std	Y+7, r20	; 0x07
    1ae8:	58 87       	std	Y+8, r21	; 0x08
    1aea:	89 e0       	ldi	r24, 0x09	; 9
    1aec:	e8 2e       	mov	r14, r24
    1aee:	f1 2c       	mov	r15, r1
    1af0:	ec 0e       	add	r14, r28
    1af2:	fd 1e       	adc	r15, r29
    1af4:	ce 01       	movw	r24, r28
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	b7 01       	movw	r22, r14
    1afa:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1afe:	8e 01       	movw	r16, r28
    1b00:	0f 5e       	subi	r16, 0xEF	; 239
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	ce 01       	movw	r24, r28
    1b06:	05 96       	adiw	r24, 0x05	; 5
    1b08:	b8 01       	movw	r22, r16
    1b0a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	40 f0       	brcs	.+16     	; 0x1b24 <__ltsf2+0x56>
    1b14:	89 89       	ldd	r24, Y+17	; 0x11
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	28 f0       	brcs	.+10     	; 0x1b24 <__ltsf2+0x56>
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fpcmp_parts_f>
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <__ltsf2+0x58>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	68 96       	adiw	r28, 0x18	; 24
    1b28:	e6 e0       	ldi	r30, 0x06	; 6
    1b2a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

00001b2e <__lesf2>:
    1b2e:	a8 e1       	ldi	r26, 0x18	; 24
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ed e9       	ldi	r30, 0x9D	; 157
    1b34:	fd e0       	ldi	r31, 0x0D	; 13
    1b36:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__prologue_saves__+0x18>
    1b3a:	69 83       	std	Y+1, r22	; 0x01
    1b3c:	7a 83       	std	Y+2, r23	; 0x02
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	2d 83       	std	Y+5, r18	; 0x05
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	4f 83       	std	Y+7, r20	; 0x07
    1b48:	58 87       	std	Y+8, r21	; 0x08
    1b4a:	89 e0       	ldi	r24, 0x09	; 9
    1b4c:	e8 2e       	mov	r14, r24
    1b4e:	f1 2c       	mov	r15, r1
    1b50:	ec 0e       	add	r14, r28
    1b52:	fd 1e       	adc	r15, r29
    1b54:	ce 01       	movw	r24, r28
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	b7 01       	movw	r22, r14
    1b5a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1b5e:	8e 01       	movw	r16, r28
    1b60:	0f 5e       	subi	r16, 0xEF	; 239
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	ce 01       	movw	r24, r28
    1b66:	05 96       	adiw	r24, 0x05	; 5
    1b68:	b8 01       	movw	r22, r16
    1b6a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__unpack_f>
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	40 f0       	brcs	.+16     	; 0x1b84 <__lesf2+0x56>
    1b74:	89 89       	ldd	r24, Y+17	; 0x11
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	28 f0       	brcs	.+10     	; 0x1b84 <__lesf2+0x56>
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b8 01       	movw	r22, r16
    1b7e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fpcmp_parts_f>
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <__lesf2+0x58>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	68 96       	adiw	r28, 0x18	; 24
    1b88:	e6 e0       	ldi	r30, 0x06	; 6
    1b8a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

00001b8e <__floatsisf>:
    1b8e:	a8 e0       	ldi	r26, 0x08	; 8
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ed ec       	ldi	r30, 0xCD	; 205
    1b94:	fd e0       	ldi	r31, 0x0D	; 13
    1b96:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__prologue_saves__+0x12>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	da 01       	movw	r26, r20
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	88 27       	eor	r24, r24
    1ba8:	b7 fd       	sbrc	r27, 7
    1baa:	83 95       	inc	r24
    1bac:	99 27       	eor	r25, r25
    1bae:	aa 27       	eor	r26, r26
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	b8 2e       	mov	r11, r24
    1bb4:	21 15       	cp	r18, r1
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	41 05       	cpc	r20, r1
    1bba:	51 05       	cpc	r21, r1
    1bbc:	19 f4       	brne	.+6      	; 0x1bc4 <__floatsisf+0x36>
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	3a c0       	rjmp	.+116    	; 0x1c38 <__floatsisf+0xaa>
    1bc4:	88 23       	and	r24, r24
    1bc6:	a9 f0       	breq	.+42     	; 0x1bf2 <__floatsisf+0x64>
    1bc8:	20 30       	cpi	r18, 0x00	; 0
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	38 07       	cpc	r19, r24
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	48 07       	cpc	r20, r24
    1bd2:	80 e8       	ldi	r24, 0x80	; 128
    1bd4:	58 07       	cpc	r21, r24
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <__floatsisf+0x54>
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	9f ec       	ldi	r25, 0xCF	; 207
    1be0:	30 c0       	rjmp	.+96     	; 0x1c42 <__floatsisf+0xb4>
    1be2:	ee 24       	eor	r14, r14
    1be4:	ff 24       	eor	r15, r15
    1be6:	87 01       	movw	r16, r14
    1be8:	e2 1a       	sub	r14, r18
    1bea:	f3 0a       	sbc	r15, r19
    1bec:	04 0b       	sbc	r16, r20
    1bee:	15 0b       	sbc	r17, r21
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <__floatsisf+0x68>
    1bf2:	79 01       	movw	r14, r18
    1bf4:	8a 01       	movw	r16, r20
    1bf6:	8e e1       	ldi	r24, 0x1E	; 30
    1bf8:	c8 2e       	mov	r12, r24
    1bfa:	d1 2c       	mov	r13, r1
    1bfc:	dc 82       	std	Y+4, r13	; 0x04
    1bfe:	cb 82       	std	Y+3, r12	; 0x03
    1c00:	ed 82       	std	Y+5, r14	; 0x05
    1c02:	fe 82       	std	Y+6, r15	; 0x06
    1c04:	0f 83       	std	Y+7, r16	; 0x07
    1c06:	18 87       	std	Y+8, r17	; 0x08
    1c08:	c8 01       	movw	r24, r16
    1c0a:	b7 01       	movw	r22, r14
    1c0c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__clzsi2>
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	18 16       	cp	r1, r24
    1c14:	19 06       	cpc	r1, r25
    1c16:	84 f4       	brge	.+32     	; 0x1c38 <__floatsisf+0xaa>
    1c18:	08 2e       	mov	r0, r24
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__floatsisf+0x96>
    1c1c:	ee 0c       	add	r14, r14
    1c1e:	ff 1c       	adc	r15, r15
    1c20:	00 1f       	adc	r16, r16
    1c22:	11 1f       	adc	r17, r17
    1c24:	0a 94       	dec	r0
    1c26:	d2 f7       	brpl	.-12     	; 0x1c1c <__floatsisf+0x8e>
    1c28:	ed 82       	std	Y+5, r14	; 0x05
    1c2a:	fe 82       	std	Y+6, r15	; 0x06
    1c2c:	0f 83       	std	Y+7, r16	; 0x07
    1c2e:	18 87       	std	Y+8, r17	; 0x08
    1c30:	c8 1a       	sub	r12, r24
    1c32:	d9 0a       	sbc	r13, r25
    1c34:	dc 82       	std	Y+4, r13	; 0x04
    1c36:	cb 82       	std	Y+3, r12	; 0x03
    1c38:	ba 82       	std	Y+2, r11	; 0x02
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1c42:	28 96       	adiw	r28, 0x08	; 8
    1c44:	e9 e0       	ldi	r30, 0x09	; 9
    1c46:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__epilogue_restores__+0x12>

00001c4a <__floatunsisf>:
    1c4a:	a8 e0       	ldi	r26, 0x08	; 8
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	eb e2       	ldi	r30, 0x2B	; 43
    1c50:	fe e0       	ldi	r31, 0x0E	; 14
    1c52:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x10>
    1c56:	7b 01       	movw	r14, r22
    1c58:	8c 01       	movw	r16, r24
    1c5a:	61 15       	cp	r22, r1
    1c5c:	71 05       	cpc	r23, r1
    1c5e:	81 05       	cpc	r24, r1
    1c60:	91 05       	cpc	r25, r1
    1c62:	19 f4       	brne	.+6      	; 0x1c6a <__floatunsisf+0x20>
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	60 c0       	rjmp	.+192    	; 0x1d2a <__floatunsisf+0xe0>
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	8e e1       	ldi	r24, 0x1E	; 30
    1c70:	c8 2e       	mov	r12, r24
    1c72:	d1 2c       	mov	r13, r1
    1c74:	dc 82       	std	Y+4, r13	; 0x04
    1c76:	cb 82       	std	Y+3, r12	; 0x03
    1c78:	ed 82       	std	Y+5, r14	; 0x05
    1c7a:	fe 82       	std	Y+6, r15	; 0x06
    1c7c:	0f 83       	std	Y+7, r16	; 0x07
    1c7e:	18 87       	std	Y+8, r17	; 0x08
    1c80:	c8 01       	movw	r24, r16
    1c82:	b7 01       	movw	r22, r14
    1c84:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__clzsi2>
    1c88:	fc 01       	movw	r30, r24
    1c8a:	31 97       	sbiw	r30, 0x01	; 1
    1c8c:	f7 ff       	sbrs	r31, 7
    1c8e:	3b c0       	rjmp	.+118    	; 0x1d06 <__floatunsisf+0xbc>
    1c90:	22 27       	eor	r18, r18
    1c92:	33 27       	eor	r19, r19
    1c94:	2e 1b       	sub	r18, r30
    1c96:	3f 0b       	sbc	r19, r31
    1c98:	57 01       	movw	r10, r14
    1c9a:	68 01       	movw	r12, r16
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <__floatunsisf+0x5e>
    1ca0:	d6 94       	lsr	r13
    1ca2:	c7 94       	ror	r12
    1ca4:	b7 94       	ror	r11
    1ca6:	a7 94       	ror	r10
    1ca8:	0a 94       	dec	r0
    1caa:	d2 f7       	brpl	.-12     	; 0x1ca0 <__floatunsisf+0x56>
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <__floatunsisf+0x7c>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	aa 1f       	adc	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	2a 95       	dec	r18
    1cc8:	d2 f7       	brpl	.-12     	; 0x1cbe <__floatunsisf+0x74>
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	a1 09       	sbc	r26, r1
    1cce:	b1 09       	sbc	r27, r1
    1cd0:	8e 21       	and	r24, r14
    1cd2:	9f 21       	and	r25, r15
    1cd4:	a0 23       	and	r26, r16
    1cd6:	b1 23       	and	r27, r17
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	a1 05       	cpc	r26, r1
    1cdc:	b1 05       	cpc	r27, r1
    1cde:	21 f0       	breq	.+8      	; 0x1ce8 <__floatunsisf+0x9e>
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	4a 29       	or	r20, r10
    1cea:	5b 29       	or	r21, r11
    1cec:	6c 29       	or	r22, r12
    1cee:	7d 29       	or	r23, r13
    1cf0:	4d 83       	std	Y+5, r20	; 0x05
    1cf2:	5e 83       	std	Y+6, r21	; 0x06
    1cf4:	6f 83       	std	Y+7, r22	; 0x07
    1cf6:	78 87       	std	Y+8, r23	; 0x08
    1cf8:	8e e1       	ldi	r24, 0x1E	; 30
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	8e 1b       	sub	r24, r30
    1cfe:	9f 0b       	sbc	r25, r31
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	12 c0       	rjmp	.+36     	; 0x1d2a <__floatunsisf+0xe0>
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	81 f0       	breq	.+32     	; 0x1d2a <__floatunsisf+0xe0>
    1d0a:	0e 2e       	mov	r0, r30
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <__floatunsisf+0xcc>
    1d0e:	ee 0c       	add	r14, r14
    1d10:	ff 1c       	adc	r15, r15
    1d12:	00 1f       	adc	r16, r16
    1d14:	11 1f       	adc	r17, r17
    1d16:	0a 94       	dec	r0
    1d18:	d2 f7       	brpl	.-12     	; 0x1d0e <__floatunsisf+0xc4>
    1d1a:	ed 82       	std	Y+5, r14	; 0x05
    1d1c:	fe 82       	std	Y+6, r15	; 0x06
    1d1e:	0f 83       	std	Y+7, r16	; 0x07
    1d20:	18 87       	std	Y+8, r17	; 0x08
    1d22:	ce 1a       	sub	r12, r30
    1d24:	df 0a       	sbc	r13, r31
    1d26:	dc 82       	std	Y+4, r13	; 0x04
    1d28:	cb 82       	std	Y+3, r12	; 0x03
    1d2a:	1a 82       	std	Y+2, r1	; 0x02
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__pack_f>
    1d34:	28 96       	adiw	r28, 0x08	; 8
    1d36:	ea e0       	ldi	r30, 0x0A	; 10
    1d38:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__epilogue_restores__+0x10>

00001d3c <__clzsi2>:
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	7b 01       	movw	r14, r22
    1d46:	8c 01       	movw	r16, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	e8 16       	cp	r14, r24
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	f8 06       	cpc	r15, r24
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	08 07       	cpc	r16, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	18 07       	cpc	r17, r24
    1d58:	88 f4       	brcc	.+34     	; 0x1d7c <__clzsi2+0x40>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	e8 16       	cp	r14, r24
    1d5e:	f1 04       	cpc	r15, r1
    1d60:	01 05       	cpc	r16, r1
    1d62:	11 05       	cpc	r17, r1
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <__clzsi2+0x36>
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <__clzsi2+0x36>
    1d68:	88 e0       	ldi	r24, 0x08	; 8
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	17 c0       	rjmp	.+46     	; 0x1da0 <__clzsi2+0x64>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	12 c0       	rjmp	.+36     	; 0x1da0 <__clzsi2+0x64>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	e8 16       	cp	r14, r24
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	f8 06       	cpc	r15, r24
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	08 07       	cpc	r16, r24
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	18 07       	cpc	r17, r24
    1d8c:	28 f0       	brcs	.+10     	; 0x1d98 <__clzsi2+0x5c>
    1d8e:	88 e1       	ldi	r24, 0x18	; 24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <__clzsi2+0x64>
    1d98:	80 e1       	ldi	r24, 0x10	; 16
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	20 e2       	ldi	r18, 0x20	; 32
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	28 1b       	sub	r18, r24
    1daa:	39 0b       	sbc	r19, r25
    1dac:	4a 0b       	sbc	r20, r26
    1dae:	5b 0b       	sbc	r21, r27
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <__clzsi2+0x7e>
    1db2:	16 95       	lsr	r17
    1db4:	07 95       	ror	r16
    1db6:	f7 94       	ror	r15
    1db8:	e7 94       	ror	r14
    1dba:	8a 95       	dec	r24
    1dbc:	d2 f7       	brpl	.-12     	; 0x1db2 <__clzsi2+0x76>
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	ef 5b       	subi	r30, 0xBF	; 191
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	31 09       	sbc	r19, r1
    1dca:	41 09       	sbc	r20, r1
    1dcc:	51 09       	sbc	r21, r1
    1dce:	c9 01       	movw	r24, r18
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret

00001dda <__pack_f>:
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	fc 01       	movw	r30, r24
    1de6:	e4 80       	ldd	r14, Z+4	; 0x04
    1de8:	f5 80       	ldd	r15, Z+5	; 0x05
    1dea:	06 81       	ldd	r16, Z+6	; 0x06
    1dec:	17 81       	ldd	r17, Z+7	; 0x07
    1dee:	d1 80       	ldd	r13, Z+1	; 0x01
    1df0:	80 81       	ld	r24, Z
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	48 f4       	brcc	.+18     	; 0x1e08 <__pack_f+0x2e>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e1       	ldi	r26, 0x10	; 16
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e8 2a       	or	r14, r24
    1e00:	f9 2a       	or	r15, r25
    1e02:	0a 2b       	or	r16, r26
    1e04:	1b 2b       	or	r17, r27
    1e06:	a5 c0       	rjmp	.+330    	; 0x1f52 <__pack_f+0x178>
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__pack_f+0x34>
    1e0c:	9f c0       	rjmp	.+318    	; 0x1f4c <__pack_f+0x172>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <__pack_f+0x40>
    1e12:	ee 24       	eor	r14, r14
    1e14:	ff 24       	eor	r15, r15
    1e16:	87 01       	movw	r16, r14
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <__pack_f+0x4a>
    1e1a:	e1 14       	cp	r14, r1
    1e1c:	f1 04       	cpc	r15, r1
    1e1e:	01 05       	cpc	r16, r1
    1e20:	11 05       	cpc	r17, r1
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <__pack_f+0x50>
    1e24:	e0 e0       	ldi	r30, 0x00	; 0
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	96 c0       	rjmp	.+300    	; 0x1f56 <__pack_f+0x17c>
    1e2a:	62 81       	ldd	r22, Z+2	; 0x02
    1e2c:	73 81       	ldd	r23, Z+3	; 0x03
    1e2e:	9f ef       	ldi	r25, 0xFF	; 255
    1e30:	62 38       	cpi	r22, 0x82	; 130
    1e32:	79 07       	cpc	r23, r25
    1e34:	0c f0       	brlt	.+2      	; 0x1e38 <__pack_f+0x5e>
    1e36:	5b c0       	rjmp	.+182    	; 0x1eee <__pack_f+0x114>
    1e38:	22 e8       	ldi	r18, 0x82	; 130
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	26 1b       	sub	r18, r22
    1e3e:	37 0b       	sbc	r19, r23
    1e40:	2a 31       	cpi	r18, 0x1A	; 26
    1e42:	31 05       	cpc	r19, r1
    1e44:	2c f0       	brlt	.+10     	; 0x1e50 <__pack_f+0x76>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	2a c0       	rjmp	.+84     	; 0x1ea4 <__pack_f+0xca>
    1e50:	b8 01       	movw	r22, r16
    1e52:	a7 01       	movw	r20, r14
    1e54:	02 2e       	mov	r0, r18
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <__pack_f+0x86>
    1e58:	76 95       	lsr	r23
    1e5a:	67 95       	ror	r22
    1e5c:	57 95       	ror	r21
    1e5e:	47 95       	ror	r20
    1e60:	0a 94       	dec	r0
    1e62:	d2 f7       	brpl	.-12     	; 0x1e58 <__pack_f+0x7e>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <__pack_f+0x9c>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	aa 1f       	adc	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	2a 95       	dec	r18
    1e78:	d2 f7       	brpl	.-12     	; 0x1e6e <__pack_f+0x94>
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	a1 09       	sbc	r26, r1
    1e7e:	b1 09       	sbc	r27, r1
    1e80:	8e 21       	and	r24, r14
    1e82:	9f 21       	and	r25, r15
    1e84:	a0 23       	and	r26, r16
    1e86:	b1 23       	and	r27, r17
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	21 f0       	breq	.+8      	; 0x1e98 <__pack_f+0xbe>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	9a 01       	movw	r18, r20
    1e9a:	ab 01       	movw	r20, r22
    1e9c:	28 2b       	or	r18, r24
    1e9e:	39 2b       	or	r19, r25
    1ea0:	4a 2b       	or	r20, r26
    1ea2:	5b 2b       	or	r21, r27
    1ea4:	da 01       	movw	r26, r20
    1ea6:	c9 01       	movw	r24, r18
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	a0 70       	andi	r26, 0x00	; 0
    1eae:	b0 70       	andi	r27, 0x00	; 0
    1eb0:	80 34       	cpi	r24, 0x40	; 64
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	39 f4       	brne	.+14     	; 0x1ec8 <__pack_f+0xee>
    1eba:	27 ff       	sbrs	r18, 7
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <__pack_f+0xf6>
    1ebe:	20 5c       	subi	r18, 0xC0	; 192
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <__pack_f+0xf6>
    1ec8:	21 5c       	subi	r18, 0xC1	; 193
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	e0 e0       	ldi	r30, 0x00	; 0
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	20 30       	cpi	r18, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	3a 07       	cpc	r19, r26
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	4a 07       	cpc	r20, r26
    1ede:	a0 e4       	ldi	r26, 0x40	; 64
    1ee0:	5a 07       	cpc	r21, r26
    1ee2:	10 f0       	brcs	.+4      	; 0x1ee8 <__pack_f+0x10e>
    1ee4:	e1 e0       	ldi	r30, 0x01	; 1
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	79 01       	movw	r14, r18
    1eea:	8a 01       	movw	r16, r20
    1eec:	27 c0       	rjmp	.+78     	; 0x1f3c <__pack_f+0x162>
    1eee:	60 38       	cpi	r22, 0x80	; 128
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	64 f5       	brge	.+88     	; 0x1f4c <__pack_f+0x172>
    1ef4:	fb 01       	movw	r30, r22
    1ef6:	e1 58       	subi	r30, 0x81	; 129
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	d8 01       	movw	r26, r16
    1efc:	c7 01       	movw	r24, r14
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	90 70       	andi	r25, 0x00	; 0
    1f02:	a0 70       	andi	r26, 0x00	; 0
    1f04:	b0 70       	andi	r27, 0x00	; 0
    1f06:	80 34       	cpi	r24, 0x40	; 64
    1f08:	91 05       	cpc	r25, r1
    1f0a:	a1 05       	cpc	r26, r1
    1f0c:	b1 05       	cpc	r27, r1
    1f0e:	39 f4       	brne	.+14     	; 0x1f1e <__pack_f+0x144>
    1f10:	e7 fe       	sbrs	r14, 7
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <__pack_f+0x154>
    1f14:	80 e4       	ldi	r24, 0x40	; 64
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <__pack_f+0x14c>
    1f1e:	8f e3       	ldi	r24, 0x3F	; 63
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e8 0e       	add	r14, r24
    1f28:	f9 1e       	adc	r15, r25
    1f2a:	0a 1f       	adc	r16, r26
    1f2c:	1b 1f       	adc	r17, r27
    1f2e:	17 ff       	sbrs	r17, 7
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <__pack_f+0x162>
    1f32:	16 95       	lsr	r17
    1f34:	07 95       	ror	r16
    1f36:	f7 94       	ror	r15
    1f38:	e7 94       	ror	r14
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	87 e0       	ldi	r24, 0x07	; 7
    1f3e:	16 95       	lsr	r17
    1f40:	07 95       	ror	r16
    1f42:	f7 94       	ror	r15
    1f44:	e7 94       	ror	r14
    1f46:	8a 95       	dec	r24
    1f48:	d1 f7       	brne	.-12     	; 0x1f3e <__pack_f+0x164>
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <__pack_f+0x17c>
    1f4c:	ee 24       	eor	r14, r14
    1f4e:	ff 24       	eor	r15, r15
    1f50:	87 01       	movw	r16, r14
    1f52:	ef ef       	ldi	r30, 0xFF	; 255
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	6e 2f       	mov	r22, r30
    1f58:	67 95       	ror	r22
    1f5a:	66 27       	eor	r22, r22
    1f5c:	67 95       	ror	r22
    1f5e:	90 2f       	mov	r25, r16
    1f60:	9f 77       	andi	r25, 0x7F	; 127
    1f62:	d7 94       	ror	r13
    1f64:	dd 24       	eor	r13, r13
    1f66:	d7 94       	ror	r13
    1f68:	8e 2f       	mov	r24, r30
    1f6a:	86 95       	lsr	r24
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	46 2b       	or	r20, r22
    1f70:	58 2f       	mov	r21, r24
    1f72:	5d 29       	or	r21, r13
    1f74:	b7 01       	movw	r22, r14
    1f76:	ca 01       	movw	r24, r20
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	08 95       	ret

00001f84 <__unpack_f>:
    1f84:	fc 01       	movw	r30, r24
    1f86:	db 01       	movw	r26, r22
    1f88:	40 81       	ld	r20, Z
    1f8a:	51 81       	ldd	r21, Z+1	; 0x01
    1f8c:	22 81       	ldd	r18, Z+2	; 0x02
    1f8e:	62 2f       	mov	r22, r18
    1f90:	6f 77       	andi	r22, 0x7F	; 127
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	22 1f       	adc	r18, r18
    1f96:	22 27       	eor	r18, r18
    1f98:	22 1f       	adc	r18, r18
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	89 2f       	mov	r24, r25
    1f9e:	88 0f       	add	r24, r24
    1fa0:	82 2b       	or	r24, r18
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	99 27       	eor	r25, r25
    1faa:	99 1f       	adc	r25, r25
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	9c 93       	st	X, r25
    1fb0:	11 97       	sbiw	r26, 0x01	; 1
    1fb2:	21 15       	cp	r18, r1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	a9 f5       	brne	.+106    	; 0x2022 <__unpack_f+0x9e>
    1fb8:	41 15       	cp	r20, r1
    1fba:	51 05       	cpc	r21, r1
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	11 f4       	brne	.+4      	; 0x1fc6 <__unpack_f+0x42>
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	37 c0       	rjmp	.+110    	; 0x2034 <__unpack_f+0xb0>
    1fc6:	82 e8       	ldi	r24, 0x82	; 130
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255
    1fca:	13 96       	adiw	r26, 0x03	; 3
    1fcc:	9c 93       	st	X, r25
    1fce:	8e 93       	st	-X, r24
    1fd0:	12 97       	sbiw	r26, 0x02	; 2
    1fd2:	9a 01       	movw	r18, r20
    1fd4:	ab 01       	movw	r20, r22
    1fd6:	67 e0       	ldi	r22, 0x07	; 7
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	44 1f       	adc	r20, r20
    1fde:	55 1f       	adc	r21, r21
    1fe0:	6a 95       	dec	r22
    1fe2:	d1 f7       	brne	.-12     	; 0x1fd8 <__unpack_f+0x54>
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	8c 93       	st	X, r24
    1fe8:	0d c0       	rjmp	.+26     	; 0x2004 <__unpack_f+0x80>
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	44 1f       	adc	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	12 96       	adiw	r26, 0x02	; 2
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	13 97       	sbiw	r26, 0x03	; 3
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	13 96       	adiw	r26, 0x03	; 3
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
    2002:	12 97       	sbiw	r26, 0x02	; 2
    2004:	20 30       	cpi	r18, 0x00	; 0
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	38 07       	cpc	r19, r24
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	48 07       	cpc	r20, r24
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	58 07       	cpc	r21, r24
    2012:	58 f3       	brcs	.-42     	; 0x1fea <__unpack_f+0x66>
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	2d 93       	st	X+, r18
    2018:	3d 93       	st	X+, r19
    201a:	4d 93       	st	X+, r20
    201c:	5c 93       	st	X, r21
    201e:	17 97       	sbiw	r26, 0x07	; 7
    2020:	08 95       	ret
    2022:	2f 3f       	cpi	r18, 0xFF	; 255
    2024:	31 05       	cpc	r19, r1
    2026:	79 f4       	brne	.+30     	; 0x2046 <__unpack_f+0xc2>
    2028:	41 15       	cp	r20, r1
    202a:	51 05       	cpc	r21, r1
    202c:	61 05       	cpc	r22, r1
    202e:	71 05       	cpc	r23, r1
    2030:	19 f4       	brne	.+6      	; 0x2038 <__unpack_f+0xb4>
    2032:	84 e0       	ldi	r24, 0x04	; 4
    2034:	8c 93       	st	X, r24
    2036:	08 95       	ret
    2038:	64 ff       	sbrs	r22, 4
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <__unpack_f+0xbe>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	8c 93       	st	X, r24
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <__unpack_f+0xe2>
    2042:	1c 92       	st	X, r1
    2044:	10 c0       	rjmp	.+32     	; 0x2066 <__unpack_f+0xe2>
    2046:	2f 57       	subi	r18, 0x7F	; 127
    2048:	30 40       	sbci	r19, 0x00	; 0
    204a:	13 96       	adiw	r26, 0x03	; 3
    204c:	3c 93       	st	X, r19
    204e:	2e 93       	st	-X, r18
    2050:	12 97       	sbiw	r26, 0x02	; 2
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	8c 93       	st	X, r24
    2056:	87 e0       	ldi	r24, 0x07	; 7
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	66 1f       	adc	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	8a 95       	dec	r24
    2062:	d1 f7       	brne	.-12     	; 0x2058 <__unpack_f+0xd4>
    2064:	70 64       	ori	r23, 0x40	; 64
    2066:	14 96       	adiw	r26, 0x04	; 4
    2068:	4d 93       	st	X+, r20
    206a:	5d 93       	st	X+, r21
    206c:	6d 93       	st	X+, r22
    206e:	7c 93       	st	X, r23
    2070:	17 97       	sbiw	r26, 0x07	; 7
    2072:	08 95       	ret

00002074 <__fpcmp_parts_f>:
    2074:	1f 93       	push	r17
    2076:	dc 01       	movw	r26, r24
    2078:	fb 01       	movw	r30, r22
    207a:	9c 91       	ld	r25, X
    207c:	92 30       	cpi	r25, 0x02	; 2
    207e:	08 f4       	brcc	.+2      	; 0x2082 <__fpcmp_parts_f+0xe>
    2080:	47 c0       	rjmp	.+142    	; 0x2110 <__fpcmp_parts_f+0x9c>
    2082:	80 81       	ld	r24, Z
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	08 f4       	brcc	.+2      	; 0x208a <__fpcmp_parts_f+0x16>
    2088:	43 c0       	rjmp	.+134    	; 0x2110 <__fpcmp_parts_f+0x9c>
    208a:	94 30       	cpi	r25, 0x04	; 4
    208c:	51 f4       	brne	.+20     	; 0x20a2 <__fpcmp_parts_f+0x2e>
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	1c 91       	ld	r17, X
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	99 f5       	brne	.+102    	; 0x20fc <__fpcmp_parts_f+0x88>
    2096:	81 81       	ldd	r24, Z+1	; 0x01
    2098:	68 2f       	mov	r22, r24
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	61 1b       	sub	r22, r17
    209e:	71 09       	sbc	r23, r1
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <__fpcmp_parts_f+0xac>
    20a2:	84 30       	cpi	r24, 0x04	; 4
    20a4:	21 f0       	breq	.+8      	; 0x20ae <__fpcmp_parts_f+0x3a>
    20a6:	92 30       	cpi	r25, 0x02	; 2
    20a8:	31 f4       	brne	.+12     	; 0x20b6 <__fpcmp_parts_f+0x42>
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	b9 f1       	breq	.+110    	; 0x211c <__fpcmp_parts_f+0xa8>
    20ae:	81 81       	ldd	r24, Z+1	; 0x01
    20b0:	88 23       	and	r24, r24
    20b2:	89 f1       	breq	.+98     	; 0x2116 <__fpcmp_parts_f+0xa2>
    20b4:	2d c0       	rjmp	.+90     	; 0x2110 <__fpcmp_parts_f+0x9c>
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	1c 91       	ld	r17, X
    20ba:	11 97       	sbiw	r26, 0x01	; 1
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	f1 f0       	breq	.+60     	; 0x20fc <__fpcmp_parts_f+0x88>
    20c0:	81 81       	ldd	r24, Z+1	; 0x01
    20c2:	18 17       	cp	r17, r24
    20c4:	d9 f4       	brne	.+54     	; 0x20fc <__fpcmp_parts_f+0x88>
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	2d 91       	ld	r18, X+
    20ca:	3c 91       	ld	r19, X
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	82 17       	cp	r24, r18
    20d4:	93 07       	cpc	r25, r19
    20d6:	94 f0       	brlt	.+36     	; 0x20fc <__fpcmp_parts_f+0x88>
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	bc f0       	brlt	.+46     	; 0x210c <__fpcmp_parts_f+0x98>
    20de:	14 96       	adiw	r26, 0x04	; 4
    20e0:	8d 91       	ld	r24, X+
    20e2:	9d 91       	ld	r25, X+
    20e4:	0d 90       	ld	r0, X+
    20e6:	bc 91       	ld	r27, X
    20e8:	a0 2d       	mov	r26, r0
    20ea:	24 81       	ldd	r18, Z+4	; 0x04
    20ec:	35 81       	ldd	r19, Z+5	; 0x05
    20ee:	46 81       	ldd	r20, Z+6	; 0x06
    20f0:	57 81       	ldd	r21, Z+7	; 0x07
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	4a 07       	cpc	r20, r26
    20f8:	5b 07       	cpc	r21, r27
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <__fpcmp_parts_f+0x8e>
    20fc:	11 23       	and	r17, r17
    20fe:	41 f0       	breq	.+16     	; 0x2110 <__fpcmp_parts_f+0x9c>
    2100:	0a c0       	rjmp	.+20     	; 0x2116 <__fpcmp_parts_f+0xa2>
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	a4 07       	cpc	r26, r20
    2108:	b5 07       	cpc	r27, r21
    210a:	40 f4       	brcc	.+16     	; 0x211c <__fpcmp_parts_f+0xa8>
    210c:	11 23       	and	r17, r17
    210e:	19 f0       	breq	.+6      	; 0x2116 <__fpcmp_parts_f+0xa2>
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <__fpcmp_parts_f+0xac>
    2116:	6f ef       	ldi	r22, 0xFF	; 255
    2118:	7f ef       	ldi	r23, 0xFF	; 255
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <__fpcmp_parts_f+0xac>
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	cb 01       	movw	r24, r22
    2122:	1f 91       	pop	r17
    2124:	08 95       	ret

00002126 <__udivmodqi4>:
    2126:	99 1b       	sub	r25, r25
    2128:	79 e0       	ldi	r23, 0x09	; 9
    212a:	04 c0       	rjmp	.+8      	; 0x2134 <__udivmodqi4_ep>

0000212c <__udivmodqi4_loop>:
    212c:	99 1f       	adc	r25, r25
    212e:	96 17       	cp	r25, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__udivmodqi4_ep>
    2132:	96 1b       	sub	r25, r22

00002134 <__udivmodqi4_ep>:
    2134:	88 1f       	adc	r24, r24
    2136:	7a 95       	dec	r23
    2138:	c9 f7       	brne	.-14     	; 0x212c <__udivmodqi4_loop>
    213a:	80 95       	com	r24
    213c:	08 95       	ret

0000213e <__udivmodhi4>:
    213e:	aa 1b       	sub	r26, r26
    2140:	bb 1b       	sub	r27, r27
    2142:	51 e1       	ldi	r21, 0x11	; 17
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <__udivmodhi4_ep>

00002146 <__udivmodhi4_loop>:
    2146:	aa 1f       	adc	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	a6 17       	cp	r26, r22
    214c:	b7 07       	cpc	r27, r23
    214e:	10 f0       	brcs	.+4      	; 0x2154 <__udivmodhi4_ep>
    2150:	a6 1b       	sub	r26, r22
    2152:	b7 0b       	sbc	r27, r23

00002154 <__udivmodhi4_ep>:
    2154:	88 1f       	adc	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	5a 95       	dec	r21
    215a:	a9 f7       	brne	.-22     	; 0x2146 <__udivmodhi4_loop>
    215c:	80 95       	com	r24
    215e:	90 95       	com	r25
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	08 95       	ret

00002166 <__divmodhi4>:
    2166:	97 fb       	bst	r25, 7
    2168:	09 2e       	mov	r0, r25
    216a:	07 26       	eor	r0, r23
    216c:	0a d0       	rcall	.+20     	; 0x2182 <__divmodhi4_neg1>
    216e:	77 fd       	sbrc	r23, 7
    2170:	04 d0       	rcall	.+8      	; 0x217a <__divmodhi4_neg2>
    2172:	e5 df       	rcall	.-54     	; 0x213e <__udivmodhi4>
    2174:	06 d0       	rcall	.+12     	; 0x2182 <__divmodhi4_neg1>
    2176:	00 20       	and	r0, r0
    2178:	1a f4       	brpl	.+6      	; 0x2180 <__divmodhi4_exit>

0000217a <__divmodhi4_neg2>:
    217a:	70 95       	com	r23
    217c:	61 95       	neg	r22
    217e:	7f 4f       	sbci	r23, 0xFF	; 255

00002180 <__divmodhi4_exit>:
    2180:	08 95       	ret

00002182 <__divmodhi4_neg1>:
    2182:	f6 f7       	brtc	.-4      	; 0x2180 <__divmodhi4_exit>
    2184:	90 95       	com	r25
    2186:	81 95       	neg	r24
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	08 95       	ret

0000218c <__prologue_saves__>:
    218c:	2f 92       	push	r2
    218e:	3f 92       	push	r3
    2190:	4f 92       	push	r4
    2192:	5f 92       	push	r5
    2194:	6f 92       	push	r6
    2196:	7f 92       	push	r7
    2198:	8f 92       	push	r8
    219a:	9f 92       	push	r9
    219c:	af 92       	push	r10
    219e:	bf 92       	push	r11
    21a0:	cf 92       	push	r12
    21a2:	df 92       	push	r13
    21a4:	ef 92       	push	r14
    21a6:	ff 92       	push	r15
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	ca 1b       	sub	r28, r26
    21b6:	db 0b       	sbc	r29, r27
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	09 94       	ijmp

000021c4 <__epilogue_restores__>:
    21c4:	2a 88       	ldd	r2, Y+18	; 0x12
    21c6:	39 88       	ldd	r3, Y+17	; 0x11
    21c8:	48 88       	ldd	r4, Y+16	; 0x10
    21ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    21cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    21ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    21d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d6:	b9 84       	ldd	r11, Y+9	; 0x09
    21d8:	c8 84       	ldd	r12, Y+8	; 0x08
    21da:	df 80       	ldd	r13, Y+7	; 0x07
    21dc:	ee 80       	ldd	r14, Y+6	; 0x06
    21de:	fd 80       	ldd	r15, Y+5	; 0x05
    21e0:	0c 81       	ldd	r16, Y+4	; 0x04
    21e2:	1b 81       	ldd	r17, Y+3	; 0x03
    21e4:	aa 81       	ldd	r26, Y+2	; 0x02
    21e6:	b9 81       	ldd	r27, Y+1	; 0x01
    21e8:	ce 0f       	add	r28, r30
    21ea:	d1 1d       	adc	r29, r1
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	ed 01       	movw	r28, r26
    21f8:	08 95       	ret

000021fa <dtostrf>:
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	f2 2f       	mov	r31, r18
    2204:	f0 2e       	mov	r15, r16
    2206:	47 fd       	sbrc	r20, 7
    2208:	02 c0       	rjmp	.+4      	; 0x220e <dtostrf+0x14>
    220a:	e4 e0       	ldi	r30, 0x04	; 4
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <dtostrf+0x16>
    220e:	e4 e1       	ldi	r30, 0x14	; 20
    2210:	24 2f       	mov	r18, r20
    2212:	33 27       	eor	r19, r19
    2214:	27 fd       	sbrc	r18, 7
    2216:	30 95       	com	r19
    2218:	37 ff       	sbrs	r19, 7
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <dtostrf+0x28>
    221c:	30 95       	com	r19
    221e:	21 95       	neg	r18
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	4f 2d       	mov	r20, r15
    2224:	51 2f       	mov	r21, r17
    2226:	0f 2f       	mov	r16, r31
    2228:	ee 2e       	mov	r14, r30
    222a:	0e 94 4e 11 	call	0x229c	; 0x229c <dtoa_prf>
    222e:	8f 2d       	mov	r24, r15
    2230:	91 2f       	mov	r25, r17
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	08 95       	ret

0000223c <strcpy>:
    223c:	fb 01       	movw	r30, r22
    223e:	dc 01       	movw	r26, r24
    2240:	01 90       	ld	r0, Z+
    2242:	0d 92       	st	X+, r0
    2244:	00 20       	and	r0, r0
    2246:	e1 f7       	brne	.-8      	; 0x2240 <strcpy+0x4>
    2248:	08 95       	ret

0000224a <fputs>:
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	7c 01       	movw	r14, r24
    2258:	8b 01       	movw	r16, r22
    225a:	db 01       	movw	r26, r22
    225c:	13 96       	adiw	r26, 0x03	; 3
    225e:	8c 91       	ld	r24, X
    2260:	81 fd       	sbrc	r24, 1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <fputs+0x20>
    2264:	cf ef       	ldi	r28, 0xFF	; 255
    2266:	df ef       	ldi	r29, 0xFF	; 255
    2268:	13 c0       	rjmp	.+38     	; 0x2290 <fputs+0x46>
    226a:	c0 e0       	ldi	r28, 0x00	; 0
    226c:	d0 e0       	ldi	r29, 0x00	; 0
    226e:	0b c0       	rjmp	.+22     	; 0x2286 <fputs+0x3c>
    2270:	d8 01       	movw	r26, r16
    2272:	18 96       	adiw	r26, 0x08	; 8
    2274:	ed 91       	ld	r30, X+
    2276:	fc 91       	ld	r31, X
    2278:	19 97       	sbiw	r26, 0x09	; 9
    227a:	b8 01       	movw	r22, r16
    227c:	09 95       	icall
    227e:	89 2b       	or	r24, r25
    2280:	11 f0       	breq	.+4      	; 0x2286 <fputs+0x3c>
    2282:	cf ef       	ldi	r28, 0xFF	; 255
    2284:	df ef       	ldi	r29, 0xFF	; 255
    2286:	f7 01       	movw	r30, r14
    2288:	81 91       	ld	r24, Z+
    228a:	7f 01       	movw	r14, r30
    228c:	88 23       	and	r24, r24
    228e:	81 f7       	brne	.-32     	; 0x2270 <fputs+0x26>
    2290:	ce 01       	movw	r24, r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	e6 e0       	ldi	r30, 0x06	; 6
    2298:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__epilogue_restores__+0x18>

0000229c <dtoa_prf>:
    229c:	a9 e0       	ldi	r26, 0x09	; 9
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e4 e5       	ldi	r30, 0x54	; 84
    22a2:	f1 e1       	ldi	r31, 0x11	; 17
    22a4:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x8>
    22a8:	6a 01       	movw	r12, r20
    22aa:	12 2f       	mov	r17, r18
    22ac:	a0 2e       	mov	r10, r16
    22ae:	be 2c       	mov	r11, r14
    22b0:	2b e3       	ldi	r18, 0x3B	; 59
    22b2:	20 17       	cp	r18, r16
    22b4:	18 f4       	brcc	.+6      	; 0x22bc <dtoa_prf+0x20>
    22b6:	2c e3       	ldi	r18, 0x3C	; 60
    22b8:	92 2e       	mov	r9, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <dtoa_prf+0x24>
    22bc:	90 2e       	mov	r9, r16
    22be:	93 94       	inc	r9
    22c0:	ae 01       	movw	r20, r28
    22c2:	4f 5f       	subi	r20, 0xFF	; 255
    22c4:	5f 4f       	sbci	r21, 0xFF	; 255
    22c6:	27 e0       	ldi	r18, 0x07	; 7
    22c8:	09 2d       	mov	r16, r9
    22ca:	0e 94 b0 12 	call	0x2560	; 0x2560 <__ftoa_engine>
    22ce:	bc 01       	movw	r22, r24
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	e8 2e       	mov	r14, r24
    22d4:	ff 24       	eor	r15, r15
    22d6:	c7 01       	movw	r24, r14
    22d8:	89 70       	andi	r24, 0x09	; 9
    22da:	90 70       	andi	r25, 0x00	; 0
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	11 f4       	brne	.+4      	; 0x22e4 <dtoa_prf+0x48>
    22e0:	ad e2       	ldi	r26, 0x2D	; 45
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <dtoa_prf+0x5a>
    22e4:	b1 fe       	sbrs	r11, 1
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <dtoa_prf+0x50>
    22e8:	ab e2       	ldi	r26, 0x2B	; 43
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <dtoa_prf+0x5a>
    22ec:	b0 fc       	sbrc	r11, 0
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dtoa_prf+0x58>
    22f0:	a0 e0       	ldi	r26, 0x00	; 0
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <dtoa_prf+0x5a>
    22f4:	a0 e2       	ldi	r26, 0x20	; 32
    22f6:	e3 fe       	sbrs	r14, 3
    22f8:	3b c0       	rjmp	.+118    	; 0x2370 <dtoa_prf+0xd4>
    22fa:	aa 23       	and	r26, r26
    22fc:	11 f4       	brne	.+4      	; 0x2302 <dtoa_prf+0x66>
    22fe:	23 e0       	ldi	r18, 0x03	; 3
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <dtoa_prf+0x68>
    2302:	24 e0       	ldi	r18, 0x04	; 4
    2304:	21 17       	cp	r18, r17
    2306:	10 f0       	brcs	.+4      	; 0x230c <dtoa_prf+0x70>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <dtoa_prf+0x74>
    230c:	12 1b       	sub	r17, r18
    230e:	21 2f       	mov	r18, r17
    2310:	eb 2c       	mov	r14, r11
    2312:	b4 fe       	sbrs	r11, 4
    2314:	02 c0       	rjmp	.+4      	; 0x231a <dtoa_prf+0x7e>
    2316:	32 2f       	mov	r19, r18
    2318:	0a c0       	rjmp	.+20     	; 0x232e <dtoa_prf+0x92>
    231a:	f6 01       	movw	r30, r12
    231c:	32 2f       	mov	r19, r18
    231e:	80 e2       	ldi	r24, 0x20	; 32
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <dtoa_prf+0x8a>
    2322:	81 93       	st	Z+, r24
    2324:	31 50       	subi	r19, 0x01	; 1
    2326:	33 23       	and	r19, r19
    2328:	e1 f7       	brne	.-8      	; 0x2322 <dtoa_prf+0x86>
    232a:	c2 0e       	add	r12, r18
    232c:	d1 1c       	adc	r13, r1
    232e:	aa 23       	and	r26, r26
    2330:	19 f0       	breq	.+6      	; 0x2338 <dtoa_prf+0x9c>
    2332:	f6 01       	movw	r30, r12
    2334:	a1 93       	st	Z+, r26
    2336:	6f 01       	movw	r12, r30
    2338:	f6 01       	movw	r30, r12
    233a:	31 96       	adiw	r30, 0x01	; 1
    233c:	e2 fe       	sbrs	r14, 2
    233e:	05 c0       	rjmp	.+10     	; 0x234a <dtoa_prf+0xae>
    2340:	9e e4       	ldi	r25, 0x4E	; 78
    2342:	d6 01       	movw	r26, r12
    2344:	9c 93       	st	X, r25
    2346:	81 e4       	ldi	r24, 0x41	; 65
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <dtoa_prf+0xb6>
    234a:	9e e6       	ldi	r25, 0x6E	; 110
    234c:	d6 01       	movw	r26, r12
    234e:	9c 93       	st	X, r25
    2350:	81 e6       	ldi	r24, 0x61	; 97
    2352:	11 96       	adiw	r26, 0x01	; 1
    2354:	8c 93       	st	X, r24
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	32 96       	adiw	r30, 0x02	; 2
    235a:	df 01       	movw	r26, r30
    235c:	83 2f       	mov	r24, r19
    235e:	90 e2       	ldi	r25, 0x20	; 32
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <dtoa_prf+0xca>
    2362:	9d 93       	st	X+, r25
    2364:	81 50       	subi	r24, 0x01	; 1
    2366:	88 23       	and	r24, r24
    2368:	e1 f7       	brne	.-8      	; 0x2362 <dtoa_prf+0xc6>
    236a:	e3 0f       	add	r30, r19
    236c:	f1 1d       	adc	r31, r1
    236e:	40 c0       	rjmp	.+128    	; 0x23f0 <dtoa_prf+0x154>
    2370:	e2 fe       	sbrs	r14, 2
    2372:	42 c0       	rjmp	.+132    	; 0x23f8 <dtoa_prf+0x15c>
    2374:	aa 23       	and	r26, r26
    2376:	11 f4       	brne	.+4      	; 0x237c <dtoa_prf+0xe0>
    2378:	23 e0       	ldi	r18, 0x03	; 3
    237a:	01 c0       	rjmp	.+2      	; 0x237e <dtoa_prf+0xe2>
    237c:	24 e0       	ldi	r18, 0x04	; 4
    237e:	21 17       	cp	r18, r17
    2380:	10 f0       	brcs	.+4      	; 0x2386 <dtoa_prf+0xea>
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	02 c0       	rjmp	.+4      	; 0x238a <dtoa_prf+0xee>
    2386:	12 1b       	sub	r17, r18
    2388:	21 2f       	mov	r18, r17
    238a:	eb 2c       	mov	r14, r11
    238c:	b4 fe       	sbrs	r11, 4
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <dtoa_prf+0xf8>
    2390:	92 2f       	mov	r25, r18
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <dtoa_prf+0x10c>
    2394:	f6 01       	movw	r30, r12
    2396:	92 2f       	mov	r25, r18
    2398:	80 e2       	ldi	r24, 0x20	; 32
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <dtoa_prf+0x104>
    239c:	81 93       	st	Z+, r24
    239e:	91 50       	subi	r25, 0x01	; 1
    23a0:	99 23       	and	r25, r25
    23a2:	e1 f7       	brne	.-8      	; 0x239c <dtoa_prf+0x100>
    23a4:	c2 0e       	add	r12, r18
    23a6:	d1 1c       	adc	r13, r1
    23a8:	aa 23       	and	r26, r26
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <dtoa_prf+0x116>
    23ac:	f6 01       	movw	r30, r12
    23ae:	a1 93       	st	Z+, r26
    23b0:	6f 01       	movw	r12, r30
    23b2:	f6 01       	movw	r30, r12
    23b4:	31 96       	adiw	r30, 0x01	; 1
    23b6:	e2 fe       	sbrs	r14, 2
    23b8:	08 c0       	rjmp	.+16     	; 0x23ca <dtoa_prf+0x12e>
    23ba:	89 e4       	ldi	r24, 0x49	; 73
    23bc:	d6 01       	movw	r26, r12
    23be:	8c 93       	st	X, r24
    23c0:	8e e4       	ldi	r24, 0x4E	; 78
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	8c 93       	st	X, r24
    23c6:	86 e4       	ldi	r24, 0x46	; 70
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <dtoa_prf+0x13c>
    23ca:	89 e6       	ldi	r24, 0x69	; 105
    23cc:	d6 01       	movw	r26, r12
    23ce:	8c 93       	st	X, r24
    23d0:	8e e6       	ldi	r24, 0x6E	; 110
    23d2:	11 96       	adiw	r26, 0x01	; 1
    23d4:	8c 93       	st	X, r24
    23d6:	86 e6       	ldi	r24, 0x66	; 102
    23d8:	81 83       	std	Z+1, r24	; 0x01
    23da:	32 96       	adiw	r30, 0x02	; 2
    23dc:	df 01       	movw	r26, r30
    23de:	89 2f       	mov	r24, r25
    23e0:	20 e2       	ldi	r18, 0x20	; 32
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <dtoa_prf+0x14c>
    23e4:	2d 93       	st	X+, r18
    23e6:	81 50       	subi	r24, 0x01	; 1
    23e8:	88 23       	and	r24, r24
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <dtoa_prf+0x148>
    23ec:	e9 0f       	add	r30, r25
    23ee:	f1 1d       	adc	r31, r1
    23f0:	10 82       	st	Z, r1
    23f2:	2e ef       	ldi	r18, 0xFE	; 254
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	af c0       	rjmp	.+350    	; 0x2556 <dtoa_prf+0x2ba>
    23f8:	16 16       	cp	r1, r22
    23fa:	17 06       	cpc	r1, r23
    23fc:	1c f0       	brlt	.+6      	; 0x2404 <dtoa_prf+0x168>
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	03 c0       	rjmp	.+6      	; 0x240a <dtoa_prf+0x16e>
    2404:	ab 01       	movw	r20, r22
    2406:	4f 5f       	subi	r20, 0xFF	; 255
    2408:	5f 4f       	sbci	r21, 0xFF	; 255
    240a:	aa 20       	and	r10, r10
    240c:	19 f4       	brne	.+6      	; 0x2414 <dtoa_prf+0x178>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	03 c0       	rjmp	.+6      	; 0x241a <dtoa_prf+0x17e>
    2414:	8a 2d       	mov	r24, r10
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	aa 23       	and	r26, r26
    2420:	11 f0       	breq	.+4      	; 0x2426 <dtoa_prf+0x18a>
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	24 0f       	add	r18, r20
    2428:	35 1f       	adc	r19, r21
    242a:	28 0f       	add	r18, r24
    242c:	39 1f       	adc	r19, r25
    242e:	81 2f       	mov	r24, r17
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	28 17       	cp	r18, r24
    2434:	39 07       	cpc	r19, r25
    2436:	14 f0       	brlt	.+4      	; 0x243c <dtoa_prf+0x1a0>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <dtoa_prf+0x1a4>
    243c:	12 1b       	sub	r17, r18
    243e:	21 2f       	mov	r18, r17
    2440:	4b 2d       	mov	r20, r11
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	ca 01       	movw	r24, r20
    2446:	80 71       	andi	r24, 0x10	; 16
    2448:	90 70       	andi	r25, 0x00	; 0
    244a:	b4 fc       	sbrc	r11, 4
    244c:	0d c0       	rjmp	.+26     	; 0x2468 <dtoa_prf+0x1cc>
    244e:	b3 fc       	sbrc	r11, 3
    2450:	0b c0       	rjmp	.+22     	; 0x2468 <dtoa_prf+0x1cc>
    2452:	f6 01       	movw	r30, r12
    2454:	32 2f       	mov	r19, r18
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	02 c0       	rjmp	.+4      	; 0x245e <dtoa_prf+0x1c2>
    245a:	41 93       	st	Z+, r20
    245c:	31 50       	subi	r19, 0x01	; 1
    245e:	33 23       	and	r19, r19
    2460:	e1 f7       	brne	.-8      	; 0x245a <dtoa_prf+0x1be>
    2462:	c2 0e       	add	r12, r18
    2464:	d1 1c       	adc	r13, r1
    2466:	01 c0       	rjmp	.+2      	; 0x246a <dtoa_prf+0x1ce>
    2468:	32 2f       	mov	r19, r18
    246a:	aa 23       	and	r26, r26
    246c:	19 f0       	breq	.+6      	; 0x2474 <dtoa_prf+0x1d8>
    246e:	f6 01       	movw	r30, r12
    2470:	a1 93       	st	Z+, r26
    2472:	6f 01       	movw	r12, r30
    2474:	89 2b       	or	r24, r25
    2476:	11 f0       	breq	.+4      	; 0x247c <dtoa_prf+0x1e0>
    2478:	13 2f       	mov	r17, r19
    247a:	0a c0       	rjmp	.+20     	; 0x2490 <dtoa_prf+0x1f4>
    247c:	f6 01       	movw	r30, r12
    247e:	13 2f       	mov	r17, r19
    2480:	80 e3       	ldi	r24, 0x30	; 48
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <dtoa_prf+0x1ec>
    2484:	81 93       	st	Z+, r24
    2486:	11 50       	subi	r17, 0x01	; 1
    2488:	11 23       	and	r17, r17
    248a:	e1 f7       	brne	.-8      	; 0x2484 <dtoa_prf+0x1e8>
    248c:	c3 0e       	add	r12, r19
    248e:	d1 1c       	adc	r13, r1
    2490:	09 2d       	mov	r16, r9
    2492:	06 0f       	add	r16, r22
    2494:	ba 80       	ldd	r11, Y+2	; 0x02
    2496:	90 e1       	ldi	r25, 0x10	; 16
    2498:	89 2e       	mov	r8, r25
    249a:	91 2c       	mov	r9, r1
    249c:	8e 20       	and	r8, r14
    249e:	9f 20       	and	r9, r15
    24a0:	e4 fe       	sbrs	r14, 4
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <dtoa_prf+0x210>
    24a4:	f1 e3       	ldi	r31, 0x31	; 49
    24a6:	bf 16       	cp	r11, r31
    24a8:	09 f4       	brne	.+2      	; 0x24ac <dtoa_prf+0x210>
    24aa:	01 50       	subi	r16, 0x01	; 1
    24ac:	10 16       	cp	r1, r16
    24ae:	14 f0       	brlt	.+4      	; 0x24b4 <dtoa_prf+0x218>
    24b0:	01 e0       	ldi	r16, 0x01	; 1
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <dtoa_prf+0x21e>
    24b4:	09 30       	cpi	r16, 0x09	; 9
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <dtoa_prf+0x21e>
    24b8:	08 e0       	ldi	r16, 0x08	; 8
    24ba:	9b 01       	movw	r18, r22
    24bc:	77 ff       	sbrs	r23, 7
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <dtoa_prf+0x228>
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	cb 01       	movw	r24, r22
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	82 1b       	sub	r24, r18
    24ca:	93 0b       	sbc	r25, r19
    24cc:	fe 01       	movw	r30, r28
    24ce:	31 96       	adiw	r30, 0x01	; 1
    24d0:	e8 0f       	add	r30, r24
    24d2:	f9 1f       	adc	r31, r25
    24d4:	8e e2       	ldi	r24, 0x2E	; 46
    24d6:	f8 2e       	mov	r15, r24
    24d8:	3b 01       	movw	r6, r22
    24da:	60 1a       	sub	r6, r16
    24dc:	71 08       	sbc	r7, r1
    24de:	8a 2d       	mov	r24, r10
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	44 27       	eor	r20, r20
    24e4:	55 27       	eor	r21, r21
    24e6:	48 1b       	sub	r20, r24
    24e8:	59 0b       	sbc	r21, r25
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	2f 3f       	cpi	r18, 0xFF	; 255
    24ee:	38 07       	cpc	r19, r24
    24f0:	19 f4       	brne	.+6      	; 0x24f8 <dtoa_prf+0x25c>
    24f2:	d6 01       	movw	r26, r12
    24f4:	fd 92       	st	X+, r15
    24f6:	6d 01       	movw	r12, r26
    24f8:	62 17       	cp	r22, r18
    24fa:	73 07       	cpc	r23, r19
    24fc:	2c f0       	brlt	.+10     	; 0x2508 <dtoa_prf+0x26c>
    24fe:	62 16       	cp	r6, r18
    2500:	73 06       	cpc	r7, r19
    2502:	14 f4       	brge	.+4      	; 0x2508 <dtoa_prf+0x26c>
    2504:	80 81       	ld	r24, Z
    2506:	01 c0       	rjmp	.+2      	; 0x250a <dtoa_prf+0x26e>
    2508:	80 e3       	ldi	r24, 0x30	; 48
    250a:	21 50       	subi	r18, 0x01	; 1
    250c:	30 40       	sbci	r19, 0x00	; 0
    250e:	31 96       	adiw	r30, 0x01	; 1
    2510:	24 17       	cp	r18, r20
    2512:	35 07       	cpc	r19, r21
    2514:	24 f0       	brlt	.+8      	; 0x251e <dtoa_prf+0x282>
    2516:	d6 01       	movw	r26, r12
    2518:	8d 93       	st	X+, r24
    251a:	6d 01       	movw	r12, r26
    251c:	e6 cf       	rjmp	.-52     	; 0x24ea <dtoa_prf+0x24e>
    251e:	26 17       	cp	r18, r22
    2520:	37 07       	cpc	r19, r23
    2522:	49 f4       	brne	.+18     	; 0x2536 <dtoa_prf+0x29a>
    2524:	b5 e3       	ldi	r27, 0x35	; 53
    2526:	bb 15       	cp	r27, r11
    2528:	28 f0       	brcs	.+10     	; 0x2534 <dtoa_prf+0x298>
    252a:	bb 16       	cp	r11, r27
    252c:	21 f4       	brne	.+8      	; 0x2536 <dtoa_prf+0x29a>
    252e:	81 14       	cp	r8, r1
    2530:	91 04       	cpc	r9, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <dtoa_prf+0x29a>
    2534:	81 e3       	ldi	r24, 0x31	; 49
    2536:	f6 01       	movw	r30, r12
    2538:	81 93       	st	Z+, r24
    253a:	d6 01       	movw	r26, r12
    253c:	81 2f       	mov	r24, r17
    253e:	90 e2       	ldi	r25, 0x20	; 32
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <dtoa_prf+0x2aa>
    2542:	9c 93       	st	X, r25
    2544:	81 50       	subi	r24, 0x01	; 1
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	88 23       	and	r24, r24
    254a:	d9 f7       	brne	.-10     	; 0x2542 <dtoa_prf+0x2a6>
    254c:	e1 0f       	add	r30, r17
    254e:	f1 1d       	adc	r31, r1
    2550:	10 82       	st	Z, r1
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	c9 01       	movw	r24, r18
    2558:	29 96       	adiw	r28, 0x09	; 9
    255a:	ee e0       	ldi	r30, 0x0E	; 14
    255c:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x8>

00002560 <__ftoa_engine>:
    2560:	28 30       	cpi	r18, 0x08	; 8
    2562:	08 f0       	brcs	.+2      	; 0x2566 <__ftoa_engine+0x6>
    2564:	27 e0       	ldi	r18, 0x07	; 7
    2566:	33 27       	eor	r19, r19
    2568:	da 01       	movw	r26, r20
    256a:	99 0f       	add	r25, r25
    256c:	31 1d       	adc	r19, r1
    256e:	87 fd       	sbrc	r24, 7
    2570:	91 60       	ori	r25, 0x01	; 1
    2572:	00 96       	adiw	r24, 0x00	; 0
    2574:	61 05       	cpc	r22, r1
    2576:	71 05       	cpc	r23, r1
    2578:	39 f4       	brne	.+14     	; 0x2588 <__ftoa_engine+0x28>
    257a:	32 60       	ori	r19, 0x02	; 2
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3d 93       	st	X+, r19
    2580:	30 e3       	ldi	r19, 0x30	; 48
    2582:	2a 95       	dec	r18
    2584:	e1 f7       	brne	.-8      	; 0x257e <__ftoa_engine+0x1e>
    2586:	08 95       	ret
    2588:	9f 3f       	cpi	r25, 0xFF	; 255
    258a:	30 f0       	brcs	.+12     	; 0x2598 <__ftoa_engine+0x38>
    258c:	80 38       	cpi	r24, 0x80	; 128
    258e:	71 05       	cpc	r23, r1
    2590:	61 05       	cpc	r22, r1
    2592:	09 f0       	breq	.+2      	; 0x2596 <__ftoa_engine+0x36>
    2594:	3c 5f       	subi	r19, 0xFC	; 252
    2596:	3c 5f       	subi	r19, 0xFC	; 252
    2598:	3d 93       	st	X+, r19
    259a:	91 30       	cpi	r25, 0x01	; 1
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <__ftoa_engine+0x40>
    259e:	80 68       	ori	r24, 0x80	; 128
    25a0:	91 1d       	adc	r25, r1
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	1f 93       	push	r17
    25a8:	0f 93       	push	r16
    25aa:	ff 92       	push	r15
    25ac:	ef 92       	push	r14
    25ae:	19 2f       	mov	r17, r25
    25b0:	98 7f       	andi	r25, 0xF8	; 248
    25b2:	96 95       	lsr	r25
    25b4:	e9 2f       	mov	r30, r25
    25b6:	96 95       	lsr	r25
    25b8:	96 95       	lsr	r25
    25ba:	e9 0f       	add	r30, r25
    25bc:	ff 27       	eor	r31, r31
    25be:	ed 54       	subi	r30, 0x4D	; 77
    25c0:	fd 4f       	sbci	r31, 0xFD	; 253
    25c2:	99 27       	eor	r25, r25
    25c4:	33 27       	eor	r19, r19
    25c6:	ee 24       	eor	r14, r14
    25c8:	ff 24       	eor	r15, r15
    25ca:	a7 01       	movw	r20, r14
    25cc:	e7 01       	movw	r28, r14
    25ce:	05 90       	lpm	r0, Z+
    25d0:	08 94       	sec
    25d2:	07 94       	ror	r0
    25d4:	28 f4       	brcc	.+10     	; 0x25e0 <__ftoa_engine+0x80>
    25d6:	36 0f       	add	r19, r22
    25d8:	e7 1e       	adc	r14, r23
    25da:	f8 1e       	adc	r15, r24
    25dc:	49 1f       	adc	r20, r25
    25de:	51 1d       	adc	r21, r1
    25e0:	66 0f       	add	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	06 94       	lsr	r0
    25ea:	a1 f7       	brne	.-24     	; 0x25d4 <__ftoa_engine+0x74>
    25ec:	05 90       	lpm	r0, Z+
    25ee:	07 94       	ror	r0
    25f0:	28 f4       	brcc	.+10     	; 0x25fc <__ftoa_engine+0x9c>
    25f2:	e7 0e       	add	r14, r23
    25f4:	f8 1e       	adc	r15, r24
    25f6:	49 1f       	adc	r20, r25
    25f8:	56 1f       	adc	r21, r22
    25fa:	c1 1d       	adc	r28, r1
    25fc:	77 0f       	add	r23, r23
    25fe:	88 1f       	adc	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	66 1f       	adc	r22, r22
    2604:	06 94       	lsr	r0
    2606:	a1 f7       	brne	.-24     	; 0x25f0 <__ftoa_engine+0x90>
    2608:	05 90       	lpm	r0, Z+
    260a:	07 94       	ror	r0
    260c:	28 f4       	brcc	.+10     	; 0x2618 <__ftoa_engine+0xb8>
    260e:	f8 0e       	add	r15, r24
    2610:	49 1f       	adc	r20, r25
    2612:	56 1f       	adc	r21, r22
    2614:	c7 1f       	adc	r28, r23
    2616:	d1 1d       	adc	r29, r1
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	66 1f       	adc	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	06 94       	lsr	r0
    2622:	a1 f7       	brne	.-24     	; 0x260c <__ftoa_engine+0xac>
    2624:	05 90       	lpm	r0, Z+
    2626:	07 94       	ror	r0
    2628:	20 f4       	brcc	.+8      	; 0x2632 <__ftoa_engine+0xd2>
    262a:	49 0f       	add	r20, r25
    262c:	56 1f       	adc	r21, r22
    262e:	c7 1f       	adc	r28, r23
    2630:	d8 1f       	adc	r29, r24
    2632:	99 0f       	add	r25, r25
    2634:	66 1f       	adc	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	06 94       	lsr	r0
    263c:	a9 f7       	brne	.-22     	; 0x2628 <__ftoa_engine+0xc8>
    263e:	84 91       	lpm	r24, Z+
    2640:	10 95       	com	r17
    2642:	17 70       	andi	r17, 0x07	; 7
    2644:	41 f0       	breq	.+16     	; 0x2656 <__ftoa_engine+0xf6>
    2646:	d6 95       	lsr	r29
    2648:	c7 95       	ror	r28
    264a:	57 95       	ror	r21
    264c:	47 95       	ror	r20
    264e:	f7 94       	ror	r15
    2650:	e7 94       	ror	r14
    2652:	1a 95       	dec	r17
    2654:	c1 f7       	brne	.-16     	; 0x2646 <__ftoa_engine+0xe6>
    2656:	e9 e5       	ldi	r30, 0x59	; 89
    2658:	f2 e0       	ldi	r31, 0x02	; 2
    265a:	68 94       	set
    265c:	15 90       	lpm	r1, Z+
    265e:	15 91       	lpm	r17, Z+
    2660:	35 91       	lpm	r19, Z+
    2662:	65 91       	lpm	r22, Z+
    2664:	95 91       	lpm	r25, Z+
    2666:	05 90       	lpm	r0, Z+
    2668:	7f e2       	ldi	r23, 0x2F	; 47
    266a:	73 95       	inc	r23
    266c:	e1 18       	sub	r14, r1
    266e:	f1 0a       	sbc	r15, r17
    2670:	43 0b       	sbc	r20, r19
    2672:	56 0b       	sbc	r21, r22
    2674:	c9 0b       	sbc	r28, r25
    2676:	d0 09       	sbc	r29, r0
    2678:	c0 f7       	brcc	.-16     	; 0x266a <__ftoa_engine+0x10a>
    267a:	e1 0c       	add	r14, r1
    267c:	f1 1e       	adc	r15, r17
    267e:	43 1f       	adc	r20, r19
    2680:	56 1f       	adc	r21, r22
    2682:	c9 1f       	adc	r28, r25
    2684:	d0 1d       	adc	r29, r0
    2686:	7e f4       	brtc	.+30     	; 0x26a6 <__ftoa_engine+0x146>
    2688:	70 33       	cpi	r23, 0x30	; 48
    268a:	11 f4       	brne	.+4      	; 0x2690 <__ftoa_engine+0x130>
    268c:	8a 95       	dec	r24
    268e:	e6 cf       	rjmp	.-52     	; 0x265c <__ftoa_engine+0xfc>
    2690:	e8 94       	clt
    2692:	01 50       	subi	r16, 0x01	; 1
    2694:	30 f0       	brcs	.+12     	; 0x26a2 <__ftoa_engine+0x142>
    2696:	08 0f       	add	r16, r24
    2698:	0a f4       	brpl	.+2      	; 0x269c <__ftoa_engine+0x13c>
    269a:	00 27       	eor	r16, r16
    269c:	02 17       	cp	r16, r18
    269e:	08 f4       	brcc	.+2      	; 0x26a2 <__ftoa_engine+0x142>
    26a0:	20 2f       	mov	r18, r16
    26a2:	23 95       	inc	r18
    26a4:	02 2f       	mov	r16, r18
    26a6:	7a 33       	cpi	r23, 0x3A	; 58
    26a8:	28 f0       	brcs	.+10     	; 0x26b4 <__ftoa_engine+0x154>
    26aa:	79 e3       	ldi	r23, 0x39	; 57
    26ac:	7d 93       	st	X+, r23
    26ae:	2a 95       	dec	r18
    26b0:	e9 f7       	brne	.-6      	; 0x26ac <__ftoa_engine+0x14c>
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <__ftoa_engine+0x174>
    26b4:	7d 93       	st	X+, r23
    26b6:	2a 95       	dec	r18
    26b8:	89 f6       	brne	.-94     	; 0x265c <__ftoa_engine+0xfc>
    26ba:	06 94       	lsr	r0
    26bc:	97 95       	ror	r25
    26be:	67 95       	ror	r22
    26c0:	37 95       	ror	r19
    26c2:	17 95       	ror	r17
    26c4:	17 94       	ror	r1
    26c6:	e1 18       	sub	r14, r1
    26c8:	f1 0a       	sbc	r15, r17
    26ca:	43 0b       	sbc	r20, r19
    26cc:	56 0b       	sbc	r21, r22
    26ce:	c9 0b       	sbc	r28, r25
    26d0:	d0 09       	sbc	r29, r0
    26d2:	98 f0       	brcs	.+38     	; 0x26fa <__ftoa_engine+0x19a>
    26d4:	23 95       	inc	r18
    26d6:	7e 91       	ld	r23, -X
    26d8:	73 95       	inc	r23
    26da:	7a 33       	cpi	r23, 0x3A	; 58
    26dc:	08 f0       	brcs	.+2      	; 0x26e0 <__ftoa_engine+0x180>
    26de:	70 e3       	ldi	r23, 0x30	; 48
    26e0:	7c 93       	st	X, r23
    26e2:	20 13       	cpse	r18, r16
    26e4:	b8 f7       	brcc	.-18     	; 0x26d4 <__ftoa_engine+0x174>
    26e6:	7e 91       	ld	r23, -X
    26e8:	70 61       	ori	r23, 0x10	; 16
    26ea:	7d 93       	st	X+, r23
    26ec:	30 f0       	brcs	.+12     	; 0x26fa <__ftoa_engine+0x19a>
    26ee:	83 95       	inc	r24
    26f0:	71 e3       	ldi	r23, 0x31	; 49
    26f2:	7d 93       	st	X+, r23
    26f4:	70 e3       	ldi	r23, 0x30	; 48
    26f6:	2a 95       	dec	r18
    26f8:	e1 f7       	brne	.-8      	; 0x26f2 <__ftoa_engine+0x192>
    26fa:	11 24       	eor	r1, r1
    26fc:	ef 90       	pop	r14
    26fe:	ff 90       	pop	r15
    2700:	0f 91       	pop	r16
    2702:	1f 91       	pop	r17
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	99 27       	eor	r25, r25
    270a:	87 fd       	sbrc	r24, 7
    270c:	90 95       	com	r25
    270e:	08 95       	ret

00002710 <_exit>:
    2710:	f8 94       	cli

00002712 <__stop_program>:
    2712:	ff cf       	rjmp	.-2      	; 0x2712 <__stop_program>
