
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000033b8  0000344c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  0080012e  0080012e  0000347a  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  0000347a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000513  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f4b  00000000  00000000  00003b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000134d  00000000  00000000  00006a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d26  00000000  00000000  00007da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00009acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084a  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000144f  00000000  00000000  0000a736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       8:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_2>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_11>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_13>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_21>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000070 <__c.1790>:
      70:	6e 61 6e 00                                         nan.

00000074 <__c.1788>:
      74:	69 6e 66 00                                         inf.

00000078 <__c.2085>:
      78:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      88:	47 00                                               G.

0000008a <pstr_an>:
      8a:	61 6e 00                                            an.

0000008d <pstr_nfinity>:
      8d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000095 <pwr_m10>:
      95:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ad <pwr_p10>:
      ad:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bd:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000c5 <LcdCustomChar>:
      c5:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d5:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e5:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f5:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     105:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     115:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     125:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     135:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     145:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     155:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     165:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     175:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     185:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     195:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     1a5:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     1b5:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     1c5:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     1d5:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1e5:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1f5:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e1       	ldi	r29, 0x10	; 16
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e8 eb       	ldi	r30, 0xB8	; 184
     214:	f3 e3       	ldi	r31, 0x33	; 51
     216:	02 c0       	rjmp	.+4      	; 0x21c <.do_copy_data_start>

00000218 <.do_copy_data_loop>:
     218:	05 90       	lpm	r0, Z+
     21a:	0d 92       	st	X+, r0

0000021c <.do_copy_data_start>:
     21c:	ae 32       	cpi	r26, 0x2E	; 46
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <.do_copy_data_loop>

00000222 <__do_clear_bss>:
     222:	12 e0       	ldi	r17, 0x02	; 2
     224:	ae e2       	ldi	r26, 0x2E	; 46
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	ae 3a       	cpi	r26, 0xAE	; 174
     22e:	b1 07       	cpc	r27, r17
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 4e 08 	call	0x109c	; 0x109c <main>
     236:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     284:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     288:	50 90 5c 02 	lds	r5, 0x025C
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     28c:	b0 9b       	sbis	0x16, 0	; 22
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_13+0x7a>
    ++kernel.cycles;
     290:	80 91 9e 02 	lds	r24, 0x029E
     294:	90 91 9f 02 	lds	r25, 0x029F
     298:	a0 91 a0 02 	lds	r26, 0x02A0
     29c:	b0 91 a1 02 	lds	r27, 0x02A1
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 9e 02 	sts	0x029E, r24
     2aa:	90 93 9f 02 	sts	0x029F, r25
     2ae:	a0 93 a0 02 	sts	0x02A0, r26
     2b2:	b0 93 a1 02 	sts	0x02A1, r27
    TIFR1 |= (1<<TOV1) ;
     2b6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2b8:	80 91 84 00 	lds	r24, 0x0084
     2bc:	90 91 85 00 	lds	r25, 0x0085
     2c0:	3c 01       	movw	r6, r24
     2c2:	88 24       	eor	r8, r8
     2c4:	99 24       	eor	r9, r9
     2c6:	80 91 9e 02 	lds	r24, 0x029E
     2ca:	90 91 9f 02 	lds	r25, 0x029F
     2ce:	a0 91 a0 02 	lds	r26, 0x02A0
     2d2:	b0 91 a1 02 	lds	r27, 0x02A1
     2d6:	dc 01       	movw	r26, r24
     2d8:	99 27       	eor	r25, r25
     2da:	88 27       	eor	r24, r24
     2dc:	68 0e       	add	r6, r24
     2de:	79 1e       	adc	r7, r25
     2e0:	8a 1e       	adc	r8, r26
     2e2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	40 90 5b 02 	lds	r4, 0x025B
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	af 2e       	mov	r10, r31
     2f0:	ff ef       	ldi	r31, 0xFF	; 255
     2f2:	bf 2e       	mov	r11, r31
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 2e       	mov	r12, r31
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     300:	33 24       	eor	r3, r3
     302:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     304:	cb e0       	ldi	r28, 0x0B	; 11
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	43 c0       	rjmp	.+134    	; 0x390 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     30a:	62 9d       	mul	r22, r2
     30c:	d0 01       	movw	r26, r0
     30e:	11 24       	eor	r1, r1
     310:	a3 5a       	subi	r26, 0xA3	; 163
     312:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	a1 f4       	brne	.+40     	; 0x346 <__vector_13+0x108>
      if (t->release <= now) {
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	ed 90       	ld	r14, X+
     322:	fd 90       	ld	r15, X+
     324:	0d 91       	ld	r16, X+
     326:	1c 91       	ld	r17, X
     328:	15 97       	sbiw	r26, 0x05	; 5
     32a:	6e 14       	cp	r6, r14
     32c:	7f 04       	cpc	r7, r15
     32e:	80 06       	cpc	r8, r16
     330:	91 06       	cpc	r9, r17
     332:	20 f0       	brcs	.+8      	; 0x33c <__vector_13+0xfe>
	t->state = READYQ;
     334:	1a 96       	adiw	r26, 0x0a	; 10
     336:	3c 92       	st	X, r3
     338:	1a 97       	sbiw	r26, 0x0a	; 10
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     33c:	ea 14       	cp	r14, r10
     33e:	fb 04       	cpc	r15, r11
     340:	0c 05       	cpc	r16, r12
     342:	1d 05       	cpc	r17, r13
     344:	10 f0       	brcs	.+4      	; 0x34a <__vector_13+0x10c>
     346:	86 01       	movw	r16, r12
     348:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     34a:	1a 96       	adiw	r26, 0x0a	; 10
     34c:	8c 91       	ld	r24, X
     34e:	1a 97       	sbiw	r26, 0x0a	; 10
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	d9 f4       	brne	.+54     	; 0x38a <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     354:	87 2f       	mov	r24, r23
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	9c 9f       	mul	r25, r28
     362:	f0 0d       	add	r31, r0
     364:	11 24       	eor	r1, r1
     366:	e5 5a       	subi	r30, 0xA5	; 165
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	16 96       	adiw	r26, 0x06	; 6
     36c:	2d 91       	ld	r18, X+
     36e:	3d 91       	ld	r19, X+
     370:	4d 91       	ld	r20, X+
     372:	5c 91       	ld	r21, X
     374:	19 97       	sbiw	r26, 0x09	; 9
     376:	80 85       	ldd	r24, Z+8	; 0x08
     378:	91 85       	ldd	r25, Z+9	; 0x09
     37a:	a2 85       	ldd	r26, Z+10	; 0x0a
     37c:	b3 85       	ldd	r27, Z+11	; 0x0b
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	4a 07       	cpc	r20, r26
     384:	5b 07       	cpc	r21, r27
     386:	08 f4       	brcc	.+2      	; 0x38a <__vector_13+0x14c>
     388:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	57 01       	movw	r10, r14
     38e:	68 01       	movw	r12, r16
     390:	46 16       	cp	r4, r22
     392:	08 f0       	brcs	.+2      	; 0x396 <__vector_13+0x158>
     394:	ba cf       	rjmp	.-140    	; 0x30a <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     396:	75 15       	cp	r23, r5
     398:	b1 f0       	breq	.+44     	; 0x3c6 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	5e 9e       	mul	r5, r30
     39e:	d0 01       	movw	r26, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	a3 5a       	subi	r26, 0xA3	; 163
     3a4:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     3a6:	8d b7       	in	r24, 0x3d	; 61
     3a8:	8c 93       	st	X, r24
    t->sph = SPH;
     3aa:	8e b7       	in	r24, 0x3e	; 62
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3b0:	7e 9f       	mul	r23, r30
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	e3 5a       	subi	r30, 0xA3	; 163
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3be:	80 81       	ld	r24, Z
     3c0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3c2:	70 93 5c 02 	sts	0x025C, r23

  }

  kernel.nextHit = nextHit;  
     3c6:	a0 92 a2 02 	sts	0x02A2, r10
     3ca:	b0 92 a3 02 	sts	0x02A3, r11
     3ce:	c0 92 a4 02 	sts	0x02A4, r12
     3d2:	d0 92 a5 02 	sts	0x02A5, r13

  now = (kernel.cycles << 16) + TCNT1;
     3d6:	20 91 84 00 	lds	r18, 0x0084
     3da:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	80 91 9e 02 	lds	r24, 0x029E
     3e6:	90 91 9f 02 	lds	r25, 0x029F
     3ea:	a0 91 a0 02 	lds	r26, 0x02A0
     3ee:	b0 91 a1 02 	lds	r27, 0x02A1
     3f2:	dc 01       	movw	r26, r24
     3f4:	99 27       	eor	r25, r25
     3f6:	88 27       	eor	r24, r24
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	4a 1f       	adc	r20, r26
     3fe:	5b 1f       	adc	r21, r27
     400:	d6 01       	movw	r26, r12
     402:	c5 01       	movw	r24, r10
     404:	82 1b       	sub	r24, r18
     406:	93 0b       	sbc	r25, r19
     408:	a4 0b       	sbc	r26, r20
     40a:	b5 0b       	sbc	r27, r21
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	a1 05       	cpc	r26, r1
     416:	b1 05       	cpc	r27, r1
     418:	24 f4       	brge	.+8      	; 0x422 <__vector_13+0x1e4>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     422:	80 91 84 00 	lds	r24, 0x0084
     426:	90 91 85 00 	lds	r25, 0x0085
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	a4 1f       	adc	r26, r20
     434:	b5 1f       	adc	r27, r21
     436:	80 50       	subi	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	a1 40       	sbci	r26, 0x01	; 1
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	38 f4       	brcc	.+14     	; 0x44e <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     44e:	80 91 84 00 	lds	r24, 0x0084
     452:	90 91 85 00 	lds	r25, 0x0085
     456:	8c 5f       	subi	r24, 0xFC	; 252
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	28 f4       	brcc	.+10     	; 0x466 <__vector_13+0x228>
    OCR1A = 0x0000;
     45c:	10 92 89 00 	sts	0x0089, r1
     460:	10 92 88 00 	sts	0x0088, r1
     464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 89 00 	sts	0x0089, r25
     46e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6f 00 	sts	0x006F, r24
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	3f 90       	pop	r3
     4b2:	2f 90       	pop	r2
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4c6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	28 1b       	sub	r18, r24
     4dc:	39 0b       	sbc	r19, r25
     4de:	30 93 9d 02 	sts	0x029D, r19
     4e2:	20 93 9c 02 	sts	0x029C, r18
  kernel.nbrOfTasks = 0;
     4e6:	10 92 5b 02 	sts	0x025B, r1
  kernel.running = 0;
     4ea:	10 92 5c 02 	sts	0x025C, r1

  kernel.cycles = 0x0000;
     4ee:	10 92 9e 02 	sts	0x029E, r1
     4f2:	10 92 9f 02 	sts	0x029F, r1
     4f6:	10 92 a0 02 	sts	0x02A0, r1
     4fa:	10 92 a1 02 	sts	0x02A1, r1
  kernel.nextHit = 0x7FFFFFFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	af ef       	ldi	r26, 0xFF	; 255
     504:	bf e7       	ldi	r27, 0x7F	; 127
     506:	80 93 a2 02 	sts	0x02A2, r24
     50a:	90 93 a3 02 	sts	0x02A3, r25
     50e:	a0 93 a4 02 	sts	0x02A4, r26
     512:	b0 93 a5 02 	sts	0x02A5, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     516:	80 93 63 02 	sts	0x0263, r24
     51a:	90 93 64 02 	sts	0x0264, r25
     51e:	a0 93 65 02 	sts	0x0265, r26
     522:	b0 93 66 02 	sts	0x0266, r27
  kernel.tasks[0].release = 0x00000000;
     526:	10 92 5f 02 	sts	0x025F, r1
     52a:	10 92 60 02 	sts	0x0260, r1
     52e:	10 92 61 02 	sts	0x0261, r1
     532:	10 92 62 02 	sts	0x0262, r1

  sei(); /* set enabled interrupts */
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	49 01       	movw	r8, r18
     554:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     556:	f8 94       	cli

  ++kernel.nbrOfTasks;
     558:	20 91 5b 02 	lds	r18, 0x025B
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	20 93 5b 02 	sts	0x025B, r18

  sp = kernel.memptr;
     562:	c0 91 9c 02 	lds	r28, 0x029C
     566:	d0 91 9d 02 	lds	r29, 0x029D
  kernel.memptr -= stacksize;  // decrease free mem ptr
     56a:	9e 01       	movw	r18, r28
     56c:	26 1b       	sub	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	30 93 9d 02 	sts	0x029D, r19
     574:	20 93 9c 02 	sts	0x029C, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     578:	88 83       	st	Y, r24
     57a:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     57c:	92 93       	st	-Z, r25
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     582:	ce 01       	movw	r24, r28
     584:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     58a:	a8 17       	cp	r26, r24
     58c:	b9 07       	cpc	r27, r25
     58e:	d9 f7       	brne	.-10     	; 0x586 <trtCreateTask+0x4c>
     590:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     592:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     594:	d2 92       	st	-Z, r13
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     59a:	9e 01       	movw	r18, r28
     59c:	23 52       	subi	r18, 0x23	; 35
     59e:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5a0:	1c 92       	st	X, r1
     5a2:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5a4:	a2 17       	cp	r26, r18
     5a6:	b3 07       	cpc	r27, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <trtCreateTask+0x66>
     5aa:	9f 01       	movw	r18, r30
     5ac:	26 50       	subi	r18, 0x06	; 6
     5ae:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5b0:	e0 91 5b 02 	lds	r30, 0x025B
     5b4:	8b e0       	ldi	r24, 0x0B	; 11
     5b6:	e8 9f       	mul	r30, r24
     5b8:	f0 01       	movw	r30, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	e3 5a       	subi	r30, 0xA3	; 163
     5be:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     5c0:	82 82       	std	Z+2, r8	; 0x02
     5c2:	93 82       	std	Z+3, r9	; 0x03
     5c4:	a4 82       	std	Z+4, r10	; 0x04
     5c6:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	f7 82       	std	Z+7, r15	; 0x07
     5cc:	00 87       	std	Z+8, r16	; 0x08
     5ce:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     5d4:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5d6:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>

}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5f6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5f8:	eb e5       	ldi	r30, 0x5B	; 91
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     602:	78 94       	sei
}
     604:	08 95       	ret

00000606 <trtWait>:

void trtWait(uint8_t semnbr) {
     606:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     608:	20 91 5c 02 	lds	r18, 0x025C

  cli(); // disable interrupts
     60c:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     60e:	e8 2f       	mov	r30, r24
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	ed 56       	subi	r30, 0x6D	; 109
     614:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	19 f0       	breq	.+6      	; 0x622 <trtWait+0x1c>
    (*s)--;
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	10 c0       	rjmp	.+32     	; 0x642 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e3 5a       	subi	r30, 0xA3	; 163
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	4e 5f       	subi	r20, 0xFE	; 254
     63c:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	08 95       	ret

00000646 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     64e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     650:	00 91 5b 02 	lds	r16, 0x025B
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	4f ef       	ldi	r20, 0xFF	; 255
     658:	5f ef       	ldi	r21, 0xFF	; 255
     65a:	6f ef       	ldi	r22, 0xFF	; 255
     65c:	7f ef       	ldi	r23, 0xFF	; 255
     65e:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     664:	21 2f       	mov	r18, r17
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     66e:	ef 9d       	mul	r30, r15
     670:	d0 01       	movw	r26, r0
     672:	11 24       	eor	r1, r1
     674:	a3 5a       	subi	r26, 0xA3	; 163
     676:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 91       	ld	r24, X
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	69 f4       	brne	.+26     	; 0x6a0 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8d 91       	ld	r24, X+
     68a:	9d 91       	ld	r25, X+
     68c:	0d 90       	ld	r0, X+
     68e:	bc 91       	ld	r27, X
     690:	a0 2d       	mov	r26, r0
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <trtSignal+0x5a>
     69c:	fe 2f       	mov	r31, r30
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <trtSignal+0x5e>
     6a0:	db 01       	movw	r26, r22
     6a2:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	0e 17       	cp	r16, r30
     6ac:	00 f7       	brcc	.-64     	; 0x66e <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6ae:	ff 23       	and	r31, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6b2:	e1 2f       	mov	r30, r17
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e6 5a       	subi	r30, 0xA6	; 166
     6b8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ba:	81 ad       	ldd	r24, Z+57	; 0x39
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	81 af       	std	Z+57, r24	; 0x39
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6c2:	2f 2f       	mov	r18, r31
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	e5 5a       	subi	r30, 0xA5	; 165
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6ee:	20 91 84 00 	lds	r18, 0x0084
     6f2:	30 91 85 00 	lds	r19, 0x0085
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	80 91 9e 02 	lds	r24, 0x029E
     6fe:	90 91 9f 02 	lds	r25, 0x029F
     702:	a0 91 a0 02 	lds	r26, 0x02A0
     706:	b0 91 a1 02 	lds	r27, 0x02A1
     70a:	dc 01       	movw	r26, r24
     70c:	99 27       	eor	r25, r25
     70e:	88 27       	eor	r24, r24
     710:	28 0f       	add	r18, r24
     712:	39 1f       	adc	r19, r25
     714:	4a 1f       	adc	r20, r26
     716:	5b 1f       	adc	r21, r27
}
     718:	b9 01       	movw	r22, r18
     71a:	ca 01       	movw	r24, r20
     71c:	08 95       	ret

0000071e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     71e:	e0 91 5c 02 	lds	r30, 0x025C
     722:	ab e0       	ldi	r26, 0x0B	; 11
     724:	ea 9f       	mul	r30, r26
     726:	f0 01       	movw	r30, r0
     728:	11 24       	eor	r1, r1
     72a:	e3 5a       	subi	r30, 0xA3	; 163
     72c:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     72e:	f8 94       	cli

  t->state = TIMEQ;
     730:	a2 e0       	ldi	r26, 0x02	; 2
     732:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     73c:	26 83       	std	Z+6, r18	; 0x06
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	40 87       	std	Z+8, r20	; 0x08
     742:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     744:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     748:	08 95       	ret

0000074a <trtGetRelease>:


uint32_t trtGetRelease(void) {
     74a:	80 91 5c 02 	lds	r24, 0x025C
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2b e0       	ldi	r18, 0x0B	; 11
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	82 9f       	mul	r24, r18
     756:	f0 01       	movw	r30, r0
     758:	83 9f       	mul	r24, r19
     75a:	f0 0d       	add	r31, r0
     75c:	92 9f       	mul	r25, r18
     75e:	f0 0d       	add	r31, r0
     760:	11 24       	eor	r1, r1
     762:	e5 5a       	subi	r30, 0xA5	; 165
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	df 01       	movw	r26, r30
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	64 81       	ldd	r22, Z+4	; 0x04
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     77e:	80 91 5c 02 	lds	r24, 0x025C
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	82 9f       	mul	r24, r18
     78a:	f0 01       	movw	r30, r0
     78c:	83 9f       	mul	r24, r19
     78e:	f0 0d       	add	r31, r0
     790:	92 9f       	mul	r25, r18
     792:	f0 0d       	add	r31, r0
     794:	11 24       	eor	r1, r1
     796:	e5 5a       	subi	r30, 0xA5	; 165
     798:	fd 4f       	sbci	r31, 0xFD	; 253
     79a:	df 01       	movw	r26, r30
     79c:	18 96       	adiw	r26, 0x08	; 8
     79e:	60 85       	ldd	r22, Z+8	; 0x08
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	7c 91       	ld	r23, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	12 97       	sbiw	r26, 0x02	; 2
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 91       	ld	r25, X
     7b0:	08 95       	ret

000007b2 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7b2:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7b4:	80 91 5c 02 	lds	r24, 0x025C
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	e5 5a       	subi	r30, 0xA5	; 165
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7d2:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     7d6:	08 95       	ret

000007d8 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7d8:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	ed 56       	subi	r30, 0x6D	; 109
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     7e2:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <trtAccept+0x16>
    (*s)--;
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7ee:	78 94       	sei
  return temp ;
}
     7f0:	08 95       	ret

000007f2 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7f2:	87 e6       	ldi	r24, 0x67	; 103
     7f4:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7f8:	e1 ec       	ldi	r30, 0xC1	; 193
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	88 e1       	ldi	r24, 0x18	; 24
     7fe:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     800:	10 92 88 01 	sts	0x0188, r1
     804:	10 92 87 01 	sts	0x0187, r1
  tx_out = 0;
     808:	10 92 8a 01 	sts	0x018A, r1
     80c:	10 92 89 01 	sts	0x0189, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     810:	80 81       	ld	r24, Z
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 83       	st	Z, r24
}
     816:	08 95       	ret

00000818 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     82e:	20 91 87 01 	lds	r18, 0x0187
     832:	30 91 88 01 	lds	r19, 0x0188
     836:	80 91 89 01 	lds	r24, 0x0189
     83a:	90 91 8a 01 	lds	r25, 0x018A
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	31 f4       	brne	.+12     	; 0x850 <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     844:	80 91 c1 00 	lds	r24, 0x00C1
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 93 c1 00 	sts	0x00C1, r24
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     850:	e0 91 89 01 	lds	r30, 0x0189
     854:	f0 91 8a 01 	lds	r31, 0x018A
     858:	e5 57       	subi	r30, 0x75	; 117
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	80 81       	ld	r24, Z
     85e:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     862:	80 91 89 01 	lds	r24, 0x0189
     866:	90 91 8a 01 	lds	r25, 0x018A
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 8a 01 	sts	0x018A, r25
     870:	80 93 89 01 	sts	0x0189, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     874:	80 91 89 01 	lds	r24, 0x0189
     878:	90 91 8a 01 	lds	r25, 0x018A
     87c:	88 3c       	cpi	r24, 0xC8	; 200
     87e:	91 05       	cpc	r25, r1
     880:	21 f4       	brne	.+8      	; 0x88a <__vector_21+0x72>
     882:	10 92 8a 01 	sts	0x018A, r1
     886:	10 92 89 01 	sts	0x0189, r1
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8a0:	1f 93       	push	r17
     8a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	19 f4       	brne	.+6      	; 0x8ae <uart_putchar+0xe>
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
  char i = tx_in;
     8ae:	80 91 87 01 	lds	r24, 0x0187
     8b2:	90 91 88 01 	lds	r25, 0x0188
  i++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b8:	88 3c       	cpi	r24, 0xC8	; 200
     8ba:	09 f4       	brne	.+2      	; 0x8be <uart_putchar+0x1e>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8be:	e0 91 87 01 	lds	r30, 0x0187
     8c2:	f0 91 88 01 	lds	r31, 0x0188
     8c6:	e5 57       	subi	r30, 0x75	; 117
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	80 91 89 01 	lds	r24, 0x0189
     8d4:	90 91 8a 01 	lds	r25, 0x018A
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	c9 f3       	breq	.-14     	; 0x8d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8de:	30 93 88 01 	sts	0x0188, r19
     8e2:	20 93 87 01 	sts	0x0187, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	1f 91       	pop	r17
     8f6:	08 95       	ret

000008f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91a:	80 91 c6 00 	lds	r24, 0x00C6
     91e:	80 93 a7 02 	sts	0x02A7, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     958:	80 91 35 01 	lds	r24, 0x0135
     95c:	90 91 36 01 	lds	r25, 0x0136
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <uart_getchar+0x1c>
     964:	a1 c0       	rjmp	.+322    	; 0xaa8 <uart_getchar+0x15e>
     966:	07 e3       	ldi	r16, 0x37	; 55
     968:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	if (UCSR0A & _BV(FE0))
     970:	80 91 c0 00 	lds	r24, 0x00C0
     974:	84 ff       	sbrs	r24, 4
     976:	03 c0       	rjmp	.+6      	; 0x97e <uart_getchar+0x34>
     978:	2e ef       	ldi	r18, 0xFE	; 254
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	a9 c0       	rjmp	.+338    	; 0xad0 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     97e:	80 91 c0 00 	lds	r24, 0x00C0
     982:	83 fd       	sbrc	r24, 3
     984:	a3 c0       	rjmp	.+326    	; 0xacc <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     986:	90 91 a7 02 	lds	r25, 0x02A7

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     98a:	9d 30       	cpi	r25, 0x0D	; 13
     98c:	11 f0       	breq	.+4      	; 0x992 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	81 f4       	brne	.+32     	; 0x9b2 <uart_getchar+0x68>
	  {
	    *cp = c;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	f8 01       	movw	r30, r16
     996:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	    rxp = b;
     99e:	87 e3       	ldi	r24, 0x37	; 55
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	90 93 36 01 	sts	0x0136, r25
     9a6:	80 93 35 01 	sts	0x0135, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b2:	99 30       	cpi	r25, 0x09	; 9
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <uart_getchar+0x6e>
     9b6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9b8:	89 2f       	mov	r24, r25
     9ba:	80 52       	subi	r24, 0x20	; 32
     9bc:	8f 35       	cpi	r24, 0x5F	; 95
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <uart_getchar+0x7a>
     9c0:	90 3a       	cpi	r25, 0xA0	; 160
     9c2:	70 f0       	brcs	.+28     	; 0x9e0 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	06 38       	cpi	r16, 0x86	; 134
     9c8:	1f 07       	cpc	r17, r31
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d0:	f8 01       	movw	r30, r16
     9d2:	91 93       	st	Z+, r25
     9d4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9d6:	89 2f       	mov	r24, r25
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     9de:	c5 cf       	rjmp	.-118    	; 0x96a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e0:	92 31       	cpi	r25, 0x12	; 18
     9e2:	39 f1       	breq	.+78     	; 0xa32 <uart_getchar+0xe8>
     9e4:	93 31       	cpi	r25, 0x13	; 19
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <uart_getchar+0xac>
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <uart_getchar+0xa4>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <uart_getchar+0x182>
     9ee:	98 30       	cpi	r25, 0x08	; 8
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <uart_getchar+0xaa>
     9f2:	bb cf       	rjmp	.-138    	; 0x96a <uart_getchar+0x20>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <uart_getchar+0xbe>
     9f6:	97 31       	cpi	r25, 0x17	; 23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <uart_getchar+0xb2>
     9fa:	4b c0       	rjmp	.+150    	; 0xa92 <uart_getchar+0x148>
     9fc:	9f 37       	cpi	r25, 0x7F	; 127
     9fe:	21 f0       	breq	.+8      	; 0xa08 <uart_getchar+0xbe>
     a00:	95 31       	cpi	r25, 0x15	; 21
     a02:	09 f0       	breq	.+2      	; 0xa06 <uart_getchar+0xbc>
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <uart_getchar+0x20>
     a06:	32 c0       	rjmp	.+100    	; 0xa6c <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	07 33       	cpi	r16, 0x37	; 55
     a0c:	1f 07       	cpc	r17, r31
     a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_getchar+0xc8>
     a10:	08 f4       	brcc	.+2      	; 0xa14 <uart_getchar+0xca>
     a12:	ab cf       	rjmp	.-170    	; 0x96a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	10 40       	sbci	r17, 0x00	; 0
     a30:	9c cf       	rjmp	.-200    	; 0x96a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a3a:	c7 e3       	ldi	r28, 0x37	; 55
     a3c:	d1 e0       	ldi	r29, 0x01	; 1
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a40:	89 91       	ld	r24, Y+
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a48:	c0 17       	cp	r28, r16
     a4a:	d1 07       	cpc	r29, r17
     a4c:	c8 f3       	brcs	.-14     	; 0xa40 <uart_getchar+0xf6>
     a4e:	8d cf       	rjmp	.-230    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	07 33       	cpi	r16, 0x37	; 55
     a70:	18 07       	cpc	r17, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <uart_getchar+0x12c>
     a74:	68 f7       	brcc	.-38     	; 0xa50 <uart_getchar+0x106>
     a76:	79 cf       	rjmp	.-270    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a90:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a92:	e1 e0       	ldi	r30, 0x01	; 1
     a94:	07 33       	cpi	r16, 0x37	; 55
     a96:	1e 07       	cpc	r17, r30
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x152>
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <uart_getchar+0x154>
     a9c:	66 cf       	rjmp	.-308    	; 0x96a <uart_getchar+0x20>
     a9e:	e8 01       	movw	r28, r16
     aa0:	8a 91       	ld	r24, -Y
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	49 f7       	brne	.-46     	; 0xa78 <uart_getchar+0x12e>
     aa6:	61 cf       	rjmp	.-318    	; 0x96a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aa8:	e0 91 35 01 	lds	r30, 0x0135
     aac:	f0 91 36 01 	lds	r31, 0x0136
     ab0:	81 91       	ld	r24, Z+
     ab2:	f0 93 36 01 	sts	0x0136, r31
     ab6:	e0 93 35 01 	sts	0x0135, r30
  if (c == '\n')
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <uart_getchar+0x17c>
    rxp = 0;
     abe:	10 92 36 01 	sts	0x0136, r1
     ac2:	10 92 35 01 	sts	0x0135, r1

  return c;
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <uart_getchar+0x186>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad0:	c9 01       	movw	r24, r18
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <__vector_2>:

//function signatures
void InitLCD(void);

// --- external interrupt ISR ------------------------
ISR (INT1_vect) {
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
		if (PORTA & 0x01){
     b02:	10 9b       	sbis	0x02, 0	; 2
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <__vector_2+0x2c>
			TCNT2  = 0; 	//Reset timer 2 so we can start measuring the width
     b06:	10 92 b2 00 	sts	0x00B2, r1
     b0a:	34 c0       	rjmp	.+104    	; 0xb74 <__vector_2+0x94>
							//of the pulse;
		}
		else {
			duration = TCNT2 + durationOVF;
     b0c:	20 91 b2 00 	lds	r18, 0x00B2
     b10:	80 91 32 01 	lds	r24, 0x0132
     b14:	90 91 33 01 	lds	r25, 0x0133
     b18:	82 0f       	add	r24, r18
     b1a:	91 1d       	adc	r25, r1
     b1c:	90 93 31 01 	sts	0x0131, r25
     b20:	80 93 30 01 	sts	0x0130, r24
	        durationOVF = 0;
     b24:	10 92 33 01 	sts	0x0133, r1
     b28:	10 92 32 01 	sts	0x0132, r1
			distance = 171.6 * duration * 0.000064;
     b2c:	60 91 30 01 	lds	r22, 0x0130
     b30:	70 91 31 01 	lds	r23, 0x0131
     b34:	88 27       	eor	r24, r24
     b36:	77 fd       	sbrc	r23, 7
     b38:	80 95       	com	r24
     b3a:	98 2f       	mov	r25, r24
     b3c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
     b40:	2a e9       	ldi	r18, 0x9A	; 154
     b42:	39 e9       	ldi	r19, 0x99	; 153
     b44:	4b e2       	ldi	r20, 0x2B	; 43
     b46:	53 e4       	ldi	r21, 0x43	; 67
     b48:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
     b4c:	2d eb       	ldi	r18, 0xBD	; 189
     b4e:	37 e3       	ldi	r19, 0x37	; 55
     b50:	46 e8       	ldi	r20, 0x86	; 134
     b52:	58 e3       	ldi	r21, 0x38	; 56
     b54:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
     b58:	60 93 57 02 	sts	0x0257, r22
     b5c:	70 93 58 02 	sts	0x0258, r23
     b60:	80 93 59 02 	sts	0x0259, r24
     b64:	90 93 5a 02 	sts	0x025A, r25
			sonarFinished = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 a6 02 	sts	0x02A6, r24
			trtSignal(SEM_SONAR);
     b6e:	85 e0       	ldi	r24, 0x05	; 5
     b70:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
		}
}
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_11>:

// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
        durationOVF += 255;
     ba4:	80 91 32 01 	lds	r24, 0x0132
     ba8:	90 91 33 01 	lds	r25, 0x0133
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	90 93 33 01 	sts	0x0133, r25
     bb4:	80 93 32 01 	sts	0x0132, r24
}
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <sonar>:

// --- define a task for making sonar measurements
void sonar(void* args){
     bc6:	2f 92       	push	r2
     bc8:	3f 92       	push	r3
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
     bce:	6f 92       	push	r6
     bd0:	7f 92       	push	r7
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	33 24       	eor	r3, r3
     be8:	77 24       	eor	r7, r7
     bea:	88 24       	eor	r8, r8
     bec:	99 24       	eor	r9, r9
     bee:	cc 24       	eor	r12, r12
     bf0:	dd 24       	eor	r13, r13
     bf2:	44 24       	eor	r4, r4
     bf4:	55 24       	eor	r5, r5
     bf6:	53 94       	inc	r5
     bf8:	66 24       	eor	r6, r6
						numSamples =0 ;
					}
				}
			}
			else if (distance <= minDist){
				overflow = 1;
     bfa:	22 24       	eor	r2, r2
     bfc:	23 94       	inc	r2
	uint8_t measuringRefHeight = 1;
	uint8_t measuringNewHeight = 0;

	while(1){
		
		PORTA |= 0x01;	//Set the trigger pin high to start the pulse
     bfe:	10 9a       	sbi	0x02, 0	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c00:	85 e3       	ldi	r24, 0x35	; 53
     c02:	8a 95       	dec	r24
     c04:	f1 f7       	brne	.-4      	; 0xc02 <sonar+0x3c>
		_delay_us(10);	//Give the ultrasonic 10 us to send the pulse
		PORTA &= ~0x01;	//Set the trigger pin low to stop transmitting
     c06:	10 98       	cbi	0x02, 0	; 2
		sonarFinished = 0;
     c08:	10 92 a6 02 	sts	0x02A6, r1
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <sonar+0x4e>
		//Use TRTAccept to read the sonarFinishedSemaphor
		while (!sonarFinished){
			trtWait(SEM_SONAR);
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		PORTA |= 0x01;	//Set the trigger pin high to start the pulse
		_delay_us(10);	//Give the ultrasonic 10 us to send the pulse
		PORTA &= ~0x01;	//Set the trigger pin low to stop transmitting
		sonarFinished = 0;
		//Use TRTAccept to read the sonarFinishedSemaphor
		while (!sonarFinished){
     c14:	80 91 a6 02 	lds	r24, 0x02A6
     c18:	88 23       	and	r24, r24
     c1a:	c9 f3       	breq	.-14     	; 0xc0e <sonar+0x48>
			trtWait(SEM_SONAR);
		}
		numSamples++;
     c1c:	93 94       	inc	r9

		//if this is the first sample, just record the distance
		//as the height, previous measurement, and first sample.
		if (!firstMeasurementTaken){
     c1e:	dd 20       	and	r13, r13
     c20:	21 f5       	brne	.+72     	; 0xc6a <sonar+0xa4>
			prevDistance = distance;
     c22:	60 91 57 02 	lds	r22, 0x0257
     c26:	70 91 58 02 	lds	r23, 0x0258
     c2a:	80 91 59 02 	lds	r24, 0x0259
     c2e:	90 91 5a 02 	lds	r25, 0x025A
     c32:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     c36:	c6 2e       	mov	r12, r22
			heightAvg = distance;
     c38:	60 91 57 02 	lds	r22, 0x0257
     c3c:	70 91 58 02 	lds	r23, 0x0258
     c40:	80 91 59 02 	lds	r24, 0x0259
     c44:	90 91 5a 02 	lds	r25, 0x025A
     c48:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     c4c:	86 2e       	mov	r8, r22
			firstMeasurementTaken = 1;
			firstSample = distance;
     c4e:	60 91 57 02 	lds	r22, 0x0257
     c52:	70 91 58 02 	lds	r23, 0x0258
     c56:	80 91 59 02 	lds	r24, 0x0259
     c5a:	90 91 5a 02 	lds	r25, 0x025A
     c5e:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     c62:	46 2e       	mov	r4, r22
     c64:	dd 24       	eor	r13, r13
     c66:	d3 94       	inc	r13
     c68:	1d c1       	rjmp	.+570    	; 0xea4 <sonar+0x2de>

		//Otherwise determine what we wanted to measure
		//and whether or not the state ofthe cooker has changed
		else {
			//check if the measurement is valid.
			if  (distance < maxDist and distance > minDist) {
     c6a:	60 91 57 02 	lds	r22, 0x0257
     c6e:	70 91 58 02 	lds	r23, 0x0258
     c72:	80 91 59 02 	lds	r24, 0x0259
     c76:	90 91 5a 02 	lds	r25, 0x025A
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 ef       	ldi	r20, 0xF0	; 240
     c80:	51 e4       	ldi	r21, 0x41	; 65
     c82:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__ltsf2>
     c86:	88 23       	and	r24, r24
     c88:	0c f0       	brlt	.+2      	; 0xc8c <sonar+0xc6>
     c8a:	e3 c0       	rjmp	.+454    	; 0xe52 <sonar+0x28c>
     c8c:	60 91 57 02 	lds	r22, 0x0257
     c90:	70 91 58 02 	lds	r23, 0x0258
     c94:	80 91 59 02 	lds	r24, 0x0259
     c98:	90 91 5a 02 	lds	r25, 0x025A
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e4       	ldi	r20, 0x40	; 64
     ca2:	50 e4       	ldi	r21, 0x40	; 64
     ca4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gtsf2>
     ca8:	18 16       	cp	r1, r24
     caa:	0c f0       	brlt	.+2      	; 0xcae <sonar+0xe8>
     cac:	d2 c0       	rjmp	.+420    	; 0xe52 <sonar+0x28c>
				
				//check if the depth increased by more than 5cm (corresponds to
				// adding or removing food).
				if (distance - prevDistance > threshold or prevDistance - distance > 5){
     cae:	e0 90 57 02 	lds	r14, 0x0257
     cb2:	f0 90 58 02 	lds	r15, 0x0258
     cb6:	00 91 59 02 	lds	r16, 0x0259
     cba:	10 91 5a 02 	lds	r17, 0x025A
     cbe:	6c 2d       	mov	r22, r12
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	88 27       	eor	r24, r24
     cc4:	77 fd       	sbrc	r23, 7
     cc6:	80 95       	com	r24
     cc8:	98 2f       	mov	r25, r24
     cca:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
     cce:	5b 01       	movw	r10, r22
     cd0:	6c 01       	movw	r12, r24
     cd2:	c8 01       	movw	r24, r16
     cd4:	b7 01       	movw	r22, r14
     cd6:	a6 01       	movw	r20, r12
     cd8:	95 01       	movw	r18, r10
     cda:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__subsf3>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 ea       	ldi	r20, 0xA0	; 160
     ce4:	50 e4       	ldi	r21, 0x40	; 64
     ce6:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	a4 f0       	brlt	.+40     	; 0xd16 <sonar+0x150>
     cee:	20 91 57 02 	lds	r18, 0x0257
     cf2:	30 91 58 02 	lds	r19, 0x0258
     cf6:	40 91 59 02 	lds	r20, 0x0259
     cfa:	50 91 5a 02 	lds	r21, 0x025A
     cfe:	c6 01       	movw	r24, r12
     d00:	b5 01       	movw	r22, r10
     d02:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__subsf3>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 ea       	ldi	r20, 0xA0	; 160
     d0c:	50 e4       	ldi	r21, 0x40	; 64
     d0e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__gtsf2>
     d12:	18 16       	cp	r1, r24
     d14:	f4 f4       	brge	.+60     	; 0xd52 <sonar+0x18c>
					numSamples = 1;
					firstSample = distance;
     d16:	60 91 57 02 	lds	r22, 0x0257
     d1a:	70 91 58 02 	lds	r23, 0x0258
     d1e:	80 91 59 02 	lds	r24, 0x0259
     d22:	90 91 5a 02 	lds	r25, 0x025A
     d26:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     d2a:	46 2e       	mov	r4, r22
					newHeight = distance;
     d2c:	60 91 57 02 	lds	r22, 0x0257
     d30:	70 91 58 02 	lds	r23, 0x0258
     d34:	80 91 59 02 	lds	r24, 0x0259
     d38:	90 91 5a 02 	lds	r25, 0x025A
     d3c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     d40:	76 2e       	mov	r7, r22
     d42:	99 24       	eor	r9, r9
     d44:	93 94       	inc	r9
     d46:	dd 24       	eor	r13, r13
     d48:	d3 94       	inc	r13
     d4a:	55 24       	eor	r5, r5
     d4c:	66 24       	eor	r6, r6
     d4e:	63 94       	inc	r6
     d50:	9e c0       	rjmp	.+316    	; 0xe8e <sonar+0x2c8>
					measuringNewHeight = 1;
					measuringRefHeight = 0;
				}
				
				else {
					if (!measuringNewHeight){
     d52:	66 20       	and	r6, r6
     d54:	31 f5       	brne	.+76     	; 0xda2 <sonar+0x1dc>
						if (!numSamples){
     d56:	99 20       	and	r9, r9
     d58:	61 f4       	brne	.+24     	; 0xd72 <sonar+0x1ac>
							firstSample = distance;
     d5a:	60 91 57 02 	lds	r22, 0x0257
     d5e:	70 91 58 02 	lds	r23, 0x0258
     d62:	80 91 59 02 	lds	r24, 0x0259
     d66:	90 91 5a 02 	lds	r25, 0x025A
     d6a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     d6e:	46 2e       	mov	r4, r22
     d70:	88 24       	eor	r8, r8
							heightAvg = 0;
						}
						heightAvg += distance;
     d72:	e0 90 57 02 	lds	r14, 0x0257
     d76:	f0 90 58 02 	lds	r15, 0x0258
     d7a:	00 91 59 02 	lds	r16, 0x0259
     d7e:	10 91 5a 02 	lds	r17, 0x025A
     d82:	68 2d       	mov	r22, r8
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	88 27       	eor	r24, r24
     d88:	77 fd       	sbrc	r23, 7
     d8a:	80 95       	com	r24
     d8c:	98 2f       	mov	r25, r24
     d8e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
     d92:	a8 01       	movw	r20, r16
     d94:	97 01       	movw	r18, r14
     d96:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3>
     d9a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     d9e:	86 2e       	mov	r8, r22
     da0:	17 c0       	rjmp	.+46     	; 0xdd0 <sonar+0x20a>
					}
					else {
						newHeight += distance;
     da2:	e0 90 57 02 	lds	r14, 0x0257
     da6:	f0 90 58 02 	lds	r15, 0x0258
     daa:	00 91 59 02 	lds	r16, 0x0259
     dae:	10 91 5a 02 	lds	r17, 0x025A
     db2:	67 2d       	mov	r22, r7
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	88 27       	eor	r24, r24
     db8:	77 fd       	sbrc	r23, 7
     dba:	80 95       	com	r24
     dbc:	98 2f       	mov	r25, r24
     dbe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
     dc2:	a8 01       	movw	r20, r16
     dc4:	97 01       	movw	r18, r14
     dc6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3>
     dca:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     dce:	76 2e       	mov	r7, r22
					}
					numSamples++;
     dd0:	93 94       	inc	r9
				}	
				//check if we are done sampling
				if (numSamples == desiredNumSamples){
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	98 16       	cp	r9, r24
     dd6:	01 f5       	brne	.+64     	; 0xe18 <sonar+0x252>
					//check if we are setting the reference height
					//or the new height
					if (!measuringNewHeight){
     dd8:	66 20       	and	r6, r6
     dda:	09 f5       	brne	.+66     	; 0xe1e <sonar+0x258>
						heightAvg <<= 6;
     ddc:	82 94       	swap	r8
     dde:	88 0c       	add	r8, r8
     de0:	88 0c       	add	r8, r8
     de2:	a0 ec       	ldi	r26, 0xC0	; 192
     de4:	8a 22       	and	r8, r26
						//check if the measurement has increased substantially
						//since taking the first sample. If so, the water level
						//is rising and we should start sampling again
						if (heightAvg - firstSample > threshold or firstSample - heightAvg > threshold){
     de6:	48 2d       	mov	r20, r8
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	24 2d       	mov	r18, r4
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	ca 01       	movw	r24, r20
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
     df4:	06 97       	sbiw	r24, 0x06	; 6
     df6:	0c f0       	brlt	.+2      	; 0xdfa <sonar+0x234>
     df8:	45 c0       	rjmp	.+138    	; 0xe84 <sonar+0x2be>
     dfa:	24 1b       	sub	r18, r20
     dfc:	35 0b       	sbc	r19, r21
     dfe:	26 30       	cpi	r18, 0x06	; 6
     e00:	31 05       	cpc	r19, r1
     e02:	0c f0       	brlt	.+2      	; 0xe06 <sonar+0x240>
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <sonar+0x2be>
						}

						//the water level has settled. Set the reference height flag
						//and clear the measuring reference height flag
						else{
							if (measuringRefHeight){
     e06:	55 20       	and	r5, r5
     e08:	31 f0       	breq	.+12     	; 0xe16 <sonar+0x250>
     e0a:	38 2c       	mov	r3, r8
     e0c:	99 24       	eor	r9, r9
     e0e:	dd 24       	eor	r13, r13
     e10:	d3 94       	inc	r13
     e12:	55 24       	eor	r5, r5
     e14:	3c c0       	rjmp	.+120    	; 0xe8e <sonar+0x2c8>
     e16:	99 24       	eor	r9, r9
     e18:	dd 24       	eor	r13, r13
     e1a:	d3 94       	inc	r13
     e1c:	38 c0       	rjmp	.+112    	; 0xe8e <sonar+0x2c8>
					//of the bath
					else{
						//set the new height of the bath, calculate the thickness
						//of the food, and signal the heating task to start heating
						//the water
						newHeight <<= 6;
     e1e:	72 94       	swap	r7
     e20:	77 0c       	add	r7, r7
     e22:	77 0c       	add	r7, r7
     e24:	f0 ec       	ldi	r31, 0xC0	; 192
     e26:	7f 22       	and	r7, r31
						newHeightSet = 1;
						measuringNewHeight = 0;
						trtWait(SEM_THICKNESS);
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
						thickness = areaRatio * (newHeight - refHeight);
     e2e:	87 2d       	mov	r24, r7
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	83 19       	sub	r24, r3
     e34:	91 09       	sbc	r25, r1
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	80 93 2e 01 	sts	0x012E, r24
						trtSignal(SEM_THICKNESS);
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
						trtSignal(SEM_START_HEATING);
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     e4a:	99 24       	eor	r9, r9
     e4c:	dd 24       	eor	r13, r13
     e4e:	d3 94       	inc	r13
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <sonar+0x2b4>
						numSamples =0 ;
					}
				}
			}
			else if (distance <= minDist){
     e52:	60 91 57 02 	lds	r22, 0x0257
     e56:	70 91 58 02 	lds	r23, 0x0258
     e5a:	80 91 59 02 	lds	r24, 0x0259
     e5e:	90 91 5a 02 	lds	r25, 0x025A
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e4       	ldi	r20, 0x40	; 64
     e68:	50 e4       	ldi	r21, 0x40	; 64
     e6a:	0e 94 ae 0c 	call	0x195c	; 0x195c <__lesf2>
     e6e:	18 16       	cp	r1, r24
     e70:	34 f4       	brge	.+12     	; 0xe7e <sonar+0x2b8>
     e72:	99 24       	eor	r9, r9
     e74:	dd 24       	eor	r13, r13
     e76:	55 24       	eor	r5, r5
     e78:	53 94       	inc	r5
     e7a:	66 24       	eor	r6, r6
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <sonar+0x2c8>
				overflow = 1;
     e7e:	20 92 34 01 	sts	0x0134, r2
     e82:	ca cf       	rjmp	.-108    	; 0xe18 <sonar+0x252>
     e84:	99 24       	eor	r9, r9
     e86:	dd 24       	eor	r13, r13
     e88:	d3 94       	inc	r13
     e8a:	55 24       	eor	r5, r5
     e8c:	53 94       	inc	r5
				measuringNewHeight = 0;
				measuringRefHeight = 1;
				numSamples = 0;
			}

			prevDistance = distance;
     e8e:	60 91 57 02 	lds	r22, 0x0257
     e92:	70 91 58 02 	lds	r23, 0x0258
     e96:	80 91 59 02 	lds	r24, 0x0259
     e9a:	90 91 5a 02 	lds	r25, 0x025A
     e9e:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fixunssfsi>
     ea2:	c6 2e       	mov	r12, r22
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     ea4:	20 91 9e 02 	lds	r18, 0x029E
     ea8:	30 91 9f 02 	lds	r19, 0x029F
     eac:	40 91 a0 02 	lds	r20, 0x02A0
     eb0:	50 91 a1 02 	lds	r21, 0x02A1
     eb4:	a9 01       	movw	r20, r18
     eb6:	33 27       	eor	r19, r19
     eb8:	22 27       	eor	r18, r18
     eba:	60 91 84 00 	lds	r22, 0x0084
     ebe:	70 91 85 00 	lds	r23, 0x0085
		}

		rel = trtCurrentTime() + SECONDS2TICKS(0.015625);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.02);
	    trtSleepUntil(rel, dead);
     ec2:	e0 90 84 00 	lds	r14, 0x0084
     ec6:	f0 90 85 00 	lds	r15, 0x0085
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	62 0f       	add	r22, r18
     ed0:	73 1f       	adc	r23, r19
     ed2:	84 1f       	adc	r24, r20
     ed4:	95 1f       	adc	r25, r21
     ed6:	6c 50       	subi	r22, 0x0C	; 12
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	2e 0d       	add	r18, r14
     ee4:	3f 1d       	adc	r19, r15
     ee6:	40 1f       	adc	r20, r16
     ee8:	51 1f       	adc	r21, r17
     eea:	28 5c       	subi	r18, 0xC8	; 200
     eec:	3e 4f       	sbci	r19, 0xFE	; 254
     eee:	4f 4f       	sbci	r20, 0xFF	; 255
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
     ef6:	83 ce       	rjmp	.-762    	; 0xbfe <sonar+0x38>

00000ef8 <pidControl>:
*/

//PID Control Stuff keep the water temperature constant
// --- define task 1  ----------------------------------------
void pidControl(void* args) 
  {	
     ef8:	5f 92       	push	r5
     efa:	6f 92       	push	r6
     efc:	7f 92       	push	r7
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
	int16_t output;
	int16_t integral = 0;
	
	uint8_t first = 1;

	DDRB = 0xff;
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
     f1a:	15 b8       	out	0x05, r1	; 5
     f1c:	cc 24       	eor	r12, r12
     f1e:	dd 24       	eor	r13, r13
     f20:	66 24       	eor	r6, r6
     f22:	77 24       	eor	r7, r7
     f24:	88 24       	eor	r8, r8
     f26:	99 24       	eor	r9, r9
     f28:	aa 24       	eor	r10, r10
     f2a:	bb 24       	eor	r11, r11
     f2c:	01 e0       	ldi	r16, 0x01	; 1
		//clamp the output between 0 and 255 so we can directly set OCR0A
		if (output < 0){
			OCR0A = 0;
		}
		else if (output > 255) {
			OCR0A = 255;
     f2e:	55 24       	eor	r5, r5
     f30:	5a 94       	dec	r5
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <pidControl+0x42>
	PORTB = 0;
	while(1)
	{

		while (!startHeating){
			trtWait(SEM_START_HEATING);
     f34:	87 e0       	ldi	r24, 0x07	; 7
     f36:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	DDRB = 0xff;
	PORTB = 0;
	while(1)
	{

		while (!startHeating){
     f3a:	80 91 2f 01 	lds	r24, 0x012F
     f3e:	88 23       	and	r24, r24
     f40:	c9 f3       	breq	.-14     	; 0xf34 <pidControl+0x3c>
			trtWait(SEM_START_HEATING);
		}

		//localTemp = get this from ADC * transductionConstant 
		//update the previous measuremtns
		if (!first){
     f42:	00 23       	and	r16, r16
     f44:	11 f4       	brne	.+4      	; 0xf4a <pidControl+0x52>
     f46:	36 01       	movw	r6, r12
     f48:	89 2c       	mov	r8, r9



		localWaterTemp = 0;
		//make local copies of the system parameters
		trtWait(SEM_TEMP);
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		waterTemp = localWaterTemp; 
     f50:	10 92 25 01 	sts	0x0125, r1
		trtSignal(SEM_TEMP);
     f54:	84 e0       	ldi	r24, 0x04	; 4
     f56:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_TEMP_REF);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localWaterTempRef = waterTempRef;
     f60:	10 91 23 01 	lds	r17, 0x0123
		trtSignal(SEM_TEMP_REF);
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Proportional Error
		error = localWaterTempRef - localWaterTemp;
     f6a:	c1 2e       	mov	r12, r17
     f6c:	dd 24       	eor	r13, r13

		//Integral Error

		//Get the current sign of the error
		if (!first) {
     f6e:	00 23       	and	r16, r16
     f70:	91 f4       	brne	.+36     	; 0xf96 <pidControl+0x9e>
			if (error - prevError > 0){
     f72:	e6 01       	movw	r28, r12
     f74:	c6 19       	sub	r28, r6
     f76:	d7 09       	sbc	r29, r7
     f78:	1c 16       	cp	r1, r28
     f7a:	1d 06       	cpc	r1, r29
     f7c:	1c f4       	brge	.+6      	; 0xf84 <pidControl+0x8c>
     f7e:	99 24       	eor	r9, r9
     f80:	93 94       	inc	r9
     f82:	4f c0       	rjmp	.+158    	; 0x1022 <pidControl+0x12a>
				sign = 1;
			}
			else if (error - prevError < 0) {
     f84:	20 97       	sbiw	r28, 0x00	; 0
     f86:	09 f4       	brne	.+2      	; 0xf8a <pidControl+0x92>
     f88:	4b c0       	rjmp	.+150    	; 0x1020 <pidControl+0x128>
     f8a:	99 24       	eor	r9, r9
     f8c:	9a 94       	dec	r9
     f8e:	49 c0       	rjmp	.+146    	; 0x1022 <pidControl+0x12a>
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
				integral += error;
     f90:	ac 0c       	add	r10, r12
     f92:	bd 1c       	adc	r11, r13
     f94:	4b c0       	rjmp	.+150    	; 0x102c <pidControl+0x134>
		//determine what the output should be
		if (!first){
			output = k_p * error + k_i * integral + k_d * derivative;
		}
		else{
			output = k_p * error;
     f96:	b6 01       	movw	r22, r12
     f98:	88 27       	eor	r24, r24
     f9a:	77 fd       	sbrc	r23, 7
     f9c:	80 95       	com	r24
     f9e:	98 2f       	mov	r25, r24
     fa0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
     fa4:	23 e3       	ldi	r18, 0x33	; 51
     fa6:	33 e3       	ldi	r19, 0x33	; 51
     fa8:	43 ee       	ldi	r20, 0xE3	; 227
     faa:	50 e4       	ldi	r21, 0x40	; 64
     fac:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
     fb0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
			first = 0;
		}

		//clamp the output between 0 and 255 so we can directly set OCR0A
		if (output < 0){
     fb4:	77 ff       	sbrs	r23, 7
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <pidControl+0xc4>
			OCR0A = 0;
     fb8:	17 bc       	out	0x27, r1	; 39
     fba:	07 c0       	rjmp	.+14     	; 0xfca <pidControl+0xd2>
		}
		else if (output > 255) {
     fbc:	6f 3f       	cpi	r22, 0xFF	; 255
     fbe:	71 05       	cpc	r23, r1
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <pidControl+0xd0>
     fc2:	14 f0       	brlt	.+4      	; 0xfc8 <pidControl+0xd0>
			OCR0A = 255;
     fc4:	57 bc       	out	0x27, r5	; 39
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <pidControl+0xd2>
		}
		else {
			OCR0A = output;
     fc8:	67 bd       	out	0x27, r22	; 39
     fca:	20 91 9e 02 	lds	r18, 0x029E
     fce:	30 91 9f 02 	lds	r19, 0x029F
     fd2:	40 91 a0 02 	lds	r20, 0x02A0
     fd6:	50 91 a1 02 	lds	r21, 0x02A1
     fda:	a9 01       	movw	r20, r18
     fdc:	33 27       	eor	r19, r19
     fde:	22 27       	eor	r18, r18
     fe0:	60 91 84 00 	lds	r22, 0x0084
     fe4:	70 91 85 00 	lds	r23, 0x0085
		}

		//Set the task to execute again in 0.02 seconds.
		rel = trtCurrentTime() + SECONDS2TICKS(0.02);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.025);
	    trtSleepUntil(rel, dead);
     fe8:	e0 90 84 00 	lds	r14, 0x0084
     fec:	f0 90 85 00 	lds	r15, 0x0085
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	62 0f       	add	r22, r18
     ff6:	73 1f       	adc	r23, r19
     ff8:	84 1f       	adc	r24, r20
     ffa:	95 1f       	adc	r25, r21
     ffc:	68 5c       	subi	r22, 0xC8	; 200
     ffe:	7e 4f       	sbci	r23, 0xFE	; 254
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	2e 0d       	add	r18, r14
    100a:	3f 1d       	adc	r19, r15
    100c:	40 1f       	adc	r20, r16
    100e:	51 1f       	adc	r21, r17
    1010:	2a 57       	subi	r18, 0x7A	; 122
    1012:	3e 4f       	sbci	r19, 0xFE	; 254
    1014:	4f 4f       	sbci	r20, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	8d cf       	rjmp	.-230    	; 0xf3a <pidControl+0x42>
	}
    1020:	99 24       	eor	r9, r9
			}
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
    1022:	98 14       	cp	r9, r8
    1024:	09 f4       	brne	.+2      	; 0x1028 <pidControl+0x130>
    1026:	b4 cf       	rjmp	.-152    	; 0xf90 <pidControl+0x98>
    1028:	aa 24       	eor	r10, r10
    102a:	bb 24       	eor	r11, r11
			derivative = error - prevError;
		}

		//determine what the output should be
		if (!first){
			output = k_p * error + k_i * integral + k_d * derivative;
    102c:	b6 01       	movw	r22, r12
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
    103a:	23 e3       	ldi	r18, 0x33	; 51
    103c:	33 e3       	ldi	r19, 0x33	; 51
    103e:	43 ee       	ldi	r20, 0xE3	; 227
    1040:	50 e4       	ldi	r21, 0x40	; 64
    1042:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
    1046:	7b 01       	movw	r14, r22
    1048:	8c 01       	movw	r16, r24
    104a:	b5 01       	movw	r22, r10
    104c:	88 27       	eor	r24, r24
    104e:	77 fd       	sbrc	r23, 7
    1050:	80 95       	com	r24
    1052:	98 2f       	mov	r25, r24
    1054:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
    1058:	2e ea       	ldi	r18, 0xAE	; 174
    105a:	37 e4       	ldi	r19, 0x47	; 71
    105c:	41 ee       	ldi	r20, 0xE1	; 225
    105e:	5d e3       	ldi	r21, 0x3D	; 61
    1060:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	c8 01       	movw	r24, r16
    106a:	b7 01       	movw	r22, r14
    106c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3>
    1070:	7b 01       	movw	r14, r22
    1072:	8c 01       	movw	r16, r24
    1074:	be 01       	movw	r22, r28
    1076:	88 27       	eor	r24, r24
    1078:	77 fd       	sbrc	r23, 7
    107a:	80 95       	com	r24
    107c:	98 2f       	mov	r25, r24
    107e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__floatsisf>
    1082:	2b e7       	ldi	r18, 0x7B	; 123
    1084:	34 e1       	ldi	r19, 0x14	; 20
    1086:	4e e2       	ldi	r20, 0x2E	; 46
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
    1092:	c8 01       	movw	r24, r16
    1094:	b7 01       	movw	r22, r14
    1096:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__addsf3>
    109a:	8a cf       	rjmp	.-236    	; 0xfb0 <pidControl+0xb8>

0000109c <main>:
  LCDclr();        //clear the display
  LCDGotoXY(0,0);
}

// --- Main Program ----------------------------------
int main(void) {
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17

  DDRD = 0b11111011;
    10a8:	8b ef       	ldi	r24, 0xFB	; 251
    10aa:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0;
    10ac:	1b b8       	out	0x0b, r1	; 11
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
    10ae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
    10b2:	64 e1       	ldi	r22, 0x14	; 20
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	70 93 ad 02 	sts	0x02AD, r23
    10ba:	60 93 ac 02 	sts	0x02AC, r22
    10be:	70 93 a9 02 	sts	0x02A9, r23
    10c2:	60 93 a8 02 	sts	0x02A8, r22
    10c6:	70 93 ab 02 	sts	0x02AB, r23
    10ca:	60 93 aa 02 	sts	0x02AA, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 36 19 	call	0x326c	; 0x326c <fputs>
  
  //initialize Timer2 and the external interrupt
  //set up INT0
	EIMSK = 1<<INT1 ; // turn on int0
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	8d bb       	out	0x1d, r24	; 29
	EICRA = 1 << ISC10 ;       // trigger on any edge edge
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	80 93 69 00 	sts	0x0069, r24
	// turn on timer 2 to be read in int0 ISR
	TCCR2B = 7 ; // divide by 1024
    10e0:	87 e0       	ldi	r24, 0x07	; 7
    10e2:	80 93 b1 00 	sts	0x00B1, r24
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 70 00 	sts	0x0070, r24

  //setup Timer 0
  // Set the timer for fast PWM mode, clear OC0A on Compare Match, set OC0A
  // at BOTTOM (non-inverting mode)
  TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); //Set the timer
    10ec:	83 e8       	ldi	r24, 0x83	; 131
    10ee:	84 bd       	out	0x24, r24	; 36

  //Set the prescalar to 256 so the PWM runs at less than 1000 Hz
  TCCR0B = (1 << CS02) | (1 << CS00);
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	85 bd       	out	0x25, r24	; 37

  OCR0A = 127;
    10f4:	8f e7       	ldi	r24, 0x7F	; 127
    10f6:	87 bd       	out	0x27, r24	; 39

  // start TRT
  trtInitKernel(128); // 80 bytes for the idle task stack
    10f8:	80 e8       	ldi	r24, 0x80	; 128
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 5f 02 	call	0x4be	; 0x4be <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1100:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1102:	10 92 94 02 	sts	0x0294, r1
  
  sei(); // set enabled interrupts;
    1106:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1108:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    110a:	10 92 95 02 	sts	0x0295, r1
  
  sei(); // set enabled interrupts;
    110e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1110:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 96 02 	sts	0x0296, r24
  
  sei(); // set enabled interrupts;
    1118:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    111a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    111c:	80 93 97 02 	sts	0x0297, r24
  
  sei(); // set enabled interrupts;
    1120:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1122:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1124:	80 93 99 02 	sts	0x0299, r24
  
  sei(); // set enabled interrupts;
    1128:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    112a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    112c:	80 93 9b 02 	sts	0x029B, r24
  
  sei(); // set enabled interrupts;
    1130:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1132:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1134:	10 92 9a 02 	sts	0x029A, r1
  
  sei(); // set enabled interrupts;
    1138:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    113a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    113c:	80 93 98 02 	sts	0x0298, r24
  
  sei(); // set enabled interrupts;
    1140:	78 94       	sei
  trtCreateSemaphore(SEM_THICKNESS, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_START_HEATING, 0) ; // protect shared variables
  trtCreateSemaphore(SEM_SONAR, 1); // Condition Variable for sonar measurement

 // --- creat tasks  ----------------
  trtCreateTask(pidControl, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
    1142:	8c e7       	ldi	r24, 0x7C	; 124
    1144:	97 e0       	ldi	r25, 0x07	; 7
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	71 e0       	ldi	r23, 0x01	; 1
    114a:	2d e0       	ldi	r18, 0x0D	; 13
    114c:	33 e0       	ldi	r19, 0x03	; 3
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	fd e0       	ldi	r31, 0x0D	; 13
    1154:	ef 2e       	mov	r14, r31
    1156:	f3 e0       	ldi	r31, 0x03	; 3
    1158:	ff 2e       	mov	r15, r31
    115a:	01 2d       	mov	r16, r1
    115c:	11 2d       	mov	r17, r1
    115e:	e3 e5       	ldi	r30, 0x53	; 83
    1160:	ce 2e       	mov	r12, r30
    1162:	e2 e0       	ldi	r30, 0x02	; 2
    1164:	de 2e       	mov	r13, r30
    1166:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
 // trtCreateTask(serialComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
 // trtCreateTask(displayParams, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
  trtCreateTask(sonar, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
    116a:	83 ee       	ldi	r24, 0xE3	; 227
    116c:	95 e0       	ldi	r25, 0x05	; 5
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	71 e0       	ldi	r23, 0x01	; 1
    1172:	2d e0       	ldi	r18, 0x0D	; 13
    1174:	33 e0       	ldi	r19, 0x03	; 3
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  
  sei();
    117e:	78 94       	sei
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
    1180:	83 b7       	in	r24, 0x33	; 51
    1182:	81 7f       	andi	r24, 0xF1	; 241
    1184:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    1186:	83 b7       	in	r24, 0x33	; 51
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
    118c:	88 95       	sleep
    118e:	fe cf       	rjmp	.-4      	; 0x118c <__stack+0x8d>

00001190 <InitLCD>:
	}
}
*/
// --- Initialize the LCD ----------------------------
void InitLCD(void){
  LCDinit();  //initialize the display
    1190:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LCDinit>
  LCDcursorOFF();
    1194:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCDcursorOFF>
  LCDclr();        //clear the display
    1198:	0e 94 11 09 	call	0x1222	; 0x1222 <LCDclr>
  LCDGotoXY(0,0);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	0e 94 2e 09 	call	0x125c	; 0x125c <LCDGotoXY>
}
    11a4:	08 95       	ret

000011a6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    11a6:	28 2f       	mov	r18, r24
    11a8:	20 7f       	andi	r18, 0xF0	; 240
    11aa:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    11ac:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    11ae:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b0:	20 ea       	ldi	r18, 0xA0	; 160
    11b2:	3f e0       	ldi	r19, 0x0F	; 15
    11b4:	f9 01       	movw	r30, r18
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    11ba:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    11bc:	40 98       	cbi	0x08, 0	; 8
    11be:	f9 01       	movw	r30, r18
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	44 e0       	ldi	r20, 0x04	; 4
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	4a 95       	dec	r20
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <LCDsendChar+0x22>
    11d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    11d2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    11d4:	42 9a       	sbi	0x08, 2	; 8
    11d6:	c9 01       	movw	r24, r18
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    11dc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    11de:	40 98       	cbi	0x08, 0	; 8
    11e0:	c9 01       	movw	r24, r18
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    11e6:	08 95       	ret

000011e8 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    11e8:	28 2f       	mov	r18, r24
    11ea:	20 7f       	andi	r18, 0xF0	; 240
    11ec:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    11ee:	42 9a       	sbi	0x08, 2	; 8
    11f0:	20 ea       	ldi	r18, 0xA0	; 160
    11f2:	3f e0       	ldi	r19, 0x0F	; 15
    11f4:	f9 01       	movw	r30, r18
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    11fa:	42 98       	cbi	0x08, 2	; 8
    11fc:	f9 01       	movw	r30, r18
    11fe:	31 97       	sbiw	r30, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	54 e0       	ldi	r21, 0x04	; 4
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	5a 95       	dec	r21
    120c:	e1 f7       	brne	.-8      	; 0x1206 <LCDsendCommand+0x1e>
    120e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1210:	42 9a       	sbi	0x08, 2	; 8
    1212:	c9 01       	movw	r24, r18
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1218:	42 98       	cbi	0x08, 2	; 8
    121a:	c9 01       	movw	r24, r18
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    1220:	08 95       	ret

00001222 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    1228:	08 95       	ret

0000122a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    1230:	08 95       	ret

00001232 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	49 f0       	breq	.+18     	; 0x1252 <LCDstring+0x20>
    1240:	ec 01       	movw	r28, r24
    1242:	10 e0       	ldi	r17, 0x00	; 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1246:	89 91       	ld	r24, Y+
    1248:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    124c:	1f 5f       	subi	r17, 0xFF	; 255
    124e:	10 17       	cp	r17, r16
    1250:	d0 f3       	brcs	.-12     	; 0x1246 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    125c:	62 30       	cpi	r22, 0x02	; 2
    125e:	31 f0       	breq	.+12     	; 0x126c <LCDGotoXY+0x10>
    1260:	63 30       	cpi	r22, 0x03	; 3
    1262:	31 f0       	breq	.+12     	; 0x1270 <LCDGotoXY+0x14>
    1264:	61 30       	cpi	r22, 0x01	; 1
    1266:	29 f4       	brne	.+10     	; 0x1272 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1268:	80 5c       	subi	r24, 0xC0	; 192
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    126c:	8c 5e       	subi	r24, 0xEC	; 236
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1270:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1272:	80 68       	ori	r24, 0x80	; 128
    1274:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
	
}
    1278:	08 95       	ret

0000127a <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1284:	64 2f       	mov	r22, r20
    1286:	0e 94 2e 09 	call	0x125c	; 0x125c <LCDGotoXY>
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    128e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1292:	1f 5f       	subi	r17, 0xFF	; 255
    1294:	fe 01       	movw	r30, r28
    1296:	e1 0f       	add	r30, r17
    1298:	f1 1d       	adc	r31, r1
    129a:	84 91       	lpm	r24, Z+
    129c:	88 23       	and	r24, r24
    129e:	b9 f7       	brne	.-18     	; 0x128e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	08 95       	ret

000012a8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	7c 01       	movw	r14, r24
    12b6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    12b8:	11 0f       	add	r17, r17
    12ba:	11 0f       	add	r17, r17
    12bc:	11 0f       	add	r17, r17
    12be:	10 64       	ori	r17, 0x40	; 64
    12c0:	c0 e0       	ldi	r28, 0x00	; 0
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    12c4:	f7 01       	movw	r30, r14
    12c6:	ec 0f       	add	r30, r28
    12c8:	fd 1f       	adc	r31, r29
    12ca:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    12cc:	81 2f       	mov	r24, r17
    12ce:	8c 0f       	add	r24, r28
    12d0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
		LCDsendChar(pcc);
    12d4:	80 2f       	mov	r24, r16
    12d6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    12da:	21 96       	adiw	r28, 0x01	; 1
    12dc:	c8 30       	cpi	r28, 0x08	; 8
    12de:	d1 05       	cpc	r29, r1
    12e0:	89 f7       	brne	.-30     	; 0x12c4 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	08 95       	ret

000012f0 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	80 e6       	ldi	r24, 0x60	; 96
    12f8:	9a ee       	ldi	r25, 0xEA	; 234
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    12fe:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1300:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1302:	87 b1       	in	r24, 0x07	; 7
    1304:	80 6f       	ori	r24, 0xF0	; 240
    1306:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1308:	87 b1       	in	r24, 0x07	; 7
    130a:	87 60       	ori	r24, 0x07	; 7
    130c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    130e:	80 e3       	ldi	r24, 0x30	; 48
    1310:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1312:	42 9a       	sbi	0x08, 2	; 8
    1314:	20 ea       	ldi	r18, 0xA0	; 160
    1316:	3f e0       	ldi	r19, 0x0F	; 15
    1318:	f9 01       	movw	r30, r18
    131a:	31 97       	sbiw	r30, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    131e:	42 98       	cbi	0x08, 2	; 8
    1320:	f9 01       	movw	r30, r18
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1326:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1328:	42 9a       	sbi	0x08, 2	; 8
    132a:	c9 01       	movw	r24, r18
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1330:	42 98       	cbi	0x08, 2	; 8
    1332:	c9 01       	movw	r24, r18
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1338:	80 e2       	ldi	r24, 0x20	; 32
    133a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    133c:	42 9a       	sbi	0x08, 2	; 8
    133e:	c9 01       	movw	r24, r18
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1344:	42 98       	cbi	0x08, 2	; 8
    1346:	c9 01       	movw	r24, r18
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    134c:	88 e2       	ldi	r24, 0x28	; 40
    134e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1352:	8c e0       	ldi	r24, 0x0C	; 12
    1354:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
    1358:	c5 ec       	ldi	r28, 0xC5	; 197
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    135e:	16 2f       	mov	r17, r22
    1360:	1f 5f       	subi	r17, 0xFF	; 255
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCDdefinechar>
    1368:	28 96       	adiw	r28, 0x08	; 8
    136a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    136c:	18 30       	cpi	r17, 0x08	; 8
    136e:	b9 f7       	brne	.-18     	; 0x135e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret

00001378 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	08 2f       	mov	r16, r24
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	04 c0       	rjmp	.+8      	; 0x138a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1388:	1f 5f       	subi	r17, 0xFF	; 255
    138a:	10 17       	cp	r17, r16
    138c:	d0 f3       	brcs	.-12     	; 0x1382 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	08 2f       	mov	r16, r24
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    139e:	88 e1       	ldi	r24, 0x18	; 24
    13a0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    13a4:	1f 5f       	subi	r17, 0xFF	; 255
    13a6:	10 17       	cp	r17, r16
    13a8:	d0 f3       	brcs	.-12     	; 0x139e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    13b0:	8e e0       	ldi	r24, 0x0E	; 14
    13b2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    13b6:	08 95       	ret

000013b8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    13b8:	8f e0       	ldi	r24, 0x0F	; 15
    13ba:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    13be:	08 95       	ret

000013c0 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    13c6:	08 95       	ret

000013c8 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    13ce:	08 95       	ret

000013d0 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    13d0:	8c e0       	ldi	r24, 0x0C	; 12
    13d2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
}
    13d6:	08 95       	ret

000013d8 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	08 2f       	mov	r16, r24
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    13e2:	80 e1       	ldi	r24, 0x10	; 16
    13e4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    13e8:	1f 5f       	subi	r17, 0xFF	; 255
    13ea:	10 17       	cp	r17, r16
    13ec:	d0 f3       	brcs	.-12     	; 0x13e2 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	08 2f       	mov	r16, r24
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    13fe:	84 e1       	ldi	r24, 0x14	; 20
    1400:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1404:	1f 5f       	subi	r17, 0xFF	; 255
    1406:	10 17       	cp	r17, r16
    1408:	d0 f3       	brcs	.-12     	; 0x13fe <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1420:	96 e0       	ldi	r25, 0x06	; 6
    1422:	89 9f       	mul	r24, r25
    1424:	c0 01       	movw	r24, r0
    1426:	11 24       	eor	r1, r1
    1428:	24 2f       	mov	r18, r20
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	ac 01       	movw	r20, r24
    142e:	42 9f       	mul	r20, r18
    1430:	c0 01       	movw	r24, r0
    1432:	43 9f       	mul	r20, r19
    1434:	90 0d       	add	r25, r0
    1436:	52 9f       	mul	r21, r18
    1438:	90 0d       	add	r25, r0
    143a:	11 24       	eor	r1, r1
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divmodhi4>
    1442:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1444:	cb 01       	movw	r24, r22
    1446:	66 e0       	ldi	r22, 0x06	; 6
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__udivmodhi4>
    144e:	e8 2e       	mov	r14, r24
    1450:	ff 24       	eor	r15, r15
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	12 c0       	rjmp	.+36     	; 0x147c <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1458:	c8 01       	movw	r24, r16
    145a:	05 96       	adiw	r24, 0x05	; 5
    145c:	c8 17       	cp	r28, r24
    145e:	d9 07       	cpc	r29, r25
    1460:	10 f0       	brcs	.+4      	; 0x1466 <LCDprogressBar+0x56>
    1462:	85 e0       	ldi	r24, 0x05	; 5
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1466:	c0 17       	cp	r28, r16
    1468:	d1 07       	cpc	r29, r17
    146a:	10 f0       	brcs	.+4      	; 0x1470 <LCDprogressBar+0x60>
    146c:	8e 2d       	mov	r24, r14
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <LCDprogressBar+0x62>
    1470:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1472:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1476:	f3 94       	inc	r15
    1478:	0a 5f       	subi	r16, 0xFA	; 250
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	fd 14       	cp	r15, r13
    147e:	60 f3       	brcs	.-40     	; 0x1458 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	08 95       	ret

00001490 <__fixunssfsi>:
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	7b 01       	movw	r14, r22
    149a:	8c 01       	movw	r16, r24
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	5f e4       	ldi	r21, 0x4F	; 79
    14a4:	0e 94 4e 0c 	call	0x189c	; 0x189c <__gesf2>
    14a8:	88 23       	and	r24, r24
    14aa:	8c f0       	brlt	.+34     	; 0x14ce <__fixunssfsi+0x3e>
    14ac:	c8 01       	movw	r24, r16
    14ae:	b7 01       	movw	r22, r14
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	5f e4       	ldi	r21, 0x4F	; 79
    14b8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__subsf3>
    14bc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
    14c0:	9b 01       	movw	r18, r22
    14c2:	ac 01       	movw	r20, r24
    14c4:	20 50       	subi	r18, 0x00	; 0
    14c6:	30 40       	sbci	r19, 0x00	; 0
    14c8:	40 40       	sbci	r20, 0x00	; 0
    14ca:	50 48       	sbci	r21, 0x80	; 128
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <__fixunssfsi+0x4a>
    14ce:	c8 01       	movw	r24, r16
    14d0:	b7 01       	movw	r22, r14
    14d2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixsfsi>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	b9 01       	movw	r22, r18
    14dc:	ca 01       	movw	r24, r20
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret

000014e8 <_fpadd_parts>:
    14e8:	a0 e0       	ldi	r26, 0x00	; 0
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e7       	ldi	r30, 0x7A	; 122
    14ee:	fa e0       	ldi	r31, 0x0A	; 10
    14f0:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__>
    14f4:	dc 01       	movw	r26, r24
    14f6:	2b 01       	movw	r4, r22
    14f8:	fa 01       	movw	r30, r20
    14fa:	9c 91       	ld	r25, X
    14fc:	92 30       	cpi	r25, 0x02	; 2
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <_fpadd_parts+0x1a>
    1500:	39 c1       	rjmp	.+626    	; 0x1774 <_fpadd_parts+0x28c>
    1502:	eb 01       	movw	r28, r22
    1504:	88 81       	ld	r24, Y
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	08 f4       	brcc	.+2      	; 0x150c <_fpadd_parts+0x24>
    150a:	33 c1       	rjmp	.+614    	; 0x1772 <_fpadd_parts+0x28a>
    150c:	94 30       	cpi	r25, 0x04	; 4
    150e:	69 f4       	brne	.+26     	; 0x152a <_fpadd_parts+0x42>
    1510:	84 30       	cpi	r24, 0x04	; 4
    1512:	09 f0       	breq	.+2      	; 0x1516 <_fpadd_parts+0x2e>
    1514:	2f c1       	rjmp	.+606    	; 0x1774 <_fpadd_parts+0x28c>
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 91       	ld	r25, X
    151a:	11 97       	sbiw	r26, 0x01	; 1
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	98 17       	cp	r25, r24
    1520:	09 f4       	brne	.+2      	; 0x1524 <_fpadd_parts+0x3c>
    1522:	28 c1       	rjmp	.+592    	; 0x1774 <_fpadd_parts+0x28c>
    1524:	a6 e2       	ldi	r26, 0x26	; 38
    1526:	b1 e0       	ldi	r27, 0x01	; 1
    1528:	25 c1       	rjmp	.+586    	; 0x1774 <_fpadd_parts+0x28c>
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	09 f4       	brne	.+2      	; 0x1530 <_fpadd_parts+0x48>
    152e:	21 c1       	rjmp	.+578    	; 0x1772 <_fpadd_parts+0x28a>
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	a9 f4       	brne	.+42     	; 0x155e <_fpadd_parts+0x76>
    1534:	92 30       	cpi	r25, 0x02	; 2
    1536:	09 f0       	breq	.+2      	; 0x153a <_fpadd_parts+0x52>
    1538:	1d c1       	rjmp	.+570    	; 0x1774 <_fpadd_parts+0x28c>
    153a:	9a 01       	movw	r18, r20
    153c:	ad 01       	movw	r20, r26
    153e:	88 e0       	ldi	r24, 0x08	; 8
    1540:	ea 01       	movw	r28, r20
    1542:	09 90       	ld	r0, Y+
    1544:	ae 01       	movw	r20, r28
    1546:	e9 01       	movw	r28, r18
    1548:	09 92       	st	Y+, r0
    154a:	9e 01       	movw	r18, r28
    154c:	81 50       	subi	r24, 0x01	; 1
    154e:	c1 f7       	brne	.-16     	; 0x1540 <_fpadd_parts+0x58>
    1550:	e2 01       	movw	r28, r4
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	9c 91       	ld	r25, X
    1558:	89 23       	and	r24, r25
    155a:	81 83       	std	Z+1, r24	; 0x01
    155c:	08 c1       	rjmp	.+528    	; 0x176e <_fpadd_parts+0x286>
    155e:	92 30       	cpi	r25, 0x02	; 2
    1560:	09 f4       	brne	.+2      	; 0x1564 <_fpadd_parts+0x7c>
    1562:	07 c1       	rjmp	.+526    	; 0x1772 <_fpadd_parts+0x28a>
    1564:	12 96       	adiw	r26, 0x02	; 2
    1566:	2d 90       	ld	r2, X+
    1568:	3c 90       	ld	r3, X
    156a:	13 97       	sbiw	r26, 0x03	; 3
    156c:	eb 01       	movw	r28, r22
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	14 96       	adiw	r26, 0x04	; 4
    1574:	ad 90       	ld	r10, X+
    1576:	bd 90       	ld	r11, X+
    1578:	cd 90       	ld	r12, X+
    157a:	dc 90       	ld	r13, X
    157c:	17 97       	sbiw	r26, 0x07	; 7
    157e:	ec 80       	ldd	r14, Y+4	; 0x04
    1580:	fd 80       	ldd	r15, Y+5	; 0x05
    1582:	0e 81       	ldd	r16, Y+6	; 0x06
    1584:	1f 81       	ldd	r17, Y+7	; 0x07
    1586:	91 01       	movw	r18, r2
    1588:	28 1b       	sub	r18, r24
    158a:	39 0b       	sbc	r19, r25
    158c:	b9 01       	movw	r22, r18
    158e:	37 ff       	sbrs	r19, 7
    1590:	04 c0       	rjmp	.+8      	; 0x159a <_fpadd_parts+0xb2>
    1592:	66 27       	eor	r22, r22
    1594:	77 27       	eor	r23, r23
    1596:	62 1b       	sub	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	60 32       	cpi	r22, 0x20	; 32
    159c:	71 05       	cpc	r23, r1
    159e:	0c f0       	brlt	.+2      	; 0x15a2 <_fpadd_parts+0xba>
    15a0:	61 c0       	rjmp	.+194    	; 0x1664 <_fpadd_parts+0x17c>
    15a2:	12 16       	cp	r1, r18
    15a4:	13 06       	cpc	r1, r19
    15a6:	6c f5       	brge	.+90     	; 0x1602 <_fpadd_parts+0x11a>
    15a8:	37 01       	movw	r6, r14
    15aa:	48 01       	movw	r8, r16
    15ac:	06 2e       	mov	r0, r22
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <_fpadd_parts+0xd0>
    15b0:	96 94       	lsr	r9
    15b2:	87 94       	ror	r8
    15b4:	77 94       	ror	r7
    15b6:	67 94       	ror	r6
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <_fpadd_parts+0xc8>
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <_fpadd_parts+0xe6>
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	44 1f       	adc	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	6a 95       	dec	r22
    15d0:	d2 f7       	brpl	.-12     	; 0x15c6 <_fpadd_parts+0xde>
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	40 40       	sbci	r20, 0x00	; 0
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	2e 21       	and	r18, r14
    15dc:	3f 21       	and	r19, r15
    15de:	40 23       	and	r20, r16
    15e0:	51 23       	and	r21, r17
    15e2:	21 15       	cp	r18, r1
    15e4:	31 05       	cpc	r19, r1
    15e6:	41 05       	cpc	r20, r1
    15e8:	51 05       	cpc	r21, r1
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <_fpadd_parts+0x10c>
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	79 01       	movw	r14, r18
    15f6:	8a 01       	movw	r16, r20
    15f8:	e6 28       	or	r14, r6
    15fa:	f7 28       	or	r15, r7
    15fc:	08 29       	or	r16, r8
    15fe:	19 29       	or	r17, r9
    1600:	3c c0       	rjmp	.+120    	; 0x167a <_fpadd_parts+0x192>
    1602:	23 2b       	or	r18, r19
    1604:	d1 f1       	breq	.+116    	; 0x167a <_fpadd_parts+0x192>
    1606:	26 0e       	add	r2, r22
    1608:	37 1e       	adc	r3, r23
    160a:	35 01       	movw	r6, r10
    160c:	46 01       	movw	r8, r12
    160e:	06 2e       	mov	r0, r22
    1610:	04 c0       	rjmp	.+8      	; 0x161a <_fpadd_parts+0x132>
    1612:	96 94       	lsr	r9
    1614:	87 94       	ror	r8
    1616:	77 94       	ror	r7
    1618:	67 94       	ror	r6
    161a:	0a 94       	dec	r0
    161c:	d2 f7       	brpl	.-12     	; 0x1612 <_fpadd_parts+0x12a>
    161e:	21 e0       	ldi	r18, 0x01	; 1
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <_fpadd_parts+0x148>
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	44 1f       	adc	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	6a 95       	dec	r22
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <_fpadd_parts+0x140>
    1634:	21 50       	subi	r18, 0x01	; 1
    1636:	30 40       	sbci	r19, 0x00	; 0
    1638:	40 40       	sbci	r20, 0x00	; 0
    163a:	50 40       	sbci	r21, 0x00	; 0
    163c:	2a 21       	and	r18, r10
    163e:	3b 21       	and	r19, r11
    1640:	4c 21       	and	r20, r12
    1642:	5d 21       	and	r21, r13
    1644:	21 15       	cp	r18, r1
    1646:	31 05       	cpc	r19, r1
    1648:	41 05       	cpc	r20, r1
    164a:	51 05       	cpc	r21, r1
    164c:	21 f0       	breq	.+8      	; 0x1656 <_fpadd_parts+0x16e>
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	59 01       	movw	r10, r18
    1658:	6a 01       	movw	r12, r20
    165a:	a6 28       	or	r10, r6
    165c:	b7 28       	or	r11, r7
    165e:	c8 28       	or	r12, r8
    1660:	d9 28       	or	r13, r9
    1662:	0b c0       	rjmp	.+22     	; 0x167a <_fpadd_parts+0x192>
    1664:	82 15       	cp	r24, r2
    1666:	93 05       	cpc	r25, r3
    1668:	2c f0       	brlt	.+10     	; 0x1674 <_fpadd_parts+0x18c>
    166a:	1c 01       	movw	r2, r24
    166c:	aa 24       	eor	r10, r10
    166e:	bb 24       	eor	r11, r11
    1670:	65 01       	movw	r12, r10
    1672:	03 c0       	rjmp	.+6      	; 0x167a <_fpadd_parts+0x192>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	11 96       	adiw	r26, 0x01	; 1
    167c:	9c 91       	ld	r25, X
    167e:	d2 01       	movw	r26, r4
    1680:	11 96       	adiw	r26, 0x01	; 1
    1682:	8c 91       	ld	r24, X
    1684:	98 17       	cp	r25, r24
    1686:	09 f4       	brne	.+2      	; 0x168a <_fpadd_parts+0x1a2>
    1688:	45 c0       	rjmp	.+138    	; 0x1714 <_fpadd_parts+0x22c>
    168a:	99 23       	and	r25, r25
    168c:	39 f0       	breq	.+14     	; 0x169c <_fpadd_parts+0x1b4>
    168e:	a8 01       	movw	r20, r16
    1690:	97 01       	movw	r18, r14
    1692:	2a 19       	sub	r18, r10
    1694:	3b 09       	sbc	r19, r11
    1696:	4c 09       	sbc	r20, r12
    1698:	5d 09       	sbc	r21, r13
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <_fpadd_parts+0x1c0>
    169c:	a6 01       	movw	r20, r12
    169e:	95 01       	movw	r18, r10
    16a0:	2e 19       	sub	r18, r14
    16a2:	3f 09       	sbc	r19, r15
    16a4:	40 0b       	sbc	r20, r16
    16a6:	51 0b       	sbc	r21, r17
    16a8:	57 fd       	sbrc	r21, 7
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <_fpadd_parts+0x1d4>
    16ac:	11 82       	std	Z+1, r1	; 0x01
    16ae:	33 82       	std	Z+3, r3	; 0x03
    16b0:	22 82       	std	Z+2, r2	; 0x02
    16b2:	24 83       	std	Z+4, r18	; 0x04
    16b4:	35 83       	std	Z+5, r19	; 0x05
    16b6:	46 83       	std	Z+6, r20	; 0x06
    16b8:	57 83       	std	Z+7, r21	; 0x07
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <_fpadd_parts+0x20e>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	33 82       	std	Z+3, r3	; 0x03
    16c2:	22 82       	std	Z+2, r2	; 0x02
    16c4:	88 27       	eor	r24, r24
    16c6:	99 27       	eor	r25, r25
    16c8:	dc 01       	movw	r26, r24
    16ca:	82 1b       	sub	r24, r18
    16cc:	93 0b       	sbc	r25, r19
    16ce:	a4 0b       	sbc	r26, r20
    16d0:	b5 0b       	sbc	r27, r21
    16d2:	84 83       	std	Z+4, r24	; 0x04
    16d4:	95 83       	std	Z+5, r25	; 0x05
    16d6:	a6 83       	std	Z+6, r26	; 0x06
    16d8:	b7 83       	std	Z+7, r27	; 0x07
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <_fpadd_parts+0x20e>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	24 83       	std	Z+4, r18	; 0x04
    16e6:	35 83       	std	Z+5, r19	; 0x05
    16e8:	46 83       	std	Z+6, r20	; 0x06
    16ea:	57 83       	std	Z+7, r21	; 0x07
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	93 83       	std	Z+3, r25	; 0x03
    16f4:	82 83       	std	Z+2, r24	; 0x02
    16f6:	24 81       	ldd	r18, Z+4	; 0x04
    16f8:	35 81       	ldd	r19, Z+5	; 0x05
    16fa:	46 81       	ldd	r20, Z+6	; 0x06
    16fc:	57 81       	ldd	r21, Z+7	; 0x07
    16fe:	da 01       	movw	r26, r20
    1700:	c9 01       	movw	r24, r18
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	a1 09       	sbc	r26, r1
    1706:	b1 09       	sbc	r27, r1
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	af 4f       	sbci	r26, 0xFF	; 255
    170e:	bf 43       	sbci	r27, 0x3F	; 63
    1710:	28 f3       	brcs	.-54     	; 0x16dc <_fpadd_parts+0x1f4>
    1712:	0b c0       	rjmp	.+22     	; 0x172a <_fpadd_parts+0x242>
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	33 82       	std	Z+3, r3	; 0x03
    1718:	22 82       	std	Z+2, r2	; 0x02
    171a:	ea 0c       	add	r14, r10
    171c:	fb 1c       	adc	r15, r11
    171e:	0c 1d       	adc	r16, r12
    1720:	1d 1d       	adc	r17, r13
    1722:	e4 82       	std	Z+4, r14	; 0x04
    1724:	f5 82       	std	Z+5, r15	; 0x05
    1726:	06 83       	std	Z+6, r16	; 0x06
    1728:	17 83       	std	Z+7, r17	; 0x07
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	80 83       	st	Z, r24
    172e:	24 81       	ldd	r18, Z+4	; 0x04
    1730:	35 81       	ldd	r19, Z+5	; 0x05
    1732:	46 81       	ldd	r20, Z+6	; 0x06
    1734:	57 81       	ldd	r21, Z+7	; 0x07
    1736:	57 ff       	sbrs	r21, 7
    1738:	1a c0       	rjmp	.+52     	; 0x176e <_fpadd_parts+0x286>
    173a:	c9 01       	movw	r24, r18
    173c:	aa 27       	eor	r26, r26
    173e:	97 fd       	sbrc	r25, 7
    1740:	a0 95       	com	r26
    1742:	ba 2f       	mov	r27, r26
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	90 70       	andi	r25, 0x00	; 0
    1748:	a0 70       	andi	r26, 0x00	; 0
    174a:	b0 70       	andi	r27, 0x00	; 0
    174c:	56 95       	lsr	r21
    174e:	47 95       	ror	r20
    1750:	37 95       	ror	r19
    1752:	27 95       	ror	r18
    1754:	82 2b       	or	r24, r18
    1756:	93 2b       	or	r25, r19
    1758:	a4 2b       	or	r26, r20
    175a:	b5 2b       	or	r27, r21
    175c:	84 83       	std	Z+4, r24	; 0x04
    175e:	95 83       	std	Z+5, r25	; 0x05
    1760:	a6 83       	std	Z+6, r26	; 0x06
    1762:	b7 83       	std	Z+7, r27	; 0x07
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	93 83       	std	Z+3, r25	; 0x03
    176c:	82 83       	std	Z+2, r24	; 0x02
    176e:	df 01       	movw	r26, r30
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <_fpadd_parts+0x28c>
    1772:	d2 01       	movw	r26, r4
    1774:	cd 01       	movw	r24, r26
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	e2 e1       	ldi	r30, 0x12	; 18
    177c:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__>

00001780 <__subsf3>:
    1780:	a0 e2       	ldi	r26, 0x20	; 32
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 ec       	ldi	r30, 0xC6	; 198
    1786:	fb e0       	ldi	r31, 0x0B	; 11
    1788:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    178c:	69 83       	std	Y+1, r22	; 0x01
    178e:	7a 83       	std	Y+2, r23	; 0x02
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	4f 83       	std	Y+7, r20	; 0x07
    179a:	58 87       	std	Y+8, r21	; 0x08
    179c:	e9 e0       	ldi	r30, 0x09	; 9
    179e:	ee 2e       	mov	r14, r30
    17a0:	f1 2c       	mov	r15, r1
    17a2:	ec 0e       	add	r14, r28
    17a4:	fd 1e       	adc	r15, r29
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	b7 01       	movw	r22, r14
    17ac:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    17b0:	8e 01       	movw	r16, r28
    17b2:	0f 5e       	subi	r16, 0xEF	; 239
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	ce 01       	movw	r24, r28
    17b8:	05 96       	adiw	r24, 0x05	; 5
    17ba:	b8 01       	movw	r22, r16
    17bc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    17c0:	8a 89       	ldd	r24, Y+18	; 0x12
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	89 27       	eor	r24, r25
    17c6:	8a 8b       	std	Y+18, r24	; 0x12
    17c8:	c7 01       	movw	r24, r14
    17ca:	b8 01       	movw	r22, r16
    17cc:	ae 01       	movw	r20, r28
    17ce:	47 5e       	subi	r20, 0xE7	; 231
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_fpadd_parts>
    17d6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__pack_f>
    17da:	a0 96       	adiw	r28, 0x20	; 32
    17dc:	e6 e0       	ldi	r30, 0x06	; 6
    17de:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

000017e2 <__addsf3>:
    17e2:	a0 e2       	ldi	r26, 0x20	; 32
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 ef       	ldi	r30, 0xF7	; 247
    17e8:	fb e0       	ldi	r31, 0x0B	; 11
    17ea:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    17ee:	69 83       	std	Y+1, r22	; 0x01
    17f0:	7a 83       	std	Y+2, r23	; 0x02
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	2d 83       	std	Y+5, r18	; 0x05
    17f8:	3e 83       	std	Y+6, r19	; 0x06
    17fa:	4f 83       	std	Y+7, r20	; 0x07
    17fc:	58 87       	std	Y+8, r21	; 0x08
    17fe:	f9 e0       	ldi	r31, 0x09	; 9
    1800:	ef 2e       	mov	r14, r31
    1802:	f1 2c       	mov	r15, r1
    1804:	ec 0e       	add	r14, r28
    1806:	fd 1e       	adc	r15, r29
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	b7 01       	movw	r22, r14
    180e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    1812:	8e 01       	movw	r16, r28
    1814:	0f 5e       	subi	r16, 0xEF	; 239
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	ce 01       	movw	r24, r28
    181a:	05 96       	adiw	r24, 0x05	; 5
    181c:	b8 01       	movw	r22, r16
    181e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    1822:	c7 01       	movw	r24, r14
    1824:	b8 01       	movw	r22, r16
    1826:	ae 01       	movw	r20, r28
    1828:	47 5e       	subi	r20, 0xE7	; 231
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_fpadd_parts>
    1830:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__pack_f>
    1834:	a0 96       	adiw	r28, 0x20	; 32
    1836:	e6 e0       	ldi	r30, 0x06	; 6
    1838:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

0000183c <__gtsf2>:
    183c:	a8 e1       	ldi	r26, 0x18	; 24
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e4 e2       	ldi	r30, 0x24	; 36
    1842:	fc e0       	ldi	r31, 0x0C	; 12
    1844:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    1848:	69 83       	std	Y+1, r22	; 0x01
    184a:	7a 83       	std	Y+2, r23	; 0x02
    184c:	8b 83       	std	Y+3, r24	; 0x03
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	2d 83       	std	Y+5, r18	; 0x05
    1852:	3e 83       	std	Y+6, r19	; 0x06
    1854:	4f 83       	std	Y+7, r20	; 0x07
    1856:	58 87       	std	Y+8, r21	; 0x08
    1858:	89 e0       	ldi	r24, 0x09	; 9
    185a:	e8 2e       	mov	r14, r24
    185c:	f1 2c       	mov	r15, r1
    185e:	ec 0e       	add	r14, r28
    1860:	fd 1e       	adc	r15, r29
    1862:	ce 01       	movw	r24, r28
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	b7 01       	movw	r22, r14
    1868:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    186c:	8e 01       	movw	r16, r28
    186e:	0f 5e       	subi	r16, 0xEF	; 239
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	ce 01       	movw	r24, r28
    1874:	05 96       	adiw	r24, 0x05	; 5
    1876:	b8 01       	movw	r22, r16
    1878:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	40 f0       	brcs	.+16     	; 0x1892 <__gtsf2+0x56>
    1882:	89 89       	ldd	r24, Y+17	; 0x11
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	28 f0       	brcs	.+10     	; 0x1892 <__gtsf2+0x56>
    1888:	c7 01       	movw	r24, r14
    188a:	b8 01       	movw	r22, r16
    188c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fpcmp_parts_f>
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <__gtsf2+0x58>
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	68 96       	adiw	r28, 0x18	; 24
    1896:	e6 e0       	ldi	r30, 0x06	; 6
    1898:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

0000189c <__gesf2>:
    189c:	a8 e1       	ldi	r26, 0x18	; 24
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e4 e5       	ldi	r30, 0x54	; 84
    18a2:	fc e0       	ldi	r31, 0x0C	; 12
    18a4:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    18a8:	69 83       	std	Y+1, r22	; 0x01
    18aa:	7a 83       	std	Y+2, r23	; 0x02
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	3e 83       	std	Y+6, r19	; 0x06
    18b4:	4f 83       	std	Y+7, r20	; 0x07
    18b6:	58 87       	std	Y+8, r21	; 0x08
    18b8:	89 e0       	ldi	r24, 0x09	; 9
    18ba:	e8 2e       	mov	r14, r24
    18bc:	f1 2c       	mov	r15, r1
    18be:	ec 0e       	add	r14, r28
    18c0:	fd 1e       	adc	r15, r29
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	b7 01       	movw	r22, r14
    18c8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    18cc:	8e 01       	movw	r16, r28
    18ce:	0f 5e       	subi	r16, 0xEF	; 239
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	05 96       	adiw	r24, 0x05	; 5
    18d6:	b8 01       	movw	r22, r16
    18d8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	40 f0       	brcs	.+16     	; 0x18f2 <__gesf2+0x56>
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	28 f0       	brcs	.+10     	; 0x18f2 <__gesf2+0x56>
    18e8:	c7 01       	movw	r24, r14
    18ea:	b8 01       	movw	r22, r16
    18ec:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fpcmp_parts_f>
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <__gesf2+0x58>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	68 96       	adiw	r28, 0x18	; 24
    18f6:	e6 e0       	ldi	r30, 0x06	; 6
    18f8:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

000018fc <__ltsf2>:
    18fc:	a8 e1       	ldi	r26, 0x18	; 24
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e4 e8       	ldi	r30, 0x84	; 132
    1902:	fc e0       	ldi	r31, 0x0C	; 12
    1904:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    1908:	69 83       	std	Y+1, r22	; 0x01
    190a:	7a 83       	std	Y+2, r23	; 0x02
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	2d 83       	std	Y+5, r18	; 0x05
    1912:	3e 83       	std	Y+6, r19	; 0x06
    1914:	4f 83       	std	Y+7, r20	; 0x07
    1916:	58 87       	std	Y+8, r21	; 0x08
    1918:	89 e0       	ldi	r24, 0x09	; 9
    191a:	e8 2e       	mov	r14, r24
    191c:	f1 2c       	mov	r15, r1
    191e:	ec 0e       	add	r14, r28
    1920:	fd 1e       	adc	r15, r29
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	b7 01       	movw	r22, r14
    1928:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    192c:	8e 01       	movw	r16, r28
    192e:	0f 5e       	subi	r16, 0xEF	; 239
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	ce 01       	movw	r24, r28
    1934:	05 96       	adiw	r24, 0x05	; 5
    1936:	b8 01       	movw	r22, r16
    1938:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	40 f0       	brcs	.+16     	; 0x1952 <__ltsf2+0x56>
    1942:	89 89       	ldd	r24, Y+17	; 0x11
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	28 f0       	brcs	.+10     	; 0x1952 <__ltsf2+0x56>
    1948:	c7 01       	movw	r24, r14
    194a:	b8 01       	movw	r22, r16
    194c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fpcmp_parts_f>
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <__ltsf2+0x58>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	68 96       	adiw	r28, 0x18	; 24
    1956:	e6 e0       	ldi	r30, 0x06	; 6
    1958:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

0000195c <__lesf2>:
    195c:	a8 e1       	ldi	r26, 0x18	; 24
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e4 eb       	ldi	r30, 0xB4	; 180
    1962:	fc e0       	ldi	r31, 0x0C	; 12
    1964:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x18>
    1968:	69 83       	std	Y+1, r22	; 0x01
    196a:	7a 83       	std	Y+2, r23	; 0x02
    196c:	8b 83       	std	Y+3, r24	; 0x03
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	2d 83       	std	Y+5, r18	; 0x05
    1972:	3e 83       	std	Y+6, r19	; 0x06
    1974:	4f 83       	std	Y+7, r20	; 0x07
    1976:	58 87       	std	Y+8, r21	; 0x08
    1978:	89 e0       	ldi	r24, 0x09	; 9
    197a:	e8 2e       	mov	r14, r24
    197c:	f1 2c       	mov	r15, r1
    197e:	ec 0e       	add	r14, r28
    1980:	fd 1e       	adc	r15, r29
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	b7 01       	movw	r22, r14
    1988:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    198c:	8e 01       	movw	r16, r28
    198e:	0f 5e       	subi	r16, 0xEF	; 239
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	ce 01       	movw	r24, r28
    1994:	05 96       	adiw	r24, 0x05	; 5
    1996:	b8 01       	movw	r22, r16
    1998:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	40 f0       	brcs	.+16     	; 0x19b2 <__lesf2+0x56>
    19a2:	89 89       	ldd	r24, Y+17	; 0x11
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	28 f0       	brcs	.+10     	; 0x19b2 <__lesf2+0x56>
    19a8:	c7 01       	movw	r24, r14
    19aa:	b8 01       	movw	r22, r16
    19ac:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fpcmp_parts_f>
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <__lesf2+0x58>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	68 96       	adiw	r28, 0x18	; 24
    19b6:	e6 e0       	ldi	r30, 0x06	; 6
    19b8:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

000019bc <__fixsfsi>:
    19bc:	ac e0       	ldi	r26, 0x0C	; 12
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e4 ee       	ldi	r30, 0xE4	; 228
    19c2:	fc e0       	ldi	r31, 0x0C	; 12
    19c4:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__prologue_saves__+0x20>
    19c8:	69 83       	std	Y+1, r22	; 0x01
    19ca:	7a 83       	std	Y+2, r23	; 0x02
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	be 01       	movw	r22, r28
    19d6:	6b 5f       	subi	r22, 0xFB	; 251
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__unpack_f>
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	61 f1       	breq	.+88     	; 0x1a3c <__fixsfsi+0x80>
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	50 f1       	brcs	.+84     	; 0x1a3c <__fixsfsi+0x80>
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <__fixsfsi+0x38>
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	88 23       	and	r24, r24
    19f0:	51 f1       	breq	.+84     	; 0x1a46 <__fixsfsi+0x8a>
    19f2:	2e c0       	rjmp	.+92     	; 0x1a50 <__fixsfsi+0x94>
    19f4:	2f 81       	ldd	r18, Y+7	; 0x07
    19f6:	38 85       	ldd	r19, Y+8	; 0x08
    19f8:	37 fd       	sbrc	r19, 7
    19fa:	20 c0       	rjmp	.+64     	; 0x1a3c <__fixsfsi+0x80>
    19fc:	6e 81       	ldd	r22, Y+6	; 0x06
    19fe:	2f 31       	cpi	r18, 0x1F	; 31
    1a00:	31 05       	cpc	r19, r1
    1a02:	1c f0       	brlt	.+6      	; 0x1a0a <__fixsfsi+0x4e>
    1a04:	66 23       	and	r22, r22
    1a06:	f9 f0       	breq	.+62     	; 0x1a46 <__fixsfsi+0x8a>
    1a08:	23 c0       	rjmp	.+70     	; 0x1a50 <__fixsfsi+0x94>
    1a0a:	8e e1       	ldi	r24, 0x1E	; 30
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	82 1b       	sub	r24, r18
    1a10:	93 0b       	sbc	r25, r19
    1a12:	29 85       	ldd	r18, Y+9	; 0x09
    1a14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a16:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a18:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <__fixsfsi+0x68>
    1a1c:	56 95       	lsr	r21
    1a1e:	47 95       	ror	r20
    1a20:	37 95       	ror	r19
    1a22:	27 95       	ror	r18
    1a24:	8a 95       	dec	r24
    1a26:	d2 f7       	brpl	.-12     	; 0x1a1c <__fixsfsi+0x60>
    1a28:	66 23       	and	r22, r22
    1a2a:	b1 f0       	breq	.+44     	; 0x1a58 <__fixsfsi+0x9c>
    1a2c:	50 95       	com	r21
    1a2e:	40 95       	com	r20
    1a30:	30 95       	com	r19
    1a32:	21 95       	neg	r18
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	4f 4f       	sbci	r20, 0xFF	; 255
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	0e c0       	rjmp	.+28     	; 0x1a58 <__fixsfsi+0x9c>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <__fixsfsi+0x9c>
    1a46:	2f ef       	ldi	r18, 0xFF	; 255
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f ef       	ldi	r20, 0xFF	; 255
    1a4c:	5f e7       	ldi	r21, 0x7F	; 127
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <__fixsfsi+0x9c>
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e8       	ldi	r21, 0x80	; 128
    1a58:	b9 01       	movw	r22, r18
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	2c 96       	adiw	r28, 0x0c	; 12
    1a5e:	e2 e0       	ldi	r30, 0x02	; 2
    1a60:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__epilogue_restores__+0x20>

00001a64 <__pack_f>:
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e4 80       	ldd	r14, Z+4	; 0x04
    1a72:	f5 80       	ldd	r15, Z+5	; 0x05
    1a74:	06 81       	ldd	r16, Z+6	; 0x06
    1a76:	17 81       	ldd	r17, Z+7	; 0x07
    1a78:	d1 80       	ldd	r13, Z+1	; 0x01
    1a7a:	80 81       	ld	r24, Z
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	48 f4       	brcc	.+18     	; 0x1a92 <__pack_f+0x2e>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e1       	ldi	r26, 0x10	; 16
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e8 2a       	or	r14, r24
    1a8a:	f9 2a       	or	r15, r25
    1a8c:	0a 2b       	or	r16, r26
    1a8e:	1b 2b       	or	r17, r27
    1a90:	a5 c0       	rjmp	.+330    	; 0x1bdc <__pack_f+0x178>
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <__pack_f+0x34>
    1a96:	9f c0       	rjmp	.+318    	; 0x1bd6 <__pack_f+0x172>
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <__pack_f+0x40>
    1a9c:	ee 24       	eor	r14, r14
    1a9e:	ff 24       	eor	r15, r15
    1aa0:	87 01       	movw	r16, r14
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <__pack_f+0x4a>
    1aa4:	e1 14       	cp	r14, r1
    1aa6:	f1 04       	cpc	r15, r1
    1aa8:	01 05       	cpc	r16, r1
    1aaa:	11 05       	cpc	r17, r1
    1aac:	19 f4       	brne	.+6      	; 0x1ab4 <__pack_f+0x50>
    1aae:	e0 e0       	ldi	r30, 0x00	; 0
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	96 c0       	rjmp	.+300    	; 0x1be0 <__pack_f+0x17c>
    1ab4:	62 81       	ldd	r22, Z+2	; 0x02
    1ab6:	73 81       	ldd	r23, Z+3	; 0x03
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	62 38       	cpi	r22, 0x82	; 130
    1abc:	79 07       	cpc	r23, r25
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <__pack_f+0x5e>
    1ac0:	5b c0       	rjmp	.+182    	; 0x1b78 <__pack_f+0x114>
    1ac2:	22 e8       	ldi	r18, 0x82	; 130
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	26 1b       	sub	r18, r22
    1ac8:	37 0b       	sbc	r19, r23
    1aca:	2a 31       	cpi	r18, 0x1A	; 26
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f0       	brlt	.+10     	; 0x1ada <__pack_f+0x76>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	2a c0       	rjmp	.+84     	; 0x1b2e <__pack_f+0xca>
    1ada:	b8 01       	movw	r22, r16
    1adc:	a7 01       	movw	r20, r14
    1ade:	02 2e       	mov	r0, r18
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <__pack_f+0x86>
    1ae2:	76 95       	lsr	r23
    1ae4:	67 95       	ror	r22
    1ae6:	57 95       	ror	r21
    1ae8:	47 95       	ror	r20
    1aea:	0a 94       	dec	r0
    1aec:	d2 f7       	brpl	.-12     	; 0x1ae2 <__pack_f+0x7e>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <__pack_f+0x9c>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	2a 95       	dec	r18
    1b02:	d2 f7       	brpl	.-12     	; 0x1af8 <__pack_f+0x94>
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	a1 09       	sbc	r26, r1
    1b08:	b1 09       	sbc	r27, r1
    1b0a:	8e 21       	and	r24, r14
    1b0c:	9f 21       	and	r25, r15
    1b0e:	a0 23       	and	r26, r16
    1b10:	b1 23       	and	r27, r17
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	a1 05       	cpc	r26, r1
    1b16:	b1 05       	cpc	r27, r1
    1b18:	21 f0       	breq	.+8      	; 0x1b22 <__pack_f+0xbe>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	9a 01       	movw	r18, r20
    1b24:	ab 01       	movw	r20, r22
    1b26:	28 2b       	or	r18, r24
    1b28:	39 2b       	or	r19, r25
    1b2a:	4a 2b       	or	r20, r26
    1b2c:	5b 2b       	or	r21, r27
    1b2e:	da 01       	movw	r26, r20
    1b30:	c9 01       	movw	r24, r18
    1b32:	8f 77       	andi	r24, 0x7F	; 127
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	a0 70       	andi	r26, 0x00	; 0
    1b38:	b0 70       	andi	r27, 0x00	; 0
    1b3a:	80 34       	cpi	r24, 0x40	; 64
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	a1 05       	cpc	r26, r1
    1b40:	b1 05       	cpc	r27, r1
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <__pack_f+0xee>
    1b44:	27 ff       	sbrs	r18, 7
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <__pack_f+0xf6>
    1b48:	20 5c       	subi	r18, 0xC0	; 192
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <__pack_f+0xf6>
    1b52:	21 5c       	subi	r18, 0xC1	; 193
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	4f 4f       	sbci	r20, 0xFF	; 255
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	e0 e0       	ldi	r30, 0x00	; 0
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	20 30       	cpi	r18, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	3a 07       	cpc	r19, r26
    1b64:	a0 e0       	ldi	r26, 0x00	; 0
    1b66:	4a 07       	cpc	r20, r26
    1b68:	a0 e4       	ldi	r26, 0x40	; 64
    1b6a:	5a 07       	cpc	r21, r26
    1b6c:	10 f0       	brcs	.+4      	; 0x1b72 <__pack_f+0x10e>
    1b6e:	e1 e0       	ldi	r30, 0x01	; 1
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	79 01       	movw	r14, r18
    1b74:	8a 01       	movw	r16, r20
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <__pack_f+0x162>
    1b78:	60 38       	cpi	r22, 0x80	; 128
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	64 f5       	brge	.+88     	; 0x1bd6 <__pack_f+0x172>
    1b7e:	fb 01       	movw	r30, r22
    1b80:	e1 58       	subi	r30, 0x81	; 129
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	d8 01       	movw	r26, r16
    1b86:	c7 01       	movw	r24, r14
    1b88:	8f 77       	andi	r24, 0x7F	; 127
    1b8a:	90 70       	andi	r25, 0x00	; 0
    1b8c:	a0 70       	andi	r26, 0x00	; 0
    1b8e:	b0 70       	andi	r27, 0x00	; 0
    1b90:	80 34       	cpi	r24, 0x40	; 64
    1b92:	91 05       	cpc	r25, r1
    1b94:	a1 05       	cpc	r26, r1
    1b96:	b1 05       	cpc	r27, r1
    1b98:	39 f4       	brne	.+14     	; 0x1ba8 <__pack_f+0x144>
    1b9a:	e7 fe       	sbrs	r14, 7
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <__pack_f+0x154>
    1b9e:	80 e4       	ldi	r24, 0x40	; 64
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <__pack_f+0x14c>
    1ba8:	8f e3       	ldi	r24, 0x3F	; 63
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e8 0e       	add	r14, r24
    1bb2:	f9 1e       	adc	r15, r25
    1bb4:	0a 1f       	adc	r16, r26
    1bb6:	1b 1f       	adc	r17, r27
    1bb8:	17 ff       	sbrs	r17, 7
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <__pack_f+0x162>
    1bbc:	16 95       	lsr	r17
    1bbe:	07 95       	ror	r16
    1bc0:	f7 94       	ror	r15
    1bc2:	e7 94       	ror	r14
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	87 e0       	ldi	r24, 0x07	; 7
    1bc8:	16 95       	lsr	r17
    1bca:	07 95       	ror	r16
    1bcc:	f7 94       	ror	r15
    1bce:	e7 94       	ror	r14
    1bd0:	8a 95       	dec	r24
    1bd2:	d1 f7       	brne	.-12     	; 0x1bc8 <__pack_f+0x164>
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <__pack_f+0x17c>
    1bd6:	ee 24       	eor	r14, r14
    1bd8:	ff 24       	eor	r15, r15
    1bda:	87 01       	movw	r16, r14
    1bdc:	ef ef       	ldi	r30, 0xFF	; 255
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	6e 2f       	mov	r22, r30
    1be2:	67 95       	ror	r22
    1be4:	66 27       	eor	r22, r22
    1be6:	67 95       	ror	r22
    1be8:	90 2f       	mov	r25, r16
    1bea:	9f 77       	andi	r25, 0x7F	; 127
    1bec:	d7 94       	ror	r13
    1bee:	dd 24       	eor	r13, r13
    1bf0:	d7 94       	ror	r13
    1bf2:	8e 2f       	mov	r24, r30
    1bf4:	86 95       	lsr	r24
    1bf6:	49 2f       	mov	r20, r25
    1bf8:	46 2b       	or	r20, r22
    1bfa:	58 2f       	mov	r21, r24
    1bfc:	5d 29       	or	r21, r13
    1bfe:	b7 01       	movw	r22, r14
    1c00:	ca 01       	movw	r24, r20
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	08 95       	ret

00001c0e <__unpack_f>:
    1c0e:	fc 01       	movw	r30, r24
    1c10:	db 01       	movw	r26, r22
    1c12:	40 81       	ld	r20, Z
    1c14:	51 81       	ldd	r21, Z+1	; 0x01
    1c16:	22 81       	ldd	r18, Z+2	; 0x02
    1c18:	62 2f       	mov	r22, r18
    1c1a:	6f 77       	andi	r22, 0x7F	; 127
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	22 1f       	adc	r18, r18
    1c20:	22 27       	eor	r18, r18
    1c22:	22 1f       	adc	r18, r18
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	89 2f       	mov	r24, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	82 2b       	or	r24, r18
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	99 1f       	adc	r25, r25
    1c32:	99 27       	eor	r25, r25
    1c34:	99 1f       	adc	r25, r25
    1c36:	11 96       	adiw	r26, 0x01	; 1
    1c38:	9c 93       	st	X, r25
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	a9 f5       	brne	.+106    	; 0x1cac <__unpack_f+0x9e>
    1c42:	41 15       	cp	r20, r1
    1c44:	51 05       	cpc	r21, r1
    1c46:	61 05       	cpc	r22, r1
    1c48:	71 05       	cpc	r23, r1
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <__unpack_f+0x42>
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	37 c0       	rjmp	.+110    	; 0x1cbe <__unpack_f+0xb0>
    1c50:	82 e8       	ldi	r24, 0x82	; 130
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	13 96       	adiw	r26, 0x03	; 3
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
    1c5a:	12 97       	sbiw	r26, 0x02	; 2
    1c5c:	9a 01       	movw	r18, r20
    1c5e:	ab 01       	movw	r20, r22
    1c60:	67 e0       	ldi	r22, 0x07	; 7
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	44 1f       	adc	r20, r20
    1c68:	55 1f       	adc	r21, r21
    1c6a:	6a 95       	dec	r22
    1c6c:	d1 f7       	brne	.-12     	; 0x1c62 <__unpack_f+0x54>
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	8c 93       	st	X, r24
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <__unpack_f+0x80>
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	44 1f       	adc	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	8d 91       	ld	r24, X+
    1c80:	9c 91       	ld	r25, X
    1c82:	13 97       	sbiw	r26, 0x03	; 3
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	13 96       	adiw	r26, 0x03	; 3
    1c88:	9c 93       	st	X, r25
    1c8a:	8e 93       	st	-X, r24
    1c8c:	12 97       	sbiw	r26, 0x02	; 2
    1c8e:	20 30       	cpi	r18, 0x00	; 0
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	38 07       	cpc	r19, r24
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	48 07       	cpc	r20, r24
    1c98:	80 e4       	ldi	r24, 0x40	; 64
    1c9a:	58 07       	cpc	r21, r24
    1c9c:	58 f3       	brcs	.-42     	; 0x1c74 <__unpack_f+0x66>
    1c9e:	14 96       	adiw	r26, 0x04	; 4
    1ca0:	2d 93       	st	X+, r18
    1ca2:	3d 93       	st	X+, r19
    1ca4:	4d 93       	st	X+, r20
    1ca6:	5c 93       	st	X, r21
    1ca8:	17 97       	sbiw	r26, 0x07	; 7
    1caa:	08 95       	ret
    1cac:	2f 3f       	cpi	r18, 0xFF	; 255
    1cae:	31 05       	cpc	r19, r1
    1cb0:	79 f4       	brne	.+30     	; 0x1cd0 <__unpack_f+0xc2>
    1cb2:	41 15       	cp	r20, r1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	61 05       	cpc	r22, r1
    1cb8:	71 05       	cpc	r23, r1
    1cba:	19 f4       	brne	.+6      	; 0x1cc2 <__unpack_f+0xb4>
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	8c 93       	st	X, r24
    1cc0:	08 95       	ret
    1cc2:	64 ff       	sbrs	r22, 4
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <__unpack_f+0xbe>
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	8c 93       	st	X, r24
    1cca:	12 c0       	rjmp	.+36     	; 0x1cf0 <__unpack_f+0xe2>
    1ccc:	1c 92       	st	X, r1
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <__unpack_f+0xe2>
    1cd0:	2f 57       	subi	r18, 0x7F	; 127
    1cd2:	30 40       	sbci	r19, 0x00	; 0
    1cd4:	13 96       	adiw	r26, 0x03	; 3
    1cd6:	3c 93       	st	X, r19
    1cd8:	2e 93       	st	-X, r18
    1cda:	12 97       	sbiw	r26, 0x02	; 2
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	8c 93       	st	X, r24
    1ce0:	87 e0       	ldi	r24, 0x07	; 7
    1ce2:	44 0f       	add	r20, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	66 1f       	adc	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	8a 95       	dec	r24
    1cec:	d1 f7       	brne	.-12     	; 0x1ce2 <__unpack_f+0xd4>
    1cee:	70 64       	ori	r23, 0x40	; 64
    1cf0:	14 96       	adiw	r26, 0x04	; 4
    1cf2:	4d 93       	st	X+, r20
    1cf4:	5d 93       	st	X+, r21
    1cf6:	6d 93       	st	X+, r22
    1cf8:	7c 93       	st	X, r23
    1cfa:	17 97       	sbiw	r26, 0x07	; 7
    1cfc:	08 95       	ret

00001cfe <__fpcmp_parts_f>:
    1cfe:	1f 93       	push	r17
    1d00:	dc 01       	movw	r26, r24
    1d02:	fb 01       	movw	r30, r22
    1d04:	9c 91       	ld	r25, X
    1d06:	92 30       	cpi	r25, 0x02	; 2
    1d08:	08 f4       	brcc	.+2      	; 0x1d0c <__fpcmp_parts_f+0xe>
    1d0a:	47 c0       	rjmp	.+142    	; 0x1d9a <__fpcmp_parts_f+0x9c>
    1d0c:	80 81       	ld	r24, Z
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <__fpcmp_parts_f+0x16>
    1d12:	43 c0       	rjmp	.+134    	; 0x1d9a <__fpcmp_parts_f+0x9c>
    1d14:	94 30       	cpi	r25, 0x04	; 4
    1d16:	51 f4       	brne	.+20     	; 0x1d2c <__fpcmp_parts_f+0x2e>
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	1c 91       	ld	r17, X
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	99 f5       	brne	.+102    	; 0x1d86 <__fpcmp_parts_f+0x88>
    1d20:	81 81       	ldd	r24, Z+1	; 0x01
    1d22:	68 2f       	mov	r22, r24
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	61 1b       	sub	r22, r17
    1d28:	71 09       	sbc	r23, r1
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <__fpcmp_parts_f+0xac>
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <__fpcmp_parts_f+0x3a>
    1d30:	92 30       	cpi	r25, 0x02	; 2
    1d32:	31 f4       	brne	.+12     	; 0x1d40 <__fpcmp_parts_f+0x42>
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	b9 f1       	breq	.+110    	; 0x1da6 <__fpcmp_parts_f+0xa8>
    1d38:	81 81       	ldd	r24, Z+1	; 0x01
    1d3a:	88 23       	and	r24, r24
    1d3c:	89 f1       	breq	.+98     	; 0x1da0 <__fpcmp_parts_f+0xa2>
    1d3e:	2d c0       	rjmp	.+90     	; 0x1d9a <__fpcmp_parts_f+0x9c>
    1d40:	11 96       	adiw	r26, 0x01	; 1
    1d42:	1c 91       	ld	r17, X
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	f1 f0       	breq	.+60     	; 0x1d86 <__fpcmp_parts_f+0x88>
    1d4a:	81 81       	ldd	r24, Z+1	; 0x01
    1d4c:	18 17       	cp	r17, r24
    1d4e:	d9 f4       	brne	.+54     	; 0x1d86 <__fpcmp_parts_f+0x88>
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	2d 91       	ld	r18, X+
    1d54:	3c 91       	ld	r19, X
    1d56:	13 97       	sbiw	r26, 0x03	; 3
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	82 17       	cp	r24, r18
    1d5e:	93 07       	cpc	r25, r19
    1d60:	94 f0       	brlt	.+36     	; 0x1d86 <__fpcmp_parts_f+0x88>
    1d62:	28 17       	cp	r18, r24
    1d64:	39 07       	cpc	r19, r25
    1d66:	bc f0       	brlt	.+46     	; 0x1d96 <__fpcmp_parts_f+0x98>
    1d68:	14 96       	adiw	r26, 0x04	; 4
    1d6a:	8d 91       	ld	r24, X+
    1d6c:	9d 91       	ld	r25, X+
    1d6e:	0d 90       	ld	r0, X+
    1d70:	bc 91       	ld	r27, X
    1d72:	a0 2d       	mov	r26, r0
    1d74:	24 81       	ldd	r18, Z+4	; 0x04
    1d76:	35 81       	ldd	r19, Z+5	; 0x05
    1d78:	46 81       	ldd	r20, Z+6	; 0x06
    1d7a:	57 81       	ldd	r21, Z+7	; 0x07
    1d7c:	28 17       	cp	r18, r24
    1d7e:	39 07       	cpc	r19, r25
    1d80:	4a 07       	cpc	r20, r26
    1d82:	5b 07       	cpc	r21, r27
    1d84:	18 f4       	brcc	.+6      	; 0x1d8c <__fpcmp_parts_f+0x8e>
    1d86:	11 23       	and	r17, r17
    1d88:	41 f0       	breq	.+16     	; 0x1d9a <__fpcmp_parts_f+0x9c>
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <__fpcmp_parts_f+0xa2>
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	a4 07       	cpc	r26, r20
    1d92:	b5 07       	cpc	r27, r21
    1d94:	40 f4       	brcc	.+16     	; 0x1da6 <__fpcmp_parts_f+0xa8>
    1d96:	11 23       	and	r17, r17
    1d98:	19 f0       	breq	.+6      	; 0x1da0 <__fpcmp_parts_f+0xa2>
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <__fpcmp_parts_f+0xac>
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	7f ef       	ldi	r23, 0xFF	; 255
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <__fpcmp_parts_f+0xac>
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	cb 01       	movw	r24, r22
    1dac:	1f 91       	pop	r17
    1dae:	08 95       	ret

00001db0 <vfprintf>:
    1db0:	a1 e1       	ldi	r26, 0x11	; 17
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ee ed       	ldi	r30, 0xDE	; 222
    1db6:	fe e0       	ldi	r31, 0x0E	; 14
    1db8:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__>
    1dbc:	3c 01       	movw	r6, r24
    1dbe:	7f 87       	std	Y+15, r23	; 0x0f
    1dc0:	6e 87       	std	Y+14, r22	; 0x0e
    1dc2:	6a 01       	movw	r12, r20
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	17 82       	std	Z+7, r1	; 0x07
    1dc8:	16 82       	std	Z+6, r1	; 0x06
    1dca:	83 81       	ldd	r24, Z+3	; 0x03
    1dcc:	81 fd       	sbrc	r24, 1
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <vfprintf+0x26>
    1dd0:	6f ef       	ldi	r22, 0xFF	; 255
    1dd2:	7f ef       	ldi	r23, 0xFF	; 255
    1dd4:	6f c3       	rjmp	.+1758   	; 0x24b4 <vfprintf+0x704>
    1dd6:	9e 01       	movw	r18, r28
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	39 8b       	std	Y+17, r19	; 0x11
    1dde:	28 8b       	std	Y+16, r18	; 0x10
    1de0:	f3 01       	movw	r30, r6
    1de2:	23 81       	ldd	r18, Z+3	; 0x03
    1de4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1de6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1de8:	23 fd       	sbrc	r18, 3
    1dea:	85 91       	lpm	r24, Z+
    1dec:	23 ff       	sbrs	r18, 3
    1dee:	81 91       	ld	r24, Z+
    1df0:	ff 87       	std	Y+15, r31	; 0x0f
    1df2:	ee 87       	std	Y+14, r30	; 0x0e
    1df4:	88 23       	and	r24, r24
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <vfprintf+0x4a>
    1df8:	5a c3       	rjmp	.+1716   	; 0x24ae <vfprintf+0x6fe>
    1dfa:	85 32       	cpi	r24, 0x25	; 37
    1dfc:	51 f4       	brne	.+20     	; 0x1e12 <vfprintf+0x62>
    1dfe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e00:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e02:	23 fd       	sbrc	r18, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	23 ff       	sbrs	r18, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	ff 87       	std	Y+15, r31	; 0x0f
    1e0c:	ee 87       	std	Y+14, r30	; 0x0e
    1e0e:	85 32       	cpi	r24, 0x25	; 37
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <vfprintf+0x6c>
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	b3 01       	movw	r22, r6
    1e16:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    1e1a:	e2 cf       	rjmp	.-60     	; 0x1de0 <vfprintf+0x30>
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	88 24       	eor	r8, r8
    1e22:	99 24       	eor	r9, r9
    1e24:	10 32       	cpi	r17, 0x20	; 32
    1e26:	b0 f4       	brcc	.+44     	; 0x1e54 <vfprintf+0xa4>
    1e28:	9b 32       	cpi	r25, 0x2B	; 43
    1e2a:	69 f0       	breq	.+26     	; 0x1e46 <vfprintf+0x96>
    1e2c:	9c 32       	cpi	r25, 0x2C	; 44
    1e2e:	28 f4       	brcc	.+10     	; 0x1e3a <vfprintf+0x8a>
    1e30:	90 32       	cpi	r25, 0x20	; 32
    1e32:	51 f0       	breq	.+20     	; 0x1e48 <vfprintf+0x98>
    1e34:	93 32       	cpi	r25, 0x23	; 35
    1e36:	71 f4       	brne	.+28     	; 0x1e54 <vfprintf+0xa4>
    1e38:	0b c0       	rjmp	.+22     	; 0x1e50 <vfprintf+0xa0>
    1e3a:	9d 32       	cpi	r25, 0x2D	; 45
    1e3c:	39 f0       	breq	.+14     	; 0x1e4c <vfprintf+0x9c>
    1e3e:	90 33       	cpi	r25, 0x30	; 48
    1e40:	49 f4       	brne	.+18     	; 0x1e54 <vfprintf+0xa4>
    1e42:	11 60       	ori	r17, 0x01	; 1
    1e44:	28 c0       	rjmp	.+80     	; 0x1e96 <vfprintf+0xe6>
    1e46:	12 60       	ori	r17, 0x02	; 2
    1e48:	14 60       	ori	r17, 0x04	; 4
    1e4a:	25 c0       	rjmp	.+74     	; 0x1e96 <vfprintf+0xe6>
    1e4c:	18 60       	ori	r17, 0x08	; 8
    1e4e:	23 c0       	rjmp	.+70     	; 0x1e96 <vfprintf+0xe6>
    1e50:	10 61       	ori	r17, 0x10	; 16
    1e52:	21 c0       	rjmp	.+66     	; 0x1e96 <vfprintf+0xe6>
    1e54:	17 fd       	sbrc	r17, 7
    1e56:	2a c0       	rjmp	.+84     	; 0x1eac <vfprintf+0xfc>
    1e58:	89 2f       	mov	r24, r25
    1e5a:	80 53       	subi	r24, 0x30	; 48
    1e5c:	8a 30       	cpi	r24, 0x0A	; 10
    1e5e:	78 f4       	brcc	.+30     	; 0x1e7e <vfprintf+0xce>
    1e60:	16 ff       	sbrs	r17, 6
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0xc0>
    1e64:	fa e0       	ldi	r31, 0x0A	; 10
    1e66:	9f 9e       	mul	r9, r31
    1e68:	90 2c       	mov	r9, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	98 0e       	add	r9, r24
    1e6e:	13 c0       	rjmp	.+38     	; 0x1e96 <vfprintf+0xe6>
    1e70:	3a e0       	ldi	r19, 0x0A	; 10
    1e72:	83 9e       	mul	r8, r19
    1e74:	80 2c       	mov	r8, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	88 0e       	add	r8, r24
    1e7a:	10 62       	ori	r17, 0x20	; 32
    1e7c:	0c c0       	rjmp	.+24     	; 0x1e96 <vfprintf+0xe6>
    1e7e:	9e 32       	cpi	r25, 0x2E	; 46
    1e80:	21 f4       	brne	.+8      	; 0x1e8a <vfprintf+0xda>
    1e82:	16 fd       	sbrc	r17, 6
    1e84:	14 c3       	rjmp	.+1576   	; 0x24ae <vfprintf+0x6fe>
    1e86:	10 64       	ori	r17, 0x40	; 64
    1e88:	06 c0       	rjmp	.+12     	; 0x1e96 <vfprintf+0xe6>
    1e8a:	9c 36       	cpi	r25, 0x6C	; 108
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <vfprintf+0xe2>
    1e8e:	10 68       	ori	r17, 0x80	; 128
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0xe6>
    1e92:	98 36       	cpi	r25, 0x68	; 104
    1e94:	59 f4       	brne	.+22     	; 0x1eac <vfprintf+0xfc>
    1e96:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e98:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e9a:	23 fd       	sbrc	r18, 3
    1e9c:	95 91       	lpm	r25, Z+
    1e9e:	23 ff       	sbrs	r18, 3
    1ea0:	91 91       	ld	r25, Z+
    1ea2:	ff 87       	std	Y+15, r31	; 0x0f
    1ea4:	ee 87       	std	Y+14, r30	; 0x0e
    1ea6:	99 23       	and	r25, r25
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <vfprintf+0xfc>
    1eaa:	bc cf       	rjmp	.-136    	; 0x1e24 <vfprintf+0x74>
    1eac:	89 2f       	mov	r24, r25
    1eae:	85 54       	subi	r24, 0x45	; 69
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	20 f4       	brcc	.+8      	; 0x1ebc <vfprintf+0x10c>
    1eb4:	81 2f       	mov	r24, r17
    1eb6:	80 61       	ori	r24, 0x10	; 16
    1eb8:	90 5e       	subi	r25, 0xE0	; 224
    1eba:	07 c0       	rjmp	.+14     	; 0x1eca <vfprintf+0x11a>
    1ebc:	89 2f       	mov	r24, r25
    1ebe:	85 56       	subi	r24, 0x65	; 101
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	08 f0       	brcs	.+2      	; 0x1ec6 <vfprintf+0x116>
    1ec4:	9f c1       	rjmp	.+830    	; 0x2204 <vfprintf+0x454>
    1ec6:	81 2f       	mov	r24, r17
    1ec8:	8f 7e       	andi	r24, 0xEF	; 239
    1eca:	86 fd       	sbrc	r24, 6
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <vfprintf+0x122>
    1ece:	76 e0       	ldi	r23, 0x06	; 6
    1ed0:	97 2e       	mov	r9, r23
    1ed2:	6f e3       	ldi	r22, 0x3F	; 63
    1ed4:	f6 2e       	mov	r15, r22
    1ed6:	f8 22       	and	r15, r24
    1ed8:	95 36       	cpi	r25, 0x65	; 101
    1eda:	19 f4       	brne	.+6      	; 0x1ee2 <vfprintf+0x132>
    1edc:	f0 e4       	ldi	r31, 0x40	; 64
    1ede:	ff 2a       	or	r15, r31
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <vfprintf+0x140>
    1ee2:	96 36       	cpi	r25, 0x66	; 102
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <vfprintf+0x13c>
    1ee6:	20 e8       	ldi	r18, 0x80	; 128
    1ee8:	f2 2a       	or	r15, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x140>
    1eec:	91 10       	cpse	r9, r1
    1eee:	9a 94       	dec	r9
    1ef0:	f7 fe       	sbrs	r15, 7
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <vfprintf+0x158>
    1ef4:	3b e3       	ldi	r19, 0x3B	; 59
    1ef6:	39 15       	cp	r19, r9
    1ef8:	18 f4       	brcc	.+6      	; 0x1f00 <vfprintf+0x150>
    1efa:	5c e3       	ldi	r21, 0x3C	; 60
    1efc:	b5 2e       	mov	r11, r21
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <vfprintf+0x154>
    1f00:	b9 2c       	mov	r11, r9
    1f02:	b3 94       	inc	r11
    1f04:	27 e0       	ldi	r18, 0x07	; 7
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <vfprintf+0x16a>
    1f08:	47 e0       	ldi	r20, 0x07	; 7
    1f0a:	49 15       	cp	r20, r9
    1f0c:	20 f4       	brcc	.+8      	; 0x1f16 <vfprintf+0x166>
    1f0e:	bb 24       	eor	r11, r11
    1f10:	47 e0       	ldi	r20, 0x07	; 7
    1f12:	94 2e       	mov	r9, r20
    1f14:	f7 cf       	rjmp	.-18     	; 0x1f04 <vfprintf+0x154>
    1f16:	29 2d       	mov	r18, r9
    1f18:	bb 24       	eor	r11, r11
    1f1a:	c6 01       	movw	r24, r12
    1f1c:	04 96       	adiw	r24, 0x04	; 4
    1f1e:	9d 87       	std	Y+13, r25	; 0x0d
    1f20:	8c 87       	std	Y+12, r24	; 0x0c
    1f22:	f6 01       	movw	r30, r12
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	ae 01       	movw	r20, r28
    1f2e:	4f 5f       	subi	r20, 0xFF	; 255
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	0b 2d       	mov	r16, r11
    1f34:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__ftoa_engine>
    1f38:	6c 01       	movw	r12, r24
    1f3a:	09 81       	ldd	r16, Y+1	; 0x01
    1f3c:	20 2e       	mov	r2, r16
    1f3e:	33 24       	eor	r3, r3
    1f40:	00 ff       	sbrs	r16, 0
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <vfprintf+0x19c>
    1f44:	03 fd       	sbrc	r16, 3
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x19c>
    1f48:	1d e2       	ldi	r17, 0x2D	; 45
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <vfprintf+0x1ae>
    1f4c:	f1 fe       	sbrs	r15, 1
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x1a4>
    1f50:	1b e2       	ldi	r17, 0x2B	; 43
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <vfprintf+0x1ae>
    1f54:	f2 fc       	sbrc	r15, 2
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <vfprintf+0x1ac>
    1f58:	10 e0       	ldi	r17, 0x00	; 0
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <vfprintf+0x1ae>
    1f5c:	10 e2       	ldi	r17, 0x20	; 32
    1f5e:	c1 01       	movw	r24, r2
    1f60:	8c 70       	andi	r24, 0x0C	; 12
    1f62:	90 70       	andi	r25, 0x00	; 0
    1f64:	89 2b       	or	r24, r25
    1f66:	b9 f1       	breq	.+110    	; 0x1fd6 <vfprintf+0x226>
    1f68:	11 23       	and	r17, r17
    1f6a:	11 f4       	brne	.+4      	; 0x1f70 <vfprintf+0x1c0>
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <vfprintf+0x1c2>
    1f70:	84 e0       	ldi	r24, 0x04	; 4
    1f72:	88 15       	cp	r24, r8
    1f74:	10 f0       	brcs	.+4      	; 0x1f7a <vfprintf+0x1ca>
    1f76:	88 24       	eor	r8, r8
    1f78:	0a c0       	rjmp	.+20     	; 0x1f8e <vfprintf+0x1de>
    1f7a:	88 1a       	sub	r8, r24
    1f7c:	f3 fc       	sbrc	r15, 3
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <vfprintf+0x1de>
    1f80:	80 e2       	ldi	r24, 0x20	; 32
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b3 01       	movw	r22, r6
    1f86:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    1f8a:	8a 94       	dec	r8
    1f8c:	c9 f7       	brne	.-14     	; 0x1f80 <vfprintf+0x1d0>
    1f8e:	11 23       	and	r17, r17
    1f90:	29 f0       	breq	.+10     	; 0x1f9c <vfprintf+0x1ec>
    1f92:	81 2f       	mov	r24, r17
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	b3 01       	movw	r22, r6
    1f98:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    1f9c:	23 fe       	sbrs	r2, 3
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <vfprintf+0x1f6>
    1fa0:	00 e7       	ldi	r16, 0x70	; 112
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <vfprintf+0x212>
    1fa6:	04 e7       	ldi	r16, 0x74	; 116
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	0b c0       	rjmp	.+22     	; 0x1fc2 <vfprintf+0x212>
    1fac:	e1 14       	cp	r14, r1
    1fae:	f1 04       	cpc	r15, r1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <vfprintf+0x204>
    1fb2:	80 52       	subi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	b3 01       	movw	r22, r6
    1fb8:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    1fbc:	0f 5f       	subi	r16, 0xFF	; 255
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	05 c0       	rjmp	.+10     	; 0x1fcc <vfprintf+0x21c>
    1fc2:	ef 2c       	mov	r14, r15
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	f0 e1       	ldi	r31, 0x10	; 16
    1fc8:	ef 22       	and	r14, r31
    1fca:	ff 24       	eor	r15, r15
    1fcc:	f8 01       	movw	r30, r16
    1fce:	84 91       	lpm	r24, Z+
    1fd0:	88 23       	and	r24, r24
    1fd2:	61 f7       	brne	.-40     	; 0x1fac <vfprintf+0x1fc>
    1fd4:	14 c1       	rjmp	.+552    	; 0x21fe <vfprintf+0x44e>
    1fd6:	f7 fe       	sbrs	r15, 7
    1fd8:	12 c0       	rjmp	.+36     	; 0x1ffe <vfprintf+0x24e>
    1fda:	bc 0c       	add	r11, r12
    1fdc:	24 fe       	sbrs	r2, 4
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <vfprintf+0x238>
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	81 33       	cpi	r24, 0x31	; 49
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <vfprintf+0x238>
    1fe6:	ba 94       	dec	r11
    1fe8:	1b 14       	cp	r1, r11
    1fea:	1c f0       	brlt	.+6      	; 0x1ff2 <vfprintf+0x242>
    1fec:	bb 24       	eor	r11, r11
    1fee:	b3 94       	inc	r11
    1ff0:	2d c0       	rjmp	.+90     	; 0x204c <vfprintf+0x29c>
    1ff2:	f8 e0       	ldi	r31, 0x08	; 8
    1ff4:	fb 15       	cp	r31, r11
    1ff6:	50 f5       	brcc	.+84     	; 0x204c <vfprintf+0x29c>
    1ff8:	38 e0       	ldi	r19, 0x08	; 8
    1ffa:	b3 2e       	mov	r11, r19
    1ffc:	27 c0       	rjmp	.+78     	; 0x204c <vfprintf+0x29c>
    1ffe:	f6 fc       	sbrc	r15, 6
    2000:	25 c0       	rjmp	.+74     	; 0x204c <vfprintf+0x29c>
    2002:	89 2d       	mov	r24, r9
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	8c 15       	cp	r24, r12
    2008:	9d 05       	cpc	r25, r13
    200a:	4c f0       	brlt	.+18     	; 0x201e <vfprintf+0x26e>
    200c:	2c ef       	ldi	r18, 0xFC	; 252
    200e:	c2 16       	cp	r12, r18
    2010:	2f ef       	ldi	r18, 0xFF	; 255
    2012:	d2 06       	cpc	r13, r18
    2014:	24 f0       	brlt	.+8      	; 0x201e <vfprintf+0x26e>
    2016:	30 e8       	ldi	r19, 0x80	; 128
    2018:	f3 2a       	or	r15, r19
    201a:	01 c0       	rjmp	.+2      	; 0x201e <vfprintf+0x26e>
    201c:	9a 94       	dec	r9
    201e:	99 20       	and	r9, r9
    2020:	49 f0       	breq	.+18     	; 0x2034 <vfprintf+0x284>
    2022:	e2 e0       	ldi	r30, 0x02	; 2
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	ec 0f       	add	r30, r28
    2028:	fd 1f       	adc	r31, r29
    202a:	e9 0d       	add	r30, r9
    202c:	f1 1d       	adc	r31, r1
    202e:	80 81       	ld	r24, Z
    2030:	80 33       	cpi	r24, 0x30	; 48
    2032:	a1 f3       	breq	.-24     	; 0x201c <vfprintf+0x26c>
    2034:	f7 fe       	sbrs	r15, 7
    2036:	0a c0       	rjmp	.+20     	; 0x204c <vfprintf+0x29c>
    2038:	b9 2c       	mov	r11, r9
    203a:	b3 94       	inc	r11
    203c:	89 2d       	mov	r24, r9
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	c8 16       	cp	r12, r24
    2042:	d9 06       	cpc	r13, r25
    2044:	14 f0       	brlt	.+4      	; 0x204a <vfprintf+0x29a>
    2046:	99 24       	eor	r9, r9
    2048:	01 c0       	rjmp	.+2      	; 0x204c <vfprintf+0x29c>
    204a:	9c 18       	sub	r9, r12
    204c:	f7 fc       	sbrc	r15, 7
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <vfprintf+0x2a6>
    2050:	25 e0       	ldi	r18, 0x05	; 5
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x2b8>
    2056:	1c 14       	cp	r1, r12
    2058:	1d 04       	cpc	r1, r13
    205a:	1c f0       	brlt	.+6      	; 0x2062 <vfprintf+0x2b2>
    205c:	21 e0       	ldi	r18, 0x01	; 1
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <vfprintf+0x2b8>
    2062:	96 01       	movw	r18, r12
    2064:	2f 5f       	subi	r18, 0xFF	; 255
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	11 23       	and	r17, r17
    206a:	11 f0       	breq	.+4      	; 0x2070 <vfprintf+0x2c0>
    206c:	2f 5f       	subi	r18, 0xFF	; 255
    206e:	3f 4f       	sbci	r19, 0xFF	; 255
    2070:	99 20       	and	r9, r9
    2072:	29 f0       	breq	.+10     	; 0x207e <vfprintf+0x2ce>
    2074:	89 2d       	mov	r24, r9
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	28 0f       	add	r18, r24
    207c:	39 1f       	adc	r19, r25
    207e:	88 2d       	mov	r24, r8
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	28 17       	cp	r18, r24
    2084:	39 07       	cpc	r19, r25
    2086:	14 f0       	brlt	.+4      	; 0x208c <vfprintf+0x2dc>
    2088:	88 24       	eor	r8, r8
    208a:	01 c0       	rjmp	.+2      	; 0x208e <vfprintf+0x2de>
    208c:	82 1a       	sub	r8, r18
    208e:	4f 2c       	mov	r4, r15
    2090:	55 24       	eor	r5, r5
    2092:	c2 01       	movw	r24, r4
    2094:	89 70       	andi	r24, 0x09	; 9
    2096:	90 70       	andi	r25, 0x00	; 0
    2098:	89 2b       	or	r24, r25
    209a:	39 f0       	breq	.+14     	; 0x20aa <vfprintf+0x2fa>
    209c:	08 c0       	rjmp	.+16     	; 0x20ae <vfprintf+0x2fe>
    209e:	80 e2       	ldi	r24, 0x20	; 32
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	b3 01       	movw	r22, r6
    20a4:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    20a8:	8a 94       	dec	r8
    20aa:	88 20       	and	r8, r8
    20ac:	c1 f7       	brne	.-16     	; 0x209e <vfprintf+0x2ee>
    20ae:	11 23       	and	r17, r17
    20b0:	29 f0       	breq	.+10     	; 0x20bc <vfprintf+0x30c>
    20b2:	81 2f       	mov	r24, r17
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	b3 01       	movw	r22, r6
    20b8:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    20bc:	43 fe       	sbrs	r4, 3
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <vfprintf+0x31e>
    20c0:	08 c0       	rjmp	.+16     	; 0x20d2 <vfprintf+0x322>
    20c2:	80 e3       	ldi	r24, 0x30	; 48
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	b3 01       	movw	r22, r6
    20c8:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    20cc:	8a 94       	dec	r8
    20ce:	88 20       	and	r8, r8
    20d0:	c1 f7       	brne	.-16     	; 0x20c2 <vfprintf+0x312>
    20d2:	f7 fe       	sbrs	r15, 7
    20d4:	46 c0       	rjmp	.+140    	; 0x2162 <vfprintf+0x3b2>
    20d6:	86 01       	movw	r16, r12
    20d8:	d7 fe       	sbrs	r13, 7
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <vfprintf+0x330>
    20dc:	00 e0       	ldi	r16, 0x00	; 0
    20de:	10 e0       	ldi	r17, 0x00	; 0
    20e0:	76 01       	movw	r14, r12
    20e2:	08 94       	sec
    20e4:	e1 1c       	adc	r14, r1
    20e6:	f1 1c       	adc	r15, r1
    20e8:	e0 1a       	sub	r14, r16
    20ea:	f1 0a       	sbc	r15, r17
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	4c 0f       	add	r20, r28
    20f2:	5d 1f       	adc	r21, r29
    20f4:	e4 0e       	add	r14, r20
    20f6:	f5 1e       	adc	r15, r21
    20f8:	26 01       	movw	r4, r12
    20fa:	4b 18       	sub	r4, r11
    20fc:	51 08       	sbc	r5, r1
    20fe:	89 2d       	mov	r24, r9
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	aa 24       	eor	r10, r10
    2104:	bb 24       	eor	r11, r11
    2106:	a8 1a       	sub	r10, r24
    2108:	b9 0a       	sbc	r11, r25
    210a:	5f ef       	ldi	r21, 0xFF	; 255
    210c:	0f 3f       	cpi	r16, 0xFF	; 255
    210e:	15 07       	cpc	r17, r21
    2110:	29 f4       	brne	.+10     	; 0x211c <vfprintf+0x36c>
    2112:	8e e2       	ldi	r24, 0x2E	; 46
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	b3 01       	movw	r22, r6
    2118:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    211c:	c0 16       	cp	r12, r16
    211e:	d1 06       	cpc	r13, r17
    2120:	34 f0       	brlt	.+12     	; 0x212e <vfprintf+0x37e>
    2122:	40 16       	cp	r4, r16
    2124:	51 06       	cpc	r5, r17
    2126:	1c f4       	brge	.+6      	; 0x212e <vfprintf+0x37e>
    2128:	f7 01       	movw	r30, r14
    212a:	80 81       	ld	r24, Z
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <vfprintf+0x380>
    212e:	80 e3       	ldi	r24, 0x30	; 48
    2130:	01 50       	subi	r16, 0x01	; 1
    2132:	10 40       	sbci	r17, 0x00	; 0
    2134:	08 94       	sec
    2136:	e1 1c       	adc	r14, r1
    2138:	f1 1c       	adc	r15, r1
    213a:	0a 15       	cp	r16, r10
    213c:	1b 05       	cpc	r17, r11
    213e:	2c f0       	brlt	.+10     	; 0x214a <vfprintf+0x39a>
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	b3 01       	movw	r22, r6
    2144:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2148:	e0 cf       	rjmp	.-64     	; 0x210a <vfprintf+0x35a>
    214a:	0c 15       	cp	r16, r12
    214c:	1d 05       	cpc	r17, r13
    214e:	39 f4       	brne	.+14     	; 0x215e <vfprintf+0x3ae>
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	96 33       	cpi	r25, 0x36	; 54
    2154:	18 f4       	brcc	.+6      	; 0x215c <vfprintf+0x3ac>
    2156:	95 33       	cpi	r25, 0x35	; 53
    2158:	11 f4       	brne	.+4      	; 0x215e <vfprintf+0x3ae>
    215a:	24 fe       	sbrs	r2, 4
    215c:	81 e3       	ldi	r24, 0x31	; 49
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	4b c0       	rjmp	.+150    	; 0x21f8 <vfprintf+0x448>
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	81 33       	cpi	r24, 0x31	; 49
    2166:	09 f0       	breq	.+2      	; 0x216a <vfprintf+0x3ba>
    2168:	0f 7e       	andi	r16, 0xEF	; 239
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	b3 01       	movw	r22, r6
    216e:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2172:	99 20       	and	r9, r9
    2174:	a1 f0       	breq	.+40     	; 0x219e <vfprintf+0x3ee>
    2176:	8e e2       	ldi	r24, 0x2E	; 46
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	b3 01       	movw	r22, r6
    217c:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2180:	12 e0       	ldi	r17, 0x02	; 2
    2182:	e1 e0       	ldi	r30, 0x01	; 1
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	ec 0f       	add	r30, r28
    2188:	fd 1f       	adc	r31, r29
    218a:	e1 0f       	add	r30, r17
    218c:	f1 1d       	adc	r31, r1
    218e:	1f 5f       	subi	r17, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	b3 01       	movw	r22, r6
    2196:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    219a:	9a 94       	dec	r9
    219c:	91 f7       	brne	.-28     	; 0x2182 <vfprintf+0x3d2>
    219e:	44 fc       	sbrc	r4, 4
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <vfprintf+0x3f8>
    21a2:	85 e6       	ldi	r24, 0x65	; 101
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <vfprintf+0x3fc>
    21a8:	85 e4       	ldi	r24, 0x45	; 69
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	b3 01       	movw	r22, r6
    21ae:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    21b2:	d7 fc       	sbrc	r13, 7
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <vfprintf+0x410>
    21b6:	c1 14       	cp	r12, r1
    21b8:	d1 04       	cpc	r13, r1
    21ba:	41 f4       	brne	.+16     	; 0x21cc <vfprintf+0x41c>
    21bc:	04 ff       	sbrs	r16, 4
    21be:	06 c0       	rjmp	.+12     	; 0x21cc <vfprintf+0x41c>
    21c0:	d0 94       	com	r13
    21c2:	c1 94       	neg	r12
    21c4:	d1 08       	sbc	r13, r1
    21c6:	d3 94       	inc	r13
    21c8:	8d e2       	ldi	r24, 0x2D	; 45
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <vfprintf+0x41e>
    21cc:	8b e2       	ldi	r24, 0x2B	; 43
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	b3 01       	movw	r22, r6
    21d2:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    21d6:	80 e3       	ldi	r24, 0x30	; 48
    21d8:	05 c0       	rjmp	.+10     	; 0x21e4 <vfprintf+0x434>
    21da:	8f 5f       	subi	r24, 0xFF	; 255
    21dc:	26 ef       	ldi	r18, 0xF6	; 246
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	c2 0e       	add	r12, r18
    21e2:	d3 1e       	adc	r13, r19
    21e4:	3a e0       	ldi	r19, 0x0A	; 10
    21e6:	c3 16       	cp	r12, r19
    21e8:	d1 04       	cpc	r13, r1
    21ea:	bc f7       	brge	.-18     	; 0x21da <vfprintf+0x42a>
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	b3 01       	movw	r22, r6
    21f0:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    21f4:	c6 01       	movw	r24, r12
    21f6:	c0 96       	adiw	r24, 0x30	; 48
    21f8:	b3 01       	movw	r22, r6
    21fa:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    21fe:	cc 84       	ldd	r12, Y+12	; 0x0c
    2200:	dd 84       	ldd	r13, Y+13	; 0x0d
    2202:	52 c1       	rjmp	.+676    	; 0x24a8 <vfprintf+0x6f8>
    2204:	93 36       	cpi	r25, 0x63	; 99
    2206:	31 f0       	breq	.+12     	; 0x2214 <vfprintf+0x464>
    2208:	93 37       	cpi	r25, 0x73	; 115
    220a:	99 f0       	breq	.+38     	; 0x2232 <vfprintf+0x482>
    220c:	93 35       	cpi	r25, 0x53	; 83
    220e:	09 f0       	breq	.+2      	; 0x2212 <vfprintf+0x462>
    2210:	59 c0       	rjmp	.+178    	; 0x22c4 <vfprintf+0x514>
    2212:	23 c0       	rjmp	.+70     	; 0x225a <vfprintf+0x4aa>
    2214:	f6 01       	movw	r30, r12
    2216:	80 81       	ld	r24, Z
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	5e 01       	movw	r10, r28
    221c:	08 94       	sec
    221e:	a1 1c       	adc	r10, r1
    2220:	b1 1c       	adc	r11, r1
    2222:	22 e0       	ldi	r18, 0x02	; 2
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	c2 0e       	add	r12, r18
    2228:	d3 1e       	adc	r13, r19
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	e2 2e       	mov	r14, r18
    222e:	f1 2c       	mov	r15, r1
    2230:	12 c0       	rjmp	.+36     	; 0x2256 <vfprintf+0x4a6>
    2232:	f6 01       	movw	r30, r12
    2234:	a0 80       	ld	r10, Z
    2236:	b1 80       	ldd	r11, Z+1	; 0x01
    2238:	16 fd       	sbrc	r17, 6
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <vfprintf+0x492>
    223c:	6f ef       	ldi	r22, 0xFF	; 255
    223e:	7f ef       	ldi	r23, 0xFF	; 255
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x496>
    2242:	69 2d       	mov	r22, r9
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	22 e0       	ldi	r18, 0x02	; 2
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	c2 0e       	add	r12, r18
    224c:	d3 1e       	adc	r13, r19
    224e:	c5 01       	movw	r24, r10
    2250:	0e 94 bd 18 	call	0x317a	; 0x317a <strnlen>
    2254:	7c 01       	movw	r14, r24
    2256:	1f 77       	andi	r17, 0x7F	; 127
    2258:	13 c0       	rjmp	.+38     	; 0x2280 <vfprintf+0x4d0>
    225a:	f6 01       	movw	r30, r12
    225c:	a0 80       	ld	r10, Z
    225e:	b1 80       	ldd	r11, Z+1	; 0x01
    2260:	16 fd       	sbrc	r17, 6
    2262:	03 c0       	rjmp	.+6      	; 0x226a <vfprintf+0x4ba>
    2264:	6f ef       	ldi	r22, 0xFF	; 255
    2266:	7f ef       	ldi	r23, 0xFF	; 255
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0x4be>
    226a:	69 2d       	mov	r22, r9
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	22 e0       	ldi	r18, 0x02	; 2
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	c2 0e       	add	r12, r18
    2274:	d3 1e       	adc	r13, r19
    2276:	c5 01       	movw	r24, r10
    2278:	0e 94 b2 18 	call	0x3164	; 0x3164 <strnlen_P>
    227c:	7c 01       	movw	r14, r24
    227e:	10 68       	ori	r17, 0x80	; 128
    2280:	13 ff       	sbrs	r17, 3
    2282:	07 c0       	rjmp	.+14     	; 0x2292 <vfprintf+0x4e2>
    2284:	1b c0       	rjmp	.+54     	; 0x22bc <vfprintf+0x50c>
    2286:	80 e2       	ldi	r24, 0x20	; 32
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	b3 01       	movw	r22, r6
    228c:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2290:	8a 94       	dec	r8
    2292:	88 2d       	mov	r24, r8
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	e8 16       	cp	r14, r24
    2298:	f9 06       	cpc	r15, r25
    229a:	a8 f3       	brcs	.-22     	; 0x2286 <vfprintf+0x4d6>
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <vfprintf+0x50c>
    229e:	f5 01       	movw	r30, r10
    22a0:	17 fd       	sbrc	r17, 7
    22a2:	85 91       	lpm	r24, Z+
    22a4:	17 ff       	sbrs	r17, 7
    22a6:	81 91       	ld	r24, Z+
    22a8:	5f 01       	movw	r10, r30
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	b3 01       	movw	r22, r6
    22ae:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    22b2:	81 10       	cpse	r8, r1
    22b4:	8a 94       	dec	r8
    22b6:	08 94       	sec
    22b8:	e1 08       	sbc	r14, r1
    22ba:	f1 08       	sbc	r15, r1
    22bc:	e1 14       	cp	r14, r1
    22be:	f1 04       	cpc	r15, r1
    22c0:	71 f7       	brne	.-36     	; 0x229e <vfprintf+0x4ee>
    22c2:	f2 c0       	rjmp	.+484    	; 0x24a8 <vfprintf+0x6f8>
    22c4:	94 36       	cpi	r25, 0x64	; 100
    22c6:	11 f0       	breq	.+4      	; 0x22cc <vfprintf+0x51c>
    22c8:	99 36       	cpi	r25, 0x69	; 105
    22ca:	89 f5       	brne	.+98     	; 0x232e <vfprintf+0x57e>
    22cc:	17 ff       	sbrs	r17, 7
    22ce:	08 c0       	rjmp	.+16     	; 0x22e0 <vfprintf+0x530>
    22d0:	f6 01       	movw	r30, r12
    22d2:	20 81       	ld	r18, Z
    22d4:	31 81       	ldd	r19, Z+1	; 0x01
    22d6:	42 81       	ldd	r20, Z+2	; 0x02
    22d8:	53 81       	ldd	r21, Z+3	; 0x03
    22da:	84 e0       	ldi	r24, 0x04	; 4
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0a c0       	rjmp	.+20     	; 0x22f4 <vfprintf+0x544>
    22e0:	f6 01       	movw	r30, r12
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	9c 01       	movw	r18, r24
    22e8:	44 27       	eor	r20, r20
    22ea:	37 fd       	sbrc	r19, 7
    22ec:	40 95       	com	r20
    22ee:	54 2f       	mov	r21, r20
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	c8 0e       	add	r12, r24
    22f6:	d9 1e       	adc	r13, r25
    22f8:	9f e6       	ldi	r25, 0x6F	; 111
    22fa:	f9 2e       	mov	r15, r25
    22fc:	f1 22       	and	r15, r17
    22fe:	57 ff       	sbrs	r21, 7
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <vfprintf+0x564>
    2302:	50 95       	com	r21
    2304:	40 95       	com	r20
    2306:	30 95       	com	r19
    2308:	21 95       	neg	r18
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	4f 4f       	sbci	r20, 0xFF	; 255
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	90 e8       	ldi	r25, 0x80	; 128
    2312:	f9 2a       	or	r15, r25
    2314:	ca 01       	movw	r24, r20
    2316:	b9 01       	movw	r22, r18
    2318:	ae 01       	movw	r20, r28
    231a:	4f 5f       	subi	r20, 0xFF	; 255
    231c:	5f 4f       	sbci	r21, 0xFF	; 255
    231e:	2a e0       	ldi	r18, 0x0A	; 10
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__ultoa_invert>
    2326:	e8 2e       	mov	r14, r24
    2328:	e8 89       	ldd	r30, Y+16	; 0x10
    232a:	ee 1a       	sub	r14, r30
    232c:	41 c0       	rjmp	.+130    	; 0x23b0 <vfprintf+0x600>
    232e:	95 37       	cpi	r25, 0x75	; 117
    2330:	21 f4       	brne	.+8      	; 0x233a <vfprintf+0x58a>
    2332:	1f 7e       	andi	r17, 0xEF	; 239
    2334:	2a e0       	ldi	r18, 0x0A	; 10
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	1c c0       	rjmp	.+56     	; 0x2372 <vfprintf+0x5c2>
    233a:	19 7f       	andi	r17, 0xF9	; 249
    233c:	9f 36       	cpi	r25, 0x6F	; 111
    233e:	61 f0       	breq	.+24     	; 0x2358 <vfprintf+0x5a8>
    2340:	90 37       	cpi	r25, 0x70	; 112
    2342:	20 f4       	brcc	.+8      	; 0x234c <vfprintf+0x59c>
    2344:	98 35       	cpi	r25, 0x58	; 88
    2346:	09 f0       	breq	.+2      	; 0x234a <vfprintf+0x59a>
    2348:	b2 c0       	rjmp	.+356    	; 0x24ae <vfprintf+0x6fe>
    234a:	0f c0       	rjmp	.+30     	; 0x236a <vfprintf+0x5ba>
    234c:	90 37       	cpi	r25, 0x70	; 112
    234e:	39 f0       	breq	.+14     	; 0x235e <vfprintf+0x5ae>
    2350:	98 37       	cpi	r25, 0x78	; 120
    2352:	09 f0       	breq	.+2      	; 0x2356 <vfprintf+0x5a6>
    2354:	ac c0       	rjmp	.+344    	; 0x24ae <vfprintf+0x6fe>
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <vfprintf+0x5b0>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	0a c0       	rjmp	.+20     	; 0x2372 <vfprintf+0x5c2>
    235e:	10 61       	ori	r17, 0x10	; 16
    2360:	14 fd       	sbrc	r17, 4
    2362:	14 60       	ori	r17, 0x04	; 4
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <vfprintf+0x5c2>
    236a:	14 fd       	sbrc	r17, 4
    236c:	16 60       	ori	r17, 0x06	; 6
    236e:	20 e1       	ldi	r18, 0x10	; 16
    2370:	32 e0       	ldi	r19, 0x02	; 2
    2372:	17 ff       	sbrs	r17, 7
    2374:	08 c0       	rjmp	.+16     	; 0x2386 <vfprintf+0x5d6>
    2376:	f6 01       	movw	r30, r12
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	44 e0       	ldi	r20, 0x04	; 4
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <vfprintf+0x5e6>
    2386:	f6 01       	movw	r30, r12
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	bc 01       	movw	r22, r24
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	42 e0       	ldi	r20, 0x02	; 2
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	c4 0e       	add	r12, r20
    2398:	d5 1e       	adc	r13, r21
    239a:	ae 01       	movw	r20, r28
    239c:	4f 5f       	subi	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__ultoa_invert>
    23a4:	e8 2e       	mov	r14, r24
    23a6:	58 89       	ldd	r21, Y+16	; 0x10
    23a8:	e5 1a       	sub	r14, r21
    23aa:	8f e7       	ldi	r24, 0x7F	; 127
    23ac:	f8 2e       	mov	r15, r24
    23ae:	f1 22       	and	r15, r17
    23b0:	f6 fe       	sbrs	r15, 6
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <vfprintf+0x61a>
    23b4:	8e ef       	ldi	r24, 0xFE	; 254
    23b6:	f8 22       	and	r15, r24
    23b8:	e9 14       	cp	r14, r9
    23ba:	38 f4       	brcc	.+14     	; 0x23ca <vfprintf+0x61a>
    23bc:	f4 fe       	sbrs	r15, 4
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <vfprintf+0x61e>
    23c0:	f2 fc       	sbrc	r15, 2
    23c2:	05 c0       	rjmp	.+10     	; 0x23ce <vfprintf+0x61e>
    23c4:	9f ee       	ldi	r25, 0xEF	; 239
    23c6:	f9 22       	and	r15, r25
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <vfprintf+0x61e>
    23ca:	1e 2d       	mov	r17, r14
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <vfprintf+0x620>
    23ce:	19 2d       	mov	r17, r9
    23d0:	f4 fe       	sbrs	r15, 4
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <vfprintf+0x63e>
    23d4:	fe 01       	movw	r30, r28
    23d6:	ee 0d       	add	r30, r14
    23d8:	f1 1d       	adc	r31, r1
    23da:	80 81       	ld	r24, Z
    23dc:	80 33       	cpi	r24, 0x30	; 48
    23de:	19 f4       	brne	.+6      	; 0x23e6 <vfprintf+0x636>
    23e0:	e9 ee       	ldi	r30, 0xE9	; 233
    23e2:	fe 22       	and	r15, r30
    23e4:	08 c0       	rjmp	.+16     	; 0x23f6 <vfprintf+0x646>
    23e6:	1f 5f       	subi	r17, 0xFF	; 255
    23e8:	f2 fe       	sbrs	r15, 2
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <vfprintf+0x646>
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <vfprintf+0x644>
    23ee:	8f 2d       	mov	r24, r15
    23f0:	86 78       	andi	r24, 0x86	; 134
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <vfprintf+0x646>
    23f4:	1f 5f       	subi	r17, 0xFF	; 255
    23f6:	0f 2d       	mov	r16, r15
    23f8:	f3 fc       	sbrc	r15, 3
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <vfprintf+0x674>
    23fc:	f0 fe       	sbrs	r15, 0
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <vfprintf+0x66e>
    2400:	18 15       	cp	r17, r8
    2402:	10 f0       	brcs	.+4      	; 0x2408 <vfprintf+0x658>
    2404:	9e 2c       	mov	r9, r14
    2406:	0b c0       	rjmp	.+22     	; 0x241e <vfprintf+0x66e>
    2408:	9e 2c       	mov	r9, r14
    240a:	98 0c       	add	r9, r8
    240c:	91 1a       	sub	r9, r17
    240e:	18 2d       	mov	r17, r8
    2410:	06 c0       	rjmp	.+12     	; 0x241e <vfprintf+0x66e>
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	b3 01       	movw	r22, r6
    2418:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    241c:	1f 5f       	subi	r17, 0xFF	; 255
    241e:	18 15       	cp	r17, r8
    2420:	c0 f3       	brcs	.-16     	; 0x2412 <vfprintf+0x662>
    2422:	04 c0       	rjmp	.+8      	; 0x242c <vfprintf+0x67c>
    2424:	18 15       	cp	r17, r8
    2426:	10 f4       	brcc	.+4      	; 0x242c <vfprintf+0x67c>
    2428:	81 1a       	sub	r8, r17
    242a:	01 c0       	rjmp	.+2      	; 0x242e <vfprintf+0x67e>
    242c:	88 24       	eor	r8, r8
    242e:	04 ff       	sbrs	r16, 4
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <vfprintf+0x6a0>
    2432:	80 e3       	ldi	r24, 0x30	; 48
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	b3 01       	movw	r22, r6
    2438:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    243c:	02 ff       	sbrs	r16, 2
    243e:	1d c0       	rjmp	.+58     	; 0x247a <vfprintf+0x6ca>
    2440:	01 fd       	sbrc	r16, 1
    2442:	03 c0       	rjmp	.+6      	; 0x244a <vfprintf+0x69a>
    2444:	88 e7       	ldi	r24, 0x78	; 120
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e c0       	rjmp	.+28     	; 0x2466 <vfprintf+0x6b6>
    244a:	88 e5       	ldi	r24, 0x58	; 88
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0b c0       	rjmp	.+22     	; 0x2466 <vfprintf+0x6b6>
    2450:	80 2f       	mov	r24, r16
    2452:	86 78       	andi	r24, 0x86	; 134
    2454:	91 f0       	breq	.+36     	; 0x247a <vfprintf+0x6ca>
    2456:	01 ff       	sbrs	r16, 1
    2458:	02 c0       	rjmp	.+4      	; 0x245e <vfprintf+0x6ae>
    245a:	8b e2       	ldi	r24, 0x2B	; 43
    245c:	01 c0       	rjmp	.+2      	; 0x2460 <vfprintf+0x6b0>
    245e:	80 e2       	ldi	r24, 0x20	; 32
    2460:	f7 fc       	sbrc	r15, 7
    2462:	8d e2       	ldi	r24, 0x2D	; 45
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	b3 01       	movw	r22, r6
    2468:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    246c:	06 c0       	rjmp	.+12     	; 0x247a <vfprintf+0x6ca>
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	b3 01       	movw	r22, r6
    2474:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2478:	9a 94       	dec	r9
    247a:	e9 14       	cp	r14, r9
    247c:	c0 f3       	brcs	.-16     	; 0x246e <vfprintf+0x6be>
    247e:	ea 94       	dec	r14
    2480:	e1 e0       	ldi	r30, 0x01	; 1
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	ec 0f       	add	r30, r28
    2486:	fd 1f       	adc	r31, r29
    2488:	ee 0d       	add	r30, r14
    248a:	f1 1d       	adc	r31, r1
    248c:	80 81       	ld	r24, Z
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	b3 01       	movw	r22, r6
    2492:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    2496:	ee 20       	and	r14, r14
    2498:	91 f7       	brne	.-28     	; 0x247e <vfprintf+0x6ce>
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <vfprintf+0x6f8>
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	b3 01       	movw	r22, r6
    24a2:	0e 94 0a 19 	call	0x3214	; 0x3214 <fputc>
    24a6:	8a 94       	dec	r8
    24a8:	88 20       	and	r8, r8
    24aa:	c1 f7       	brne	.-16     	; 0x249c <vfprintf+0x6ec>
    24ac:	99 cc       	rjmp	.-1742   	; 0x1de0 <vfprintf+0x30>
    24ae:	f3 01       	movw	r30, r6
    24b0:	66 81       	ldd	r22, Z+6	; 0x06
    24b2:	77 81       	ldd	r23, Z+7	; 0x07
    24b4:	cb 01       	movw	r24, r22
    24b6:	61 96       	adiw	r28, 0x11	; 17
    24b8:	e2 e1       	ldi	r30, 0x12	; 18
    24ba:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__>

000024be <putval>:
    24be:	fc 01       	movw	r30, r24
    24c0:	20 fd       	sbrc	r18, 0
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <putval+0x16>
    24c4:	23 fd       	sbrc	r18, 3
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <putval+0x14>
    24c8:	22 ff       	sbrs	r18, 2
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <putval+0x12>
    24cc:	73 83       	std	Z+3, r23	; 0x03
    24ce:	62 83       	std	Z+2, r22	; 0x02
    24d0:	51 83       	std	Z+1, r21	; 0x01
    24d2:	40 83       	st	Z, r20
    24d4:	08 95       	ret

000024d6 <mulacc>:
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	44 ff       	sbrs	r20, 4
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <mulacc+0x10>
    24e2:	33 e0       	ldi	r19, 0x03	; 3
    24e4:	11 c0       	rjmp	.+34     	; 0x2508 <mulacc+0x32>
    24e6:	46 ff       	sbrs	r20, 6
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <mulacc+0x18>
    24ea:	34 e0       	ldi	r19, 0x04	; 4
    24ec:	0d c0       	rjmp	.+26     	; 0x2508 <mulacc+0x32>
    24ee:	db 01       	movw	r26, r22
    24f0:	fc 01       	movw	r30, r24
    24f2:	aa 0f       	add	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	ee 1f       	adc	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	10 94       	com	r1
    24fc:	d1 f7       	brne	.-12     	; 0x24f2 <mulacc+0x1c>
    24fe:	6a 0f       	add	r22, r26
    2500:	7b 1f       	adc	r23, r27
    2502:	8e 1f       	adc	r24, r30
    2504:	9f 1f       	adc	r25, r31
    2506:	31 e0       	ldi	r19, 0x01	; 1
    2508:	66 0f       	add	r22, r22
    250a:	77 1f       	adc	r23, r23
    250c:	88 1f       	adc	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	31 50       	subi	r19, 0x01	; 1
    2512:	d1 f7       	brne	.-12     	; 0x2508 <mulacc+0x32>
    2514:	7b 01       	movw	r14, r22
    2516:	8c 01       	movw	r16, r24
    2518:	e2 0e       	add	r14, r18
    251a:	f1 1c       	adc	r15, r1
    251c:	01 1d       	adc	r16, r1
    251e:	11 1d       	adc	r17, r1
    2520:	a8 01       	movw	r20, r16
    2522:	97 01       	movw	r18, r14
    2524:	b7 01       	movw	r22, r14
    2526:	ca 01       	movw	r24, r20
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	ff 90       	pop	r15
    252e:	ef 90       	pop	r14
    2530:	08 95       	ret

00002532 <skip_spaces>:
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	8c 01       	movw	r16, r24
    253c:	c8 01       	movw	r24, r16
    253e:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2542:	ec 01       	movw	r28, r24
    2544:	97 fd       	sbrc	r25, 7
    2546:	08 c0       	rjmp	.+16     	; 0x2558 <skip_spaces+0x26>
    2548:	0e 94 97 18 	call	0x312e	; 0x312e <isspace>
    254c:	89 2b       	or	r24, r25
    254e:	b1 f7       	brne	.-20     	; 0x253c <skip_spaces+0xa>
    2550:	ce 01       	movw	r24, r28
    2552:	b8 01       	movw	r22, r16
    2554:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    2558:	ce 01       	movw	r24, r28
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	08 95       	ret

00002564 <conv_int>:
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	5c 01       	movw	r10, r24
    257c:	eb 01       	movw	r28, r22
    257e:	4a 01       	movw	r8, r20
    2580:	12 2f       	mov	r17, r18
    2582:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2586:	ac 01       	movw	r20, r24
    2588:	8b 32       	cpi	r24, 0x2B	; 43
    258a:	19 f0       	breq	.+6      	; 0x2592 <conv_int+0x2e>
    258c:	8d 32       	cpi	r24, 0x2D	; 45
    258e:	51 f4       	brne	.+20     	; 0x25a4 <conv_int+0x40>
    2590:	10 68       	ori	r17, 0x80	; 128
    2592:	21 97       	sbiw	r28, 0x01	; 1
    2594:	09 f4       	brne	.+2      	; 0x2598 <conv_int+0x34>
    2596:	6d c0       	rjmp	.+218    	; 0x2672 <conv_int+0x10e>
    2598:	c5 01       	movw	r24, r10
    259a:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    259e:	ac 01       	movw	r20, r24
    25a0:	97 fd       	sbrc	r25, 7
    25a2:	67 c0       	rjmp	.+206    	; 0x2672 <conv_int+0x10e>
    25a4:	6d ef       	ldi	r22, 0xFD	; 253
    25a6:	d6 2e       	mov	r13, r22
    25a8:	d1 22       	and	r13, r17
    25aa:	8d 2d       	mov	r24, r13
    25ac:	80 73       	andi	r24, 0x30	; 48
    25ae:	01 f5       	brne	.+64     	; 0x25f0 <conv_int+0x8c>
    25b0:	40 33       	cpi	r20, 0x30	; 48
    25b2:	f1 f4       	brne	.+60     	; 0x25f0 <conv_int+0x8c>
    25b4:	21 97       	sbiw	r28, 0x01	; 1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <conv_int+0x56>
    25b8:	47 c0       	rjmp	.+142    	; 0x2648 <conv_int+0xe4>
    25ba:	c5 01       	movw	r24, r10
    25bc:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    25c0:	ac 01       	movw	r20, r24
    25c2:	97 fd       	sbrc	r25, 7
    25c4:	41 c0       	rjmp	.+130    	; 0x2648 <conv_int+0xe4>
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	d8 2a       	or	r13, r24
    25ca:	48 37       	cpi	r20, 0x78	; 120
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <conv_int+0x6e>
    25ce:	48 35       	cpi	r20, 0x58	; 88
    25d0:	59 f4       	brne	.+22     	; 0x25e8 <conv_int+0x84>
    25d2:	80 e4       	ldi	r24, 0x40	; 64
    25d4:	d8 2a       	or	r13, r24
    25d6:	21 97       	sbiw	r28, 0x01	; 1
    25d8:	b9 f1       	breq	.+110    	; 0x2648 <conv_int+0xe4>
    25da:	c5 01       	movw	r24, r10
    25dc:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    25e0:	ac 01       	movw	r20, r24
    25e2:	99 23       	and	r25, r25
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <conv_int+0x8c>
    25e6:	30 c0       	rjmp	.+96     	; 0x2648 <conv_int+0xe4>
    25e8:	d6 fc       	sbrc	r13, 6
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <conv_int+0x8c>
    25ec:	80 e1       	ldi	r24, 0x10	; 16
    25ee:	d8 2a       	or	r13, r24
    25f0:	ee 24       	eor	r14, r14
    25f2:	ff 24       	eor	r15, r15
    25f4:	87 01       	movw	r16, r14
    25f6:	24 2f       	mov	r18, r20
    25f8:	20 53       	subi	r18, 0x30	; 48
    25fa:	28 30       	cpi	r18, 0x08	; 8
    25fc:	88 f0       	brcs	.+34     	; 0x2620 <conv_int+0xbc>
    25fe:	d4 fc       	sbrc	r13, 4
    2600:	09 c0       	rjmp	.+18     	; 0x2614 <conv_int+0xb0>
    2602:	2a 30       	cpi	r18, 0x0A	; 10
    2604:	68 f0       	brcs	.+26     	; 0x2620 <conv_int+0xbc>
    2606:	d6 fe       	sbrs	r13, 6
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <conv_int+0xb0>
    260a:	2f 7d       	andi	r18, 0xDF	; 223
    260c:	82 2f       	mov	r24, r18
    260e:	81 51       	subi	r24, 0x11	; 17
    2610:	86 30       	cpi	r24, 0x06	; 6
    2612:	28 f0       	brcs	.+10     	; 0x261e <conv_int+0xba>
    2614:	ca 01       	movw	r24, r20
    2616:	b5 01       	movw	r22, r10
    2618:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    261c:	12 c0       	rjmp	.+36     	; 0x2642 <conv_int+0xde>
    261e:	27 50       	subi	r18, 0x07	; 7
    2620:	c8 01       	movw	r24, r16
    2622:	b7 01       	movw	r22, r14
    2624:	4d 2d       	mov	r20, r13
    2626:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <mulacc>
    262a:	7b 01       	movw	r14, r22
    262c:	8c 01       	movw	r16, r24
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	d8 2a       	or	r13, r24
    2632:	21 97       	sbiw	r28, 0x01	; 1
    2634:	61 f0       	breq	.+24     	; 0x264e <conv_int+0xea>
    2636:	c5 01       	movw	r24, r10
    2638:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    263c:	ac 01       	movw	r20, r24
    263e:	97 ff       	sbrs	r25, 7
    2640:	da cf       	rjmp	.-76     	; 0x25f6 <conv_int+0x92>
    2642:	d1 fc       	sbrc	r13, 1
    2644:	04 c0       	rjmp	.+8      	; 0x264e <conv_int+0xea>
    2646:	15 c0       	rjmp	.+42     	; 0x2672 <conv_int+0x10e>
    2648:	ee 24       	eor	r14, r14
    264a:	ff 24       	eor	r15, r15
    264c:	87 01       	movw	r16, r14
    264e:	d7 fe       	sbrs	r13, 7
    2650:	08 c0       	rjmp	.+16     	; 0x2662 <conv_int+0xfe>
    2652:	10 95       	com	r17
    2654:	00 95       	com	r16
    2656:	f0 94       	com	r15
    2658:	e0 94       	com	r14
    265a:	e1 1c       	adc	r14, r1
    265c:	f1 1c       	adc	r15, r1
    265e:	01 1d       	adc	r16, r1
    2660:	11 1d       	adc	r17, r1
    2662:	c4 01       	movw	r24, r8
    2664:	b8 01       	movw	r22, r16
    2666:	a7 01       	movw	r20, r14
    2668:	2d 2d       	mov	r18, r13
    266a:	0e 94 5f 12 	call	0x24be	; 0x24be <putval>
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <conv_int+0x110>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	df 90       	pop	r13
    2682:	bf 90       	pop	r11
    2684:	af 90       	pop	r10
    2686:	9f 90       	pop	r9
    2688:	8f 90       	pop	r8
    268a:	08 95       	ret

0000268c <conv_brk>:
    268c:	a0 e2       	ldi	r26, 0x20	; 32
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	ec e4       	ldi	r30, 0x4C	; 76
    2692:	f3 e1       	ldi	r31, 0x13	; 19
    2694:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__prologue_saves__+0x8>
    2698:	5c 01       	movw	r10, r24
    269a:	6b 01       	movw	r12, r22
    269c:	8a 01       	movw	r16, r20
    269e:	79 01       	movw	r14, r18
    26a0:	fe 01       	movw	r30, r28
    26a2:	31 96       	adiw	r30, 0x01	; 1
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	df 01       	movw	r26, r30
    26a8:	1d 92       	st	X+, r1
    26aa:	8a 95       	dec	r24
    26ac:	e9 f7       	brne	.-6      	; 0x26a8 <conv_brk+0x1c>
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	3f 01       	movw	r6, r30
    26ba:	a1 e0       	ldi	r26, 0x01	; 1
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	f5 01       	movw	r30, r10
    26c0:	83 81       	ldd	r24, Z+3	; 0x03
    26c2:	f7 01       	movw	r30, r14
    26c4:	83 fd       	sbrc	r24, 3
    26c6:	25 91       	lpm	r18, Z+
    26c8:	83 ff       	sbrs	r24, 3
    26ca:	21 91       	ld	r18, Z+
    26cc:	7f 01       	movw	r14, r30
    26ce:	22 23       	and	r18, r18
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <conv_brk+0x48>
    26d2:	81 c0       	rjmp	.+258    	; 0x27d6 <conv_brk+0x14a>
    26d4:	2e 35       	cpi	r18, 0x5E	; 94
    26d6:	19 f4       	brne	.+6      	; 0x26de <conv_brk+0x52>
    26d8:	41 15       	cp	r20, r1
    26da:	51 05       	cpc	r21, r1
    26dc:	69 f1       	breq	.+90     	; 0x2738 <conv_brk+0xac>
    26de:	87 2f       	mov	r24, r23
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	84 17       	cp	r24, r20
    26e4:	95 07       	cpc	r25, r21
    26e6:	44 f4       	brge	.+16     	; 0x26f8 <conv_brk+0x6c>
    26e8:	2d 35       	cpi	r18, 0x5D	; 93
    26ea:	51 f1       	breq	.+84     	; 0x2740 <conv_brk+0xb4>
    26ec:	2d 32       	cpi	r18, 0x2D	; 45
    26ee:	21 f4       	brne	.+8      	; 0x26f8 <conv_brk+0x6c>
    26f0:	33 23       	and	r19, r19
    26f2:	29 f4       	brne	.+10     	; 0x26fe <conv_brk+0x72>
    26f4:	31 e0       	ldi	r19, 0x01	; 1
    26f6:	21 c0       	rjmp	.+66     	; 0x273a <conv_brk+0xae>
    26f8:	33 23       	and	r19, r19
    26fa:	09 f4       	brne	.+2      	; 0x26fe <conv_brk+0x72>
    26fc:	62 2f       	mov	r22, r18
    26fe:	32 2f       	mov	r19, r18
    2700:	83 2f       	mov	r24, r19
    2702:	86 95       	lsr	r24
    2704:	86 95       	lsr	r24
    2706:	86 95       	lsr	r24
    2708:	f3 01       	movw	r30, r6
    270a:	e8 0f       	add	r30, r24
    270c:	f1 1d       	adc	r31, r1
    270e:	83 2f       	mov	r24, r19
    2710:	87 70       	andi	r24, 0x07	; 7
    2712:	4d 01       	movw	r8, r26
    2714:	02 c0       	rjmp	.+4      	; 0x271a <conv_brk+0x8e>
    2716:	88 0c       	add	r8, r8
    2718:	99 1c       	adc	r9, r9
    271a:	8a 95       	dec	r24
    271c:	e2 f7       	brpl	.-8      	; 0x2716 <conv_brk+0x8a>
    271e:	20 81       	ld	r18, Z
    2720:	28 29       	or	r18, r8
    2722:	20 83       	st	Z, r18
    2724:	36 17       	cp	r19, r22
    2726:	11 f4       	brne	.+4      	; 0x272c <conv_brk+0xa0>
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	07 c0       	rjmp	.+14     	; 0x273a <conv_brk+0xae>
    272c:	36 17       	cp	r19, r22
    272e:	10 f4       	brcc	.+4      	; 0x2734 <conv_brk+0xa8>
    2730:	3f 5f       	subi	r19, 0xFF	; 255
    2732:	e6 cf       	rjmp	.-52     	; 0x2700 <conv_brk+0x74>
    2734:	31 50       	subi	r19, 0x01	; 1
    2736:	e4 cf       	rjmp	.-56     	; 0x2700 <conv_brk+0x74>
    2738:	71 e0       	ldi	r23, 0x01	; 1
    273a:	4f 5f       	subi	r20, 0xFF	; 255
    273c:	5f 4f       	sbci	r21, 0xFF	; 255
    273e:	bf cf       	rjmp	.-130    	; 0x26be <conv_brk+0x32>
    2740:	33 23       	and	r19, r19
    2742:	19 f0       	breq	.+6      	; 0x274a <conv_brk+0xbe>
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	80 62       	ori	r24, 0x20	; 32
    2748:	8e 83       	std	Y+6, r24	; 0x06
    274a:	77 23       	and	r23, r23
    274c:	59 f0       	breq	.+22     	; 0x2764 <conv_brk+0xd8>
    274e:	fe 01       	movw	r30, r28
    2750:	31 96       	adiw	r30, 0x01	; 1
    2752:	9e 01       	movw	r18, r28
    2754:	2f 5d       	subi	r18, 0xDF	; 223
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	80 95       	com	r24
    275c:	81 93       	st	Z+, r24
    275e:	e2 17       	cp	r30, r18
    2760:	f3 07       	cpc	r31, r19
    2762:	d1 f7       	brne	.-12     	; 0x2758 <conv_brk+0xcc>
    2764:	99 24       	eor	r9, r9
    2766:	93 94       	inc	r9
    2768:	3e 01       	movw	r6, r28
    276a:	08 94       	sec
    276c:	61 1c       	adc	r6, r1
    276e:	71 1c       	adc	r7, r1
    2770:	c5 01       	movw	r24, r10
    2772:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2776:	ac 01       	movw	r20, r24
    2778:	97 fd       	sbrc	r25, 7
    277a:	25 c0       	rjmp	.+74     	; 0x27c6 <conv_brk+0x13a>
    277c:	86 95       	lsr	r24
    277e:	86 95       	lsr	r24
    2780:	86 95       	lsr	r24
    2782:	f3 01       	movw	r30, r6
    2784:	e8 0f       	add	r30, r24
    2786:	f1 1d       	adc	r31, r1
    2788:	80 81       	ld	r24, Z
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9a 01       	movw	r18, r20
    278e:	27 70       	andi	r18, 0x07	; 7
    2790:	30 70       	andi	r19, 0x00	; 0
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <conv_brk+0x10c>
    2794:	95 95       	asr	r25
    2796:	87 95       	ror	r24
    2798:	2a 95       	dec	r18
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <conv_brk+0x108>
    279c:	80 fd       	sbrc	r24, 0
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <conv_brk+0x11e>
    27a0:	ca 01       	movw	r24, r20
    27a2:	b5 01       	movw	r22, r10
    27a4:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    27a8:	0e c0       	rjmp	.+28     	; 0x27c6 <conv_brk+0x13a>
    27aa:	01 15       	cp	r16, r1
    27ac:	11 05       	cpc	r17, r1
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <conv_brk+0x12a>
    27b0:	d8 01       	movw	r26, r16
    27b2:	4d 93       	st	X+, r20
    27b4:	8d 01       	movw	r16, r26
    27b6:	08 94       	sec
    27b8:	c1 08       	sbc	r12, r1
    27ba:	d1 08       	sbc	r13, r1
    27bc:	99 24       	eor	r9, r9
    27be:	c1 14       	cp	r12, r1
    27c0:	d1 04       	cpc	r13, r1
    27c2:	b1 f6       	brne	.-84     	; 0x2770 <conv_brk+0xe4>
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <conv_brk+0x13e>
    27c6:	99 20       	and	r9, r9
    27c8:	31 f4       	brne	.+12     	; 0x27d6 <conv_brk+0x14a>
    27ca:	01 15       	cp	r16, r1
    27cc:	11 05       	cpc	r17, r1
    27ce:	29 f0       	breq	.+10     	; 0x27da <conv_brk+0x14e>
    27d0:	f8 01       	movw	r30, r16
    27d2:	10 82       	st	Z, r1
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <conv_brk+0x14e>
    27d6:	ee 24       	eor	r14, r14
    27d8:	ff 24       	eor	r15, r15
    27da:	c7 01       	movw	r24, r14
    27dc:	a0 96       	adiw	r28, 0x20	; 32
    27de:	ee e0       	ldi	r30, 0x0E	; 14
    27e0:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__epilogue_restores__+0x8>

000027e4 <conv_flt>:
    27e4:	2f 92       	push	r2
    27e6:	3f 92       	push	r3
    27e8:	5f 92       	push	r5
    27ea:	6f 92       	push	r6
    27ec:	7f 92       	push	r7
    27ee:	8f 92       	push	r8
    27f0:	9f 92       	push	r9
    27f2:	af 92       	push	r10
    27f4:	bf 92       	push	r11
    27f6:	cf 92       	push	r12
    27f8:	df 92       	push	r13
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	3c 01       	movw	r6, r24
    2808:	7b 01       	movw	r14, r22
    280a:	1a 01       	movw	r2, r20
    280c:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2810:	ec 01       	movw	r28, r24
    2812:	8b 32       	cpi	r24, 0x2B	; 43
    2814:	39 f0       	breq	.+14     	; 0x2824 <conv_flt+0x40>
    2816:	8d 32       	cpi	r24, 0x2D	; 45
    2818:	11 f0       	breq	.+4      	; 0x281e <conv_flt+0x3a>
    281a:	55 24       	eor	r5, r5
    281c:	11 c0       	rjmp	.+34     	; 0x2840 <conv_flt+0x5c>
    281e:	b0 e8       	ldi	r27, 0x80	; 128
    2820:	5b 2e       	mov	r5, r27
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <conv_flt+0x42>
    2824:	55 24       	eor	r5, r5
    2826:	08 94       	sec
    2828:	e1 08       	sbc	r14, r1
    282a:	f1 08       	sbc	r15, r1
    282c:	e1 14       	cp	r14, r1
    282e:	f1 04       	cpc	r15, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <conv_flt+0x50>
    2832:	18 c1       	rjmp	.+560    	; 0x2a64 <conv_flt+0x280>
    2834:	c3 01       	movw	r24, r6
    2836:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    283a:	ec 01       	movw	r28, r24
    283c:	97 fd       	sbrc	r25, 7
    283e:	12 c1       	rjmp	.+548    	; 0x2a64 <conv_flt+0x280>
    2840:	ce 01       	movw	r24, r28
    2842:	0e 94 9f 18 	call	0x313e	; 0x313e <tolower>
    2846:	89 36       	cpi	r24, 0x69	; 105
    2848:	91 05       	cpc	r25, r1
    284a:	21 f0       	breq	.+8      	; 0x2854 <conv_flt+0x70>
    284c:	8e 36       	cpi	r24, 0x6E	; 110
    284e:	91 05       	cpc	r25, r1
    2850:	99 f5       	brne	.+102    	; 0x28b8 <conv_flt+0xd4>
    2852:	1d c0       	rjmp	.+58     	; 0x288e <conv_flt+0xaa>
    2854:	0d e8       	ldi	r16, 0x8D	; 141
    2856:	10 e0       	ldi	r17, 0x00	; 0
    2858:	1c c0       	rjmp	.+56     	; 0x2892 <conv_flt+0xae>
    285a:	08 94       	sec
    285c:	e1 08       	sbc	r14, r1
    285e:	f1 08       	sbc	r15, r1
    2860:	e1 14       	cp	r14, r1
    2862:	f1 04       	cpc	r15, r1
    2864:	71 f0       	breq	.+28     	; 0x2882 <conv_flt+0x9e>
    2866:	c3 01       	movw	r24, r6
    2868:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    286c:	ec 01       	movw	r28, r24
    286e:	97 fd       	sbrc	r25, 7
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <conv_flt+0x9e>
    2872:	0e 94 9f 18 	call	0x313e	; 0x313e <tolower>
    2876:	d8 16       	cp	r13, r24
    2878:	61 f0       	breq	.+24     	; 0x2892 <conv_flt+0xae>
    287a:	ce 01       	movw	r24, r28
    287c:	b3 01       	movw	r22, r6
    287e:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	00 39       	cpi	r16, 0x90	; 144
    2886:	12 07       	cpc	r17, r18
    2888:	09 f0       	breq	.+2      	; 0x288c <conv_flt+0xa8>
    288a:	ec c0       	rjmp	.+472    	; 0x2a64 <conv_flt+0x280>
    288c:	08 c0       	rjmp	.+16     	; 0x289e <conv_flt+0xba>
    288e:	0a e8       	ldi	r16, 0x8A	; 138
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	f8 01       	movw	r30, r16
    2894:	0f 5f       	subi	r16, 0xFF	; 255
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	d4 90       	lpm	r13, Z+
    289a:	dd 20       	and	r13, r13
    289c:	f1 f6       	brne	.-68     	; 0x285a <conv_flt+0x76>
    289e:	0d 58       	subi	r16, 0x8D	; 141
    28a0:	10 40       	sbci	r17, 0x00	; 0
    28a2:	29 f0       	breq	.+10     	; 0x28ae <conv_flt+0xca>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e8       	ldi	r26, 0x80	; 128
    28aa:	bf e7       	ldi	r27, 0x7F	; 127
    28ac:	cf c0       	rjmp	.+414    	; 0x2a4c <conv_flt+0x268>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 ec       	ldi	r26, 0xC0	; 192
    28b4:	bf e7       	ldi	r27, 0x7F	; 127
    28b6:	ca c0       	rjmp	.+404    	; 0x2a4c <conv_flt+0x268>
    28b8:	cc 24       	eor	r12, r12
    28ba:	dd 24       	eor	r13, r13
    28bc:	88 24       	eor	r8, r8
    28be:	99 24       	eor	r9, r9
    28c0:	54 01       	movw	r10, r8
    28c2:	ae 01       	movw	r20, r28
    28c4:	40 53       	subi	r20, 0x30	; 48
    28c6:	24 2f       	mov	r18, r20
    28c8:	4a 30       	cpi	r20, 0x0A	; 10
    28ca:	38 f5       	brcc	.+78     	; 0x291a <conv_flt+0x136>
    28cc:	52 e0       	ldi	r21, 0x02	; 2
    28ce:	55 2a       	or	r5, r21
    28d0:	85 2d       	mov	r24, r5
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	ac 01       	movw	r20, r24
    28d6:	48 70       	andi	r20, 0x08	; 8
    28d8:	50 70       	andi	r21, 0x00	; 0
    28da:	52 fe       	sbrs	r5, 2
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <conv_flt+0x106>
    28de:	45 2b       	or	r20, r21
    28e0:	11 f5       	brne	.+68     	; 0x2926 <conv_flt+0x142>
    28e2:	08 94       	sec
    28e4:	c1 1c       	adc	r12, r1
    28e6:	d1 1c       	adc	r13, r1
    28e8:	1e c0       	rjmp	.+60     	; 0x2926 <conv_flt+0x142>
    28ea:	45 2b       	or	r20, r21
    28ec:	19 f0       	breq	.+6      	; 0x28f4 <conv_flt+0x110>
    28ee:	08 94       	sec
    28f0:	c1 08       	sbc	r12, r1
    28f2:	d1 08       	sbc	r13, r1
    28f4:	c5 01       	movw	r24, r10
    28f6:	b4 01       	movw	r22, r8
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <mulacc>
    28fe:	4b 01       	movw	r8, r22
    2900:	5c 01       	movw	r10, r24
    2902:	88 e9       	ldi	r24, 0x98	; 152
    2904:	88 16       	cp	r8, r24
    2906:	89 e9       	ldi	r24, 0x99	; 153
    2908:	98 06       	cpc	r9, r24
    290a:	89 e9       	ldi	r24, 0x99	; 153
    290c:	a8 06       	cpc	r10, r24
    290e:	89 e1       	ldi	r24, 0x19	; 25
    2910:	b8 06       	cpc	r11, r24
    2912:	48 f0       	brcs	.+18     	; 0x2926 <conv_flt+0x142>
    2914:	94 e0       	ldi	r25, 0x04	; 4
    2916:	59 2a       	or	r5, r25
    2918:	06 c0       	rjmp	.+12     	; 0x2926 <conv_flt+0x142>
    291a:	4e 3f       	cpi	r20, 0xFE	; 254
    291c:	81 f4       	brne	.+32     	; 0x293e <conv_flt+0x15a>
    291e:	53 fc       	sbrc	r5, 3
    2920:	0e c0       	rjmp	.+28     	; 0x293e <conv_flt+0x15a>
    2922:	e8 e0       	ldi	r30, 0x08	; 8
    2924:	5e 2a       	or	r5, r30
    2926:	08 94       	sec
    2928:	e1 08       	sbc	r14, r1
    292a:	f1 08       	sbc	r15, r1
    292c:	e1 14       	cp	r14, r1
    292e:	f1 04       	cpc	r15, r1
    2930:	31 f0       	breq	.+12     	; 0x293e <conv_flt+0x15a>
    2932:	c3 01       	movw	r24, r6
    2934:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2938:	ec 01       	movw	r28, r24
    293a:	97 ff       	sbrs	r25, 7
    293c:	c2 cf       	rjmp	.-124    	; 0x28c2 <conv_flt+0xde>
    293e:	51 fe       	sbrs	r5, 1
    2940:	91 c0       	rjmp	.+290    	; 0x2a64 <conv_flt+0x280>
    2942:	c5 36       	cpi	r28, 0x65	; 101
    2944:	19 f0       	breq	.+6      	; 0x294c <conv_flt+0x168>
    2946:	c5 34       	cpi	r28, 0x45	; 69
    2948:	09 f0       	breq	.+2      	; 0x294c <conv_flt+0x168>
    294a:	46 c0       	rjmp	.+140    	; 0x29d8 <conv_flt+0x1f4>
    294c:	08 94       	sec
    294e:	e1 08       	sbc	r14, r1
    2950:	f1 08       	sbc	r15, r1
    2952:	e1 14       	cp	r14, r1
    2954:	f1 04       	cpc	r15, r1
    2956:	09 f4       	brne	.+2      	; 0x295a <conv_flt+0x176>
    2958:	85 c0       	rjmp	.+266    	; 0x2a64 <conv_flt+0x280>
    295a:	c3 01       	movw	r24, r6
    295c:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2960:	ec 01       	movw	r28, r24
    2962:	97 fd       	sbrc	r25, 7
    2964:	7f c0       	rjmp	.+254    	; 0x2a64 <conv_flt+0x280>
    2966:	8b 32       	cpi	r24, 0x2B	; 43
    2968:	21 f0       	breq	.+8      	; 0x2972 <conv_flt+0x18e>
    296a:	8d 32       	cpi	r24, 0x2D	; 45
    296c:	69 f4       	brne	.+26     	; 0x2988 <conv_flt+0x1a4>
    296e:	f0 e1       	ldi	r31, 0x10	; 16
    2970:	5f 2a       	or	r5, r31
    2972:	08 94       	sec
    2974:	e1 08       	sbc	r14, r1
    2976:	f1 08       	sbc	r15, r1
    2978:	e1 14       	cp	r14, r1
    297a:	f1 04       	cpc	r15, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <conv_flt+0x19c>
    297e:	72 c0       	rjmp	.+228    	; 0x2a64 <conv_flt+0x280>
    2980:	c3 01       	movw	r24, r6
    2982:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2986:	ec 01       	movw	r28, r24
    2988:	ce 01       	movw	r24, r28
    298a:	c0 97       	sbiw	r24, 0x30	; 48
    298c:	0a 97       	sbiw	r24, 0x0a	; 10
    298e:	08 f0       	brcs	.+2      	; 0x2992 <conv_flt+0x1ae>
    2990:	69 c0       	rjmp	.+210    	; 0x2a64 <conv_flt+0x280>
    2992:	00 e0       	ldi	r16, 0x00	; 0
    2994:	10 e0       	ldi	r17, 0x00	; 0
    2996:	b8 01       	movw	r22, r16
    2998:	88 27       	eor	r24, r24
    299a:	77 fd       	sbrc	r23, 7
    299c:	80 95       	com	r24
    299e:	98 2f       	mov	r25, r24
    29a0:	ae 01       	movw	r20, r28
    29a2:	40 53       	subi	r20, 0x30	; 48
    29a4:	24 2f       	mov	r18, r20
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <mulacc>
    29ac:	8b 01       	movw	r16, r22
    29ae:	08 94       	sec
    29b0:	e1 08       	sbc	r14, r1
    29b2:	f1 08       	sbc	r15, r1
    29b4:	e1 14       	cp	r14, r1
    29b6:	f1 04       	cpc	r15, r1
    29b8:	39 f0       	breq	.+14     	; 0x29c8 <conv_flt+0x1e4>
    29ba:	c3 01       	movw	r24, r6
    29bc:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    29c0:	ec 01       	movw	r28, r24
    29c2:	c0 97       	sbiw	r24, 0x30	; 48
    29c4:	0a 97       	sbiw	r24, 0x0a	; 10
    29c6:	38 f3       	brcs	.-50     	; 0x2996 <conv_flt+0x1b2>
    29c8:	b8 01       	movw	r22, r16
    29ca:	54 fe       	sbrs	r5, 4
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <conv_flt+0x1f0>
    29ce:	70 95       	com	r23
    29d0:	61 95       	neg	r22
    29d2:	7f 4f       	sbci	r23, 0xFF	; 255
    29d4:	c6 0e       	add	r12, r22
    29d6:	d7 1e       	adc	r13, r23
    29d8:	ef 28       	or	r14, r15
    29da:	31 f0       	breq	.+12     	; 0x29e8 <conv_flt+0x204>
    29dc:	d7 fd       	sbrc	r29, 7
    29de:	04 c0       	rjmp	.+8      	; 0x29e8 <conv_flt+0x204>
    29e0:	ce 01       	movw	r24, r28
    29e2:	b3 01       	movw	r22, r6
    29e4:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    29e8:	c5 01       	movw	r24, r10
    29ea:	b4 01       	movw	r22, r8
    29ec:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__floatunsisf>
    29f0:	d7 fe       	sbrs	r13, 7
    29f2:	0d c0       	rjmp	.+26     	; 0x2a0e <conv_flt+0x22a>
    29f4:	a9 ea       	ldi	r26, 0xA9	; 169
    29f6:	ea 2e       	mov	r14, r26
    29f8:	a0 e0       	ldi	r26, 0x00	; 0
    29fa:	fa 2e       	mov	r15, r26
    29fc:	d0 94       	com	r13
    29fe:	c1 94       	neg	r12
    2a00:	d1 08       	sbc	r13, r1
    2a02:	d3 94       	inc	r13
    2a04:	c0 e2       	ldi	r28, 0x20	; 32
    2a06:	d0 e0       	ldi	r29, 0x00	; 0
    2a08:	00 e0       	ldi	r16, 0x00	; 0
    2a0a:	10 e0       	ldi	r17, 0x00	; 0
    2a0c:	0e c0       	rjmp	.+28     	; 0x2a2a <conv_flt+0x246>
    2a0e:	f1 ec       	ldi	r31, 0xC1	; 193
    2a10:	ef 2e       	mov	r14, r31
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	ff 2e       	mov	r15, r31
    2a16:	f6 cf       	rjmp	.-20     	; 0x2a04 <conv_flt+0x220>
    2a18:	f7 01       	movw	r30, r14
    2a1a:	25 91       	lpm	r18, Z+
    2a1c:	35 91       	lpm	r19, Z+
    2a1e:	45 91       	lpm	r20, Z+
    2a20:	54 91       	lpm	r21, Z+
    2a22:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulsf3>
    2a26:	cc 1a       	sub	r12, r28
    2a28:	dd 0a       	sbc	r13, r29
    2a2a:	cc 16       	cp	r12, r28
    2a2c:	dd 06       	cpc	r13, r29
    2a2e:	a0 f7       	brcc	.-24     	; 0x2a18 <conv_flt+0x234>
    2a30:	d6 95       	lsr	r29
    2a32:	c7 95       	ror	r28
    2a34:	0f 5f       	subi	r16, 0xFF	; 255
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	06 30       	cpi	r16, 0x06	; 6
    2a3a:	11 05       	cpc	r17, r1
    2a3c:	29 f0       	breq	.+10     	; 0x2a48 <conv_flt+0x264>
    2a3e:	ec ef       	ldi	r30, 0xFC	; 252
    2a40:	ff ef       	ldi	r31, 0xFF	; 255
    2a42:	ee 0e       	add	r14, r30
    2a44:	ff 1e       	adc	r15, r31
    2a46:	f1 cf       	rjmp	.-30     	; 0x2a2a <conv_flt+0x246>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	57 fc       	sbrc	r5, 7
    2a4e:	b0 58       	subi	r27, 0x80	; 128
    2a50:	21 14       	cp	r2, r1
    2a52:	31 04       	cpc	r3, r1
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <conv_flt+0x27c>
    2a56:	f1 01       	movw	r30, r2
    2a58:	80 83       	st	Z, r24
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	a2 83       	std	Z+2, r26	; 0x02
    2a5e:	b3 83       	std	Z+3, r27	; 0x03
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	01 c0       	rjmp	.+2      	; 0x2a66 <conv_flt+0x282>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	bf 90       	pop	r11
    2a78:	af 90       	pop	r10
    2a7a:	9f 90       	pop	r9
    2a7c:	8f 90       	pop	r8
    2a7e:	7f 90       	pop	r7
    2a80:	6f 90       	pop	r6
    2a82:	5f 90       	pop	r5
    2a84:	3f 90       	pop	r3
    2a86:	2f 90       	pop	r2
    2a88:	08 95       	ret

00002a8a <vfscanf>:
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	eb e4       	ldi	r30, 0x4B	; 75
    2a90:	f5 e1       	ldi	r31, 0x15	; 21
    2a92:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x6>
    2a96:	4c 01       	movw	r8, r24
    2a98:	5b 01       	movw	r10, r22
    2a9a:	3a 01       	movw	r6, r20
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	17 82       	std	Z+7, r1	; 0x07
    2aa0:	16 82       	std	Z+6, r1	; 0x06
    2aa2:	55 24       	eor	r5, r5
    2aa4:	04 c1       	rjmp	.+520    	; 0x2cae <vfscanf+0x224>
    2aa6:	81 2f       	mov	r24, r17
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0e 94 97 18 	call	0x312e	; 0x312e <isspace>
    2aae:	89 2b       	or	r24, r25
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <vfscanf+0x30>
    2ab2:	c4 01       	movw	r24, r8
    2ab4:	0e 94 99 12 	call	0x2532	; 0x2532 <skip_spaces>
    2ab8:	fa c0       	rjmp	.+500    	; 0x2cae <vfscanf+0x224>
    2aba:	15 32       	cpi	r17, 0x25	; 37
    2abc:	49 f4       	brne	.+18     	; 0x2ad0 <vfscanf+0x46>
    2abe:	f5 01       	movw	r30, r10
    2ac0:	f3 fc       	sbrc	r15, 3
    2ac2:	65 91       	lpm	r22, Z+
    2ac4:	f3 fe       	sbrs	r15, 3
    2ac6:	61 91       	ld	r22, Z+
    2ac8:	5f 01       	movw	r10, r30
    2aca:	65 32       	cpi	r22, 0x25	; 37
    2acc:	69 f4       	brne	.+26     	; 0x2ae8 <vfscanf+0x5e>
    2ace:	15 e2       	ldi	r17, 0x25	; 37
    2ad0:	c4 01       	movw	r24, r8
    2ad2:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2ad6:	97 fd       	sbrc	r25, 7
    2ad8:	f6 c0       	rjmp	.+492    	; 0x2cc6 <vfscanf+0x23c>
    2ada:	18 17       	cp	r17, r24
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <vfscanf+0x56>
    2ade:	e7 c0       	rjmp	.+462    	; 0x2cae <vfscanf+0x224>
    2ae0:	b4 01       	movw	r22, r8
    2ae2:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    2ae6:	f4 c0       	rjmp	.+488    	; 0x2cd0 <vfscanf+0x246>
    2ae8:	6a 32       	cpi	r22, 0x2A	; 42
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <vfscanf+0x68>
    2aec:	16 2f       	mov	r17, r22
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	06 c0       	rjmp	.+12     	; 0x2afe <vfscanf+0x74>
    2af2:	f3 fc       	sbrc	r15, 3
    2af4:	15 91       	lpm	r17, Z+
    2af6:	f3 fe       	sbrs	r15, 3
    2af8:	11 91       	ld	r17, Z+
    2afa:	5f 01       	movw	r10, r30
    2afc:	01 e0       	ldi	r16, 0x01	; 1
    2afe:	cc 24       	eor	r12, r12
    2b00:	dd 24       	eor	r13, r13
    2b02:	0e c0       	rjmp	.+28     	; 0x2b20 <vfscanf+0x96>
    2b04:	02 60       	ori	r16, 0x02	; 2
    2b06:	b6 01       	movw	r22, r12
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <mulacc>
    2b12:	6b 01       	movw	r12, r22
    2b14:	f5 01       	movw	r30, r10
    2b16:	f3 fc       	sbrc	r15, 3
    2b18:	15 91       	lpm	r17, Z+
    2b1a:	f3 fe       	sbrs	r15, 3
    2b1c:	11 91       	ld	r17, Z+
    2b1e:	5f 01       	movw	r10, r30
    2b20:	21 2f       	mov	r18, r17
    2b22:	20 53       	subi	r18, 0x30	; 48
    2b24:	2a 30       	cpi	r18, 0x0A	; 10
    2b26:	70 f3       	brcs	.-36     	; 0x2b04 <vfscanf+0x7a>
    2b28:	01 fd       	sbrc	r16, 1
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <vfscanf+0xaa>
    2b2c:	cc 24       	eor	r12, r12
    2b2e:	ca 94       	dec	r12
    2b30:	dc 2c       	mov	r13, r12
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <vfscanf+0xb2>
    2b34:	c1 14       	cp	r12, r1
    2b36:	d1 04       	cpc	r13, r1
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <vfscanf+0xb2>
    2b3a:	ca c0       	rjmp	.+404    	; 0x2cd0 <vfscanf+0x246>
    2b3c:	18 36       	cpi	r17, 0x68	; 104
    2b3e:	21 f0       	breq	.+8      	; 0x2b48 <vfscanf+0xbe>
    2b40:	1c 36       	cpi	r17, 0x6C	; 108
    2b42:	99 f4       	brne	.+38     	; 0x2b6a <vfscanf+0xe0>
    2b44:	f5 01       	movw	r30, r10
    2b46:	0b c0       	rjmp	.+22     	; 0x2b5e <vfscanf+0xd4>
    2b48:	f5 01       	movw	r30, r10
    2b4a:	f3 fc       	sbrc	r15, 3
    2b4c:	65 91       	lpm	r22, Z+
    2b4e:	f3 fe       	sbrs	r15, 3
    2b50:	61 91       	ld	r22, Z+
    2b52:	68 36       	cpi	r22, 0x68	; 104
    2b54:	19 f0       	breq	.+6      	; 0x2b5c <vfscanf+0xd2>
    2b56:	5f 01       	movw	r10, r30
    2b58:	16 2f       	mov	r17, r22
    2b5a:	07 c0       	rjmp	.+14     	; 0x2b6a <vfscanf+0xe0>
    2b5c:	08 60       	ori	r16, 0x08	; 8
    2b5e:	04 60       	ori	r16, 0x04	; 4
    2b60:	f3 fc       	sbrc	r15, 3
    2b62:	15 91       	lpm	r17, Z+
    2b64:	f3 fe       	sbrs	r15, 3
    2b66:	11 91       	ld	r17, Z+
    2b68:	5f 01       	movw	r10, r30
    2b6a:	11 23       	and	r17, r17
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <vfscanf+0xe6>
    2b6e:	b0 c0       	rjmp	.+352    	; 0x2cd0 <vfscanf+0x246>
    2b70:	88 e7       	ldi	r24, 0x78	; 120
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	61 2f       	mov	r22, r17
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	0e 94 a7 18 	call	0x314e	; 0x314e <strchr_P>
    2b7c:	89 2b       	or	r24, r25
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <vfscanf+0xf8>
    2b80:	a7 c0       	rjmp	.+334    	; 0x2cd0 <vfscanf+0x246>
    2b82:	80 2f       	mov	r24, r16
    2b84:	00 ff       	sbrs	r16, 0
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <vfscanf+0x104>
    2b88:	ee 24       	eor	r14, r14
    2b8a:	ff 24       	eor	r15, r15
    2b8c:	07 c0       	rjmp	.+14     	; 0x2b9c <vfscanf+0x112>
    2b8e:	f3 01       	movw	r30, r6
    2b90:	e0 80       	ld	r14, Z
    2b92:	f1 80       	ldd	r15, Z+1	; 0x01
    2b94:	22 e0       	ldi	r18, 0x02	; 2
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	62 0e       	add	r6, r18
    2b9a:	73 1e       	adc	r7, r19
    2b9c:	1e 36       	cpi	r17, 0x6E	; 110
    2b9e:	51 f4       	brne	.+20     	; 0x2bb4 <vfscanf+0x12a>
    2ba0:	f4 01       	movw	r30, r8
    2ba2:	46 81       	ldd	r20, Z+6	; 0x06
    2ba4:	57 81       	ldd	r21, Z+7	; 0x07
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	c7 01       	movw	r24, r14
    2bac:	20 2f       	mov	r18, r16
    2bae:	0e 94 5f 12 	call	0x24be	; 0x24be <putval>
    2bb2:	7d c0       	rjmp	.+250    	; 0x2cae <vfscanf+0x224>
    2bb4:	13 36       	cpi	r17, 0x63	; 99
    2bb6:	b9 f4       	brne	.+46     	; 0x2be6 <vfscanf+0x15c>
    2bb8:	81 fd       	sbrc	r24, 1
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <vfscanf+0x138>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	c8 2e       	mov	r12, r24
    2bc0:	d1 2c       	mov	r13, r1
    2bc2:	c4 01       	movw	r24, r8
    2bc4:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2bc8:	97 fd       	sbrc	r25, 7
    2bca:	7d c0       	rjmp	.+250    	; 0x2cc6 <vfscanf+0x23c>
    2bcc:	e1 14       	cp	r14, r1
    2bce:	f1 04       	cpc	r15, r1
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <vfscanf+0x14e>
    2bd2:	f7 01       	movw	r30, r14
    2bd4:	81 93       	st	Z+, r24
    2bd6:	7f 01       	movw	r14, r30
    2bd8:	08 94       	sec
    2bda:	c1 08       	sbc	r12, r1
    2bdc:	d1 08       	sbc	r13, r1
    2bde:	c1 14       	cp	r12, r1
    2be0:	d1 04       	cpc	r13, r1
    2be2:	79 f7       	brne	.-34     	; 0x2bc2 <vfscanf+0x138>
    2be4:	62 c0       	rjmp	.+196    	; 0x2caa <vfscanf+0x220>
    2be6:	1b 35       	cpi	r17, 0x5B	; 91
    2be8:	59 f4       	brne	.+22     	; 0x2c00 <vfscanf+0x176>
    2bea:	c4 01       	movw	r24, r8
    2bec:	b6 01       	movw	r22, r12
    2bee:	a7 01       	movw	r20, r14
    2bf0:	95 01       	movw	r18, r10
    2bf2:	0e 94 46 13 	call	0x268c	; 0x268c <conv_brk>
    2bf6:	5c 01       	movw	r10, r24
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <vfscanf+0x174>
    2bfc:	56 c0       	rjmp	.+172    	; 0x2caa <vfscanf+0x220>
    2bfe:	50 c0       	rjmp	.+160    	; 0x2ca0 <vfscanf+0x216>
    2c00:	c4 01       	movw	r24, r8
    2c02:	0e 94 99 12 	call	0x2532	; 0x2532 <skip_spaces>
    2c06:	97 fd       	sbrc	r25, 7
    2c08:	5e c0       	rjmp	.+188    	; 0x2cc6 <vfscanf+0x23c>
    2c0a:	1f 36       	cpi	r17, 0x6F	; 111
    2c0c:	d1 f1       	breq	.+116    	; 0x2c82 <vfscanf+0x1f8>
    2c0e:	10 37       	cpi	r17, 0x70	; 112
    2c10:	38 f4       	brcc	.+14     	; 0x2c20 <vfscanf+0x196>
    2c12:	14 36       	cpi	r17, 0x64	; 100
    2c14:	a1 f1       	breq	.+104    	; 0x2c7e <vfscanf+0x1f4>
    2c16:	19 36       	cpi	r17, 0x69	; 105
    2c18:	a9 f1       	breq	.+106    	; 0x2c84 <vfscanf+0x1fa>
    2c1a:	18 35       	cpi	r17, 0x58	; 88
    2c1c:	d1 f5       	brne	.+116    	; 0x2c92 <vfscanf+0x208>
    2c1e:	2d c0       	rjmp	.+90     	; 0x2c7a <vfscanf+0x1f0>
    2c20:	13 37       	cpi	r17, 0x73	; 115
    2c22:	51 f0       	breq	.+20     	; 0x2c38 <vfscanf+0x1ae>
    2c24:	14 37       	cpi	r17, 0x74	; 116
    2c26:	18 f4       	brcc	.+6      	; 0x2c2e <vfscanf+0x1a4>
    2c28:	10 37       	cpi	r17, 0x70	; 112
    2c2a:	99 f5       	brne	.+102    	; 0x2c92 <vfscanf+0x208>
    2c2c:	26 c0       	rjmp	.+76     	; 0x2c7a <vfscanf+0x1f0>
    2c2e:	15 37       	cpi	r17, 0x75	; 117
    2c30:	31 f1       	breq	.+76     	; 0x2c7e <vfscanf+0x1f4>
    2c32:	18 37       	cpi	r17, 0x78	; 120
    2c34:	71 f5       	brne	.+92     	; 0x2c92 <vfscanf+0x208>
    2c36:	21 c0       	rjmp	.+66     	; 0x2c7a <vfscanf+0x1f0>
    2c38:	c4 01       	movw	r24, r8
    2c3a:	0e 94 c8 18 	call	0x3190	; 0x3190 <fgetc>
    2c3e:	ec 01       	movw	r28, r24
    2c40:	97 fd       	sbrc	r25, 7
    2c42:	15 c0       	rjmp	.+42     	; 0x2c6e <vfscanf+0x1e4>
    2c44:	0e 94 97 18 	call	0x312e	; 0x312e <isspace>
    2c48:	89 2b       	or	r24, r25
    2c4a:	29 f0       	breq	.+10     	; 0x2c56 <vfscanf+0x1cc>
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	b4 01       	movw	r22, r8
    2c50:	0e 94 5f 19 	call	0x32be	; 0x32be <ungetc>
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <vfscanf+0x1e4>
    2c56:	e1 14       	cp	r14, r1
    2c58:	f1 04       	cpc	r15, r1
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <vfscanf+0x1d8>
    2c5c:	f7 01       	movw	r30, r14
    2c5e:	c1 93       	st	Z+, r28
    2c60:	7f 01       	movw	r14, r30
    2c62:	08 94       	sec
    2c64:	c1 08       	sbc	r12, r1
    2c66:	d1 08       	sbc	r13, r1
    2c68:	c1 14       	cp	r12, r1
    2c6a:	d1 04       	cpc	r13, r1
    2c6c:	29 f7       	brne	.-54     	; 0x2c38 <vfscanf+0x1ae>
    2c6e:	e1 14       	cp	r14, r1
    2c70:	f1 04       	cpc	r15, r1
    2c72:	d9 f0       	breq	.+54     	; 0x2caa <vfscanf+0x220>
    2c74:	f7 01       	movw	r30, r14
    2c76:	10 82       	st	Z, r1
    2c78:	18 c0       	rjmp	.+48     	; 0x2caa <vfscanf+0x220>
    2c7a:	00 64       	ori	r16, 0x40	; 64
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <vfscanf+0x1fa>
    2c7e:	00 62       	ori	r16, 0x20	; 32
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <vfscanf+0x1fa>
    2c82:	00 61       	ori	r16, 0x10	; 16
    2c84:	c4 01       	movw	r24, r8
    2c86:	b6 01       	movw	r22, r12
    2c88:	a7 01       	movw	r20, r14
    2c8a:	20 2f       	mov	r18, r16
    2c8c:	0e 94 b2 12 	call	0x2564	; 0x2564 <conv_int>
    2c90:	05 c0       	rjmp	.+10     	; 0x2c9c <vfscanf+0x212>
    2c92:	c4 01       	movw	r24, r8
    2c94:	b6 01       	movw	r22, r12
    2c96:	a7 01       	movw	r20, r14
    2c98:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <conv_flt>
    2c9c:	88 23       	and	r24, r24
    2c9e:	29 f4       	brne	.+10     	; 0x2caa <vfscanf+0x220>
    2ca0:	f4 01       	movw	r30, r8
    2ca2:	83 81       	ldd	r24, Z+3	; 0x03
    2ca4:	80 73       	andi	r24, 0x30	; 48
    2ca6:	79 f4       	brne	.+30     	; 0x2cc6 <vfscanf+0x23c>
    2ca8:	13 c0       	rjmp	.+38     	; 0x2cd0 <vfscanf+0x246>
    2caa:	00 ff       	sbrs	r16, 0
    2cac:	53 94       	inc	r5
    2cae:	f4 01       	movw	r30, r8
    2cb0:	f3 80       	ldd	r15, Z+3	; 0x03
    2cb2:	f5 01       	movw	r30, r10
    2cb4:	f3 fc       	sbrc	r15, 3
    2cb6:	15 91       	lpm	r17, Z+
    2cb8:	f3 fe       	sbrs	r15, 3
    2cba:	11 91       	ld	r17, Z+
    2cbc:	5f 01       	movw	r10, r30
    2cbe:	11 23       	and	r17, r17
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <vfscanf+0x23a>
    2cc2:	f1 ce       	rjmp	.-542    	; 0x2aa6 <vfscanf+0x1c>
    2cc4:	05 c0       	rjmp	.+10     	; 0x2cd0 <vfscanf+0x246>
    2cc6:	55 20       	and	r5, r5
    2cc8:	19 f4       	brne	.+6      	; 0x2cd0 <vfscanf+0x246>
    2cca:	2f ef       	ldi	r18, 0xFF	; 255
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <vfscanf+0x24a>
    2cd0:	25 2d       	mov	r18, r5
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	c9 01       	movw	r24, r18
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	ef e0       	ldi	r30, 0x0F	; 15
    2cdc:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x6>

00002ce0 <__floatunsisf>:
    2ce0:	e8 94       	clt
    2ce2:	09 c0       	rjmp	.+18     	; 0x2cf6 <__floatsisf+0x12>

00002ce4 <__floatsisf>:
    2ce4:	97 fb       	bst	r25, 7
    2ce6:	3e f4       	brtc	.+14     	; 0x2cf6 <__floatsisf+0x12>
    2ce8:	90 95       	com	r25
    2cea:	80 95       	com	r24
    2cec:	70 95       	com	r23
    2cee:	61 95       	neg	r22
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf6:	99 23       	and	r25, r25
    2cf8:	a9 f0       	breq	.+42     	; 0x2d24 <__floatsisf+0x40>
    2cfa:	f9 2f       	mov	r31, r25
    2cfc:	96 e9       	ldi	r25, 0x96	; 150
    2cfe:	bb 27       	eor	r27, r27
    2d00:	93 95       	inc	r25
    2d02:	f6 95       	lsr	r31
    2d04:	87 95       	ror	r24
    2d06:	77 95       	ror	r23
    2d08:	67 95       	ror	r22
    2d0a:	b7 95       	ror	r27
    2d0c:	f1 11       	cpse	r31, r1
    2d0e:	f8 cf       	rjmp	.-16     	; 0x2d00 <__floatsisf+0x1c>
    2d10:	fa f4       	brpl	.+62     	; 0x2d50 <__floatsisf+0x6c>
    2d12:	bb 0f       	add	r27, r27
    2d14:	11 f4       	brne	.+4      	; 0x2d1a <__floatsisf+0x36>
    2d16:	60 ff       	sbrs	r22, 0
    2d18:	1b c0       	rjmp	.+54     	; 0x2d50 <__floatsisf+0x6c>
    2d1a:	6f 5f       	subi	r22, 0xFF	; 255
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d20:	9f 4f       	sbci	r25, 0xFF	; 255
    2d22:	16 c0       	rjmp	.+44     	; 0x2d50 <__floatsisf+0x6c>
    2d24:	88 23       	and	r24, r24
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <__floatsisf+0x48>
    2d28:	96 e9       	ldi	r25, 0x96	; 150
    2d2a:	11 c0       	rjmp	.+34     	; 0x2d4e <__floatsisf+0x6a>
    2d2c:	77 23       	and	r23, r23
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <__floatsisf+0x54>
    2d30:	9e e8       	ldi	r25, 0x8E	; 142
    2d32:	87 2f       	mov	r24, r23
    2d34:	76 2f       	mov	r23, r22
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <__floatsisf+0x5e>
    2d38:	66 23       	and	r22, r22
    2d3a:	71 f0       	breq	.+28     	; 0x2d58 <__floatsisf+0x74>
    2d3c:	96 e8       	ldi	r25, 0x86	; 134
    2d3e:	86 2f       	mov	r24, r22
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	2a f0       	brmi	.+10     	; 0x2d50 <__floatsisf+0x6c>
    2d46:	9a 95       	dec	r25
    2d48:	66 0f       	add	r22, r22
    2d4a:	77 1f       	adc	r23, r23
    2d4c:	88 1f       	adc	r24, r24
    2d4e:	da f7       	brpl	.-10     	; 0x2d46 <__floatsisf+0x62>
    2d50:	88 0f       	add	r24, r24
    2d52:	96 95       	lsr	r25
    2d54:	87 95       	ror	r24
    2d56:	97 f9       	bld	r25, 7
    2d58:	08 95       	ret

00002d5a <__mulsf3>:
    2d5a:	0b d0       	rcall	.+22     	; 0x2d72 <__mulsf3x>
    2d5c:	78 c0       	rjmp	.+240    	; 0x2e4e <__fp_round>
    2d5e:	69 d0       	rcall	.+210    	; 0x2e32 <__fp_pscA>
    2d60:	28 f0       	brcs	.+10     	; 0x2d6c <__mulsf3+0x12>
    2d62:	6e d0       	rcall	.+220    	; 0x2e40 <__fp_pscB>
    2d64:	18 f0       	brcs	.+6      	; 0x2d6c <__mulsf3+0x12>
    2d66:	95 23       	and	r25, r21
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <__mulsf3+0x12>
    2d6a:	5a c0       	rjmp	.+180    	; 0x2e20 <__fp_inf>
    2d6c:	5f c0       	rjmp	.+190    	; 0x2e2c <__fp_nan>
    2d6e:	11 24       	eor	r1, r1
    2d70:	a2 c0       	rjmp	.+324    	; 0x2eb6 <__fp_szero>

00002d72 <__mulsf3x>:
    2d72:	7e d0       	rcall	.+252    	; 0x2e70 <__fp_split3>
    2d74:	a0 f3       	brcs	.-24     	; 0x2d5e <__mulsf3+0x4>

00002d76 <__mulsf3_pse>:
    2d76:	95 9f       	mul	r25, r21
    2d78:	d1 f3       	breq	.-12     	; 0x2d6e <__mulsf3+0x14>
    2d7a:	95 0f       	add	r25, r21
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	55 1f       	adc	r21, r21
    2d80:	62 9f       	mul	r22, r18
    2d82:	f0 01       	movw	r30, r0
    2d84:	72 9f       	mul	r23, r18
    2d86:	bb 27       	eor	r27, r27
    2d88:	f0 0d       	add	r31, r0
    2d8a:	b1 1d       	adc	r27, r1
    2d8c:	63 9f       	mul	r22, r19
    2d8e:	aa 27       	eor	r26, r26
    2d90:	f0 0d       	add	r31, r0
    2d92:	b1 1d       	adc	r27, r1
    2d94:	aa 1f       	adc	r26, r26
    2d96:	64 9f       	mul	r22, r20
    2d98:	66 27       	eor	r22, r22
    2d9a:	b0 0d       	add	r27, r0
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	66 1f       	adc	r22, r22
    2da0:	82 9f       	mul	r24, r18
    2da2:	22 27       	eor	r18, r18
    2da4:	b0 0d       	add	r27, r0
    2da6:	a1 1d       	adc	r26, r1
    2da8:	62 1f       	adc	r22, r18
    2daa:	73 9f       	mul	r23, r19
    2dac:	b0 0d       	add	r27, r0
    2dae:	a1 1d       	adc	r26, r1
    2db0:	62 1f       	adc	r22, r18
    2db2:	83 9f       	mul	r24, r19
    2db4:	a0 0d       	add	r26, r0
    2db6:	61 1d       	adc	r22, r1
    2db8:	22 1f       	adc	r18, r18
    2dba:	74 9f       	mul	r23, r20
    2dbc:	33 27       	eor	r19, r19
    2dbe:	a0 0d       	add	r26, r0
    2dc0:	61 1d       	adc	r22, r1
    2dc2:	23 1f       	adc	r18, r19
    2dc4:	84 9f       	mul	r24, r20
    2dc6:	60 0d       	add	r22, r0
    2dc8:	21 1d       	adc	r18, r1
    2dca:	82 2f       	mov	r24, r18
    2dcc:	76 2f       	mov	r23, r22
    2dce:	6a 2f       	mov	r22, r26
    2dd0:	11 24       	eor	r1, r1
    2dd2:	9f 57       	subi	r25, 0x7F	; 127
    2dd4:	50 40       	sbci	r21, 0x00	; 0
    2dd6:	8a f0       	brmi	.+34     	; 0x2dfa <__mulsf3_pse+0x84>
    2dd8:	e1 f0       	breq	.+56     	; 0x2e12 <__mulsf3_pse+0x9c>
    2dda:	88 23       	and	r24, r24
    2ddc:	4a f0       	brmi	.+18     	; 0x2df0 <__mulsf3_pse+0x7a>
    2dde:	ee 0f       	add	r30, r30
    2de0:	ff 1f       	adc	r31, r31
    2de2:	bb 1f       	adc	r27, r27
    2de4:	66 1f       	adc	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	88 1f       	adc	r24, r24
    2dea:	91 50       	subi	r25, 0x01	; 1
    2dec:	50 40       	sbci	r21, 0x00	; 0
    2dee:	a9 f7       	brne	.-22     	; 0x2dda <__mulsf3_pse+0x64>
    2df0:	9e 3f       	cpi	r25, 0xFE	; 254
    2df2:	51 05       	cpc	r21, r1
    2df4:	70 f0       	brcs	.+28     	; 0x2e12 <__mulsf3_pse+0x9c>
    2df6:	14 c0       	rjmp	.+40     	; 0x2e20 <__fp_inf>
    2df8:	5e c0       	rjmp	.+188    	; 0x2eb6 <__fp_szero>
    2dfa:	5f 3f       	cpi	r21, 0xFF	; 255
    2dfc:	ec f3       	brlt	.-6      	; 0x2df8 <__mulsf3_pse+0x82>
    2dfe:	98 3e       	cpi	r25, 0xE8	; 232
    2e00:	dc f3       	brlt	.-10     	; 0x2df8 <__mulsf3_pse+0x82>
    2e02:	86 95       	lsr	r24
    2e04:	77 95       	ror	r23
    2e06:	67 95       	ror	r22
    2e08:	b7 95       	ror	r27
    2e0a:	f7 95       	ror	r31
    2e0c:	e7 95       	ror	r30
    2e0e:	9f 5f       	subi	r25, 0xFF	; 255
    2e10:	c1 f7       	brne	.-16     	; 0x2e02 <__mulsf3_pse+0x8c>
    2e12:	fe 2b       	or	r31, r30
    2e14:	88 0f       	add	r24, r24
    2e16:	91 1d       	adc	r25, r1
    2e18:	96 95       	lsr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	97 f9       	bld	r25, 7
    2e1e:	08 95       	ret

00002e20 <__fp_inf>:
    2e20:	97 f9       	bld	r25, 7
    2e22:	9f 67       	ori	r25, 0x7F	; 127
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	08 95       	ret

00002e2c <__fp_nan>:
    2e2c:	9f ef       	ldi	r25, 0xFF	; 255
    2e2e:	80 ec       	ldi	r24, 0xC0	; 192
    2e30:	08 95       	ret

00002e32 <__fp_pscA>:
    2e32:	00 24       	eor	r0, r0
    2e34:	0a 94       	dec	r0
    2e36:	16 16       	cp	r1, r22
    2e38:	17 06       	cpc	r1, r23
    2e3a:	18 06       	cpc	r1, r24
    2e3c:	09 06       	cpc	r0, r25
    2e3e:	08 95       	ret

00002e40 <__fp_pscB>:
    2e40:	00 24       	eor	r0, r0
    2e42:	0a 94       	dec	r0
    2e44:	12 16       	cp	r1, r18
    2e46:	13 06       	cpc	r1, r19
    2e48:	14 06       	cpc	r1, r20
    2e4a:	05 06       	cpc	r0, r21
    2e4c:	08 95       	ret

00002e4e <__fp_round>:
    2e4e:	09 2e       	mov	r0, r25
    2e50:	03 94       	inc	r0
    2e52:	00 0c       	add	r0, r0
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <__fp_round+0xc>
    2e56:	88 23       	and	r24, r24
    2e58:	52 f0       	brmi	.+20     	; 0x2e6e <__fp_round+0x20>
    2e5a:	bb 0f       	add	r27, r27
    2e5c:	40 f4       	brcc	.+16     	; 0x2e6e <__fp_round+0x20>
    2e5e:	bf 2b       	or	r27, r31
    2e60:	11 f4       	brne	.+4      	; 0x2e66 <__fp_round+0x18>
    2e62:	60 ff       	sbrs	r22, 0
    2e64:	04 c0       	rjmp	.+8      	; 0x2e6e <__fp_round+0x20>
    2e66:	6f 5f       	subi	r22, 0xFF	; 255
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	08 95       	ret

00002e70 <__fp_split3>:
    2e70:	57 fd       	sbrc	r21, 7
    2e72:	90 58       	subi	r25, 0x80	; 128
    2e74:	44 0f       	add	r20, r20
    2e76:	55 1f       	adc	r21, r21
    2e78:	59 f0       	breq	.+22     	; 0x2e90 <__fp_splitA+0x10>
    2e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7c:	71 f0       	breq	.+28     	; 0x2e9a <__fp_splitA+0x1a>
    2e7e:	47 95       	ror	r20

00002e80 <__fp_splitA>:
    2e80:	88 0f       	add	r24, r24
    2e82:	97 fb       	bst	r25, 7
    2e84:	99 1f       	adc	r25, r25
    2e86:	61 f0       	breq	.+24     	; 0x2ea0 <__fp_splitA+0x20>
    2e88:	9f 3f       	cpi	r25, 0xFF	; 255
    2e8a:	79 f0       	breq	.+30     	; 0x2eaa <__fp_splitA+0x2a>
    2e8c:	87 95       	ror	r24
    2e8e:	08 95       	ret
    2e90:	12 16       	cp	r1, r18
    2e92:	13 06       	cpc	r1, r19
    2e94:	14 06       	cpc	r1, r20
    2e96:	55 1f       	adc	r21, r21
    2e98:	f2 cf       	rjmp	.-28     	; 0x2e7e <__fp_split3+0xe>
    2e9a:	46 95       	lsr	r20
    2e9c:	f1 df       	rcall	.-30     	; 0x2e80 <__fp_splitA>
    2e9e:	08 c0       	rjmp	.+16     	; 0x2eb0 <__fp_splitA+0x30>
    2ea0:	16 16       	cp	r1, r22
    2ea2:	17 06       	cpc	r1, r23
    2ea4:	18 06       	cpc	r1, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	f1 cf       	rjmp	.-30     	; 0x2e8c <__fp_splitA+0xc>
    2eaa:	86 95       	lsr	r24
    2eac:	71 05       	cpc	r23, r1
    2eae:	61 05       	cpc	r22, r1
    2eb0:	08 94       	sec
    2eb2:	08 95       	ret

00002eb4 <__fp_zero>:
    2eb4:	e8 94       	clt

00002eb6 <__fp_szero>:
    2eb6:	bb 27       	eor	r27, r27
    2eb8:	66 27       	eor	r22, r22
    2eba:	77 27       	eor	r23, r23
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	97 f9       	bld	r25, 7
    2ec0:	08 95       	ret

00002ec2 <__udivmodhi4>:
    2ec2:	aa 1b       	sub	r26, r26
    2ec4:	bb 1b       	sub	r27, r27
    2ec6:	51 e1       	ldi	r21, 0x11	; 17
    2ec8:	07 c0       	rjmp	.+14     	; 0x2ed8 <__udivmodhi4_ep>

00002eca <__udivmodhi4_loop>:
    2eca:	aa 1f       	adc	r26, r26
    2ecc:	bb 1f       	adc	r27, r27
    2ece:	a6 17       	cp	r26, r22
    2ed0:	b7 07       	cpc	r27, r23
    2ed2:	10 f0       	brcs	.+4      	; 0x2ed8 <__udivmodhi4_ep>
    2ed4:	a6 1b       	sub	r26, r22
    2ed6:	b7 0b       	sbc	r27, r23

00002ed8 <__udivmodhi4_ep>:
    2ed8:	88 1f       	adc	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	5a 95       	dec	r21
    2ede:	a9 f7       	brne	.-22     	; 0x2eca <__udivmodhi4_loop>
    2ee0:	80 95       	com	r24
    2ee2:	90 95       	com	r25
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	08 95       	ret

00002eea <__divmodhi4>:
    2eea:	97 fb       	bst	r25, 7
    2eec:	09 2e       	mov	r0, r25
    2eee:	07 26       	eor	r0, r23
    2ef0:	0a d0       	rcall	.+20     	; 0x2f06 <__divmodhi4_neg1>
    2ef2:	77 fd       	sbrc	r23, 7
    2ef4:	04 d0       	rcall	.+8      	; 0x2efe <__divmodhi4_neg2>
    2ef6:	e5 df       	rcall	.-54     	; 0x2ec2 <__udivmodhi4>
    2ef8:	06 d0       	rcall	.+12     	; 0x2f06 <__divmodhi4_neg1>
    2efa:	00 20       	and	r0, r0
    2efc:	1a f4       	brpl	.+6      	; 0x2f04 <__divmodhi4_exit>

00002efe <__divmodhi4_neg2>:
    2efe:	70 95       	com	r23
    2f00:	61 95       	neg	r22
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255

00002f04 <__divmodhi4_exit>:
    2f04:	08 95       	ret

00002f06 <__divmodhi4_neg1>:
    2f06:	f6 f7       	brtc	.-4      	; 0x2f04 <__divmodhi4_exit>
    2f08:	90 95       	com	r25
    2f0a:	81 95       	neg	r24
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	08 95       	ret

00002f10 <__prologue_saves__>:
    2f10:	2f 92       	push	r2
    2f12:	3f 92       	push	r3
    2f14:	4f 92       	push	r4
    2f16:	5f 92       	push	r5
    2f18:	6f 92       	push	r6
    2f1a:	7f 92       	push	r7
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	ca 1b       	sub	r28, r26
    2f3a:	db 0b       	sbc	r29, r27
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	09 94       	ijmp

00002f48 <__epilogue_restores__>:
    2f48:	2a 88       	ldd	r2, Y+18	; 0x12
    2f4a:	39 88       	ldd	r3, Y+17	; 0x11
    2f4c:	48 88       	ldd	r4, Y+16	; 0x10
    2f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f5e:	df 80       	ldd	r13, Y+7	; 0x07
    2f60:	ee 80       	ldd	r14, Y+6	; 0x06
    2f62:	fd 80       	ldd	r15, Y+5	; 0x05
    2f64:	0c 81       	ldd	r16, Y+4	; 0x04
    2f66:	1b 81       	ldd	r17, Y+3	; 0x03
    2f68:	aa 81       	ldd	r26, Y+2	; 0x02
    2f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f6c:	ce 0f       	add	r28, r30
    2f6e:	d1 1d       	adc	r29, r1
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	ed 01       	movw	r28, r26
    2f7c:	08 95       	ret

00002f7e <__ftoa_engine>:
    2f7e:	28 30       	cpi	r18, 0x08	; 8
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <__ftoa_engine+0x6>
    2f82:	27 e0       	ldi	r18, 0x07	; 7
    2f84:	33 27       	eor	r19, r19
    2f86:	da 01       	movw	r26, r20
    2f88:	99 0f       	add	r25, r25
    2f8a:	31 1d       	adc	r19, r1
    2f8c:	87 fd       	sbrc	r24, 7
    2f8e:	91 60       	ori	r25, 0x01	; 1
    2f90:	00 96       	adiw	r24, 0x00	; 0
    2f92:	61 05       	cpc	r22, r1
    2f94:	71 05       	cpc	r23, r1
    2f96:	39 f4       	brne	.+14     	; 0x2fa6 <__ftoa_engine+0x28>
    2f98:	32 60       	ori	r19, 0x02	; 2
    2f9a:	2e 5f       	subi	r18, 0xFE	; 254
    2f9c:	3d 93       	st	X+, r19
    2f9e:	30 e3       	ldi	r19, 0x30	; 48
    2fa0:	2a 95       	dec	r18
    2fa2:	e1 f7       	brne	.-8      	; 0x2f9c <__ftoa_engine+0x1e>
    2fa4:	08 95       	ret
    2fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa8:	30 f0       	brcs	.+12     	; 0x2fb6 <__ftoa_engine+0x38>
    2faa:	80 38       	cpi	r24, 0x80	; 128
    2fac:	71 05       	cpc	r23, r1
    2fae:	61 05       	cpc	r22, r1
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <__ftoa_engine+0x36>
    2fb2:	3c 5f       	subi	r19, 0xFC	; 252
    2fb4:	3c 5f       	subi	r19, 0xFC	; 252
    2fb6:	3d 93       	st	X+, r19
    2fb8:	91 30       	cpi	r25, 0x01	; 1
    2fba:	08 f0       	brcs	.+2      	; 0x2fbe <__ftoa_engine+0x40>
    2fbc:	80 68       	ori	r24, 0x80	; 128
    2fbe:	91 1d       	adc	r25, r1
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	1f 93       	push	r17
    2fc6:	0f 93       	push	r16
    2fc8:	ff 92       	push	r15
    2fca:	ef 92       	push	r14
    2fcc:	19 2f       	mov	r17, r25
    2fce:	98 7f       	andi	r25, 0xF8	; 248
    2fd0:	96 95       	lsr	r25
    2fd2:	e9 2f       	mov	r30, r25
    2fd4:	96 95       	lsr	r25
    2fd6:	96 95       	lsr	r25
    2fd8:	e9 0f       	add	r30, r25
    2fda:	ff 27       	eor	r31, r31
    2fdc:	e1 5a       	subi	r30, 0xA1	; 161
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	99 27       	eor	r25, r25
    2fe2:	33 27       	eor	r19, r19
    2fe4:	ee 24       	eor	r14, r14
    2fe6:	ff 24       	eor	r15, r15
    2fe8:	a7 01       	movw	r20, r14
    2fea:	e7 01       	movw	r28, r14
    2fec:	05 90       	lpm	r0, Z+
    2fee:	08 94       	sec
    2ff0:	07 94       	ror	r0
    2ff2:	28 f4       	brcc	.+10     	; 0x2ffe <__ftoa_engine+0x80>
    2ff4:	36 0f       	add	r19, r22
    2ff6:	e7 1e       	adc	r14, r23
    2ff8:	f8 1e       	adc	r15, r24
    2ffa:	49 1f       	adc	r20, r25
    2ffc:	51 1d       	adc	r21, r1
    2ffe:	66 0f       	add	r22, r22
    3000:	77 1f       	adc	r23, r23
    3002:	88 1f       	adc	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	06 94       	lsr	r0
    3008:	a1 f7       	brne	.-24     	; 0x2ff2 <__ftoa_engine+0x74>
    300a:	05 90       	lpm	r0, Z+
    300c:	07 94       	ror	r0
    300e:	28 f4       	brcc	.+10     	; 0x301a <__ftoa_engine+0x9c>
    3010:	e7 0e       	add	r14, r23
    3012:	f8 1e       	adc	r15, r24
    3014:	49 1f       	adc	r20, r25
    3016:	56 1f       	adc	r21, r22
    3018:	c1 1d       	adc	r28, r1
    301a:	77 0f       	add	r23, r23
    301c:	88 1f       	adc	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	66 1f       	adc	r22, r22
    3022:	06 94       	lsr	r0
    3024:	a1 f7       	brne	.-24     	; 0x300e <__ftoa_engine+0x90>
    3026:	05 90       	lpm	r0, Z+
    3028:	07 94       	ror	r0
    302a:	28 f4       	brcc	.+10     	; 0x3036 <__ftoa_engine+0xb8>
    302c:	f8 0e       	add	r15, r24
    302e:	49 1f       	adc	r20, r25
    3030:	56 1f       	adc	r21, r22
    3032:	c7 1f       	adc	r28, r23
    3034:	d1 1d       	adc	r29, r1
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	66 1f       	adc	r22, r22
    303c:	77 1f       	adc	r23, r23
    303e:	06 94       	lsr	r0
    3040:	a1 f7       	brne	.-24     	; 0x302a <__ftoa_engine+0xac>
    3042:	05 90       	lpm	r0, Z+
    3044:	07 94       	ror	r0
    3046:	20 f4       	brcc	.+8      	; 0x3050 <__ftoa_engine+0xd2>
    3048:	49 0f       	add	r20, r25
    304a:	56 1f       	adc	r21, r22
    304c:	c7 1f       	adc	r28, r23
    304e:	d8 1f       	adc	r29, r24
    3050:	99 0f       	add	r25, r25
    3052:	66 1f       	adc	r22, r22
    3054:	77 1f       	adc	r23, r23
    3056:	88 1f       	adc	r24, r24
    3058:	06 94       	lsr	r0
    305a:	a9 f7       	brne	.-22     	; 0x3046 <__ftoa_engine+0xc8>
    305c:	84 91       	lpm	r24, Z+
    305e:	10 95       	com	r17
    3060:	17 70       	andi	r17, 0x07	; 7
    3062:	41 f0       	breq	.+16     	; 0x3074 <__ftoa_engine+0xf6>
    3064:	d6 95       	lsr	r29
    3066:	c7 95       	ror	r28
    3068:	57 95       	ror	r21
    306a:	47 95       	ror	r20
    306c:	f7 94       	ror	r15
    306e:	e7 94       	ror	r14
    3070:	1a 95       	dec	r17
    3072:	c1 f7       	brne	.-16     	; 0x3064 <__ftoa_engine+0xe6>
    3074:	e5 e0       	ldi	r30, 0x05	; 5
    3076:	f1 e0       	ldi	r31, 0x01	; 1
    3078:	68 94       	set
    307a:	15 90       	lpm	r1, Z+
    307c:	15 91       	lpm	r17, Z+
    307e:	35 91       	lpm	r19, Z+
    3080:	65 91       	lpm	r22, Z+
    3082:	95 91       	lpm	r25, Z+
    3084:	05 90       	lpm	r0, Z+
    3086:	7f e2       	ldi	r23, 0x2F	; 47
    3088:	73 95       	inc	r23
    308a:	e1 18       	sub	r14, r1
    308c:	f1 0a       	sbc	r15, r17
    308e:	43 0b       	sbc	r20, r19
    3090:	56 0b       	sbc	r21, r22
    3092:	c9 0b       	sbc	r28, r25
    3094:	d0 09       	sbc	r29, r0
    3096:	c0 f7       	brcc	.-16     	; 0x3088 <__ftoa_engine+0x10a>
    3098:	e1 0c       	add	r14, r1
    309a:	f1 1e       	adc	r15, r17
    309c:	43 1f       	adc	r20, r19
    309e:	56 1f       	adc	r21, r22
    30a0:	c9 1f       	adc	r28, r25
    30a2:	d0 1d       	adc	r29, r0
    30a4:	7e f4       	brtc	.+30     	; 0x30c4 <__ftoa_engine+0x146>
    30a6:	70 33       	cpi	r23, 0x30	; 48
    30a8:	11 f4       	brne	.+4      	; 0x30ae <__ftoa_engine+0x130>
    30aa:	8a 95       	dec	r24
    30ac:	e6 cf       	rjmp	.-52     	; 0x307a <__ftoa_engine+0xfc>
    30ae:	e8 94       	clt
    30b0:	01 50       	subi	r16, 0x01	; 1
    30b2:	30 f0       	brcs	.+12     	; 0x30c0 <__ftoa_engine+0x142>
    30b4:	08 0f       	add	r16, r24
    30b6:	0a f4       	brpl	.+2      	; 0x30ba <__ftoa_engine+0x13c>
    30b8:	00 27       	eor	r16, r16
    30ba:	02 17       	cp	r16, r18
    30bc:	08 f4       	brcc	.+2      	; 0x30c0 <__ftoa_engine+0x142>
    30be:	20 2f       	mov	r18, r16
    30c0:	23 95       	inc	r18
    30c2:	02 2f       	mov	r16, r18
    30c4:	7a 33       	cpi	r23, 0x3A	; 58
    30c6:	28 f0       	brcs	.+10     	; 0x30d2 <__ftoa_engine+0x154>
    30c8:	79 e3       	ldi	r23, 0x39	; 57
    30ca:	7d 93       	st	X+, r23
    30cc:	2a 95       	dec	r18
    30ce:	e9 f7       	brne	.-6      	; 0x30ca <__ftoa_engine+0x14c>
    30d0:	10 c0       	rjmp	.+32     	; 0x30f2 <__ftoa_engine+0x174>
    30d2:	7d 93       	st	X+, r23
    30d4:	2a 95       	dec	r18
    30d6:	89 f6       	brne	.-94     	; 0x307a <__ftoa_engine+0xfc>
    30d8:	06 94       	lsr	r0
    30da:	97 95       	ror	r25
    30dc:	67 95       	ror	r22
    30de:	37 95       	ror	r19
    30e0:	17 95       	ror	r17
    30e2:	17 94       	ror	r1
    30e4:	e1 18       	sub	r14, r1
    30e6:	f1 0a       	sbc	r15, r17
    30e8:	43 0b       	sbc	r20, r19
    30ea:	56 0b       	sbc	r21, r22
    30ec:	c9 0b       	sbc	r28, r25
    30ee:	d0 09       	sbc	r29, r0
    30f0:	98 f0       	brcs	.+38     	; 0x3118 <__ftoa_engine+0x19a>
    30f2:	23 95       	inc	r18
    30f4:	7e 91       	ld	r23, -X
    30f6:	73 95       	inc	r23
    30f8:	7a 33       	cpi	r23, 0x3A	; 58
    30fa:	08 f0       	brcs	.+2      	; 0x30fe <__ftoa_engine+0x180>
    30fc:	70 e3       	ldi	r23, 0x30	; 48
    30fe:	7c 93       	st	X, r23
    3100:	20 13       	cpse	r18, r16
    3102:	b8 f7       	brcc	.-18     	; 0x30f2 <__ftoa_engine+0x174>
    3104:	7e 91       	ld	r23, -X
    3106:	70 61       	ori	r23, 0x10	; 16
    3108:	7d 93       	st	X+, r23
    310a:	30 f0       	brcs	.+12     	; 0x3118 <__ftoa_engine+0x19a>
    310c:	83 95       	inc	r24
    310e:	71 e3       	ldi	r23, 0x31	; 49
    3110:	7d 93       	st	X+, r23
    3112:	70 e3       	ldi	r23, 0x30	; 48
    3114:	2a 95       	dec	r18
    3116:	e1 f7       	brne	.-8      	; 0x3110 <__ftoa_engine+0x192>
    3118:	11 24       	eor	r1, r1
    311a:	ef 90       	pop	r14
    311c:	ff 90       	pop	r15
    311e:	0f 91       	pop	r16
    3120:	1f 91       	pop	r17
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	99 27       	eor	r25, r25
    3128:	87 fd       	sbrc	r24, 7
    312a:	90 95       	com	r25
    312c:	08 95       	ret

0000312e <isspace>:
    312e:	91 11       	cpse	r25, r1
    3130:	3e c1       	rjmp	.+636    	; 0x33ae <__ctype_isfalse>
    3132:	80 32       	cpi	r24, 0x20	; 32
    3134:	19 f0       	breq	.+6      	; 0x313c <isspace+0xe>
    3136:	89 50       	subi	r24, 0x09	; 9
    3138:	85 50       	subi	r24, 0x05	; 5
    313a:	d0 f7       	brcc	.-12     	; 0x3130 <isspace+0x2>
    313c:	08 95       	ret

0000313e <tolower>:
    313e:	91 11       	cpse	r25, r1
    3140:	08 95       	ret
    3142:	81 54       	subi	r24, 0x41	; 65
    3144:	8a 51       	subi	r24, 0x1A	; 26
    3146:	08 f4       	brcc	.+2      	; 0x314a <tolower+0xc>
    3148:	80 5e       	subi	r24, 0xE0	; 224
    314a:	85 5a       	subi	r24, 0xA5	; 165
    314c:	08 95       	ret

0000314e <strchr_P>:
    314e:	fc 01       	movw	r30, r24
    3150:	05 90       	lpm	r0, Z+
    3152:	06 16       	cp	r0, r22
    3154:	21 f0       	breq	.+8      	; 0x315e <strchr_P+0x10>
    3156:	00 20       	and	r0, r0
    3158:	d9 f7       	brne	.-10     	; 0x3150 <strchr_P+0x2>
    315a:	c0 01       	movw	r24, r0
    315c:	08 95       	ret
    315e:	31 97       	sbiw	r30, 0x01	; 1
    3160:	cf 01       	movw	r24, r30
    3162:	08 95       	ret

00003164 <strnlen_P>:
    3164:	fc 01       	movw	r30, r24
    3166:	05 90       	lpm	r0, Z+
    3168:	61 50       	subi	r22, 0x01	; 1
    316a:	70 40       	sbci	r23, 0x00	; 0
    316c:	01 10       	cpse	r0, r1
    316e:	d8 f7       	brcc	.-10     	; 0x3166 <strnlen_P+0x2>
    3170:	80 95       	com	r24
    3172:	90 95       	com	r25
    3174:	8e 0f       	add	r24, r30
    3176:	9f 1f       	adc	r25, r31
    3178:	08 95       	ret

0000317a <strnlen>:
    317a:	fc 01       	movw	r30, r24
    317c:	61 50       	subi	r22, 0x01	; 1
    317e:	70 40       	sbci	r23, 0x00	; 0
    3180:	01 90       	ld	r0, Z+
    3182:	01 10       	cpse	r0, r1
    3184:	d8 f7       	brcc	.-10     	; 0x317c <strnlen+0x2>
    3186:	80 95       	com	r24
    3188:	90 95       	com	r25
    318a:	8e 0f       	add	r24, r30
    318c:	9f 1f       	adc	r25, r31
    318e:	08 95       	ret

00003190 <fgetc>:
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	ec 01       	movw	r28, r24
    3196:	4b 81       	ldd	r20, Y+3	; 0x03
    3198:	40 ff       	sbrs	r20, 0
    319a:	1a c0       	rjmp	.+52     	; 0x31d0 <fgetc+0x40>
    319c:	46 ff       	sbrs	r20, 6
    319e:	0a c0       	rjmp	.+20     	; 0x31b4 <fgetc+0x24>
    31a0:	4f 7b       	andi	r20, 0xBF	; 191
    31a2:	4b 83       	std	Y+3, r20	; 0x03
    31a4:	8e 81       	ldd	r24, Y+6	; 0x06
    31a6:	9f 81       	ldd	r25, Y+7	; 0x07
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	9f 83       	std	Y+7, r25	; 0x07
    31ac:	8e 83       	std	Y+6, r24	; 0x06
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	28 2f       	mov	r18, r24
    31b2:	2b c0       	rjmp	.+86     	; 0x320a <fgetc+0x7a>
    31b4:	42 ff       	sbrs	r20, 2
    31b6:	13 c0       	rjmp	.+38     	; 0x31de <fgetc+0x4e>
    31b8:	e8 81       	ld	r30, Y
    31ba:	f9 81       	ldd	r31, Y+1	; 0x01
    31bc:	80 81       	ld	r24, Z
    31be:	28 2f       	mov	r18, r24
    31c0:	33 27       	eor	r19, r19
    31c2:	27 fd       	sbrc	r18, 7
    31c4:	30 95       	com	r19
    31c6:	21 15       	cp	r18, r1
    31c8:	31 05       	cpc	r19, r1
    31ca:	29 f4       	brne	.+10     	; 0x31d6 <fgetc+0x46>
    31cc:	40 62       	ori	r20, 0x20	; 32
    31ce:	4b 83       	std	Y+3, r20	; 0x03
    31d0:	2f ef       	ldi	r18, 0xFF	; 255
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	1b c0       	rjmp	.+54     	; 0x320c <fgetc+0x7c>
    31d6:	31 96       	adiw	r30, 0x01	; 1
    31d8:	f9 83       	std	Y+1, r31	; 0x01
    31da:	e8 83       	st	Y, r30
    31dc:	11 c0       	rjmp	.+34     	; 0x3200 <fgetc+0x70>
    31de:	ea 85       	ldd	r30, Y+10	; 0x0a
    31e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    31e2:	ce 01       	movw	r24, r28
    31e4:	09 95       	icall
    31e6:	9c 01       	movw	r18, r24
    31e8:	97 ff       	sbrs	r25, 7
    31ea:	0a c0       	rjmp	.+20     	; 0x3200 <fgetc+0x70>
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	2f 5f       	subi	r18, 0xFF	; 255
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	11 f0       	breq	.+4      	; 0x31f8 <fgetc+0x68>
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <fgetc+0x6a>
    31f8:	80 e1       	ldi	r24, 0x10	; 16
    31fa:	89 2b       	or	r24, r25
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	e8 cf       	rjmp	.-48     	; 0x31d0 <fgetc+0x40>
    3200:	8e 81       	ldd	r24, Y+6	; 0x06
    3202:	9f 81       	ldd	r25, Y+7	; 0x07
    3204:	01 96       	adiw	r24, 0x01	; 1
    3206:	9f 83       	std	Y+7, r25	; 0x07
    3208:	8e 83       	std	Y+6, r24	; 0x06
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	c9 01       	movw	r24, r18
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <fputc>:
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	8c 01       	movw	r16, r24
    321e:	eb 01       	movw	r28, r22
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	81 ff       	sbrs	r24, 1
    3224:	1b c0       	rjmp	.+54     	; 0x325c <fputc+0x48>
    3226:	82 ff       	sbrs	r24, 2
    3228:	0d c0       	rjmp	.+26     	; 0x3244 <fputc+0x30>
    322a:	2e 81       	ldd	r18, Y+6	; 0x06
    322c:	3f 81       	ldd	r19, Y+7	; 0x07
    322e:	8c 81       	ldd	r24, Y+4	; 0x04
    3230:	9d 81       	ldd	r25, Y+5	; 0x05
    3232:	28 17       	cp	r18, r24
    3234:	39 07       	cpc	r19, r25
    3236:	64 f4       	brge	.+24     	; 0x3250 <fputc+0x3c>
    3238:	e8 81       	ld	r30, Y
    323a:	f9 81       	ldd	r31, Y+1	; 0x01
    323c:	01 93       	st	Z+, r16
    323e:	f9 83       	std	Y+1, r31	; 0x01
    3240:	e8 83       	st	Y, r30
    3242:	06 c0       	rjmp	.+12     	; 0x3250 <fputc+0x3c>
    3244:	e8 85       	ldd	r30, Y+8	; 0x08
    3246:	f9 85       	ldd	r31, Y+9	; 0x09
    3248:	80 2f       	mov	r24, r16
    324a:	09 95       	icall
    324c:	89 2b       	or	r24, r25
    324e:	31 f4       	brne	.+12     	; 0x325c <fputc+0x48>
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	9f 83       	std	Y+7, r25	; 0x07
    3258:	8e 83       	std	Y+6, r24	; 0x06
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <fputc+0x4c>
    325c:	0f ef       	ldi	r16, 0xFF	; 255
    325e:	1f ef       	ldi	r17, 0xFF	; 255
    3260:	c8 01       	movw	r24, r16
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	08 95       	ret

0000326c <fputs>:
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	7c 01       	movw	r14, r24
    327a:	8b 01       	movw	r16, r22
    327c:	db 01       	movw	r26, r22
    327e:	13 96       	adiw	r26, 0x03	; 3
    3280:	8c 91       	ld	r24, X
    3282:	81 fd       	sbrc	r24, 1
    3284:	03 c0       	rjmp	.+6      	; 0x328c <fputs+0x20>
    3286:	cf ef       	ldi	r28, 0xFF	; 255
    3288:	df ef       	ldi	r29, 0xFF	; 255
    328a:	13 c0       	rjmp	.+38     	; 0x32b2 <fputs+0x46>
    328c:	c0 e0       	ldi	r28, 0x00	; 0
    328e:	d0 e0       	ldi	r29, 0x00	; 0
    3290:	0b c0       	rjmp	.+22     	; 0x32a8 <fputs+0x3c>
    3292:	d8 01       	movw	r26, r16
    3294:	18 96       	adiw	r26, 0x08	; 8
    3296:	ed 91       	ld	r30, X+
    3298:	fc 91       	ld	r31, X
    329a:	19 97       	sbiw	r26, 0x09	; 9
    329c:	b8 01       	movw	r22, r16
    329e:	09 95       	icall
    32a0:	89 2b       	or	r24, r25
    32a2:	11 f0       	breq	.+4      	; 0x32a8 <fputs+0x3c>
    32a4:	cf ef       	ldi	r28, 0xFF	; 255
    32a6:	df ef       	ldi	r29, 0xFF	; 255
    32a8:	f7 01       	movw	r30, r14
    32aa:	81 91       	ld	r24, Z+
    32ac:	7f 01       	movw	r14, r30
    32ae:	88 23       	and	r24, r24
    32b0:	81 f7       	brne	.-32     	; 0x3292 <fputs+0x26>
    32b2:	ce 01       	movw	r24, r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	e6 e0       	ldi	r30, 0x06	; 6
    32ba:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x18>

000032be <ungetc>:
    32be:	9c 01       	movw	r18, r24
    32c0:	fb 01       	movw	r30, r22
    32c2:	83 81       	ldd	r24, Z+3	; 0x03
    32c4:	80 ff       	sbrs	r24, 0
    32c6:	11 c0       	rjmp	.+34     	; 0x32ea <ungetc+0x2c>
    32c8:	86 fd       	sbrc	r24, 6
    32ca:	0f c0       	rjmp	.+30     	; 0x32ea <ungetc+0x2c>
    32cc:	9f ef       	ldi	r25, 0xFF	; 255
    32ce:	2f 3f       	cpi	r18, 0xFF	; 255
    32d0:	39 07       	cpc	r19, r25
    32d2:	59 f0       	breq	.+22     	; 0x32ea <ungetc+0x2c>
    32d4:	22 83       	std	Z+2, r18	; 0x02
    32d6:	80 64       	ori	r24, 0x40	; 64
    32d8:	8f 7d       	andi	r24, 0xDF	; 223
    32da:	83 83       	std	Z+3, r24	; 0x03
    32dc:	86 81       	ldd	r24, Z+6	; 0x06
    32de:	97 81       	ldd	r25, Z+7	; 0x07
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	97 83       	std	Z+7, r25	; 0x07
    32e4:	86 83       	std	Z+6, r24	; 0x06
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <ungetc+0x30>
    32ea:	2f ef       	ldi	r18, 0xFF	; 255
    32ec:	3f ef       	ldi	r19, 0xFF	; 255
    32ee:	c9 01       	movw	r24, r18
    32f0:	08 95       	ret

000032f2 <__ultoa_invert>:
    32f2:	fa 01       	movw	r30, r20
    32f4:	aa 27       	eor	r26, r26
    32f6:	28 30       	cpi	r18, 0x08	; 8
    32f8:	51 f1       	breq	.+84     	; 0x334e <__ultoa_invert+0x5c>
    32fa:	20 31       	cpi	r18, 0x10	; 16
    32fc:	81 f1       	breq	.+96     	; 0x335e <__ultoa_invert+0x6c>
    32fe:	e8 94       	clt
    3300:	6f 93       	push	r22
    3302:	6e 7f       	andi	r22, 0xFE	; 254
    3304:	6e 5f       	subi	r22, 0xFE	; 254
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	8f 4f       	sbci	r24, 0xFF	; 255
    330a:	9f 4f       	sbci	r25, 0xFF	; 255
    330c:	af 4f       	sbci	r26, 0xFF	; 255
    330e:	b1 e0       	ldi	r27, 0x01	; 1
    3310:	3e d0       	rcall	.+124    	; 0x338e <__ultoa_invert+0x9c>
    3312:	b4 e0       	ldi	r27, 0x04	; 4
    3314:	3c d0       	rcall	.+120    	; 0x338e <__ultoa_invert+0x9c>
    3316:	67 0f       	add	r22, r23
    3318:	78 1f       	adc	r23, r24
    331a:	89 1f       	adc	r24, r25
    331c:	9a 1f       	adc	r25, r26
    331e:	a1 1d       	adc	r26, r1
    3320:	68 0f       	add	r22, r24
    3322:	79 1f       	adc	r23, r25
    3324:	8a 1f       	adc	r24, r26
    3326:	91 1d       	adc	r25, r1
    3328:	a1 1d       	adc	r26, r1
    332a:	6a 0f       	add	r22, r26
    332c:	71 1d       	adc	r23, r1
    332e:	81 1d       	adc	r24, r1
    3330:	91 1d       	adc	r25, r1
    3332:	a1 1d       	adc	r26, r1
    3334:	20 d0       	rcall	.+64     	; 0x3376 <__ultoa_invert+0x84>
    3336:	09 f4       	brne	.+2      	; 0x333a <__ultoa_invert+0x48>
    3338:	68 94       	set
    333a:	3f 91       	pop	r19
    333c:	2a e0       	ldi	r18, 0x0A	; 10
    333e:	26 9f       	mul	r18, r22
    3340:	11 24       	eor	r1, r1
    3342:	30 19       	sub	r19, r0
    3344:	30 5d       	subi	r19, 0xD0	; 208
    3346:	31 93       	st	Z+, r19
    3348:	de f6       	brtc	.-74     	; 0x3300 <__ultoa_invert+0xe>
    334a:	cf 01       	movw	r24, r30
    334c:	08 95       	ret
    334e:	46 2f       	mov	r20, r22
    3350:	47 70       	andi	r20, 0x07	; 7
    3352:	40 5d       	subi	r20, 0xD0	; 208
    3354:	41 93       	st	Z+, r20
    3356:	b3 e0       	ldi	r27, 0x03	; 3
    3358:	0f d0       	rcall	.+30     	; 0x3378 <__ultoa_invert+0x86>
    335a:	c9 f7       	brne	.-14     	; 0x334e <__ultoa_invert+0x5c>
    335c:	f6 cf       	rjmp	.-20     	; 0x334a <__ultoa_invert+0x58>
    335e:	46 2f       	mov	r20, r22
    3360:	4f 70       	andi	r20, 0x0F	; 15
    3362:	40 5d       	subi	r20, 0xD0	; 208
    3364:	4a 33       	cpi	r20, 0x3A	; 58
    3366:	18 f0       	brcs	.+6      	; 0x336e <__ultoa_invert+0x7c>
    3368:	49 5d       	subi	r20, 0xD9	; 217
    336a:	31 fd       	sbrc	r19, 1
    336c:	40 52       	subi	r20, 0x20	; 32
    336e:	41 93       	st	Z+, r20
    3370:	02 d0       	rcall	.+4      	; 0x3376 <__ultoa_invert+0x84>
    3372:	a9 f7       	brne	.-22     	; 0x335e <__ultoa_invert+0x6c>
    3374:	ea cf       	rjmp	.-44     	; 0x334a <__ultoa_invert+0x58>
    3376:	b4 e0       	ldi	r27, 0x04	; 4
    3378:	a6 95       	lsr	r26
    337a:	97 95       	ror	r25
    337c:	87 95       	ror	r24
    337e:	77 95       	ror	r23
    3380:	67 95       	ror	r22
    3382:	ba 95       	dec	r27
    3384:	c9 f7       	brne	.-14     	; 0x3378 <__ultoa_invert+0x86>
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	61 05       	cpc	r22, r1
    338a:	71 05       	cpc	r23, r1
    338c:	08 95       	ret
    338e:	9b 01       	movw	r18, r22
    3390:	ac 01       	movw	r20, r24
    3392:	0a 2e       	mov	r0, r26
    3394:	06 94       	lsr	r0
    3396:	57 95       	ror	r21
    3398:	47 95       	ror	r20
    339a:	37 95       	ror	r19
    339c:	27 95       	ror	r18
    339e:	ba 95       	dec	r27
    33a0:	c9 f7       	brne	.-14     	; 0x3394 <__ultoa_invert+0xa2>
    33a2:	62 0f       	add	r22, r18
    33a4:	73 1f       	adc	r23, r19
    33a6:	84 1f       	adc	r24, r20
    33a8:	95 1f       	adc	r25, r21
    33aa:	a0 1d       	adc	r26, r0
    33ac:	08 95       	ret

000033ae <__ctype_isfalse>:
    33ae:	99 27       	eor	r25, r25
    33b0:	88 27       	eor	r24, r24

000033b2 <__ctype_istrue>:
    33b2:	08 95       	ret

000033b4 <_exit>:
    33b4:	f8 94       	cli

000033b6 <__stop_program>:
    33b6:	ff cf       	rjmp	.-2      	; 0x33b6 <__stop_program>
