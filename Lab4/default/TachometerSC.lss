
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000034de  00003572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000184  0080018e  0080018e  00003600  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000477  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002932  00000000  00000000  00003bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001074  00000000  00000000  000064e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b6c  00000000  00000000  0000755d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  000090cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000772  00000000  00000000  000094ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000146a  00000000  00000000  00009c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_13>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_21>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000070 <__c.1790>:
      70:	6e 61 6e 00                                         nan.

00000074 <__c.1788>:
      74:	69 6e 66 00                                         inf.

00000078 <__c.2085>:
      78:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      88:	47 00                                               G.

0000008a <pstr_an>:
      8a:	61 6e 00                                            an.

0000008d <pstr_nfinity>:
      8d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000095 <pwr_m10>:
      95:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ad <pwr_p10>:
      ad:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bd:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000c5 <LcdCustomChar>:
      c5:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d5:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e5:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f5:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     105:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     115:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     125:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     135:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     145:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     155:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     165:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     175:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     185:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     195:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     1a5:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     1b5:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     1c5:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     1d5:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1e5:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1f5:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e1       	ldi	r29, 0x10	; 16
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	ee ed       	ldi	r30, 0xDE	; 222
     214:	f4 e3       	ldi	r31, 0x34	; 52
     216:	02 c0       	rjmp	.+4      	; 0x21c <.do_copy_data_start>

00000218 <.do_copy_data_loop>:
     218:	05 90       	lpm	r0, Z+
     21a:	0d 92       	st	X+, r0

0000021c <.do_copy_data_start>:
     21c:	ae 38       	cpi	r26, 0x8E	; 142
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <.do_copy_data_loop>

00000222 <__do_clear_bss>:
     222:	13 e0       	ldi	r17, 0x03	; 3
     224:	ae e8       	ldi	r26, 0x8E	; 142
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a2 31       	cpi	r26, 0x12	; 18
     22e:	b1 07       	cpc	r27, r17
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 70 05 	call	0xae0	; 0xae0 <main>
     236:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     284:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     288:	50 90 ba 02 	lds	r5, 0x02BA
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     28c:	b0 9b       	sbis	0x16, 0	; 22
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_13+0x7a>
    ++kernel.cycles;
     290:	80 91 fb 02 	lds	r24, 0x02FB
     294:	90 91 fc 02 	lds	r25, 0x02FC
     298:	a0 91 fd 02 	lds	r26, 0x02FD
     29c:	b0 91 fe 02 	lds	r27, 0x02FE
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 fb 02 	sts	0x02FB, r24
     2aa:	90 93 fc 02 	sts	0x02FC, r25
     2ae:	a0 93 fd 02 	sts	0x02FD, r26
     2b2:	b0 93 fe 02 	sts	0x02FE, r27
    TIFR1 |= (1<<TOV1) ;
     2b6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2b8:	80 91 84 00 	lds	r24, 0x0084
     2bc:	90 91 85 00 	lds	r25, 0x0085
     2c0:	3c 01       	movw	r6, r24
     2c2:	88 24       	eor	r8, r8
     2c4:	99 24       	eor	r9, r9
     2c6:	80 91 fb 02 	lds	r24, 0x02FB
     2ca:	90 91 fc 02 	lds	r25, 0x02FC
     2ce:	a0 91 fd 02 	lds	r26, 0x02FD
     2d2:	b0 91 fe 02 	lds	r27, 0x02FE
     2d6:	dc 01       	movw	r26, r24
     2d8:	99 27       	eor	r25, r25
     2da:	88 27       	eor	r24, r24
     2dc:	68 0e       	add	r6, r24
     2de:	79 1e       	adc	r7, r25
     2e0:	8a 1e       	adc	r8, r26
     2e2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	40 90 b9 02 	lds	r4, 0x02B9
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	af 2e       	mov	r10, r31
     2f0:	ff ef       	ldi	r31, 0xFF	; 255
     2f2:	bf 2e       	mov	r11, r31
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 2e       	mov	r12, r31
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     300:	33 24       	eor	r3, r3
     302:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     304:	cb e0       	ldi	r28, 0x0B	; 11
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	43 c0       	rjmp	.+134    	; 0x390 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     30a:	62 9d       	mul	r22, r2
     30c:	d0 01       	movw	r26, r0
     30e:	11 24       	eor	r1, r1
     310:	a5 54       	subi	r26, 0x45	; 69
     312:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	a1 f4       	brne	.+40     	; 0x346 <__vector_13+0x108>
      if (t->release <= now) {
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	ed 90       	ld	r14, X+
     322:	fd 90       	ld	r15, X+
     324:	0d 91       	ld	r16, X+
     326:	1c 91       	ld	r17, X
     328:	15 97       	sbiw	r26, 0x05	; 5
     32a:	6e 14       	cp	r6, r14
     32c:	7f 04       	cpc	r7, r15
     32e:	80 06       	cpc	r8, r16
     330:	91 06       	cpc	r9, r17
     332:	20 f0       	brcs	.+8      	; 0x33c <__vector_13+0xfe>
	t->state = READYQ;
     334:	1a 96       	adiw	r26, 0x0a	; 10
     336:	3c 92       	st	X, r3
     338:	1a 97       	sbiw	r26, 0x0a	; 10
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     33c:	ea 14       	cp	r14, r10
     33e:	fb 04       	cpc	r15, r11
     340:	0c 05       	cpc	r16, r12
     342:	1d 05       	cpc	r17, r13
     344:	10 f0       	brcs	.+4      	; 0x34a <__vector_13+0x10c>
     346:	86 01       	movw	r16, r12
     348:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     34a:	1a 96       	adiw	r26, 0x0a	; 10
     34c:	8c 91       	ld	r24, X
     34e:	1a 97       	sbiw	r26, 0x0a	; 10
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	d9 f4       	brne	.+54     	; 0x38a <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     354:	87 2f       	mov	r24, r23
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	9c 9f       	mul	r25, r28
     362:	f0 0d       	add	r31, r0
     364:	11 24       	eor	r1, r1
     366:	e7 54       	subi	r30, 0x47	; 71
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	16 96       	adiw	r26, 0x06	; 6
     36c:	2d 91       	ld	r18, X+
     36e:	3d 91       	ld	r19, X+
     370:	4d 91       	ld	r20, X+
     372:	5c 91       	ld	r21, X
     374:	19 97       	sbiw	r26, 0x09	; 9
     376:	80 85       	ldd	r24, Z+8	; 0x08
     378:	91 85       	ldd	r25, Z+9	; 0x09
     37a:	a2 85       	ldd	r26, Z+10	; 0x0a
     37c:	b3 85       	ldd	r27, Z+11	; 0x0b
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	4a 07       	cpc	r20, r26
     384:	5b 07       	cpc	r21, r27
     386:	08 f4       	brcc	.+2      	; 0x38a <__vector_13+0x14c>
     388:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	57 01       	movw	r10, r14
     38e:	68 01       	movw	r12, r16
     390:	46 16       	cp	r4, r22
     392:	08 f0       	brcs	.+2      	; 0x396 <__vector_13+0x158>
     394:	ba cf       	rjmp	.-140    	; 0x30a <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     396:	75 15       	cp	r23, r5
     398:	b1 f0       	breq	.+44     	; 0x3c6 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	5e 9e       	mul	r5, r30
     39e:	d0 01       	movw	r26, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	a5 54       	subi	r26, 0x45	; 69
     3a4:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     3a6:	8d b7       	in	r24, 0x3d	; 61
     3a8:	8c 93       	st	X, r24
    t->sph = SPH;
     3aa:	8e b7       	in	r24, 0x3e	; 62
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3b0:	7e 9f       	mul	r23, r30
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	e5 54       	subi	r30, 0x45	; 69
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3be:	80 81       	ld	r24, Z
     3c0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3c2:	70 93 ba 02 	sts	0x02BA, r23

  }

  kernel.nextHit = nextHit;  
     3c6:	a0 92 ff 02 	sts	0x02FF, r10
     3ca:	b0 92 00 03 	sts	0x0300, r11
     3ce:	c0 92 01 03 	sts	0x0301, r12
     3d2:	d0 92 02 03 	sts	0x0302, r13

  now = (kernel.cycles << 16) + TCNT1;
     3d6:	20 91 84 00 	lds	r18, 0x0084
     3da:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	80 91 fb 02 	lds	r24, 0x02FB
     3e6:	90 91 fc 02 	lds	r25, 0x02FC
     3ea:	a0 91 fd 02 	lds	r26, 0x02FD
     3ee:	b0 91 fe 02 	lds	r27, 0x02FE
     3f2:	dc 01       	movw	r26, r24
     3f4:	99 27       	eor	r25, r25
     3f6:	88 27       	eor	r24, r24
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	4a 1f       	adc	r20, r26
     3fe:	5b 1f       	adc	r21, r27
     400:	d6 01       	movw	r26, r12
     402:	c5 01       	movw	r24, r10
     404:	82 1b       	sub	r24, r18
     406:	93 0b       	sbc	r25, r19
     408:	a4 0b       	sbc	r26, r20
     40a:	b5 0b       	sbc	r27, r21
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	a1 05       	cpc	r26, r1
     416:	b1 05       	cpc	r27, r1
     418:	24 f4       	brge	.+8      	; 0x422 <__vector_13+0x1e4>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     422:	80 91 84 00 	lds	r24, 0x0084
     426:	90 91 85 00 	lds	r25, 0x0085
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	a4 1f       	adc	r26, r20
     434:	b5 1f       	adc	r27, r21
     436:	80 50       	subi	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	a1 40       	sbci	r26, 0x01	; 1
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	38 f4       	brcc	.+14     	; 0x44e <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     44e:	80 91 84 00 	lds	r24, 0x0084
     452:	90 91 85 00 	lds	r25, 0x0085
     456:	8c 5f       	subi	r24, 0xFC	; 252
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	28 f4       	brcc	.+10     	; 0x466 <__vector_13+0x228>
    OCR1A = 0x0000;
     45c:	10 92 89 00 	sts	0x0089, r1
     460:	10 92 88 00 	sts	0x0088, r1
     464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 89 00 	sts	0x0089, r25
     46e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6f 00 	sts	0x006F, r24
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	3f 90       	pop	r3
     4b2:	2f 90       	pop	r2
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4c6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	28 1b       	sub	r18, r24
     4dc:	39 0b       	sbc	r19, r25
     4de:	30 93 fa 02 	sts	0x02FA, r19
     4e2:	20 93 f9 02 	sts	0x02F9, r18
  kernel.nbrOfTasks = 0;
     4e6:	10 92 b9 02 	sts	0x02B9, r1
  kernel.running = 0;
     4ea:	10 92 ba 02 	sts	0x02BA, r1

  kernel.cycles = 0x0000;
     4ee:	10 92 fb 02 	sts	0x02FB, r1
     4f2:	10 92 fc 02 	sts	0x02FC, r1
     4f6:	10 92 fd 02 	sts	0x02FD, r1
     4fa:	10 92 fe 02 	sts	0x02FE, r1
  kernel.nextHit = 0x7FFFFFFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	af ef       	ldi	r26, 0xFF	; 255
     504:	bf e7       	ldi	r27, 0x7F	; 127
     506:	80 93 ff 02 	sts	0x02FF, r24
     50a:	90 93 00 03 	sts	0x0300, r25
     50e:	a0 93 01 03 	sts	0x0301, r26
     512:	b0 93 02 03 	sts	0x0302, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     516:	80 93 c1 02 	sts	0x02C1, r24
     51a:	90 93 c2 02 	sts	0x02C2, r25
     51e:	a0 93 c3 02 	sts	0x02C3, r26
     522:	b0 93 c4 02 	sts	0x02C4, r27
  kernel.tasks[0].release = 0x00000000;
     526:	10 92 bd 02 	sts	0x02BD, r1
     52a:	10 92 be 02 	sts	0x02BE, r1
     52e:	10 92 bf 02 	sts	0x02BF, r1
     532:	10 92 c0 02 	sts	0x02C0, r1

  sei(); /* set enabled interrupts */
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	49 01       	movw	r8, r18
     554:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     556:	f8 94       	cli

  ++kernel.nbrOfTasks;
     558:	20 91 b9 02 	lds	r18, 0x02B9
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	20 93 b9 02 	sts	0x02B9, r18

  sp = kernel.memptr;
     562:	c0 91 f9 02 	lds	r28, 0x02F9
     566:	d0 91 fa 02 	lds	r29, 0x02FA
  kernel.memptr -= stacksize;  // decrease free mem ptr
     56a:	9e 01       	movw	r18, r28
     56c:	26 1b       	sub	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	30 93 fa 02 	sts	0x02FA, r19
     574:	20 93 f9 02 	sts	0x02F9, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     578:	88 83       	st	Y, r24
     57a:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     57c:	92 93       	st	-Z, r25
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     582:	ce 01       	movw	r24, r28
     584:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     58a:	a8 17       	cp	r26, r24
     58c:	b9 07       	cpc	r27, r25
     58e:	d9 f7       	brne	.-10     	; 0x586 <trtCreateTask+0x4c>
     590:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     592:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     594:	d2 92       	st	-Z, r13
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     59a:	9e 01       	movw	r18, r28
     59c:	23 52       	subi	r18, 0x23	; 35
     59e:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5a0:	1c 92       	st	X, r1
     5a2:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5a4:	a2 17       	cp	r26, r18
     5a6:	b3 07       	cpc	r27, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <trtCreateTask+0x66>
     5aa:	9f 01       	movw	r18, r30
     5ac:	26 50       	subi	r18, 0x06	; 6
     5ae:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5b0:	e0 91 b9 02 	lds	r30, 0x02B9
     5b4:	8b e0       	ldi	r24, 0x0B	; 11
     5b6:	e8 9f       	mul	r30, r24
     5b8:	f0 01       	movw	r30, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	e5 54       	subi	r30, 0x45	; 69
     5be:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     5c0:	82 82       	std	Z+2, r8	; 0x02
     5c2:	93 82       	std	Z+3, r9	; 0x03
     5c4:	a4 82       	std	Z+4, r10	; 0x04
     5c6:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	f7 82       	std	Z+7, r15	; 0x07
     5cc:	00 87       	std	Z+8, r16	; 0x08
     5ce:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     5d4:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5d6:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>

}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5f6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5f8:	e9 eb       	ldi	r30, 0xB9	; 185
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     602:	78 94       	sei
}
     604:	08 95       	ret

00000606 <trtWait>:

void trtWait(uint8_t semnbr) {
     606:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     608:	20 91 ba 02 	lds	r18, 0x02BA

  cli(); // disable interrupts
     60c:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     60e:	e8 2f       	mov	r30, r24
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	ef 50       	subi	r30, 0x0F	; 15
     614:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	19 f0       	breq	.+6      	; 0x622 <trtWait+0x1c>
    (*s)--;
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	10 c0       	rjmp	.+32     	; 0x642 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e5 54       	subi	r30, 0x45	; 69
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	4e 5f       	subi	r20, 0xFE	; 254
     63c:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	08 95       	ret

00000646 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     64e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     650:	00 91 b9 02 	lds	r16, 0x02B9
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	4f ef       	ldi	r20, 0xFF	; 255
     658:	5f ef       	ldi	r21, 0xFF	; 255
     65a:	6f ef       	ldi	r22, 0xFF	; 255
     65c:	7f ef       	ldi	r23, 0xFF	; 255
     65e:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     664:	21 2f       	mov	r18, r17
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     66e:	ef 9d       	mul	r30, r15
     670:	d0 01       	movw	r26, r0
     672:	11 24       	eor	r1, r1
     674:	a5 54       	subi	r26, 0x45	; 69
     676:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 91       	ld	r24, X
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	69 f4       	brne	.+26     	; 0x6a0 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8d 91       	ld	r24, X+
     68a:	9d 91       	ld	r25, X+
     68c:	0d 90       	ld	r0, X+
     68e:	bc 91       	ld	r27, X
     690:	a0 2d       	mov	r26, r0
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <trtSignal+0x5a>
     69c:	fe 2f       	mov	r31, r30
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <trtSignal+0x5e>
     6a0:	db 01       	movw	r26, r22
     6a2:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	0e 17       	cp	r16, r30
     6ac:	00 f7       	brcc	.-64     	; 0x66e <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6ae:	ff 23       	and	r31, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6b2:	e1 2f       	mov	r30, r17
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e8 54       	subi	r30, 0x48	; 72
     6b8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ba:	81 ad       	ldd	r24, Z+57	; 0x39
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	81 af       	std	Z+57, r24	; 0x39
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6c2:	2f 2f       	mov	r18, r31
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	e7 54       	subi	r30, 0x47	; 71
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6ee:	20 91 84 00 	lds	r18, 0x0084
     6f2:	30 91 85 00 	lds	r19, 0x0085
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	80 91 fb 02 	lds	r24, 0x02FB
     6fe:	90 91 fc 02 	lds	r25, 0x02FC
     702:	a0 91 fd 02 	lds	r26, 0x02FD
     706:	b0 91 fe 02 	lds	r27, 0x02FE
     70a:	dc 01       	movw	r26, r24
     70c:	99 27       	eor	r25, r25
     70e:	88 27       	eor	r24, r24
     710:	28 0f       	add	r18, r24
     712:	39 1f       	adc	r19, r25
     714:	4a 1f       	adc	r20, r26
     716:	5b 1f       	adc	r21, r27
}
     718:	b9 01       	movw	r22, r18
     71a:	ca 01       	movw	r24, r20
     71c:	08 95       	ret

0000071e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     71e:	e0 91 ba 02 	lds	r30, 0x02BA
     722:	ab e0       	ldi	r26, 0x0B	; 11
     724:	ea 9f       	mul	r30, r26
     726:	f0 01       	movw	r30, r0
     728:	11 24       	eor	r1, r1
     72a:	e5 54       	subi	r30, 0x45	; 69
     72c:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     72e:	f8 94       	cli

  t->state = TIMEQ;
     730:	a2 e0       	ldi	r26, 0x02	; 2
     732:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     73c:	26 83       	std	Z+6, r18	; 0x06
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	40 87       	std	Z+8, r20	; 0x08
     742:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     744:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     748:	08 95       	ret

0000074a <trtGetRelease>:


uint32_t trtGetRelease(void) {
     74a:	80 91 ba 02 	lds	r24, 0x02BA
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2b e0       	ldi	r18, 0x0B	; 11
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	82 9f       	mul	r24, r18
     756:	f0 01       	movw	r30, r0
     758:	83 9f       	mul	r24, r19
     75a:	f0 0d       	add	r31, r0
     75c:	92 9f       	mul	r25, r18
     75e:	f0 0d       	add	r31, r0
     760:	11 24       	eor	r1, r1
     762:	e7 54       	subi	r30, 0x47	; 71
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	df 01       	movw	r26, r30
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	64 81       	ldd	r22, Z+4	; 0x04
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     77e:	80 91 ba 02 	lds	r24, 0x02BA
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	82 9f       	mul	r24, r18
     78a:	f0 01       	movw	r30, r0
     78c:	83 9f       	mul	r24, r19
     78e:	f0 0d       	add	r31, r0
     790:	92 9f       	mul	r25, r18
     792:	f0 0d       	add	r31, r0
     794:	11 24       	eor	r1, r1
     796:	e7 54       	subi	r30, 0x47	; 71
     798:	fd 4f       	sbci	r31, 0xFD	; 253
     79a:	df 01       	movw	r26, r30
     79c:	18 96       	adiw	r26, 0x08	; 8
     79e:	60 85       	ldd	r22, Z+8	; 0x08
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	7c 91       	ld	r23, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	12 97       	sbiw	r26, 0x02	; 2
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 91       	ld	r25, X
     7b0:	08 95       	ret

000007b2 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7b2:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7b4:	80 91 ba 02 	lds	r24, 0x02BA
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	e7 54       	subi	r30, 0x47	; 71
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7d2:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     7d6:	08 95       	ret

000007d8 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7d8:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	ef 50       	subi	r30, 0x0F	; 15
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     7e2:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <trtAccept+0x16>
    (*s)--;
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7ee:	78 94       	sei
  return temp ;
}
     7f0:	08 95       	ret

000007f2 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7f2:	87 e6       	ldi	r24, 0x67	; 103
     7f4:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7f8:	e1 ec       	ldi	r30, 0xC1	; 193
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	88 e1       	ldi	r24, 0x18	; 24
     7fe:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     800:	10 92 e1 01 	sts	0x01E1, r1
     804:	10 92 e0 01 	sts	0x01E0, r1
  tx_out = 0;
     808:	10 92 e3 01 	sts	0x01E3, r1
     80c:	10 92 e2 01 	sts	0x01E2, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     810:	80 81       	ld	r24, Z
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 83       	st	Z, r24
}
     816:	08 95       	ret

00000818 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     82e:	20 91 e0 01 	lds	r18, 0x01E0
     832:	30 91 e1 01 	lds	r19, 0x01E1
     836:	80 91 e2 01 	lds	r24, 0x01E2
     83a:	90 91 e3 01 	lds	r25, 0x01E3
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	31 f4       	brne	.+12     	; 0x850 <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     844:	80 91 c1 00 	lds	r24, 0x00C1
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 93 c1 00 	sts	0x00C1, r24
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     850:	e0 91 e2 01 	lds	r30, 0x01E2
     854:	f0 91 e3 01 	lds	r31, 0x01E3
     858:	ec 51       	subi	r30, 0x1C	; 28
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	80 81       	ld	r24, Z
     85e:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     862:	80 91 e2 01 	lds	r24, 0x01E2
     866:	90 91 e3 01 	lds	r25, 0x01E3
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 e3 01 	sts	0x01E3, r25
     870:	80 93 e2 01 	sts	0x01E2, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     874:	80 91 e2 01 	lds	r24, 0x01E2
     878:	90 91 e3 01 	lds	r25, 0x01E3
     87c:	88 3c       	cpi	r24, 0xC8	; 200
     87e:	91 05       	cpc	r25, r1
     880:	21 f4       	brne	.+8      	; 0x88a <__vector_21+0x72>
     882:	10 92 e3 01 	sts	0x01E3, r1
     886:	10 92 e2 01 	sts	0x01E2, r1
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8a0:	1f 93       	push	r17
     8a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	19 f4       	brne	.+6      	; 0x8ae <uart_putchar+0xe>
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
  char i = tx_in;
     8ae:	80 91 e0 01 	lds	r24, 0x01E0
     8b2:	90 91 e1 01 	lds	r25, 0x01E1
  i++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b8:	88 3c       	cpi	r24, 0xC8	; 200
     8ba:	09 f4       	brne	.+2      	; 0x8be <uart_putchar+0x1e>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8be:	e0 91 e0 01 	lds	r30, 0x01E0
     8c2:	f0 91 e1 01 	lds	r31, 0x01E1
     8c6:	ec 51       	subi	r30, 0x1C	; 28
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	80 91 e2 01 	lds	r24, 0x01E2
     8d4:	90 91 e3 01 	lds	r25, 0x01E3
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	c9 f3       	breq	.-14     	; 0x8d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8de:	30 93 e1 01 	sts	0x01E1, r19
     8e2:	20 93 e0 01 	sts	0x01E0, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	1f 91       	pop	r17
     8f6:	08 95       	ret

000008f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91a:	80 91 c6 00 	lds	r24, 0x00C6
     91e:	80 93 0b 03 	sts	0x030B, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     958:	80 91 8e 01 	lds	r24, 0x018E
     95c:	90 91 8f 01 	lds	r25, 0x018F
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <uart_getchar+0x1c>
     964:	a1 c0       	rjmp	.+322    	; 0xaa8 <uart_getchar+0x15e>
     966:	00 e9       	ldi	r16, 0x90	; 144
     968:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	if (UCSR0A & _BV(FE0))
     970:	80 91 c0 00 	lds	r24, 0x00C0
     974:	84 ff       	sbrs	r24, 4
     976:	03 c0       	rjmp	.+6      	; 0x97e <uart_getchar+0x34>
     978:	2e ef       	ldi	r18, 0xFE	; 254
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	a9 c0       	rjmp	.+338    	; 0xad0 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     97e:	80 91 c0 00 	lds	r24, 0x00C0
     982:	83 fd       	sbrc	r24, 3
     984:	a3 c0       	rjmp	.+326    	; 0xacc <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     986:	90 91 0b 03 	lds	r25, 0x030B

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     98a:	9d 30       	cpi	r25, 0x0D	; 13
     98c:	11 f0       	breq	.+4      	; 0x992 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	81 f4       	brne	.+32     	; 0x9b2 <uart_getchar+0x68>
	  {
	    *cp = c;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	f8 01       	movw	r30, r16
     996:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	    rxp = b;
     99e:	80 e9       	ldi	r24, 0x90	; 144
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	90 93 8f 01 	sts	0x018F, r25
     9a6:	80 93 8e 01 	sts	0x018E, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b2:	99 30       	cpi	r25, 0x09	; 9
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <uart_getchar+0x6e>
     9b6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9b8:	89 2f       	mov	r24, r25
     9ba:	80 52       	subi	r24, 0x20	; 32
     9bc:	8f 35       	cpi	r24, 0x5F	; 95
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <uart_getchar+0x7a>
     9c0:	90 3a       	cpi	r25, 0xA0	; 160
     9c2:	70 f0       	brcs	.+28     	; 0x9e0 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	0f 3d       	cpi	r16, 0xDF	; 223
     9c8:	1f 07       	cpc	r17, r31
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d0:	f8 01       	movw	r30, r16
     9d2:	91 93       	st	Z+, r25
     9d4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9d6:	89 2f       	mov	r24, r25
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     9de:	c5 cf       	rjmp	.-118    	; 0x96a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e0:	92 31       	cpi	r25, 0x12	; 18
     9e2:	39 f1       	breq	.+78     	; 0xa32 <uart_getchar+0xe8>
     9e4:	93 31       	cpi	r25, 0x13	; 19
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <uart_getchar+0xac>
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <uart_getchar+0xa4>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <uart_getchar+0x182>
     9ee:	98 30       	cpi	r25, 0x08	; 8
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <uart_getchar+0xaa>
     9f2:	bb cf       	rjmp	.-138    	; 0x96a <uart_getchar+0x20>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <uart_getchar+0xbe>
     9f6:	97 31       	cpi	r25, 0x17	; 23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <uart_getchar+0xb2>
     9fa:	4b c0       	rjmp	.+150    	; 0xa92 <uart_getchar+0x148>
     9fc:	9f 37       	cpi	r25, 0x7F	; 127
     9fe:	21 f0       	breq	.+8      	; 0xa08 <uart_getchar+0xbe>
     a00:	95 31       	cpi	r25, 0x15	; 21
     a02:	09 f0       	breq	.+2      	; 0xa06 <uart_getchar+0xbc>
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <uart_getchar+0x20>
     a06:	32 c0       	rjmp	.+100    	; 0xa6c <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	00 39       	cpi	r16, 0x90	; 144
     a0c:	1f 07       	cpc	r17, r31
     a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_getchar+0xc8>
     a10:	08 f4       	brcc	.+2      	; 0xa14 <uart_getchar+0xca>
     a12:	ab cf       	rjmp	.-170    	; 0x96a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	10 40       	sbci	r17, 0x00	; 0
     a30:	9c cf       	rjmp	.-200    	; 0x96a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a3a:	c0 e9       	ldi	r28, 0x90	; 144
     a3c:	d1 e0       	ldi	r29, 0x01	; 1
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a40:	89 91       	ld	r24, Y+
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a48:	c0 17       	cp	r28, r16
     a4a:	d1 07       	cpc	r29, r17
     a4c:	c8 f3       	brcs	.-14     	; 0xa40 <uart_getchar+0xf6>
     a4e:	8d cf       	rjmp	.-230    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	00 39       	cpi	r16, 0x90	; 144
     a70:	18 07       	cpc	r17, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <uart_getchar+0x12c>
     a74:	68 f7       	brcc	.-38     	; 0xa50 <uart_getchar+0x106>
     a76:	79 cf       	rjmp	.-270    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a90:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a92:	e1 e0       	ldi	r30, 0x01	; 1
     a94:	00 39       	cpi	r16, 0x90	; 144
     a96:	1e 07       	cpc	r17, r30
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x152>
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <uart_getchar+0x154>
     a9c:	66 cf       	rjmp	.-308    	; 0x96a <uart_getchar+0x20>
     a9e:	e8 01       	movw	r28, r16
     aa0:	8a 91       	ld	r24, -Y
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	49 f7       	brne	.-46     	; 0xa78 <uart_getchar+0x12e>
     aa6:	61 cf       	rjmp	.-318    	; 0x96a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aa8:	e0 91 8e 01 	lds	r30, 0x018E
     aac:	f0 91 8f 01 	lds	r31, 0x018F
     ab0:	81 91       	ld	r24, Z+
     ab2:	f0 93 8f 01 	sts	0x018F, r31
     ab6:	e0 93 8e 01 	sts	0x018E, r30
  if (c == '\n')
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <uart_getchar+0x17c>
    rxp = 0;
     abe:	10 92 8f 01 	sts	0x018F, r1
     ac2:	10 92 8e 01 	sts	0x018E, r1

  return c;
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <uart_getchar+0x186>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad0:	c9 01       	movw	r24, r18
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <main>:
		k_d = val;
	else
		fprintf(stdout, "Command %c unrecognized\n", cmd);
}

int main(void) {
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17


  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     aec:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     af0:	68 e7       	ldi	r22, 0x78	; 120
     af2:	71 e0       	ldi	r23, 0x01	; 1
     af4:	70 93 11 03 	sts	0x0311, r23
     af8:	60 93 10 03 	sts	0x0310, r22
     afc:	70 93 0d 03 	sts	0x030D, r23
     b00:	60 93 0c 03 	sts	0x030C, r22
     b04:	70 93 0f 03 	sts	0x030F, r23
     b08:	60 93 0e 03 	sts	0x030E, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 91 19 	call	0x3322	; 0x3322 <fputs>
  
  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     b14:	80 e5       	ldi	r24, 0x50	; 80
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 5f 02 	call	0x4be	; 0x4be <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b1c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b1e:	10 92 f2 02 	sts	0x02F2, r1
  
  sei(); // set enabled interrupts;
     b22:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b24:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b26:	10 92 f3 02 	sts	0x02F3, r1
  
  sei(); // set enabled interrupts;
     b2a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b2c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
  
  sei(); // set enabled interrupts;
     b2e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b30:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
  
  sei(); // set enabled interrupts;
     b32:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b34:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
  
  sei(); // set enabled interrupts;
     b36:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     b38:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 f4 02 	sts	0x02F4, r24
  
  sei(); // set enabled interrupts;
     b40:	78 94       	sei
  trtCreateSemaphore(SEM_OMEGA_REF, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_OMEGA_REF, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_OMEGA_REF, 1) ; // protect shared variables

 // --- creat tasks  ----------------
  trtCreateTask(buttonComm, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     b42:	86 e3       	ldi	r24, 0x36	; 54
     b44:	96 e0       	ldi	r25, 0x06	; 6
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	2d e0       	ldi	r18, 0x0D	; 13
     b4c:	33 e0       	ldi	r19, 0x03	; 3
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	bd e0       	ldi	r27, 0x0D	; 13
     b54:	eb 2e       	mov	r14, r27
     b56:	b3 e0       	ldi	r27, 0x03	; 3
     b58:	fb 2e       	mov	r15, r27
     b5a:	01 2d       	mov	r16, r1
     b5c:	11 2d       	mov	r17, r1
     b5e:	ac ea       	ldi	r26, 0xAC	; 172
     b60:	ca 2e       	mov	r12, r26
     b62:	a2 e0       	ldi	r26, 0x02	; 2
     b64:	da 2e       	mov	r13, r26
     b66:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(serialComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     b6a:	87 ed       	ldi	r24, 0xD7	; 215
     b6c:	98 e0       	ldi	r25, 0x08	; 8
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	2a e1       	ldi	r18, 0x1A	; 26
     b74:	36 e0       	ldi	r19, 0x06	; 6
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	fa e1       	ldi	r31, 0x1A	; 26
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f6 e0       	ldi	r31, 0x06	; 6
     b80:	ff 2e       	mov	r15, r31
     b82:	01 2d       	mov	r16, r1
     b84:	11 2d       	mov	r17, r1
     b86:	ee ea       	ldi	r30, 0xAE	; 174
     b88:	ce 2e       	mov	r12, r30
     b8a:	e2 e0       	ldi	r30, 0x02	; 2
     b8c:	de 2e       	mov	r13, r30
     b8e:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(displayParams, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     b92:	83 eb       	ldi	r24, 0xB3	; 179
     b94:	96 e0       	ldi	r25, 0x06	; 6
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	2a e1       	ldi	r18, 0x1A	; 26
     b9c:	36 e0       	ldi	r19, 0x06	; 6
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	81 7f       	andi	r24, 0xF1	; 241
     baa:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     bac:	83 b7       	in	r24, 0x33	; 51
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
     bb2:	88 95       	sleep
     bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <main+0xd2>

00000bb6 <setParam>:
  LCDGotoXY(0,0);
}

// --- Main Program ----------------------------------

void setParam(uint8_t cmd, float val){
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	7a 01       	movw	r14, r20
     bc0:	8b 01       	movw	r16, r22
	cmd = tolower(cmd);
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <tolower>
     bc8:	28 2f       	mov	r18, r24
	if (cmd == 's')
     bca:	83 37       	cpi	r24, 0x73	; 115
     bcc:	49 f4       	brne	.+18     	; 0xbe0 <setParam+0x2a>
		omegaRef = val;
     bce:	c8 01       	movw	r24, r16
     bd0:	b7 01       	movw	r22, r14
     bd2:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixunssfsi>
     bd6:	70 93 06 03 	sts	0x0306, r23
     bda:	60 93 05 03 	sts	0x0305, r22
     bde:	41 c0       	rjmp	.+130    	; 0xc62 <setParam+0xac>
	else if (cmd == 'p')
     be0:	80 37       	cpi	r24, 0x70	; 112
     be2:	49 f4       	brne	.+18     	; 0xbf6 <setParam+0x40>
		k_p = val;		
     be4:	e0 92 07 03 	sts	0x0307, r14
     be8:	f0 92 08 03 	sts	0x0308, r15
     bec:	00 93 09 03 	sts	0x0309, r16
     bf0:	10 93 0a 03 	sts	0x030A, r17
     bf4:	36 c0       	rjmp	.+108    	; 0xc62 <setParam+0xac>
	else if (cmd == 'i')		
     bf6:	89 36       	cpi	r24, 0x69	; 105
     bf8:	49 f4       	brne	.+18     	; 0xc0c <setParam+0x56>
		k_i = val;
     bfa:	e0 92 b5 02 	sts	0x02B5, r14
     bfe:	f0 92 b6 02 	sts	0x02B6, r15
     c02:	00 93 b7 02 	sts	0x02B7, r16
     c06:	10 93 b8 02 	sts	0x02B8, r17
     c0a:	2b c0       	rjmp	.+86     	; 0xc62 <setParam+0xac>
	else if (cmd == 'd')
     c0c:	84 36       	cpi	r24, 0x64	; 100
     c0e:	49 f4       	brne	.+18     	; 0xc22 <setParam+0x6c>
		k_d = val;
     c10:	e0 92 b0 02 	sts	0x02B0, r14
     c14:	f0 92 b1 02 	sts	0x02B1, r15
     c18:	00 93 b2 02 	sts	0x02B2, r16
     c1c:	10 93 b3 02 	sts	0x02B3, r17
     c20:	20 c0       	rjmp	.+64     	; 0xc62 <setParam+0xac>
	else
		fprintf(stdout, "Command %c unrecognized\n", cmd);
     c22:	00 d0       	rcall	.+0      	; 0xc24 <setParam+0x6e>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <setParam+0x70>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <setParam+0x72>
     c28:	ed b7       	in	r30, 0x3d	; 61
     c2a:	fe b7       	in	r31, 0x3e	; 62
     c2c:	31 96       	adiw	r30, 0x01	; 1
     c2e:	80 91 0e 03 	lds	r24, 0x030E
     c32:	90 91 0f 03 	lds	r25, 0x030F
     c36:	ad b7       	in	r26, 0x3d	; 61
     c38:	be b7       	in	r27, 0x3e	; 62
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	84 e1       	ldi	r24, 0x14	; 20
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	93 83       	std	Z+3, r25	; 0x03
     c48:	82 83       	std	Z+2, r24	; 0x02
     c4a:	24 83       	std	Z+4, r18	; 0x04
     c4c:	15 82       	std	Z+5, r1	; 0x05
     c4e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <fprintf>
     c52:	8d b7       	in	r24, 0x3d	; 61
     c54:	9e b7       	in	r25, 0x3e	; 62
     c56:	06 96       	adiw	r24, 0x06	; 6
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	9e bf       	out	0x3e, r25	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	8d bf       	out	0x3d, r24	; 61
}
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	08 95       	ret

00000c6c <buttonComm>:
void InitLCD(void);

//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void buttonComm(void* args) 
  {	
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
  	uint32_t rel, dead ;
	uint8_t sw, sw_num ;
	uint8_t sw_state ;

	sw_state = 0 ; // no buttons pushed
	DDRC = 0xff;    // led connections
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	87 b9       	out	0x07, r24	; 7
  	PORTC = 0xff;
     c80:	88 b9       	out	0x08, r24	; 8
	DDRA = 0x01 ;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	81 b9       	out	0x01, r24	; 1
     c86:	dd 24       	eor	r13, r13
	

	while(1)
	{
		PORTA =  PORTA ^ 0x01 ;
     c88:	cc 24       	eor	r12, r12
     c8a:	c3 94       	inc	r12
			while(sw>1)
			{
				sw = sw>>1; 
				sw_num++ ;
			}
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     c8c:	cd e2       	ldi	r28, 0x2D	; 45
     c8e:	d1 e0       	ldi	r29, 0x01	; 1
	DDRA = 0x01 ;
	

	while(1)
	{
		PORTA =  PORTA ^ 0x01 ;
     c90:	82 b1       	in	r24, 0x02	; 2
     c92:	8c 25       	eor	r24, r12
     c94:	82 b9       	out	0x02, r24	; 2
		// read the buttons
		// if a button is pushed,
		// latch on the corresponding LED
		sw = ~PINB ;
     c96:	83 b1       	in	r24, 0x03	; 3
     c98:	80 95       	com	r24
		//led = led | sw ;
		//PORTC = ~led ;
		//trtSignal(SEM_SHARED);
		
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
     c9a:	dd 20       	and	r13, r13
     c9c:	49 f5       	brne	.+82     	; 0xcf0 <buttonComm+0x84>
     c9e:	88 23       	and	r24, r24
     ca0:	69 f1       	breq	.+90     	; 0xcfc <buttonComm+0x90>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <buttonComm+0x3e>
		{
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
			{
				sw = sw>>1; 
     ca6:	86 95       	lsr	r24
				sw_num++ ;
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
		{
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	e1 f7       	brne	.-8      	; 0xca6 <buttonComm+0x3a>
			{
				sw = sw>>1; 
				sw_num++ ;
			}
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <buttonComm+0x44>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <buttonComm+0x46>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <buttonComm+0x48>
     cb4:	ed b7       	in	r30, 0x3d	; 61
     cb6:	fe b7       	in	r31, 0x3e	; 62
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	80 91 0e 03 	lds	r24, 0x030E
     cbe:	90 91 0f 03 	lds	r25, 0x030F
     cc2:	ad b7       	in	r26, 0x3d	; 61
     cc4:	be b7       	in	r27, 0x3e	; 62
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	9c 93       	st	X, r25
     cca:	8e 93       	st	-X, r24
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	d3 83       	std	Z+3, r29	; 0x03
     cd0:	c2 83       	std	Z+2, r28	; 0x02
     cd2:	24 83       	std	Z+4, r18	; 0x04
     cd4:	15 82       	std	Z+5, r1	; 0x05
     cd6:	0e 94 51 19 	call	0x32a2	; 0x32a2 <fprintf>
     cda:	dd 24       	eor	r13, r13
     cdc:	d3 94       	inc	r13
     cde:	8d b7       	in	r24, 0x3d	; 61
     ce0:	9e b7       	in	r25, 0x3e	; 62
     ce2:	06 96       	adiw	r24, 0x06	; 6
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	9e bf       	out	0x3e, r25	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	8d bf       	out	0x3d, r24	; 61
     cee:	06 c0       	rjmp	.+12     	; 0xcfc <buttonComm+0x90>
			sw_state = 1 ;
		}
		if (sw_state == 1 && sw==0) // button release?
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	d9 16       	cp	r13, r25
     cf4:	19 f4       	brne	.+6      	; 0xcfc <buttonComm+0x90>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <buttonComm+0x90>
     cfa:	dd 24       	eor	r13, r13
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     cfc:	20 91 fb 02 	lds	r18, 0x02FB
     d00:	30 91 fc 02 	lds	r19, 0x02FC
     d04:	40 91 fd 02 	lds	r20, 0x02FD
     d08:	50 91 fe 02 	lds	r21, 0x02FE
     d0c:	a9 01       	movw	r20, r18
     d0e:	33 27       	eor	r19, r19
     d10:	22 27       	eor	r18, r18
     d12:	60 91 84 00 	lds	r22, 0x0084
     d16:	70 91 85 00 	lds	r23, 0x0085
		// debouncer works well with 50 mSec sleep
		

	    rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.01);
	    trtSleepUntil(rel, dead);
     d1a:	e0 90 84 00 	lds	r14, 0x0084
     d1e:	f0 90 85 00 	lds	r15, 0x0085
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	62 0f       	add	r22, r18
     d28:	73 1f       	adc	r23, r19
     d2a:	84 1f       	adc	r24, r20
     d2c:	95 1f       	adc	r25, r21
     d2e:	64 56       	subi	r22, 0x64	; 100
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	8f 4f       	sbci	r24, 0xFF	; 255
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	2e 0d       	add	r18, r14
     d3c:	3f 1d       	adc	r19, r15
     d3e:	40 1f       	adc	r20, r16
     d40:	51 1f       	adc	r21, r17
     d42:	24 56       	subi	r18, 0x64	; 100
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
     d4e:	a0 cf       	rjmp	.-192    	; 0xc90 <buttonComm+0x24>

00000d50 <InitLCD>:
	}
}

// --- Initialize the LCD ----------------------------
void InitLCD(void){
  LCDinit();  //initialize the display
     d50:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCDinit>
  LCDcursorOFF();
     d54:	0e 94 87 0a 	call	0x150e	; 0x150e <LCDcursorOFF>
  LCDclr();        //clear the display
     d58:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCDclr>
  LCDGotoXY(0,0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
}
     d64:	08 95       	ret

00000d66 <displayParams>:
	}
  }

// --- spoiler ---------------------------------------
void displayParams(void* args) 
{
     d66:	2f 92       	push	r2
     d68:	3f 92       	push	r3
     d6a:	4f 92       	push	r4
     d6c:	5f 92       	push	r5
     d6e:	6f 92       	push	r6
     d70:	7f 92       	push	r7
     d72:	8f 92       	push	r8
     d74:	9f 92       	push	r9
     d76:	af 92       	push	r10
     d78:	bf 92       	push	r11
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	ac 97       	sbiw	r28, 0x2c	; 44
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
	//String constants
	const int8_t LCDSpeed[] = "SPEED: \0";
     d9a:	de 01       	movw	r26, r28
     d9c:	5d 96       	adiw	r26, 0x1d	; 29
     d9e:	e7 e4       	ldi	r30, 0x47	; 71
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	89 e0       	ldi	r24, 0x09	; 9
     da4:	01 90       	ld	r0, Z+
     da6:	0d 92       	st	X+, r0
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	e1 f7       	brne	.-8      	; 0xda4 <displayParams+0x3e>
	const int8_t LCDRPM[] = "RPM\0";
     dac:	de 01       	movw	r26, r28
     dae:	52 96       	adiw	r26, 0x12	; 18
     db0:	e0 e5       	ldi	r30, 0x50	; 80
     db2:	f1 e0       	ldi	r31, 0x01	; 1
     db4:	85 e0       	ldi	r24, 0x05	; 5
     db6:	01 90       	ld	r0, Z+
     db8:	0d 92       	st	X+, r0
     dba:	81 50       	subi	r24, 0x01	; 1
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <displayParams+0x50>
	const int8_t LCDZero[] = "0000\0";
     dbe:	de 01       	movw	r26, r28
     dc0:	57 96       	adiw	r26, 0x17	; 23
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	86 e0       	ldi	r24, 0x06	; 6
     dc8:	01 90       	ld	r0, Z+
     dca:	0d 92       	st	X+, r0
     dcc:	81 50       	subi	r24, 0x01	; 1
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <displayParams+0x62>
	uint8_t updateOmegaRef;
	uint8_t updatek_p;
	uint8_t updatek_i;
	uint8_t updatek_d;

	trtWait(SEM_OMEGA_REF);
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	int localOmegaRef = omegaRef;
     dd6:	c0 90 05 03 	lds	r12, 0x0305
     dda:	d0 90 06 03 	lds	r13, 0x0306
	trtSignal(SEM_OMEGA_REF);
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_P);
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_p = k_p;
     dea:	80 91 07 03 	lds	r24, 0x0307
     dee:	89 a7       	std	Y+41, r24	; 0x29
     df0:	90 91 08 03 	lds	r25, 0x0308
     df4:	9a a7       	std	Y+42, r25	; 0x2a
     df6:	a0 91 09 03 	lds	r26, 0x0309
     dfa:	ab a7       	std	Y+43, r26	; 0x2b
     dfc:	b0 91 0a 03 	lds	r27, 0x030A
     e00:	bc a7       	std	Y+44, r27	; 0x2c
	trtSignal(SEM_K_P);
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_I);
     e08:	85 e0       	ldi	r24, 0x05	; 5
     e0a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_i = k_i;
     e0e:	80 91 b5 02 	lds	r24, 0x02B5
     e12:	8f a3       	std	Y+39, r24	; 0x27
     e14:	90 91 b6 02 	lds	r25, 0x02B6
     e18:	98 a7       	std	Y+40, r25	; 0x28
     e1a:	20 90 b7 02 	lds	r2, 0x02B7
     e1e:	30 90 b8 02 	lds	r3, 0x02B8
	trtSignal(SEM_K_I);
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_D);
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_d = k_d;
     e2e:	40 90 b0 02 	lds	r4, 0x02B0
     e32:	50 90 b1 02 	lds	r5, 0x02B1
     e36:	60 90 b2 02 	lds	r6, 0x02B2
     e3a:	70 90 b3 02 	lds	r7, 0x02B3
	trtSignal(SEM_K_D);
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


	//initialize the LCD
	InitLCD();
     e44:	0e 94 a8 06 	call	0xd50	; 0xd50 <InitLCD>
	LCDGotoXY(0, 0);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
  	LCDstring(LCDSpeed, strlen(LCDSpeed));
     e50:	ce 01       	movw	r24, r28
     e52:	4d 96       	adiw	r24, 0x1d	; 29
     e54:	67 e0       	ldi	r22, 0x07	; 7
     e56:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
  	
	LCDGotoXY(OMEGA_LOC, 0);
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
	LCDstring(LCDZero, OMEGA_LEN);
     e62:	ce 01       	movw	r24, r28
     e64:	47 96       	adiw	r24, 0x17	; 23
     e66:	64 e0       	ldi	r22, 0x04	; 4
     e68:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>

	LCDGotoXY(RPM_LOC, 0);
     e6c:	8d e0       	ldi	r24, 0x0D	; 13
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
	LCDstring(LCDRPM, strlen(LCDRPM));
     e74:	ce 01       	movw	r24, r28
     e76:	42 96       	adiw	r24, 0x12	; 18
     e78:	63 e0       	ldi	r22, 0x03	; 3
     e7a:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
            LCDGotoXY(OMEGA_REF_LOC, 1);
            LCDstring(LCDOmegaRef, OMEGA_REF_LEN);
		}

		if (updatek_p){
			sprintf(LCDk_p, "%f", localk_p);
     e7e:	84 e4       	ldi	r24, 0x44	; 68
     e80:	88 2e       	mov	r8, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	98 2e       	mov	r9, r24
	uint32_t rel, dead ;
	//Update the LCD about 5 times a second
	while(1)
	{
		//Check if the reference speed has changed
		trtWait(SEM_OMEGA_REF);
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localOmegaRef != omegaRef){
     e8c:	80 91 05 03 	lds	r24, 0x0305
     e90:	90 91 06 03 	lds	r25, 0x0306
     e94:	c8 16       	cp	r12, r24
     e96:	d9 06       	cpc	r13, r25
     e98:	11 f4       	brne	.+4      	; 0xe9e <displayParams+0x138>
     e9a:	1e a2       	std	Y+38, r1	; 0x26
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <displayParams+0x13e>
			localOmegaRef = omegaRef;
     e9e:	6c 01       	movw	r12, r24
     ea0:	a1 e0       	ldi	r26, 0x01	; 1
     ea2:	ae a3       	std	Y+38, r26	; 0x26
			updateOmegaRef = 1;
		}
		else{
			updateOmegaRef = 0;
		}
		trtSignal(SEM_OMEGA_REF);
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the proportional gain has changed
		trtWait(SEM_K_P);
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_p != k_p) {
     eb0:	10 91 07 03 	lds	r17, 0x0307
     eb4:	00 91 08 03 	lds	r16, 0x0308
     eb8:	f0 90 09 03 	lds	r15, 0x0309
     ebc:	e0 90 0a 03 	lds	r14, 0x030A
     ec0:	69 a5       	ldd	r22, Y+41	; 0x29
     ec2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec8:	21 2f       	mov	r18, r17
     eca:	30 2f       	mov	r19, r16
     ecc:	4f 2d       	mov	r20, r15
     ece:	5e 2d       	mov	r21, r14
     ed0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__nesf2>
     ed4:	88 23       	and	r24, r24
     ed6:	39 f0       	breq	.+14     	; 0xee6 <displayParams+0x180>
     ed8:	19 a7       	std	Y+41, r17	; 0x29
     eda:	0a a7       	std	Y+42, r16	; 0x2a
     edc:	fb a6       	std	Y+43, r15	; 0x2b
     ede:	ec a6       	std	Y+44, r14	; 0x2c
     ee0:	aa 24       	eor	r10, r10
     ee2:	a3 94       	inc	r10
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <displayParams+0x182>
     ee6:	aa 24       	eor	r10, r10
			updatek_p = 1;
		}
		else{
			updatek_p = 0;
		}
		trtSignal(SEM_K_P);
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the integral gain has changed
		trtWait(SEM_K_I);
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_i != k_i) {
     ef4:	10 91 b5 02 	lds	r17, 0x02B5
     ef8:	00 91 b6 02 	lds	r16, 0x02B6
     efc:	f0 90 b7 02 	lds	r15, 0x02B7
     f00:	e0 90 b8 02 	lds	r14, 0x02B8
     f04:	6f a1       	ldd	r22, Y+39	; 0x27
     f06:	78 a5       	ldd	r23, Y+40	; 0x28
     f08:	c1 01       	movw	r24, r2
     f0a:	21 2f       	mov	r18, r17
     f0c:	30 2f       	mov	r19, r16
     f0e:	4f 2d       	mov	r20, r15
     f10:	5e 2d       	mov	r21, r14
     f12:	0e 94 c5 0c 	call	0x198a	; 0x198a <__nesf2>
     f16:	88 23       	and	r24, r24
     f18:	39 f0       	breq	.+14     	; 0xf28 <displayParams+0x1c2>
     f1a:	1f a3       	std	Y+39, r17	; 0x27
     f1c:	08 a7       	std	Y+40, r16	; 0x28
     f1e:	2f 2c       	mov	r2, r15
     f20:	3e 2c       	mov	r3, r14
     f22:	bb 24       	eor	r11, r11
     f24:	b3 94       	inc	r11
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <displayParams+0x1c4>
     f28:	bb 24       	eor	r11, r11
			updatek_i = 1;
		}
		else{
			updatek_i = 0;
		}
		trtSignal(SEM_K_I);
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the derivative gain has changed
		trtWait(SEM_K_D);
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_d != k_d) {
     f36:	e0 90 b0 02 	lds	r14, 0x02B0
     f3a:	10 91 b1 02 	lds	r17, 0x02B1
     f3e:	00 91 b2 02 	lds	r16, 0x02B2
     f42:	f0 90 b3 02 	lds	r15, 0x02B3
     f46:	b2 01       	movw	r22, r4
     f48:	c3 01       	movw	r24, r6
     f4a:	2e 2d       	mov	r18, r14
     f4c:	31 2f       	mov	r19, r17
     f4e:	40 2f       	mov	r20, r16
     f50:	5f 2d       	mov	r21, r15
     f52:	0e 94 c5 0c 	call	0x198a	; 0x198a <__nesf2>
     f56:	88 23       	and	r24, r24
     f58:	31 f0       	breq	.+12     	; 0xf66 <displayParams+0x200>
     f5a:	4e 2c       	mov	r4, r14
     f5c:	51 2e       	mov	r5, r17
     f5e:	60 2e       	mov	r6, r16
     f60:	7f 2c       	mov	r7, r15
     f62:	11 e0       	ldi	r17, 0x01	; 1
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <displayParams+0x202>
     f66:	10 e0       	ldi	r17, 0x00	; 0
			updatek_d = 1;	
		}
		else{
			updatek_d = 0;
		}
		trtSignal(SEM_K_D);
     f68:	86 e0       	ldi	r24, 0x06	; 6
     f6a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


		//Update the LCD
		if (updateOmegaRef){
     f6e:	be a1       	ldd	r27, Y+38	; 0x26
     f70:	bb 23       	and	r27, r27
     f72:	49 f1       	breq	.+82     	; 0xfc6 <displayParams+0x260>
			sprintf(LCDOmegaRef, "%i", localOmegaRef);
     f74:	00 d0       	rcall	.+0      	; 0xf76 <displayParams+0x210>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <displayParams+0x212>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <displayParams+0x214>
     f7a:	ed b7       	in	r30, 0x3d	; 61
     f7c:	fe b7       	in	r31, 0x3e	; 62
     f7e:	31 96       	adiw	r30, 0x01	; 1
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	8c 0f       	add	r24, r28
     f86:	9d 1f       	adc	r25, r29
     f88:	ad b7       	in	r26, 0x3d	; 61
     f8a:	be b7       	in	r27, 0x3e	; 62
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	11 97       	sbiw	r26, 0x01	; 1
     f94:	a1 e4       	ldi	r26, 0x41	; 65
     f96:	b1 e0       	ldi	r27, 0x01	; 1
     f98:	b3 83       	std	Z+3, r27	; 0x03
     f9a:	a2 83       	std	Z+2, r26	; 0x02
     f9c:	d5 82       	std	Z+5, r13	; 0x05
     f9e:	c4 82       	std	Z+4, r12	; 0x04
     fa0:	0e 94 ce 19 	call	0x339c	; 0x339c <sprintf>
            LCDGotoXY(OMEGA_REF_LOC, 1);
     fa4:	8d b7       	in	r24, 0x3d	; 61
     fa6:	9e b7       	in	r25, 0x3e	; 62
     fa8:	06 96       	adiw	r24, 0x06	; 6
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	9e bf       	out	0x3e, r25	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	8d bf       	out	0x3d, r24	; 61
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
            LCDstring(LCDOmegaRef, OMEGA_REF_LEN);
     fbc:	ce 01       	movw	r24, r28
     fbe:	0a 96       	adiw	r24, 0x0a	; 10
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
		}

		if (updatek_p){
     fc6:	aa 20       	and	r10, r10
     fc8:	81 f1       	breq	.+96     	; 0x102a <displayParams+0x2c4>
			sprintf(LCDk_p, "%f", localk_p);
     fca:	ad b7       	in	r26, 0x3d	; 61
     fcc:	be b7       	in	r27, 0x3e	; 62
     fce:	18 97       	sbiw	r26, 0x08	; 8
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	be bf       	out	0x3e, r27	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	ad bf       	out	0x3d, r26	; 61
     fda:	ed b7       	in	r30, 0x3d	; 61
     fdc:	fe b7       	in	r31, 0x3e	; 62
     fde:	31 96       	adiw	r30, 0x01	; 1
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	8c 0f       	add	r24, r28
     fe6:	9d 1f       	adc	r25, r29
     fe8:	12 96       	adiw	r26, 0x02	; 2
     fea:	9c 93       	st	X, r25
     fec:	8e 93       	st	-X, r24
     fee:	11 97       	sbiw	r26, 0x01	; 1
     ff0:	93 82       	std	Z+3, r9	; 0x03
     ff2:	82 82       	std	Z+2, r8	; 0x02
     ff4:	89 a5       	ldd	r24, Y+41	; 0x29
     ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff8:	ab a5       	ldd	r26, Y+43	; 0x2b
     ffa:	bc a5       	ldd	r27, Y+44	; 0x2c
     ffc:	84 83       	std	Z+4, r24	; 0x04
     ffe:	95 83       	std	Z+5, r25	; 0x05
    1000:	a6 83       	std	Z+6, r26	; 0x06
    1002:	b7 83       	std	Z+7, r27	; 0x07
    1004:	0e 94 ce 19 	call	0x339c	; 0x339c <sprintf>
            LCDGotoXY(K_P_LOC, 1);
    1008:	ad b7       	in	r26, 0x3d	; 61
    100a:	be b7       	in	r27, 0x3e	; 62
    100c:	18 96       	adiw	r26, 0x08	; 8
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	be bf       	out	0x3e, r27	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	ad bf       	out	0x3d, r26	; 61
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
            LCDstring(LCDk_p, K_P_LEN);
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	63 e0       	ldi	r22, 0x03	; 3
    1026:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
		}

		if (updatek_i){
    102a:	bb 20       	and	r11, r11
    102c:	89 f1       	breq	.+98     	; 0x1090 <displayParams+0x32a>
			sprintf(LCDk_i, "%f", localk_i);
    102e:	8d b7       	in	r24, 0x3d	; 61
    1030:	9e b7       	in	r25, 0x3e	; 62
    1032:	08 97       	sbiw	r24, 0x08	; 8
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	9e bf       	out	0x3e, r25	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	8d bf       	out	0x3d, r24	; 61
    103e:	ed b7       	in	r30, 0x3d	; 61
    1040:	fe b7       	in	r31, 0x3e	; 62
    1042:	31 96       	adiw	r30, 0x01	; 1
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	8c 0f       	add	r24, r28
    104a:	9d 1f       	adc	r25, r29
    104c:	ad b7       	in	r26, 0x3d	; 61
    104e:	be b7       	in	r27, 0x3e	; 62
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	9c 93       	st	X, r25
    1054:	8e 93       	st	-X, r24
    1056:	11 97       	sbiw	r26, 0x01	; 1
    1058:	93 82       	std	Z+3, r9	; 0x03
    105a:	82 82       	std	Z+2, r8	; 0x02
    105c:	8f a1       	ldd	r24, Y+39	; 0x27
    105e:	98 a5       	ldd	r25, Y+40	; 0x28
    1060:	d1 01       	movw	r26, r2
    1062:	84 83       	std	Z+4, r24	; 0x04
    1064:	95 83       	std	Z+5, r25	; 0x05
    1066:	a6 83       	std	Z+6, r26	; 0x06
    1068:	b7 83       	std	Z+7, r27	; 0x07
    106a:	0e 94 ce 19 	call	0x339c	; 0x339c <sprintf>
            LCDGotoXY(K_I_LOC, 1);
    106e:	ad b7       	in	r26, 0x3d	; 61
    1070:	be b7       	in	r27, 0x3e	; 62
    1072:	18 96       	adiw	r26, 0x08	; 8
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	be bf       	out	0x3e, r27	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	ad bf       	out	0x3d, r26	; 61
    107e:	89 e0       	ldi	r24, 0x09	; 9
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
            LCDstring(LCDk_i, K_I_LEN);
    1086:	ce 01       	movw	r24, r28
    1088:	04 96       	adiw	r24, 0x04	; 4
    108a:	63 e0       	ldi	r22, 0x03	; 3
    108c:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
		}

		if (updatek_d){
    1090:	11 23       	and	r17, r17
    1092:	81 f1       	breq	.+96     	; 0x10f4 <displayParams+0x38e>
			sprintf(LCDk_d, "%f", localk_d);
    1094:	8d b7       	in	r24, 0x3d	; 61
    1096:	9e b7       	in	r25, 0x3e	; 62
    1098:	08 97       	sbiw	r24, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	9e bf       	out	0x3e, r25	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	8d bf       	out	0x3d, r24	; 61
    10a4:	ed b7       	in	r30, 0x3d	; 61
    10a6:	fe b7       	in	r31, 0x3e	; 62
    10a8:	31 96       	adiw	r30, 0x01	; 1
    10aa:	87 e0       	ldi	r24, 0x07	; 7
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	8c 0f       	add	r24, r28
    10b0:	9d 1f       	adc	r25, r29
    10b2:	ad b7       	in	r26, 0x3d	; 61
    10b4:	be b7       	in	r27, 0x3e	; 62
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	9c 93       	st	X, r25
    10ba:	8e 93       	st	-X, r24
    10bc:	11 97       	sbiw	r26, 0x01	; 1
    10be:	93 82       	std	Z+3, r9	; 0x03
    10c0:	82 82       	std	Z+2, r8	; 0x02
    10c2:	c2 01       	movw	r24, r4
    10c4:	d3 01       	movw	r26, r6
    10c6:	84 83       	std	Z+4, r24	; 0x04
    10c8:	95 83       	std	Z+5, r25	; 0x05
    10ca:	a6 83       	std	Z+6, r26	; 0x06
    10cc:	b7 83       	std	Z+7, r27	; 0x07
    10ce:	0e 94 ce 19 	call	0x339c	; 0x339c <sprintf>
            LCDGotoXY(K_D_LOC, 1);
    10d2:	ad b7       	in	r26, 0x3d	; 61
    10d4:	be b7       	in	r27, 0x3e	; 62
    10d6:	18 96       	adiw	r26, 0x08	; 8
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	be bf       	out	0x3e, r27	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	ad bf       	out	0x3d, r26	; 61
    10e2:	8d e0       	ldi	r24, 0x0D	; 13
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
            LCDstring(LCDk_d, K_D_LEN);
    10ea:	ce 01       	movw	r24, r28
    10ec:	07 96       	adiw	r24, 0x07	; 7
    10ee:	63 e0       	ldi	r22, 0x03	; 3
    10f0:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
		}

		trtWait(SEM_OMEGA);
    10f4:	87 e0       	ldi	r24, 0x07	; 7
    10f6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		sprintf(LCDOmega, "%i", omega);
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <displayParams+0x396>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <displayParams+0x398>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <__stack+0x1>
    1100:	ed b7       	in	r30, 0x3d	; 61
    1102:	fe b7       	in	r31, 0x3e	; 62
    1104:	31 96       	adiw	r30, 0x01	; 1
    1106:	8e e0       	ldi	r24, 0x0E	; 14
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	8c 0f       	add	r24, r28
    110c:	9d 1f       	adc	r25, r29
    110e:	ad b7       	in	r26, 0x3d	; 61
    1110:	be b7       	in	r27, 0x3e	; 62
    1112:	12 96       	adiw	r26, 0x02	; 2
    1114:	9c 93       	st	X, r25
    1116:	8e 93       	st	-X, r24
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	a1 e4       	ldi	r26, 0x41	; 65
    111c:	b1 e0       	ldi	r27, 0x01	; 1
    111e:	b3 83       	std	Z+3, r27	; 0x03
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	80 91 03 03 	lds	r24, 0x0303
    1126:	90 91 04 03 	lds	r25, 0x0304
    112a:	95 83       	std	Z+5, r25	; 0x05
    112c:	84 83       	std	Z+4, r24	; 0x04
    112e:	0e 94 ce 19 	call	0x339c	; 0x339c <sprintf>
		LCDGotoXY(OMEGA_LOC, 0);
    1132:	8d b7       	in	r24, 0x3d	; 61
    1134:	9e b7       	in	r25, 0x3e	; 62
    1136:	06 96       	adiw	r24, 0x06	; 6
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	9e bf       	out	0x3e, r25	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	8d bf       	out	0x3d, r24	; 61
    1142:	87 e0       	ldi	r24, 0x07	; 7
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
		LCDstring(LCDOmega, OMEGA_LEN);
    114a:	ce 01       	movw	r24, r28
    114c:	0e 96       	adiw	r24, 0x0e	; 14
    114e:	64 e0       	ldi	r22, 0x04	; 4
    1150:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCDstring>
		trtSignal(SEM_OMEGA);
    1154:	87 e0       	ldi	r24, 0x07	; 7
    1156:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
    115a:	20 91 fb 02 	lds	r18, 0x02FB
    115e:	30 91 fc 02 	lds	r19, 0x02FC
    1162:	40 91 fd 02 	lds	r20, 0x02FD
    1166:	50 91 fe 02 	lds	r21, 0x02FE
    116a:	a9 01       	movw	r20, r18
    116c:	33 27       	eor	r19, r19
    116e:	22 27       	eor	r18, r18
    1170:	60 91 84 00 	lds	r22, 0x0084
    1174:	70 91 85 00 	lds	r23, 0x0085

		rel = trtCurrentTime() + SECONDS2TICKS(0.1);
		dead = trtCurrentTime() + SECONDS2TICKS(0.2);
		trtSleepUntil(rel, dead);
    1178:	e0 90 84 00 	lds	r14, 0x0084
    117c:	f0 90 85 00 	lds	r15, 0x0085
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	62 0f       	add	r22, r18
    1186:	73 1f       	adc	r23, r19
    1188:	84 1f       	adc	r24, r20
    118a:	95 1f       	adc	r25, r21
    118c:	66 5e       	subi	r22, 0xE6	; 230
    118e:	79 4f       	sbci	r23, 0xF9	; 249
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	00 e0       	ldi	r16, 0x00	; 0
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	2e 0d       	add	r18, r14
    119a:	3f 1d       	adc	r19, r15
    119c:	40 1f       	adc	r20, r16
    119e:	51 1f       	adc	r21, r17
    11a0:	2b 5c       	subi	r18, 0xCB	; 203
    11a2:	33 4f       	sbci	r19, 0xF3	; 243
    11a4:	4f 4f       	sbci	r20, 0xFF	; 255
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
    11ac:	6c ce       	rjmp	.-808    	; 0xe86 <displayParams+0x120>

000011ae <serialComm>:


//read the commands from the user
// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  {
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <serialComm+0x12>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <serialComm+0x14>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%c %f", &cmd, &val);
    11c8:	9b e5       	ldi	r25, 0x5B	; 91
    11ca:	c9 2e       	mov	r12, r25
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	d9 2e       	mov	r13, r25
    11d0:	7e 01       	movw	r14, r28
    11d2:	08 94       	sec
    11d4:	e1 1c       	adc	r14, r1
    11d6:	f1 1c       	adc	r15, r1
    11d8:	8e 01       	movw	r16, r28
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
		// 									set the proportional gain to val1
		//									set the integral gain to val2
		//									set the differential gain to val3
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
    11de:	60 91 0e 03 	lds	r22, 0x030E
    11e2:	70 91 0f 03 	lds	r23, 0x030F
    11e6:	8e e3       	ldi	r24, 0x3E	; 62
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%c %f", &cmd, &val);
    11ee:	8d b7       	in	r24, 0x3d	; 61
    11f0:	9e b7       	in	r25, 0x3e	; 62
    11f2:	08 97       	sbiw	r24, 0x08	; 8
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	9e bf       	out	0x3e, r25	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	8d bf       	out	0x3d, r24	; 61
    11fe:	ed b7       	in	r30, 0x3d	; 61
    1200:	fe b7       	in	r31, 0x3e	; 62
    1202:	31 96       	adiw	r30, 0x01	; 1
    1204:	80 91 0c 03 	lds	r24, 0x030C
    1208:	90 91 0d 03 	lds	r25, 0x030D
    120c:	ad b7       	in	r26, 0x3d	; 61
    120e:	be b7       	in	r27, 0x3e	; 62
    1210:	12 96       	adiw	r26, 0x02	; 2
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
    1216:	11 97       	sbiw	r26, 0x01	; 1
    1218:	d3 82       	std	Z+3, r13	; 0x03
    121a:	c2 82       	std	Z+2, r12	; 0x02
    121c:	f5 82       	std	Z+5, r15	; 0x05
    121e:	e4 82       	std	Z+4, r14	; 0x04
    1220:	17 83       	std	Z+7, r17	; 0x07
    1222:	06 83       	std	Z+6, r16	; 0x06
    1224:	0e 94 ba 19 	call	0x3374	; 0x3374 <fscanf>
		trtWait(SEM_STRING_DONE);
    1228:	8d b7       	in	r24, 0x3d	; 61
    122a:	9e b7       	in	r25, 0x3e	; 62
    122c:	08 96       	adiw	r24, 0x08	; 8
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	9e bf       	out	0x3e, r25	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	8d bf       	out	0x3d, r24	; 61
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>

		//if (cmd0 == 'a')
		//	fprintf(stdout, "OCAML: %d\n", valpoo);

		//update the parameters
		switch (cmd){
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	89 36       	cpi	r24, 0x69	; 105
    1242:	59 f1       	breq	.+86     	; 0x129a <serialComm+0xec>
    1244:	8a 36       	cpi	r24, 0x6A	; 106
    1246:	20 f4       	brcc	.+8      	; 0x1250 <serialComm+0xa2>
    1248:	84 36       	cpi	r24, 0x64	; 100
    124a:	09 f0       	breq	.+2      	; 0x124e <serialComm+0xa0>
    124c:	4a c0       	rjmp	.+148    	; 0x12e2 <serialComm+0x134>
    124e:	36 c0       	rjmp	.+108    	; 0x12bc <serialComm+0x10e>
    1250:	80 37       	cpi	r24, 0x70	; 112
    1252:	91 f0       	breq	.+36     	; 0x1278 <serialComm+0xca>
    1254:	83 37       	cpi	r24, 0x73	; 115
    1256:	09 f0       	breq	.+2      	; 0x125a <serialComm+0xac>
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <serialComm+0x134>
			case 's':
				trtWait(SEM_OMEGA_REF);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
				omegaRef = (int) val;
    1260:	6a 81       	ldd	r22, Y+2	; 0x02
    1262:	7b 81       	ldd	r23, Y+3	; 0x03
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
    126c:	70 93 06 03 	sts	0x0306, r23
    1270:	60 93 05 03 	sts	0x0305, r22
				trtSignal(SEM_OMEGA_REF);
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	32 c0       	rjmp	.+100    	; 0x12dc <serialComm+0x12e>
				break;
			case 'p':
				trtWait(SEM_K_P);
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
				k_p = val;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	ac 81       	ldd	r26, Y+4	; 0x04
    1284:	bd 81       	ldd	r27, Y+5	; 0x05
    1286:	80 93 07 03 	sts	0x0307, r24
    128a:	90 93 08 03 	sts	0x0308, r25
    128e:	a0 93 09 03 	sts	0x0309, r26
    1292:	b0 93 0a 03 	sts	0x030A, r27
				trtSignal(SEM_K_P);
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	21 c0       	rjmp	.+66     	; 0x12dc <serialComm+0x12e>
				break;
			case 'i':
				trtWait(SEM_K_I);
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
				k_i = val;
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	ac 81       	ldd	r26, Y+4	; 0x04
    12a6:	bd 81       	ldd	r27, Y+5	; 0x05
    12a8:	80 93 b5 02 	sts	0x02B5, r24
    12ac:	90 93 b6 02 	sts	0x02B6, r25
    12b0:	a0 93 b7 02 	sts	0x02B7, r26
    12b4:	b0 93 b8 02 	sts	0x02B8, r27
				trtSignal(SEM_K_I);
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	10 c0       	rjmp	.+32     	; 0x12dc <serialComm+0x12e>
				break;
			case 'd':
				trtWait(SEM_K_D);
    12bc:	86 e0       	ldi	r24, 0x06	; 6
    12be:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
				k_d = val;
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	ac 81       	ldd	r26, Y+4	; 0x04
    12c8:	bd 81       	ldd	r27, Y+5	; 0x05
    12ca:	80 93 b0 02 	sts	0x02B0, r24
    12ce:	90 93 b1 02 	sts	0x02B1, r25
    12d2:	a0 93 b2 02 	sts	0x02B2, r26
    12d6:	b0 93 b3 02 	sts	0x02B3, r27
				trtSignal(SEM_K_D);
    12da:	86 e0       	ldi	r24, 0x06	; 6
    12dc:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
    12e0:	7e cf       	rjmp	.-260    	; 0x11de <serialComm+0x30>
				break;
			default:
				fprintf(stdout, "Command not recognized");
    12e2:	60 91 0e 03 	lds	r22, 0x030E
    12e6:	70 91 0f 03 	lds	r23, 0x030F
    12ea:	81 e6       	ldi	r24, 0x61	; 97
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 91 19 	call	0x3322	; 0x3322 <fputs>
    12f2:	75 cf       	rjmp	.-278    	; 0x11de <serialComm+0x30>

000012f4 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    12f4:	28 2f       	mov	r18, r24
    12f6:	20 7f       	andi	r18, 0xF0	; 240
    12f8:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    12fa:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    12fc:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12fe:	20 ea       	ldi	r18, 0xA0	; 160
    1300:	3f e0       	ldi	r19, 0x0F	; 15
    1302:	f9 01       	movw	r30, r18
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    1308:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    130a:	40 98       	cbi	0x08, 0	; 8
    130c:	f9 01       	movw	r30, r18
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	44 e0       	ldi	r20, 0x04	; 4
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	4a 95       	dec	r20
    131c:	e1 f7       	brne	.-8      	; 0x1316 <LCDsendChar+0x22>
    131e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1320:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1322:	42 9a       	sbi	0x08, 2	; 8
    1324:	c9 01       	movw	r24, r18
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    132a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    132c:	40 98       	cbi	0x08, 0	; 8
    132e:	c9 01       	movw	r24, r18
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    1334:	08 95       	ret

00001336 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1336:	28 2f       	mov	r18, r24
    1338:	20 7f       	andi	r18, 0xF0	; 240
    133a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    133c:	42 9a       	sbi	0x08, 2	; 8
    133e:	20 ea       	ldi	r18, 0xA0	; 160
    1340:	3f e0       	ldi	r19, 0x0F	; 15
    1342:	f9 01       	movw	r30, r18
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1348:	42 98       	cbi	0x08, 2	; 8
    134a:	f9 01       	movw	r30, r18
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	54 e0       	ldi	r21, 0x04	; 4
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	5a 95       	dec	r21
    135a:	e1 f7       	brne	.-8      	; 0x1354 <LCDsendCommand+0x1e>
    135c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    135e:	42 9a       	sbi	0x08, 2	; 8
    1360:	c9 01       	movw	r24, r18
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1366:	42 98       	cbi	0x08, 2	; 8
    1368:	c9 01       	movw	r24, r18
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    136e:	08 95       	ret

00001370 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    1376:	08 95       	ret

00001378 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    137e:	08 95       	ret

00001380 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	49 f0       	breq	.+18     	; 0x13a0 <LCDstring+0x20>
    138e:	ec 01       	movw	r28, r24
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	04 c0       	rjmp	.+8      	; 0x139c <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1394:	89 91       	ld	r24, Y+
    1396:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    139a:	1f 5f       	subi	r17, 0xFF	; 255
    139c:	10 17       	cp	r17, r16
    139e:	d0 f3       	brcs	.-12     	; 0x1394 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    13aa:	62 30       	cpi	r22, 0x02	; 2
    13ac:	31 f0       	breq	.+12     	; 0x13ba <LCDGotoXY+0x10>
    13ae:	63 30       	cpi	r22, 0x03	; 3
    13b0:	31 f0       	breq	.+12     	; 0x13be <LCDGotoXY+0x14>
    13b2:	61 30       	cpi	r22, 0x01	; 1
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    13b6:	80 5c       	subi	r24, 0xC0	; 192
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    13ba:	8c 5e       	subi	r24, 0xEC	; 236
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    13be:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    13c0:	80 68       	ori	r24, 0x80	; 128
    13c2:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
	
}
    13c6:	08 95       	ret

000013c8 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	ec 01       	movw	r28, r24
    13d0:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    13d2:	64 2f       	mov	r22, r20
    13d4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCDGotoXY>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    13dc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    13e0:	1f 5f       	subi	r17, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	e1 0f       	add	r30, r17
    13e6:	f1 1d       	adc	r31, r1
    13e8:	84 91       	lpm	r24, Z+
    13ea:	88 23       	and	r24, r24
    13ec:	b9 f7       	brne	.-18     	; 0x13dc <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	08 95       	ret

000013f6 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	7c 01       	movw	r14, r24
    1404:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1406:	11 0f       	add	r17, r17
    1408:	11 0f       	add	r17, r17
    140a:	11 0f       	add	r17, r17
    140c:	10 64       	ori	r17, 0x40	; 64
    140e:	c0 e0       	ldi	r28, 0x00	; 0
    1410:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1412:	f7 01       	movw	r30, r14
    1414:	ec 0f       	add	r30, r28
    1416:	fd 1f       	adc	r31, r29
    1418:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    141a:	81 2f       	mov	r24, r17
    141c:	8c 0f       	add	r24, r28
    141e:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
		LCDsendChar(pcc);
    1422:	80 2f       	mov	r24, r16
    1424:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1428:	21 96       	adiw	r28, 0x01	; 1
    142a:	c8 30       	cpi	r28, 0x08	; 8
    142c:	d1 05       	cpc	r29, r1
    142e:	89 f7       	brne	.-30     	; 0x1412 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	80 e6       	ldi	r24, 0x60	; 96
    1446:	9a ee       	ldi	r25, 0xEA	; 234
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    144c:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    144e:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1450:	87 b1       	in	r24, 0x07	; 7
    1452:	80 6f       	ori	r24, 0xF0	; 240
    1454:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1456:	87 b1       	in	r24, 0x07	; 7
    1458:	87 60       	ori	r24, 0x07	; 7
    145a:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    145c:	80 e3       	ldi	r24, 0x30	; 48
    145e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1460:	42 9a       	sbi	0x08, 2	; 8
    1462:	20 ea       	ldi	r18, 0xA0	; 160
    1464:	3f e0       	ldi	r19, 0x0F	; 15
    1466:	f9 01       	movw	r30, r18
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    146c:	42 98       	cbi	0x08, 2	; 8
    146e:	f9 01       	movw	r30, r18
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1474:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1476:	42 9a       	sbi	0x08, 2	; 8
    1478:	c9 01       	movw	r24, r18
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    147e:	42 98       	cbi	0x08, 2	; 8
    1480:	c9 01       	movw	r24, r18
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1486:	80 e2       	ldi	r24, 0x20	; 32
    1488:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    148a:	42 9a       	sbi	0x08, 2	; 8
    148c:	c9 01       	movw	r24, r18
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1492:	42 98       	cbi	0x08, 2	; 8
    1494:	c9 01       	movw	r24, r18
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    149a:	88 e2       	ldi	r24, 0x28	; 40
    149c:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    14a0:	8c e0       	ldi	r24, 0x0C	; 12
    14a2:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
    14a6:	c5 ec       	ldi	r28, 0xC5	; 197
    14a8:	d0 e0       	ldi	r29, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    14ac:	16 2f       	mov	r17, r22
    14ae:	1f 5f       	subi	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <LCDdefinechar>
    14b6:	28 96       	adiw	r28, 0x08	; 8
    14b8:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    14ba:	18 30       	cpi	r17, 0x08	; 8
    14bc:	b9 f7       	brne	.-18     	; 0x14ac <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	08 95       	ret

000014c6 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	08 2f       	mov	r16, r24
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    14d0:	8e e1       	ldi	r24, 0x1E	; 30
    14d2:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    14d6:	1f 5f       	subi	r17, 0xFF	; 255
    14d8:	10 17       	cp	r17, r16
    14da:	d0 f3       	brcs	.-12     	; 0x14d0 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	08 2f       	mov	r16, r24
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    14ec:	88 e1       	ldi	r24, 0x18	; 24
    14ee:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    14f2:	1f 5f       	subi	r17, 0xFF	; 255
    14f4:	10 17       	cp	r17, r16
    14f6:	d0 f3       	brcs	.-12     	; 0x14ec <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    14fe:	8e e0       	ldi	r24, 0x0E	; 14
    1500:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    1504:	08 95       	ret

00001506 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1506:	8f e0       	ldi	r24, 0x0F	; 15
    1508:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    150c:	08 95       	ret

0000150e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    150e:	8c e0       	ldi	r24, 0x0C	; 12
    1510:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    1514:	08 95       	ret

00001516 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    151c:	08 95       	ret

0000151e <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    151e:	8c e0       	ldi	r24, 0x0C	; 12
    1520:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
}
    1524:	08 95       	ret

00001526 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	08 2f       	mov	r16, r24
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1530:	80 e1       	ldi	r24, 0x10	; 16
    1532:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1536:	1f 5f       	subi	r17, 0xFF	; 255
    1538:	10 17       	cp	r17, r16
    153a:	d0 f3       	brcs	.-12     	; 0x1530 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	08 2f       	mov	r16, r24
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    154c:	84 e1       	ldi	r24, 0x14	; 20
    154e:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1552:	1f 5f       	subi	r17, 0xFF	; 255
    1554:	10 17       	cp	r17, r16
    1556:	d0 f3       	brcs	.-12     	; 0x154c <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    156e:	96 e0       	ldi	r25, 0x06	; 6
    1570:	89 9f       	mul	r24, r25
    1572:	c0 01       	movw	r24, r0
    1574:	11 24       	eor	r1, r1
    1576:	24 2f       	mov	r18, r20
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	ac 01       	movw	r20, r24
    157c:	42 9f       	mul	r20, r18
    157e:	c0 01       	movw	r24, r0
    1580:	43 9f       	mul	r20, r19
    1582:	90 0d       	add	r25, r0
    1584:	52 9f       	mul	r21, r18
    1586:	90 0d       	add	r25, r0
    1588:	11 24       	eor	r1, r1
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodhi4>
    1590:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1592:	cb 01       	movw	r24, r22
    1594:	66 e0       	ldi	r22, 0x06	; 6
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__udivmodhi4>
    159c:	e8 2e       	mov	r14, r24
    159e:	ff 24       	eor	r15, r15
    15a0:	00 e0       	ldi	r16, 0x00	; 0
    15a2:	10 e0       	ldi	r17, 0x00	; 0
    15a4:	12 c0       	rjmp	.+36     	; 0x15ca <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    15a6:	c8 01       	movw	r24, r16
    15a8:	05 96       	adiw	r24, 0x05	; 5
    15aa:	c8 17       	cp	r28, r24
    15ac:	d9 07       	cpc	r29, r25
    15ae:	10 f0       	brcs	.+4      	; 0x15b4 <LCDprogressBar+0x56>
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    15b4:	c0 17       	cp	r28, r16
    15b6:	d1 07       	cpc	r29, r17
    15b8:	10 f0       	brcs	.+4      	; 0x15be <LCDprogressBar+0x60>
    15ba:	8e 2d       	mov	r24, r14
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <LCDprogressBar+0x62>
    15be:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    15c0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    15c4:	f3 94       	inc	r15
    15c6:	0a 5f       	subi	r16, 0xFA	; 250
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	fd 14       	cp	r15, r13
    15cc:	60 f3       	brcs	.-40     	; 0x15a6 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	08 95       	ret

000015de <__fixunssfsi>:
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	7b 01       	movw	r14, r22
    15e8:	8c 01       	movw	r16, r24
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	5f e4       	ldi	r21, 0x4F	; 79
    15f2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__gesf2>
    15f6:	88 23       	and	r24, r24
    15f8:	8c f0       	brlt	.+34     	; 0x161c <__fixunssfsi+0x3e>
    15fa:	c8 01       	movw	r24, r16
    15fc:	b7 01       	movw	r22, r14
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	5f e4       	ldi	r21, 0x4F	; 79
    1606:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
    160a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	20 50       	subi	r18, 0x00	; 0
    1614:	30 40       	sbci	r19, 0x00	; 0
    1616:	40 40       	sbci	r20, 0x00	; 0
    1618:	50 48       	sbci	r21, 0x80	; 128
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <__fixunssfsi+0x4a>
    161c:	c8 01       	movw	r24, r16
    161e:	b7 01       	movw	r22, r14
    1620:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fixsfsi>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	b9 01       	movw	r22, r18
    162a:	ca 01       	movw	r24, r20
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	08 95       	ret

00001636 <_fpadd_parts>:
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e1 e2       	ldi	r30, 0x21	; 33
    163c:	fb e0       	ldi	r31, 0x0B	; 11
    163e:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__>
    1642:	dc 01       	movw	r26, r24
    1644:	2b 01       	movw	r4, r22
    1646:	fa 01       	movw	r30, r20
    1648:	9c 91       	ld	r25, X
    164a:	92 30       	cpi	r25, 0x02	; 2
    164c:	08 f4       	brcc	.+2      	; 0x1650 <_fpadd_parts+0x1a>
    164e:	39 c1       	rjmp	.+626    	; 0x18c2 <_fpadd_parts+0x28c>
    1650:	eb 01       	movw	r28, r22
    1652:	88 81       	ld	r24, Y
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	08 f4       	brcc	.+2      	; 0x165a <_fpadd_parts+0x24>
    1658:	33 c1       	rjmp	.+614    	; 0x18c0 <_fpadd_parts+0x28a>
    165a:	94 30       	cpi	r25, 0x04	; 4
    165c:	69 f4       	brne	.+26     	; 0x1678 <_fpadd_parts+0x42>
    165e:	84 30       	cpi	r24, 0x04	; 4
    1660:	09 f0       	breq	.+2      	; 0x1664 <_fpadd_parts+0x2e>
    1662:	2f c1       	rjmp	.+606    	; 0x18c2 <_fpadd_parts+0x28c>
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	9c 91       	ld	r25, X
    1668:	11 97       	sbiw	r26, 0x01	; 1
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	98 17       	cp	r25, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <_fpadd_parts+0x3c>
    1670:	28 c1       	rjmp	.+592    	; 0x18c2 <_fpadd_parts+0x28c>
    1672:	a6 e8       	ldi	r26, 0x86	; 134
    1674:	b1 e0       	ldi	r27, 0x01	; 1
    1676:	25 c1       	rjmp	.+586    	; 0x18c2 <_fpadd_parts+0x28c>
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	09 f4       	brne	.+2      	; 0x167e <_fpadd_parts+0x48>
    167c:	21 c1       	rjmp	.+578    	; 0x18c0 <_fpadd_parts+0x28a>
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	a9 f4       	brne	.+42     	; 0x16ac <_fpadd_parts+0x76>
    1682:	92 30       	cpi	r25, 0x02	; 2
    1684:	09 f0       	breq	.+2      	; 0x1688 <_fpadd_parts+0x52>
    1686:	1d c1       	rjmp	.+570    	; 0x18c2 <_fpadd_parts+0x28c>
    1688:	9a 01       	movw	r18, r20
    168a:	ad 01       	movw	r20, r26
    168c:	88 e0       	ldi	r24, 0x08	; 8
    168e:	ea 01       	movw	r28, r20
    1690:	09 90       	ld	r0, Y+
    1692:	ae 01       	movw	r20, r28
    1694:	e9 01       	movw	r28, r18
    1696:	09 92       	st	Y+, r0
    1698:	9e 01       	movw	r18, r28
    169a:	81 50       	subi	r24, 0x01	; 1
    169c:	c1 f7       	brne	.-16     	; 0x168e <_fpadd_parts+0x58>
    169e:	e2 01       	movw	r28, r4
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	9c 91       	ld	r25, X
    16a6:	89 23       	and	r24, r25
    16a8:	81 83       	std	Z+1, r24	; 0x01
    16aa:	08 c1       	rjmp	.+528    	; 0x18bc <_fpadd_parts+0x286>
    16ac:	92 30       	cpi	r25, 0x02	; 2
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <_fpadd_parts+0x7c>
    16b0:	07 c1       	rjmp	.+526    	; 0x18c0 <_fpadd_parts+0x28a>
    16b2:	12 96       	adiw	r26, 0x02	; 2
    16b4:	2d 90       	ld	r2, X+
    16b6:	3c 90       	ld	r3, X
    16b8:	13 97       	sbiw	r26, 0x03	; 3
    16ba:	eb 01       	movw	r28, r22
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	14 96       	adiw	r26, 0x04	; 4
    16c2:	ad 90       	ld	r10, X+
    16c4:	bd 90       	ld	r11, X+
    16c6:	cd 90       	ld	r12, X+
    16c8:	dc 90       	ld	r13, X
    16ca:	17 97       	sbiw	r26, 0x07	; 7
    16cc:	ec 80       	ldd	r14, Y+4	; 0x04
    16ce:	fd 80       	ldd	r15, Y+5	; 0x05
    16d0:	0e 81       	ldd	r16, Y+6	; 0x06
    16d2:	1f 81       	ldd	r17, Y+7	; 0x07
    16d4:	91 01       	movw	r18, r2
    16d6:	28 1b       	sub	r18, r24
    16d8:	39 0b       	sbc	r19, r25
    16da:	b9 01       	movw	r22, r18
    16dc:	37 ff       	sbrs	r19, 7
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <_fpadd_parts+0xb2>
    16e0:	66 27       	eor	r22, r22
    16e2:	77 27       	eor	r23, r23
    16e4:	62 1b       	sub	r22, r18
    16e6:	73 0b       	sbc	r23, r19
    16e8:	60 32       	cpi	r22, 0x20	; 32
    16ea:	71 05       	cpc	r23, r1
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <_fpadd_parts+0xba>
    16ee:	61 c0       	rjmp	.+194    	; 0x17b2 <_fpadd_parts+0x17c>
    16f0:	12 16       	cp	r1, r18
    16f2:	13 06       	cpc	r1, r19
    16f4:	6c f5       	brge	.+90     	; 0x1750 <_fpadd_parts+0x11a>
    16f6:	37 01       	movw	r6, r14
    16f8:	48 01       	movw	r8, r16
    16fa:	06 2e       	mov	r0, r22
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <_fpadd_parts+0xd0>
    16fe:	96 94       	lsr	r9
    1700:	87 94       	ror	r8
    1702:	77 94       	ror	r7
    1704:	67 94       	ror	r6
    1706:	0a 94       	dec	r0
    1708:	d2 f7       	brpl	.-12     	; 0x16fe <_fpadd_parts+0xc8>
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	04 c0       	rjmp	.+8      	; 0x171c <_fpadd_parts+0xe6>
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	44 1f       	adc	r20, r20
    171a:	55 1f       	adc	r21, r21
    171c:	6a 95       	dec	r22
    171e:	d2 f7       	brpl	.-12     	; 0x1714 <_fpadd_parts+0xde>
    1720:	21 50       	subi	r18, 0x01	; 1
    1722:	30 40       	sbci	r19, 0x00	; 0
    1724:	40 40       	sbci	r20, 0x00	; 0
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	2e 21       	and	r18, r14
    172a:	3f 21       	and	r19, r15
    172c:	40 23       	and	r20, r16
    172e:	51 23       	and	r21, r17
    1730:	21 15       	cp	r18, r1
    1732:	31 05       	cpc	r19, r1
    1734:	41 05       	cpc	r20, r1
    1736:	51 05       	cpc	r21, r1
    1738:	21 f0       	breq	.+8      	; 0x1742 <_fpadd_parts+0x10c>
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	79 01       	movw	r14, r18
    1744:	8a 01       	movw	r16, r20
    1746:	e6 28       	or	r14, r6
    1748:	f7 28       	or	r15, r7
    174a:	08 29       	or	r16, r8
    174c:	19 29       	or	r17, r9
    174e:	3c c0       	rjmp	.+120    	; 0x17c8 <_fpadd_parts+0x192>
    1750:	23 2b       	or	r18, r19
    1752:	d1 f1       	breq	.+116    	; 0x17c8 <_fpadd_parts+0x192>
    1754:	26 0e       	add	r2, r22
    1756:	37 1e       	adc	r3, r23
    1758:	35 01       	movw	r6, r10
    175a:	46 01       	movw	r8, r12
    175c:	06 2e       	mov	r0, r22
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <_fpadd_parts+0x132>
    1760:	96 94       	lsr	r9
    1762:	87 94       	ror	r8
    1764:	77 94       	ror	r7
    1766:	67 94       	ror	r6
    1768:	0a 94       	dec	r0
    176a:	d2 f7       	brpl	.-12     	; 0x1760 <_fpadd_parts+0x12a>
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	04 c0       	rjmp	.+8      	; 0x177e <_fpadd_parts+0x148>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	44 1f       	adc	r20, r20
    177c:	55 1f       	adc	r21, r21
    177e:	6a 95       	dec	r22
    1780:	d2 f7       	brpl	.-12     	; 0x1776 <_fpadd_parts+0x140>
    1782:	21 50       	subi	r18, 0x01	; 1
    1784:	30 40       	sbci	r19, 0x00	; 0
    1786:	40 40       	sbci	r20, 0x00	; 0
    1788:	50 40       	sbci	r21, 0x00	; 0
    178a:	2a 21       	and	r18, r10
    178c:	3b 21       	and	r19, r11
    178e:	4c 21       	and	r20, r12
    1790:	5d 21       	and	r21, r13
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	41 05       	cpc	r20, r1
    1798:	51 05       	cpc	r21, r1
    179a:	21 f0       	breq	.+8      	; 0x17a4 <_fpadd_parts+0x16e>
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	59 01       	movw	r10, r18
    17a6:	6a 01       	movw	r12, r20
    17a8:	a6 28       	or	r10, r6
    17aa:	b7 28       	or	r11, r7
    17ac:	c8 28       	or	r12, r8
    17ae:	d9 28       	or	r13, r9
    17b0:	0b c0       	rjmp	.+22     	; 0x17c8 <_fpadd_parts+0x192>
    17b2:	82 15       	cp	r24, r2
    17b4:	93 05       	cpc	r25, r3
    17b6:	2c f0       	brlt	.+10     	; 0x17c2 <_fpadd_parts+0x18c>
    17b8:	1c 01       	movw	r2, r24
    17ba:	aa 24       	eor	r10, r10
    17bc:	bb 24       	eor	r11, r11
    17be:	65 01       	movw	r12, r10
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <_fpadd_parts+0x192>
    17c2:	ee 24       	eor	r14, r14
    17c4:	ff 24       	eor	r15, r15
    17c6:	87 01       	movw	r16, r14
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	9c 91       	ld	r25, X
    17cc:	d2 01       	movw	r26, r4
    17ce:	11 96       	adiw	r26, 0x01	; 1
    17d0:	8c 91       	ld	r24, X
    17d2:	98 17       	cp	r25, r24
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <_fpadd_parts+0x1a2>
    17d6:	45 c0       	rjmp	.+138    	; 0x1862 <_fpadd_parts+0x22c>
    17d8:	99 23       	and	r25, r25
    17da:	39 f0       	breq	.+14     	; 0x17ea <_fpadd_parts+0x1b4>
    17dc:	a8 01       	movw	r20, r16
    17de:	97 01       	movw	r18, r14
    17e0:	2a 19       	sub	r18, r10
    17e2:	3b 09       	sbc	r19, r11
    17e4:	4c 09       	sbc	r20, r12
    17e6:	5d 09       	sbc	r21, r13
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <_fpadd_parts+0x1c0>
    17ea:	a6 01       	movw	r20, r12
    17ec:	95 01       	movw	r18, r10
    17ee:	2e 19       	sub	r18, r14
    17f0:	3f 09       	sbc	r19, r15
    17f2:	40 0b       	sbc	r20, r16
    17f4:	51 0b       	sbc	r21, r17
    17f6:	57 fd       	sbrc	r21, 7
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <_fpadd_parts+0x1d4>
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	33 82       	std	Z+3, r3	; 0x03
    17fe:	22 82       	std	Z+2, r2	; 0x02
    1800:	24 83       	std	Z+4, r18	; 0x04
    1802:	35 83       	std	Z+5, r19	; 0x05
    1804:	46 83       	std	Z+6, r20	; 0x06
    1806:	57 83       	std	Z+7, r21	; 0x07
    1808:	1d c0       	rjmp	.+58     	; 0x1844 <_fpadd_parts+0x20e>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	81 83       	std	Z+1, r24	; 0x01
    180e:	33 82       	std	Z+3, r3	; 0x03
    1810:	22 82       	std	Z+2, r2	; 0x02
    1812:	88 27       	eor	r24, r24
    1814:	99 27       	eor	r25, r25
    1816:	dc 01       	movw	r26, r24
    1818:	82 1b       	sub	r24, r18
    181a:	93 0b       	sbc	r25, r19
    181c:	a4 0b       	sbc	r26, r20
    181e:	b5 0b       	sbc	r27, r21
    1820:	84 83       	std	Z+4, r24	; 0x04
    1822:	95 83       	std	Z+5, r25	; 0x05
    1824:	a6 83       	std	Z+6, r26	; 0x06
    1826:	b7 83       	std	Z+7, r27	; 0x07
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <_fpadd_parts+0x20e>
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	44 1f       	adc	r20, r20
    1830:	55 1f       	adc	r21, r21
    1832:	24 83       	std	Z+4, r18	; 0x04
    1834:	35 83       	std	Z+5, r19	; 0x05
    1836:	46 83       	std	Z+6, r20	; 0x06
    1838:	57 83       	std	Z+7, r21	; 0x07
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	93 83       	std	Z+3, r25	; 0x03
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	24 81       	ldd	r18, Z+4	; 0x04
    1846:	35 81       	ldd	r19, Z+5	; 0x05
    1848:	46 81       	ldd	r20, Z+6	; 0x06
    184a:	57 81       	ldd	r21, Z+7	; 0x07
    184c:	da 01       	movw	r26, r20
    184e:	c9 01       	movw	r24, r18
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	a1 09       	sbc	r26, r1
    1854:	b1 09       	sbc	r27, r1
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	af 4f       	sbci	r26, 0xFF	; 255
    185c:	bf 43       	sbci	r27, 0x3F	; 63
    185e:	28 f3       	brcs	.-54     	; 0x182a <_fpadd_parts+0x1f4>
    1860:	0b c0       	rjmp	.+22     	; 0x1878 <_fpadd_parts+0x242>
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	33 82       	std	Z+3, r3	; 0x03
    1866:	22 82       	std	Z+2, r2	; 0x02
    1868:	ea 0c       	add	r14, r10
    186a:	fb 1c       	adc	r15, r11
    186c:	0c 1d       	adc	r16, r12
    186e:	1d 1d       	adc	r17, r13
    1870:	e4 82       	std	Z+4, r14	; 0x04
    1872:	f5 82       	std	Z+5, r15	; 0x05
    1874:	06 83       	std	Z+6, r16	; 0x06
    1876:	17 83       	std	Z+7, r17	; 0x07
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	80 83       	st	Z, r24
    187c:	24 81       	ldd	r18, Z+4	; 0x04
    187e:	35 81       	ldd	r19, Z+5	; 0x05
    1880:	46 81       	ldd	r20, Z+6	; 0x06
    1882:	57 81       	ldd	r21, Z+7	; 0x07
    1884:	57 ff       	sbrs	r21, 7
    1886:	1a c0       	rjmp	.+52     	; 0x18bc <_fpadd_parts+0x286>
    1888:	c9 01       	movw	r24, r18
    188a:	aa 27       	eor	r26, r26
    188c:	97 fd       	sbrc	r25, 7
    188e:	a0 95       	com	r26
    1890:	ba 2f       	mov	r27, r26
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	a0 70       	andi	r26, 0x00	; 0
    1898:	b0 70       	andi	r27, 0x00	; 0
    189a:	56 95       	lsr	r21
    189c:	47 95       	ror	r20
    189e:	37 95       	ror	r19
    18a0:	27 95       	ror	r18
    18a2:	82 2b       	or	r24, r18
    18a4:	93 2b       	or	r25, r19
    18a6:	a4 2b       	or	r26, r20
    18a8:	b5 2b       	or	r27, r21
    18aa:	84 83       	std	Z+4, r24	; 0x04
    18ac:	95 83       	std	Z+5, r25	; 0x05
    18ae:	a6 83       	std	Z+6, r26	; 0x06
    18b0:	b7 83       	std	Z+7, r27	; 0x07
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	93 81       	ldd	r25, Z+3	; 0x03
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	93 83       	std	Z+3, r25	; 0x03
    18ba:	82 83       	std	Z+2, r24	; 0x02
    18bc:	df 01       	movw	r26, r30
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <_fpadd_parts+0x28c>
    18c0:	d2 01       	movw	r26, r4
    18c2:	cd 01       	movw	r24, r26
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	e2 e1       	ldi	r30, 0x12	; 18
    18ca:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__>

000018ce <__subsf3>:
    18ce:	a0 e2       	ldi	r26, 0x20	; 32
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ed e6       	ldi	r30, 0x6D	; 109
    18d4:	fc e0       	ldi	r31, 0x0C	; 12
    18d6:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__prologue_saves__+0x18>
    18da:	69 83       	std	Y+1, r22	; 0x01
    18dc:	7a 83       	std	Y+2, r23	; 0x02
    18de:	8b 83       	std	Y+3, r24	; 0x03
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	2d 83       	std	Y+5, r18	; 0x05
    18e4:	3e 83       	std	Y+6, r19	; 0x06
    18e6:	4f 83       	std	Y+7, r20	; 0x07
    18e8:	58 87       	std	Y+8, r21	; 0x08
    18ea:	e9 e0       	ldi	r30, 0x09	; 9
    18ec:	ee 2e       	mov	r14, r30
    18ee:	f1 2c       	mov	r15, r1
    18f0:	ec 0e       	add	r14, r28
    18f2:	fd 1e       	adc	r15, r29
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	b7 01       	movw	r22, r14
    18fa:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    18fe:	8e 01       	movw	r16, r28
    1900:	0f 5e       	subi	r16, 0xEF	; 239
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	ce 01       	movw	r24, r28
    1906:	05 96       	adiw	r24, 0x05	; 5
    1908:	b8 01       	movw	r22, r16
    190a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    190e:	8a 89       	ldd	r24, Y+18	; 0x12
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	89 27       	eor	r24, r25
    1914:	8a 8b       	std	Y+18, r24	; 0x12
    1916:	c7 01       	movw	r24, r14
    1918:	b8 01       	movw	r22, r16
    191a:	ae 01       	movw	r20, r28
    191c:	47 5e       	subi	r20, 0xE7	; 231
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_fpadd_parts>
    1924:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__pack_f>
    1928:	a0 96       	adiw	r28, 0x20	; 32
    192a:	e6 e0       	ldi	r30, 0x06	; 6
    192c:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__epilogue_restores__+0x18>

00001930 <__addsf3>:
    1930:	a0 e2       	ldi	r26, 0x20	; 32
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e9       	ldi	r30, 0x9E	; 158
    1936:	fc e0       	ldi	r31, 0x0C	; 12
    1938:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__prologue_saves__+0x18>
    193c:	69 83       	std	Y+1, r22	; 0x01
    193e:	7a 83       	std	Y+2, r23	; 0x02
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	2d 83       	std	Y+5, r18	; 0x05
    1946:	3e 83       	std	Y+6, r19	; 0x06
    1948:	4f 83       	std	Y+7, r20	; 0x07
    194a:	58 87       	std	Y+8, r21	; 0x08
    194c:	f9 e0       	ldi	r31, 0x09	; 9
    194e:	ef 2e       	mov	r14, r31
    1950:	f1 2c       	mov	r15, r1
    1952:	ec 0e       	add	r14, r28
    1954:	fd 1e       	adc	r15, r29
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	b7 01       	movw	r22, r14
    195c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    1960:	8e 01       	movw	r16, r28
    1962:	0f 5e       	subi	r16, 0xEF	; 239
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	ce 01       	movw	r24, r28
    1968:	05 96       	adiw	r24, 0x05	; 5
    196a:	b8 01       	movw	r22, r16
    196c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    1970:	c7 01       	movw	r24, r14
    1972:	b8 01       	movw	r22, r16
    1974:	ae 01       	movw	r20, r28
    1976:	47 5e       	subi	r20, 0xE7	; 231
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_fpadd_parts>
    197e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__pack_f>
    1982:	a0 96       	adiw	r28, 0x20	; 32
    1984:	e6 e0       	ldi	r30, 0x06	; 6
    1986:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__epilogue_restores__+0x18>

0000198a <__nesf2>:
    198a:	a8 e1       	ldi	r26, 0x18	; 24
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb ec       	ldi	r30, 0xCB	; 203
    1990:	fc e0       	ldi	r31, 0x0C	; 12
    1992:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__prologue_saves__+0x18>
    1996:	69 83       	std	Y+1, r22	; 0x01
    1998:	7a 83       	std	Y+2, r23	; 0x02
    199a:	8b 83       	std	Y+3, r24	; 0x03
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	2d 83       	std	Y+5, r18	; 0x05
    19a0:	3e 83       	std	Y+6, r19	; 0x06
    19a2:	4f 83       	std	Y+7, r20	; 0x07
    19a4:	58 87       	std	Y+8, r21	; 0x08
    19a6:	89 e0       	ldi	r24, 0x09	; 9
    19a8:	e8 2e       	mov	r14, r24
    19aa:	f1 2c       	mov	r15, r1
    19ac:	ec 0e       	add	r14, r28
    19ae:	fd 1e       	adc	r15, r29
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	b7 01       	movw	r22, r14
    19b6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    19ba:	8e 01       	movw	r16, r28
    19bc:	0f 5e       	subi	r16, 0xEF	; 239
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	ce 01       	movw	r24, r28
    19c2:	05 96       	adiw	r24, 0x05	; 5
    19c4:	b8 01       	movw	r22, r16
    19c6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	40 f0       	brcs	.+16     	; 0x19e0 <__nesf2+0x56>
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	28 f0       	brcs	.+10     	; 0x19e0 <__nesf2+0x56>
    19d6:	c7 01       	movw	r24, r14
    19d8:	b8 01       	movw	r22, r16
    19da:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fpcmp_parts_f>
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <__nesf2+0x58>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	68 96       	adiw	r28, 0x18	; 24
    19e4:	e6 e0       	ldi	r30, 0x06	; 6
    19e6:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__epilogue_restores__+0x18>

000019ea <__gesf2>:
    19ea:	a8 e1       	ldi	r26, 0x18	; 24
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb ef       	ldi	r30, 0xFB	; 251
    19f0:	fc e0       	ldi	r31, 0x0C	; 12
    19f2:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__prologue_saves__+0x18>
    19f6:	69 83       	std	Y+1, r22	; 0x01
    19f8:	7a 83       	std	Y+2, r23	; 0x02
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	2d 83       	std	Y+5, r18	; 0x05
    1a00:	3e 83       	std	Y+6, r19	; 0x06
    1a02:	4f 83       	std	Y+7, r20	; 0x07
    1a04:	58 87       	std	Y+8, r21	; 0x08
    1a06:	89 e0       	ldi	r24, 0x09	; 9
    1a08:	e8 2e       	mov	r14, r24
    1a0a:	f1 2c       	mov	r15, r1
    1a0c:	ec 0e       	add	r14, r28
    1a0e:	fd 1e       	adc	r15, r29
    1a10:	ce 01       	movw	r24, r28
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	b7 01       	movw	r22, r14
    1a16:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	0f 5e       	subi	r16, 0xEF	; 239
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	ce 01       	movw	r24, r28
    1a22:	05 96       	adiw	r24, 0x05	; 5
    1a24:	b8 01       	movw	r22, r16
    1a26:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	40 f0       	brcs	.+16     	; 0x1a40 <__gesf2+0x56>
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	28 f0       	brcs	.+10     	; 0x1a40 <__gesf2+0x56>
    1a36:	c7 01       	movw	r24, r14
    1a38:	b8 01       	movw	r22, r16
    1a3a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fpcmp_parts_f>
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <__gesf2+0x58>
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	68 96       	adiw	r28, 0x18	; 24
    1a44:	e6 e0       	ldi	r30, 0x06	; 6
    1a46:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__epilogue_restores__+0x18>

00001a4a <__fixsfsi>:
    1a4a:	ac e0       	ldi	r26, 0x0C	; 12
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e2       	ldi	r30, 0x2B	; 43
    1a50:	fd e0       	ldi	r31, 0x0D	; 13
    1a52:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__+0x20>
    1a56:	69 83       	std	Y+1, r22	; 0x01
    1a58:	7a 83       	std	Y+2, r23	; 0x02
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	be 01       	movw	r22, r28
    1a64:	6b 5f       	subi	r22, 0xFB	; 251
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__unpack_f>
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	61 f1       	breq	.+88     	; 0x1aca <__fixsfsi+0x80>
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	50 f1       	brcs	.+84     	; 0x1aca <__fixsfsi+0x80>
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <__fixsfsi+0x38>
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	88 23       	and	r24, r24
    1a7e:	51 f1       	breq	.+84     	; 0x1ad4 <__fixsfsi+0x8a>
    1a80:	2e c0       	rjmp	.+92     	; 0x1ade <__fixsfsi+0x94>
    1a82:	2f 81       	ldd	r18, Y+7	; 0x07
    1a84:	38 85       	ldd	r19, Y+8	; 0x08
    1a86:	37 fd       	sbrc	r19, 7
    1a88:	20 c0       	rjmp	.+64     	; 0x1aca <__fixsfsi+0x80>
    1a8a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a8c:	2f 31       	cpi	r18, 0x1F	; 31
    1a8e:	31 05       	cpc	r19, r1
    1a90:	1c f0       	brlt	.+6      	; 0x1a98 <__fixsfsi+0x4e>
    1a92:	66 23       	and	r22, r22
    1a94:	f9 f0       	breq	.+62     	; 0x1ad4 <__fixsfsi+0x8a>
    1a96:	23 c0       	rjmp	.+70     	; 0x1ade <__fixsfsi+0x94>
    1a98:	8e e1       	ldi	r24, 0x1E	; 30
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	82 1b       	sub	r24, r18
    1a9e:	93 0b       	sbc	r25, r19
    1aa0:	29 85       	ldd	r18, Y+9	; 0x09
    1aa2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aa4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1aa6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <__fixsfsi+0x68>
    1aaa:	56 95       	lsr	r21
    1aac:	47 95       	ror	r20
    1aae:	37 95       	ror	r19
    1ab0:	27 95       	ror	r18
    1ab2:	8a 95       	dec	r24
    1ab4:	d2 f7       	brpl	.-12     	; 0x1aaa <__fixsfsi+0x60>
    1ab6:	66 23       	and	r22, r22
    1ab8:	b1 f0       	breq	.+44     	; 0x1ae6 <__fixsfsi+0x9c>
    1aba:	50 95       	com	r21
    1abc:	40 95       	com	r20
    1abe:	30 95       	com	r19
    1ac0:	21 95       	neg	r18
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <__fixsfsi+0x9c>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <__fixsfsi+0x9c>
    1ad4:	2f ef       	ldi	r18, 0xFF	; 255
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	5f e7       	ldi	r21, 0x7F	; 127
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <__fixsfsi+0x9c>
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e8       	ldi	r21, 0x80	; 128
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	ca 01       	movw	r24, r20
    1aea:	2c 96       	adiw	r28, 0x0c	; 12
    1aec:	e2 e0       	ldi	r30, 0x02	; 2
    1aee:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__+0x20>

00001af2 <__pack_f>:
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	fc 01       	movw	r30, r24
    1afe:	e4 80       	ldd	r14, Z+4	; 0x04
    1b00:	f5 80       	ldd	r15, Z+5	; 0x05
    1b02:	06 81       	ldd	r16, Z+6	; 0x06
    1b04:	17 81       	ldd	r17, Z+7	; 0x07
    1b06:	d1 80       	ldd	r13, Z+1	; 0x01
    1b08:	80 81       	ld	r24, Z
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	48 f4       	brcc	.+18     	; 0x1b20 <__pack_f+0x2e>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e1       	ldi	r26, 0x10	; 16
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e8 2a       	or	r14, r24
    1b18:	f9 2a       	or	r15, r25
    1b1a:	0a 2b       	or	r16, r26
    1b1c:	1b 2b       	or	r17, r27
    1b1e:	a5 c0       	rjmp	.+330    	; 0x1c6a <__pack_f+0x178>
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__pack_f+0x34>
    1b24:	9f c0       	rjmp	.+318    	; 0x1c64 <__pack_f+0x172>
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <__pack_f+0x40>
    1b2a:	ee 24       	eor	r14, r14
    1b2c:	ff 24       	eor	r15, r15
    1b2e:	87 01       	movw	r16, r14
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <__pack_f+0x4a>
    1b32:	e1 14       	cp	r14, r1
    1b34:	f1 04       	cpc	r15, r1
    1b36:	01 05       	cpc	r16, r1
    1b38:	11 05       	cpc	r17, r1
    1b3a:	19 f4       	brne	.+6      	; 0x1b42 <__pack_f+0x50>
    1b3c:	e0 e0       	ldi	r30, 0x00	; 0
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	96 c0       	rjmp	.+300    	; 0x1c6e <__pack_f+0x17c>
    1b42:	62 81       	ldd	r22, Z+2	; 0x02
    1b44:	73 81       	ldd	r23, Z+3	; 0x03
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	62 38       	cpi	r22, 0x82	; 130
    1b4a:	79 07       	cpc	r23, r25
    1b4c:	0c f0       	brlt	.+2      	; 0x1b50 <__pack_f+0x5e>
    1b4e:	5b c0       	rjmp	.+182    	; 0x1c06 <__pack_f+0x114>
    1b50:	22 e8       	ldi	r18, 0x82	; 130
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	26 1b       	sub	r18, r22
    1b56:	37 0b       	sbc	r19, r23
    1b58:	2a 31       	cpi	r18, 0x1A	; 26
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f0       	brlt	.+10     	; 0x1b68 <__pack_f+0x76>
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	2a c0       	rjmp	.+84     	; 0x1bbc <__pack_f+0xca>
    1b68:	b8 01       	movw	r22, r16
    1b6a:	a7 01       	movw	r20, r14
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <__pack_f+0x86>
    1b70:	76 95       	lsr	r23
    1b72:	67 95       	ror	r22
    1b74:	57 95       	ror	r21
    1b76:	47 95       	ror	r20
    1b78:	0a 94       	dec	r0
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <__pack_f+0x7e>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e0       	ldi	r26, 0x00	; 0
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__pack_f+0x9c>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	2a 95       	dec	r18
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__pack_f+0x94>
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	a1 09       	sbc	r26, r1
    1b96:	b1 09       	sbc	r27, r1
    1b98:	8e 21       	and	r24, r14
    1b9a:	9f 21       	and	r25, r15
    1b9c:	a0 23       	and	r26, r16
    1b9e:	b1 23       	and	r27, r17
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	a1 05       	cpc	r26, r1
    1ba4:	b1 05       	cpc	r27, r1
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <__pack_f+0xbe>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	ab 01       	movw	r20, r22
    1bb4:	28 2b       	or	r18, r24
    1bb6:	39 2b       	or	r19, r25
    1bb8:	4a 2b       	or	r20, r26
    1bba:	5b 2b       	or	r21, r27
    1bbc:	da 01       	movw	r26, r20
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	8f 77       	andi	r24, 0x7F	; 127
    1bc2:	90 70       	andi	r25, 0x00	; 0
    1bc4:	a0 70       	andi	r26, 0x00	; 0
    1bc6:	b0 70       	andi	r27, 0x00	; 0
    1bc8:	80 34       	cpi	r24, 0x40	; 64
    1bca:	91 05       	cpc	r25, r1
    1bcc:	a1 05       	cpc	r26, r1
    1bce:	b1 05       	cpc	r27, r1
    1bd0:	39 f4       	brne	.+14     	; 0x1be0 <__pack_f+0xee>
    1bd2:	27 ff       	sbrs	r18, 7
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <__pack_f+0xf6>
    1bd6:	20 5c       	subi	r18, 0xC0	; 192
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	4f 4f       	sbci	r20, 0xFF	; 255
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <__pack_f+0xf6>
    1be0:	21 5c       	subi	r18, 0xC1	; 193
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	4f 4f       	sbci	r20, 0xFF	; 255
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	e0 e0       	ldi	r30, 0x00	; 0
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	20 30       	cpi	r18, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	3a 07       	cpc	r19, r26
    1bf2:	a0 e0       	ldi	r26, 0x00	; 0
    1bf4:	4a 07       	cpc	r20, r26
    1bf6:	a0 e4       	ldi	r26, 0x40	; 64
    1bf8:	5a 07       	cpc	r21, r26
    1bfa:	10 f0       	brcs	.+4      	; 0x1c00 <__pack_f+0x10e>
    1bfc:	e1 e0       	ldi	r30, 0x01	; 1
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	79 01       	movw	r14, r18
    1c02:	8a 01       	movw	r16, r20
    1c04:	27 c0       	rjmp	.+78     	; 0x1c54 <__pack_f+0x162>
    1c06:	60 38       	cpi	r22, 0x80	; 128
    1c08:	71 05       	cpc	r23, r1
    1c0a:	64 f5       	brge	.+88     	; 0x1c64 <__pack_f+0x172>
    1c0c:	fb 01       	movw	r30, r22
    1c0e:	e1 58       	subi	r30, 0x81	; 129
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	d8 01       	movw	r26, r16
    1c14:	c7 01       	movw	r24, r14
    1c16:	8f 77       	andi	r24, 0x7F	; 127
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	a0 70       	andi	r26, 0x00	; 0
    1c1c:	b0 70       	andi	r27, 0x00	; 0
    1c1e:	80 34       	cpi	r24, 0x40	; 64
    1c20:	91 05       	cpc	r25, r1
    1c22:	a1 05       	cpc	r26, r1
    1c24:	b1 05       	cpc	r27, r1
    1c26:	39 f4       	brne	.+14     	; 0x1c36 <__pack_f+0x144>
    1c28:	e7 fe       	sbrs	r14, 7
    1c2a:	0d c0       	rjmp	.+26     	; 0x1c46 <__pack_f+0x154>
    1c2c:	80 e4       	ldi	r24, 0x40	; 64
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <__pack_f+0x14c>
    1c36:	8f e3       	ldi	r24, 0x3F	; 63
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e0       	ldi	r26, 0x00	; 0
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e8 0e       	add	r14, r24
    1c40:	f9 1e       	adc	r15, r25
    1c42:	0a 1f       	adc	r16, r26
    1c44:	1b 1f       	adc	r17, r27
    1c46:	17 ff       	sbrs	r17, 7
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <__pack_f+0x162>
    1c4a:	16 95       	lsr	r17
    1c4c:	07 95       	ror	r16
    1c4e:	f7 94       	ror	r15
    1c50:	e7 94       	ror	r14
    1c52:	31 96       	adiw	r30, 0x01	; 1
    1c54:	87 e0       	ldi	r24, 0x07	; 7
    1c56:	16 95       	lsr	r17
    1c58:	07 95       	ror	r16
    1c5a:	f7 94       	ror	r15
    1c5c:	e7 94       	ror	r14
    1c5e:	8a 95       	dec	r24
    1c60:	d1 f7       	brne	.-12     	; 0x1c56 <__pack_f+0x164>
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <__pack_f+0x17c>
    1c64:	ee 24       	eor	r14, r14
    1c66:	ff 24       	eor	r15, r15
    1c68:	87 01       	movw	r16, r14
    1c6a:	ef ef       	ldi	r30, 0xFF	; 255
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	6e 2f       	mov	r22, r30
    1c70:	67 95       	ror	r22
    1c72:	66 27       	eor	r22, r22
    1c74:	67 95       	ror	r22
    1c76:	90 2f       	mov	r25, r16
    1c78:	9f 77       	andi	r25, 0x7F	; 127
    1c7a:	d7 94       	ror	r13
    1c7c:	dd 24       	eor	r13, r13
    1c7e:	d7 94       	ror	r13
    1c80:	8e 2f       	mov	r24, r30
    1c82:	86 95       	lsr	r24
    1c84:	49 2f       	mov	r20, r25
    1c86:	46 2b       	or	r20, r22
    1c88:	58 2f       	mov	r21, r24
    1c8a:	5d 29       	or	r21, r13
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	ca 01       	movw	r24, r20
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	08 95       	ret

00001c9c <__unpack_f>:
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	db 01       	movw	r26, r22
    1ca0:	40 81       	ld	r20, Z
    1ca2:	51 81       	ldd	r21, Z+1	; 0x01
    1ca4:	22 81       	ldd	r18, Z+2	; 0x02
    1ca6:	62 2f       	mov	r22, r18
    1ca8:	6f 77       	andi	r22, 0x7F	; 127
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	22 1f       	adc	r18, r18
    1cae:	22 27       	eor	r18, r18
    1cb0:	22 1f       	adc	r18, r18
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	89 2f       	mov	r24, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	82 2b       	or	r24, r18
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	99 27       	eor	r25, r25
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	9c 93       	st	X, r25
    1cc8:	11 97       	sbiw	r26, 0x01	; 1
    1cca:	21 15       	cp	r18, r1
    1ccc:	31 05       	cpc	r19, r1
    1cce:	a9 f5       	brne	.+106    	; 0x1d3a <__unpack_f+0x9e>
    1cd0:	41 15       	cp	r20, r1
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	61 05       	cpc	r22, r1
    1cd6:	71 05       	cpc	r23, r1
    1cd8:	11 f4       	brne	.+4      	; 0x1cde <__unpack_f+0x42>
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	37 c0       	rjmp	.+110    	; 0x1d4c <__unpack_f+0xb0>
    1cde:	82 e8       	ldi	r24, 0x82	; 130
    1ce0:	9f ef       	ldi	r25, 0xFF	; 255
    1ce2:	13 96       	adiw	r26, 0x03	; 3
    1ce4:	9c 93       	st	X, r25
    1ce6:	8e 93       	st	-X, r24
    1ce8:	12 97       	sbiw	r26, 0x02	; 2
    1cea:	9a 01       	movw	r18, r20
    1cec:	ab 01       	movw	r20, r22
    1cee:	67 e0       	ldi	r22, 0x07	; 7
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	44 1f       	adc	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	6a 95       	dec	r22
    1cfa:	d1 f7       	brne	.-12     	; 0x1cf0 <__unpack_f+0x54>
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	8c 93       	st	X, r24
    1d00:	0d c0       	rjmp	.+26     	; 0x1d1c <__unpack_f+0x80>
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	44 1f       	adc	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	12 96       	adiw	r26, 0x02	; 2
    1d0c:	8d 91       	ld	r24, X+
    1d0e:	9c 91       	ld	r25, X
    1d10:	13 97       	sbiw	r26, 0x03	; 3
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	13 96       	adiw	r26, 0x03	; 3
    1d16:	9c 93       	st	X, r25
    1d18:	8e 93       	st	-X, r24
    1d1a:	12 97       	sbiw	r26, 0x02	; 2
    1d1c:	20 30       	cpi	r18, 0x00	; 0
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	38 07       	cpc	r19, r24
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	48 07       	cpc	r20, r24
    1d26:	80 e4       	ldi	r24, 0x40	; 64
    1d28:	58 07       	cpc	r21, r24
    1d2a:	58 f3       	brcs	.-42     	; 0x1d02 <__unpack_f+0x66>
    1d2c:	14 96       	adiw	r26, 0x04	; 4
    1d2e:	2d 93       	st	X+, r18
    1d30:	3d 93       	st	X+, r19
    1d32:	4d 93       	st	X+, r20
    1d34:	5c 93       	st	X, r21
    1d36:	17 97       	sbiw	r26, 0x07	; 7
    1d38:	08 95       	ret
    1d3a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	79 f4       	brne	.+30     	; 0x1d5e <__unpack_f+0xc2>
    1d40:	41 15       	cp	r20, r1
    1d42:	51 05       	cpc	r21, r1
    1d44:	61 05       	cpc	r22, r1
    1d46:	71 05       	cpc	r23, r1
    1d48:	19 f4       	brne	.+6      	; 0x1d50 <__unpack_f+0xb4>
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	8c 93       	st	X, r24
    1d4e:	08 95       	ret
    1d50:	64 ff       	sbrs	r22, 4
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <__unpack_f+0xbe>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	8c 93       	st	X, r24
    1d58:	12 c0       	rjmp	.+36     	; 0x1d7e <__unpack_f+0xe2>
    1d5a:	1c 92       	st	X, r1
    1d5c:	10 c0       	rjmp	.+32     	; 0x1d7e <__unpack_f+0xe2>
    1d5e:	2f 57       	subi	r18, 0x7F	; 127
    1d60:	30 40       	sbci	r19, 0x00	; 0
    1d62:	13 96       	adiw	r26, 0x03	; 3
    1d64:	3c 93       	st	X, r19
    1d66:	2e 93       	st	-X, r18
    1d68:	12 97       	sbiw	r26, 0x02	; 2
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	8c 93       	st	X, r24
    1d6e:	87 e0       	ldi	r24, 0x07	; 7
    1d70:	44 0f       	add	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	66 1f       	adc	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	8a 95       	dec	r24
    1d7a:	d1 f7       	brne	.-12     	; 0x1d70 <__unpack_f+0xd4>
    1d7c:	70 64       	ori	r23, 0x40	; 64
    1d7e:	14 96       	adiw	r26, 0x04	; 4
    1d80:	4d 93       	st	X+, r20
    1d82:	5d 93       	st	X+, r21
    1d84:	6d 93       	st	X+, r22
    1d86:	7c 93       	st	X, r23
    1d88:	17 97       	sbiw	r26, 0x07	; 7
    1d8a:	08 95       	ret

00001d8c <__fpcmp_parts_f>:
    1d8c:	1f 93       	push	r17
    1d8e:	dc 01       	movw	r26, r24
    1d90:	fb 01       	movw	r30, r22
    1d92:	9c 91       	ld	r25, X
    1d94:	92 30       	cpi	r25, 0x02	; 2
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <__fpcmp_parts_f+0xe>
    1d98:	47 c0       	rjmp	.+142    	; 0x1e28 <__fpcmp_parts_f+0x9c>
    1d9a:	80 81       	ld	r24, Z
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	08 f4       	brcc	.+2      	; 0x1da2 <__fpcmp_parts_f+0x16>
    1da0:	43 c0       	rjmp	.+134    	; 0x1e28 <__fpcmp_parts_f+0x9c>
    1da2:	94 30       	cpi	r25, 0x04	; 4
    1da4:	51 f4       	brne	.+20     	; 0x1dba <__fpcmp_parts_f+0x2e>
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	1c 91       	ld	r17, X
    1daa:	84 30       	cpi	r24, 0x04	; 4
    1dac:	99 f5       	brne	.+102    	; 0x1e14 <__fpcmp_parts_f+0x88>
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	68 2f       	mov	r22, r24
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	61 1b       	sub	r22, r17
    1db6:	71 09       	sbc	r23, r1
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <__fpcmp_parts_f+0xac>
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	21 f0       	breq	.+8      	; 0x1dc6 <__fpcmp_parts_f+0x3a>
    1dbe:	92 30       	cpi	r25, 0x02	; 2
    1dc0:	31 f4       	brne	.+12     	; 0x1dce <__fpcmp_parts_f+0x42>
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	b9 f1       	breq	.+110    	; 0x1e34 <__fpcmp_parts_f+0xa8>
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	88 23       	and	r24, r24
    1dca:	89 f1       	breq	.+98     	; 0x1e2e <__fpcmp_parts_f+0xa2>
    1dcc:	2d c0       	rjmp	.+90     	; 0x1e28 <__fpcmp_parts_f+0x9c>
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	1c 91       	ld	r17, X
    1dd2:	11 97       	sbiw	r26, 0x01	; 1
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	f1 f0       	breq	.+60     	; 0x1e14 <__fpcmp_parts_f+0x88>
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
    1dda:	18 17       	cp	r17, r24
    1ddc:	d9 f4       	brne	.+54     	; 0x1e14 <__fpcmp_parts_f+0x88>
    1dde:	12 96       	adiw	r26, 0x02	; 2
    1de0:	2d 91       	ld	r18, X+
    1de2:	3c 91       	ld	r19, X
    1de4:	13 97       	sbiw	r26, 0x03	; 3
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	82 17       	cp	r24, r18
    1dec:	93 07       	cpc	r25, r19
    1dee:	94 f0       	brlt	.+36     	; 0x1e14 <__fpcmp_parts_f+0x88>
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	bc f0       	brlt	.+46     	; 0x1e24 <__fpcmp_parts_f+0x98>
    1df6:	14 96       	adiw	r26, 0x04	; 4
    1df8:	8d 91       	ld	r24, X+
    1dfa:	9d 91       	ld	r25, X+
    1dfc:	0d 90       	ld	r0, X+
    1dfe:	bc 91       	ld	r27, X
    1e00:	a0 2d       	mov	r26, r0
    1e02:	24 81       	ldd	r18, Z+4	; 0x04
    1e04:	35 81       	ldd	r19, Z+5	; 0x05
    1e06:	46 81       	ldd	r20, Z+6	; 0x06
    1e08:	57 81       	ldd	r21, Z+7	; 0x07
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	4a 07       	cpc	r20, r26
    1e10:	5b 07       	cpc	r21, r27
    1e12:	18 f4       	brcc	.+6      	; 0x1e1a <__fpcmp_parts_f+0x8e>
    1e14:	11 23       	and	r17, r17
    1e16:	41 f0       	breq	.+16     	; 0x1e28 <__fpcmp_parts_f+0x9c>
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <__fpcmp_parts_f+0xa2>
    1e1a:	82 17       	cp	r24, r18
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	a4 07       	cpc	r26, r20
    1e20:	b5 07       	cpc	r27, r21
    1e22:	40 f4       	brcc	.+16     	; 0x1e34 <__fpcmp_parts_f+0xa8>
    1e24:	11 23       	and	r17, r17
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <__fpcmp_parts_f+0xa2>
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <__fpcmp_parts_f+0xac>
    1e2e:	6f ef       	ldi	r22, 0xFF	; 255
    1e30:	7f ef       	ldi	r23, 0xFF	; 255
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <__fpcmp_parts_f+0xac>
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	cb 01       	movw	r24, r22
    1e3a:	1f 91       	pop	r17
    1e3c:	08 95       	ret

00001e3e <vfprintf>:
    1e3e:	a1 e1       	ldi	r26, 0x11	; 17
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e2       	ldi	r30, 0x25	; 37
    1e44:	ff e0       	ldi	r31, 0x0F	; 15
    1e46:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__>
    1e4a:	3c 01       	movw	r6, r24
    1e4c:	7f 87       	std	Y+15, r23	; 0x0f
    1e4e:	6e 87       	std	Y+14, r22	; 0x0e
    1e50:	6a 01       	movw	r12, r20
    1e52:	fc 01       	movw	r30, r24
    1e54:	17 82       	std	Z+7, r1	; 0x07
    1e56:	16 82       	std	Z+6, r1	; 0x06
    1e58:	83 81       	ldd	r24, Z+3	; 0x03
    1e5a:	81 fd       	sbrc	r24, 1
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <vfprintf+0x26>
    1e5e:	6f ef       	ldi	r22, 0xFF	; 255
    1e60:	7f ef       	ldi	r23, 0xFF	; 255
    1e62:	6f c3       	rjmp	.+1758   	; 0x2542 <vfprintf+0x704>
    1e64:	9e 01       	movw	r18, r28
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	39 8b       	std	Y+17, r19	; 0x11
    1e6c:	28 8b       	std	Y+16, r18	; 0x10
    1e6e:	f3 01       	movw	r30, r6
    1e70:	23 81       	ldd	r18, Z+3	; 0x03
    1e72:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e74:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e76:	23 fd       	sbrc	r18, 3
    1e78:	85 91       	lpm	r24, Z+
    1e7a:	23 ff       	sbrs	r18, 3
    1e7c:	81 91       	ld	r24, Z+
    1e7e:	ff 87       	std	Y+15, r31	; 0x0f
    1e80:	ee 87       	std	Y+14, r30	; 0x0e
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <vfprintf+0x4a>
    1e86:	5a c3       	rjmp	.+1716   	; 0x253c <vfprintf+0x6fe>
    1e88:	85 32       	cpi	r24, 0x25	; 37
    1e8a:	51 f4       	brne	.+20     	; 0x1ea0 <vfprintf+0x62>
    1e8c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e8e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e90:	23 fd       	sbrc	r18, 3
    1e92:	85 91       	lpm	r24, Z+
    1e94:	23 ff       	sbrs	r18, 3
    1e96:	81 91       	ld	r24, Z+
    1e98:	ff 87       	std	Y+15, r31	; 0x0f
    1e9a:	ee 87       	std	Y+14, r30	; 0x0e
    1e9c:	85 32       	cpi	r24, 0x25	; 37
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <vfprintf+0x6c>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	b3 01       	movw	r22, r6
    1ea4:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    1ea8:	e2 cf       	rjmp	.-60     	; 0x1e6e <vfprintf+0x30>
    1eaa:	98 2f       	mov	r25, r24
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	88 24       	eor	r8, r8
    1eb0:	99 24       	eor	r9, r9
    1eb2:	10 32       	cpi	r17, 0x20	; 32
    1eb4:	b0 f4       	brcc	.+44     	; 0x1ee2 <vfprintf+0xa4>
    1eb6:	9b 32       	cpi	r25, 0x2B	; 43
    1eb8:	69 f0       	breq	.+26     	; 0x1ed4 <vfprintf+0x96>
    1eba:	9c 32       	cpi	r25, 0x2C	; 44
    1ebc:	28 f4       	brcc	.+10     	; 0x1ec8 <vfprintf+0x8a>
    1ebe:	90 32       	cpi	r25, 0x20	; 32
    1ec0:	51 f0       	breq	.+20     	; 0x1ed6 <vfprintf+0x98>
    1ec2:	93 32       	cpi	r25, 0x23	; 35
    1ec4:	71 f4       	brne	.+28     	; 0x1ee2 <vfprintf+0xa4>
    1ec6:	0b c0       	rjmp	.+22     	; 0x1ede <vfprintf+0xa0>
    1ec8:	9d 32       	cpi	r25, 0x2D	; 45
    1eca:	39 f0       	breq	.+14     	; 0x1eda <vfprintf+0x9c>
    1ecc:	90 33       	cpi	r25, 0x30	; 48
    1ece:	49 f4       	brne	.+18     	; 0x1ee2 <vfprintf+0xa4>
    1ed0:	11 60       	ori	r17, 0x01	; 1
    1ed2:	28 c0       	rjmp	.+80     	; 0x1f24 <vfprintf+0xe6>
    1ed4:	12 60       	ori	r17, 0x02	; 2
    1ed6:	14 60       	ori	r17, 0x04	; 4
    1ed8:	25 c0       	rjmp	.+74     	; 0x1f24 <vfprintf+0xe6>
    1eda:	18 60       	ori	r17, 0x08	; 8
    1edc:	23 c0       	rjmp	.+70     	; 0x1f24 <vfprintf+0xe6>
    1ede:	10 61       	ori	r17, 0x10	; 16
    1ee0:	21 c0       	rjmp	.+66     	; 0x1f24 <vfprintf+0xe6>
    1ee2:	17 fd       	sbrc	r17, 7
    1ee4:	2a c0       	rjmp	.+84     	; 0x1f3a <vfprintf+0xfc>
    1ee6:	89 2f       	mov	r24, r25
    1ee8:	80 53       	subi	r24, 0x30	; 48
    1eea:	8a 30       	cpi	r24, 0x0A	; 10
    1eec:	78 f4       	brcc	.+30     	; 0x1f0c <vfprintf+0xce>
    1eee:	16 ff       	sbrs	r17, 6
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <vfprintf+0xc0>
    1ef2:	fa e0       	ldi	r31, 0x0A	; 10
    1ef4:	9f 9e       	mul	r9, r31
    1ef6:	90 2c       	mov	r9, r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	98 0e       	add	r9, r24
    1efc:	13 c0       	rjmp	.+38     	; 0x1f24 <vfprintf+0xe6>
    1efe:	3a e0       	ldi	r19, 0x0A	; 10
    1f00:	83 9e       	mul	r8, r19
    1f02:	80 2c       	mov	r8, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	88 0e       	add	r8, r24
    1f08:	10 62       	ori	r17, 0x20	; 32
    1f0a:	0c c0       	rjmp	.+24     	; 0x1f24 <vfprintf+0xe6>
    1f0c:	9e 32       	cpi	r25, 0x2E	; 46
    1f0e:	21 f4       	brne	.+8      	; 0x1f18 <vfprintf+0xda>
    1f10:	16 fd       	sbrc	r17, 6
    1f12:	14 c3       	rjmp	.+1576   	; 0x253c <vfprintf+0x6fe>
    1f14:	10 64       	ori	r17, 0x40	; 64
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <vfprintf+0xe6>
    1f18:	9c 36       	cpi	r25, 0x6C	; 108
    1f1a:	11 f4       	brne	.+4      	; 0x1f20 <vfprintf+0xe2>
    1f1c:	10 68       	ori	r17, 0x80	; 128
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <vfprintf+0xe6>
    1f20:	98 36       	cpi	r25, 0x68	; 104
    1f22:	59 f4       	brne	.+22     	; 0x1f3a <vfprintf+0xfc>
    1f24:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f26:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f28:	23 fd       	sbrc	r18, 3
    1f2a:	95 91       	lpm	r25, Z+
    1f2c:	23 ff       	sbrs	r18, 3
    1f2e:	91 91       	ld	r25, Z+
    1f30:	ff 87       	std	Y+15, r31	; 0x0f
    1f32:	ee 87       	std	Y+14, r30	; 0x0e
    1f34:	99 23       	and	r25, r25
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <vfprintf+0xfc>
    1f38:	bc cf       	rjmp	.-136    	; 0x1eb2 <vfprintf+0x74>
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	85 54       	subi	r24, 0x45	; 69
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	20 f4       	brcc	.+8      	; 0x1f4a <vfprintf+0x10c>
    1f42:	81 2f       	mov	r24, r17
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	90 5e       	subi	r25, 0xE0	; 224
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <vfprintf+0x11a>
    1f4a:	89 2f       	mov	r24, r25
    1f4c:	85 56       	subi	r24, 0x65	; 101
    1f4e:	83 30       	cpi	r24, 0x03	; 3
    1f50:	08 f0       	brcs	.+2      	; 0x1f54 <vfprintf+0x116>
    1f52:	9f c1       	rjmp	.+830    	; 0x2292 <vfprintf+0x454>
    1f54:	81 2f       	mov	r24, r17
    1f56:	8f 7e       	andi	r24, 0xEF	; 239
    1f58:	86 fd       	sbrc	r24, 6
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <vfprintf+0x122>
    1f5c:	76 e0       	ldi	r23, 0x06	; 6
    1f5e:	97 2e       	mov	r9, r23
    1f60:	6f e3       	ldi	r22, 0x3F	; 63
    1f62:	f6 2e       	mov	r15, r22
    1f64:	f8 22       	and	r15, r24
    1f66:	95 36       	cpi	r25, 0x65	; 101
    1f68:	19 f4       	brne	.+6      	; 0x1f70 <vfprintf+0x132>
    1f6a:	f0 e4       	ldi	r31, 0x40	; 64
    1f6c:	ff 2a       	or	r15, r31
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <vfprintf+0x140>
    1f70:	96 36       	cpi	r25, 0x66	; 102
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <vfprintf+0x13c>
    1f74:	20 e8       	ldi	r18, 0x80	; 128
    1f76:	f2 2a       	or	r15, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x140>
    1f7a:	91 10       	cpse	r9, r1
    1f7c:	9a 94       	dec	r9
    1f7e:	f7 fe       	sbrs	r15, 7
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <vfprintf+0x158>
    1f82:	3b e3       	ldi	r19, 0x3B	; 59
    1f84:	39 15       	cp	r19, r9
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <vfprintf+0x150>
    1f88:	5c e3       	ldi	r21, 0x3C	; 60
    1f8a:	b5 2e       	mov	r11, r21
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <vfprintf+0x154>
    1f8e:	b9 2c       	mov	r11, r9
    1f90:	b3 94       	inc	r11
    1f92:	27 e0       	ldi	r18, 0x07	; 7
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <vfprintf+0x16a>
    1f96:	47 e0       	ldi	r20, 0x07	; 7
    1f98:	49 15       	cp	r20, r9
    1f9a:	20 f4       	brcc	.+8      	; 0x1fa4 <vfprintf+0x166>
    1f9c:	bb 24       	eor	r11, r11
    1f9e:	47 e0       	ldi	r20, 0x07	; 7
    1fa0:	94 2e       	mov	r9, r20
    1fa2:	f7 cf       	rjmp	.-18     	; 0x1f92 <vfprintf+0x154>
    1fa4:	29 2d       	mov	r18, r9
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	c6 01       	movw	r24, r12
    1faa:	04 96       	adiw	r24, 0x04	; 4
    1fac:	9d 87       	std	Y+13, r25	; 0x0d
    1fae:	8c 87       	std	Y+12, r24	; 0x0c
    1fb0:	f6 01       	movw	r30, r12
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	ae 01       	movw	r20, r28
    1fbc:	4f 5f       	subi	r20, 0xFF	; 255
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	0b 2d       	mov	r16, r11
    1fc2:	0e 94 06 18 	call	0x300c	; 0x300c <__ftoa_engine>
    1fc6:	6c 01       	movw	r12, r24
    1fc8:	09 81       	ldd	r16, Y+1	; 0x01
    1fca:	20 2e       	mov	r2, r16
    1fcc:	33 24       	eor	r3, r3
    1fce:	00 ff       	sbrs	r16, 0
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <vfprintf+0x19c>
    1fd2:	03 fd       	sbrc	r16, 3
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x19c>
    1fd6:	1d e2       	ldi	r17, 0x2D	; 45
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <vfprintf+0x1ae>
    1fda:	f1 fe       	sbrs	r15, 1
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <vfprintf+0x1a4>
    1fde:	1b e2       	ldi	r17, 0x2B	; 43
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <vfprintf+0x1ae>
    1fe2:	f2 fc       	sbrc	r15, 2
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0x1ac>
    1fe6:	10 e0       	ldi	r17, 0x00	; 0
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <vfprintf+0x1ae>
    1fea:	10 e2       	ldi	r17, 0x20	; 32
    1fec:	c1 01       	movw	r24, r2
    1fee:	8c 70       	andi	r24, 0x0C	; 12
    1ff0:	90 70       	andi	r25, 0x00	; 0
    1ff2:	89 2b       	or	r24, r25
    1ff4:	b9 f1       	breq	.+110    	; 0x2064 <vfprintf+0x226>
    1ff6:	11 23       	and	r17, r17
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <vfprintf+0x1c0>
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <vfprintf+0x1c2>
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
    2000:	88 15       	cp	r24, r8
    2002:	10 f0       	brcs	.+4      	; 0x2008 <vfprintf+0x1ca>
    2004:	88 24       	eor	r8, r8
    2006:	0a c0       	rjmp	.+20     	; 0x201c <vfprintf+0x1de>
    2008:	88 1a       	sub	r8, r24
    200a:	f3 fc       	sbrc	r15, 3
    200c:	07 c0       	rjmp	.+14     	; 0x201c <vfprintf+0x1de>
    200e:	80 e2       	ldi	r24, 0x20	; 32
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	b3 01       	movw	r22, r6
    2014:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2018:	8a 94       	dec	r8
    201a:	c9 f7       	brne	.-14     	; 0x200e <vfprintf+0x1d0>
    201c:	11 23       	and	r17, r17
    201e:	29 f0       	breq	.+10     	; 0x202a <vfprintf+0x1ec>
    2020:	81 2f       	mov	r24, r17
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	b3 01       	movw	r22, r6
    2026:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    202a:	23 fe       	sbrs	r2, 3
    202c:	03 c0       	rjmp	.+6      	; 0x2034 <vfprintf+0x1f6>
    202e:	00 e7       	ldi	r16, 0x70	; 112
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <vfprintf+0x212>
    2034:	04 e7       	ldi	r16, 0x74	; 116
    2036:	10 e0       	ldi	r17, 0x00	; 0
    2038:	0b c0       	rjmp	.+22     	; 0x2050 <vfprintf+0x212>
    203a:	e1 14       	cp	r14, r1
    203c:	f1 04       	cpc	r15, r1
    203e:	09 f0       	breq	.+2      	; 0x2042 <vfprintf+0x204>
    2040:	80 52       	subi	r24, 0x20	; 32
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	b3 01       	movw	r22, r6
    2046:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    204a:	0f 5f       	subi	r16, 0xFF	; 255
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	05 c0       	rjmp	.+10     	; 0x205a <vfprintf+0x21c>
    2050:	ef 2c       	mov	r14, r15
    2052:	ff 24       	eor	r15, r15
    2054:	f0 e1       	ldi	r31, 0x10	; 16
    2056:	ef 22       	and	r14, r31
    2058:	ff 24       	eor	r15, r15
    205a:	f8 01       	movw	r30, r16
    205c:	84 91       	lpm	r24, Z+
    205e:	88 23       	and	r24, r24
    2060:	61 f7       	brne	.-40     	; 0x203a <vfprintf+0x1fc>
    2062:	14 c1       	rjmp	.+552    	; 0x228c <vfprintf+0x44e>
    2064:	f7 fe       	sbrs	r15, 7
    2066:	12 c0       	rjmp	.+36     	; 0x208c <vfprintf+0x24e>
    2068:	bc 0c       	add	r11, r12
    206a:	24 fe       	sbrs	r2, 4
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <vfprintf+0x238>
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	81 33       	cpi	r24, 0x31	; 49
    2072:	09 f4       	brne	.+2      	; 0x2076 <vfprintf+0x238>
    2074:	ba 94       	dec	r11
    2076:	1b 14       	cp	r1, r11
    2078:	1c f0       	brlt	.+6      	; 0x2080 <vfprintf+0x242>
    207a:	bb 24       	eor	r11, r11
    207c:	b3 94       	inc	r11
    207e:	2d c0       	rjmp	.+90     	; 0x20da <vfprintf+0x29c>
    2080:	f8 e0       	ldi	r31, 0x08	; 8
    2082:	fb 15       	cp	r31, r11
    2084:	50 f5       	brcc	.+84     	; 0x20da <vfprintf+0x29c>
    2086:	38 e0       	ldi	r19, 0x08	; 8
    2088:	b3 2e       	mov	r11, r19
    208a:	27 c0       	rjmp	.+78     	; 0x20da <vfprintf+0x29c>
    208c:	f6 fc       	sbrc	r15, 6
    208e:	25 c0       	rjmp	.+74     	; 0x20da <vfprintf+0x29c>
    2090:	89 2d       	mov	r24, r9
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	8c 15       	cp	r24, r12
    2096:	9d 05       	cpc	r25, r13
    2098:	4c f0       	brlt	.+18     	; 0x20ac <vfprintf+0x26e>
    209a:	2c ef       	ldi	r18, 0xFC	; 252
    209c:	c2 16       	cp	r12, r18
    209e:	2f ef       	ldi	r18, 0xFF	; 255
    20a0:	d2 06       	cpc	r13, r18
    20a2:	24 f0       	brlt	.+8      	; 0x20ac <vfprintf+0x26e>
    20a4:	30 e8       	ldi	r19, 0x80	; 128
    20a6:	f3 2a       	or	r15, r19
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <vfprintf+0x26e>
    20aa:	9a 94       	dec	r9
    20ac:	99 20       	and	r9, r9
    20ae:	49 f0       	breq	.+18     	; 0x20c2 <vfprintf+0x284>
    20b0:	e2 e0       	ldi	r30, 0x02	; 2
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	ec 0f       	add	r30, r28
    20b6:	fd 1f       	adc	r31, r29
    20b8:	e9 0d       	add	r30, r9
    20ba:	f1 1d       	adc	r31, r1
    20bc:	80 81       	ld	r24, Z
    20be:	80 33       	cpi	r24, 0x30	; 48
    20c0:	a1 f3       	breq	.-24     	; 0x20aa <vfprintf+0x26c>
    20c2:	f7 fe       	sbrs	r15, 7
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <vfprintf+0x29c>
    20c6:	b9 2c       	mov	r11, r9
    20c8:	b3 94       	inc	r11
    20ca:	89 2d       	mov	r24, r9
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	c8 16       	cp	r12, r24
    20d0:	d9 06       	cpc	r13, r25
    20d2:	14 f0       	brlt	.+4      	; 0x20d8 <vfprintf+0x29a>
    20d4:	99 24       	eor	r9, r9
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <vfprintf+0x29c>
    20d8:	9c 18       	sub	r9, r12
    20da:	f7 fc       	sbrc	r15, 7
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <vfprintf+0x2a6>
    20de:	25 e0       	ldi	r18, 0x05	; 5
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <vfprintf+0x2b8>
    20e4:	1c 14       	cp	r1, r12
    20e6:	1d 04       	cpc	r1, r13
    20e8:	1c f0       	brlt	.+6      	; 0x20f0 <vfprintf+0x2b2>
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <vfprintf+0x2b8>
    20f0:	96 01       	movw	r18, r12
    20f2:	2f 5f       	subi	r18, 0xFF	; 255
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	11 23       	and	r17, r17
    20f8:	11 f0       	breq	.+4      	; 0x20fe <vfprintf+0x2c0>
    20fa:	2f 5f       	subi	r18, 0xFF	; 255
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	99 20       	and	r9, r9
    2100:	29 f0       	breq	.+10     	; 0x210c <vfprintf+0x2ce>
    2102:	89 2d       	mov	r24, r9
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	28 0f       	add	r18, r24
    210a:	39 1f       	adc	r19, r25
    210c:	88 2d       	mov	r24, r8
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	28 17       	cp	r18, r24
    2112:	39 07       	cpc	r19, r25
    2114:	14 f0       	brlt	.+4      	; 0x211a <vfprintf+0x2dc>
    2116:	88 24       	eor	r8, r8
    2118:	01 c0       	rjmp	.+2      	; 0x211c <vfprintf+0x2de>
    211a:	82 1a       	sub	r8, r18
    211c:	4f 2c       	mov	r4, r15
    211e:	55 24       	eor	r5, r5
    2120:	c2 01       	movw	r24, r4
    2122:	89 70       	andi	r24, 0x09	; 9
    2124:	90 70       	andi	r25, 0x00	; 0
    2126:	89 2b       	or	r24, r25
    2128:	39 f0       	breq	.+14     	; 0x2138 <vfprintf+0x2fa>
    212a:	08 c0       	rjmp	.+16     	; 0x213c <vfprintf+0x2fe>
    212c:	80 e2       	ldi	r24, 0x20	; 32
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	b3 01       	movw	r22, r6
    2132:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2136:	8a 94       	dec	r8
    2138:	88 20       	and	r8, r8
    213a:	c1 f7       	brne	.-16     	; 0x212c <vfprintf+0x2ee>
    213c:	11 23       	and	r17, r17
    213e:	29 f0       	breq	.+10     	; 0x214a <vfprintf+0x30c>
    2140:	81 2f       	mov	r24, r17
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	b3 01       	movw	r22, r6
    2146:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    214a:	43 fe       	sbrs	r4, 3
    214c:	07 c0       	rjmp	.+14     	; 0x215c <vfprintf+0x31e>
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <vfprintf+0x322>
    2150:	80 e3       	ldi	r24, 0x30	; 48
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	b3 01       	movw	r22, r6
    2156:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    215a:	8a 94       	dec	r8
    215c:	88 20       	and	r8, r8
    215e:	c1 f7       	brne	.-16     	; 0x2150 <vfprintf+0x312>
    2160:	f7 fe       	sbrs	r15, 7
    2162:	46 c0       	rjmp	.+140    	; 0x21f0 <vfprintf+0x3b2>
    2164:	86 01       	movw	r16, r12
    2166:	d7 fe       	sbrs	r13, 7
    2168:	02 c0       	rjmp	.+4      	; 0x216e <vfprintf+0x330>
    216a:	00 e0       	ldi	r16, 0x00	; 0
    216c:	10 e0       	ldi	r17, 0x00	; 0
    216e:	76 01       	movw	r14, r12
    2170:	08 94       	sec
    2172:	e1 1c       	adc	r14, r1
    2174:	f1 1c       	adc	r15, r1
    2176:	e0 1a       	sub	r14, r16
    2178:	f1 0a       	sbc	r15, r17
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	4c 0f       	add	r20, r28
    2180:	5d 1f       	adc	r21, r29
    2182:	e4 0e       	add	r14, r20
    2184:	f5 1e       	adc	r15, r21
    2186:	26 01       	movw	r4, r12
    2188:	4b 18       	sub	r4, r11
    218a:	51 08       	sbc	r5, r1
    218c:	89 2d       	mov	r24, r9
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	aa 24       	eor	r10, r10
    2192:	bb 24       	eor	r11, r11
    2194:	a8 1a       	sub	r10, r24
    2196:	b9 0a       	sbc	r11, r25
    2198:	5f ef       	ldi	r21, 0xFF	; 255
    219a:	0f 3f       	cpi	r16, 0xFF	; 255
    219c:	15 07       	cpc	r17, r21
    219e:	29 f4       	brne	.+10     	; 0x21aa <vfprintf+0x36c>
    21a0:	8e e2       	ldi	r24, 0x2E	; 46
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	b3 01       	movw	r22, r6
    21a6:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    21aa:	c0 16       	cp	r12, r16
    21ac:	d1 06       	cpc	r13, r17
    21ae:	34 f0       	brlt	.+12     	; 0x21bc <vfprintf+0x37e>
    21b0:	40 16       	cp	r4, r16
    21b2:	51 06       	cpc	r5, r17
    21b4:	1c f4       	brge	.+6      	; 0x21bc <vfprintf+0x37e>
    21b6:	f7 01       	movw	r30, r14
    21b8:	80 81       	ld	r24, Z
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <vfprintf+0x380>
    21bc:	80 e3       	ldi	r24, 0x30	; 48
    21be:	01 50       	subi	r16, 0x01	; 1
    21c0:	10 40       	sbci	r17, 0x00	; 0
    21c2:	08 94       	sec
    21c4:	e1 1c       	adc	r14, r1
    21c6:	f1 1c       	adc	r15, r1
    21c8:	0a 15       	cp	r16, r10
    21ca:	1b 05       	cpc	r17, r11
    21cc:	2c f0       	brlt	.+10     	; 0x21d8 <vfprintf+0x39a>
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	b3 01       	movw	r22, r6
    21d2:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    21d6:	e0 cf       	rjmp	.-64     	; 0x2198 <vfprintf+0x35a>
    21d8:	0c 15       	cp	r16, r12
    21da:	1d 05       	cpc	r17, r13
    21dc:	39 f4       	brne	.+14     	; 0x21ec <vfprintf+0x3ae>
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	96 33       	cpi	r25, 0x36	; 54
    21e2:	18 f4       	brcc	.+6      	; 0x21ea <vfprintf+0x3ac>
    21e4:	95 33       	cpi	r25, 0x35	; 53
    21e6:	11 f4       	brne	.+4      	; 0x21ec <vfprintf+0x3ae>
    21e8:	24 fe       	sbrs	r2, 4
    21ea:	81 e3       	ldi	r24, 0x31	; 49
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	4b c0       	rjmp	.+150    	; 0x2286 <vfprintf+0x448>
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	81 33       	cpi	r24, 0x31	; 49
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <vfprintf+0x3ba>
    21f6:	0f 7e       	andi	r16, 0xEF	; 239
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	b3 01       	movw	r22, r6
    21fc:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2200:	99 20       	and	r9, r9
    2202:	a1 f0       	breq	.+40     	; 0x222c <vfprintf+0x3ee>
    2204:	8e e2       	ldi	r24, 0x2E	; 46
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	b3 01       	movw	r22, r6
    220a:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    220e:	12 e0       	ldi	r17, 0x02	; 2
    2210:	e1 e0       	ldi	r30, 0x01	; 1
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	ec 0f       	add	r30, r28
    2216:	fd 1f       	adc	r31, r29
    2218:	e1 0f       	add	r30, r17
    221a:	f1 1d       	adc	r31, r1
    221c:	1f 5f       	subi	r17, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	b3 01       	movw	r22, r6
    2224:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2228:	9a 94       	dec	r9
    222a:	91 f7       	brne	.-28     	; 0x2210 <vfprintf+0x3d2>
    222c:	44 fc       	sbrc	r4, 4
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <vfprintf+0x3f8>
    2230:	85 e6       	ldi	r24, 0x65	; 101
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 c0       	rjmp	.+4      	; 0x223a <vfprintf+0x3fc>
    2236:	85 e4       	ldi	r24, 0x45	; 69
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b3 01       	movw	r22, r6
    223c:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2240:	d7 fc       	sbrc	r13, 7
    2242:	05 c0       	rjmp	.+10     	; 0x224e <vfprintf+0x410>
    2244:	c1 14       	cp	r12, r1
    2246:	d1 04       	cpc	r13, r1
    2248:	41 f4       	brne	.+16     	; 0x225a <vfprintf+0x41c>
    224a:	04 ff       	sbrs	r16, 4
    224c:	06 c0       	rjmp	.+12     	; 0x225a <vfprintf+0x41c>
    224e:	d0 94       	com	r13
    2250:	c1 94       	neg	r12
    2252:	d1 08       	sbc	r13, r1
    2254:	d3 94       	inc	r13
    2256:	8d e2       	ldi	r24, 0x2D	; 45
    2258:	01 c0       	rjmp	.+2      	; 0x225c <vfprintf+0x41e>
    225a:	8b e2       	ldi	r24, 0x2B	; 43
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	b3 01       	movw	r22, r6
    2260:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2264:	80 e3       	ldi	r24, 0x30	; 48
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <vfprintf+0x434>
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	26 ef       	ldi	r18, 0xF6	; 246
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	c2 0e       	add	r12, r18
    2270:	d3 1e       	adc	r13, r19
    2272:	3a e0       	ldi	r19, 0x0A	; 10
    2274:	c3 16       	cp	r12, r19
    2276:	d1 04       	cpc	r13, r1
    2278:	bc f7       	brge	.-18     	; 0x2268 <vfprintf+0x42a>
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	b3 01       	movw	r22, r6
    227e:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2282:	c6 01       	movw	r24, r12
    2284:	c0 96       	adiw	r24, 0x30	; 48
    2286:	b3 01       	movw	r22, r6
    2288:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    228c:	cc 84       	ldd	r12, Y+12	; 0x0c
    228e:	dd 84       	ldd	r13, Y+13	; 0x0d
    2290:	52 c1       	rjmp	.+676    	; 0x2536 <vfprintf+0x6f8>
    2292:	93 36       	cpi	r25, 0x63	; 99
    2294:	31 f0       	breq	.+12     	; 0x22a2 <vfprintf+0x464>
    2296:	93 37       	cpi	r25, 0x73	; 115
    2298:	99 f0       	breq	.+38     	; 0x22c0 <vfprintf+0x482>
    229a:	93 35       	cpi	r25, 0x53	; 83
    229c:	09 f0       	breq	.+2      	; 0x22a0 <vfprintf+0x462>
    229e:	59 c0       	rjmp	.+178    	; 0x2352 <vfprintf+0x514>
    22a0:	23 c0       	rjmp	.+70     	; 0x22e8 <vfprintf+0x4aa>
    22a2:	f6 01       	movw	r30, r12
    22a4:	80 81       	ld	r24, Z
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	5e 01       	movw	r10, r28
    22aa:	08 94       	sec
    22ac:	a1 1c       	adc	r10, r1
    22ae:	b1 1c       	adc	r11, r1
    22b0:	22 e0       	ldi	r18, 0x02	; 2
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	c2 0e       	add	r12, r18
    22b6:	d3 1e       	adc	r13, r19
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	e2 2e       	mov	r14, r18
    22bc:	f1 2c       	mov	r15, r1
    22be:	12 c0       	rjmp	.+36     	; 0x22e4 <vfprintf+0x4a6>
    22c0:	f6 01       	movw	r30, r12
    22c2:	a0 80       	ld	r10, Z
    22c4:	b1 80       	ldd	r11, Z+1	; 0x01
    22c6:	16 fd       	sbrc	r17, 6
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <vfprintf+0x492>
    22ca:	6f ef       	ldi	r22, 0xFF	; 255
    22cc:	7f ef       	ldi	r23, 0xFF	; 255
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <vfprintf+0x496>
    22d0:	69 2d       	mov	r22, r9
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	22 e0       	ldi	r18, 0x02	; 2
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	c2 0e       	add	r12, r18
    22da:	d3 1e       	adc	r13, r19
    22dc:	c5 01       	movw	r24, r10
    22de:	0e 94 04 19 	call	0x3208	; 0x3208 <strnlen>
    22e2:	7c 01       	movw	r14, r24
    22e4:	1f 77       	andi	r17, 0x7F	; 127
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <vfprintf+0x4d0>
    22e8:	f6 01       	movw	r30, r12
    22ea:	a0 80       	ld	r10, Z
    22ec:	b1 80       	ldd	r11, Z+1	; 0x01
    22ee:	16 fd       	sbrc	r17, 6
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <vfprintf+0x4ba>
    22f2:	6f ef       	ldi	r22, 0xFF	; 255
    22f4:	7f ef       	ldi	r23, 0xFF	; 255
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <vfprintf+0x4be>
    22f8:	69 2d       	mov	r22, r9
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	22 e0       	ldi	r18, 0x02	; 2
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	c2 0e       	add	r12, r18
    2302:	d3 1e       	adc	r13, r19
    2304:	c5 01       	movw	r24, r10
    2306:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <strnlen_P>
    230a:	7c 01       	movw	r14, r24
    230c:	10 68       	ori	r17, 0x80	; 128
    230e:	13 ff       	sbrs	r17, 3
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <vfprintf+0x4e2>
    2312:	1b c0       	rjmp	.+54     	; 0x234a <vfprintf+0x50c>
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	b3 01       	movw	r22, r6
    231a:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    231e:	8a 94       	dec	r8
    2320:	88 2d       	mov	r24, r8
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	e8 16       	cp	r14, r24
    2326:	f9 06       	cpc	r15, r25
    2328:	a8 f3       	brcs	.-22     	; 0x2314 <vfprintf+0x4d6>
    232a:	0f c0       	rjmp	.+30     	; 0x234a <vfprintf+0x50c>
    232c:	f5 01       	movw	r30, r10
    232e:	17 fd       	sbrc	r17, 7
    2330:	85 91       	lpm	r24, Z+
    2332:	17 ff       	sbrs	r17, 7
    2334:	81 91       	ld	r24, Z+
    2336:	5f 01       	movw	r10, r30
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	b3 01       	movw	r22, r6
    233c:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2340:	81 10       	cpse	r8, r1
    2342:	8a 94       	dec	r8
    2344:	08 94       	sec
    2346:	e1 08       	sbc	r14, r1
    2348:	f1 08       	sbc	r15, r1
    234a:	e1 14       	cp	r14, r1
    234c:	f1 04       	cpc	r15, r1
    234e:	71 f7       	brne	.-36     	; 0x232c <vfprintf+0x4ee>
    2350:	f2 c0       	rjmp	.+484    	; 0x2536 <vfprintf+0x6f8>
    2352:	94 36       	cpi	r25, 0x64	; 100
    2354:	11 f0       	breq	.+4      	; 0x235a <vfprintf+0x51c>
    2356:	99 36       	cpi	r25, 0x69	; 105
    2358:	89 f5       	brne	.+98     	; 0x23bc <vfprintf+0x57e>
    235a:	17 ff       	sbrs	r17, 7
    235c:	08 c0       	rjmp	.+16     	; 0x236e <vfprintf+0x530>
    235e:	f6 01       	movw	r30, r12
    2360:	20 81       	ld	r18, Z
    2362:	31 81       	ldd	r19, Z+1	; 0x01
    2364:	42 81       	ldd	r20, Z+2	; 0x02
    2366:	53 81       	ldd	r21, Z+3	; 0x03
    2368:	84 e0       	ldi	r24, 0x04	; 4
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0a c0       	rjmp	.+20     	; 0x2382 <vfprintf+0x544>
    236e:	f6 01       	movw	r30, r12
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	9c 01       	movw	r18, r24
    2376:	44 27       	eor	r20, r20
    2378:	37 fd       	sbrc	r19, 7
    237a:	40 95       	com	r20
    237c:	54 2f       	mov	r21, r20
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	c8 0e       	add	r12, r24
    2384:	d9 1e       	adc	r13, r25
    2386:	9f e6       	ldi	r25, 0x6F	; 111
    2388:	f9 2e       	mov	r15, r25
    238a:	f1 22       	and	r15, r17
    238c:	57 ff       	sbrs	r21, 7
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <vfprintf+0x564>
    2390:	50 95       	com	r21
    2392:	40 95       	com	r20
    2394:	30 95       	com	r19
    2396:	21 95       	neg	r18
    2398:	3f 4f       	sbci	r19, 0xFF	; 255
    239a:	4f 4f       	sbci	r20, 0xFF	; 255
    239c:	5f 4f       	sbci	r21, 0xFF	; 255
    239e:	90 e8       	ldi	r25, 0x80	; 128
    23a0:	f9 2a       	or	r15, r25
    23a2:	ca 01       	movw	r24, r20
    23a4:	b9 01       	movw	r22, r18
    23a6:	ae 01       	movw	r20, r28
    23a8:	4f 5f       	subi	r20, 0xFF	; 255
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	2a e0       	ldi	r18, 0x0A	; 10
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	0e 94 0c 1a 	call	0x3418	; 0x3418 <__ultoa_invert>
    23b4:	e8 2e       	mov	r14, r24
    23b6:	e8 89       	ldd	r30, Y+16	; 0x10
    23b8:	ee 1a       	sub	r14, r30
    23ba:	41 c0       	rjmp	.+130    	; 0x243e <vfprintf+0x600>
    23bc:	95 37       	cpi	r25, 0x75	; 117
    23be:	21 f4       	brne	.+8      	; 0x23c8 <vfprintf+0x58a>
    23c0:	1f 7e       	andi	r17, 0xEF	; 239
    23c2:	2a e0       	ldi	r18, 0x0A	; 10
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	1c c0       	rjmp	.+56     	; 0x2400 <vfprintf+0x5c2>
    23c8:	19 7f       	andi	r17, 0xF9	; 249
    23ca:	9f 36       	cpi	r25, 0x6F	; 111
    23cc:	61 f0       	breq	.+24     	; 0x23e6 <vfprintf+0x5a8>
    23ce:	90 37       	cpi	r25, 0x70	; 112
    23d0:	20 f4       	brcc	.+8      	; 0x23da <vfprintf+0x59c>
    23d2:	98 35       	cpi	r25, 0x58	; 88
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <vfprintf+0x59a>
    23d6:	b2 c0       	rjmp	.+356    	; 0x253c <vfprintf+0x6fe>
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <vfprintf+0x5ba>
    23da:	90 37       	cpi	r25, 0x70	; 112
    23dc:	39 f0       	breq	.+14     	; 0x23ec <vfprintf+0x5ae>
    23de:	98 37       	cpi	r25, 0x78	; 120
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <vfprintf+0x5a6>
    23e2:	ac c0       	rjmp	.+344    	; 0x253c <vfprintf+0x6fe>
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x5b0>
    23e6:	28 e0       	ldi	r18, 0x08	; 8
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	0a c0       	rjmp	.+20     	; 0x2400 <vfprintf+0x5c2>
    23ec:	10 61       	ori	r17, 0x10	; 16
    23ee:	14 fd       	sbrc	r17, 4
    23f0:	14 60       	ori	r17, 0x04	; 4
    23f2:	20 e1       	ldi	r18, 0x10	; 16
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	04 c0       	rjmp	.+8      	; 0x2400 <vfprintf+0x5c2>
    23f8:	14 fd       	sbrc	r17, 4
    23fa:	16 60       	ori	r17, 0x06	; 6
    23fc:	20 e1       	ldi	r18, 0x10	; 16
    23fe:	32 e0       	ldi	r19, 0x02	; 2
    2400:	17 ff       	sbrs	r17, 7
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <vfprintf+0x5d6>
    2404:	f6 01       	movw	r30, r12
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	44 e0       	ldi	r20, 0x04	; 4
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	08 c0       	rjmp	.+16     	; 0x2424 <vfprintf+0x5e6>
    2414:	f6 01       	movw	r30, r12
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	bc 01       	movw	r22, r24
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	42 e0       	ldi	r20, 0x02	; 2
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	c4 0e       	add	r12, r20
    2426:	d5 1e       	adc	r13, r21
    2428:	ae 01       	movw	r20, r28
    242a:	4f 5f       	subi	r20, 0xFF	; 255
    242c:	5f 4f       	sbci	r21, 0xFF	; 255
    242e:	0e 94 0c 1a 	call	0x3418	; 0x3418 <__ultoa_invert>
    2432:	e8 2e       	mov	r14, r24
    2434:	58 89       	ldd	r21, Y+16	; 0x10
    2436:	e5 1a       	sub	r14, r21
    2438:	8f e7       	ldi	r24, 0x7F	; 127
    243a:	f8 2e       	mov	r15, r24
    243c:	f1 22       	and	r15, r17
    243e:	f6 fe       	sbrs	r15, 6
    2440:	0b c0       	rjmp	.+22     	; 0x2458 <vfprintf+0x61a>
    2442:	8e ef       	ldi	r24, 0xFE	; 254
    2444:	f8 22       	and	r15, r24
    2446:	e9 14       	cp	r14, r9
    2448:	38 f4       	brcc	.+14     	; 0x2458 <vfprintf+0x61a>
    244a:	f4 fe       	sbrs	r15, 4
    244c:	07 c0       	rjmp	.+14     	; 0x245c <vfprintf+0x61e>
    244e:	f2 fc       	sbrc	r15, 2
    2450:	05 c0       	rjmp	.+10     	; 0x245c <vfprintf+0x61e>
    2452:	9f ee       	ldi	r25, 0xEF	; 239
    2454:	f9 22       	and	r15, r25
    2456:	02 c0       	rjmp	.+4      	; 0x245c <vfprintf+0x61e>
    2458:	1e 2d       	mov	r17, r14
    245a:	01 c0       	rjmp	.+2      	; 0x245e <vfprintf+0x620>
    245c:	19 2d       	mov	r17, r9
    245e:	f4 fe       	sbrs	r15, 4
    2460:	0d c0       	rjmp	.+26     	; 0x247c <vfprintf+0x63e>
    2462:	fe 01       	movw	r30, r28
    2464:	ee 0d       	add	r30, r14
    2466:	f1 1d       	adc	r31, r1
    2468:	80 81       	ld	r24, Z
    246a:	80 33       	cpi	r24, 0x30	; 48
    246c:	19 f4       	brne	.+6      	; 0x2474 <vfprintf+0x636>
    246e:	e9 ee       	ldi	r30, 0xE9	; 233
    2470:	fe 22       	and	r15, r30
    2472:	08 c0       	rjmp	.+16     	; 0x2484 <vfprintf+0x646>
    2474:	1f 5f       	subi	r17, 0xFF	; 255
    2476:	f2 fe       	sbrs	r15, 2
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <vfprintf+0x646>
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <vfprintf+0x644>
    247c:	8f 2d       	mov	r24, r15
    247e:	86 78       	andi	r24, 0x86	; 134
    2480:	09 f0       	breq	.+2      	; 0x2484 <vfprintf+0x646>
    2482:	1f 5f       	subi	r17, 0xFF	; 255
    2484:	0f 2d       	mov	r16, r15
    2486:	f3 fc       	sbrc	r15, 3
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <vfprintf+0x674>
    248a:	f0 fe       	sbrs	r15, 0
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <vfprintf+0x66e>
    248e:	18 15       	cp	r17, r8
    2490:	10 f0       	brcs	.+4      	; 0x2496 <vfprintf+0x658>
    2492:	9e 2c       	mov	r9, r14
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <vfprintf+0x66e>
    2496:	9e 2c       	mov	r9, r14
    2498:	98 0c       	add	r9, r8
    249a:	91 1a       	sub	r9, r17
    249c:	18 2d       	mov	r17, r8
    249e:	06 c0       	rjmp	.+12     	; 0x24ac <vfprintf+0x66e>
    24a0:	80 e2       	ldi	r24, 0x20	; 32
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	b3 01       	movw	r22, r6
    24a6:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    24aa:	1f 5f       	subi	r17, 0xFF	; 255
    24ac:	18 15       	cp	r17, r8
    24ae:	c0 f3       	brcs	.-16     	; 0x24a0 <vfprintf+0x662>
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <vfprintf+0x67c>
    24b2:	18 15       	cp	r17, r8
    24b4:	10 f4       	brcc	.+4      	; 0x24ba <vfprintf+0x67c>
    24b6:	81 1a       	sub	r8, r17
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <vfprintf+0x67e>
    24ba:	88 24       	eor	r8, r8
    24bc:	04 ff       	sbrs	r16, 4
    24be:	0f c0       	rjmp	.+30     	; 0x24de <vfprintf+0x6a0>
    24c0:	80 e3       	ldi	r24, 0x30	; 48
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	b3 01       	movw	r22, r6
    24c6:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    24ca:	02 ff       	sbrs	r16, 2
    24cc:	1d c0       	rjmp	.+58     	; 0x2508 <vfprintf+0x6ca>
    24ce:	01 fd       	sbrc	r16, 1
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <vfprintf+0x69a>
    24d2:	88 e7       	ldi	r24, 0x78	; 120
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e c0       	rjmp	.+28     	; 0x24f4 <vfprintf+0x6b6>
    24d8:	88 e5       	ldi	r24, 0x58	; 88
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0b c0       	rjmp	.+22     	; 0x24f4 <vfprintf+0x6b6>
    24de:	80 2f       	mov	r24, r16
    24e0:	86 78       	andi	r24, 0x86	; 134
    24e2:	91 f0       	breq	.+36     	; 0x2508 <vfprintf+0x6ca>
    24e4:	01 ff       	sbrs	r16, 1
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <vfprintf+0x6ae>
    24e8:	8b e2       	ldi	r24, 0x2B	; 43
    24ea:	01 c0       	rjmp	.+2      	; 0x24ee <vfprintf+0x6b0>
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	f7 fc       	sbrc	r15, 7
    24f0:	8d e2       	ldi	r24, 0x2D	; 45
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	b3 01       	movw	r22, r6
    24f6:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <vfprintf+0x6ca>
    24fc:	80 e3       	ldi	r24, 0x30	; 48
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	b3 01       	movw	r22, r6
    2502:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2506:	9a 94       	dec	r9
    2508:	e9 14       	cp	r14, r9
    250a:	c0 f3       	brcs	.-16     	; 0x24fc <vfprintf+0x6be>
    250c:	ea 94       	dec	r14
    250e:	e1 e0       	ldi	r30, 0x01	; 1
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ec 0f       	add	r30, r28
    2514:	fd 1f       	adc	r31, r29
    2516:	ee 0d       	add	r30, r14
    2518:	f1 1d       	adc	r31, r1
    251a:	80 81       	ld	r24, Z
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	b3 01       	movw	r22, r6
    2520:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2524:	ee 20       	and	r14, r14
    2526:	91 f7       	brne	.-28     	; 0x250c <vfprintf+0x6ce>
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <vfprintf+0x6f8>
    252a:	80 e2       	ldi	r24, 0x20	; 32
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	b3 01       	movw	r22, r6
    2530:	0e 94 65 19 	call	0x32ca	; 0x32ca <fputc>
    2534:	8a 94       	dec	r8
    2536:	88 20       	and	r8, r8
    2538:	c1 f7       	brne	.-16     	; 0x252a <vfprintf+0x6ec>
    253a:	99 cc       	rjmp	.-1742   	; 0x1e6e <vfprintf+0x30>
    253c:	f3 01       	movw	r30, r6
    253e:	66 81       	ldd	r22, Z+6	; 0x06
    2540:	77 81       	ldd	r23, Z+7	; 0x07
    2542:	cb 01       	movw	r24, r22
    2544:	61 96       	adiw	r28, 0x11	; 17
    2546:	e2 e1       	ldi	r30, 0x12	; 18
    2548:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__>

0000254c <putval>:
    254c:	fc 01       	movw	r30, r24
    254e:	20 fd       	sbrc	r18, 0
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <putval+0x16>
    2552:	23 fd       	sbrc	r18, 3
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <putval+0x14>
    2556:	22 ff       	sbrs	r18, 2
    2558:	02 c0       	rjmp	.+4      	; 0x255e <putval+0x12>
    255a:	73 83       	std	Z+3, r23	; 0x03
    255c:	62 83       	std	Z+2, r22	; 0x02
    255e:	51 83       	std	Z+1, r21	; 0x01
    2560:	40 83       	st	Z, r20
    2562:	08 95       	ret

00002564 <mulacc>:
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	44 ff       	sbrs	r20, 4
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <mulacc+0x10>
    2570:	33 e0       	ldi	r19, 0x03	; 3
    2572:	11 c0       	rjmp	.+34     	; 0x2596 <mulacc+0x32>
    2574:	46 ff       	sbrs	r20, 6
    2576:	02 c0       	rjmp	.+4      	; 0x257c <mulacc+0x18>
    2578:	34 e0       	ldi	r19, 0x04	; 4
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <mulacc+0x32>
    257c:	db 01       	movw	r26, r22
    257e:	fc 01       	movw	r30, r24
    2580:	aa 0f       	add	r26, r26
    2582:	bb 1f       	adc	r27, r27
    2584:	ee 1f       	adc	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	10 94       	com	r1
    258a:	d1 f7       	brne	.-12     	; 0x2580 <mulacc+0x1c>
    258c:	6a 0f       	add	r22, r26
    258e:	7b 1f       	adc	r23, r27
    2590:	8e 1f       	adc	r24, r30
    2592:	9f 1f       	adc	r25, r31
    2594:	31 e0       	ldi	r19, 0x01	; 1
    2596:	66 0f       	add	r22, r22
    2598:	77 1f       	adc	r23, r23
    259a:	88 1f       	adc	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	31 50       	subi	r19, 0x01	; 1
    25a0:	d1 f7       	brne	.-12     	; 0x2596 <mulacc+0x32>
    25a2:	7b 01       	movw	r14, r22
    25a4:	8c 01       	movw	r16, r24
    25a6:	e2 0e       	add	r14, r18
    25a8:	f1 1c       	adc	r15, r1
    25aa:	01 1d       	adc	r16, r1
    25ac:	11 1d       	adc	r17, r1
    25ae:	a8 01       	movw	r20, r16
    25b0:	97 01       	movw	r18, r14
    25b2:	b7 01       	movw	r22, r14
    25b4:	ca 01       	movw	r24, r20
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	08 95       	ret

000025c0 <skip_spaces>:
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	8c 01       	movw	r16, r24
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    25d0:	ec 01       	movw	r28, r24
    25d2:	97 fd       	sbrc	r25, 7
    25d4:	08 c0       	rjmp	.+16     	; 0x25e6 <skip_spaces+0x26>
    25d6:	0e 94 de 18 	call	0x31bc	; 0x31bc <isspace>
    25da:	89 2b       	or	r24, r25
    25dc:	b1 f7       	brne	.-20     	; 0x25ca <skip_spaces+0xa>
    25de:	ce 01       	movw	r24, r28
    25e0:	b8 01       	movw	r22, r16
    25e2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    25e6:	ce 01       	movw	r24, r28
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	08 95       	ret

000025f2 <conv_int>:
    25f2:	8f 92       	push	r8
    25f4:	9f 92       	push	r9
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	5c 01       	movw	r10, r24
    260a:	eb 01       	movw	r28, r22
    260c:	4a 01       	movw	r8, r20
    260e:	12 2f       	mov	r17, r18
    2610:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2614:	ac 01       	movw	r20, r24
    2616:	8b 32       	cpi	r24, 0x2B	; 43
    2618:	19 f0       	breq	.+6      	; 0x2620 <conv_int+0x2e>
    261a:	8d 32       	cpi	r24, 0x2D	; 45
    261c:	51 f4       	brne	.+20     	; 0x2632 <conv_int+0x40>
    261e:	10 68       	ori	r17, 0x80	; 128
    2620:	21 97       	sbiw	r28, 0x01	; 1
    2622:	09 f4       	brne	.+2      	; 0x2626 <conv_int+0x34>
    2624:	6d c0       	rjmp	.+218    	; 0x2700 <conv_int+0x10e>
    2626:	c5 01       	movw	r24, r10
    2628:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    262c:	ac 01       	movw	r20, r24
    262e:	97 fd       	sbrc	r25, 7
    2630:	67 c0       	rjmp	.+206    	; 0x2700 <conv_int+0x10e>
    2632:	6d ef       	ldi	r22, 0xFD	; 253
    2634:	d6 2e       	mov	r13, r22
    2636:	d1 22       	and	r13, r17
    2638:	8d 2d       	mov	r24, r13
    263a:	80 73       	andi	r24, 0x30	; 48
    263c:	01 f5       	brne	.+64     	; 0x267e <conv_int+0x8c>
    263e:	40 33       	cpi	r20, 0x30	; 48
    2640:	f1 f4       	brne	.+60     	; 0x267e <conv_int+0x8c>
    2642:	21 97       	sbiw	r28, 0x01	; 1
    2644:	09 f4       	brne	.+2      	; 0x2648 <conv_int+0x56>
    2646:	47 c0       	rjmp	.+142    	; 0x26d6 <conv_int+0xe4>
    2648:	c5 01       	movw	r24, r10
    264a:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    264e:	ac 01       	movw	r20, r24
    2650:	97 fd       	sbrc	r25, 7
    2652:	41 c0       	rjmp	.+130    	; 0x26d6 <conv_int+0xe4>
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	d8 2a       	or	r13, r24
    2658:	48 37       	cpi	r20, 0x78	; 120
    265a:	11 f0       	breq	.+4      	; 0x2660 <conv_int+0x6e>
    265c:	48 35       	cpi	r20, 0x58	; 88
    265e:	59 f4       	brne	.+22     	; 0x2676 <conv_int+0x84>
    2660:	80 e4       	ldi	r24, 0x40	; 64
    2662:	d8 2a       	or	r13, r24
    2664:	21 97       	sbiw	r28, 0x01	; 1
    2666:	b9 f1       	breq	.+110    	; 0x26d6 <conv_int+0xe4>
    2668:	c5 01       	movw	r24, r10
    266a:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    266e:	ac 01       	movw	r20, r24
    2670:	99 23       	and	r25, r25
    2672:	2c f4       	brge	.+10     	; 0x267e <conv_int+0x8c>
    2674:	30 c0       	rjmp	.+96     	; 0x26d6 <conv_int+0xe4>
    2676:	d6 fc       	sbrc	r13, 6
    2678:	02 c0       	rjmp	.+4      	; 0x267e <conv_int+0x8c>
    267a:	80 e1       	ldi	r24, 0x10	; 16
    267c:	d8 2a       	or	r13, r24
    267e:	ee 24       	eor	r14, r14
    2680:	ff 24       	eor	r15, r15
    2682:	87 01       	movw	r16, r14
    2684:	24 2f       	mov	r18, r20
    2686:	20 53       	subi	r18, 0x30	; 48
    2688:	28 30       	cpi	r18, 0x08	; 8
    268a:	88 f0       	brcs	.+34     	; 0x26ae <conv_int+0xbc>
    268c:	d4 fc       	sbrc	r13, 4
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <conv_int+0xb0>
    2690:	2a 30       	cpi	r18, 0x0A	; 10
    2692:	68 f0       	brcs	.+26     	; 0x26ae <conv_int+0xbc>
    2694:	d6 fe       	sbrs	r13, 6
    2696:	05 c0       	rjmp	.+10     	; 0x26a2 <conv_int+0xb0>
    2698:	2f 7d       	andi	r18, 0xDF	; 223
    269a:	82 2f       	mov	r24, r18
    269c:	81 51       	subi	r24, 0x11	; 17
    269e:	86 30       	cpi	r24, 0x06	; 6
    26a0:	28 f0       	brcs	.+10     	; 0x26ac <conv_int+0xba>
    26a2:	ca 01       	movw	r24, r20
    26a4:	b5 01       	movw	r22, r10
    26a6:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    26aa:	12 c0       	rjmp	.+36     	; 0x26d0 <conv_int+0xde>
    26ac:	27 50       	subi	r18, 0x07	; 7
    26ae:	c8 01       	movw	r24, r16
    26b0:	b7 01       	movw	r22, r14
    26b2:	4d 2d       	mov	r20, r13
    26b4:	0e 94 b2 12 	call	0x2564	; 0x2564 <mulacc>
    26b8:	7b 01       	movw	r14, r22
    26ba:	8c 01       	movw	r16, r24
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	d8 2a       	or	r13, r24
    26c0:	21 97       	sbiw	r28, 0x01	; 1
    26c2:	61 f0       	breq	.+24     	; 0x26dc <conv_int+0xea>
    26c4:	c5 01       	movw	r24, r10
    26c6:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    26ca:	ac 01       	movw	r20, r24
    26cc:	97 ff       	sbrs	r25, 7
    26ce:	da cf       	rjmp	.-76     	; 0x2684 <conv_int+0x92>
    26d0:	d1 fc       	sbrc	r13, 1
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <conv_int+0xea>
    26d4:	15 c0       	rjmp	.+42     	; 0x2700 <conv_int+0x10e>
    26d6:	ee 24       	eor	r14, r14
    26d8:	ff 24       	eor	r15, r15
    26da:	87 01       	movw	r16, r14
    26dc:	d7 fe       	sbrs	r13, 7
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <conv_int+0xfe>
    26e0:	10 95       	com	r17
    26e2:	00 95       	com	r16
    26e4:	f0 94       	com	r15
    26e6:	e0 94       	com	r14
    26e8:	e1 1c       	adc	r14, r1
    26ea:	f1 1c       	adc	r15, r1
    26ec:	01 1d       	adc	r16, r1
    26ee:	11 1d       	adc	r17, r1
    26f0:	c4 01       	movw	r24, r8
    26f2:	b8 01       	movw	r22, r16
    26f4:	a7 01       	movw	r20, r14
    26f6:	2d 2d       	mov	r18, r13
    26f8:	0e 94 a6 12 	call	0x254c	; 0x254c <putval>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <conv_int+0x110>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	bf 90       	pop	r11
    2712:	af 90       	pop	r10
    2714:	9f 90       	pop	r9
    2716:	8f 90       	pop	r8
    2718:	08 95       	ret

0000271a <conv_brk>:
    271a:	a0 e2       	ldi	r26, 0x20	; 32
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e9       	ldi	r30, 0x93	; 147
    2720:	f3 e1       	ldi	r31, 0x13	; 19
    2722:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x8>
    2726:	5c 01       	movw	r10, r24
    2728:	6b 01       	movw	r12, r22
    272a:	8a 01       	movw	r16, r20
    272c:	79 01       	movw	r14, r18
    272e:	fe 01       	movw	r30, r28
    2730:	31 96       	adiw	r30, 0x01	; 1
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	df 01       	movw	r26, r30
    2736:	1d 92       	st	X+, r1
    2738:	8a 95       	dec	r24
    273a:	e9 f7       	brne	.-6      	; 0x2736 <conv_brk+0x1c>
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	3f 01       	movw	r6, r30
    2748:	a1 e0       	ldi	r26, 0x01	; 1
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	f5 01       	movw	r30, r10
    274e:	83 81       	ldd	r24, Z+3	; 0x03
    2750:	f7 01       	movw	r30, r14
    2752:	83 fd       	sbrc	r24, 3
    2754:	25 91       	lpm	r18, Z+
    2756:	83 ff       	sbrs	r24, 3
    2758:	21 91       	ld	r18, Z+
    275a:	7f 01       	movw	r14, r30
    275c:	22 23       	and	r18, r18
    275e:	09 f4       	brne	.+2      	; 0x2762 <conv_brk+0x48>
    2760:	81 c0       	rjmp	.+258    	; 0x2864 <conv_brk+0x14a>
    2762:	2e 35       	cpi	r18, 0x5E	; 94
    2764:	19 f4       	brne	.+6      	; 0x276c <conv_brk+0x52>
    2766:	41 15       	cp	r20, r1
    2768:	51 05       	cpc	r21, r1
    276a:	69 f1       	breq	.+90     	; 0x27c6 <conv_brk+0xac>
    276c:	87 2f       	mov	r24, r23
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	84 17       	cp	r24, r20
    2772:	95 07       	cpc	r25, r21
    2774:	44 f4       	brge	.+16     	; 0x2786 <conv_brk+0x6c>
    2776:	2d 35       	cpi	r18, 0x5D	; 93
    2778:	51 f1       	breq	.+84     	; 0x27ce <conv_brk+0xb4>
    277a:	2d 32       	cpi	r18, 0x2D	; 45
    277c:	21 f4       	brne	.+8      	; 0x2786 <conv_brk+0x6c>
    277e:	33 23       	and	r19, r19
    2780:	29 f4       	brne	.+10     	; 0x278c <conv_brk+0x72>
    2782:	31 e0       	ldi	r19, 0x01	; 1
    2784:	21 c0       	rjmp	.+66     	; 0x27c8 <conv_brk+0xae>
    2786:	33 23       	and	r19, r19
    2788:	09 f4       	brne	.+2      	; 0x278c <conv_brk+0x72>
    278a:	62 2f       	mov	r22, r18
    278c:	32 2f       	mov	r19, r18
    278e:	83 2f       	mov	r24, r19
    2790:	86 95       	lsr	r24
    2792:	86 95       	lsr	r24
    2794:	86 95       	lsr	r24
    2796:	f3 01       	movw	r30, r6
    2798:	e8 0f       	add	r30, r24
    279a:	f1 1d       	adc	r31, r1
    279c:	83 2f       	mov	r24, r19
    279e:	87 70       	andi	r24, 0x07	; 7
    27a0:	4d 01       	movw	r8, r26
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <conv_brk+0x8e>
    27a4:	88 0c       	add	r8, r8
    27a6:	99 1c       	adc	r9, r9
    27a8:	8a 95       	dec	r24
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <conv_brk+0x8a>
    27ac:	20 81       	ld	r18, Z
    27ae:	28 29       	or	r18, r8
    27b0:	20 83       	st	Z, r18
    27b2:	36 17       	cp	r19, r22
    27b4:	11 f4       	brne	.+4      	; 0x27ba <conv_brk+0xa0>
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	07 c0       	rjmp	.+14     	; 0x27c8 <conv_brk+0xae>
    27ba:	36 17       	cp	r19, r22
    27bc:	10 f4       	brcc	.+4      	; 0x27c2 <conv_brk+0xa8>
    27be:	3f 5f       	subi	r19, 0xFF	; 255
    27c0:	e6 cf       	rjmp	.-52     	; 0x278e <conv_brk+0x74>
    27c2:	31 50       	subi	r19, 0x01	; 1
    27c4:	e4 cf       	rjmp	.-56     	; 0x278e <conv_brk+0x74>
    27c6:	71 e0       	ldi	r23, 0x01	; 1
    27c8:	4f 5f       	subi	r20, 0xFF	; 255
    27ca:	5f 4f       	sbci	r21, 0xFF	; 255
    27cc:	bf cf       	rjmp	.-130    	; 0x274c <conv_brk+0x32>
    27ce:	33 23       	and	r19, r19
    27d0:	19 f0       	breq	.+6      	; 0x27d8 <conv_brk+0xbe>
    27d2:	8e 81       	ldd	r24, Y+6	; 0x06
    27d4:	80 62       	ori	r24, 0x20	; 32
    27d6:	8e 83       	std	Y+6, r24	; 0x06
    27d8:	77 23       	and	r23, r23
    27da:	59 f0       	breq	.+22     	; 0x27f2 <conv_brk+0xd8>
    27dc:	fe 01       	movw	r30, r28
    27de:	31 96       	adiw	r30, 0x01	; 1
    27e0:	9e 01       	movw	r18, r28
    27e2:	2f 5d       	subi	r18, 0xDF	; 223
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	80 95       	com	r24
    27ea:	81 93       	st	Z+, r24
    27ec:	e2 17       	cp	r30, r18
    27ee:	f3 07       	cpc	r31, r19
    27f0:	d1 f7       	brne	.-12     	; 0x27e6 <conv_brk+0xcc>
    27f2:	99 24       	eor	r9, r9
    27f4:	93 94       	inc	r9
    27f6:	3e 01       	movw	r6, r28
    27f8:	08 94       	sec
    27fa:	61 1c       	adc	r6, r1
    27fc:	71 1c       	adc	r7, r1
    27fe:	c5 01       	movw	r24, r10
    2800:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2804:	ac 01       	movw	r20, r24
    2806:	97 fd       	sbrc	r25, 7
    2808:	25 c0       	rjmp	.+74     	; 0x2854 <conv_brk+0x13a>
    280a:	86 95       	lsr	r24
    280c:	86 95       	lsr	r24
    280e:	86 95       	lsr	r24
    2810:	f3 01       	movw	r30, r6
    2812:	e8 0f       	add	r30, r24
    2814:	f1 1d       	adc	r31, r1
    2816:	80 81       	ld	r24, Z
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9a 01       	movw	r18, r20
    281c:	27 70       	andi	r18, 0x07	; 7
    281e:	30 70       	andi	r19, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <conv_brk+0x10c>
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	2a 95       	dec	r18
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <conv_brk+0x108>
    282a:	80 fd       	sbrc	r24, 0
    282c:	05 c0       	rjmp	.+10     	; 0x2838 <conv_brk+0x11e>
    282e:	ca 01       	movw	r24, r20
    2830:	b5 01       	movw	r22, r10
    2832:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    2836:	0e c0       	rjmp	.+28     	; 0x2854 <conv_brk+0x13a>
    2838:	01 15       	cp	r16, r1
    283a:	11 05       	cpc	r17, r1
    283c:	19 f0       	breq	.+6      	; 0x2844 <conv_brk+0x12a>
    283e:	d8 01       	movw	r26, r16
    2840:	4d 93       	st	X+, r20
    2842:	8d 01       	movw	r16, r26
    2844:	08 94       	sec
    2846:	c1 08       	sbc	r12, r1
    2848:	d1 08       	sbc	r13, r1
    284a:	99 24       	eor	r9, r9
    284c:	c1 14       	cp	r12, r1
    284e:	d1 04       	cpc	r13, r1
    2850:	b1 f6       	brne	.-84     	; 0x27fe <conv_brk+0xe4>
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <conv_brk+0x13e>
    2854:	99 20       	and	r9, r9
    2856:	31 f4       	brne	.+12     	; 0x2864 <conv_brk+0x14a>
    2858:	01 15       	cp	r16, r1
    285a:	11 05       	cpc	r17, r1
    285c:	29 f0       	breq	.+10     	; 0x2868 <conv_brk+0x14e>
    285e:	f8 01       	movw	r30, r16
    2860:	10 82       	st	Z, r1
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <conv_brk+0x14e>
    2864:	ee 24       	eor	r14, r14
    2866:	ff 24       	eor	r15, r15
    2868:	c7 01       	movw	r24, r14
    286a:	a0 96       	adiw	r28, 0x20	; 32
    286c:	ee e0       	ldi	r30, 0x0E	; 14
    286e:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x8>

00002872 <conv_flt>:
    2872:	2f 92       	push	r2
    2874:	3f 92       	push	r3
    2876:	5f 92       	push	r5
    2878:	6f 92       	push	r6
    287a:	7f 92       	push	r7
    287c:	8f 92       	push	r8
    287e:	9f 92       	push	r9
    2880:	af 92       	push	r10
    2882:	bf 92       	push	r11
    2884:	cf 92       	push	r12
    2886:	df 92       	push	r13
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	3c 01       	movw	r6, r24
    2896:	7b 01       	movw	r14, r22
    2898:	1a 01       	movw	r2, r20
    289a:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    289e:	ec 01       	movw	r28, r24
    28a0:	8b 32       	cpi	r24, 0x2B	; 43
    28a2:	39 f0       	breq	.+14     	; 0x28b2 <conv_flt+0x40>
    28a4:	8d 32       	cpi	r24, 0x2D	; 45
    28a6:	11 f0       	breq	.+4      	; 0x28ac <conv_flt+0x3a>
    28a8:	55 24       	eor	r5, r5
    28aa:	11 c0       	rjmp	.+34     	; 0x28ce <conv_flt+0x5c>
    28ac:	b0 e8       	ldi	r27, 0x80	; 128
    28ae:	5b 2e       	mov	r5, r27
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <conv_flt+0x42>
    28b2:	55 24       	eor	r5, r5
    28b4:	08 94       	sec
    28b6:	e1 08       	sbc	r14, r1
    28b8:	f1 08       	sbc	r15, r1
    28ba:	e1 14       	cp	r14, r1
    28bc:	f1 04       	cpc	r15, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <conv_flt+0x50>
    28c0:	18 c1       	rjmp	.+560    	; 0x2af2 <conv_flt+0x280>
    28c2:	c3 01       	movw	r24, r6
    28c4:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    28c8:	ec 01       	movw	r28, r24
    28ca:	97 fd       	sbrc	r25, 7
    28cc:	12 c1       	rjmp	.+548    	; 0x2af2 <conv_flt+0x280>
    28ce:	ce 01       	movw	r24, r28
    28d0:	0e 94 e6 18 	call	0x31cc	; 0x31cc <tolower>
    28d4:	89 36       	cpi	r24, 0x69	; 105
    28d6:	91 05       	cpc	r25, r1
    28d8:	21 f0       	breq	.+8      	; 0x28e2 <conv_flt+0x70>
    28da:	8e 36       	cpi	r24, 0x6E	; 110
    28dc:	91 05       	cpc	r25, r1
    28de:	99 f5       	brne	.+102    	; 0x2946 <conv_flt+0xd4>
    28e0:	1d c0       	rjmp	.+58     	; 0x291c <conv_flt+0xaa>
    28e2:	0d e8       	ldi	r16, 0x8D	; 141
    28e4:	10 e0       	ldi	r17, 0x00	; 0
    28e6:	1c c0       	rjmp	.+56     	; 0x2920 <conv_flt+0xae>
    28e8:	08 94       	sec
    28ea:	e1 08       	sbc	r14, r1
    28ec:	f1 08       	sbc	r15, r1
    28ee:	e1 14       	cp	r14, r1
    28f0:	f1 04       	cpc	r15, r1
    28f2:	71 f0       	breq	.+28     	; 0x2910 <conv_flt+0x9e>
    28f4:	c3 01       	movw	r24, r6
    28f6:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    28fa:	ec 01       	movw	r28, r24
    28fc:	97 fd       	sbrc	r25, 7
    28fe:	08 c0       	rjmp	.+16     	; 0x2910 <conv_flt+0x9e>
    2900:	0e 94 e6 18 	call	0x31cc	; 0x31cc <tolower>
    2904:	d8 16       	cp	r13, r24
    2906:	61 f0       	breq	.+24     	; 0x2920 <conv_flt+0xae>
    2908:	ce 01       	movw	r24, r28
    290a:	b3 01       	movw	r22, r6
    290c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	00 39       	cpi	r16, 0x90	; 144
    2914:	12 07       	cpc	r17, r18
    2916:	09 f0       	breq	.+2      	; 0x291a <conv_flt+0xa8>
    2918:	ec c0       	rjmp	.+472    	; 0x2af2 <conv_flt+0x280>
    291a:	08 c0       	rjmp	.+16     	; 0x292c <conv_flt+0xba>
    291c:	0a e8       	ldi	r16, 0x8A	; 138
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	f8 01       	movw	r30, r16
    2922:	0f 5f       	subi	r16, 0xFF	; 255
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	d4 90       	lpm	r13, Z+
    2928:	dd 20       	and	r13, r13
    292a:	f1 f6       	brne	.-68     	; 0x28e8 <conv_flt+0x76>
    292c:	0d 58       	subi	r16, 0x8D	; 141
    292e:	10 40       	sbci	r17, 0x00	; 0
    2930:	29 f0       	breq	.+10     	; 0x293c <conv_flt+0xca>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e8       	ldi	r26, 0x80	; 128
    2938:	bf e7       	ldi	r27, 0x7F	; 127
    293a:	cf c0       	rjmp	.+414    	; 0x2ada <conv_flt+0x268>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 ec       	ldi	r26, 0xC0	; 192
    2942:	bf e7       	ldi	r27, 0x7F	; 127
    2944:	ca c0       	rjmp	.+404    	; 0x2ada <conv_flt+0x268>
    2946:	cc 24       	eor	r12, r12
    2948:	dd 24       	eor	r13, r13
    294a:	88 24       	eor	r8, r8
    294c:	99 24       	eor	r9, r9
    294e:	54 01       	movw	r10, r8
    2950:	ae 01       	movw	r20, r28
    2952:	40 53       	subi	r20, 0x30	; 48
    2954:	24 2f       	mov	r18, r20
    2956:	4a 30       	cpi	r20, 0x0A	; 10
    2958:	38 f5       	brcc	.+78     	; 0x29a8 <conv_flt+0x136>
    295a:	52 e0       	ldi	r21, 0x02	; 2
    295c:	55 2a       	or	r5, r21
    295e:	85 2d       	mov	r24, r5
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	ac 01       	movw	r20, r24
    2964:	48 70       	andi	r20, 0x08	; 8
    2966:	50 70       	andi	r21, 0x00	; 0
    2968:	52 fe       	sbrs	r5, 2
    296a:	06 c0       	rjmp	.+12     	; 0x2978 <conv_flt+0x106>
    296c:	45 2b       	or	r20, r21
    296e:	11 f5       	brne	.+68     	; 0x29b4 <conv_flt+0x142>
    2970:	08 94       	sec
    2972:	c1 1c       	adc	r12, r1
    2974:	d1 1c       	adc	r13, r1
    2976:	1e c0       	rjmp	.+60     	; 0x29b4 <conv_flt+0x142>
    2978:	45 2b       	or	r20, r21
    297a:	19 f0       	breq	.+6      	; 0x2982 <conv_flt+0x110>
    297c:	08 94       	sec
    297e:	c1 08       	sbc	r12, r1
    2980:	d1 08       	sbc	r13, r1
    2982:	c5 01       	movw	r24, r10
    2984:	b4 01       	movw	r22, r8
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	0e 94 b2 12 	call	0x2564	; 0x2564 <mulacc>
    298c:	4b 01       	movw	r8, r22
    298e:	5c 01       	movw	r10, r24
    2990:	88 e9       	ldi	r24, 0x98	; 152
    2992:	88 16       	cp	r8, r24
    2994:	89 e9       	ldi	r24, 0x99	; 153
    2996:	98 06       	cpc	r9, r24
    2998:	89 e9       	ldi	r24, 0x99	; 153
    299a:	a8 06       	cpc	r10, r24
    299c:	89 e1       	ldi	r24, 0x19	; 25
    299e:	b8 06       	cpc	r11, r24
    29a0:	48 f0       	brcs	.+18     	; 0x29b4 <conv_flt+0x142>
    29a2:	94 e0       	ldi	r25, 0x04	; 4
    29a4:	59 2a       	or	r5, r25
    29a6:	06 c0       	rjmp	.+12     	; 0x29b4 <conv_flt+0x142>
    29a8:	4e 3f       	cpi	r20, 0xFE	; 254
    29aa:	81 f4       	brne	.+32     	; 0x29cc <conv_flt+0x15a>
    29ac:	53 fc       	sbrc	r5, 3
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <conv_flt+0x15a>
    29b0:	e8 e0       	ldi	r30, 0x08	; 8
    29b2:	5e 2a       	or	r5, r30
    29b4:	08 94       	sec
    29b6:	e1 08       	sbc	r14, r1
    29b8:	f1 08       	sbc	r15, r1
    29ba:	e1 14       	cp	r14, r1
    29bc:	f1 04       	cpc	r15, r1
    29be:	31 f0       	breq	.+12     	; 0x29cc <conv_flt+0x15a>
    29c0:	c3 01       	movw	r24, r6
    29c2:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    29c6:	ec 01       	movw	r28, r24
    29c8:	97 ff       	sbrs	r25, 7
    29ca:	c2 cf       	rjmp	.-124    	; 0x2950 <conv_flt+0xde>
    29cc:	51 fe       	sbrs	r5, 1
    29ce:	91 c0       	rjmp	.+290    	; 0x2af2 <conv_flt+0x280>
    29d0:	c5 36       	cpi	r28, 0x65	; 101
    29d2:	19 f0       	breq	.+6      	; 0x29da <conv_flt+0x168>
    29d4:	c5 34       	cpi	r28, 0x45	; 69
    29d6:	09 f0       	breq	.+2      	; 0x29da <conv_flt+0x168>
    29d8:	46 c0       	rjmp	.+140    	; 0x2a66 <conv_flt+0x1f4>
    29da:	08 94       	sec
    29dc:	e1 08       	sbc	r14, r1
    29de:	f1 08       	sbc	r15, r1
    29e0:	e1 14       	cp	r14, r1
    29e2:	f1 04       	cpc	r15, r1
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <conv_flt+0x176>
    29e6:	85 c0       	rjmp	.+266    	; 0x2af2 <conv_flt+0x280>
    29e8:	c3 01       	movw	r24, r6
    29ea:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    29ee:	ec 01       	movw	r28, r24
    29f0:	97 fd       	sbrc	r25, 7
    29f2:	7f c0       	rjmp	.+254    	; 0x2af2 <conv_flt+0x280>
    29f4:	8b 32       	cpi	r24, 0x2B	; 43
    29f6:	21 f0       	breq	.+8      	; 0x2a00 <conv_flt+0x18e>
    29f8:	8d 32       	cpi	r24, 0x2D	; 45
    29fa:	69 f4       	brne	.+26     	; 0x2a16 <conv_flt+0x1a4>
    29fc:	f0 e1       	ldi	r31, 0x10	; 16
    29fe:	5f 2a       	or	r5, r31
    2a00:	08 94       	sec
    2a02:	e1 08       	sbc	r14, r1
    2a04:	f1 08       	sbc	r15, r1
    2a06:	e1 14       	cp	r14, r1
    2a08:	f1 04       	cpc	r15, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <conv_flt+0x19c>
    2a0c:	72 c0       	rjmp	.+228    	; 0x2af2 <conv_flt+0x280>
    2a0e:	c3 01       	movw	r24, r6
    2a10:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2a14:	ec 01       	movw	r28, r24
    2a16:	ce 01       	movw	r24, r28
    2a18:	c0 97       	sbiw	r24, 0x30	; 48
    2a1a:	0a 97       	sbiw	r24, 0x0a	; 10
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <conv_flt+0x1ae>
    2a1e:	69 c0       	rjmp	.+210    	; 0x2af2 <conv_flt+0x280>
    2a20:	00 e0       	ldi	r16, 0x00	; 0
    2a22:	10 e0       	ldi	r17, 0x00	; 0
    2a24:	b8 01       	movw	r22, r16
    2a26:	88 27       	eor	r24, r24
    2a28:	77 fd       	sbrc	r23, 7
    2a2a:	80 95       	com	r24
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	ae 01       	movw	r20, r28
    2a30:	40 53       	subi	r20, 0x30	; 48
    2a32:	24 2f       	mov	r18, r20
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	0e 94 b2 12 	call	0x2564	; 0x2564 <mulacc>
    2a3a:	8b 01       	movw	r16, r22
    2a3c:	08 94       	sec
    2a3e:	e1 08       	sbc	r14, r1
    2a40:	f1 08       	sbc	r15, r1
    2a42:	e1 14       	cp	r14, r1
    2a44:	f1 04       	cpc	r15, r1
    2a46:	39 f0       	breq	.+14     	; 0x2a56 <conv_flt+0x1e4>
    2a48:	c3 01       	movw	r24, r6
    2a4a:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2a4e:	ec 01       	movw	r28, r24
    2a50:	c0 97       	sbiw	r24, 0x30	; 48
    2a52:	0a 97       	sbiw	r24, 0x0a	; 10
    2a54:	38 f3       	brcs	.-50     	; 0x2a24 <conv_flt+0x1b2>
    2a56:	b8 01       	movw	r22, r16
    2a58:	54 fe       	sbrs	r5, 4
    2a5a:	03 c0       	rjmp	.+6      	; 0x2a62 <conv_flt+0x1f0>
    2a5c:	70 95       	com	r23
    2a5e:	61 95       	neg	r22
    2a60:	7f 4f       	sbci	r23, 0xFF	; 255
    2a62:	c6 0e       	add	r12, r22
    2a64:	d7 1e       	adc	r13, r23
    2a66:	ef 28       	or	r14, r15
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <conv_flt+0x204>
    2a6a:	d7 fd       	sbrc	r29, 7
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <conv_flt+0x204>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	b3 01       	movw	r22, r6
    2a72:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    2a76:	c5 01       	movw	r24, r10
    2a78:	b4 01       	movw	r22, r8
    2a7a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__floatunsisf>
    2a7e:	d7 fe       	sbrs	r13, 7
    2a80:	0d c0       	rjmp	.+26     	; 0x2a9c <conv_flt+0x22a>
    2a82:	a9 ea       	ldi	r26, 0xA9	; 169
    2a84:	ea 2e       	mov	r14, r26
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	fa 2e       	mov	r15, r26
    2a8a:	d0 94       	com	r13
    2a8c:	c1 94       	neg	r12
    2a8e:	d1 08       	sbc	r13, r1
    2a90:	d3 94       	inc	r13
    2a92:	c0 e2       	ldi	r28, 0x20	; 32
    2a94:	d0 e0       	ldi	r29, 0x00	; 0
    2a96:	00 e0       	ldi	r16, 0x00	; 0
    2a98:	10 e0       	ldi	r17, 0x00	; 0
    2a9a:	0e c0       	rjmp	.+28     	; 0x2ab8 <conv_flt+0x246>
    2a9c:	f1 ec       	ldi	r31, 0xC1	; 193
    2a9e:	ef 2e       	mov	r14, r31
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	ff 2e       	mov	r15, r31
    2aa4:	f6 cf       	rjmp	.-20     	; 0x2a92 <conv_flt+0x220>
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	25 91       	lpm	r18, Z+
    2aaa:	35 91       	lpm	r19, Z+
    2aac:	45 91       	lpm	r20, Z+
    2aae:	54 91       	lpm	r21, Z+
    2ab0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__mulsf3>
    2ab4:	cc 1a       	sub	r12, r28
    2ab6:	dd 0a       	sbc	r13, r29
    2ab8:	cc 16       	cp	r12, r28
    2aba:	dd 06       	cpc	r13, r29
    2abc:	a0 f7       	brcc	.-24     	; 0x2aa6 <conv_flt+0x234>
    2abe:	d6 95       	lsr	r29
    2ac0:	c7 95       	ror	r28
    2ac2:	0f 5f       	subi	r16, 0xFF	; 255
    2ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac6:	06 30       	cpi	r16, 0x06	; 6
    2ac8:	11 05       	cpc	r17, r1
    2aca:	29 f0       	breq	.+10     	; 0x2ad6 <conv_flt+0x264>
    2acc:	ec ef       	ldi	r30, 0xFC	; 252
    2ace:	ff ef       	ldi	r31, 0xFF	; 255
    2ad0:	ee 0e       	add	r14, r30
    2ad2:	ff 1e       	adc	r15, r31
    2ad4:	f1 cf       	rjmp	.-30     	; 0x2ab8 <conv_flt+0x246>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	57 fc       	sbrc	r5, 7
    2adc:	b0 58       	subi	r27, 0x80	; 128
    2ade:	21 14       	cp	r2, r1
    2ae0:	31 04       	cpc	r3, r1
    2ae2:	29 f0       	breq	.+10     	; 0x2aee <conv_flt+0x27c>
    2ae4:	f1 01       	movw	r30, r2
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <conv_flt+0x282>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	9f 90       	pop	r9
    2b0a:	8f 90       	pop	r8
    2b0c:	7f 90       	pop	r7
    2b0e:	6f 90       	pop	r6
    2b10:	5f 90       	pop	r5
    2b12:	3f 90       	pop	r3
    2b14:	2f 90       	pop	r2
    2b16:	08 95       	ret

00002b18 <vfscanf>:
    2b18:	a0 e0       	ldi	r26, 0x00	; 0
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e2 e9       	ldi	r30, 0x92	; 146
    2b1e:	f5 e1       	ldi	r31, 0x15	; 21
    2b20:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x6>
    2b24:	4c 01       	movw	r8, r24
    2b26:	5b 01       	movw	r10, r22
    2b28:	3a 01       	movw	r6, r20
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	17 82       	std	Z+7, r1	; 0x07
    2b2e:	16 82       	std	Z+6, r1	; 0x06
    2b30:	55 24       	eor	r5, r5
    2b32:	04 c1       	rjmp	.+520    	; 0x2d3c <vfscanf+0x224>
    2b34:	81 2f       	mov	r24, r17
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 de 18 	call	0x31bc	; 0x31bc <isspace>
    2b3c:	89 2b       	or	r24, r25
    2b3e:	21 f0       	breq	.+8      	; 0x2b48 <vfscanf+0x30>
    2b40:	c4 01       	movw	r24, r8
    2b42:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <skip_spaces>
    2b46:	fa c0       	rjmp	.+500    	; 0x2d3c <vfscanf+0x224>
    2b48:	15 32       	cpi	r17, 0x25	; 37
    2b4a:	49 f4       	brne	.+18     	; 0x2b5e <vfscanf+0x46>
    2b4c:	f5 01       	movw	r30, r10
    2b4e:	f3 fc       	sbrc	r15, 3
    2b50:	65 91       	lpm	r22, Z+
    2b52:	f3 fe       	sbrs	r15, 3
    2b54:	61 91       	ld	r22, Z+
    2b56:	5f 01       	movw	r10, r30
    2b58:	65 32       	cpi	r22, 0x25	; 37
    2b5a:	69 f4       	brne	.+26     	; 0x2b76 <vfscanf+0x5e>
    2b5c:	15 e2       	ldi	r17, 0x25	; 37
    2b5e:	c4 01       	movw	r24, r8
    2b60:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2b64:	97 fd       	sbrc	r25, 7
    2b66:	f6 c0       	rjmp	.+492    	; 0x2d54 <vfscanf+0x23c>
    2b68:	18 17       	cp	r17, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <vfscanf+0x56>
    2b6c:	e7 c0       	rjmp	.+462    	; 0x2d3c <vfscanf+0x224>
    2b6e:	b4 01       	movw	r22, r8
    2b70:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    2b74:	f4 c0       	rjmp	.+488    	; 0x2d5e <vfscanf+0x246>
    2b76:	6a 32       	cpi	r22, 0x2A	; 42
    2b78:	19 f0       	breq	.+6      	; 0x2b80 <vfscanf+0x68>
    2b7a:	16 2f       	mov	r17, r22
    2b7c:	00 e0       	ldi	r16, 0x00	; 0
    2b7e:	06 c0       	rjmp	.+12     	; 0x2b8c <vfscanf+0x74>
    2b80:	f3 fc       	sbrc	r15, 3
    2b82:	15 91       	lpm	r17, Z+
    2b84:	f3 fe       	sbrs	r15, 3
    2b86:	11 91       	ld	r17, Z+
    2b88:	5f 01       	movw	r10, r30
    2b8a:	01 e0       	ldi	r16, 0x01	; 1
    2b8c:	cc 24       	eor	r12, r12
    2b8e:	dd 24       	eor	r13, r13
    2b90:	0e c0       	rjmp	.+28     	; 0x2bae <vfscanf+0x96>
    2b92:	02 60       	ori	r16, 0x02	; 2
    2b94:	b6 01       	movw	r22, r12
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	0e 94 b2 12 	call	0x2564	; 0x2564 <mulacc>
    2ba0:	6b 01       	movw	r12, r22
    2ba2:	f5 01       	movw	r30, r10
    2ba4:	f3 fc       	sbrc	r15, 3
    2ba6:	15 91       	lpm	r17, Z+
    2ba8:	f3 fe       	sbrs	r15, 3
    2baa:	11 91       	ld	r17, Z+
    2bac:	5f 01       	movw	r10, r30
    2bae:	21 2f       	mov	r18, r17
    2bb0:	20 53       	subi	r18, 0x30	; 48
    2bb2:	2a 30       	cpi	r18, 0x0A	; 10
    2bb4:	70 f3       	brcs	.-36     	; 0x2b92 <vfscanf+0x7a>
    2bb6:	01 fd       	sbrc	r16, 1
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <vfscanf+0xaa>
    2bba:	cc 24       	eor	r12, r12
    2bbc:	ca 94       	dec	r12
    2bbe:	dc 2c       	mov	r13, r12
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <vfscanf+0xb2>
    2bc2:	c1 14       	cp	r12, r1
    2bc4:	d1 04       	cpc	r13, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <vfscanf+0xb2>
    2bc8:	ca c0       	rjmp	.+404    	; 0x2d5e <vfscanf+0x246>
    2bca:	18 36       	cpi	r17, 0x68	; 104
    2bcc:	21 f0       	breq	.+8      	; 0x2bd6 <vfscanf+0xbe>
    2bce:	1c 36       	cpi	r17, 0x6C	; 108
    2bd0:	99 f4       	brne	.+38     	; 0x2bf8 <vfscanf+0xe0>
    2bd2:	f5 01       	movw	r30, r10
    2bd4:	0b c0       	rjmp	.+22     	; 0x2bec <vfscanf+0xd4>
    2bd6:	f5 01       	movw	r30, r10
    2bd8:	f3 fc       	sbrc	r15, 3
    2bda:	65 91       	lpm	r22, Z+
    2bdc:	f3 fe       	sbrs	r15, 3
    2bde:	61 91       	ld	r22, Z+
    2be0:	68 36       	cpi	r22, 0x68	; 104
    2be2:	19 f0       	breq	.+6      	; 0x2bea <vfscanf+0xd2>
    2be4:	5f 01       	movw	r10, r30
    2be6:	16 2f       	mov	r17, r22
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <vfscanf+0xe0>
    2bea:	08 60       	ori	r16, 0x08	; 8
    2bec:	04 60       	ori	r16, 0x04	; 4
    2bee:	f3 fc       	sbrc	r15, 3
    2bf0:	15 91       	lpm	r17, Z+
    2bf2:	f3 fe       	sbrs	r15, 3
    2bf4:	11 91       	ld	r17, Z+
    2bf6:	5f 01       	movw	r10, r30
    2bf8:	11 23       	and	r17, r17
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <vfscanf+0xe6>
    2bfc:	b0 c0       	rjmp	.+352    	; 0x2d5e <vfscanf+0x246>
    2bfe:	88 e7       	ldi	r24, 0x78	; 120
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	61 2f       	mov	r22, r17
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	0e 94 ee 18 	call	0x31dc	; 0x31dc <strchr_P>
    2c0a:	89 2b       	or	r24, r25
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <vfscanf+0xf8>
    2c0e:	a7 c0       	rjmp	.+334    	; 0x2d5e <vfscanf+0x246>
    2c10:	80 2f       	mov	r24, r16
    2c12:	00 ff       	sbrs	r16, 0
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <vfscanf+0x104>
    2c16:	ee 24       	eor	r14, r14
    2c18:	ff 24       	eor	r15, r15
    2c1a:	07 c0       	rjmp	.+14     	; 0x2c2a <vfscanf+0x112>
    2c1c:	f3 01       	movw	r30, r6
    2c1e:	e0 80       	ld	r14, Z
    2c20:	f1 80       	ldd	r15, Z+1	; 0x01
    2c22:	22 e0       	ldi	r18, 0x02	; 2
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	62 0e       	add	r6, r18
    2c28:	73 1e       	adc	r7, r19
    2c2a:	1e 36       	cpi	r17, 0x6E	; 110
    2c2c:	51 f4       	brne	.+20     	; 0x2c42 <vfscanf+0x12a>
    2c2e:	f4 01       	movw	r30, r8
    2c30:	46 81       	ldd	r20, Z+6	; 0x06
    2c32:	57 81       	ldd	r21, Z+7	; 0x07
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	c7 01       	movw	r24, r14
    2c3a:	20 2f       	mov	r18, r16
    2c3c:	0e 94 a6 12 	call	0x254c	; 0x254c <putval>
    2c40:	7d c0       	rjmp	.+250    	; 0x2d3c <vfscanf+0x224>
    2c42:	13 36       	cpi	r17, 0x63	; 99
    2c44:	b9 f4       	brne	.+46     	; 0x2c74 <vfscanf+0x15c>
    2c46:	81 fd       	sbrc	r24, 1
    2c48:	03 c0       	rjmp	.+6      	; 0x2c50 <vfscanf+0x138>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	c8 2e       	mov	r12, r24
    2c4e:	d1 2c       	mov	r13, r1
    2c50:	c4 01       	movw	r24, r8
    2c52:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2c56:	97 fd       	sbrc	r25, 7
    2c58:	7d c0       	rjmp	.+250    	; 0x2d54 <vfscanf+0x23c>
    2c5a:	e1 14       	cp	r14, r1
    2c5c:	f1 04       	cpc	r15, r1
    2c5e:	19 f0       	breq	.+6      	; 0x2c66 <vfscanf+0x14e>
    2c60:	f7 01       	movw	r30, r14
    2c62:	81 93       	st	Z+, r24
    2c64:	7f 01       	movw	r14, r30
    2c66:	08 94       	sec
    2c68:	c1 08       	sbc	r12, r1
    2c6a:	d1 08       	sbc	r13, r1
    2c6c:	c1 14       	cp	r12, r1
    2c6e:	d1 04       	cpc	r13, r1
    2c70:	79 f7       	brne	.-34     	; 0x2c50 <vfscanf+0x138>
    2c72:	62 c0       	rjmp	.+196    	; 0x2d38 <vfscanf+0x220>
    2c74:	1b 35       	cpi	r17, 0x5B	; 91
    2c76:	59 f4       	brne	.+22     	; 0x2c8e <vfscanf+0x176>
    2c78:	c4 01       	movw	r24, r8
    2c7a:	b6 01       	movw	r22, r12
    2c7c:	a7 01       	movw	r20, r14
    2c7e:	95 01       	movw	r18, r10
    2c80:	0e 94 8d 13 	call	0x271a	; 0x271a <conv_brk>
    2c84:	5c 01       	movw	r10, r24
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <vfscanf+0x174>
    2c8a:	56 c0       	rjmp	.+172    	; 0x2d38 <vfscanf+0x220>
    2c8c:	50 c0       	rjmp	.+160    	; 0x2d2e <vfscanf+0x216>
    2c8e:	c4 01       	movw	r24, r8
    2c90:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <skip_spaces>
    2c94:	97 fd       	sbrc	r25, 7
    2c96:	5e c0       	rjmp	.+188    	; 0x2d54 <vfscanf+0x23c>
    2c98:	1f 36       	cpi	r17, 0x6F	; 111
    2c9a:	d1 f1       	breq	.+116    	; 0x2d10 <vfscanf+0x1f8>
    2c9c:	10 37       	cpi	r17, 0x70	; 112
    2c9e:	38 f4       	brcc	.+14     	; 0x2cae <vfscanf+0x196>
    2ca0:	14 36       	cpi	r17, 0x64	; 100
    2ca2:	a1 f1       	breq	.+104    	; 0x2d0c <vfscanf+0x1f4>
    2ca4:	19 36       	cpi	r17, 0x69	; 105
    2ca6:	a9 f1       	breq	.+106    	; 0x2d12 <vfscanf+0x1fa>
    2ca8:	18 35       	cpi	r17, 0x58	; 88
    2caa:	d1 f5       	brne	.+116    	; 0x2d20 <vfscanf+0x208>
    2cac:	2d c0       	rjmp	.+90     	; 0x2d08 <vfscanf+0x1f0>
    2cae:	13 37       	cpi	r17, 0x73	; 115
    2cb0:	51 f0       	breq	.+20     	; 0x2cc6 <vfscanf+0x1ae>
    2cb2:	14 37       	cpi	r17, 0x74	; 116
    2cb4:	18 f4       	brcc	.+6      	; 0x2cbc <vfscanf+0x1a4>
    2cb6:	10 37       	cpi	r17, 0x70	; 112
    2cb8:	99 f5       	brne	.+102    	; 0x2d20 <vfscanf+0x208>
    2cba:	26 c0       	rjmp	.+76     	; 0x2d08 <vfscanf+0x1f0>
    2cbc:	15 37       	cpi	r17, 0x75	; 117
    2cbe:	31 f1       	breq	.+76     	; 0x2d0c <vfscanf+0x1f4>
    2cc0:	18 37       	cpi	r17, 0x78	; 120
    2cc2:	71 f5       	brne	.+92     	; 0x2d20 <vfscanf+0x208>
    2cc4:	21 c0       	rjmp	.+66     	; 0x2d08 <vfscanf+0x1f0>
    2cc6:	c4 01       	movw	r24, r8
    2cc8:	0e 94 0f 19 	call	0x321e	; 0x321e <fgetc>
    2ccc:	ec 01       	movw	r28, r24
    2cce:	97 fd       	sbrc	r25, 7
    2cd0:	15 c0       	rjmp	.+42     	; 0x2cfc <vfscanf+0x1e4>
    2cd2:	0e 94 de 18 	call	0x31bc	; 0x31bc <isspace>
    2cd6:	89 2b       	or	r24, r25
    2cd8:	29 f0       	breq	.+10     	; 0x2ce4 <vfscanf+0x1cc>
    2cda:	ce 01       	movw	r24, r28
    2cdc:	b4 01       	movw	r22, r8
    2cde:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <ungetc>
    2ce2:	0c c0       	rjmp	.+24     	; 0x2cfc <vfscanf+0x1e4>
    2ce4:	e1 14       	cp	r14, r1
    2ce6:	f1 04       	cpc	r15, r1
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <vfscanf+0x1d8>
    2cea:	f7 01       	movw	r30, r14
    2cec:	c1 93       	st	Z+, r28
    2cee:	7f 01       	movw	r14, r30
    2cf0:	08 94       	sec
    2cf2:	c1 08       	sbc	r12, r1
    2cf4:	d1 08       	sbc	r13, r1
    2cf6:	c1 14       	cp	r12, r1
    2cf8:	d1 04       	cpc	r13, r1
    2cfa:	29 f7       	brne	.-54     	; 0x2cc6 <vfscanf+0x1ae>
    2cfc:	e1 14       	cp	r14, r1
    2cfe:	f1 04       	cpc	r15, r1
    2d00:	d9 f0       	breq	.+54     	; 0x2d38 <vfscanf+0x220>
    2d02:	f7 01       	movw	r30, r14
    2d04:	10 82       	st	Z, r1
    2d06:	18 c0       	rjmp	.+48     	; 0x2d38 <vfscanf+0x220>
    2d08:	00 64       	ori	r16, 0x40	; 64
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <vfscanf+0x1fa>
    2d0c:	00 62       	ori	r16, 0x20	; 32
    2d0e:	01 c0       	rjmp	.+2      	; 0x2d12 <vfscanf+0x1fa>
    2d10:	00 61       	ori	r16, 0x10	; 16
    2d12:	c4 01       	movw	r24, r8
    2d14:	b6 01       	movw	r22, r12
    2d16:	a7 01       	movw	r20, r14
    2d18:	20 2f       	mov	r18, r16
    2d1a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <conv_int>
    2d1e:	05 c0       	rjmp	.+10     	; 0x2d2a <vfscanf+0x212>
    2d20:	c4 01       	movw	r24, r8
    2d22:	b6 01       	movw	r22, r12
    2d24:	a7 01       	movw	r20, r14
    2d26:	0e 94 39 14 	call	0x2872	; 0x2872 <conv_flt>
    2d2a:	88 23       	and	r24, r24
    2d2c:	29 f4       	brne	.+10     	; 0x2d38 <vfscanf+0x220>
    2d2e:	f4 01       	movw	r30, r8
    2d30:	83 81       	ldd	r24, Z+3	; 0x03
    2d32:	80 73       	andi	r24, 0x30	; 48
    2d34:	79 f4       	brne	.+30     	; 0x2d54 <vfscanf+0x23c>
    2d36:	13 c0       	rjmp	.+38     	; 0x2d5e <vfscanf+0x246>
    2d38:	00 ff       	sbrs	r16, 0
    2d3a:	53 94       	inc	r5
    2d3c:	f4 01       	movw	r30, r8
    2d3e:	f3 80       	ldd	r15, Z+3	; 0x03
    2d40:	f5 01       	movw	r30, r10
    2d42:	f3 fc       	sbrc	r15, 3
    2d44:	15 91       	lpm	r17, Z+
    2d46:	f3 fe       	sbrs	r15, 3
    2d48:	11 91       	ld	r17, Z+
    2d4a:	5f 01       	movw	r10, r30
    2d4c:	11 23       	and	r17, r17
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <vfscanf+0x23a>
    2d50:	f1 ce       	rjmp	.-542    	; 0x2b34 <vfscanf+0x1c>
    2d52:	05 c0       	rjmp	.+10     	; 0x2d5e <vfscanf+0x246>
    2d54:	55 20       	and	r5, r5
    2d56:	19 f4       	brne	.+6      	; 0x2d5e <vfscanf+0x246>
    2d58:	2f ef       	ldi	r18, 0xFF	; 255
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <vfscanf+0x24a>
    2d5e:	25 2d       	mov	r18, r5
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	c9 01       	movw	r24, r18
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	ef e0       	ldi	r30, 0x0F	; 15
    2d6a:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x6>

00002d6e <__floatunsisf>:
    2d6e:	e8 94       	clt
    2d70:	09 c0       	rjmp	.+18     	; 0x2d84 <__floatsisf+0x12>

00002d72 <__floatsisf>:
    2d72:	97 fb       	bst	r25, 7
    2d74:	3e f4       	brtc	.+14     	; 0x2d84 <__floatsisf+0x12>
    2d76:	90 95       	com	r25
    2d78:	80 95       	com	r24
    2d7a:	70 95       	com	r23
    2d7c:	61 95       	neg	r22
    2d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d80:	8f 4f       	sbci	r24, 0xFF	; 255
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	99 23       	and	r25, r25
    2d86:	a9 f0       	breq	.+42     	; 0x2db2 <__floatsisf+0x40>
    2d88:	f9 2f       	mov	r31, r25
    2d8a:	96 e9       	ldi	r25, 0x96	; 150
    2d8c:	bb 27       	eor	r27, r27
    2d8e:	93 95       	inc	r25
    2d90:	f6 95       	lsr	r31
    2d92:	87 95       	ror	r24
    2d94:	77 95       	ror	r23
    2d96:	67 95       	ror	r22
    2d98:	b7 95       	ror	r27
    2d9a:	f1 11       	cpse	r31, r1
    2d9c:	f8 cf       	rjmp	.-16     	; 0x2d8e <__floatsisf+0x1c>
    2d9e:	fa f4       	brpl	.+62     	; 0x2dde <__floatsisf+0x6c>
    2da0:	bb 0f       	add	r27, r27
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__floatsisf+0x36>
    2da4:	60 ff       	sbrs	r22, 0
    2da6:	1b c0       	rjmp	.+54     	; 0x2dde <__floatsisf+0x6c>
    2da8:	6f 5f       	subi	r22, 0xFF	; 255
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	8f 4f       	sbci	r24, 0xFF	; 255
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	16 c0       	rjmp	.+44     	; 0x2dde <__floatsisf+0x6c>
    2db2:	88 23       	and	r24, r24
    2db4:	11 f0       	breq	.+4      	; 0x2dba <__floatsisf+0x48>
    2db6:	96 e9       	ldi	r25, 0x96	; 150
    2db8:	11 c0       	rjmp	.+34     	; 0x2ddc <__floatsisf+0x6a>
    2dba:	77 23       	and	r23, r23
    2dbc:	21 f0       	breq	.+8      	; 0x2dc6 <__floatsisf+0x54>
    2dbe:	9e e8       	ldi	r25, 0x8E	; 142
    2dc0:	87 2f       	mov	r24, r23
    2dc2:	76 2f       	mov	r23, r22
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <__floatsisf+0x5e>
    2dc6:	66 23       	and	r22, r22
    2dc8:	71 f0       	breq	.+28     	; 0x2de6 <__floatsisf+0x74>
    2dca:	96 e8       	ldi	r25, 0x86	; 134
    2dcc:	86 2f       	mov	r24, r22
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	2a f0       	brmi	.+10     	; 0x2dde <__floatsisf+0x6c>
    2dd4:	9a 95       	dec	r25
    2dd6:	66 0f       	add	r22, r22
    2dd8:	77 1f       	adc	r23, r23
    2dda:	88 1f       	adc	r24, r24
    2ddc:	da f7       	brpl	.-10     	; 0x2dd4 <__floatsisf+0x62>
    2dde:	88 0f       	add	r24, r24
    2de0:	96 95       	lsr	r25
    2de2:	87 95       	ror	r24
    2de4:	97 f9       	bld	r25, 7
    2de6:	08 95       	ret

00002de8 <__mulsf3>:
    2de8:	0b d0       	rcall	.+22     	; 0x2e00 <__mulsf3x>
    2dea:	78 c0       	rjmp	.+240    	; 0x2edc <__fp_round>
    2dec:	69 d0       	rcall	.+210    	; 0x2ec0 <__fp_pscA>
    2dee:	28 f0       	brcs	.+10     	; 0x2dfa <__mulsf3+0x12>
    2df0:	6e d0       	rcall	.+220    	; 0x2ece <__fp_pscB>
    2df2:	18 f0       	brcs	.+6      	; 0x2dfa <__mulsf3+0x12>
    2df4:	95 23       	and	r25, r21
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <__mulsf3+0x12>
    2df8:	5a c0       	rjmp	.+180    	; 0x2eae <__fp_inf>
    2dfa:	5f c0       	rjmp	.+190    	; 0x2eba <__fp_nan>
    2dfc:	11 24       	eor	r1, r1
    2dfe:	a2 c0       	rjmp	.+324    	; 0x2f44 <__fp_szero>

00002e00 <__mulsf3x>:
    2e00:	7e d0       	rcall	.+252    	; 0x2efe <__fp_split3>
    2e02:	a0 f3       	brcs	.-24     	; 0x2dec <__mulsf3+0x4>

00002e04 <__mulsf3_pse>:
    2e04:	95 9f       	mul	r25, r21
    2e06:	d1 f3       	breq	.-12     	; 0x2dfc <__mulsf3+0x14>
    2e08:	95 0f       	add	r25, r21
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	55 1f       	adc	r21, r21
    2e0e:	62 9f       	mul	r22, r18
    2e10:	f0 01       	movw	r30, r0
    2e12:	72 9f       	mul	r23, r18
    2e14:	bb 27       	eor	r27, r27
    2e16:	f0 0d       	add	r31, r0
    2e18:	b1 1d       	adc	r27, r1
    2e1a:	63 9f       	mul	r22, r19
    2e1c:	aa 27       	eor	r26, r26
    2e1e:	f0 0d       	add	r31, r0
    2e20:	b1 1d       	adc	r27, r1
    2e22:	aa 1f       	adc	r26, r26
    2e24:	64 9f       	mul	r22, r20
    2e26:	66 27       	eor	r22, r22
    2e28:	b0 0d       	add	r27, r0
    2e2a:	a1 1d       	adc	r26, r1
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	82 9f       	mul	r24, r18
    2e30:	22 27       	eor	r18, r18
    2e32:	b0 0d       	add	r27, r0
    2e34:	a1 1d       	adc	r26, r1
    2e36:	62 1f       	adc	r22, r18
    2e38:	73 9f       	mul	r23, r19
    2e3a:	b0 0d       	add	r27, r0
    2e3c:	a1 1d       	adc	r26, r1
    2e3e:	62 1f       	adc	r22, r18
    2e40:	83 9f       	mul	r24, r19
    2e42:	a0 0d       	add	r26, r0
    2e44:	61 1d       	adc	r22, r1
    2e46:	22 1f       	adc	r18, r18
    2e48:	74 9f       	mul	r23, r20
    2e4a:	33 27       	eor	r19, r19
    2e4c:	a0 0d       	add	r26, r0
    2e4e:	61 1d       	adc	r22, r1
    2e50:	23 1f       	adc	r18, r19
    2e52:	84 9f       	mul	r24, r20
    2e54:	60 0d       	add	r22, r0
    2e56:	21 1d       	adc	r18, r1
    2e58:	82 2f       	mov	r24, r18
    2e5a:	76 2f       	mov	r23, r22
    2e5c:	6a 2f       	mov	r22, r26
    2e5e:	11 24       	eor	r1, r1
    2e60:	9f 57       	subi	r25, 0x7F	; 127
    2e62:	50 40       	sbci	r21, 0x00	; 0
    2e64:	8a f0       	brmi	.+34     	; 0x2e88 <__mulsf3_pse+0x84>
    2e66:	e1 f0       	breq	.+56     	; 0x2ea0 <__mulsf3_pse+0x9c>
    2e68:	88 23       	and	r24, r24
    2e6a:	4a f0       	brmi	.+18     	; 0x2e7e <__mulsf3_pse+0x7a>
    2e6c:	ee 0f       	add	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	bb 1f       	adc	r27, r27
    2e72:	66 1f       	adc	r22, r22
    2e74:	77 1f       	adc	r23, r23
    2e76:	88 1f       	adc	r24, r24
    2e78:	91 50       	subi	r25, 0x01	; 1
    2e7a:	50 40       	sbci	r21, 0x00	; 0
    2e7c:	a9 f7       	brne	.-22     	; 0x2e68 <__mulsf3_pse+0x64>
    2e7e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e80:	51 05       	cpc	r21, r1
    2e82:	70 f0       	brcs	.+28     	; 0x2ea0 <__mulsf3_pse+0x9c>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <__fp_inf>
    2e86:	5e c0       	rjmp	.+188    	; 0x2f44 <__fp_szero>
    2e88:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8a:	ec f3       	brlt	.-6      	; 0x2e86 <__mulsf3_pse+0x82>
    2e8c:	98 3e       	cpi	r25, 0xE8	; 232
    2e8e:	dc f3       	brlt	.-10     	; 0x2e86 <__mulsf3_pse+0x82>
    2e90:	86 95       	lsr	r24
    2e92:	77 95       	ror	r23
    2e94:	67 95       	ror	r22
    2e96:	b7 95       	ror	r27
    2e98:	f7 95       	ror	r31
    2e9a:	e7 95       	ror	r30
    2e9c:	9f 5f       	subi	r25, 0xFF	; 255
    2e9e:	c1 f7       	brne	.-16     	; 0x2e90 <__mulsf3_pse+0x8c>
    2ea0:	fe 2b       	or	r31, r30
    2ea2:	88 0f       	add	r24, r24
    2ea4:	91 1d       	adc	r25, r1
    2ea6:	96 95       	lsr	r25
    2ea8:	87 95       	ror	r24
    2eaa:	97 f9       	bld	r25, 7
    2eac:	08 95       	ret

00002eae <__fp_inf>:
    2eae:	97 f9       	bld	r25, 7
    2eb0:	9f 67       	ori	r25, 0x7F	; 127
    2eb2:	80 e8       	ldi	r24, 0x80	; 128
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	08 95       	ret

00002eba <__fp_nan>:
    2eba:	9f ef       	ldi	r25, 0xFF	; 255
    2ebc:	80 ec       	ldi	r24, 0xC0	; 192
    2ebe:	08 95       	ret

00002ec0 <__fp_pscA>:
    2ec0:	00 24       	eor	r0, r0
    2ec2:	0a 94       	dec	r0
    2ec4:	16 16       	cp	r1, r22
    2ec6:	17 06       	cpc	r1, r23
    2ec8:	18 06       	cpc	r1, r24
    2eca:	09 06       	cpc	r0, r25
    2ecc:	08 95       	ret

00002ece <__fp_pscB>:
    2ece:	00 24       	eor	r0, r0
    2ed0:	0a 94       	dec	r0
    2ed2:	12 16       	cp	r1, r18
    2ed4:	13 06       	cpc	r1, r19
    2ed6:	14 06       	cpc	r1, r20
    2ed8:	05 06       	cpc	r0, r21
    2eda:	08 95       	ret

00002edc <__fp_round>:
    2edc:	09 2e       	mov	r0, r25
    2ede:	03 94       	inc	r0
    2ee0:	00 0c       	add	r0, r0
    2ee2:	11 f4       	brne	.+4      	; 0x2ee8 <__fp_round+0xc>
    2ee4:	88 23       	and	r24, r24
    2ee6:	52 f0       	brmi	.+20     	; 0x2efc <__fp_round+0x20>
    2ee8:	bb 0f       	add	r27, r27
    2eea:	40 f4       	brcc	.+16     	; 0x2efc <__fp_round+0x20>
    2eec:	bf 2b       	or	r27, r31
    2eee:	11 f4       	brne	.+4      	; 0x2ef4 <__fp_round+0x18>
    2ef0:	60 ff       	sbrs	r22, 0
    2ef2:	04 c0       	rjmp	.+8      	; 0x2efc <__fp_round+0x20>
    2ef4:	6f 5f       	subi	r22, 0xFF	; 255
    2ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    2efa:	9f 4f       	sbci	r25, 0xFF	; 255
    2efc:	08 95       	ret

00002efe <__fp_split3>:
    2efe:	57 fd       	sbrc	r21, 7
    2f00:	90 58       	subi	r25, 0x80	; 128
    2f02:	44 0f       	add	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	59 f0       	breq	.+22     	; 0x2f1e <__fp_splitA+0x10>
    2f08:	5f 3f       	cpi	r21, 0xFF	; 255
    2f0a:	71 f0       	breq	.+28     	; 0x2f28 <__fp_splitA+0x1a>
    2f0c:	47 95       	ror	r20

00002f0e <__fp_splitA>:
    2f0e:	88 0f       	add	r24, r24
    2f10:	97 fb       	bst	r25, 7
    2f12:	99 1f       	adc	r25, r25
    2f14:	61 f0       	breq	.+24     	; 0x2f2e <__fp_splitA+0x20>
    2f16:	9f 3f       	cpi	r25, 0xFF	; 255
    2f18:	79 f0       	breq	.+30     	; 0x2f38 <__fp_splitA+0x2a>
    2f1a:	87 95       	ror	r24
    2f1c:	08 95       	ret
    2f1e:	12 16       	cp	r1, r18
    2f20:	13 06       	cpc	r1, r19
    2f22:	14 06       	cpc	r1, r20
    2f24:	55 1f       	adc	r21, r21
    2f26:	f2 cf       	rjmp	.-28     	; 0x2f0c <__fp_split3+0xe>
    2f28:	46 95       	lsr	r20
    2f2a:	f1 df       	rcall	.-30     	; 0x2f0e <__fp_splitA>
    2f2c:	08 c0       	rjmp	.+16     	; 0x2f3e <__fp_splitA+0x30>
    2f2e:	16 16       	cp	r1, r22
    2f30:	17 06       	cpc	r1, r23
    2f32:	18 06       	cpc	r1, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	f1 cf       	rjmp	.-30     	; 0x2f1a <__fp_splitA+0xc>
    2f38:	86 95       	lsr	r24
    2f3a:	71 05       	cpc	r23, r1
    2f3c:	61 05       	cpc	r22, r1
    2f3e:	08 94       	sec
    2f40:	08 95       	ret

00002f42 <__fp_zero>:
    2f42:	e8 94       	clt

00002f44 <__fp_szero>:
    2f44:	bb 27       	eor	r27, r27
    2f46:	66 27       	eor	r22, r22
    2f48:	77 27       	eor	r23, r23
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	97 f9       	bld	r25, 7
    2f4e:	08 95       	ret

00002f50 <__udivmodhi4>:
    2f50:	aa 1b       	sub	r26, r26
    2f52:	bb 1b       	sub	r27, r27
    2f54:	51 e1       	ldi	r21, 0x11	; 17
    2f56:	07 c0       	rjmp	.+14     	; 0x2f66 <__udivmodhi4_ep>

00002f58 <__udivmodhi4_loop>:
    2f58:	aa 1f       	adc	r26, r26
    2f5a:	bb 1f       	adc	r27, r27
    2f5c:	a6 17       	cp	r26, r22
    2f5e:	b7 07       	cpc	r27, r23
    2f60:	10 f0       	brcs	.+4      	; 0x2f66 <__udivmodhi4_ep>
    2f62:	a6 1b       	sub	r26, r22
    2f64:	b7 0b       	sbc	r27, r23

00002f66 <__udivmodhi4_ep>:
    2f66:	88 1f       	adc	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	5a 95       	dec	r21
    2f6c:	a9 f7       	brne	.-22     	; 0x2f58 <__udivmodhi4_loop>
    2f6e:	80 95       	com	r24
    2f70:	90 95       	com	r25
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	08 95       	ret

00002f78 <__divmodhi4>:
    2f78:	97 fb       	bst	r25, 7
    2f7a:	09 2e       	mov	r0, r25
    2f7c:	07 26       	eor	r0, r23
    2f7e:	0a d0       	rcall	.+20     	; 0x2f94 <__divmodhi4_neg1>
    2f80:	77 fd       	sbrc	r23, 7
    2f82:	04 d0       	rcall	.+8      	; 0x2f8c <__divmodhi4_neg2>
    2f84:	e5 df       	rcall	.-54     	; 0x2f50 <__udivmodhi4>
    2f86:	06 d0       	rcall	.+12     	; 0x2f94 <__divmodhi4_neg1>
    2f88:	00 20       	and	r0, r0
    2f8a:	1a f4       	brpl	.+6      	; 0x2f92 <__divmodhi4_exit>

00002f8c <__divmodhi4_neg2>:
    2f8c:	70 95       	com	r23
    2f8e:	61 95       	neg	r22
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255

00002f92 <__divmodhi4_exit>:
    2f92:	08 95       	ret

00002f94 <__divmodhi4_neg1>:
    2f94:	f6 f7       	brtc	.-4      	; 0x2f92 <__divmodhi4_exit>
    2f96:	90 95       	com	r25
    2f98:	81 95       	neg	r24
    2f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9c:	08 95       	ret

00002f9e <__prologue_saves__>:
    2f9e:	2f 92       	push	r2
    2fa0:	3f 92       	push	r3
    2fa2:	4f 92       	push	r4
    2fa4:	5f 92       	push	r5
    2fa6:	6f 92       	push	r6
    2fa8:	7f 92       	push	r7
    2faa:	8f 92       	push	r8
    2fac:	9f 92       	push	r9
    2fae:	af 92       	push	r10
    2fb0:	bf 92       	push	r11
    2fb2:	cf 92       	push	r12
    2fb4:	df 92       	push	r13
    2fb6:	ef 92       	push	r14
    2fb8:	ff 92       	push	r15
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	ca 1b       	sub	r28, r26
    2fc8:	db 0b       	sbc	r29, r27
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	09 94       	ijmp

00002fd6 <__epilogue_restores__>:
    2fd6:	2a 88       	ldd	r2, Y+18	; 0x12
    2fd8:	39 88       	ldd	r3, Y+17	; 0x11
    2fda:	48 88       	ldd	r4, Y+16	; 0x10
    2fdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fde:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fe6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fe8:	b9 84       	ldd	r11, Y+9	; 0x09
    2fea:	c8 84       	ldd	r12, Y+8	; 0x08
    2fec:	df 80       	ldd	r13, Y+7	; 0x07
    2fee:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ff6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ff8:	b9 81       	ldd	r27, Y+1	; 0x01
    2ffa:	ce 0f       	add	r28, r30
    2ffc:	d1 1d       	adc	r29, r1
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	ed 01       	movw	r28, r26
    300a:	08 95       	ret

0000300c <__ftoa_engine>:
    300c:	28 30       	cpi	r18, 0x08	; 8
    300e:	08 f0       	brcs	.+2      	; 0x3012 <__ftoa_engine+0x6>
    3010:	27 e0       	ldi	r18, 0x07	; 7
    3012:	33 27       	eor	r19, r19
    3014:	da 01       	movw	r26, r20
    3016:	99 0f       	add	r25, r25
    3018:	31 1d       	adc	r19, r1
    301a:	87 fd       	sbrc	r24, 7
    301c:	91 60       	ori	r25, 0x01	; 1
    301e:	00 96       	adiw	r24, 0x00	; 0
    3020:	61 05       	cpc	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	39 f4       	brne	.+14     	; 0x3034 <__ftoa_engine+0x28>
    3026:	32 60       	ori	r19, 0x02	; 2
    3028:	2e 5f       	subi	r18, 0xFE	; 254
    302a:	3d 93       	st	X+, r19
    302c:	30 e3       	ldi	r19, 0x30	; 48
    302e:	2a 95       	dec	r18
    3030:	e1 f7       	brne	.-8      	; 0x302a <__ftoa_engine+0x1e>
    3032:	08 95       	ret
    3034:	9f 3f       	cpi	r25, 0xFF	; 255
    3036:	30 f0       	brcs	.+12     	; 0x3044 <__ftoa_engine+0x38>
    3038:	80 38       	cpi	r24, 0x80	; 128
    303a:	71 05       	cpc	r23, r1
    303c:	61 05       	cpc	r22, r1
    303e:	09 f0       	breq	.+2      	; 0x3042 <__ftoa_engine+0x36>
    3040:	3c 5f       	subi	r19, 0xFC	; 252
    3042:	3c 5f       	subi	r19, 0xFC	; 252
    3044:	3d 93       	st	X+, r19
    3046:	91 30       	cpi	r25, 0x01	; 1
    3048:	08 f0       	brcs	.+2      	; 0x304c <__ftoa_engine+0x40>
    304a:	80 68       	ori	r24, 0x80	; 128
    304c:	91 1d       	adc	r25, r1
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	1f 93       	push	r17
    3054:	0f 93       	push	r16
    3056:	ff 92       	push	r15
    3058:	ef 92       	push	r14
    305a:	19 2f       	mov	r17, r25
    305c:	98 7f       	andi	r25, 0xF8	; 248
    305e:	96 95       	lsr	r25
    3060:	e9 2f       	mov	r30, r25
    3062:	96 95       	lsr	r25
    3064:	96 95       	lsr	r25
    3066:	e9 0f       	add	r30, r25
    3068:	ff 27       	eor	r31, r31
    306a:	e1 5a       	subi	r30, 0xA1	; 161
    306c:	fe 4f       	sbci	r31, 0xFE	; 254
    306e:	99 27       	eor	r25, r25
    3070:	33 27       	eor	r19, r19
    3072:	ee 24       	eor	r14, r14
    3074:	ff 24       	eor	r15, r15
    3076:	a7 01       	movw	r20, r14
    3078:	e7 01       	movw	r28, r14
    307a:	05 90       	lpm	r0, Z+
    307c:	08 94       	sec
    307e:	07 94       	ror	r0
    3080:	28 f4       	brcc	.+10     	; 0x308c <__ftoa_engine+0x80>
    3082:	36 0f       	add	r19, r22
    3084:	e7 1e       	adc	r14, r23
    3086:	f8 1e       	adc	r15, r24
    3088:	49 1f       	adc	r20, r25
    308a:	51 1d       	adc	r21, r1
    308c:	66 0f       	add	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	88 1f       	adc	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	06 94       	lsr	r0
    3096:	a1 f7       	brne	.-24     	; 0x3080 <__ftoa_engine+0x74>
    3098:	05 90       	lpm	r0, Z+
    309a:	07 94       	ror	r0
    309c:	28 f4       	brcc	.+10     	; 0x30a8 <__ftoa_engine+0x9c>
    309e:	e7 0e       	add	r14, r23
    30a0:	f8 1e       	adc	r15, r24
    30a2:	49 1f       	adc	r20, r25
    30a4:	56 1f       	adc	r21, r22
    30a6:	c1 1d       	adc	r28, r1
    30a8:	77 0f       	add	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	66 1f       	adc	r22, r22
    30b0:	06 94       	lsr	r0
    30b2:	a1 f7       	brne	.-24     	; 0x309c <__ftoa_engine+0x90>
    30b4:	05 90       	lpm	r0, Z+
    30b6:	07 94       	ror	r0
    30b8:	28 f4       	brcc	.+10     	; 0x30c4 <__ftoa_engine+0xb8>
    30ba:	f8 0e       	add	r15, r24
    30bc:	49 1f       	adc	r20, r25
    30be:	56 1f       	adc	r21, r22
    30c0:	c7 1f       	adc	r28, r23
    30c2:	d1 1d       	adc	r29, r1
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	66 1f       	adc	r22, r22
    30ca:	77 1f       	adc	r23, r23
    30cc:	06 94       	lsr	r0
    30ce:	a1 f7       	brne	.-24     	; 0x30b8 <__ftoa_engine+0xac>
    30d0:	05 90       	lpm	r0, Z+
    30d2:	07 94       	ror	r0
    30d4:	20 f4       	brcc	.+8      	; 0x30de <__ftoa_engine+0xd2>
    30d6:	49 0f       	add	r20, r25
    30d8:	56 1f       	adc	r21, r22
    30da:	c7 1f       	adc	r28, r23
    30dc:	d8 1f       	adc	r29, r24
    30de:	99 0f       	add	r25, r25
    30e0:	66 1f       	adc	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	06 94       	lsr	r0
    30e8:	a9 f7       	brne	.-22     	; 0x30d4 <__ftoa_engine+0xc8>
    30ea:	84 91       	lpm	r24, Z+
    30ec:	10 95       	com	r17
    30ee:	17 70       	andi	r17, 0x07	; 7
    30f0:	41 f0       	breq	.+16     	; 0x3102 <__ftoa_engine+0xf6>
    30f2:	d6 95       	lsr	r29
    30f4:	c7 95       	ror	r28
    30f6:	57 95       	ror	r21
    30f8:	47 95       	ror	r20
    30fa:	f7 94       	ror	r15
    30fc:	e7 94       	ror	r14
    30fe:	1a 95       	dec	r17
    3100:	c1 f7       	brne	.-16     	; 0x30f2 <__ftoa_engine+0xe6>
    3102:	e5 e0       	ldi	r30, 0x05	; 5
    3104:	f1 e0       	ldi	r31, 0x01	; 1
    3106:	68 94       	set
    3108:	15 90       	lpm	r1, Z+
    310a:	15 91       	lpm	r17, Z+
    310c:	35 91       	lpm	r19, Z+
    310e:	65 91       	lpm	r22, Z+
    3110:	95 91       	lpm	r25, Z+
    3112:	05 90       	lpm	r0, Z+
    3114:	7f e2       	ldi	r23, 0x2F	; 47
    3116:	73 95       	inc	r23
    3118:	e1 18       	sub	r14, r1
    311a:	f1 0a       	sbc	r15, r17
    311c:	43 0b       	sbc	r20, r19
    311e:	56 0b       	sbc	r21, r22
    3120:	c9 0b       	sbc	r28, r25
    3122:	d0 09       	sbc	r29, r0
    3124:	c0 f7       	brcc	.-16     	; 0x3116 <__ftoa_engine+0x10a>
    3126:	e1 0c       	add	r14, r1
    3128:	f1 1e       	adc	r15, r17
    312a:	43 1f       	adc	r20, r19
    312c:	56 1f       	adc	r21, r22
    312e:	c9 1f       	adc	r28, r25
    3130:	d0 1d       	adc	r29, r0
    3132:	7e f4       	brtc	.+30     	; 0x3152 <__ftoa_engine+0x146>
    3134:	70 33       	cpi	r23, 0x30	; 48
    3136:	11 f4       	brne	.+4      	; 0x313c <__ftoa_engine+0x130>
    3138:	8a 95       	dec	r24
    313a:	e6 cf       	rjmp	.-52     	; 0x3108 <__ftoa_engine+0xfc>
    313c:	e8 94       	clt
    313e:	01 50       	subi	r16, 0x01	; 1
    3140:	30 f0       	brcs	.+12     	; 0x314e <__ftoa_engine+0x142>
    3142:	08 0f       	add	r16, r24
    3144:	0a f4       	brpl	.+2      	; 0x3148 <__ftoa_engine+0x13c>
    3146:	00 27       	eor	r16, r16
    3148:	02 17       	cp	r16, r18
    314a:	08 f4       	brcc	.+2      	; 0x314e <__ftoa_engine+0x142>
    314c:	20 2f       	mov	r18, r16
    314e:	23 95       	inc	r18
    3150:	02 2f       	mov	r16, r18
    3152:	7a 33       	cpi	r23, 0x3A	; 58
    3154:	28 f0       	brcs	.+10     	; 0x3160 <__ftoa_engine+0x154>
    3156:	79 e3       	ldi	r23, 0x39	; 57
    3158:	7d 93       	st	X+, r23
    315a:	2a 95       	dec	r18
    315c:	e9 f7       	brne	.-6      	; 0x3158 <__ftoa_engine+0x14c>
    315e:	10 c0       	rjmp	.+32     	; 0x3180 <__ftoa_engine+0x174>
    3160:	7d 93       	st	X+, r23
    3162:	2a 95       	dec	r18
    3164:	89 f6       	brne	.-94     	; 0x3108 <__ftoa_engine+0xfc>
    3166:	06 94       	lsr	r0
    3168:	97 95       	ror	r25
    316a:	67 95       	ror	r22
    316c:	37 95       	ror	r19
    316e:	17 95       	ror	r17
    3170:	17 94       	ror	r1
    3172:	e1 18       	sub	r14, r1
    3174:	f1 0a       	sbc	r15, r17
    3176:	43 0b       	sbc	r20, r19
    3178:	56 0b       	sbc	r21, r22
    317a:	c9 0b       	sbc	r28, r25
    317c:	d0 09       	sbc	r29, r0
    317e:	98 f0       	brcs	.+38     	; 0x31a6 <__ftoa_engine+0x19a>
    3180:	23 95       	inc	r18
    3182:	7e 91       	ld	r23, -X
    3184:	73 95       	inc	r23
    3186:	7a 33       	cpi	r23, 0x3A	; 58
    3188:	08 f0       	brcs	.+2      	; 0x318c <__ftoa_engine+0x180>
    318a:	70 e3       	ldi	r23, 0x30	; 48
    318c:	7c 93       	st	X, r23
    318e:	20 13       	cpse	r18, r16
    3190:	b8 f7       	brcc	.-18     	; 0x3180 <__ftoa_engine+0x174>
    3192:	7e 91       	ld	r23, -X
    3194:	70 61       	ori	r23, 0x10	; 16
    3196:	7d 93       	st	X+, r23
    3198:	30 f0       	brcs	.+12     	; 0x31a6 <__ftoa_engine+0x19a>
    319a:	83 95       	inc	r24
    319c:	71 e3       	ldi	r23, 0x31	; 49
    319e:	7d 93       	st	X+, r23
    31a0:	70 e3       	ldi	r23, 0x30	; 48
    31a2:	2a 95       	dec	r18
    31a4:	e1 f7       	brne	.-8      	; 0x319e <__ftoa_engine+0x192>
    31a6:	11 24       	eor	r1, r1
    31a8:	ef 90       	pop	r14
    31aa:	ff 90       	pop	r15
    31ac:	0f 91       	pop	r16
    31ae:	1f 91       	pop	r17
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	99 27       	eor	r25, r25
    31b6:	87 fd       	sbrc	r24, 7
    31b8:	90 95       	com	r25
    31ba:	08 95       	ret

000031bc <isspace>:
    31bc:	91 11       	cpse	r25, r1
    31be:	8a c1       	rjmp	.+788    	; 0x34d4 <__ctype_isfalse>
    31c0:	80 32       	cpi	r24, 0x20	; 32
    31c2:	19 f0       	breq	.+6      	; 0x31ca <isspace+0xe>
    31c4:	89 50       	subi	r24, 0x09	; 9
    31c6:	85 50       	subi	r24, 0x05	; 5
    31c8:	d0 f7       	brcc	.-12     	; 0x31be <isspace+0x2>
    31ca:	08 95       	ret

000031cc <tolower>:
    31cc:	91 11       	cpse	r25, r1
    31ce:	08 95       	ret
    31d0:	81 54       	subi	r24, 0x41	; 65
    31d2:	8a 51       	subi	r24, 0x1A	; 26
    31d4:	08 f4       	brcc	.+2      	; 0x31d8 <tolower+0xc>
    31d6:	80 5e       	subi	r24, 0xE0	; 224
    31d8:	85 5a       	subi	r24, 0xA5	; 165
    31da:	08 95       	ret

000031dc <strchr_P>:
    31dc:	fc 01       	movw	r30, r24
    31de:	05 90       	lpm	r0, Z+
    31e0:	06 16       	cp	r0, r22
    31e2:	21 f0       	breq	.+8      	; 0x31ec <strchr_P+0x10>
    31e4:	00 20       	and	r0, r0
    31e6:	d9 f7       	brne	.-10     	; 0x31de <strchr_P+0x2>
    31e8:	c0 01       	movw	r24, r0
    31ea:	08 95       	ret
    31ec:	31 97       	sbiw	r30, 0x01	; 1
    31ee:	cf 01       	movw	r24, r30
    31f0:	08 95       	ret

000031f2 <strnlen_P>:
    31f2:	fc 01       	movw	r30, r24
    31f4:	05 90       	lpm	r0, Z+
    31f6:	61 50       	subi	r22, 0x01	; 1
    31f8:	70 40       	sbci	r23, 0x00	; 0
    31fa:	01 10       	cpse	r0, r1
    31fc:	d8 f7       	brcc	.-10     	; 0x31f4 <strnlen_P+0x2>
    31fe:	80 95       	com	r24
    3200:	90 95       	com	r25
    3202:	8e 0f       	add	r24, r30
    3204:	9f 1f       	adc	r25, r31
    3206:	08 95       	ret

00003208 <strnlen>:
    3208:	fc 01       	movw	r30, r24
    320a:	61 50       	subi	r22, 0x01	; 1
    320c:	70 40       	sbci	r23, 0x00	; 0
    320e:	01 90       	ld	r0, Z+
    3210:	01 10       	cpse	r0, r1
    3212:	d8 f7       	brcc	.-10     	; 0x320a <strnlen+0x2>
    3214:	80 95       	com	r24
    3216:	90 95       	com	r25
    3218:	8e 0f       	add	r24, r30
    321a:	9f 1f       	adc	r25, r31
    321c:	08 95       	ret

0000321e <fgetc>:
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	ec 01       	movw	r28, r24
    3224:	4b 81       	ldd	r20, Y+3	; 0x03
    3226:	40 ff       	sbrs	r20, 0
    3228:	1a c0       	rjmp	.+52     	; 0x325e <fgetc+0x40>
    322a:	46 ff       	sbrs	r20, 6
    322c:	0a c0       	rjmp	.+20     	; 0x3242 <fgetc+0x24>
    322e:	4f 7b       	andi	r20, 0xBF	; 191
    3230:	4b 83       	std	Y+3, r20	; 0x03
    3232:	8e 81       	ldd	r24, Y+6	; 0x06
    3234:	9f 81       	ldd	r25, Y+7	; 0x07
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	9f 83       	std	Y+7, r25	; 0x07
    323a:	8e 83       	std	Y+6, r24	; 0x06
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	28 2f       	mov	r18, r24
    3240:	2b c0       	rjmp	.+86     	; 0x3298 <fgetc+0x7a>
    3242:	42 ff       	sbrs	r20, 2
    3244:	13 c0       	rjmp	.+38     	; 0x326c <fgetc+0x4e>
    3246:	e8 81       	ld	r30, Y
    3248:	f9 81       	ldd	r31, Y+1	; 0x01
    324a:	80 81       	ld	r24, Z
    324c:	28 2f       	mov	r18, r24
    324e:	33 27       	eor	r19, r19
    3250:	27 fd       	sbrc	r18, 7
    3252:	30 95       	com	r19
    3254:	21 15       	cp	r18, r1
    3256:	31 05       	cpc	r19, r1
    3258:	29 f4       	brne	.+10     	; 0x3264 <fgetc+0x46>
    325a:	40 62       	ori	r20, 0x20	; 32
    325c:	4b 83       	std	Y+3, r20	; 0x03
    325e:	2f ef       	ldi	r18, 0xFF	; 255
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	1b c0       	rjmp	.+54     	; 0x329a <fgetc+0x7c>
    3264:	31 96       	adiw	r30, 0x01	; 1
    3266:	f9 83       	std	Y+1, r31	; 0x01
    3268:	e8 83       	st	Y, r30
    326a:	11 c0       	rjmp	.+34     	; 0x328e <fgetc+0x70>
    326c:	ea 85       	ldd	r30, Y+10	; 0x0a
    326e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3270:	ce 01       	movw	r24, r28
    3272:	09 95       	icall
    3274:	9c 01       	movw	r18, r24
    3276:	97 ff       	sbrs	r25, 7
    3278:	0a c0       	rjmp	.+20     	; 0x328e <fgetc+0x70>
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	2f 5f       	subi	r18, 0xFF	; 255
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	11 f0       	breq	.+4      	; 0x3286 <fgetc+0x68>
    3282:	80 e2       	ldi	r24, 0x20	; 32
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <fgetc+0x6a>
    3286:	80 e1       	ldi	r24, 0x10	; 16
    3288:	89 2b       	or	r24, r25
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	e8 cf       	rjmp	.-48     	; 0x325e <fgetc+0x40>
    328e:	8e 81       	ldd	r24, Y+6	; 0x06
    3290:	9f 81       	ldd	r25, Y+7	; 0x07
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	9f 83       	std	Y+7, r25	; 0x07
    3296:	8e 83       	std	Y+6, r24	; 0x06
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	c9 01       	movw	r24, r18
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <fprintf>:
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e7 e5       	ldi	r30, 0x57	; 87
    32a8:	f9 e1       	ldi	r31, 0x19	; 25
    32aa:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__+0x20>
    32ae:	9e 01       	movw	r18, r28
    32b0:	27 5f       	subi	r18, 0xF7	; 247
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	a9 01       	movw	r20, r18
    32be:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <vfprintf>
    32c2:	20 96       	adiw	r28, 0x00	; 0
    32c4:	e2 e0       	ldi	r30, 0x02	; 2
    32c6:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__+0x20>

000032ca <fputc>:
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	8c 01       	movw	r16, r24
    32d4:	eb 01       	movw	r28, r22
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	81 ff       	sbrs	r24, 1
    32da:	1b c0       	rjmp	.+54     	; 0x3312 <fputc+0x48>
    32dc:	82 ff       	sbrs	r24, 2
    32de:	0d c0       	rjmp	.+26     	; 0x32fa <fputc+0x30>
    32e0:	2e 81       	ldd	r18, Y+6	; 0x06
    32e2:	3f 81       	ldd	r19, Y+7	; 0x07
    32e4:	8c 81       	ldd	r24, Y+4	; 0x04
    32e6:	9d 81       	ldd	r25, Y+5	; 0x05
    32e8:	28 17       	cp	r18, r24
    32ea:	39 07       	cpc	r19, r25
    32ec:	64 f4       	brge	.+24     	; 0x3306 <fputc+0x3c>
    32ee:	e8 81       	ld	r30, Y
    32f0:	f9 81       	ldd	r31, Y+1	; 0x01
    32f2:	01 93       	st	Z+, r16
    32f4:	f9 83       	std	Y+1, r31	; 0x01
    32f6:	e8 83       	st	Y, r30
    32f8:	06 c0       	rjmp	.+12     	; 0x3306 <fputc+0x3c>
    32fa:	e8 85       	ldd	r30, Y+8	; 0x08
    32fc:	f9 85       	ldd	r31, Y+9	; 0x09
    32fe:	80 2f       	mov	r24, r16
    3300:	09 95       	icall
    3302:	89 2b       	or	r24, r25
    3304:	31 f4       	brne	.+12     	; 0x3312 <fputc+0x48>
    3306:	8e 81       	ldd	r24, Y+6	; 0x06
    3308:	9f 81       	ldd	r25, Y+7	; 0x07
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	9f 83       	std	Y+7, r25	; 0x07
    330e:	8e 83       	std	Y+6, r24	; 0x06
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <fputc+0x4c>
    3312:	0f ef       	ldi	r16, 0xFF	; 255
    3314:	1f ef       	ldi	r17, 0xFF	; 255
    3316:	c8 01       	movw	r24, r16
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	08 95       	ret

00003322 <fputs>:
    3322:	ef 92       	push	r14
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	7c 01       	movw	r14, r24
    3330:	8b 01       	movw	r16, r22
    3332:	db 01       	movw	r26, r22
    3334:	13 96       	adiw	r26, 0x03	; 3
    3336:	8c 91       	ld	r24, X
    3338:	81 fd       	sbrc	r24, 1
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <fputs+0x20>
    333c:	cf ef       	ldi	r28, 0xFF	; 255
    333e:	df ef       	ldi	r29, 0xFF	; 255
    3340:	13 c0       	rjmp	.+38     	; 0x3368 <fputs+0x46>
    3342:	c0 e0       	ldi	r28, 0x00	; 0
    3344:	d0 e0       	ldi	r29, 0x00	; 0
    3346:	0b c0       	rjmp	.+22     	; 0x335e <fputs+0x3c>
    3348:	d8 01       	movw	r26, r16
    334a:	18 96       	adiw	r26, 0x08	; 8
    334c:	ed 91       	ld	r30, X+
    334e:	fc 91       	ld	r31, X
    3350:	19 97       	sbiw	r26, 0x09	; 9
    3352:	b8 01       	movw	r22, r16
    3354:	09 95       	icall
    3356:	89 2b       	or	r24, r25
    3358:	11 f0       	breq	.+4      	; 0x335e <fputs+0x3c>
    335a:	cf ef       	ldi	r28, 0xFF	; 255
    335c:	df ef       	ldi	r29, 0xFF	; 255
    335e:	f7 01       	movw	r30, r14
    3360:	81 91       	ld	r24, Z+
    3362:	7f 01       	movw	r14, r30
    3364:	88 23       	and	r24, r24
    3366:	81 f7       	brne	.-32     	; 0x3348 <fputs+0x26>
    3368:	ce 01       	movw	r24, r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	e6 e0       	ldi	r30, 0x06	; 6
    3370:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__epilogue_restores__+0x18>

00003374 <fscanf>:
    3374:	a0 e0       	ldi	r26, 0x00	; 0
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	e0 ec       	ldi	r30, 0xC0	; 192
    337a:	f9 e1       	ldi	r31, 0x19	; 25
    337c:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__+0x20>
    3380:	9e 01       	movw	r18, r28
    3382:	27 5f       	subi	r18, 0xF7	; 247
    3384:	3f 4f       	sbci	r19, 0xFF	; 255
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	6f 81       	ldd	r22, Y+7	; 0x07
    338c:	78 85       	ldd	r23, Y+8	; 0x08
    338e:	a9 01       	movw	r20, r18
    3390:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <vfscanf>
    3394:	20 96       	adiw	r28, 0x00	; 0
    3396:	e2 e0       	ldi	r30, 0x02	; 2
    3398:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__+0x20>

0000339c <sprintf>:
    339c:	ae e0       	ldi	r26, 0x0E	; 14
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e4 ed       	ldi	r30, 0xD4	; 212
    33a2:	f9 e1       	ldi	r31, 0x19	; 25
    33a4:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x1c>
    33a8:	0d 89       	ldd	r16, Y+21	; 0x15
    33aa:	1e 89       	ldd	r17, Y+22	; 0x16
    33ac:	86 e0       	ldi	r24, 0x06	; 6
    33ae:	8c 83       	std	Y+4, r24	; 0x04
    33b0:	1a 83       	std	Y+2, r17	; 0x02
    33b2:	09 83       	std	Y+1, r16	; 0x01
    33b4:	8f ef       	ldi	r24, 0xFF	; 255
    33b6:	9f e7       	ldi	r25, 0x7F	; 127
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	9e 01       	movw	r18, r28
    33be:	27 5e       	subi	r18, 0xE7	; 231
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	ce 01       	movw	r24, r28
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	6f 89       	ldd	r22, Y+23	; 0x17
    33c8:	78 8d       	ldd	r23, Y+24	; 0x18
    33ca:	a9 01       	movw	r20, r18
    33cc:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <vfprintf>
    33d0:	2f 81       	ldd	r18, Y+7	; 0x07
    33d2:	38 85       	ldd	r19, Y+8	; 0x08
    33d4:	02 0f       	add	r16, r18
    33d6:	13 1f       	adc	r17, r19
    33d8:	f8 01       	movw	r30, r16
    33da:	10 82       	st	Z, r1
    33dc:	2e 96       	adiw	r28, 0x0e	; 14
    33de:	e4 e0       	ldi	r30, 0x04	; 4
    33e0:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x1c>

000033e4 <ungetc>:
    33e4:	9c 01       	movw	r18, r24
    33e6:	fb 01       	movw	r30, r22
    33e8:	83 81       	ldd	r24, Z+3	; 0x03
    33ea:	80 ff       	sbrs	r24, 0
    33ec:	11 c0       	rjmp	.+34     	; 0x3410 <ungetc+0x2c>
    33ee:	86 fd       	sbrc	r24, 6
    33f0:	0f c0       	rjmp	.+30     	; 0x3410 <ungetc+0x2c>
    33f2:	9f ef       	ldi	r25, 0xFF	; 255
    33f4:	2f 3f       	cpi	r18, 0xFF	; 255
    33f6:	39 07       	cpc	r19, r25
    33f8:	59 f0       	breq	.+22     	; 0x3410 <ungetc+0x2c>
    33fa:	22 83       	std	Z+2, r18	; 0x02
    33fc:	80 64       	ori	r24, 0x40	; 64
    33fe:	8f 7d       	andi	r24, 0xDF	; 223
    3400:	83 83       	std	Z+3, r24	; 0x03
    3402:	86 81       	ldd	r24, Z+6	; 0x06
    3404:	97 81       	ldd	r25, Z+7	; 0x07
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	97 83       	std	Z+7, r25	; 0x07
    340a:	86 83       	std	Z+6, r24	; 0x06
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <ungetc+0x30>
    3410:	2f ef       	ldi	r18, 0xFF	; 255
    3412:	3f ef       	ldi	r19, 0xFF	; 255
    3414:	c9 01       	movw	r24, r18
    3416:	08 95       	ret

00003418 <__ultoa_invert>:
    3418:	fa 01       	movw	r30, r20
    341a:	aa 27       	eor	r26, r26
    341c:	28 30       	cpi	r18, 0x08	; 8
    341e:	51 f1       	breq	.+84     	; 0x3474 <__ultoa_invert+0x5c>
    3420:	20 31       	cpi	r18, 0x10	; 16
    3422:	81 f1       	breq	.+96     	; 0x3484 <__ultoa_invert+0x6c>
    3424:	e8 94       	clt
    3426:	6f 93       	push	r22
    3428:	6e 7f       	andi	r22, 0xFE	; 254
    342a:	6e 5f       	subi	r22, 0xFE	; 254
    342c:	7f 4f       	sbci	r23, 0xFF	; 255
    342e:	8f 4f       	sbci	r24, 0xFF	; 255
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	af 4f       	sbci	r26, 0xFF	; 255
    3434:	b1 e0       	ldi	r27, 0x01	; 1
    3436:	3e d0       	rcall	.+124    	; 0x34b4 <__ultoa_invert+0x9c>
    3438:	b4 e0       	ldi	r27, 0x04	; 4
    343a:	3c d0       	rcall	.+120    	; 0x34b4 <__ultoa_invert+0x9c>
    343c:	67 0f       	add	r22, r23
    343e:	78 1f       	adc	r23, r24
    3440:	89 1f       	adc	r24, r25
    3442:	9a 1f       	adc	r25, r26
    3444:	a1 1d       	adc	r26, r1
    3446:	68 0f       	add	r22, r24
    3448:	79 1f       	adc	r23, r25
    344a:	8a 1f       	adc	r24, r26
    344c:	91 1d       	adc	r25, r1
    344e:	a1 1d       	adc	r26, r1
    3450:	6a 0f       	add	r22, r26
    3452:	71 1d       	adc	r23, r1
    3454:	81 1d       	adc	r24, r1
    3456:	91 1d       	adc	r25, r1
    3458:	a1 1d       	adc	r26, r1
    345a:	20 d0       	rcall	.+64     	; 0x349c <__ultoa_invert+0x84>
    345c:	09 f4       	brne	.+2      	; 0x3460 <__ultoa_invert+0x48>
    345e:	68 94       	set
    3460:	3f 91       	pop	r19
    3462:	2a e0       	ldi	r18, 0x0A	; 10
    3464:	26 9f       	mul	r18, r22
    3466:	11 24       	eor	r1, r1
    3468:	30 19       	sub	r19, r0
    346a:	30 5d       	subi	r19, 0xD0	; 208
    346c:	31 93       	st	Z+, r19
    346e:	de f6       	brtc	.-74     	; 0x3426 <__ultoa_invert+0xe>
    3470:	cf 01       	movw	r24, r30
    3472:	08 95       	ret
    3474:	46 2f       	mov	r20, r22
    3476:	47 70       	andi	r20, 0x07	; 7
    3478:	40 5d       	subi	r20, 0xD0	; 208
    347a:	41 93       	st	Z+, r20
    347c:	b3 e0       	ldi	r27, 0x03	; 3
    347e:	0f d0       	rcall	.+30     	; 0x349e <__ultoa_invert+0x86>
    3480:	c9 f7       	brne	.-14     	; 0x3474 <__ultoa_invert+0x5c>
    3482:	f6 cf       	rjmp	.-20     	; 0x3470 <__ultoa_invert+0x58>
    3484:	46 2f       	mov	r20, r22
    3486:	4f 70       	andi	r20, 0x0F	; 15
    3488:	40 5d       	subi	r20, 0xD0	; 208
    348a:	4a 33       	cpi	r20, 0x3A	; 58
    348c:	18 f0       	brcs	.+6      	; 0x3494 <__ultoa_invert+0x7c>
    348e:	49 5d       	subi	r20, 0xD9	; 217
    3490:	31 fd       	sbrc	r19, 1
    3492:	40 52       	subi	r20, 0x20	; 32
    3494:	41 93       	st	Z+, r20
    3496:	02 d0       	rcall	.+4      	; 0x349c <__ultoa_invert+0x84>
    3498:	a9 f7       	brne	.-22     	; 0x3484 <__ultoa_invert+0x6c>
    349a:	ea cf       	rjmp	.-44     	; 0x3470 <__ultoa_invert+0x58>
    349c:	b4 e0       	ldi	r27, 0x04	; 4
    349e:	a6 95       	lsr	r26
    34a0:	97 95       	ror	r25
    34a2:	87 95       	ror	r24
    34a4:	77 95       	ror	r23
    34a6:	67 95       	ror	r22
    34a8:	ba 95       	dec	r27
    34aa:	c9 f7       	brne	.-14     	; 0x349e <__ultoa_invert+0x86>
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	61 05       	cpc	r22, r1
    34b0:	71 05       	cpc	r23, r1
    34b2:	08 95       	ret
    34b4:	9b 01       	movw	r18, r22
    34b6:	ac 01       	movw	r20, r24
    34b8:	0a 2e       	mov	r0, r26
    34ba:	06 94       	lsr	r0
    34bc:	57 95       	ror	r21
    34be:	47 95       	ror	r20
    34c0:	37 95       	ror	r19
    34c2:	27 95       	ror	r18
    34c4:	ba 95       	dec	r27
    34c6:	c9 f7       	brne	.-14     	; 0x34ba <__ultoa_invert+0xa2>
    34c8:	62 0f       	add	r22, r18
    34ca:	73 1f       	adc	r23, r19
    34cc:	84 1f       	adc	r24, r20
    34ce:	95 1f       	adc	r25, r21
    34d0:	a0 1d       	adc	r26, r0
    34d2:	08 95       	ret

000034d4 <__ctype_isfalse>:
    34d4:	99 27       	eor	r25, r25
    34d6:	88 27       	eor	r24, r24

000034d8 <__ctype_istrue>:
    34d8:	08 95       	ret

000034da <_exit>:
    34da:	f8 94       	cli

000034dc <__stop_program>:
    34dc:	ff cf       	rjmp	.-2      	; 0x34dc <__stop_program>
