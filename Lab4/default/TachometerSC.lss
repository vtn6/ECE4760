
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00003240  000032d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  0080025e  0080025e  00003432  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000420  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ffe  00000000  00000000  00003932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b93  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016ba  00000000  00000000  000064c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00007b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f3  00000000  00000000  00007ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e62  00000000  00000000  000085e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_1>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_11>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_13>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_21>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000070 <__c.1790>:
      70:	6e 61 6e 00                                         nan.

00000074 <__c.1788>:
      74:	69 6e 66 00                                         inf.

00000078 <__c.2085>:
      78:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      88:	47 00                                               G.

0000008a <pstr_an>:
      8a:	61 6e 00                                            an.

0000008d <pstr_nfinity>:
      8d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000095 <pwr_m10>:
      95:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ad <pwr_p10>:
      ad:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bd:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000c5 <LcdCustomChar>:
      c5:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d5:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e5:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f5:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     105:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     115:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     125:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     135:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     145:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     155:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     165:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     175:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     185:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     195:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     1a5:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     1b5:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     1c5:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     1d5:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1e5:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1f5:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e1       	ldi	r29, 0x10	; 16
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	12 e0       	ldi	r17, 0x02	; 2
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e0 e4       	ldi	r30, 0x40	; 64
     214:	f2 e3       	ldi	r31, 0x32	; 50
     216:	02 c0       	rjmp	.+4      	; 0x21c <.do_copy_data_start>

00000218 <.do_copy_data_loop>:
     218:	05 90       	lpm	r0, Z+
     21a:	0d 92       	st	X+, r0

0000021c <.do_copy_data_start>:
     21c:	ae 35       	cpi	r26, 0x5E	; 94
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <.do_copy_data_loop>

00000222 <__do_clear_bss>:
     222:	13 e0       	ldi	r17, 0x03	; 3
     224:	ae e5       	ldi	r26, 0x5E	; 94
     226:	b2 e0       	ldi	r27, 0x02	; 2
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a6 3d       	cpi	r26, 0xD6	; 214
     22e:	b1 07       	cpc	r27, r17
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <main>
     236:	0c 94 1e 19 	jmp	0x323c	; 0x323c <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     284:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     288:	50 90 84 03 	lds	r5, 0x0384
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     28c:	b0 9b       	sbis	0x16, 0	; 22
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_13+0x7a>
    ++kernel.cycles;
     290:	80 91 c5 03 	lds	r24, 0x03C5
     294:	90 91 c6 03 	lds	r25, 0x03C6
     298:	a0 91 c7 03 	lds	r26, 0x03C7
     29c:	b0 91 c8 03 	lds	r27, 0x03C8
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 c5 03 	sts	0x03C5, r24
     2aa:	90 93 c6 03 	sts	0x03C6, r25
     2ae:	a0 93 c7 03 	sts	0x03C7, r26
     2b2:	b0 93 c8 03 	sts	0x03C8, r27
    TIFR1 |= (1<<TOV1) ;
     2b6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2b8:	80 91 84 00 	lds	r24, 0x0084
     2bc:	90 91 85 00 	lds	r25, 0x0085
     2c0:	3c 01       	movw	r6, r24
     2c2:	88 24       	eor	r8, r8
     2c4:	99 24       	eor	r9, r9
     2c6:	80 91 c5 03 	lds	r24, 0x03C5
     2ca:	90 91 c6 03 	lds	r25, 0x03C6
     2ce:	a0 91 c7 03 	lds	r26, 0x03C7
     2d2:	b0 91 c8 03 	lds	r27, 0x03C8
     2d6:	dc 01       	movw	r26, r24
     2d8:	99 27       	eor	r25, r25
     2da:	88 27       	eor	r24, r24
     2dc:	68 0e       	add	r6, r24
     2de:	79 1e       	adc	r7, r25
     2e0:	8a 1e       	adc	r8, r26
     2e2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	40 90 83 03 	lds	r4, 0x0383
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	af 2e       	mov	r10, r31
     2f0:	ff ef       	ldi	r31, 0xFF	; 255
     2f2:	bf 2e       	mov	r11, r31
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 2e       	mov	r12, r31
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     300:	33 24       	eor	r3, r3
     302:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     304:	cb e0       	ldi	r28, 0x0B	; 11
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	43 c0       	rjmp	.+134    	; 0x390 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     30a:	62 9d       	mul	r22, r2
     30c:	d0 01       	movw	r26, r0
     30e:	11 24       	eor	r1, r1
     310:	ab 57       	subi	r26, 0x7B	; 123
     312:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == TIMEQ) {
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	a1 f4       	brne	.+40     	; 0x346 <__vector_13+0x108>
      if (t->release <= now) {
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	ed 90       	ld	r14, X+
     322:	fd 90       	ld	r15, X+
     324:	0d 91       	ld	r16, X+
     326:	1c 91       	ld	r17, X
     328:	15 97       	sbiw	r26, 0x05	; 5
     32a:	6e 14       	cp	r6, r14
     32c:	7f 04       	cpc	r7, r15
     32e:	80 06       	cpc	r8, r16
     330:	91 06       	cpc	r9, r17
     332:	20 f0       	brcs	.+8      	; 0x33c <__vector_13+0xfe>
	t->state = READYQ;
     334:	1a 96       	adiw	r26, 0x0a	; 10
     336:	3c 92       	st	X, r3
     338:	1a 97       	sbiw	r26, 0x0a	; 10
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     33c:	ea 14       	cp	r14, r10
     33e:	fb 04       	cpc	r15, r11
     340:	0c 05       	cpc	r16, r12
     342:	1d 05       	cpc	r17, r13
     344:	10 f0       	brcs	.+4      	; 0x34a <__vector_13+0x10c>
     346:	86 01       	movw	r16, r12
     348:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     34a:	1a 96       	adiw	r26, 0x0a	; 10
     34c:	8c 91       	ld	r24, X
     34e:	1a 97       	sbiw	r26, 0x0a	; 10
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	d9 f4       	brne	.+54     	; 0x38a <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     354:	87 2f       	mov	r24, r23
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	9c 9f       	mul	r25, r28
     362:	f0 0d       	add	r31, r0
     364:	11 24       	eor	r1, r1
     366:	ed 57       	subi	r30, 0x7D	; 125
     368:	fc 4f       	sbci	r31, 0xFC	; 252
     36a:	16 96       	adiw	r26, 0x06	; 6
     36c:	2d 91       	ld	r18, X+
     36e:	3d 91       	ld	r19, X+
     370:	4d 91       	ld	r20, X+
     372:	5c 91       	ld	r21, X
     374:	19 97       	sbiw	r26, 0x09	; 9
     376:	80 85       	ldd	r24, Z+8	; 0x08
     378:	91 85       	ldd	r25, Z+9	; 0x09
     37a:	a2 85       	ldd	r26, Z+10	; 0x0a
     37c:	b3 85       	ldd	r27, Z+11	; 0x0b
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	4a 07       	cpc	r20, r26
     384:	5b 07       	cpc	r21, r27
     386:	08 f4       	brcc	.+2      	; 0x38a <__vector_13+0x14c>
     388:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	57 01       	movw	r10, r14
     38e:	68 01       	movw	r12, r16
     390:	46 16       	cp	r4, r22
     392:	08 f0       	brcs	.+2      	; 0x396 <__vector_13+0x158>
     394:	ba cf       	rjmp	.-140    	; 0x30a <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     396:	75 15       	cp	r23, r5
     398:	b1 f0       	breq	.+44     	; 0x3c6 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	5e 9e       	mul	r5, r30
     39e:	d0 01       	movw	r26, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	ab 57       	subi	r26, 0x7B	; 123
     3a4:	bc 4f       	sbci	r27, 0xFC	; 252
    t->spl = SPL;
     3a6:	8d b7       	in	r24, 0x3d	; 61
     3a8:	8c 93       	st	X, r24
    t->sph = SPH;
     3aa:	8e b7       	in	r24, 0x3e	; 62
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3b0:	7e 9f       	mul	r23, r30
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	eb 57       	subi	r30, 0x7B	; 123
     3b8:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3be:	80 81       	ld	r24, Z
     3c0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3c2:	70 93 84 03 	sts	0x0384, r23

  }

  kernel.nextHit = nextHit;  
     3c6:	a0 92 c9 03 	sts	0x03C9, r10
     3ca:	b0 92 ca 03 	sts	0x03CA, r11
     3ce:	c0 92 cb 03 	sts	0x03CB, r12
     3d2:	d0 92 cc 03 	sts	0x03CC, r13

  now = (kernel.cycles << 16) + TCNT1;
     3d6:	20 91 84 00 	lds	r18, 0x0084
     3da:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	80 91 c5 03 	lds	r24, 0x03C5
     3e6:	90 91 c6 03 	lds	r25, 0x03C6
     3ea:	a0 91 c7 03 	lds	r26, 0x03C7
     3ee:	b0 91 c8 03 	lds	r27, 0x03C8
     3f2:	dc 01       	movw	r26, r24
     3f4:	99 27       	eor	r25, r25
     3f6:	88 27       	eor	r24, r24
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	4a 1f       	adc	r20, r26
     3fe:	5b 1f       	adc	r21, r27
     400:	d6 01       	movw	r26, r12
     402:	c5 01       	movw	r24, r10
     404:	82 1b       	sub	r24, r18
     406:	93 0b       	sbc	r25, r19
     408:	a4 0b       	sbc	r26, r20
     40a:	b5 0b       	sbc	r27, r21
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	a1 05       	cpc	r26, r1
     416:	b1 05       	cpc	r27, r1
     418:	24 f4       	brge	.+8      	; 0x422 <__vector_13+0x1e4>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     422:	80 91 84 00 	lds	r24, 0x0084
     426:	90 91 85 00 	lds	r25, 0x0085
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	a4 1f       	adc	r26, r20
     434:	b5 1f       	adc	r27, r21
     436:	80 50       	subi	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	a1 40       	sbci	r26, 0x01	; 1
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	38 f4       	brcc	.+14     	; 0x44e <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     44e:	80 91 84 00 	lds	r24, 0x0084
     452:	90 91 85 00 	lds	r25, 0x0085
     456:	8c 5f       	subi	r24, 0xFC	; 252
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	28 f4       	brcc	.+10     	; 0x466 <__vector_13+0x228>
    OCR1A = 0x0000;
     45c:	10 92 89 00 	sts	0x0089, r1
     460:	10 92 88 00 	sts	0x0088, r1
     464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 89 00 	sts	0x0089, r25
     46e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6f 00 	sts	0x006F, r24
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	3f 90       	pop	r3
     4b2:	2f 90       	pop	r2
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4c6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	28 1b       	sub	r18, r24
     4dc:	39 0b       	sbc	r19, r25
     4de:	30 93 c4 03 	sts	0x03C4, r19
     4e2:	20 93 c3 03 	sts	0x03C3, r18
  kernel.nbrOfTasks = 0;
     4e6:	10 92 83 03 	sts	0x0383, r1
  kernel.running = 0;
     4ea:	10 92 84 03 	sts	0x0384, r1

  kernel.cycles = 0x0000;
     4ee:	10 92 c5 03 	sts	0x03C5, r1
     4f2:	10 92 c6 03 	sts	0x03C6, r1
     4f6:	10 92 c7 03 	sts	0x03C7, r1
     4fa:	10 92 c8 03 	sts	0x03C8, r1
  kernel.nextHit = 0x7FFFFFFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	af ef       	ldi	r26, 0xFF	; 255
     504:	bf e7       	ldi	r27, 0x7F	; 127
     506:	80 93 c9 03 	sts	0x03C9, r24
     50a:	90 93 ca 03 	sts	0x03CA, r25
     50e:	a0 93 cb 03 	sts	0x03CB, r26
     512:	b0 93 cc 03 	sts	0x03CC, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     516:	80 93 8b 03 	sts	0x038B, r24
     51a:	90 93 8c 03 	sts	0x038C, r25
     51e:	a0 93 8d 03 	sts	0x038D, r26
     522:	b0 93 8e 03 	sts	0x038E, r27
  kernel.tasks[0].release = 0x00000000;
     526:	10 92 87 03 	sts	0x0387, r1
     52a:	10 92 88 03 	sts	0x0388, r1
     52e:	10 92 89 03 	sts	0x0389, r1
     532:	10 92 8a 03 	sts	0x038A, r1

  sei(); /* set enabled interrupts */
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	49 01       	movw	r8, r18
     554:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     556:	f8 94       	cli

  ++kernel.nbrOfTasks;
     558:	20 91 83 03 	lds	r18, 0x0383
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	20 93 83 03 	sts	0x0383, r18

  sp = kernel.memptr;
     562:	c0 91 c3 03 	lds	r28, 0x03C3
     566:	d0 91 c4 03 	lds	r29, 0x03C4
  kernel.memptr -= stacksize;  // decrease free mem ptr
     56a:	9e 01       	movw	r18, r28
     56c:	26 1b       	sub	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	30 93 c4 03 	sts	0x03C4, r19
     574:	20 93 c3 03 	sts	0x03C3, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     578:	88 83       	st	Y, r24
     57a:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     57c:	92 93       	st	-Z, r25
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     582:	ce 01       	movw	r24, r28
     584:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     58a:	a8 17       	cp	r26, r24
     58c:	b9 07       	cpc	r27, r25
     58e:	d9 f7       	brne	.-10     	; 0x586 <trtCreateTask+0x4c>
     590:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     592:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     594:	d2 92       	st	-Z, r13
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     59a:	9e 01       	movw	r18, r28
     59c:	23 52       	subi	r18, 0x23	; 35
     59e:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5a0:	1c 92       	st	X, r1
     5a2:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5a4:	a2 17       	cp	r26, r18
     5a6:	b3 07       	cpc	r27, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <trtCreateTask+0x66>
     5aa:	9f 01       	movw	r18, r30
     5ac:	26 50       	subi	r18, 0x06	; 6
     5ae:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5b0:	e0 91 83 03 	lds	r30, 0x0383
     5b4:	8b e0       	ldi	r24, 0x0B	; 11
     5b6:	e8 9f       	mul	r30, r24
     5b8:	f0 01       	movw	r30, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	eb 57       	subi	r30, 0x7B	; 123
     5be:	fc 4f       	sbci	r31, 0xFC	; 252

  t->release = release;
     5c0:	82 82       	std	Z+2, r8	; 0x02
     5c2:	93 82       	std	Z+3, r9	; 0x03
     5c4:	a4 82       	std	Z+4, r10	; 0x04
     5c6:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	f7 82       	std	Z+7, r15	; 0x07
     5cc:	00 87       	std	Z+8, r16	; 0x08
     5ce:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     5d4:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5d6:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>

}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5f6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5f8:	e3 e8       	ldi	r30, 0x83	; 131
     5fa:	f3 e0       	ldi	r31, 0x03	; 3
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     602:	78 94       	sei
}
     604:	08 95       	ret

00000606 <trtWait>:

void trtWait(uint8_t semnbr) {
     606:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     608:	20 91 84 03 	lds	r18, 0x0384

  cli(); // disable interrupts
     60c:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     60e:	e8 2f       	mov	r30, r24
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e5 54       	subi	r30, 0x45	; 69
     614:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	19 f0       	breq	.+6      	; 0x622 <trtWait+0x1c>
    (*s)--;
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	10 c0       	rjmp	.+32     	; 0x642 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	eb 57       	subi	r30, 0x7B	; 123
     638:	fc 4f       	sbci	r31, 0xFC	; 252
     63a:	4e 5f       	subi	r20, 0xFE	; 254
     63c:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	08 95       	ret

00000646 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     64e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     650:	00 91 83 03 	lds	r16, 0x0383
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	4f ef       	ldi	r20, 0xFF	; 255
     658:	5f ef       	ldi	r21, 0xFF	; 255
     65a:	6f ef       	ldi	r22, 0xFF	; 255
     65c:	7f ef       	ldi	r23, 0xFF	; 255
     65e:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     664:	21 2f       	mov	r18, r17
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     66e:	ef 9d       	mul	r30, r15
     670:	d0 01       	movw	r26, r0
     672:	11 24       	eor	r1, r1
     674:	ab 57       	subi	r26, 0x7B	; 123
     676:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 91       	ld	r24, X
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	69 f4       	brne	.+26     	; 0x6a0 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8d 91       	ld	r24, X+
     68a:	9d 91       	ld	r25, X+
     68c:	0d 90       	ld	r0, X+
     68e:	bc 91       	ld	r27, X
     690:	a0 2d       	mov	r26, r0
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <trtSignal+0x5a>
     69c:	fe 2f       	mov	r31, r30
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <trtSignal+0x5e>
     6a0:	db 01       	movw	r26, r22
     6a2:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	0e 17       	cp	r16, r30
     6ac:	00 f7       	brcc	.-64     	; 0x66e <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6ae:	ff 23       	and	r31, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6b2:	e1 2f       	mov	r30, r17
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ee 57       	subi	r30, 0x7E	; 126
     6b8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ba:	81 ad       	ldd	r24, Z+57	; 0x39
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	81 af       	std	Z+57, r24	; 0x39
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6c2:	2f 2f       	mov	r18, r31
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	ed 57       	subi	r30, 0x7D	; 125
     6da:	fc 4f       	sbci	r31, 0xFC	; 252
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6ee:	20 91 84 00 	lds	r18, 0x0084
     6f2:	30 91 85 00 	lds	r19, 0x0085
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	80 91 c5 03 	lds	r24, 0x03C5
     6fe:	90 91 c6 03 	lds	r25, 0x03C6
     702:	a0 91 c7 03 	lds	r26, 0x03C7
     706:	b0 91 c8 03 	lds	r27, 0x03C8
     70a:	dc 01       	movw	r26, r24
     70c:	99 27       	eor	r25, r25
     70e:	88 27       	eor	r24, r24
     710:	28 0f       	add	r18, r24
     712:	39 1f       	adc	r19, r25
     714:	4a 1f       	adc	r20, r26
     716:	5b 1f       	adc	r21, r27
}
     718:	b9 01       	movw	r22, r18
     71a:	ca 01       	movw	r24, r20
     71c:	08 95       	ret

0000071e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     71e:	e0 91 84 03 	lds	r30, 0x0384
     722:	ab e0       	ldi	r26, 0x0B	; 11
     724:	ea 9f       	mul	r30, r26
     726:	f0 01       	movw	r30, r0
     728:	11 24       	eor	r1, r1
     72a:	eb 57       	subi	r30, 0x7B	; 123
     72c:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     72e:	f8 94       	cli

  t->state = TIMEQ;
     730:	a2 e0       	ldi	r26, 0x02	; 2
     732:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     73c:	26 83       	std	Z+6, r18	; 0x06
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	40 87       	std	Z+8, r20	; 0x08
     742:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     744:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     748:	08 95       	ret

0000074a <trtGetRelease>:


uint32_t trtGetRelease(void) {
     74a:	80 91 84 03 	lds	r24, 0x0384
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2b e0       	ldi	r18, 0x0B	; 11
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	82 9f       	mul	r24, r18
     756:	f0 01       	movw	r30, r0
     758:	83 9f       	mul	r24, r19
     75a:	f0 0d       	add	r31, r0
     75c:	92 9f       	mul	r25, r18
     75e:	f0 0d       	add	r31, r0
     760:	11 24       	eor	r1, r1
     762:	ed 57       	subi	r30, 0x7D	; 125
     764:	fc 4f       	sbci	r31, 0xFC	; 252
     766:	df 01       	movw	r26, r30
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	64 81       	ldd	r22, Z+4	; 0x04
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     77e:	80 91 84 03 	lds	r24, 0x0384
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	82 9f       	mul	r24, r18
     78a:	f0 01       	movw	r30, r0
     78c:	83 9f       	mul	r24, r19
     78e:	f0 0d       	add	r31, r0
     790:	92 9f       	mul	r25, r18
     792:	f0 0d       	add	r31, r0
     794:	11 24       	eor	r1, r1
     796:	ed 57       	subi	r30, 0x7D	; 125
     798:	fc 4f       	sbci	r31, 0xFC	; 252
     79a:	df 01       	movw	r26, r30
     79c:	18 96       	adiw	r26, 0x08	; 8
     79e:	60 85       	ldd	r22, Z+8	; 0x08
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	7c 91       	ld	r23, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	12 97       	sbiw	r26, 0x02	; 2
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 91       	ld	r25, X
     7b0:	08 95       	ret

000007b2 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7b2:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7b4:	80 91 84 03 	lds	r24, 0x0384
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	ed 57       	subi	r30, 0x7D	; 125
     7ce:	fc 4f       	sbci	r31, 0xFC	; 252
     7d0:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7d2:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     7d6:	08 95       	ret

000007d8 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7d8:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e5 54       	subi	r30, 0x45	; 69
     7e0:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     7e2:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <trtAccept+0x16>
    (*s)--;
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7ee:	78 94       	sei
  return temp ;
}
     7f0:	08 95       	ret

000007f2 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7f2:	87 e6       	ldi	r24, 0x67	; 103
     7f4:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7f8:	e1 ec       	ldi	r30, 0xC1	; 193
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	88 e1       	ldi	r24, 0x18	; 24
     7fe:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     800:	10 92 b1 02 	sts	0x02B1, r1
     804:	10 92 b0 02 	sts	0x02B0, r1
  tx_out = 0;
     808:	10 92 b3 02 	sts	0x02B3, r1
     80c:	10 92 b2 02 	sts	0x02B2, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     810:	80 81       	ld	r24, Z
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 83       	st	Z, r24
}
     816:	08 95       	ret

00000818 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     82e:	20 91 b0 02 	lds	r18, 0x02B0
     832:	30 91 b1 02 	lds	r19, 0x02B1
     836:	80 91 b2 02 	lds	r24, 0x02B2
     83a:	90 91 b3 02 	lds	r25, 0x02B3
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	31 f4       	brne	.+12     	; 0x850 <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     844:	80 91 c1 00 	lds	r24, 0x00C1
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 93 c1 00 	sts	0x00C1, r24
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     850:	e0 91 b2 02 	lds	r30, 0x02B2
     854:	f0 91 b3 02 	lds	r31, 0x02B3
     858:	ec 54       	subi	r30, 0x4C	; 76
     85a:	fd 4f       	sbci	r31, 0xFD	; 253
     85c:	80 81       	ld	r24, Z
     85e:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     862:	80 91 b2 02 	lds	r24, 0x02B2
     866:	90 91 b3 02 	lds	r25, 0x02B3
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 b3 02 	sts	0x02B3, r25
     870:	80 93 b2 02 	sts	0x02B2, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     874:	80 91 b2 02 	lds	r24, 0x02B2
     878:	90 91 b3 02 	lds	r25, 0x02B3
     87c:	88 3c       	cpi	r24, 0xC8	; 200
     87e:	91 05       	cpc	r25, r1
     880:	21 f4       	brne	.+8      	; 0x88a <__vector_21+0x72>
     882:	10 92 b3 02 	sts	0x02B3, r1
     886:	10 92 b2 02 	sts	0x02B2, r1
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8a0:	1f 93       	push	r17
     8a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	19 f4       	brne	.+6      	; 0x8ae <uart_putchar+0xe>
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
  char i = tx_in;
     8ae:	80 91 b0 02 	lds	r24, 0x02B0
     8b2:	90 91 b1 02 	lds	r25, 0x02B1
  i++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b8:	88 3c       	cpi	r24, 0xC8	; 200
     8ba:	09 f4       	brne	.+2      	; 0x8be <uart_putchar+0x1e>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8be:	e0 91 b0 02 	lds	r30, 0x02B0
     8c2:	f0 91 b1 02 	lds	r31, 0x02B1
     8c6:	ec 54       	subi	r30, 0x4C	; 76
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	80 91 b2 02 	lds	r24, 0x02B2
     8d4:	90 91 b3 02 	lds	r25, 0x02B3
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	c9 f3       	breq	.-14     	; 0x8d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8de:	30 93 b1 02 	sts	0x02B1, r19
     8e2:	20 93 b0 02 	sts	0x02B0, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	1f 91       	pop	r17
     8f6:	08 95       	ret

000008f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91a:	80 91 c6 00 	lds	r24, 0x00C6
     91e:	80 93 cd 03 	sts	0x03CD, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     958:	80 91 5e 02 	lds	r24, 0x025E
     95c:	90 91 5f 02 	lds	r25, 0x025F
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <uart_getchar+0x1c>
     964:	a1 c0       	rjmp	.+322    	; 0xaa8 <uart_getchar+0x15e>
     966:	00 e6       	ldi	r16, 0x60	; 96
     968:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	if (UCSR0A & _BV(FE0))
     970:	80 91 c0 00 	lds	r24, 0x00C0
     974:	84 ff       	sbrs	r24, 4
     976:	03 c0       	rjmp	.+6      	; 0x97e <uart_getchar+0x34>
     978:	2e ef       	ldi	r18, 0xFE	; 254
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	a9 c0       	rjmp	.+338    	; 0xad0 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     97e:	80 91 c0 00 	lds	r24, 0x00C0
     982:	83 fd       	sbrc	r24, 3
     984:	a3 c0       	rjmp	.+326    	; 0xacc <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     986:	90 91 cd 03 	lds	r25, 0x03CD

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     98a:	9d 30       	cpi	r25, 0x0D	; 13
     98c:	11 f0       	breq	.+4      	; 0x992 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	81 f4       	brne	.+32     	; 0x9b2 <uart_getchar+0x68>
	  {
	    *cp = c;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	f8 01       	movw	r30, r16
     996:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	    rxp = b;
     99e:	80 e6       	ldi	r24, 0x60	; 96
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	90 93 5f 02 	sts	0x025F, r25
     9a6:	80 93 5e 02 	sts	0x025E, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b2:	99 30       	cpi	r25, 0x09	; 9
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <uart_getchar+0x6e>
     9b6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9b8:	89 2f       	mov	r24, r25
     9ba:	80 52       	subi	r24, 0x20	; 32
     9bc:	8f 35       	cpi	r24, 0x5F	; 95
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <uart_getchar+0x7a>
     9c0:	90 3a       	cpi	r25, 0xA0	; 160
     9c2:	70 f0       	brcs	.+28     	; 0x9e0 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9c4:	f2 e0       	ldi	r31, 0x02	; 2
     9c6:	0f 3a       	cpi	r16, 0xAF	; 175
     9c8:	1f 07       	cpc	r17, r31
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d0:	f8 01       	movw	r30, r16
     9d2:	91 93       	st	Z+, r25
     9d4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9d6:	89 2f       	mov	r24, r25
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     9de:	c5 cf       	rjmp	.-118    	; 0x96a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e0:	92 31       	cpi	r25, 0x12	; 18
     9e2:	39 f1       	breq	.+78     	; 0xa32 <uart_getchar+0xe8>
     9e4:	93 31       	cpi	r25, 0x13	; 19
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <uart_getchar+0xac>
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <uart_getchar+0xa4>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <uart_getchar+0x182>
     9ee:	98 30       	cpi	r25, 0x08	; 8
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <uart_getchar+0xaa>
     9f2:	bb cf       	rjmp	.-138    	; 0x96a <uart_getchar+0x20>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <uart_getchar+0xbe>
     9f6:	97 31       	cpi	r25, 0x17	; 23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <uart_getchar+0xb2>
     9fa:	4b c0       	rjmp	.+150    	; 0xa92 <uart_getchar+0x148>
     9fc:	9f 37       	cpi	r25, 0x7F	; 127
     9fe:	21 f0       	breq	.+8      	; 0xa08 <uart_getchar+0xbe>
     a00:	95 31       	cpi	r25, 0x15	; 21
     a02:	09 f0       	breq	.+2      	; 0xa06 <uart_getchar+0xbc>
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <uart_getchar+0x20>
     a06:	32 c0       	rjmp	.+100    	; 0xa6c <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	00 36       	cpi	r16, 0x60	; 96
     a0c:	1f 07       	cpc	r17, r31
     a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_getchar+0xc8>
     a10:	08 f4       	brcc	.+2      	; 0xa14 <uart_getchar+0xca>
     a12:	ab cf       	rjmp	.-170    	; 0x96a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	10 40       	sbci	r17, 0x00	; 0
     a30:	9c cf       	rjmp	.-200    	; 0x96a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a3a:	c0 e6       	ldi	r28, 0x60	; 96
     a3c:	d2 e0       	ldi	r29, 0x02	; 2
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a40:	89 91       	ld	r24, Y+
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a48:	c0 17       	cp	r28, r16
     a4a:	d1 07       	cpc	r29, r17
     a4c:	c8 f3       	brcs	.-14     	; 0xa40 <uart_getchar+0xf6>
     a4e:	8d cf       	rjmp	.-230    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	00 36       	cpi	r16, 0x60	; 96
     a70:	18 07       	cpc	r17, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <uart_getchar+0x12c>
     a74:	68 f7       	brcc	.-38     	; 0xa50 <uart_getchar+0x106>
     a76:	79 cf       	rjmp	.-270    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a90:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a92:	e2 e0       	ldi	r30, 0x02	; 2
     a94:	00 36       	cpi	r16, 0x60	; 96
     a96:	1e 07       	cpc	r17, r30
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x152>
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <uart_getchar+0x154>
     a9c:	66 cf       	rjmp	.-308    	; 0x96a <uart_getchar+0x20>
     a9e:	e8 01       	movw	r28, r16
     aa0:	8a 91       	ld	r24, -Y
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	49 f7       	brne	.-46     	; 0xa78 <uart_getchar+0x12e>
     aa6:	61 cf       	rjmp	.-318    	; 0x96a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aa8:	e0 91 5e 02 	lds	r30, 0x025E
     aac:	f0 91 5f 02 	lds	r31, 0x025F
     ab0:	81 91       	ld	r24, Z+
     ab2:	f0 93 5f 02 	sts	0x025F, r31
     ab6:	e0 93 5e 02 	sts	0x025E, r30
  if (c == '\n')
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <uart_getchar+0x17c>
    rxp = 0;
     abe:	10 92 5f 02 	sts	0x025F, r1
     ac2:	10 92 5e 02 	sts	0x025E, r1

  return c;
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <uart_getchar+0x186>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad0:	c9 01       	movw	r24, r18
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <__vector_1>:
//function signatures
void setParam(uint8_t, float); //Helper method for setting PID parameters
void InitLCD(void);

// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf  ;
     af4:	e2 eb       	ldi	r30, 0xB2	; 178
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	20 81       	ld	r18, Z
     afa:	80 91 81 03 	lds	r24, 0x0381
     afe:	90 91 82 03 	lds	r25, 0x0382
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	90 93 cf 03 	sts	0x03CF, r25
     b0a:	80 93 ce 03 	sts	0x03CE, r24
        TCNT2 = 0 ;
     b0e:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     b10:	10 92 82 03 	sts	0x0382, r1
     b14:	10 92 81 03 	sts	0x0381, r1
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     b3a:	80 91 81 03 	lds	r24, 0x0381
     b3e:	90 91 82 03 	lds	r25, 0x0382
     b42:	80 50       	subi	r24, 0x00	; 0
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	90 93 82 03 	sts	0x0382, r25
     b4a:	80 93 81 03 	sts	0x0381, r24
}
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <buttonComm>:

//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void buttonComm(void* args) 
  {	
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     b64:	20 91 c5 03 	lds	r18, 0x03C5
     b68:	30 91 c6 03 	lds	r19, 0x03C6
     b6c:	40 91 c7 03 	lds	r20, 0x03C7
     b70:	50 91 c8 03 	lds	r21, 0x03C8
     b74:	a9 01       	movw	r20, r18
     b76:	33 27       	eor	r19, r19
     b78:	22 27       	eor	r18, r18
     b7a:	60 91 84 00 	lds	r22, 0x0084
     b7e:	70 91 85 00 	lds	r23, 0x0085
	
	while(1)
	{
		rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.01);
	    trtSleepUntil(rel, dead);
     b82:	e0 90 84 00 	lds	r14, 0x0084
     b86:	f0 90 85 00 	lds	r15, 0x0085
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	62 0f       	add	r22, r18
     b90:	73 1f       	adc	r23, r19
     b92:	84 1f       	adc	r24, r20
     b94:	95 1f       	adc	r25, r21
     b96:	64 56       	subi	r22, 0x64	; 100
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	8f 4f       	sbci	r24, 0xFF	; 255
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	00 e0       	ldi	r16, 0x00	; 0
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	2e 0d       	add	r18, r14
     ba4:	3f 1d       	adc	r19, r15
     ba6:	40 1f       	adc	r20, r16
     ba8:	51 1f       	adc	r21, r17
     baa:	24 56       	subi	r18, 0x64	; 100
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	4f 4f       	sbci	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
     bb6:	d6 cf       	rjmp	.-84     	; 0xb64 <buttonComm+0x8>

00000bb8 <main>:
  LCDclr();        //clear the display
  LCDGotoXY(0,0);
}

// --- Main Program ----------------------------------
int main(void) {
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17


  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     bc4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     bc8:	6f e3       	ldi	r22, 0x3F	; 63
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	70 93 d5 03 	sts	0x03D5, r23
     bd0:	60 93 d4 03 	sts	0x03D4, r22
     bd4:	70 93 d1 03 	sts	0x03D1, r23
     bd8:	60 93 d0 03 	sts	0x03D0, r22
     bdc:	70 93 d3 03 	sts	0x03D3, r23
     be0:	60 93 d2 03 	sts	0x03D2, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
  
  //initialize Timer2 and the external interrupt
  //set up INT0
	EIMSK = 1<<INT0 ; // turn on int0
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	9d bb       	out	0x1d, r25	; 29
	EICRA = 3 ;       // rising edge
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	80 93 69 00 	sts	0x0069, r24
	// turn on timer 2 to be read in int0 ISR
	TCCR2B = 7 ; // divide by 1024
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	80 93 b1 00 	sts	0x00B1, r24
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1 ;
     bfc:	90 93 70 00 	sts	0x0070, r25

  // start TRT
  trtInitKernel(128); // 80 bytes for the idle task stack
     c00:	80 e8       	ldi	r24, 0x80	; 128
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 5f 02 	call	0x4be	; 0x4be <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c08:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c0a:	10 92 bc 03 	sts	0x03BC, r1
  
  sei(); // set enabled interrupts;
     c0e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c10:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c12:	10 92 bd 03 	sts	0x03BD, r1
  
  sei(); // set enabled interrupts;
     c16:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c18:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 be 03 	sts	0x03BE, r24
  
  sei(); // set enabled interrupts;
     c20:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c22:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c24:	80 93 c2 03 	sts	0x03C2, r24
  
  sei(); // set enabled interrupts;
     c28:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c2a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c2c:	80 93 bf 03 	sts	0x03BF, r24
  
  sei(); // set enabled interrupts;
     c30:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c32:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c34:	80 93 c0 03 	sts	0x03C0, r24
  
  sei(); // set enabled interrupts;
     c38:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c3a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c3c:	80 93 c1 03 	sts	0x03C1, r24
  
  sei(); // set enabled interrupts;
     c40:	78 94       	sei
  trtCreateSemaphore(SEM_OMEGA, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_P, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_I, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_D, 1) ; // protect shared variables
 // --- creat tasks  ----------------
  trtCreateTask(buttonComm, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     c42:	8e ea       	ldi	r24, 0xAE	; 174
     c44:	95 e0       	ldi	r25, 0x05	; 5
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	2d e0       	ldi	r18, 0x0D	; 13
     c4c:	33 e0       	ldi	r19, 0x03	; 3
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	bd e0       	ldi	r27, 0x0D	; 13
     c54:	eb 2e       	mov	r14, r27
     c56:	b3 e0       	ldi	r27, 0x03	; 3
     c58:	fb 2e       	mov	r15, r27
     c5a:	01 2d       	mov	r16, r1
     c5c:	11 2d       	mov	r17, r1
     c5e:	ac e7       	ldi	r26, 0x7C	; 124
     c60:	ca 2e       	mov	r12, r26
     c62:	a3 e0       	ldi	r26, 0x03	; 3
     c64:	da 2e       	mov	r13, r26
     c66:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(serialComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     c6a:	87 e6       	ldi	r24, 0x67	; 103
     c6c:	99 e0       	ldi	r25, 0x09	; 9
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	2a e1       	ldi	r18, 0x1A	; 26
     c74:	36 e0       	ldi	r19, 0x06	; 6
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	fa e1       	ldi	r31, 0x1A	; 26
     c7c:	ef 2e       	mov	r14, r31
     c7e:	f6 e0       	ldi	r31, 0x06	; 6
     c80:	ff 2e       	mov	r15, r31
     c82:	01 2d       	mov	r16, r1
     c84:	11 2d       	mov	r17, r1
     c86:	ee e7       	ldi	r30, 0x7E	; 126
     c88:	ce 2e       	mov	r12, r30
     c8a:	e3 e0       	ldi	r30, 0x03	; 3
     c8c:	de 2e       	mov	r13, r30
     c8e:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(displayParams, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     c92:	86 e6       	ldi	r24, 0x66	; 102
     c94:	96 e0       	ldi	r25, 0x06	; 6
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	2a e1       	ldi	r18, 0x1A	; 26
     c9c:	36 e0       	ldi	r19, 0x06	; 6
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	81 7f       	andi	r24, 0xF1	; 241
     caa:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
     cb2:	88 95       	sleep
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <main+0xfa>

00000cb6 <InitLCD>:
	}
}

// --- Initialize the LCD ----------------------------
void InitLCD(void){
  LCDinit();  //initialize the display
     cb6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCDinit>
  LCDcursorOFF();
     cba:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <LCDcursorOFF>
  LCDclr();        //clear the display
     cbe:	0e 94 14 0b 	call	0x1628	; 0x1628 <LCDclr>
  LCDGotoXY(0,0);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
}
     cca:	08 95       	ret

00000ccc <displayParams>:
	}
  }

// --- spoiler ---------------------------------------
void displayParams(void* args) 
{
     ccc:	2f 92       	push	r2
     cce:	3f 92       	push	r3
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	e3 97       	sbiw	r28, 0x33	; 51
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
	//String constants
	const uint8_t LCDSpeed[9] = "SPEED: \0";
     d00:	de 01       	movw	r26, r28
     d02:	57 96       	adiw	r26, 0x17	; 23
     d04:	ea e1       	ldi	r30, 0x1A	; 26
     d06:	f1 e0       	ldi	r31, 0x01	; 1
     d08:	89 e0       	ldi	r24, 0x09	; 9
     d0a:	01 90       	ld	r0, Z+
     d0c:	0d 92       	st	X+, r0
     d0e:	81 50       	subi	r24, 0x01	; 1
     d10:	e1 f7       	brne	.-8      	; 0xd0a <displayParams+0x3e>
	const uint8_t LCDRPM[5] = "RPM\0";
     d12:	de 01       	movw	r26, r28
     d14:	52 96       	adiw	r26, 0x12	; 18
     d16:	e3 e2       	ldi	r30, 0x23	; 35
     d18:	f1 e0       	ldi	r31, 0x01	; 1
     d1a:	85 e0       	ldi	r24, 0x05	; 5
     d1c:	01 90       	ld	r0, Z+
     d1e:	0d 92       	st	X+, r0
     d20:	81 50       	subi	r24, 0x01	; 1
     d22:	e1 f7       	brne	.-8      	; 0xd1c <displayParams+0x50>
	uint8_t updateOmegaRef;
	uint8_t updatek_p;
	uint8_t updatek_i;
	uint8_t updatek_d;

	trtWait(SEM_OMEGA_REF);
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	int localOmegaRef = omegaRef;
     d2a:	20 90 59 02 	lds	r2, 0x0259
     d2e:	30 90 5a 02 	lds	r3, 0x025A
	trtSignal(SEM_OMEGA_REF);
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_P);
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_p = k_p;
     d3e:	80 91 4d 02 	lds	r24, 0x024D
     d42:	88 a7       	std	Y+40, r24	; 0x28
     d44:	90 91 4e 02 	lds	r25, 0x024E
     d48:	99 a7       	std	Y+41, r25	; 0x29
     d4a:	a0 91 4f 02 	lds	r26, 0x024F
     d4e:	aa a7       	std	Y+42, r26	; 0x2a
     d50:	b0 91 50 02 	lds	r27, 0x0250
     d54:	bb a7       	std	Y+43, r27	; 0x2b
	trtSignal(SEM_K_P);
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_I);
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_i = k_i;
     d62:	80 91 51 02 	lds	r24, 0x0251
     d66:	8c a3       	std	Y+36, r24	; 0x24
     d68:	90 91 52 02 	lds	r25, 0x0252
     d6c:	9d a3       	std	Y+37, r25	; 0x25
     d6e:	a0 91 53 02 	lds	r26, 0x0253
     d72:	ae a3       	std	Y+38, r26	; 0x26
     d74:	b0 91 54 02 	lds	r27, 0x0254
     d78:	bf a3       	std	Y+39, r27	; 0x27
	trtSignal(SEM_K_I);
     d7a:	85 e0       	ldi	r24, 0x05	; 5
     d7c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_D);
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_d = k_d;
     d86:	80 91 55 02 	lds	r24, 0x0255
     d8a:	88 a3       	std	Y+32, r24	; 0x20
     d8c:	90 91 56 02 	lds	r25, 0x0256
     d90:	99 a3       	std	Y+33, r25	; 0x21
     d92:	a0 91 57 02 	lds	r26, 0x0257
     d96:	aa a3       	std	Y+34, r26	; 0x22
     d98:	b0 91 58 02 	lds	r27, 0x0258
     d9c:	bb a3       	std	Y+35, r27	; 0x23
	trtSignal(SEM_K_D);
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


	//initialize the LCD
	InitLCD();
     da4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <InitLCD>
	LCDGotoXY(0, 0);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
  	LCDstring(LCDSpeed, SPEED_LEN);
     db0:	ce 01       	movw	r24, r28
     db2:	47 96       	adiw	r24, 0x17	; 23
     db4:	67 e0       	ldi	r22, 0x07	; 7
     db6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
  	
	sprintf(LCDOmega, "%i", omega);
     dba:	00 d0       	rcall	.+0      	; 0xdbc <displayParams+0xf0>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <displayParams+0xf2>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <displayParams+0xf4>
     dc0:	ed b7       	in	r30, 0x3d	; 61
     dc2:	fe b7       	in	r31, 0x3e	; 62
     dc4:	31 96       	adiw	r30, 0x01	; 1
     dc6:	3e e0       	ldi	r19, 0x0E	; 14
     dc8:	43 2e       	mov	r4, r19
     dca:	51 2c       	mov	r5, r1
     dcc:	4c 0e       	add	r4, r28
     dce:	5d 1e       	adc	r5, r29
     dd0:	ad b7       	in	r26, 0x3d	; 61
     dd2:	be b7       	in	r27, 0x3e	; 62
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	5c 92       	st	X, r5
     dd8:	4e 92       	st	-X, r4
     dda:	11 97       	sbiw	r26, 0x01	; 1
     ddc:	24 e1       	ldi	r18, 0x14	; 20
     dde:	62 2e       	mov	r6, r18
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	72 2e       	mov	r7, r18
     de4:	73 82       	std	Z+3, r7	; 0x03
     de6:	62 82       	std	Z+2, r6	; 0x02
     de8:	80 91 5b 02 	lds	r24, 0x025B
     dec:	90 91 5c 02 	lds	r25, 0x025C
     df0:	95 83       	std	Z+5, r25	; 0x05
     df2:	84 83       	std	Z+4, r24	; 0x04
     df4:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
	LCDGotoXY(OMEGA_LOC, 0);
     df8:	8d b7       	in	r24, 0x3d	; 61
     dfa:	9e b7       	in	r25, 0x3e	; 62
     dfc:	06 96       	adiw	r24, 0x06	; 6
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	9e bf       	out	0x3e, r25	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	8d bf       	out	0x3d, r24	; 61
     e08:	87 e0       	ldi	r24, 0x07	; 7
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
	LCDstring(LCDOmega, OMEGA_LEN);
     e10:	c2 01       	movw	r24, r4
     e12:	64 e0       	ldi	r22, 0x04	; 4
     e14:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>

	LCDGotoXY(RPM_LOC, 0);
     e18:	8d e0       	ldi	r24, 0x0D	; 13
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
	LCDstring(LCDRPM, RPM_LEN);
     e20:	ce 01       	movw	r24, r28
     e22:	42 96       	adiw	r24, 0x12	; 18
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>

	sprintf(LCDOmegaRef, "%i", localOmegaRef);
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <displayParams+0x160>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <displayParams+0x162>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <displayParams+0x164>
     e30:	ed b7       	in	r30, 0x3d	; 61
     e32:	fe b7       	in	r31, 0x3e	; 62
     e34:	31 96       	adiw	r30, 0x01	; 1
     e36:	9a e0       	ldi	r25, 0x0A	; 10
     e38:	89 2e       	mov	r8, r25
     e3a:	91 2c       	mov	r9, r1
     e3c:	8c 0e       	add	r8, r28
     e3e:	9d 1e       	adc	r9, r29
     e40:	ad b7       	in	r26, 0x3d	; 61
     e42:	be b7       	in	r27, 0x3e	; 62
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	9c 92       	st	X, r9
     e48:	8e 92       	st	-X, r8
     e4a:	11 97       	sbiw	r26, 0x01	; 1
     e4c:	73 82       	std	Z+3, r7	; 0x03
     e4e:	62 82       	std	Z+2, r6	; 0x02
     e50:	35 82       	std	Z+5, r3	; 0x05
     e52:	24 82       	std	Z+4, r2	; 0x04
     e54:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    LCDGotoXY(OMEGA_REF_LOC, 1);
     e58:	8d b7       	in	r24, 0x3d	; 61
     e5a:	9e b7       	in	r25, 0x3e	; 62
     e5c:	06 96       	adiw	r24, 0x06	; 6
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	9e bf       	out	0x3e, r25	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	8d bf       	out	0x3d, r24	; 61
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
    LCDstring(LCDOmegaRef, OMEGA_REF_LEN);
     e70:	c4 01       	movw	r24, r8
     e72:	64 e0       	ldi	r22, 0x04	; 4
     e74:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
	
	sprintf(LCDk_p, "%f", localk_p);
     e78:	ad b7       	in	r26, 0x3d	; 61
     e7a:	be b7       	in	r27, 0x3e	; 62
     e7c:	18 97       	sbiw	r26, 0x08	; 8
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	be bf       	out	0x3e, r27	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	ad bf       	out	0x3d, r26	; 61
     e88:	ed b7       	in	r30, 0x3d	; 61
     e8a:	fe b7       	in	r31, 0x3e	; 62
     e8c:	31 96       	adiw	r30, 0x01	; 1
     e8e:	5e 01       	movw	r10, r28
     e90:	08 94       	sec
     e92:	a1 1c       	adc	r10, r1
     e94:	b1 1c       	adc	r11, r1
     e96:	12 96       	adiw	r26, 0x02	; 2
     e98:	bc 92       	st	X, r11
     e9a:	ae 92       	st	-X, r10
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	87 e1       	ldi	r24, 0x17	; 23
     ea0:	e8 2e       	mov	r14, r24
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	f8 2e       	mov	r15, r24
     ea6:	f3 82       	std	Z+3, r15	; 0x03
     ea8:	e2 82       	std	Z+2, r14	; 0x02
     eaa:	88 a5       	ldd	r24, Y+40	; 0x28
     eac:	99 a5       	ldd	r25, Y+41	; 0x29
     eae:	aa a5       	ldd	r26, Y+42	; 0x2a
     eb0:	bb a5       	ldd	r27, Y+43	; 0x2b
     eb2:	84 83       	std	Z+4, r24	; 0x04
     eb4:	95 83       	std	Z+5, r25	; 0x05
     eb6:	a6 83       	std	Z+6, r26	; 0x06
     eb8:	b7 83       	std	Z+7, r27	; 0x07
     eba:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    LCDGotoXY(K_P_LOC, 1);
     ebe:	8d b7       	in	r24, 0x3d	; 61
     ec0:	9e b7       	in	r25, 0x3e	; 62
     ec2:	08 96       	adiw	r24, 0x08	; 8
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	9e bf       	out	0x3e, r25	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	8d bf       	out	0x3d, r24	; 61
     ece:	85 e0       	ldi	r24, 0x05	; 5
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
    LCDstring(LCDk_p, K_P_LEN);
     ed6:	c5 01       	movw	r24, r10
     ed8:	63 e0       	ldi	r22, 0x03	; 3
     eda:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>

	sprintf(LCDk_i, "%f", localk_i);
     ede:	ad b7       	in	r26, 0x3d	; 61
     ee0:	be b7       	in	r27, 0x3e	; 62
     ee2:	18 97       	sbiw	r26, 0x08	; 8
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	be bf       	out	0x3e, r27	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	ad bf       	out	0x3d, r26	; 61
     eee:	ed b7       	in	r30, 0x3d	; 61
     ef0:	fe b7       	in	r31, 0x3e	; 62
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	04 e0       	ldi	r16, 0x04	; 4
     ef6:	c0 2e       	mov	r12, r16
     ef8:	d1 2c       	mov	r13, r1
     efa:	cc 0e       	add	r12, r28
     efc:	dd 1e       	adc	r13, r29
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	dc 92       	st	X, r13
     f02:	ce 92       	st	-X, r12
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	f3 82       	std	Z+3, r15	; 0x03
     f08:	e2 82       	std	Z+2, r14	; 0x02
     f0a:	8c a1       	ldd	r24, Y+36	; 0x24
     f0c:	9d a1       	ldd	r25, Y+37	; 0x25
     f0e:	ae a1       	ldd	r26, Y+38	; 0x26
     f10:	bf a1       	ldd	r27, Y+39	; 0x27
     f12:	84 83       	std	Z+4, r24	; 0x04
     f14:	95 83       	std	Z+5, r25	; 0x05
     f16:	a6 83       	std	Z+6, r26	; 0x06
     f18:	b7 83       	std	Z+7, r27	; 0x07
     f1a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    LCDGotoXY(K_I_LOC, 1);
     f1e:	8d b7       	in	r24, 0x3d	; 61
     f20:	9e b7       	in	r25, 0x3e	; 62
     f22:	08 96       	adiw	r24, 0x08	; 8
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	9e bf       	out	0x3e, r25	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	8d bf       	out	0x3d, r24	; 61
     f2e:	89 e0       	ldi	r24, 0x09	; 9
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
    LCDstring(LCDk_i, K_I_LEN);
     f36:	c6 01       	movw	r24, r12
     f38:	63 e0       	ldi	r22, 0x03	; 3
     f3a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>

	sprintf(LCDk_d, "%f", localk_d);
     f3e:	ad b7       	in	r26, 0x3d	; 61
     f40:	be b7       	in	r27, 0x3e	; 62
     f42:	18 97       	sbiw	r26, 0x08	; 8
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	be bf       	out	0x3e, r27	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	ad bf       	out	0x3d, r26	; 61
     f4e:	ed b7       	in	r30, 0x3d	; 61
     f50:	fe b7       	in	r31, 0x3e	; 62
     f52:	31 96       	adiw	r30, 0x01	; 1
     f54:	8e 01       	movw	r16, r28
     f56:	09 5f       	subi	r16, 0xF9	; 249
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	12 96       	adiw	r26, 0x02	; 2
     f5c:	1c 93       	st	X, r17
     f5e:	0e 93       	st	-X, r16
     f60:	11 97       	sbiw	r26, 0x01	; 1
     f62:	f3 82       	std	Z+3, r15	; 0x03
     f64:	e2 82       	std	Z+2, r14	; 0x02
     f66:	88 a1       	ldd	r24, Y+32	; 0x20
     f68:	99 a1       	ldd	r25, Y+33	; 0x21
     f6a:	aa a1       	ldd	r26, Y+34	; 0x22
     f6c:	bb a1       	ldd	r27, Y+35	; 0x23
     f6e:	84 83       	std	Z+4, r24	; 0x04
     f70:	95 83       	std	Z+5, r25	; 0x05
     f72:	a6 83       	std	Z+6, r26	; 0x06
     f74:	b7 83       	std	Z+7, r27	; 0x07
     f76:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    LCDGotoXY(K_D_LOC, 1);
     f7a:	8d b7       	in	r24, 0x3d	; 61
     f7c:	9e b7       	in	r25, 0x3e	; 62
     f7e:	08 96       	adiw	r24, 0x08	; 8
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	9e bf       	out	0x3e, r25	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	8d bf       	out	0x3d, r24	; 61
     f8a:	8d e0       	ldi	r24, 0x0D	; 13
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
    LCDstring(LCDk_d, K_D_LEN);
     f92:	c8 01       	movw	r24, r16
     f94:	63 e0       	ldi	r22, 0x03	; 3
     f96:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		trtSignal(SEM_K_D);


		//Update the LCD
		if (updateOmegaRef){
			sprintf(LCDOmegaRef, "%i", localOmegaRef);
     f9a:	8c a6       	std	Y+44, r8	; 0x2c
     f9c:	9d a6       	std	Y+45, r9	; 0x2d
     f9e:	6e a6       	std	Y+46, r6	; 0x2e
     fa0:	7f a6       	std	Y+47, r7	; 0x2f
            LCDGotoXY(OMEGA_REF_LOC, 1);
            LCDstring(LCDOmegaRef, OMEGA_REF_LEN);
		}

		if (updatek_p){
			sprintf(LCDk_p, "%f", localk_p);
     fa2:	a8 aa       	std	Y+48, r10	; 0x30
     fa4:	b9 aa       	std	Y+49, r11	; 0x31
     fa6:	57 01       	movw	r10, r14
            LCDGotoXY(K_P_LOC, 1);
            LCDstring(LCDk_p, K_P_LEN);
		}

		if (updatek_i){
			sprintf(LCDk_i, "%f", localk_i);
     fa8:	ca aa       	std	Y+50, r12	; 0x32
     faa:	db aa       	std	Y+51, r13	; 0x33
            LCDGotoXY(K_I_LOC, 1);
            LCDstring(LCDk_i, K_I_LEN);
		}

		if (updatek_d){
			sprintf(LCDk_d, "%f", localk_d);
     fac:	38 01       	movw	r6, r16
            LCDGotoXY(K_D_LOC, 1);
            LCDstring(LCDk_d, K_D_LEN);
		}

		trtWait(SEM_OMEGA);
		sprintf(LCDOmega, "%i", omega);
     fae:	85 2c       	mov	r8, r5
	uint32_t rel, dead ;
	//Update the LCD about 5 times a second
	while(1)
	{
		//Check if the reference speed has changed
		trtWait(SEM_OMEGA_REF);
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localOmegaRef != omegaRef){
     fb6:	80 91 59 02 	lds	r24, 0x0259
     fba:	90 91 5a 02 	lds	r25, 0x025A
     fbe:	28 16       	cp	r2, r24
     fc0:	39 06       	cpc	r3, r25
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <displayParams+0x2fc>
     fc4:	99 24       	eor	r9, r9
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <displayParams+0x302>
			localOmegaRef = omegaRef;
     fc8:	1c 01       	movw	r2, r24
     fca:	99 24       	eor	r9, r9
     fcc:	93 94       	inc	r9
			updateOmegaRef = 1;
		}
		else{
			updateOmegaRef = 0;
		}
		trtSignal(SEM_OMEGA_REF);
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the proportional gain has changed
		trtWait(SEM_K_P);
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_p != k_p) {
     fda:	10 91 4d 02 	lds	r17, 0x024D
     fde:	00 91 4e 02 	lds	r16, 0x024E
     fe2:	f0 90 4f 02 	lds	r15, 0x024F
     fe6:	e0 90 50 02 	lds	r14, 0x0250
     fea:	68 a5       	ldd	r22, Y+40	; 0x28
     fec:	79 a5       	ldd	r23, Y+41	; 0x29
     fee:	8a a5       	ldd	r24, Y+42	; 0x2a
     ff0:	9b a5       	ldd	r25, Y+43	; 0x2b
     ff2:	21 2f       	mov	r18, r17
     ff4:	30 2f       	mov	r19, r16
     ff6:	4f 2d       	mov	r20, r15
     ff8:	5e 2d       	mov	r21, r14
     ffa:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__nesf2>
     ffe:	88 23       	and	r24, r24
    1000:	39 f0       	breq	.+14     	; 0x1010 <displayParams+0x344>
    1002:	18 a7       	std	Y+40, r17	; 0x28
    1004:	09 a7       	std	Y+41, r16	; 0x29
    1006:	fa a6       	std	Y+42, r15	; 0x2a
    1008:	eb a6       	std	Y+43, r14	; 0x2b
    100a:	cc 24       	eor	r12, r12
    100c:	c3 94       	inc	r12
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <displayParams+0x346>
    1010:	cc 24       	eor	r12, r12
			updatek_p = 1;
		}
		else{
			updatek_p = 0;
		}
		trtSignal(SEM_K_P);
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the integral gain has changed
		trtWait(SEM_K_I);
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_i != k_i) {
    101e:	10 91 51 02 	lds	r17, 0x0251
    1022:	00 91 52 02 	lds	r16, 0x0252
    1026:	f0 90 53 02 	lds	r15, 0x0253
    102a:	e0 90 54 02 	lds	r14, 0x0254
    102e:	6c a1       	ldd	r22, Y+36	; 0x24
    1030:	7d a1       	ldd	r23, Y+37	; 0x25
    1032:	8e a1       	ldd	r24, Y+38	; 0x26
    1034:	9f a1       	ldd	r25, Y+39	; 0x27
    1036:	21 2f       	mov	r18, r17
    1038:	30 2f       	mov	r19, r16
    103a:	4f 2d       	mov	r20, r15
    103c:	5e 2d       	mov	r21, r14
    103e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__nesf2>
    1042:	88 23       	and	r24, r24
    1044:	39 f0       	breq	.+14     	; 0x1054 <displayParams+0x388>
    1046:	1c a3       	std	Y+36, r17	; 0x24
    1048:	0d a3       	std	Y+37, r16	; 0x25
    104a:	fe a2       	std	Y+38, r15	; 0x26
    104c:	ef a2       	std	Y+39, r14	; 0x27
    104e:	dd 24       	eor	r13, r13
    1050:	d3 94       	inc	r13
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <displayParams+0x38a>
    1054:	dd 24       	eor	r13, r13
			updatek_i = 1;
		}
		else{
			updatek_i = 0;
		}
		trtSignal(SEM_K_I);
    1056:	85 e0       	ldi	r24, 0x05	; 5
    1058:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the derivative gain has changed
		trtWait(SEM_K_D);
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_d != k_d) {
    1062:	00 91 55 02 	lds	r16, 0x0255
    1066:	e0 90 56 02 	lds	r14, 0x0256
    106a:	10 91 57 02 	lds	r17, 0x0257
    106e:	f0 90 58 02 	lds	r15, 0x0258
    1072:	68 a1       	ldd	r22, Y+32	; 0x20
    1074:	79 a1       	ldd	r23, Y+33	; 0x21
    1076:	8a a1       	ldd	r24, Y+34	; 0x22
    1078:	9b a1       	ldd	r25, Y+35	; 0x23
    107a:	20 2f       	mov	r18, r16
    107c:	3e 2d       	mov	r19, r14
    107e:	41 2f       	mov	r20, r17
    1080:	5f 2d       	mov	r21, r15
    1082:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__nesf2>
    1086:	88 23       	and	r24, r24
    1088:	31 f0       	breq	.+12     	; 0x1096 <displayParams+0x3ca>
    108a:	08 a3       	std	Y+32, r16	; 0x20
    108c:	e9 a2       	std	Y+33, r14	; 0x21
    108e:	1a a3       	std	Y+34, r17	; 0x22
    1090:	fb a2       	std	Y+35, r15	; 0x23
    1092:	11 e0       	ldi	r17, 0x01	; 1
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <displayParams+0x3cc>
    1096:	10 e0       	ldi	r17, 0x00	; 0
			updatek_d = 1;	
		}
		else{
			updatek_d = 0;
		}
		trtSignal(SEM_K_D);
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


		//Update the LCD
		if (updateOmegaRef){
    109e:	99 20       	and	r9, r9
    10a0:	41 f1       	breq	.+80     	; 0x10f2 <displayParams+0x426>
			sprintf(LCDOmegaRef, "%i", localOmegaRef);
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <displayParams+0x3d8>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <displayParams+0x3da>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <displayParams+0x3dc>
    10a8:	ed b7       	in	r30, 0x3d	; 61
    10aa:	fe b7       	in	r31, 0x3e	; 62
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    10b0:	ad b7       	in	r26, 0x3d	; 61
    10b2:	be b7       	in	r27, 0x3e	; 62
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	8c 93       	st	X, r24
    10b8:	11 97       	sbiw	r26, 0x01	; 1
    10ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    10bc:	12 96       	adiw	r26, 0x02	; 2
    10be:	9c 93       	st	X, r25
    10c0:	ae a5       	ldd	r26, Y+46	; 0x2e
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	bf a5       	ldd	r27, Y+47	; 0x2f
    10c6:	b3 83       	std	Z+3, r27	; 0x03
    10c8:	35 82       	std	Z+5, r3	; 0x05
    10ca:	24 82       	std	Z+4, r2	; 0x04
    10cc:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
            LCDGotoXY(OMEGA_REF_LOC, 1);
    10d0:	8d b7       	in	r24, 0x3d	; 61
    10d2:	9e b7       	in	r25, 0x3e	; 62
    10d4:	06 96       	adiw	r24, 0x06	; 6
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	9e bf       	out	0x3e, r25	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	8d bf       	out	0x3d, r24	; 61
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
            LCDstring(LCDOmegaRef, OMEGA_REF_LEN);
    10e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    10ea:	9d a5       	ldd	r25, Y+45	; 0x2d
    10ec:	64 e0       	ldi	r22, 0x04	; 4
    10ee:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		}

		if (updatek_p){
    10f2:	cc 20       	and	r12, r12
    10f4:	79 f1       	breq	.+94     	; 0x1154 <__stack+0x55>
			sprintf(LCDk_p, "%f", localk_p);
    10f6:	ad b7       	in	r26, 0x3d	; 61
    10f8:	be b7       	in	r27, 0x3e	; 62
    10fa:	18 97       	sbiw	r26, 0x08	; 8
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	be bf       	out	0x3e, r27	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	ad bf       	out	0x3d, r26	; 61
    1106:	ed b7       	in	r30, 0x3d	; 61
    1108:	fe b7       	in	r31, 0x3e	; 62
    110a:	31 96       	adiw	r30, 0x01	; 1
    110c:	88 a9       	ldd	r24, Y+48	; 0x30
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	8c 93       	st	X, r24
    1112:	11 97       	sbiw	r26, 0x01	; 1
    1114:	99 a9       	ldd	r25, Y+49	; 0x31
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	9c 93       	st	X, r25
    111a:	a2 82       	std	Z+2, r10	; 0x02
    111c:	b3 82       	std	Z+3, r11	; 0x03
    111e:	88 a5       	ldd	r24, Y+40	; 0x28
    1120:	99 a5       	ldd	r25, Y+41	; 0x29
    1122:	aa a5       	ldd	r26, Y+42	; 0x2a
    1124:	bb a5       	ldd	r27, Y+43	; 0x2b
    1126:	84 83       	std	Z+4, r24	; 0x04
    1128:	95 83       	std	Z+5, r25	; 0x05
    112a:	a6 83       	std	Z+6, r26	; 0x06
    112c:	b7 83       	std	Z+7, r27	; 0x07
    112e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
            LCDGotoXY(K_P_LOC, 1);
    1132:	ad b7       	in	r26, 0x3d	; 61
    1134:	be b7       	in	r27, 0x3e	; 62
    1136:	18 96       	adiw	r26, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	be bf       	out	0x3e, r27	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	ad bf       	out	0x3d, r26	; 61
    1142:	85 e0       	ldi	r24, 0x05	; 5
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
            LCDstring(LCDk_p, K_P_LEN);
    114a:	88 a9       	ldd	r24, Y+48	; 0x30
    114c:	99 a9       	ldd	r25, Y+49	; 0x31
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		}

		if (updatek_i){
    1154:	dd 20       	and	r13, r13
    1156:	89 f1       	breq	.+98     	; 0x11ba <__stack+0xbb>
			sprintf(LCDk_i, "%f", localk_i);
    1158:	8d b7       	in	r24, 0x3d	; 61
    115a:	9e b7       	in	r25, 0x3e	; 62
    115c:	08 97       	sbiw	r24, 0x08	; 8
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	9e bf       	out	0x3e, r25	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	8d bf       	out	0x3d, r24	; 61
    1168:	ed b7       	in	r30, 0x3d	; 61
    116a:	fe b7       	in	r31, 0x3e	; 62
    116c:	31 96       	adiw	r30, 0x01	; 1
    116e:	8a a9       	ldd	r24, Y+50	; 0x32
    1170:	ad b7       	in	r26, 0x3d	; 61
    1172:	be b7       	in	r27, 0x3e	; 62
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	8c 93       	st	X, r24
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	9b a9       	ldd	r25, Y+51	; 0x33
    117c:	12 96       	adiw	r26, 0x02	; 2
    117e:	9c 93       	st	X, r25
    1180:	a2 82       	std	Z+2, r10	; 0x02
    1182:	b3 82       	std	Z+3, r11	; 0x03
    1184:	8c a1       	ldd	r24, Y+36	; 0x24
    1186:	9d a1       	ldd	r25, Y+37	; 0x25
    1188:	ae a1       	ldd	r26, Y+38	; 0x26
    118a:	bf a1       	ldd	r27, Y+39	; 0x27
    118c:	84 83       	std	Z+4, r24	; 0x04
    118e:	95 83       	std	Z+5, r25	; 0x05
    1190:	a6 83       	std	Z+6, r26	; 0x06
    1192:	b7 83       	std	Z+7, r27	; 0x07
    1194:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
            LCDGotoXY(K_I_LOC, 1);
    1198:	ad b7       	in	r26, 0x3d	; 61
    119a:	be b7       	in	r27, 0x3e	; 62
    119c:	18 96       	adiw	r26, 0x08	; 8
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	be bf       	out	0x3e, r27	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	ad bf       	out	0x3d, r26	; 61
    11a8:	89 e0       	ldi	r24, 0x09	; 9
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
            LCDstring(LCDk_i, K_I_LEN);
    11b0:	8a a9       	ldd	r24, Y+50	; 0x32
    11b2:	9b a9       	ldd	r25, Y+51	; 0x33
    11b4:	63 e0       	ldi	r22, 0x03	; 3
    11b6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		}

		if (updatek_d){
    11ba:	11 23       	and	r17, r17
    11bc:	71 f1       	breq	.+92     	; 0x121a <__stack+0x11b>
			sprintf(LCDk_d, "%f", localk_d);
    11be:	8d b7       	in	r24, 0x3d	; 61
    11c0:	9e b7       	in	r25, 0x3e	; 62
    11c2:	08 97       	sbiw	r24, 0x08	; 8
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	9e bf       	out	0x3e, r25	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	8d bf       	out	0x3d, r24	; 61
    11ce:	ed b7       	in	r30, 0x3d	; 61
    11d0:	fe b7       	in	r31, 0x3e	; 62
    11d2:	31 96       	adiw	r30, 0x01	; 1
    11d4:	ad b7       	in	r26, 0x3d	; 61
    11d6:	be b7       	in	r27, 0x3e	; 62
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	6c 92       	st	X, r6
    11dc:	11 97       	sbiw	r26, 0x01	; 1
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	7c 92       	st	X, r7
    11e2:	a2 82       	std	Z+2, r10	; 0x02
    11e4:	b3 82       	std	Z+3, r11	; 0x03
    11e6:	88 a1       	ldd	r24, Y+32	; 0x20
    11e8:	99 a1       	ldd	r25, Y+33	; 0x21
    11ea:	aa a1       	ldd	r26, Y+34	; 0x22
    11ec:	bb a1       	ldd	r27, Y+35	; 0x23
    11ee:	84 83       	std	Z+4, r24	; 0x04
    11f0:	95 83       	std	Z+5, r25	; 0x05
    11f2:	a6 83       	std	Z+6, r26	; 0x06
    11f4:	b7 83       	std	Z+7, r27	; 0x07
    11f6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
            LCDGotoXY(K_D_LOC, 1);
    11fa:	8d b7       	in	r24, 0x3d	; 61
    11fc:	9e b7       	in	r25, 0x3e	; 62
    11fe:	08 96       	adiw	r24, 0x08	; 8
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	9e bf       	out	0x3e, r25	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	8d bf       	out	0x3d, r24	; 61
    120a:	8d e0       	ldi	r24, 0x0D	; 13
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
            LCDstring(LCDk_d, K_D_LEN);
    1212:	c3 01       	movw	r24, r6
    1214:	63 e0       	ldi	r22, 0x03	; 3
    1216:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		}

		trtWait(SEM_OMEGA);
    121a:	87 e0       	ldi	r24, 0x07	; 7
    121c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		sprintf(LCDOmega, "%i", omega);
    1220:	00 d0       	rcall	.+0      	; 0x1222 <__stack+0x123>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <__stack+0x125>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <__stack+0x127>
    1226:	ed b7       	in	r30, 0x3d	; 61
    1228:	fe b7       	in	r31, 0x3e	; 62
    122a:	31 96       	adiw	r30, 0x01	; 1
    122c:	ad b7       	in	r26, 0x3d	; 61
    122e:	be b7       	in	r27, 0x3e	; 62
    1230:	11 96       	adiw	r26, 0x01	; 1
    1232:	4c 92       	st	X, r4
    1234:	11 97       	sbiw	r26, 0x01	; 1
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	8c 92       	st	X, r8
    123a:	be a5       	ldd	r27, Y+46	; 0x2e
    123c:	b2 83       	std	Z+2, r27	; 0x02
    123e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1240:	83 83       	std	Z+3, r24	; 0x03
    1242:	80 91 5b 02 	lds	r24, 0x025B
    1246:	90 91 5c 02 	lds	r25, 0x025C
    124a:	95 83       	std	Z+5, r25	; 0x05
    124c:	84 83       	std	Z+4, r24	; 0x04
    124e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
		LCDGotoXY(OMEGA_LOC, 0);
    1252:	ad b7       	in	r26, 0x3d	; 61
    1254:	be b7       	in	r27, 0x3e	; 62
    1256:	16 96       	adiw	r26, 0x06	; 6
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	be bf       	out	0x3e, r27	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	ad bf       	out	0x3d, r26	; 61
    1262:	87 e0       	ldi	r24, 0x07	; 7
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
		LCDstring(LCDOmega, OMEGA_LEN);
    126a:	84 2d       	mov	r24, r4
    126c:	98 2d       	mov	r25, r8
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	0e 94 1c 0b 	call	0x1638	; 0x1638 <LCDstring>
		trtSignal(SEM_OMEGA);
    1274:	87 e0       	ldi	r24, 0x07	; 7
    1276:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    127a:	20 91 c5 03 	lds	r18, 0x03C5
    127e:	30 91 c6 03 	lds	r19, 0x03C6
    1282:	40 91 c7 03 	lds	r20, 0x03C7
    1286:	50 91 c8 03 	lds	r21, 0x03C8
    128a:	a9 01       	movw	r20, r18
    128c:	33 27       	eor	r19, r19
    128e:	22 27       	eor	r18, r18
    1290:	60 91 84 00 	lds	r22, 0x0084
    1294:	70 91 85 00 	lds	r23, 0x0085

		rel = trtCurrentTime() + SECONDS2TICKS(0.1);
		dead = trtCurrentTime() + SECONDS2TICKS(0.225);
		trtSleepUntil(rel, dead);
    1298:	e0 90 84 00 	lds	r14, 0x0084
    129c:	f0 90 85 00 	lds	r15, 0x0085
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	62 0f       	add	r22, r18
    12a6:	73 1f       	adc	r23, r19
    12a8:	84 1f       	adc	r24, r20
    12aa:	95 1f       	adc	r25, r21
    12ac:	66 5e       	subi	r22, 0xE6	; 230
    12ae:	79 4f       	sbci	r23, 0xF9	; 249
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	2e 0d       	add	r18, r14
    12ba:	3f 1d       	adc	r19, r15
    12bc:	40 1f       	adc	r20, r16
    12be:	51 1f       	adc	r21, r17
    12c0:	25 54       	subi	r18, 0x45	; 69
    12c2:	32 4f       	sbci	r19, 0xF2	; 242
    12c4:	4f 4f       	sbci	r20, 0xFF	; 255
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
    12cc:	71 ce       	rjmp	.-798    	; 0xfb0 <displayParams+0x2e4>

000012ce <serialComm>:


//read the commands from the user
// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  {
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <serialComm+0x26>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <serialComm+0x28>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    12fc:	1e 01       	movw	r2, r28
    12fe:	08 94       	sec
    1300:	21 1c       	adc	r2, r1
    1302:	31 1c       	adc	r3, r1
    1304:	e2 e0       	ldi	r30, 0x02	; 2
    1306:	4e 2e       	mov	r4, r30
    1308:	51 2c       	mov	r5, r1
    130a:	4c 0e       	add	r4, r28
    130c:	5d 1e       	adc	r5, r29
		//trtWait(SEM_STRING_DONE);

		//update the parameters
		fprintf(stdout, "Cmd is %c\n", cmd);
    130e:	7d e2       	ldi	r23, 0x2D	; 45
    1310:	67 2e       	mov	r6, r23
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	77 2e       	mov	r7, r23
		fprintf(stdout, "Val is %f\n", val);
    1316:	68 e3       	ldi	r22, 0x38	; 56
    1318:	86 2e       	mov	r8, r22
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	96 2e       	mov	r9, r22
						k_d = val;
						trtSignal(SEM_K_D);
						fprintf(stdout, "Ending - Setting d\n");
						break;
					default:
						fprintf(stdout, "Command %c not recognized\n", cmd);
    131e:	53 ef       	ldi	r21, 0xF3	; 243
    1320:	a5 2e       	mov	r10, r21
    1322:	51 e0       	ldi	r21, 0x01	; 1
    1324:	b5 2e       	mov	r11, r21
						break;
				}
			}
			else{
				fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    1326:	4e e0       	ldi	r20, 0x0E	; 14
    1328:	c4 2e       	mov	r12, r20
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	d4 2e       	mov	r13, r20
		// 									set the proportional gain to val1
		//									set the integral gain to val2
		//									set the differential gain to val3
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
    132e:	60 91 d2 03 	lds	r22, 0x03D2
    1332:	70 91 d3 03 	lds	r23, 0x03D3
    1336:	8e e3       	ldi	r24, 0x3E	; 62
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    133e:	8d b7       	in	r24, 0x3d	; 61
    1340:	9e b7       	in	r25, 0x3e	; 62
    1342:	08 97       	sbiw	r24, 0x08	; 8
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	9e bf       	out	0x3e, r25	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	8d bf       	out	0x3d, r24	; 61
    134e:	ed b7       	in	r30, 0x3d	; 61
    1350:	fe b7       	in	r31, 0x3e	; 62
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	80 91 d0 03 	lds	r24, 0x03D0
    1358:	90 91 d1 03 	lds	r25, 0x03D1
    135c:	ad b7       	in	r26, 0x3d	; 61
    135e:	be b7       	in	r27, 0x3e	; 62
    1360:	12 96       	adiw	r26, 0x02	; 2
    1362:	9c 93       	st	X, r25
    1364:	8e 93       	st	-X, r24
    1366:	11 97       	sbiw	r26, 0x01	; 1
    1368:	88 e2       	ldi	r24, 0x28	; 40
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
    1370:	35 82       	std	Z+5, r3	; 0x05
    1372:	24 82       	std	Z+4, r2	; 0x04
    1374:	57 82       	std	Z+7, r5	; 0x07
    1376:	46 82       	std	Z+6, r4	; 0x06
    1378:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fscanf>
		//trtWait(SEM_STRING_DONE);

		//update the parameters
		fprintf(stdout, "Cmd is %c\n", cmd);
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	ed b7       	in	r30, 0x3d	; 61
    1382:	fe b7       	in	r31, 0x3e	; 62
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	80 91 d2 03 	lds	r24, 0x03D2
    138a:	90 91 d3 03 	lds	r25, 0x03D3
    138e:	ad b7       	in	r26, 0x3d	; 61
    1390:	be b7       	in	r27, 0x3e	; 62
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	73 82       	std	Z+3, r7	; 0x03
    139c:	62 82       	std	Z+2, r6	; 0x02
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	84 83       	std	Z+4, r24	; 0x04
    13a2:	15 82       	std	Z+5, r1	; 0x05
    13a4:	0e 94 02 18 	call	0x3004	; 0x3004 <fprintf>
		fprintf(stdout, "Val is %f\n", val);
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <serialComm+0xdc>
    13aa:	ed b7       	in	r30, 0x3d	; 61
    13ac:	fe b7       	in	r31, 0x3e	; 62
    13ae:	31 96       	adiw	r30, 0x01	; 1
    13b0:	80 91 d2 03 	lds	r24, 0x03D2
    13b4:	90 91 d3 03 	lds	r25, 0x03D3
    13b8:	ad b7       	in	r26, 0x3d	; 61
    13ba:	be b7       	in	r27, 0x3e	; 62
    13bc:	12 96       	adiw	r26, 0x02	; 2
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
    13c2:	11 97       	sbiw	r26, 0x01	; 1
    13c4:	93 82       	std	Z+3, r9	; 0x03
    13c6:	82 82       	std	Z+2, r8	; 0x02
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	ac 81       	ldd	r26, Y+4	; 0x04
    13ce:	bd 81       	ldd	r27, Y+5	; 0x05
    13d0:	84 83       	std	Z+4, r24	; 0x04
    13d2:	95 83       	std	Z+5, r25	; 0x05
    13d4:	a6 83       	std	Z+6, r26	; 0x06
    13d6:	b7 83       	std	Z+7, r27	; 0x07
    13d8:	0e 94 02 18 	call	0x3004	; 0x3004 <fprintf>
		//if (strlen(cmd) != 1) {
			if (val >= 0) {
    13dc:	ea 80       	ldd	r14, Y+2	; 0x02
    13de:	fb 80       	ldd	r15, Y+3	; 0x03
    13e0:	0c 81       	ldd	r16, Y+4	; 0x04
    13e2:	1d 81       	ldd	r17, Y+5	; 0x05
    13e4:	8d b7       	in	r24, 0x3d	; 61
    13e6:	9e b7       	in	r25, 0x3e	; 62
    13e8:	08 96       	adiw	r24, 0x08	; 8
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	9e bf       	out	0x3e, r25	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	8d bf       	out	0x3d, r24	; 61
    13f4:	c8 01       	movw	r24, r16
    13f6:	b7 01       	movw	r22, r14
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__gesf2>
    1404:	88 23       	and	r24, r24
    1406:	0c f4       	brge	.+2      	; 0x140a <serialComm+0x13c>
    1408:	ad c0       	rjmp	.+346    	; 0x1564 <serialComm+0x296>
				switch (cmd){
    140a:	29 81       	ldd	r18, Y+1	; 0x01
    140c:	29 36       	cpi	r18, 0x69	; 105
    140e:	09 f4       	brne	.+2      	; 0x1412 <serialComm+0x144>
    1410:	4b c0       	rjmp	.+150    	; 0x14a8 <serialComm+0x1da>
    1412:	2a 36       	cpi	r18, 0x6A	; 106
    1414:	20 f4       	brcc	.+8      	; 0x141e <serialComm+0x150>
    1416:	24 36       	cpi	r18, 0x64	; 100
    1418:	09 f0       	breq	.+2      	; 0x141c <serialComm+0x14e>
    141a:	8a c0       	rjmp	.+276    	; 0x1530 <serialComm+0x262>
    141c:	66 c0       	rjmp	.+204    	; 0x14ea <serialComm+0x21c>
    141e:	20 37       	cpi	r18, 0x70	; 112
    1420:	11 f1       	breq	.+68     	; 0x1466 <serialComm+0x198>
    1422:	23 37       	cpi	r18, 0x73	; 115
    1424:	09 f0       	breq	.+2      	; 0x1428 <serialComm+0x15a>
    1426:	84 c0       	rjmp	.+264    	; 0x1530 <serialComm+0x262>
					case 's':
						fprintf(stdout, "Starting - Setting speed\n");
    1428:	60 91 d2 03 	lds	r22, 0x03D2
    142c:	70 91 d3 03 	lds	r23, 0x03D3
    1430:	83 e4       	ldi	r24, 0x43	; 67
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
						trtWait(SEM_OMEGA_REF);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
						omegaRef = (int) val;
    143e:	6a 81       	ldd	r22, Y+2	; 0x02
    1440:	7b 81       	ldd	r23, Y+3	; 0x03
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__fixsfsi>
    144a:	70 93 5a 02 	sts	0x025A, r23
    144e:	60 93 59 02 	sts	0x0259, r22
						trtSignal(SEM_OMEGA_REF);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
						fprintf(stdout, "Ending - Setting speed\n");
    1458:	60 91 d2 03 	lds	r22, 0x03D2
    145c:	70 91 d3 03 	lds	r23, 0x03D3
    1460:	8d e5       	ldi	r24, 0x5D	; 93
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	62 c0       	rjmp	.+196    	; 0x152a <serialComm+0x25c>
						break;
					case 'p':
						fprintf(stdout, "Starting - Setting p\n");
    1466:	60 91 d2 03 	lds	r22, 0x03D2
    146a:	70 91 d3 03 	lds	r23, 0x03D3
    146e:	85 e7       	ldi	r24, 0x75	; 117
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
						trtWait(SEM_K_P);
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
						k_p = val;
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	9b 81       	ldd	r25, Y+3	; 0x03
    1480:	ac 81       	ldd	r26, Y+4	; 0x04
    1482:	bd 81       	ldd	r27, Y+5	; 0x05
    1484:	80 93 4d 02 	sts	0x024D, r24
    1488:	90 93 4e 02 	sts	0x024E, r25
    148c:	a0 93 4f 02 	sts	0x024F, r26
    1490:	b0 93 50 02 	sts	0x0250, r27
						trtSignal(SEM_K_P);
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
						fprintf(stdout, "Ending - Setting p\n");
    149a:	60 91 d2 03 	lds	r22, 0x03D2
    149e:	70 91 d3 03 	lds	r23, 0x03D3
    14a2:	8b e8       	ldi	r24, 0x8B	; 139
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	41 c0       	rjmp	.+130    	; 0x152a <serialComm+0x25c>
						break;
					case 'i':
						fprintf(stdout, "Starting - Setting i\n");
    14a8:	60 91 d2 03 	lds	r22, 0x03D2
    14ac:	70 91 d3 03 	lds	r23, 0x03D3
    14b0:	8f e9       	ldi	r24, 0x9F	; 159
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
						trtWait(SEM_K_I);
    14b8:	85 e0       	ldi	r24, 0x05	; 5
    14ba:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
						k_i = val;
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	ac 81       	ldd	r26, Y+4	; 0x04
    14c4:	bd 81       	ldd	r27, Y+5	; 0x05
    14c6:	80 93 51 02 	sts	0x0251, r24
    14ca:	90 93 52 02 	sts	0x0252, r25
    14ce:	a0 93 53 02 	sts	0x0253, r26
    14d2:	b0 93 54 02 	sts	0x0254, r27
						trtSignal(SEM_K_I);
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
						fprintf(stdout, "Ending - Setting i\n");
    14dc:	60 91 d2 03 	lds	r22, 0x03D2
    14e0:	70 91 d3 03 	lds	r23, 0x03D3
    14e4:	85 eb       	ldi	r24, 0xB5	; 181
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	20 c0       	rjmp	.+64     	; 0x152a <serialComm+0x25c>
						break;
					case 'd':
						fprintf(stdout, "Starting - Setting d\n");
    14ea:	60 91 d2 03 	lds	r22, 0x03D2
    14ee:	70 91 d3 03 	lds	r23, 0x03D3
    14f2:	89 ec       	ldi	r24, 0xC9	; 201
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
						trtWait(SEM_K_D);
    14fa:	86 e0       	ldi	r24, 0x06	; 6
    14fc:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
						k_d = val;
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	ac 81       	ldd	r26, Y+4	; 0x04
    1506:	bd 81       	ldd	r27, Y+5	; 0x05
    1508:	80 93 55 02 	sts	0x0255, r24
    150c:	90 93 56 02 	sts	0x0256, r25
    1510:	a0 93 57 02 	sts	0x0257, r26
    1514:	b0 93 58 02 	sts	0x0258, r27
						trtSignal(SEM_K_D);
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
						fprintf(stdout, "Ending - Setting d\n");
    151e:	60 91 d2 03 	lds	r22, 0x03D2
    1522:	70 91 d3 03 	lds	r23, 0x03D3
    1526:	8f ed       	ldi	r24, 0xDF	; 223
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	0e 94 42 18 	call	0x3084	; 0x3084 <fputs>
    152e:	ff ce       	rjmp	.-514    	; 0x132e <serialComm+0x60>
						break;
					default:
						fprintf(stdout, "Command %c not recognized\n", cmd);
    1530:	00 d0       	rcall	.+0      	; 0x1532 <serialComm+0x264>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <serialComm+0x266>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <serialComm+0x268>
    1536:	ed b7       	in	r30, 0x3d	; 61
    1538:	fe b7       	in	r31, 0x3e	; 62
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	80 91 d2 03 	lds	r24, 0x03D2
    1540:	90 91 d3 03 	lds	r25, 0x03D3
    1544:	ad b7       	in	r26, 0x3d	; 61
    1546:	be b7       	in	r27, 0x3e	; 62
    1548:	12 96       	adiw	r26, 0x02	; 2
    154a:	9c 93       	st	X, r25
    154c:	8e 93       	st	-X, r24
    154e:	11 97       	sbiw	r26, 0x01	; 1
    1550:	b3 82       	std	Z+3, r11	; 0x03
    1552:	a2 82       	std	Z+2, r10	; 0x02
    1554:	24 83       	std	Z+4, r18	; 0x04
    1556:	15 82       	std	Z+5, r1	; 0x05
    1558:	0e 94 02 18 	call	0x3004	; 0x3004 <fprintf>
    155c:	8d b7       	in	r24, 0x3d	; 61
    155e:	9e b7       	in	r25, 0x3e	; 62
    1560:	06 96       	adiw	r24, 0x06	; 6
    1562:	1e c0       	rjmp	.+60     	; 0x15a0 <serialComm+0x2d2>
						break;
				}
			}
			else{
				fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    1564:	ad b7       	in	r26, 0x3d	; 61
    1566:	be b7       	in	r27, 0x3e	; 62
    1568:	18 97       	sbiw	r26, 0x08	; 8
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	be bf       	out	0x3e, r27	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	ad bf       	out	0x3d, r26	; 61
    1574:	ed b7       	in	r30, 0x3d	; 61
    1576:	fe b7       	in	r31, 0x3e	; 62
    1578:	31 96       	adiw	r30, 0x01	; 1
    157a:	80 91 d2 03 	lds	r24, 0x03D2
    157e:	90 91 d3 03 	lds	r25, 0x03D3
    1582:	12 96       	adiw	r26, 0x02	; 2
    1584:	9c 93       	st	X, r25
    1586:	8e 93       	st	-X, r24
    1588:	11 97       	sbiw	r26, 0x01	; 1
    158a:	d3 82       	std	Z+3, r13	; 0x03
    158c:	c2 82       	std	Z+2, r12	; 0x02
    158e:	e4 82       	std	Z+4, r14	; 0x04
    1590:	f5 82       	std	Z+5, r15	; 0x05
    1592:	06 83       	std	Z+6, r16	; 0x06
    1594:	17 83       	std	Z+7, r17	; 0x07
    1596:	0e 94 02 18 	call	0x3004	; 0x3004 <fprintf>
    159a:	8d b7       	in	r24, 0x3d	; 61
    159c:	9e b7       	in	r25, 0x3e	; 62
    159e:	08 96       	adiw	r24, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	9e bf       	out	0x3e, r25	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	8d bf       	out	0x3d, r24	; 61
    15aa:	c1 ce       	rjmp	.-638    	; 0x132e <serialComm+0x60>

000015ac <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    15ac:	28 2f       	mov	r18, r24
    15ae:	20 7f       	andi	r18, 0xF0	; 240
    15b0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    15b2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    15b4:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b6:	20 ea       	ldi	r18, 0xA0	; 160
    15b8:	3f e0       	ldi	r19, 0x0F	; 15
    15ba:	f9 01       	movw	r30, r18
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    15c0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    15c2:	40 98       	cbi	0x08, 0	; 8
    15c4:	f9 01       	movw	r30, r18
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	44 e0       	ldi	r20, 0x04	; 4
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	4a 95       	dec	r20
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <LCDsendChar+0x22>
    15d6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    15d8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    15da:	42 9a       	sbi	0x08, 2	; 8
    15dc:	c9 01       	movw	r24, r18
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    15e2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    15e4:	40 98       	cbi	0x08, 0	; 8
    15e6:	c9 01       	movw	r24, r18
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    15ec:	08 95       	ret

000015ee <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    15ee:	28 2f       	mov	r18, r24
    15f0:	20 7f       	andi	r18, 0xF0	; 240
    15f2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    15f4:	42 9a       	sbi	0x08, 2	; 8
    15f6:	20 ea       	ldi	r18, 0xA0	; 160
    15f8:	3f e0       	ldi	r19, 0x0F	; 15
    15fa:	f9 01       	movw	r30, r18
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1600:	42 98       	cbi	0x08, 2	; 8
    1602:	f9 01       	movw	r30, r18
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	54 e0       	ldi	r21, 0x04	; 4
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	5a 95       	dec	r21
    1612:	e1 f7       	brne	.-8      	; 0x160c <LCDsendCommand+0x1e>
    1614:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1616:	42 9a       	sbi	0x08, 2	; 8
    1618:	c9 01       	movw	r24, r18
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    161e:	42 98       	cbi	0x08, 2	; 8
    1620:	c9 01       	movw	r24, r18
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    1626:	08 95       	ret

00001628 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    162e:	08 95       	ret

00001630 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    1636:	08 95       	ret

00001638 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	49 f0       	breq	.+18     	; 0x1658 <LCDstring+0x20>
    1646:	ec 01       	movw	r28, r24
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    164c:	89 91       	ld	r24, Y+
    164e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1652:	1f 5f       	subi	r17, 0xFF	; 255
    1654:	10 17       	cp	r17, r16
    1656:	d0 f3       	brcs	.-12     	; 0x164c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1662:	62 30       	cpi	r22, 0x02	; 2
    1664:	31 f0       	breq	.+12     	; 0x1672 <LCDGotoXY+0x10>
    1666:	63 30       	cpi	r22, 0x03	; 3
    1668:	31 f0       	breq	.+12     	; 0x1676 <LCDGotoXY+0x14>
    166a:	61 30       	cpi	r22, 0x01	; 1
    166c:	29 f4       	brne	.+10     	; 0x1678 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    166e:	80 5c       	subi	r24, 0xC0	; 192
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1672:	8c 5e       	subi	r24, 0xEC	; 236
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1676:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1678:	80 68       	ori	r24, 0x80	; 128
    167a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
	
}
    167e:	08 95       	ret

00001680 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	ec 01       	movw	r28, r24
    1688:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    168a:	64 2f       	mov	r22, r20
    168c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCDGotoXY>
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	03 c0       	rjmp	.+6      	; 0x169a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1694:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1698:	1f 5f       	subi	r17, 0xFF	; 255
    169a:	fe 01       	movw	r30, r28
    169c:	e1 0f       	add	r30, r17
    169e:	f1 1d       	adc	r31, r1
    16a0:	84 91       	lpm	r24, Z+
    16a2:	88 23       	and	r24, r24
    16a4:	b9 f7       	brne	.-18     	; 0x1694 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	08 95       	ret

000016ae <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	7c 01       	movw	r14, r24
    16bc:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    16be:	11 0f       	add	r17, r17
    16c0:	11 0f       	add	r17, r17
    16c2:	11 0f       	add	r17, r17
    16c4:	10 64       	ori	r17, 0x40	; 64
    16c6:	c0 e0       	ldi	r28, 0x00	; 0
    16c8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    16ca:	f7 01       	movw	r30, r14
    16cc:	ec 0f       	add	r30, r28
    16ce:	fd 1f       	adc	r31, r29
    16d0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    16d2:	81 2f       	mov	r24, r17
    16d4:	8c 0f       	add	r24, r28
    16d6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
		LCDsendChar(pcc);
    16da:	80 2f       	mov	r24, r16
    16dc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    16e0:	21 96       	adiw	r28, 0x01	; 1
    16e2:	c8 30       	cpi	r28, 0x08	; 8
    16e4:	d1 05       	cpc	r29, r1
    16e6:	89 f7       	brne	.-30     	; 0x16ca <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	80 e6       	ldi	r24, 0x60	; 96
    16fe:	9a ee       	ldi	r25, 0xEA	; 234
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1704:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1706:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1708:	87 b1       	in	r24, 0x07	; 7
    170a:	80 6f       	ori	r24, 0xF0	; 240
    170c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    170e:	87 b1       	in	r24, 0x07	; 7
    1710:	87 60       	ori	r24, 0x07	; 7
    1712:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1718:	42 9a       	sbi	0x08, 2	; 8
    171a:	20 ea       	ldi	r18, 0xA0	; 160
    171c:	3f e0       	ldi	r19, 0x0F	; 15
    171e:	f9 01       	movw	r30, r18
    1720:	31 97       	sbiw	r30, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1724:	42 98       	cbi	0x08, 2	; 8
    1726:	f9 01       	movw	r30, r18
    1728:	31 97       	sbiw	r30, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    172c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    172e:	42 9a       	sbi	0x08, 2	; 8
    1730:	c9 01       	movw	r24, r18
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1736:	42 98       	cbi	0x08, 2	; 8
    1738:	c9 01       	movw	r24, r18
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1742:	42 9a       	sbi	0x08, 2	; 8
    1744:	c9 01       	movw	r24, r18
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    174a:	42 98       	cbi	0x08, 2	; 8
    174c:	c9 01       	movw	r24, r18
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1752:	88 e2       	ldi	r24, 0x28	; 40
    1754:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1758:	8c e0       	ldi	r24, 0x0C	; 12
    175a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
    175e:	c5 ec       	ldi	r28, 0xC5	; 197
    1760:	d0 e0       	ldi	r29, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1764:	16 2f       	mov	r17, r22
    1766:	1f 5f       	subi	r17, 0xFF	; 255
    1768:	ce 01       	movw	r24, r28
    176a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDdefinechar>
    176e:	28 96       	adiw	r28, 0x08	; 8
    1770:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1772:	18 30       	cpi	r17, 0x08	; 8
    1774:	b9 f7       	brne	.-18     	; 0x1764 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	08 95       	ret

0000177e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	08 2f       	mov	r16, r24
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1788:	8e e1       	ldi	r24, 0x1E	; 30
    178a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    178e:	1f 5f       	subi	r17, 0xFF	; 255
    1790:	10 17       	cp	r17, r16
    1792:	d0 f3       	brcs	.-12     	; 0x1788 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	08 2f       	mov	r16, r24
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    17a4:	88 e1       	ldi	r24, 0x18	; 24
    17a6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    17aa:	1f 5f       	subi	r17, 0xFF	; 255
    17ac:	10 17       	cp	r17, r16
    17ae:	d0 f3       	brcs	.-12     	; 0x17a4 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    17b6:	8e e0       	ldi	r24, 0x0E	; 14
    17b8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    17bc:	08 95       	ret

000017be <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    17be:	8f e0       	ldi	r24, 0x0F	; 15
    17c0:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    17c4:	08 95       	ret

000017c6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    17c6:	8c e0       	ldi	r24, 0x0C	; 12
    17c8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    17cc:	08 95       	ret

000017ce <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    17ce:	88 e0       	ldi	r24, 0x08	; 8
    17d0:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    17d4:	08 95       	ret

000017d6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    17d6:	8c e0       	ldi	r24, 0x0C	; 12
    17d8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
}
    17dc:	08 95       	ret

000017de <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	08 2f       	mov	r16, r24
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    17e8:	80 e1       	ldi	r24, 0x10	; 16
    17ea:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    17ee:	1f 5f       	subi	r17, 0xFF	; 255
    17f0:	10 17       	cp	r17, r16
    17f2:	d0 f3       	brcs	.-12     	; 0x17e8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	08 2f       	mov	r16, r24
    1800:	10 e0       	ldi	r17, 0x00	; 0
    1802:	04 c0       	rjmp	.+8      	; 0x180c <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1804:	84 e1       	ldi	r24, 0x14	; 20
    1806:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    180a:	1f 5f       	subi	r17, 0xFF	; 255
    180c:	10 17       	cp	r17, r16
    180e:	d0 f3       	brcs	.-12     	; 0x1804 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1826:	96 e0       	ldi	r25, 0x06	; 6
    1828:	89 9f       	mul	r24, r25
    182a:	c0 01       	movw	r24, r0
    182c:	11 24       	eor	r1, r1
    182e:	24 2f       	mov	r18, r20
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	ac 01       	movw	r20, r24
    1834:	42 9f       	mul	r20, r18
    1836:	c0 01       	movw	r24, r0
    1838:	43 9f       	mul	r20, r19
    183a:	90 0d       	add	r25, r0
    183c:	52 9f       	mul	r21, r18
    183e:	90 0d       	add	r25, r0
    1840:	11 24       	eor	r1, r1
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__divmodhi4>
    1848:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    184a:	cb 01       	movw	r24, r22
    184c:	66 e0       	ldi	r22, 0x06	; 6
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    1854:	e8 2e       	mov	r14, r24
    1856:	ff 24       	eor	r15, r15
    1858:	00 e0       	ldi	r16, 0x00	; 0
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	12 c0       	rjmp	.+36     	; 0x1882 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    185e:	c8 01       	movw	r24, r16
    1860:	05 96       	adiw	r24, 0x05	; 5
    1862:	c8 17       	cp	r28, r24
    1864:	d9 07       	cpc	r29, r25
    1866:	10 f0       	brcs	.+4      	; 0x186c <LCDprogressBar+0x56>
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    186c:	c0 17       	cp	r28, r16
    186e:	d1 07       	cpc	r29, r17
    1870:	10 f0       	brcs	.+4      	; 0x1876 <LCDprogressBar+0x60>
    1872:	8e 2d       	mov	r24, r14
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <LCDprogressBar+0x62>
    1876:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1878:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    187c:	f3 94       	inc	r15
    187e:	0a 5f       	subi	r16, 0xFA	; 250
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	fd 14       	cp	r15, r13
    1884:	60 f3       	brcs	.-40     	; 0x185e <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	08 95       	ret

00001896 <__nesf2>:
    1896:	a8 e1       	ldi	r26, 0x18	; 24
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e5       	ldi	r30, 0x51	; 81
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
    18a2:	69 83       	std	Y+1, r22	; 0x01
    18a4:	7a 83       	std	Y+2, r23	; 0x02
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	2d 83       	std	Y+5, r18	; 0x05
    18ac:	3e 83       	std	Y+6, r19	; 0x06
    18ae:	4f 83       	std	Y+7, r20	; 0x07
    18b0:	58 87       	std	Y+8, r21	; 0x08
    18b2:	89 e0       	ldi	r24, 0x09	; 9
    18b4:	e8 2e       	mov	r14, r24
    18b6:	f1 2c       	mov	r15, r1
    18b8:	ec 0e       	add	r14, r28
    18ba:	fd 1e       	adc	r15, r29
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	b7 01       	movw	r22, r14
    18c2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__unpack_f>
    18c6:	8e 01       	movw	r16, r28
    18c8:	0f 5e       	subi	r16, 0xEF	; 239
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	ce 01       	movw	r24, r28
    18ce:	05 96       	adiw	r24, 0x05	; 5
    18d0:	b8 01       	movw	r22, r16
    18d2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__unpack_f>
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	40 f0       	brcs	.+16     	; 0x18ec <__nesf2+0x56>
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	28 f0       	brcs	.+10     	; 0x18ec <__nesf2+0x56>
    18e2:	c7 01       	movw	r24, r14
    18e4:	b8 01       	movw	r22, r16
    18e6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fpcmp_parts_f>
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <__nesf2+0x58>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	68 96       	adiw	r28, 0x18	; 24
    18f0:	e6 e0       	ldi	r30, 0x06	; 6
    18f2:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000018f6 <__gesf2>:
    18f6:	a8 e1       	ldi	r26, 0x18	; 24
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e1 e8       	ldi	r30, 0x81	; 129
    18fc:	fc e0       	ldi	r31, 0x0C	; 12
    18fe:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
    1902:	69 83       	std	Y+1, r22	; 0x01
    1904:	7a 83       	std	Y+2, r23	; 0x02
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	2d 83       	std	Y+5, r18	; 0x05
    190c:	3e 83       	std	Y+6, r19	; 0x06
    190e:	4f 83       	std	Y+7, r20	; 0x07
    1910:	58 87       	std	Y+8, r21	; 0x08
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	e8 2e       	mov	r14, r24
    1916:	f1 2c       	mov	r15, r1
    1918:	ec 0e       	add	r14, r28
    191a:	fd 1e       	adc	r15, r29
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	b7 01       	movw	r22, r14
    1922:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__unpack_f>
    1926:	8e 01       	movw	r16, r28
    1928:	0f 5e       	subi	r16, 0xEF	; 239
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	ce 01       	movw	r24, r28
    192e:	05 96       	adiw	r24, 0x05	; 5
    1930:	b8 01       	movw	r22, r16
    1932:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__unpack_f>
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	40 f0       	brcs	.+16     	; 0x194c <__gesf2+0x56>
    193c:	89 89       	ldd	r24, Y+17	; 0x11
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	28 f0       	brcs	.+10     	; 0x194c <__gesf2+0x56>
    1942:	c7 01       	movw	r24, r14
    1944:	b8 01       	movw	r22, r16
    1946:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fpcmp_parts_f>
    194a:	01 c0       	rjmp	.+2      	; 0x194e <__gesf2+0x58>
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	68 96       	adiw	r28, 0x18	; 24
    1950:	e6 e0       	ldi	r30, 0x06	; 6
    1952:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

00001956 <__fixsfsi>:
    1956:	ac e0       	ldi	r26, 0x0C	; 12
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x20>
    1962:	69 83       	std	Y+1, r22	; 0x01
    1964:	7a 83       	std	Y+2, r23	; 0x02
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	be 01       	movw	r22, r28
    1970:	6b 5f       	subi	r22, 0xFB	; 251
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__unpack_f>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	61 f1       	breq	.+88     	; 0x19d6 <__fixsfsi+0x80>
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	50 f1       	brcs	.+84     	; 0x19d6 <__fixsfsi+0x80>
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	21 f4       	brne	.+8      	; 0x198e <__fixsfsi+0x38>
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	88 23       	and	r24, r24
    198a:	51 f1       	breq	.+84     	; 0x19e0 <__fixsfsi+0x8a>
    198c:	2e c0       	rjmp	.+92     	; 0x19ea <__fixsfsi+0x94>
    198e:	2f 81       	ldd	r18, Y+7	; 0x07
    1990:	38 85       	ldd	r19, Y+8	; 0x08
    1992:	37 fd       	sbrc	r19, 7
    1994:	20 c0       	rjmp	.+64     	; 0x19d6 <__fixsfsi+0x80>
    1996:	6e 81       	ldd	r22, Y+6	; 0x06
    1998:	2f 31       	cpi	r18, 0x1F	; 31
    199a:	31 05       	cpc	r19, r1
    199c:	1c f0       	brlt	.+6      	; 0x19a4 <__fixsfsi+0x4e>
    199e:	66 23       	and	r22, r22
    19a0:	f9 f0       	breq	.+62     	; 0x19e0 <__fixsfsi+0x8a>
    19a2:	23 c0       	rjmp	.+70     	; 0x19ea <__fixsfsi+0x94>
    19a4:	8e e1       	ldi	r24, 0x1E	; 30
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	82 1b       	sub	r24, r18
    19aa:	93 0b       	sbc	r25, r19
    19ac:	29 85       	ldd	r18, Y+9	; 0x09
    19ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    19b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    19b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__fixsfsi+0x68>
    19b6:	56 95       	lsr	r21
    19b8:	47 95       	ror	r20
    19ba:	37 95       	ror	r19
    19bc:	27 95       	ror	r18
    19be:	8a 95       	dec	r24
    19c0:	d2 f7       	brpl	.-12     	; 0x19b6 <__fixsfsi+0x60>
    19c2:	66 23       	and	r22, r22
    19c4:	b1 f0       	breq	.+44     	; 0x19f2 <__fixsfsi+0x9c>
    19c6:	50 95       	com	r21
    19c8:	40 95       	com	r20
    19ca:	30 95       	com	r19
    19cc:	21 95       	neg	r18
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	4f 4f       	sbci	r20, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <__fixsfsi+0x9c>
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	09 c0       	rjmp	.+18     	; 0x19f2 <__fixsfsi+0x9c>
    19e0:	2f ef       	ldi	r18, 0xFF	; 255
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f ef       	ldi	r20, 0xFF	; 255
    19e6:	5f e7       	ldi	r21, 0x7F	; 127
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <__fixsfsi+0x9c>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	50 e8       	ldi	r21, 0x80	; 128
    19f2:	b9 01       	movw	r22, r18
    19f4:	ca 01       	movw	r24, r20
    19f6:	2c 96       	adiw	r28, 0x0c	; 12
    19f8:	e2 e0       	ldi	r30, 0x02	; 2
    19fa:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x20>

000019fe <__unpack_f>:
    19fe:	fc 01       	movw	r30, r24
    1a00:	db 01       	movw	r26, r22
    1a02:	40 81       	ld	r20, Z
    1a04:	51 81       	ldd	r21, Z+1	; 0x01
    1a06:	22 81       	ldd	r18, Z+2	; 0x02
    1a08:	62 2f       	mov	r22, r18
    1a0a:	6f 77       	andi	r22, 0x7F	; 127
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	22 1f       	adc	r18, r18
    1a10:	22 27       	eor	r18, r18
    1a12:	22 1f       	adc	r18, r18
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	89 2f       	mov	r24, r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	82 2b       	or	r24, r18
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	99 1f       	adc	r25, r25
    1a22:	99 27       	eor	r25, r25
    1a24:	99 1f       	adc	r25, r25
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	11 97       	sbiw	r26, 0x01	; 1
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	a9 f5       	brne	.+106    	; 0x1a9c <__unpack_f+0x9e>
    1a32:	41 15       	cp	r20, r1
    1a34:	51 05       	cpc	r21, r1
    1a36:	61 05       	cpc	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <__unpack_f+0x42>
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	37 c0       	rjmp	.+110    	; 0x1aae <__unpack_f+0xb0>
    1a40:	82 e8       	ldi	r24, 0x82	; 130
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
    1a44:	13 96       	adiw	r26, 0x03	; 3
    1a46:	9c 93       	st	X, r25
    1a48:	8e 93       	st	-X, r24
    1a4a:	12 97       	sbiw	r26, 0x02	; 2
    1a4c:	9a 01       	movw	r18, r20
    1a4e:	ab 01       	movw	r20, r22
    1a50:	67 e0       	ldi	r22, 0x07	; 7
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	44 1f       	adc	r20, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	6a 95       	dec	r22
    1a5c:	d1 f7       	brne	.-12     	; 0x1a52 <__unpack_f+0x54>
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	8c 93       	st	X, r24
    1a62:	0d c0       	rjmp	.+26     	; 0x1a7e <__unpack_f+0x80>
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	44 1f       	adc	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	12 96       	adiw	r26, 0x02	; 2
    1a6e:	8d 91       	ld	r24, X+
    1a70:	9c 91       	ld	r25, X
    1a72:	13 97       	sbiw	r26, 0x03	; 3
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	13 96       	adiw	r26, 0x03	; 3
    1a78:	9c 93       	st	X, r25
    1a7a:	8e 93       	st	-X, r24
    1a7c:	12 97       	sbiw	r26, 0x02	; 2
    1a7e:	20 30       	cpi	r18, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	38 07       	cpc	r19, r24
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	48 07       	cpc	r20, r24
    1a88:	80 e4       	ldi	r24, 0x40	; 64
    1a8a:	58 07       	cpc	r21, r24
    1a8c:	58 f3       	brcs	.-42     	; 0x1a64 <__unpack_f+0x66>
    1a8e:	14 96       	adiw	r26, 0x04	; 4
    1a90:	2d 93       	st	X+, r18
    1a92:	3d 93       	st	X+, r19
    1a94:	4d 93       	st	X+, r20
    1a96:	5c 93       	st	X, r21
    1a98:	17 97       	sbiw	r26, 0x07	; 7
    1a9a:	08 95       	ret
    1a9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	79 f4       	brne	.+30     	; 0x1ac0 <__unpack_f+0xc2>
    1aa2:	41 15       	cp	r20, r1
    1aa4:	51 05       	cpc	r21, r1
    1aa6:	61 05       	cpc	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <__unpack_f+0xb4>
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	8c 93       	st	X, r24
    1ab0:	08 95       	ret
    1ab2:	64 ff       	sbrs	r22, 4
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <__unpack_f+0xbe>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	8c 93       	st	X, r24
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <__unpack_f+0xe2>
    1abc:	1c 92       	st	X, r1
    1abe:	10 c0       	rjmp	.+32     	; 0x1ae0 <__unpack_f+0xe2>
    1ac0:	2f 57       	subi	r18, 0x7F	; 127
    1ac2:	30 40       	sbci	r19, 0x00	; 0
    1ac4:	13 96       	adiw	r26, 0x03	; 3
    1ac6:	3c 93       	st	X, r19
    1ac8:	2e 93       	st	-X, r18
    1aca:	12 97       	sbiw	r26, 0x02	; 2
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	8c 93       	st	X, r24
    1ad0:	87 e0       	ldi	r24, 0x07	; 7
    1ad2:	44 0f       	add	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	66 1f       	adc	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	8a 95       	dec	r24
    1adc:	d1 f7       	brne	.-12     	; 0x1ad2 <__unpack_f+0xd4>
    1ade:	70 64       	ori	r23, 0x40	; 64
    1ae0:	14 96       	adiw	r26, 0x04	; 4
    1ae2:	4d 93       	st	X+, r20
    1ae4:	5d 93       	st	X+, r21
    1ae6:	6d 93       	st	X+, r22
    1ae8:	7c 93       	st	X, r23
    1aea:	17 97       	sbiw	r26, 0x07	; 7
    1aec:	08 95       	ret

00001aee <__fpcmp_parts_f>:
    1aee:	1f 93       	push	r17
    1af0:	dc 01       	movw	r26, r24
    1af2:	fb 01       	movw	r30, r22
    1af4:	9c 91       	ld	r25, X
    1af6:	92 30       	cpi	r25, 0x02	; 2
    1af8:	08 f4       	brcc	.+2      	; 0x1afc <__fpcmp_parts_f+0xe>
    1afa:	47 c0       	rjmp	.+142    	; 0x1b8a <__fpcmp_parts_f+0x9c>
    1afc:	80 81       	ld	r24, Z
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	08 f4       	brcc	.+2      	; 0x1b04 <__fpcmp_parts_f+0x16>
    1b02:	43 c0       	rjmp	.+134    	; 0x1b8a <__fpcmp_parts_f+0x9c>
    1b04:	94 30       	cpi	r25, 0x04	; 4
    1b06:	51 f4       	brne	.+20     	; 0x1b1c <__fpcmp_parts_f+0x2e>
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	1c 91       	ld	r17, X
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	99 f5       	brne	.+102    	; 0x1b76 <__fpcmp_parts_f+0x88>
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	68 2f       	mov	r22, r24
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	61 1b       	sub	r22, r17
    1b18:	71 09       	sbc	r23, r1
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <__fpcmp_parts_f+0xac>
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <__fpcmp_parts_f+0x3a>
    1b20:	92 30       	cpi	r25, 0x02	; 2
    1b22:	31 f4       	brne	.+12     	; 0x1b30 <__fpcmp_parts_f+0x42>
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	b9 f1       	breq	.+110    	; 0x1b96 <__fpcmp_parts_f+0xa8>
    1b28:	81 81       	ldd	r24, Z+1	; 0x01
    1b2a:	88 23       	and	r24, r24
    1b2c:	89 f1       	breq	.+98     	; 0x1b90 <__fpcmp_parts_f+0xa2>
    1b2e:	2d c0       	rjmp	.+90     	; 0x1b8a <__fpcmp_parts_f+0x9c>
    1b30:	11 96       	adiw	r26, 0x01	; 1
    1b32:	1c 91       	ld	r17, X
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	f1 f0       	breq	.+60     	; 0x1b76 <__fpcmp_parts_f+0x88>
    1b3a:	81 81       	ldd	r24, Z+1	; 0x01
    1b3c:	18 17       	cp	r17, r24
    1b3e:	d9 f4       	brne	.+54     	; 0x1b76 <__fpcmp_parts_f+0x88>
    1b40:	12 96       	adiw	r26, 0x02	; 2
    1b42:	2d 91       	ld	r18, X+
    1b44:	3c 91       	ld	r19, X
    1b46:	13 97       	sbiw	r26, 0x03	; 3
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	82 17       	cp	r24, r18
    1b4e:	93 07       	cpc	r25, r19
    1b50:	94 f0       	brlt	.+36     	; 0x1b76 <__fpcmp_parts_f+0x88>
    1b52:	28 17       	cp	r18, r24
    1b54:	39 07       	cpc	r19, r25
    1b56:	bc f0       	brlt	.+46     	; 0x1b86 <__fpcmp_parts_f+0x98>
    1b58:	14 96       	adiw	r26, 0x04	; 4
    1b5a:	8d 91       	ld	r24, X+
    1b5c:	9d 91       	ld	r25, X+
    1b5e:	0d 90       	ld	r0, X+
    1b60:	bc 91       	ld	r27, X
    1b62:	a0 2d       	mov	r26, r0
    1b64:	24 81       	ldd	r18, Z+4	; 0x04
    1b66:	35 81       	ldd	r19, Z+5	; 0x05
    1b68:	46 81       	ldd	r20, Z+6	; 0x06
    1b6a:	57 81       	ldd	r21, Z+7	; 0x07
    1b6c:	28 17       	cp	r18, r24
    1b6e:	39 07       	cpc	r19, r25
    1b70:	4a 07       	cpc	r20, r26
    1b72:	5b 07       	cpc	r21, r27
    1b74:	18 f4       	brcc	.+6      	; 0x1b7c <__fpcmp_parts_f+0x8e>
    1b76:	11 23       	and	r17, r17
    1b78:	41 f0       	breq	.+16     	; 0x1b8a <__fpcmp_parts_f+0x9c>
    1b7a:	0a c0       	rjmp	.+20     	; 0x1b90 <__fpcmp_parts_f+0xa2>
    1b7c:	82 17       	cp	r24, r18
    1b7e:	93 07       	cpc	r25, r19
    1b80:	a4 07       	cpc	r26, r20
    1b82:	b5 07       	cpc	r27, r21
    1b84:	40 f4       	brcc	.+16     	; 0x1b96 <__fpcmp_parts_f+0xa8>
    1b86:	11 23       	and	r17, r17
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <__fpcmp_parts_f+0xa2>
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <__fpcmp_parts_f+0xac>
    1b90:	6f ef       	ldi	r22, 0xFF	; 255
    1b92:	7f ef       	ldi	r23, 0xFF	; 255
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <__fpcmp_parts_f+0xac>
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	1f 91       	pop	r17
    1b9e:	08 95       	ret

00001ba0 <vfprintf>:
    1ba0:	a1 e1       	ldi	r26, 0x11	; 17
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    1ba6:	fd e0       	ldi	r31, 0x0D	; 13
    1ba8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__>
    1bac:	3c 01       	movw	r6, r24
    1bae:	7f 87       	std	Y+15, r23	; 0x0f
    1bb0:	6e 87       	std	Y+14, r22	; 0x0e
    1bb2:	6a 01       	movw	r12, r20
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	17 82       	std	Z+7, r1	; 0x07
    1bb8:	16 82       	std	Z+6, r1	; 0x06
    1bba:	83 81       	ldd	r24, Z+3	; 0x03
    1bbc:	81 fd       	sbrc	r24, 1
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x26>
    1bc0:	6f ef       	ldi	r22, 0xFF	; 255
    1bc2:	7f ef       	ldi	r23, 0xFF	; 255
    1bc4:	6f c3       	rjmp	.+1758   	; 0x22a4 <vfprintf+0x704>
    1bc6:	9e 01       	movw	r18, r28
    1bc8:	2f 5f       	subi	r18, 0xFF	; 255
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255
    1bcc:	39 8b       	std	Y+17, r19	; 0x11
    1bce:	28 8b       	std	Y+16, r18	; 0x10
    1bd0:	f3 01       	movw	r30, r6
    1bd2:	23 81       	ldd	r18, Z+3	; 0x03
    1bd4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bd6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bd8:	23 fd       	sbrc	r18, 3
    1bda:	85 91       	lpm	r24, Z+
    1bdc:	23 ff       	sbrs	r18, 3
    1bde:	81 91       	ld	r24, Z+
    1be0:	ff 87       	std	Y+15, r31	; 0x0f
    1be2:	ee 87       	std	Y+14, r30	; 0x0e
    1be4:	88 23       	and	r24, r24
    1be6:	09 f4       	brne	.+2      	; 0x1bea <vfprintf+0x4a>
    1be8:	5a c3       	rjmp	.+1716   	; 0x229e <vfprintf+0x6fe>
    1bea:	85 32       	cpi	r24, 0x25	; 37
    1bec:	51 f4       	brne	.+20     	; 0x1c02 <vfprintf+0x62>
    1bee:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bf0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bf2:	23 fd       	sbrc	r18, 3
    1bf4:	85 91       	lpm	r24, Z+
    1bf6:	23 ff       	sbrs	r18, 3
    1bf8:	81 91       	ld	r24, Z+
    1bfa:	ff 87       	std	Y+15, r31	; 0x0f
    1bfc:	ee 87       	std	Y+14, r30	; 0x0e
    1bfe:	85 32       	cpi	r24, 0x25	; 37
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <vfprintf+0x6c>
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	b3 01       	movw	r22, r6
    1c06:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1c0a:	e2 cf       	rjmp	.-60     	; 0x1bd0 <vfprintf+0x30>
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
    1c10:	88 24       	eor	r8, r8
    1c12:	99 24       	eor	r9, r9
    1c14:	10 32       	cpi	r17, 0x20	; 32
    1c16:	b0 f4       	brcc	.+44     	; 0x1c44 <vfprintf+0xa4>
    1c18:	9b 32       	cpi	r25, 0x2B	; 43
    1c1a:	69 f0       	breq	.+26     	; 0x1c36 <vfprintf+0x96>
    1c1c:	9c 32       	cpi	r25, 0x2C	; 44
    1c1e:	28 f4       	brcc	.+10     	; 0x1c2a <vfprintf+0x8a>
    1c20:	90 32       	cpi	r25, 0x20	; 32
    1c22:	51 f0       	breq	.+20     	; 0x1c38 <vfprintf+0x98>
    1c24:	93 32       	cpi	r25, 0x23	; 35
    1c26:	71 f4       	brne	.+28     	; 0x1c44 <vfprintf+0xa4>
    1c28:	0b c0       	rjmp	.+22     	; 0x1c40 <vfprintf+0xa0>
    1c2a:	9d 32       	cpi	r25, 0x2D	; 45
    1c2c:	39 f0       	breq	.+14     	; 0x1c3c <vfprintf+0x9c>
    1c2e:	90 33       	cpi	r25, 0x30	; 48
    1c30:	49 f4       	brne	.+18     	; 0x1c44 <vfprintf+0xa4>
    1c32:	11 60       	ori	r17, 0x01	; 1
    1c34:	28 c0       	rjmp	.+80     	; 0x1c86 <vfprintf+0xe6>
    1c36:	12 60       	ori	r17, 0x02	; 2
    1c38:	14 60       	ori	r17, 0x04	; 4
    1c3a:	25 c0       	rjmp	.+74     	; 0x1c86 <vfprintf+0xe6>
    1c3c:	18 60       	ori	r17, 0x08	; 8
    1c3e:	23 c0       	rjmp	.+70     	; 0x1c86 <vfprintf+0xe6>
    1c40:	10 61       	ori	r17, 0x10	; 16
    1c42:	21 c0       	rjmp	.+66     	; 0x1c86 <vfprintf+0xe6>
    1c44:	17 fd       	sbrc	r17, 7
    1c46:	2a c0       	rjmp	.+84     	; 0x1c9c <vfprintf+0xfc>
    1c48:	89 2f       	mov	r24, r25
    1c4a:	80 53       	subi	r24, 0x30	; 48
    1c4c:	8a 30       	cpi	r24, 0x0A	; 10
    1c4e:	78 f4       	brcc	.+30     	; 0x1c6e <vfprintf+0xce>
    1c50:	16 ff       	sbrs	r17, 6
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0xc0>
    1c54:	fa e0       	ldi	r31, 0x0A	; 10
    1c56:	9f 9e       	mul	r9, r31
    1c58:	90 2c       	mov	r9, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	98 0e       	add	r9, r24
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <vfprintf+0xe6>
    1c60:	3a e0       	ldi	r19, 0x0A	; 10
    1c62:	83 9e       	mul	r8, r19
    1c64:	80 2c       	mov	r8, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	88 0e       	add	r8, r24
    1c6a:	10 62       	ori	r17, 0x20	; 32
    1c6c:	0c c0       	rjmp	.+24     	; 0x1c86 <vfprintf+0xe6>
    1c6e:	9e 32       	cpi	r25, 0x2E	; 46
    1c70:	21 f4       	brne	.+8      	; 0x1c7a <vfprintf+0xda>
    1c72:	16 fd       	sbrc	r17, 6
    1c74:	14 c3       	rjmp	.+1576   	; 0x229e <vfprintf+0x6fe>
    1c76:	10 64       	ori	r17, 0x40	; 64
    1c78:	06 c0       	rjmp	.+12     	; 0x1c86 <vfprintf+0xe6>
    1c7a:	9c 36       	cpi	r25, 0x6C	; 108
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <vfprintf+0xe2>
    1c7e:	10 68       	ori	r17, 0x80	; 128
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0xe6>
    1c82:	98 36       	cpi	r25, 0x68	; 104
    1c84:	59 f4       	brne	.+22     	; 0x1c9c <vfprintf+0xfc>
    1c86:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c88:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c8a:	23 fd       	sbrc	r18, 3
    1c8c:	95 91       	lpm	r25, Z+
    1c8e:	23 ff       	sbrs	r18, 3
    1c90:	91 91       	ld	r25, Z+
    1c92:	ff 87       	std	Y+15, r31	; 0x0f
    1c94:	ee 87       	std	Y+14, r30	; 0x0e
    1c96:	99 23       	and	r25, r25
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <vfprintf+0xfc>
    1c9a:	bc cf       	rjmp	.-136    	; 0x1c14 <vfprintf+0x74>
    1c9c:	89 2f       	mov	r24, r25
    1c9e:	85 54       	subi	r24, 0x45	; 69
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	20 f4       	brcc	.+8      	; 0x1cac <vfprintf+0x10c>
    1ca4:	81 2f       	mov	r24, r17
    1ca6:	80 61       	ori	r24, 0x10	; 16
    1ca8:	90 5e       	subi	r25, 0xE0	; 224
    1caa:	07 c0       	rjmp	.+14     	; 0x1cba <vfprintf+0x11a>
    1cac:	89 2f       	mov	r24, r25
    1cae:	85 56       	subi	r24, 0x65	; 101
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <vfprintf+0x116>
    1cb4:	9f c1       	rjmp	.+830    	; 0x1ff4 <vfprintf+0x454>
    1cb6:	81 2f       	mov	r24, r17
    1cb8:	8f 7e       	andi	r24, 0xEF	; 239
    1cba:	86 fd       	sbrc	r24, 6
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <vfprintf+0x122>
    1cbe:	76 e0       	ldi	r23, 0x06	; 6
    1cc0:	97 2e       	mov	r9, r23
    1cc2:	6f e3       	ldi	r22, 0x3F	; 63
    1cc4:	f6 2e       	mov	r15, r22
    1cc6:	f8 22       	and	r15, r24
    1cc8:	95 36       	cpi	r25, 0x65	; 101
    1cca:	19 f4       	brne	.+6      	; 0x1cd2 <vfprintf+0x132>
    1ccc:	f0 e4       	ldi	r31, 0x40	; 64
    1cce:	ff 2a       	or	r15, r31
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <vfprintf+0x140>
    1cd2:	96 36       	cpi	r25, 0x66	; 102
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <vfprintf+0x13c>
    1cd6:	20 e8       	ldi	r18, 0x80	; 128
    1cd8:	f2 2a       	or	r15, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <vfprintf+0x140>
    1cdc:	91 10       	cpse	r9, r1
    1cde:	9a 94       	dec	r9
    1ce0:	f7 fe       	sbrs	r15, 7
    1ce2:	0a c0       	rjmp	.+20     	; 0x1cf8 <vfprintf+0x158>
    1ce4:	3b e3       	ldi	r19, 0x3B	; 59
    1ce6:	39 15       	cp	r19, r9
    1ce8:	18 f4       	brcc	.+6      	; 0x1cf0 <vfprintf+0x150>
    1cea:	5c e3       	ldi	r21, 0x3C	; 60
    1cec:	b5 2e       	mov	r11, r21
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x154>
    1cf0:	b9 2c       	mov	r11, r9
    1cf2:	b3 94       	inc	r11
    1cf4:	27 e0       	ldi	r18, 0x07	; 7
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <vfprintf+0x16a>
    1cf8:	47 e0       	ldi	r20, 0x07	; 7
    1cfa:	49 15       	cp	r20, r9
    1cfc:	20 f4       	brcc	.+8      	; 0x1d06 <vfprintf+0x166>
    1cfe:	bb 24       	eor	r11, r11
    1d00:	47 e0       	ldi	r20, 0x07	; 7
    1d02:	94 2e       	mov	r9, r20
    1d04:	f7 cf       	rjmp	.-18     	; 0x1cf4 <vfprintf+0x154>
    1d06:	29 2d       	mov	r18, r9
    1d08:	bb 24       	eor	r11, r11
    1d0a:	c6 01       	movw	r24, r12
    1d0c:	04 96       	adiw	r24, 0x04	; 4
    1d0e:	9d 87       	std	Y+13, r25	; 0x0d
    1d10:	8c 87       	std	Y+12, r24	; 0x0c
    1d12:	f6 01       	movw	r30, r12
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	ae 01       	movw	r20, r28
    1d1e:	4f 5f       	subi	r20, 0xFF	; 255
    1d20:	5f 4f       	sbci	r21, 0xFF	; 255
    1d22:	0b 2d       	mov	r16, r11
    1d24:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__ftoa_engine>
    1d28:	6c 01       	movw	r12, r24
    1d2a:	09 81       	ldd	r16, Y+1	; 0x01
    1d2c:	20 2e       	mov	r2, r16
    1d2e:	33 24       	eor	r3, r3
    1d30:	00 ff       	sbrs	r16, 0
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <vfprintf+0x19c>
    1d34:	03 fd       	sbrc	r16, 3
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <vfprintf+0x19c>
    1d38:	1d e2       	ldi	r17, 0x2D	; 45
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <vfprintf+0x1ae>
    1d3c:	f1 fe       	sbrs	r15, 1
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0x1a4>
    1d40:	1b e2       	ldi	r17, 0x2B	; 43
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <vfprintf+0x1ae>
    1d44:	f2 fc       	sbrc	r15, 2
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <vfprintf+0x1ac>
    1d48:	10 e0       	ldi	r17, 0x00	; 0
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <vfprintf+0x1ae>
    1d4c:	10 e2       	ldi	r17, 0x20	; 32
    1d4e:	c1 01       	movw	r24, r2
    1d50:	8c 70       	andi	r24, 0x0C	; 12
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	89 2b       	or	r24, r25
    1d56:	b9 f1       	breq	.+110    	; 0x1dc6 <vfprintf+0x226>
    1d58:	11 23       	and	r17, r17
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <vfprintf+0x1c0>
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <vfprintf+0x1c2>
    1d60:	84 e0       	ldi	r24, 0x04	; 4
    1d62:	88 15       	cp	r24, r8
    1d64:	10 f0       	brcs	.+4      	; 0x1d6a <vfprintf+0x1ca>
    1d66:	88 24       	eor	r8, r8
    1d68:	0a c0       	rjmp	.+20     	; 0x1d7e <vfprintf+0x1de>
    1d6a:	88 1a       	sub	r8, r24
    1d6c:	f3 fc       	sbrc	r15, 3
    1d6e:	07 c0       	rjmp	.+14     	; 0x1d7e <vfprintf+0x1de>
    1d70:	80 e2       	ldi	r24, 0x20	; 32
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	b3 01       	movw	r22, r6
    1d76:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1d7a:	8a 94       	dec	r8
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <vfprintf+0x1d0>
    1d7e:	11 23       	and	r17, r17
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <vfprintf+0x1ec>
    1d82:	81 2f       	mov	r24, r17
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	b3 01       	movw	r22, r6
    1d88:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1d8c:	23 fe       	sbrs	r2, 3
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <vfprintf+0x1f6>
    1d90:	00 e7       	ldi	r16, 0x70	; 112
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	0e c0       	rjmp	.+28     	; 0x1db2 <vfprintf+0x212>
    1d96:	04 e7       	ldi	r16, 0x74	; 116
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	0b c0       	rjmp	.+22     	; 0x1db2 <vfprintf+0x212>
    1d9c:	e1 14       	cp	r14, r1
    1d9e:	f1 04       	cpc	r15, r1
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <vfprintf+0x204>
    1da2:	80 52       	subi	r24, 0x20	; 32
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	b3 01       	movw	r22, r6
    1da8:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1dac:	0f 5f       	subi	r16, 0xFF	; 255
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <vfprintf+0x21c>
    1db2:	ef 2c       	mov	r14, r15
    1db4:	ff 24       	eor	r15, r15
    1db6:	f0 e1       	ldi	r31, 0x10	; 16
    1db8:	ef 22       	and	r14, r31
    1dba:	ff 24       	eor	r15, r15
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	84 91       	lpm	r24, Z+
    1dc0:	88 23       	and	r24, r24
    1dc2:	61 f7       	brne	.-40     	; 0x1d9c <vfprintf+0x1fc>
    1dc4:	14 c1       	rjmp	.+552    	; 0x1fee <vfprintf+0x44e>
    1dc6:	f7 fe       	sbrs	r15, 7
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <vfprintf+0x24e>
    1dca:	bc 0c       	add	r11, r12
    1dcc:	24 fe       	sbrs	r2, 4
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <vfprintf+0x238>
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	81 33       	cpi	r24, 0x31	; 49
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <vfprintf+0x238>
    1dd6:	ba 94       	dec	r11
    1dd8:	1b 14       	cp	r1, r11
    1dda:	1c f0       	brlt	.+6      	; 0x1de2 <vfprintf+0x242>
    1ddc:	bb 24       	eor	r11, r11
    1dde:	b3 94       	inc	r11
    1de0:	2d c0       	rjmp	.+90     	; 0x1e3c <vfprintf+0x29c>
    1de2:	f8 e0       	ldi	r31, 0x08	; 8
    1de4:	fb 15       	cp	r31, r11
    1de6:	50 f5       	brcc	.+84     	; 0x1e3c <vfprintf+0x29c>
    1de8:	38 e0       	ldi	r19, 0x08	; 8
    1dea:	b3 2e       	mov	r11, r19
    1dec:	27 c0       	rjmp	.+78     	; 0x1e3c <vfprintf+0x29c>
    1dee:	f6 fc       	sbrc	r15, 6
    1df0:	25 c0       	rjmp	.+74     	; 0x1e3c <vfprintf+0x29c>
    1df2:	89 2d       	mov	r24, r9
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	8c 15       	cp	r24, r12
    1df8:	9d 05       	cpc	r25, r13
    1dfa:	4c f0       	brlt	.+18     	; 0x1e0e <vfprintf+0x26e>
    1dfc:	2c ef       	ldi	r18, 0xFC	; 252
    1dfe:	c2 16       	cp	r12, r18
    1e00:	2f ef       	ldi	r18, 0xFF	; 255
    1e02:	d2 06       	cpc	r13, r18
    1e04:	24 f0       	brlt	.+8      	; 0x1e0e <vfprintf+0x26e>
    1e06:	30 e8       	ldi	r19, 0x80	; 128
    1e08:	f3 2a       	or	r15, r19
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <vfprintf+0x26e>
    1e0c:	9a 94       	dec	r9
    1e0e:	99 20       	and	r9, r9
    1e10:	49 f0       	breq	.+18     	; 0x1e24 <vfprintf+0x284>
    1e12:	e2 e0       	ldi	r30, 0x02	; 2
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	ec 0f       	add	r30, r28
    1e18:	fd 1f       	adc	r31, r29
    1e1a:	e9 0d       	add	r30, r9
    1e1c:	f1 1d       	adc	r31, r1
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 33       	cpi	r24, 0x30	; 48
    1e22:	a1 f3       	breq	.-24     	; 0x1e0c <vfprintf+0x26c>
    1e24:	f7 fe       	sbrs	r15, 7
    1e26:	0a c0       	rjmp	.+20     	; 0x1e3c <vfprintf+0x29c>
    1e28:	b9 2c       	mov	r11, r9
    1e2a:	b3 94       	inc	r11
    1e2c:	89 2d       	mov	r24, r9
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	c8 16       	cp	r12, r24
    1e32:	d9 06       	cpc	r13, r25
    1e34:	14 f0       	brlt	.+4      	; 0x1e3a <vfprintf+0x29a>
    1e36:	99 24       	eor	r9, r9
    1e38:	01 c0       	rjmp	.+2      	; 0x1e3c <vfprintf+0x29c>
    1e3a:	9c 18       	sub	r9, r12
    1e3c:	f7 fc       	sbrc	r15, 7
    1e3e:	03 c0       	rjmp	.+6      	; 0x1e46 <vfprintf+0x2a6>
    1e40:	25 e0       	ldi	r18, 0x05	; 5
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	09 c0       	rjmp	.+18     	; 0x1e58 <vfprintf+0x2b8>
    1e46:	1c 14       	cp	r1, r12
    1e48:	1d 04       	cpc	r1, r13
    1e4a:	1c f0       	brlt	.+6      	; 0x1e52 <vfprintf+0x2b2>
    1e4c:	21 e0       	ldi	r18, 0x01	; 1
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <vfprintf+0x2b8>
    1e52:	96 01       	movw	r18, r12
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	11 23       	and	r17, r17
    1e5a:	11 f0       	breq	.+4      	; 0x1e60 <vfprintf+0x2c0>
    1e5c:	2f 5f       	subi	r18, 0xFF	; 255
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	99 20       	and	r9, r9
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <vfprintf+0x2ce>
    1e64:	89 2d       	mov	r24, r9
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	28 0f       	add	r18, r24
    1e6c:	39 1f       	adc	r19, r25
    1e6e:	88 2d       	mov	r24, r8
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	28 17       	cp	r18, r24
    1e74:	39 07       	cpc	r19, r25
    1e76:	14 f0       	brlt	.+4      	; 0x1e7c <vfprintf+0x2dc>
    1e78:	88 24       	eor	r8, r8
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <vfprintf+0x2de>
    1e7c:	82 1a       	sub	r8, r18
    1e7e:	4f 2c       	mov	r4, r15
    1e80:	55 24       	eor	r5, r5
    1e82:	c2 01       	movw	r24, r4
    1e84:	89 70       	andi	r24, 0x09	; 9
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	89 2b       	or	r24, r25
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <vfprintf+0x2fa>
    1e8c:	08 c0       	rjmp	.+16     	; 0x1e9e <vfprintf+0x2fe>
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	b3 01       	movw	r22, r6
    1e94:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1e98:	8a 94       	dec	r8
    1e9a:	88 20       	and	r8, r8
    1e9c:	c1 f7       	brne	.-16     	; 0x1e8e <vfprintf+0x2ee>
    1e9e:	11 23       	and	r17, r17
    1ea0:	29 f0       	breq	.+10     	; 0x1eac <vfprintf+0x30c>
    1ea2:	81 2f       	mov	r24, r17
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	b3 01       	movw	r22, r6
    1ea8:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1eac:	43 fe       	sbrs	r4, 3
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <vfprintf+0x31e>
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <vfprintf+0x322>
    1eb2:	80 e3       	ldi	r24, 0x30	; 48
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	b3 01       	movw	r22, r6
    1eb8:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1ebc:	8a 94       	dec	r8
    1ebe:	88 20       	and	r8, r8
    1ec0:	c1 f7       	brne	.-16     	; 0x1eb2 <vfprintf+0x312>
    1ec2:	f7 fe       	sbrs	r15, 7
    1ec4:	46 c0       	rjmp	.+140    	; 0x1f52 <vfprintf+0x3b2>
    1ec6:	86 01       	movw	r16, r12
    1ec8:	d7 fe       	sbrs	r13, 7
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <vfprintf+0x330>
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	76 01       	movw	r14, r12
    1ed2:	08 94       	sec
    1ed4:	e1 1c       	adc	r14, r1
    1ed6:	f1 1c       	adc	r15, r1
    1ed8:	e0 1a       	sub	r14, r16
    1eda:	f1 0a       	sbc	r15, r17
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	4c 0f       	add	r20, r28
    1ee2:	5d 1f       	adc	r21, r29
    1ee4:	e4 0e       	add	r14, r20
    1ee6:	f5 1e       	adc	r15, r21
    1ee8:	26 01       	movw	r4, r12
    1eea:	4b 18       	sub	r4, r11
    1eec:	51 08       	sbc	r5, r1
    1eee:	89 2d       	mov	r24, r9
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	aa 24       	eor	r10, r10
    1ef4:	bb 24       	eor	r11, r11
    1ef6:	a8 1a       	sub	r10, r24
    1ef8:	b9 0a       	sbc	r11, r25
    1efa:	5f ef       	ldi	r21, 0xFF	; 255
    1efc:	0f 3f       	cpi	r16, 0xFF	; 255
    1efe:	15 07       	cpc	r17, r21
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <vfprintf+0x36c>
    1f02:	8e e2       	ldi	r24, 0x2E	; 46
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	b3 01       	movw	r22, r6
    1f08:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1f0c:	c0 16       	cp	r12, r16
    1f0e:	d1 06       	cpc	r13, r17
    1f10:	34 f0       	brlt	.+12     	; 0x1f1e <vfprintf+0x37e>
    1f12:	40 16       	cp	r4, r16
    1f14:	51 06       	cpc	r5, r17
    1f16:	1c f4       	brge	.+6      	; 0x1f1e <vfprintf+0x37e>
    1f18:	f7 01       	movw	r30, r14
    1f1a:	80 81       	ld	r24, Z
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <vfprintf+0x380>
    1f1e:	80 e3       	ldi	r24, 0x30	; 48
    1f20:	01 50       	subi	r16, 0x01	; 1
    1f22:	10 40       	sbci	r17, 0x00	; 0
    1f24:	08 94       	sec
    1f26:	e1 1c       	adc	r14, r1
    1f28:	f1 1c       	adc	r15, r1
    1f2a:	0a 15       	cp	r16, r10
    1f2c:	1b 05       	cpc	r17, r11
    1f2e:	2c f0       	brlt	.+10     	; 0x1f3a <vfprintf+0x39a>
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	b3 01       	movw	r22, r6
    1f34:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1f38:	e0 cf       	rjmp	.-64     	; 0x1efa <vfprintf+0x35a>
    1f3a:	0c 15       	cp	r16, r12
    1f3c:	1d 05       	cpc	r17, r13
    1f3e:	39 f4       	brne	.+14     	; 0x1f4e <vfprintf+0x3ae>
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	96 33       	cpi	r25, 0x36	; 54
    1f44:	18 f4       	brcc	.+6      	; 0x1f4c <vfprintf+0x3ac>
    1f46:	95 33       	cpi	r25, 0x35	; 53
    1f48:	11 f4       	brne	.+4      	; 0x1f4e <vfprintf+0x3ae>
    1f4a:	24 fe       	sbrs	r2, 4
    1f4c:	81 e3       	ldi	r24, 0x31	; 49
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	4b c0       	rjmp	.+150    	; 0x1fe8 <vfprintf+0x448>
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	81 33       	cpi	r24, 0x31	; 49
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <vfprintf+0x3ba>
    1f58:	0f 7e       	andi	r16, 0xEF	; 239
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	b3 01       	movw	r22, r6
    1f5e:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1f62:	99 20       	and	r9, r9
    1f64:	a1 f0       	breq	.+40     	; 0x1f8e <vfprintf+0x3ee>
    1f66:	8e e2       	ldi	r24, 0x2E	; 46
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	b3 01       	movw	r22, r6
    1f6c:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1f70:	12 e0       	ldi	r17, 0x02	; 2
    1f72:	e1 e0       	ldi	r30, 0x01	; 1
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	ec 0f       	add	r30, r28
    1f78:	fd 1f       	adc	r31, r29
    1f7a:	e1 0f       	add	r30, r17
    1f7c:	f1 1d       	adc	r31, r1
    1f7e:	1f 5f       	subi	r17, 0xFF	; 255
    1f80:	80 81       	ld	r24, Z
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b3 01       	movw	r22, r6
    1f86:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1f8a:	9a 94       	dec	r9
    1f8c:	91 f7       	brne	.-28     	; 0x1f72 <vfprintf+0x3d2>
    1f8e:	44 fc       	sbrc	r4, 4
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <vfprintf+0x3f8>
    1f92:	85 e6       	ldi	r24, 0x65	; 101
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <vfprintf+0x3fc>
    1f98:	85 e4       	ldi	r24, 0x45	; 69
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	b3 01       	movw	r22, r6
    1f9e:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1fa2:	d7 fc       	sbrc	r13, 7
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <vfprintf+0x410>
    1fa6:	c1 14       	cp	r12, r1
    1fa8:	d1 04       	cpc	r13, r1
    1faa:	41 f4       	brne	.+16     	; 0x1fbc <vfprintf+0x41c>
    1fac:	04 ff       	sbrs	r16, 4
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <vfprintf+0x41c>
    1fb0:	d0 94       	com	r13
    1fb2:	c1 94       	neg	r12
    1fb4:	d1 08       	sbc	r13, r1
    1fb6:	d3 94       	inc	r13
    1fb8:	8d e2       	ldi	r24, 0x2D	; 45
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <vfprintf+0x41e>
    1fbc:	8b e2       	ldi	r24, 0x2B	; 43
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b3 01       	movw	r22, r6
    1fc2:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1fc6:	80 e3       	ldi	r24, 0x30	; 48
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <vfprintf+0x434>
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	26 ef       	ldi	r18, 0xF6	; 246
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	c2 0e       	add	r12, r18
    1fd2:	d3 1e       	adc	r13, r19
    1fd4:	3a e0       	ldi	r19, 0x0A	; 10
    1fd6:	c3 16       	cp	r12, r19
    1fd8:	d1 04       	cpc	r13, r1
    1fda:	bc f7       	brge	.-18     	; 0x1fca <vfprintf+0x42a>
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	b3 01       	movw	r22, r6
    1fe0:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1fe4:	c6 01       	movw	r24, r12
    1fe6:	c0 96       	adiw	r24, 0x30	; 48
    1fe8:	b3 01       	movw	r22, r6
    1fea:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    1fee:	cc 84       	ldd	r12, Y+12	; 0x0c
    1ff0:	dd 84       	ldd	r13, Y+13	; 0x0d
    1ff2:	52 c1       	rjmp	.+676    	; 0x2298 <vfprintf+0x6f8>
    1ff4:	93 36       	cpi	r25, 0x63	; 99
    1ff6:	31 f0       	breq	.+12     	; 0x2004 <vfprintf+0x464>
    1ff8:	93 37       	cpi	r25, 0x73	; 115
    1ffa:	99 f0       	breq	.+38     	; 0x2022 <vfprintf+0x482>
    1ffc:	93 35       	cpi	r25, 0x53	; 83
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <vfprintf+0x462>
    2000:	59 c0       	rjmp	.+178    	; 0x20b4 <vfprintf+0x514>
    2002:	23 c0       	rjmp	.+70     	; 0x204a <vfprintf+0x4aa>
    2004:	f6 01       	movw	r30, r12
    2006:	80 81       	ld	r24, Z
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	5e 01       	movw	r10, r28
    200c:	08 94       	sec
    200e:	a1 1c       	adc	r10, r1
    2010:	b1 1c       	adc	r11, r1
    2012:	22 e0       	ldi	r18, 0x02	; 2
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	c2 0e       	add	r12, r18
    2018:	d3 1e       	adc	r13, r19
    201a:	21 e0       	ldi	r18, 0x01	; 1
    201c:	e2 2e       	mov	r14, r18
    201e:	f1 2c       	mov	r15, r1
    2020:	12 c0       	rjmp	.+36     	; 0x2046 <vfprintf+0x4a6>
    2022:	f6 01       	movw	r30, r12
    2024:	a0 80       	ld	r10, Z
    2026:	b1 80       	ldd	r11, Z+1	; 0x01
    2028:	16 fd       	sbrc	r17, 6
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <vfprintf+0x492>
    202c:	6f ef       	ldi	r22, 0xFF	; 255
    202e:	7f ef       	ldi	r23, 0xFF	; 255
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <vfprintf+0x496>
    2032:	69 2d       	mov	r22, r9
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	22 e0       	ldi	r18, 0x02	; 2
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	c2 0e       	add	r12, r18
    203c:	d3 1e       	adc	r13, r19
    203e:	c5 01       	movw	r24, r10
    2040:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <strnlen>
    2044:	7c 01       	movw	r14, r24
    2046:	1f 77       	andi	r17, 0x7F	; 127
    2048:	13 c0       	rjmp	.+38     	; 0x2070 <vfprintf+0x4d0>
    204a:	f6 01       	movw	r30, r12
    204c:	a0 80       	ld	r10, Z
    204e:	b1 80       	ldd	r11, Z+1	; 0x01
    2050:	16 fd       	sbrc	r17, 6
    2052:	03 c0       	rjmp	.+6      	; 0x205a <vfprintf+0x4ba>
    2054:	6f ef       	ldi	r22, 0xFF	; 255
    2056:	7f ef       	ldi	r23, 0xFF	; 255
    2058:	02 c0       	rjmp	.+4      	; 0x205e <vfprintf+0x4be>
    205a:	69 2d       	mov	r22, r9
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	22 e0       	ldi	r18, 0x02	; 2
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	c2 0e       	add	r12, r18
    2064:	d3 1e       	adc	r13, r19
    2066:	c5 01       	movw	r24, r10
    2068:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <strnlen_P>
    206c:	7c 01       	movw	r14, r24
    206e:	10 68       	ori	r17, 0x80	; 128
    2070:	13 ff       	sbrs	r17, 3
    2072:	07 c0       	rjmp	.+14     	; 0x2082 <vfprintf+0x4e2>
    2074:	1b c0       	rjmp	.+54     	; 0x20ac <vfprintf+0x50c>
    2076:	80 e2       	ldi	r24, 0x20	; 32
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	b3 01       	movw	r22, r6
    207c:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    2080:	8a 94       	dec	r8
    2082:	88 2d       	mov	r24, r8
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	e8 16       	cp	r14, r24
    2088:	f9 06       	cpc	r15, r25
    208a:	a8 f3       	brcs	.-22     	; 0x2076 <vfprintf+0x4d6>
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <vfprintf+0x50c>
    208e:	f5 01       	movw	r30, r10
    2090:	17 fd       	sbrc	r17, 7
    2092:	85 91       	lpm	r24, Z+
    2094:	17 ff       	sbrs	r17, 7
    2096:	81 91       	ld	r24, Z+
    2098:	5f 01       	movw	r10, r30
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	b3 01       	movw	r22, r6
    209e:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    20a2:	81 10       	cpse	r8, r1
    20a4:	8a 94       	dec	r8
    20a6:	08 94       	sec
    20a8:	e1 08       	sbc	r14, r1
    20aa:	f1 08       	sbc	r15, r1
    20ac:	e1 14       	cp	r14, r1
    20ae:	f1 04       	cpc	r15, r1
    20b0:	71 f7       	brne	.-36     	; 0x208e <vfprintf+0x4ee>
    20b2:	f2 c0       	rjmp	.+484    	; 0x2298 <vfprintf+0x6f8>
    20b4:	94 36       	cpi	r25, 0x64	; 100
    20b6:	11 f0       	breq	.+4      	; 0x20bc <vfprintf+0x51c>
    20b8:	99 36       	cpi	r25, 0x69	; 105
    20ba:	89 f5       	brne	.+98     	; 0x211e <vfprintf+0x57e>
    20bc:	17 ff       	sbrs	r17, 7
    20be:	08 c0       	rjmp	.+16     	; 0x20d0 <vfprintf+0x530>
    20c0:	f6 01       	movw	r30, r12
    20c2:	20 81       	ld	r18, Z
    20c4:	31 81       	ldd	r19, Z+1	; 0x01
    20c6:	42 81       	ldd	r20, Z+2	; 0x02
    20c8:	53 81       	ldd	r21, Z+3	; 0x03
    20ca:	84 e0       	ldi	r24, 0x04	; 4
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <vfprintf+0x544>
    20d0:	f6 01       	movw	r30, r12
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	9c 01       	movw	r18, r24
    20d8:	44 27       	eor	r20, r20
    20da:	37 fd       	sbrc	r19, 7
    20dc:	40 95       	com	r20
    20de:	54 2f       	mov	r21, r20
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	c8 0e       	add	r12, r24
    20e6:	d9 1e       	adc	r13, r25
    20e8:	9f e6       	ldi	r25, 0x6F	; 111
    20ea:	f9 2e       	mov	r15, r25
    20ec:	f1 22       	and	r15, r17
    20ee:	57 ff       	sbrs	r21, 7
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <vfprintf+0x564>
    20f2:	50 95       	com	r21
    20f4:	40 95       	com	r20
    20f6:	30 95       	com	r19
    20f8:	21 95       	neg	r18
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	4f 4f       	sbci	r20, 0xFF	; 255
    20fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2100:	90 e8       	ldi	r25, 0x80	; 128
    2102:	f9 2a       	or	r15, r25
    2104:	ca 01       	movw	r24, r20
    2106:	b9 01       	movw	r22, r18
    2108:	ae 01       	movw	r20, r28
    210a:	4f 5f       	subi	r20, 0xFF	; 255
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	0e 94 bd 18 	call	0x317a	; 0x317a <__ultoa_invert>
    2116:	e8 2e       	mov	r14, r24
    2118:	e8 89       	ldd	r30, Y+16	; 0x10
    211a:	ee 1a       	sub	r14, r30
    211c:	41 c0       	rjmp	.+130    	; 0x21a0 <vfprintf+0x600>
    211e:	95 37       	cpi	r25, 0x75	; 117
    2120:	21 f4       	brne	.+8      	; 0x212a <vfprintf+0x58a>
    2122:	1f 7e       	andi	r17, 0xEF	; 239
    2124:	2a e0       	ldi	r18, 0x0A	; 10
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	1c c0       	rjmp	.+56     	; 0x2162 <vfprintf+0x5c2>
    212a:	19 7f       	andi	r17, 0xF9	; 249
    212c:	9f 36       	cpi	r25, 0x6F	; 111
    212e:	61 f0       	breq	.+24     	; 0x2148 <vfprintf+0x5a8>
    2130:	90 37       	cpi	r25, 0x70	; 112
    2132:	20 f4       	brcc	.+8      	; 0x213c <vfprintf+0x59c>
    2134:	98 35       	cpi	r25, 0x58	; 88
    2136:	09 f0       	breq	.+2      	; 0x213a <vfprintf+0x59a>
    2138:	b2 c0       	rjmp	.+356    	; 0x229e <vfprintf+0x6fe>
    213a:	0f c0       	rjmp	.+30     	; 0x215a <vfprintf+0x5ba>
    213c:	90 37       	cpi	r25, 0x70	; 112
    213e:	39 f0       	breq	.+14     	; 0x214e <vfprintf+0x5ae>
    2140:	98 37       	cpi	r25, 0x78	; 120
    2142:	09 f0       	breq	.+2      	; 0x2146 <vfprintf+0x5a6>
    2144:	ac c0       	rjmp	.+344    	; 0x229e <vfprintf+0x6fe>
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <vfprintf+0x5b0>
    2148:	28 e0       	ldi	r18, 0x08	; 8
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	0a c0       	rjmp	.+20     	; 0x2162 <vfprintf+0x5c2>
    214e:	10 61       	ori	r17, 0x10	; 16
    2150:	14 fd       	sbrc	r17, 4
    2152:	14 60       	ori	r17, 0x04	; 4
    2154:	20 e1       	ldi	r18, 0x10	; 16
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <vfprintf+0x5c2>
    215a:	14 fd       	sbrc	r17, 4
    215c:	16 60       	ori	r17, 0x06	; 6
    215e:	20 e1       	ldi	r18, 0x10	; 16
    2160:	32 e0       	ldi	r19, 0x02	; 2
    2162:	17 ff       	sbrs	r17, 7
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <vfprintf+0x5d6>
    2166:	f6 01       	movw	r30, r12
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	44 e0       	ldi	r20, 0x04	; 4
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <vfprintf+0x5e6>
    2176:	f6 01       	movw	r30, r12
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	bc 01       	movw	r22, r24
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	42 e0       	ldi	r20, 0x02	; 2
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	c4 0e       	add	r12, r20
    2188:	d5 1e       	adc	r13, r21
    218a:	ae 01       	movw	r20, r28
    218c:	4f 5f       	subi	r20, 0xFF	; 255
    218e:	5f 4f       	sbci	r21, 0xFF	; 255
    2190:	0e 94 bd 18 	call	0x317a	; 0x317a <__ultoa_invert>
    2194:	e8 2e       	mov	r14, r24
    2196:	58 89       	ldd	r21, Y+16	; 0x10
    2198:	e5 1a       	sub	r14, r21
    219a:	8f e7       	ldi	r24, 0x7F	; 127
    219c:	f8 2e       	mov	r15, r24
    219e:	f1 22       	and	r15, r17
    21a0:	f6 fe       	sbrs	r15, 6
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <vfprintf+0x61a>
    21a4:	8e ef       	ldi	r24, 0xFE	; 254
    21a6:	f8 22       	and	r15, r24
    21a8:	e9 14       	cp	r14, r9
    21aa:	38 f4       	brcc	.+14     	; 0x21ba <vfprintf+0x61a>
    21ac:	f4 fe       	sbrs	r15, 4
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <vfprintf+0x61e>
    21b0:	f2 fc       	sbrc	r15, 2
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <vfprintf+0x61e>
    21b4:	9f ee       	ldi	r25, 0xEF	; 239
    21b6:	f9 22       	and	r15, r25
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <vfprintf+0x61e>
    21ba:	1e 2d       	mov	r17, r14
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <vfprintf+0x620>
    21be:	19 2d       	mov	r17, r9
    21c0:	f4 fe       	sbrs	r15, 4
    21c2:	0d c0       	rjmp	.+26     	; 0x21de <vfprintf+0x63e>
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 0d       	add	r30, r14
    21c8:	f1 1d       	adc	r31, r1
    21ca:	80 81       	ld	r24, Z
    21cc:	80 33       	cpi	r24, 0x30	; 48
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <vfprintf+0x636>
    21d0:	e9 ee       	ldi	r30, 0xE9	; 233
    21d2:	fe 22       	and	r15, r30
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <vfprintf+0x646>
    21d6:	1f 5f       	subi	r17, 0xFF	; 255
    21d8:	f2 fe       	sbrs	r15, 2
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <vfprintf+0x646>
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <vfprintf+0x644>
    21de:	8f 2d       	mov	r24, r15
    21e0:	86 78       	andi	r24, 0x86	; 134
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <vfprintf+0x646>
    21e4:	1f 5f       	subi	r17, 0xFF	; 255
    21e6:	0f 2d       	mov	r16, r15
    21e8:	f3 fc       	sbrc	r15, 3
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <vfprintf+0x674>
    21ec:	f0 fe       	sbrs	r15, 0
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <vfprintf+0x66e>
    21f0:	18 15       	cp	r17, r8
    21f2:	10 f0       	brcs	.+4      	; 0x21f8 <vfprintf+0x658>
    21f4:	9e 2c       	mov	r9, r14
    21f6:	0b c0       	rjmp	.+22     	; 0x220e <vfprintf+0x66e>
    21f8:	9e 2c       	mov	r9, r14
    21fa:	98 0c       	add	r9, r8
    21fc:	91 1a       	sub	r9, r17
    21fe:	18 2d       	mov	r17, r8
    2200:	06 c0       	rjmp	.+12     	; 0x220e <vfprintf+0x66e>
    2202:	80 e2       	ldi	r24, 0x20	; 32
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	b3 01       	movw	r22, r6
    2208:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    220c:	1f 5f       	subi	r17, 0xFF	; 255
    220e:	18 15       	cp	r17, r8
    2210:	c0 f3       	brcs	.-16     	; 0x2202 <vfprintf+0x662>
    2212:	04 c0       	rjmp	.+8      	; 0x221c <vfprintf+0x67c>
    2214:	18 15       	cp	r17, r8
    2216:	10 f4       	brcc	.+4      	; 0x221c <vfprintf+0x67c>
    2218:	81 1a       	sub	r8, r17
    221a:	01 c0       	rjmp	.+2      	; 0x221e <vfprintf+0x67e>
    221c:	88 24       	eor	r8, r8
    221e:	04 ff       	sbrs	r16, 4
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <vfprintf+0x6a0>
    2222:	80 e3       	ldi	r24, 0x30	; 48
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	b3 01       	movw	r22, r6
    2228:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    222c:	02 ff       	sbrs	r16, 2
    222e:	1d c0       	rjmp	.+58     	; 0x226a <vfprintf+0x6ca>
    2230:	01 fd       	sbrc	r16, 1
    2232:	03 c0       	rjmp	.+6      	; 0x223a <vfprintf+0x69a>
    2234:	88 e7       	ldi	r24, 0x78	; 120
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <vfprintf+0x6b6>
    223a:	88 e5       	ldi	r24, 0x58	; 88
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0b c0       	rjmp	.+22     	; 0x2256 <vfprintf+0x6b6>
    2240:	80 2f       	mov	r24, r16
    2242:	86 78       	andi	r24, 0x86	; 134
    2244:	91 f0       	breq	.+36     	; 0x226a <vfprintf+0x6ca>
    2246:	01 ff       	sbrs	r16, 1
    2248:	02 c0       	rjmp	.+4      	; 0x224e <vfprintf+0x6ae>
    224a:	8b e2       	ldi	r24, 0x2B	; 43
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <vfprintf+0x6b0>
    224e:	80 e2       	ldi	r24, 0x20	; 32
    2250:	f7 fc       	sbrc	r15, 7
    2252:	8d e2       	ldi	r24, 0x2D	; 45
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	b3 01       	movw	r22, r6
    2258:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    225c:	06 c0       	rjmp	.+12     	; 0x226a <vfprintf+0x6ca>
    225e:	80 e3       	ldi	r24, 0x30	; 48
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	b3 01       	movw	r22, r6
    2264:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    2268:	9a 94       	dec	r9
    226a:	e9 14       	cp	r14, r9
    226c:	c0 f3       	brcs	.-16     	; 0x225e <vfprintf+0x6be>
    226e:	ea 94       	dec	r14
    2270:	e1 e0       	ldi	r30, 0x01	; 1
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	ec 0f       	add	r30, r28
    2276:	fd 1f       	adc	r31, r29
    2278:	ee 0d       	add	r30, r14
    227a:	f1 1d       	adc	r31, r1
    227c:	80 81       	ld	r24, Z
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	b3 01       	movw	r22, r6
    2282:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    2286:	ee 20       	and	r14, r14
    2288:	91 f7       	brne	.-28     	; 0x226e <vfprintf+0x6ce>
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <vfprintf+0x6f8>
    228c:	80 e2       	ldi	r24, 0x20	; 32
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	b3 01       	movw	r22, r6
    2292:	0e 94 16 18 	call	0x302c	; 0x302c <fputc>
    2296:	8a 94       	dec	r8
    2298:	88 20       	and	r8, r8
    229a:	c1 f7       	brne	.-16     	; 0x228c <vfprintf+0x6ec>
    229c:	99 cc       	rjmp	.-1742   	; 0x1bd0 <vfprintf+0x30>
    229e:	f3 01       	movw	r30, r6
    22a0:	66 81       	ldd	r22, Z+6	; 0x06
    22a2:	77 81       	ldd	r23, Z+7	; 0x07
    22a4:	cb 01       	movw	r24, r22
    22a6:	61 96       	adiw	r28, 0x11	; 17
    22a8:	e2 e1       	ldi	r30, 0x12	; 18
    22aa:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__>

000022ae <putval>:
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 fd       	sbrc	r18, 0
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <putval+0x16>
    22b4:	23 fd       	sbrc	r18, 3
    22b6:	05 c0       	rjmp	.+10     	; 0x22c2 <putval+0x14>
    22b8:	22 ff       	sbrs	r18, 2
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <putval+0x12>
    22bc:	73 83       	std	Z+3, r23	; 0x03
    22be:	62 83       	std	Z+2, r22	; 0x02
    22c0:	51 83       	std	Z+1, r21	; 0x01
    22c2:	40 83       	st	Z, r20
    22c4:	08 95       	ret

000022c6 <mulacc>:
    22c6:	ef 92       	push	r14
    22c8:	ff 92       	push	r15
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	44 ff       	sbrs	r20, 4
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <mulacc+0x10>
    22d2:	33 e0       	ldi	r19, 0x03	; 3
    22d4:	11 c0       	rjmp	.+34     	; 0x22f8 <mulacc+0x32>
    22d6:	46 ff       	sbrs	r20, 6
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <mulacc+0x18>
    22da:	34 e0       	ldi	r19, 0x04	; 4
    22dc:	0d c0       	rjmp	.+26     	; 0x22f8 <mulacc+0x32>
    22de:	db 01       	movw	r26, r22
    22e0:	fc 01       	movw	r30, r24
    22e2:	aa 0f       	add	r26, r26
    22e4:	bb 1f       	adc	r27, r27
    22e6:	ee 1f       	adc	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	10 94       	com	r1
    22ec:	d1 f7       	brne	.-12     	; 0x22e2 <mulacc+0x1c>
    22ee:	6a 0f       	add	r22, r26
    22f0:	7b 1f       	adc	r23, r27
    22f2:	8e 1f       	adc	r24, r30
    22f4:	9f 1f       	adc	r25, r31
    22f6:	31 e0       	ldi	r19, 0x01	; 1
    22f8:	66 0f       	add	r22, r22
    22fa:	77 1f       	adc	r23, r23
    22fc:	88 1f       	adc	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	31 50       	subi	r19, 0x01	; 1
    2302:	d1 f7       	brne	.-12     	; 0x22f8 <mulacc+0x32>
    2304:	7b 01       	movw	r14, r22
    2306:	8c 01       	movw	r16, r24
    2308:	e2 0e       	add	r14, r18
    230a:	f1 1c       	adc	r15, r1
    230c:	01 1d       	adc	r16, r1
    230e:	11 1d       	adc	r17, r1
    2310:	a8 01       	movw	r20, r16
    2312:	97 01       	movw	r18, r14
    2314:	b7 01       	movw	r22, r14
    2316:	ca 01       	movw	r24, r20
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	08 95       	ret

00002322 <skip_spaces>:
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	8c 01       	movw	r16, r24
    232c:	c8 01       	movw	r24, r16
    232e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2332:	ec 01       	movw	r28, r24
    2334:	97 fd       	sbrc	r25, 7
    2336:	08 c0       	rjmp	.+16     	; 0x2348 <skip_spaces+0x26>
    2338:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <isspace>
    233c:	89 2b       	or	r24, r25
    233e:	b1 f7       	brne	.-20     	; 0x232c <skip_spaces+0xa>
    2340:	ce 01       	movw	r24, r28
    2342:	b8 01       	movw	r22, r16
    2344:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    2348:	ce 01       	movw	r24, r28
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <conv_int>:
    2354:	8f 92       	push	r8
    2356:	9f 92       	push	r9
    2358:	af 92       	push	r10
    235a:	bf 92       	push	r11
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	5c 01       	movw	r10, r24
    236c:	eb 01       	movw	r28, r22
    236e:	4a 01       	movw	r8, r20
    2370:	12 2f       	mov	r17, r18
    2372:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2376:	ac 01       	movw	r20, r24
    2378:	8b 32       	cpi	r24, 0x2B	; 43
    237a:	19 f0       	breq	.+6      	; 0x2382 <conv_int+0x2e>
    237c:	8d 32       	cpi	r24, 0x2D	; 45
    237e:	51 f4       	brne	.+20     	; 0x2394 <conv_int+0x40>
    2380:	10 68       	ori	r17, 0x80	; 128
    2382:	21 97       	sbiw	r28, 0x01	; 1
    2384:	09 f4       	brne	.+2      	; 0x2388 <conv_int+0x34>
    2386:	6d c0       	rjmp	.+218    	; 0x2462 <conv_int+0x10e>
    2388:	c5 01       	movw	r24, r10
    238a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    238e:	ac 01       	movw	r20, r24
    2390:	97 fd       	sbrc	r25, 7
    2392:	67 c0       	rjmp	.+206    	; 0x2462 <conv_int+0x10e>
    2394:	6d ef       	ldi	r22, 0xFD	; 253
    2396:	d6 2e       	mov	r13, r22
    2398:	d1 22       	and	r13, r17
    239a:	8d 2d       	mov	r24, r13
    239c:	80 73       	andi	r24, 0x30	; 48
    239e:	01 f5       	brne	.+64     	; 0x23e0 <conv_int+0x8c>
    23a0:	40 33       	cpi	r20, 0x30	; 48
    23a2:	f1 f4       	brne	.+60     	; 0x23e0 <conv_int+0x8c>
    23a4:	21 97       	sbiw	r28, 0x01	; 1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <conv_int+0x56>
    23a8:	47 c0       	rjmp	.+142    	; 0x2438 <conv_int+0xe4>
    23aa:	c5 01       	movw	r24, r10
    23ac:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    23b0:	ac 01       	movw	r20, r24
    23b2:	97 fd       	sbrc	r25, 7
    23b4:	41 c0       	rjmp	.+130    	; 0x2438 <conv_int+0xe4>
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	d8 2a       	or	r13, r24
    23ba:	48 37       	cpi	r20, 0x78	; 120
    23bc:	11 f0       	breq	.+4      	; 0x23c2 <conv_int+0x6e>
    23be:	48 35       	cpi	r20, 0x58	; 88
    23c0:	59 f4       	brne	.+22     	; 0x23d8 <conv_int+0x84>
    23c2:	80 e4       	ldi	r24, 0x40	; 64
    23c4:	d8 2a       	or	r13, r24
    23c6:	21 97       	sbiw	r28, 0x01	; 1
    23c8:	b9 f1       	breq	.+110    	; 0x2438 <conv_int+0xe4>
    23ca:	c5 01       	movw	r24, r10
    23cc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    23d0:	ac 01       	movw	r20, r24
    23d2:	99 23       	and	r25, r25
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <conv_int+0x8c>
    23d6:	30 c0       	rjmp	.+96     	; 0x2438 <conv_int+0xe4>
    23d8:	d6 fc       	sbrc	r13, 6
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <conv_int+0x8c>
    23dc:	80 e1       	ldi	r24, 0x10	; 16
    23de:	d8 2a       	or	r13, r24
    23e0:	ee 24       	eor	r14, r14
    23e2:	ff 24       	eor	r15, r15
    23e4:	87 01       	movw	r16, r14
    23e6:	24 2f       	mov	r18, r20
    23e8:	20 53       	subi	r18, 0x30	; 48
    23ea:	28 30       	cpi	r18, 0x08	; 8
    23ec:	88 f0       	brcs	.+34     	; 0x2410 <conv_int+0xbc>
    23ee:	d4 fc       	sbrc	r13, 4
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <conv_int+0xb0>
    23f2:	2a 30       	cpi	r18, 0x0A	; 10
    23f4:	68 f0       	brcs	.+26     	; 0x2410 <conv_int+0xbc>
    23f6:	d6 fe       	sbrs	r13, 6
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <conv_int+0xb0>
    23fa:	2f 7d       	andi	r18, 0xDF	; 223
    23fc:	82 2f       	mov	r24, r18
    23fe:	81 51       	subi	r24, 0x11	; 17
    2400:	86 30       	cpi	r24, 0x06	; 6
    2402:	28 f0       	brcs	.+10     	; 0x240e <conv_int+0xba>
    2404:	ca 01       	movw	r24, r20
    2406:	b5 01       	movw	r22, r10
    2408:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    240c:	12 c0       	rjmp	.+36     	; 0x2432 <conv_int+0xde>
    240e:	27 50       	subi	r18, 0x07	; 7
    2410:	c8 01       	movw	r24, r16
    2412:	b7 01       	movw	r22, r14
    2414:	4d 2d       	mov	r20, r13
    2416:	0e 94 63 11 	call	0x22c6	; 0x22c6 <mulacc>
    241a:	7b 01       	movw	r14, r22
    241c:	8c 01       	movw	r16, r24
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	d8 2a       	or	r13, r24
    2422:	21 97       	sbiw	r28, 0x01	; 1
    2424:	61 f0       	breq	.+24     	; 0x243e <conv_int+0xea>
    2426:	c5 01       	movw	r24, r10
    2428:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    242c:	ac 01       	movw	r20, r24
    242e:	97 ff       	sbrs	r25, 7
    2430:	da cf       	rjmp	.-76     	; 0x23e6 <conv_int+0x92>
    2432:	d1 fc       	sbrc	r13, 1
    2434:	04 c0       	rjmp	.+8      	; 0x243e <conv_int+0xea>
    2436:	15 c0       	rjmp	.+42     	; 0x2462 <conv_int+0x10e>
    2438:	ee 24       	eor	r14, r14
    243a:	ff 24       	eor	r15, r15
    243c:	87 01       	movw	r16, r14
    243e:	d7 fe       	sbrs	r13, 7
    2440:	08 c0       	rjmp	.+16     	; 0x2452 <conv_int+0xfe>
    2442:	10 95       	com	r17
    2444:	00 95       	com	r16
    2446:	f0 94       	com	r15
    2448:	e0 94       	com	r14
    244a:	e1 1c       	adc	r14, r1
    244c:	f1 1c       	adc	r15, r1
    244e:	01 1d       	adc	r16, r1
    2450:	11 1d       	adc	r17, r1
    2452:	c4 01       	movw	r24, r8
    2454:	b8 01       	movw	r22, r16
    2456:	a7 01       	movw	r20, r14
    2458:	2d 2d       	mov	r18, r13
    245a:	0e 94 57 11 	call	0x22ae	; 0x22ae <putval>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	01 c0       	rjmp	.+2      	; 0x2464 <conv_int+0x110>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	bf 90       	pop	r11
    2474:	af 90       	pop	r10
    2476:	9f 90       	pop	r9
    2478:	8f 90       	pop	r8
    247a:	08 95       	ret

0000247c <conv_brk>:
    247c:	a0 e2       	ldi	r26, 0x20	; 32
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e4       	ldi	r30, 0x44	; 68
    2482:	f2 e1       	ldi	r31, 0x12	; 18
    2484:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__prologue_saves__+0x8>
    2488:	5c 01       	movw	r10, r24
    248a:	6b 01       	movw	r12, r22
    248c:	8a 01       	movw	r16, r20
    248e:	79 01       	movw	r14, r18
    2490:	fe 01       	movw	r30, r28
    2492:	31 96       	adiw	r30, 0x01	; 1
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	df 01       	movw	r26, r30
    2498:	1d 92       	st	X+, r1
    249a:	8a 95       	dec	r24
    249c:	e9 f7       	brne	.-6      	; 0x2498 <conv_brk+0x1c>
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	3f 01       	movw	r6, r30
    24aa:	a1 e0       	ldi	r26, 0x01	; 1
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	f5 01       	movw	r30, r10
    24b0:	83 81       	ldd	r24, Z+3	; 0x03
    24b2:	f7 01       	movw	r30, r14
    24b4:	83 fd       	sbrc	r24, 3
    24b6:	25 91       	lpm	r18, Z+
    24b8:	83 ff       	sbrs	r24, 3
    24ba:	21 91       	ld	r18, Z+
    24bc:	7f 01       	movw	r14, r30
    24be:	22 23       	and	r18, r18
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <conv_brk+0x48>
    24c2:	81 c0       	rjmp	.+258    	; 0x25c6 <conv_brk+0x14a>
    24c4:	2e 35       	cpi	r18, 0x5E	; 94
    24c6:	19 f4       	brne	.+6      	; 0x24ce <conv_brk+0x52>
    24c8:	41 15       	cp	r20, r1
    24ca:	51 05       	cpc	r21, r1
    24cc:	69 f1       	breq	.+90     	; 0x2528 <conv_brk+0xac>
    24ce:	87 2f       	mov	r24, r23
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	84 17       	cp	r24, r20
    24d4:	95 07       	cpc	r25, r21
    24d6:	44 f4       	brge	.+16     	; 0x24e8 <conv_brk+0x6c>
    24d8:	2d 35       	cpi	r18, 0x5D	; 93
    24da:	51 f1       	breq	.+84     	; 0x2530 <conv_brk+0xb4>
    24dc:	2d 32       	cpi	r18, 0x2D	; 45
    24de:	21 f4       	brne	.+8      	; 0x24e8 <conv_brk+0x6c>
    24e0:	33 23       	and	r19, r19
    24e2:	29 f4       	brne	.+10     	; 0x24ee <conv_brk+0x72>
    24e4:	31 e0       	ldi	r19, 0x01	; 1
    24e6:	21 c0       	rjmp	.+66     	; 0x252a <conv_brk+0xae>
    24e8:	33 23       	and	r19, r19
    24ea:	09 f4       	brne	.+2      	; 0x24ee <conv_brk+0x72>
    24ec:	62 2f       	mov	r22, r18
    24ee:	32 2f       	mov	r19, r18
    24f0:	83 2f       	mov	r24, r19
    24f2:	86 95       	lsr	r24
    24f4:	86 95       	lsr	r24
    24f6:	86 95       	lsr	r24
    24f8:	f3 01       	movw	r30, r6
    24fa:	e8 0f       	add	r30, r24
    24fc:	f1 1d       	adc	r31, r1
    24fe:	83 2f       	mov	r24, r19
    2500:	87 70       	andi	r24, 0x07	; 7
    2502:	4d 01       	movw	r8, r26
    2504:	02 c0       	rjmp	.+4      	; 0x250a <conv_brk+0x8e>
    2506:	88 0c       	add	r8, r8
    2508:	99 1c       	adc	r9, r9
    250a:	8a 95       	dec	r24
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <conv_brk+0x8a>
    250e:	20 81       	ld	r18, Z
    2510:	28 29       	or	r18, r8
    2512:	20 83       	st	Z, r18
    2514:	36 17       	cp	r19, r22
    2516:	11 f4       	brne	.+4      	; 0x251c <conv_brk+0xa0>
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	07 c0       	rjmp	.+14     	; 0x252a <conv_brk+0xae>
    251c:	36 17       	cp	r19, r22
    251e:	10 f4       	brcc	.+4      	; 0x2524 <conv_brk+0xa8>
    2520:	3f 5f       	subi	r19, 0xFF	; 255
    2522:	e6 cf       	rjmp	.-52     	; 0x24f0 <conv_brk+0x74>
    2524:	31 50       	subi	r19, 0x01	; 1
    2526:	e4 cf       	rjmp	.-56     	; 0x24f0 <conv_brk+0x74>
    2528:	71 e0       	ldi	r23, 0x01	; 1
    252a:	4f 5f       	subi	r20, 0xFF	; 255
    252c:	5f 4f       	sbci	r21, 0xFF	; 255
    252e:	bf cf       	rjmp	.-130    	; 0x24ae <conv_brk+0x32>
    2530:	33 23       	and	r19, r19
    2532:	19 f0       	breq	.+6      	; 0x253a <conv_brk+0xbe>
    2534:	8e 81       	ldd	r24, Y+6	; 0x06
    2536:	80 62       	ori	r24, 0x20	; 32
    2538:	8e 83       	std	Y+6, r24	; 0x06
    253a:	77 23       	and	r23, r23
    253c:	59 f0       	breq	.+22     	; 0x2554 <conv_brk+0xd8>
    253e:	fe 01       	movw	r30, r28
    2540:	31 96       	adiw	r30, 0x01	; 1
    2542:	9e 01       	movw	r18, r28
    2544:	2f 5d       	subi	r18, 0xDF	; 223
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	80 95       	com	r24
    254c:	81 93       	st	Z+, r24
    254e:	e2 17       	cp	r30, r18
    2550:	f3 07       	cpc	r31, r19
    2552:	d1 f7       	brne	.-12     	; 0x2548 <conv_brk+0xcc>
    2554:	99 24       	eor	r9, r9
    2556:	93 94       	inc	r9
    2558:	3e 01       	movw	r6, r28
    255a:	08 94       	sec
    255c:	61 1c       	adc	r6, r1
    255e:	71 1c       	adc	r7, r1
    2560:	c5 01       	movw	r24, r10
    2562:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2566:	ac 01       	movw	r20, r24
    2568:	97 fd       	sbrc	r25, 7
    256a:	25 c0       	rjmp	.+74     	; 0x25b6 <conv_brk+0x13a>
    256c:	86 95       	lsr	r24
    256e:	86 95       	lsr	r24
    2570:	86 95       	lsr	r24
    2572:	f3 01       	movw	r30, r6
    2574:	e8 0f       	add	r30, r24
    2576:	f1 1d       	adc	r31, r1
    2578:	80 81       	ld	r24, Z
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9a 01       	movw	r18, r20
    257e:	27 70       	andi	r18, 0x07	; 7
    2580:	30 70       	andi	r19, 0x00	; 0
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <conv_brk+0x10c>
    2584:	95 95       	asr	r25
    2586:	87 95       	ror	r24
    2588:	2a 95       	dec	r18
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <conv_brk+0x108>
    258c:	80 fd       	sbrc	r24, 0
    258e:	05 c0       	rjmp	.+10     	; 0x259a <conv_brk+0x11e>
    2590:	ca 01       	movw	r24, r20
    2592:	b5 01       	movw	r22, r10
    2594:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    2598:	0e c0       	rjmp	.+28     	; 0x25b6 <conv_brk+0x13a>
    259a:	01 15       	cp	r16, r1
    259c:	11 05       	cpc	r17, r1
    259e:	19 f0       	breq	.+6      	; 0x25a6 <conv_brk+0x12a>
    25a0:	d8 01       	movw	r26, r16
    25a2:	4d 93       	st	X+, r20
    25a4:	8d 01       	movw	r16, r26
    25a6:	08 94       	sec
    25a8:	c1 08       	sbc	r12, r1
    25aa:	d1 08       	sbc	r13, r1
    25ac:	99 24       	eor	r9, r9
    25ae:	c1 14       	cp	r12, r1
    25b0:	d1 04       	cpc	r13, r1
    25b2:	b1 f6       	brne	.-84     	; 0x2560 <conv_brk+0xe4>
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <conv_brk+0x13e>
    25b6:	99 20       	and	r9, r9
    25b8:	31 f4       	brne	.+12     	; 0x25c6 <conv_brk+0x14a>
    25ba:	01 15       	cp	r16, r1
    25bc:	11 05       	cpc	r17, r1
    25be:	29 f0       	breq	.+10     	; 0x25ca <conv_brk+0x14e>
    25c0:	f8 01       	movw	r30, r16
    25c2:	10 82       	st	Z, r1
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <conv_brk+0x14e>
    25c6:	ee 24       	eor	r14, r14
    25c8:	ff 24       	eor	r15, r15
    25ca:	c7 01       	movw	r24, r14
    25cc:	a0 96       	adiw	r28, 0x20	; 32
    25ce:	ee e0       	ldi	r30, 0x0E	; 14
    25d0:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__epilogue_restores__+0x8>

000025d4 <conv_flt>:
    25d4:	2f 92       	push	r2
    25d6:	3f 92       	push	r3
    25d8:	5f 92       	push	r5
    25da:	6f 92       	push	r6
    25dc:	7f 92       	push	r7
    25de:	8f 92       	push	r8
    25e0:	9f 92       	push	r9
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	df 92       	push	r13
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	3c 01       	movw	r6, r24
    25f8:	7b 01       	movw	r14, r22
    25fa:	1a 01       	movw	r2, r20
    25fc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2600:	ec 01       	movw	r28, r24
    2602:	8b 32       	cpi	r24, 0x2B	; 43
    2604:	39 f0       	breq	.+14     	; 0x2614 <conv_flt+0x40>
    2606:	8d 32       	cpi	r24, 0x2D	; 45
    2608:	11 f0       	breq	.+4      	; 0x260e <conv_flt+0x3a>
    260a:	55 24       	eor	r5, r5
    260c:	11 c0       	rjmp	.+34     	; 0x2630 <conv_flt+0x5c>
    260e:	b0 e8       	ldi	r27, 0x80	; 128
    2610:	5b 2e       	mov	r5, r27
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <conv_flt+0x42>
    2614:	55 24       	eor	r5, r5
    2616:	08 94       	sec
    2618:	e1 08       	sbc	r14, r1
    261a:	f1 08       	sbc	r15, r1
    261c:	e1 14       	cp	r14, r1
    261e:	f1 04       	cpc	r15, r1
    2620:	09 f4       	brne	.+2      	; 0x2624 <conv_flt+0x50>
    2622:	18 c1       	rjmp	.+560    	; 0x2854 <conv_flt+0x280>
    2624:	c3 01       	movw	r24, r6
    2626:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    262a:	ec 01       	movw	r28, r24
    262c:	97 fd       	sbrc	r25, 7
    262e:	12 c1       	rjmp	.+548    	; 0x2854 <conv_flt+0x280>
    2630:	ce 01       	movw	r24, r28
    2632:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <tolower>
    2636:	89 36       	cpi	r24, 0x69	; 105
    2638:	91 05       	cpc	r25, r1
    263a:	21 f0       	breq	.+8      	; 0x2644 <conv_flt+0x70>
    263c:	8e 36       	cpi	r24, 0x6E	; 110
    263e:	91 05       	cpc	r25, r1
    2640:	99 f5       	brne	.+102    	; 0x26a8 <conv_flt+0xd4>
    2642:	1d c0       	rjmp	.+58     	; 0x267e <conv_flt+0xaa>
    2644:	0d e8       	ldi	r16, 0x8D	; 141
    2646:	10 e0       	ldi	r17, 0x00	; 0
    2648:	1c c0       	rjmp	.+56     	; 0x2682 <conv_flt+0xae>
    264a:	08 94       	sec
    264c:	e1 08       	sbc	r14, r1
    264e:	f1 08       	sbc	r15, r1
    2650:	e1 14       	cp	r14, r1
    2652:	f1 04       	cpc	r15, r1
    2654:	71 f0       	breq	.+28     	; 0x2672 <conv_flt+0x9e>
    2656:	c3 01       	movw	r24, r6
    2658:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    265c:	ec 01       	movw	r28, r24
    265e:	97 fd       	sbrc	r25, 7
    2660:	08 c0       	rjmp	.+16     	; 0x2672 <conv_flt+0x9e>
    2662:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <tolower>
    2666:	d8 16       	cp	r13, r24
    2668:	61 f0       	breq	.+24     	; 0x2682 <conv_flt+0xae>
    266a:	ce 01       	movw	r24, r28
    266c:	b3 01       	movw	r22, r6
    266e:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	00 39       	cpi	r16, 0x90	; 144
    2676:	12 07       	cpc	r17, r18
    2678:	09 f0       	breq	.+2      	; 0x267c <conv_flt+0xa8>
    267a:	ec c0       	rjmp	.+472    	; 0x2854 <conv_flt+0x280>
    267c:	08 c0       	rjmp	.+16     	; 0x268e <conv_flt+0xba>
    267e:	0a e8       	ldi	r16, 0x8A	; 138
    2680:	10 e0       	ldi	r17, 0x00	; 0
    2682:	f8 01       	movw	r30, r16
    2684:	0f 5f       	subi	r16, 0xFF	; 255
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	d4 90       	lpm	r13, Z+
    268a:	dd 20       	and	r13, r13
    268c:	f1 f6       	brne	.-68     	; 0x264a <conv_flt+0x76>
    268e:	0d 58       	subi	r16, 0x8D	; 141
    2690:	10 40       	sbci	r17, 0x00	; 0
    2692:	29 f0       	breq	.+10     	; 0x269e <conv_flt+0xca>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e8       	ldi	r26, 0x80	; 128
    269a:	bf e7       	ldi	r27, 0x7F	; 127
    269c:	cf c0       	rjmp	.+414    	; 0x283c <conv_flt+0x268>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 ec       	ldi	r26, 0xC0	; 192
    26a4:	bf e7       	ldi	r27, 0x7F	; 127
    26a6:	ca c0       	rjmp	.+404    	; 0x283c <conv_flt+0x268>
    26a8:	cc 24       	eor	r12, r12
    26aa:	dd 24       	eor	r13, r13
    26ac:	88 24       	eor	r8, r8
    26ae:	99 24       	eor	r9, r9
    26b0:	54 01       	movw	r10, r8
    26b2:	ae 01       	movw	r20, r28
    26b4:	40 53       	subi	r20, 0x30	; 48
    26b6:	24 2f       	mov	r18, r20
    26b8:	4a 30       	cpi	r20, 0x0A	; 10
    26ba:	38 f5       	brcc	.+78     	; 0x270a <conv_flt+0x136>
    26bc:	52 e0       	ldi	r21, 0x02	; 2
    26be:	55 2a       	or	r5, r21
    26c0:	85 2d       	mov	r24, r5
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	ac 01       	movw	r20, r24
    26c6:	48 70       	andi	r20, 0x08	; 8
    26c8:	50 70       	andi	r21, 0x00	; 0
    26ca:	52 fe       	sbrs	r5, 2
    26cc:	06 c0       	rjmp	.+12     	; 0x26da <conv_flt+0x106>
    26ce:	45 2b       	or	r20, r21
    26d0:	11 f5       	brne	.+68     	; 0x2716 <conv_flt+0x142>
    26d2:	08 94       	sec
    26d4:	c1 1c       	adc	r12, r1
    26d6:	d1 1c       	adc	r13, r1
    26d8:	1e c0       	rjmp	.+60     	; 0x2716 <conv_flt+0x142>
    26da:	45 2b       	or	r20, r21
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <conv_flt+0x110>
    26de:	08 94       	sec
    26e0:	c1 08       	sbc	r12, r1
    26e2:	d1 08       	sbc	r13, r1
    26e4:	c5 01       	movw	r24, r10
    26e6:	b4 01       	movw	r22, r8
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <mulacc>
    26ee:	4b 01       	movw	r8, r22
    26f0:	5c 01       	movw	r10, r24
    26f2:	88 e9       	ldi	r24, 0x98	; 152
    26f4:	88 16       	cp	r8, r24
    26f6:	89 e9       	ldi	r24, 0x99	; 153
    26f8:	98 06       	cpc	r9, r24
    26fa:	89 e9       	ldi	r24, 0x99	; 153
    26fc:	a8 06       	cpc	r10, r24
    26fe:	89 e1       	ldi	r24, 0x19	; 25
    2700:	b8 06       	cpc	r11, r24
    2702:	48 f0       	brcs	.+18     	; 0x2716 <conv_flt+0x142>
    2704:	94 e0       	ldi	r25, 0x04	; 4
    2706:	59 2a       	or	r5, r25
    2708:	06 c0       	rjmp	.+12     	; 0x2716 <conv_flt+0x142>
    270a:	4e 3f       	cpi	r20, 0xFE	; 254
    270c:	81 f4       	brne	.+32     	; 0x272e <conv_flt+0x15a>
    270e:	53 fc       	sbrc	r5, 3
    2710:	0e c0       	rjmp	.+28     	; 0x272e <conv_flt+0x15a>
    2712:	e8 e0       	ldi	r30, 0x08	; 8
    2714:	5e 2a       	or	r5, r30
    2716:	08 94       	sec
    2718:	e1 08       	sbc	r14, r1
    271a:	f1 08       	sbc	r15, r1
    271c:	e1 14       	cp	r14, r1
    271e:	f1 04       	cpc	r15, r1
    2720:	31 f0       	breq	.+12     	; 0x272e <conv_flt+0x15a>
    2722:	c3 01       	movw	r24, r6
    2724:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2728:	ec 01       	movw	r28, r24
    272a:	97 ff       	sbrs	r25, 7
    272c:	c2 cf       	rjmp	.-124    	; 0x26b2 <conv_flt+0xde>
    272e:	51 fe       	sbrs	r5, 1
    2730:	91 c0       	rjmp	.+290    	; 0x2854 <conv_flt+0x280>
    2732:	c5 36       	cpi	r28, 0x65	; 101
    2734:	19 f0       	breq	.+6      	; 0x273c <conv_flt+0x168>
    2736:	c5 34       	cpi	r28, 0x45	; 69
    2738:	09 f0       	breq	.+2      	; 0x273c <conv_flt+0x168>
    273a:	46 c0       	rjmp	.+140    	; 0x27c8 <conv_flt+0x1f4>
    273c:	08 94       	sec
    273e:	e1 08       	sbc	r14, r1
    2740:	f1 08       	sbc	r15, r1
    2742:	e1 14       	cp	r14, r1
    2744:	f1 04       	cpc	r15, r1
    2746:	09 f4       	brne	.+2      	; 0x274a <conv_flt+0x176>
    2748:	85 c0       	rjmp	.+266    	; 0x2854 <conv_flt+0x280>
    274a:	c3 01       	movw	r24, r6
    274c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2750:	ec 01       	movw	r28, r24
    2752:	97 fd       	sbrc	r25, 7
    2754:	7f c0       	rjmp	.+254    	; 0x2854 <conv_flt+0x280>
    2756:	8b 32       	cpi	r24, 0x2B	; 43
    2758:	21 f0       	breq	.+8      	; 0x2762 <conv_flt+0x18e>
    275a:	8d 32       	cpi	r24, 0x2D	; 45
    275c:	69 f4       	brne	.+26     	; 0x2778 <conv_flt+0x1a4>
    275e:	f0 e1       	ldi	r31, 0x10	; 16
    2760:	5f 2a       	or	r5, r31
    2762:	08 94       	sec
    2764:	e1 08       	sbc	r14, r1
    2766:	f1 08       	sbc	r15, r1
    2768:	e1 14       	cp	r14, r1
    276a:	f1 04       	cpc	r15, r1
    276c:	09 f4       	brne	.+2      	; 0x2770 <conv_flt+0x19c>
    276e:	72 c0       	rjmp	.+228    	; 0x2854 <conv_flt+0x280>
    2770:	c3 01       	movw	r24, r6
    2772:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2776:	ec 01       	movw	r28, r24
    2778:	ce 01       	movw	r24, r28
    277a:	c0 97       	sbiw	r24, 0x30	; 48
    277c:	0a 97       	sbiw	r24, 0x0a	; 10
    277e:	08 f0       	brcs	.+2      	; 0x2782 <conv_flt+0x1ae>
    2780:	69 c0       	rjmp	.+210    	; 0x2854 <conv_flt+0x280>
    2782:	00 e0       	ldi	r16, 0x00	; 0
    2784:	10 e0       	ldi	r17, 0x00	; 0
    2786:	b8 01       	movw	r22, r16
    2788:	88 27       	eor	r24, r24
    278a:	77 fd       	sbrc	r23, 7
    278c:	80 95       	com	r24
    278e:	98 2f       	mov	r25, r24
    2790:	ae 01       	movw	r20, r28
    2792:	40 53       	subi	r20, 0x30	; 48
    2794:	24 2f       	mov	r18, r20
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	0e 94 63 11 	call	0x22c6	; 0x22c6 <mulacc>
    279c:	8b 01       	movw	r16, r22
    279e:	08 94       	sec
    27a0:	e1 08       	sbc	r14, r1
    27a2:	f1 08       	sbc	r15, r1
    27a4:	e1 14       	cp	r14, r1
    27a6:	f1 04       	cpc	r15, r1
    27a8:	39 f0       	breq	.+14     	; 0x27b8 <conv_flt+0x1e4>
    27aa:	c3 01       	movw	r24, r6
    27ac:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    27b0:	ec 01       	movw	r28, r24
    27b2:	c0 97       	sbiw	r24, 0x30	; 48
    27b4:	0a 97       	sbiw	r24, 0x0a	; 10
    27b6:	38 f3       	brcs	.-50     	; 0x2786 <conv_flt+0x1b2>
    27b8:	b8 01       	movw	r22, r16
    27ba:	54 fe       	sbrs	r5, 4
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <conv_flt+0x1f0>
    27be:	70 95       	com	r23
    27c0:	61 95       	neg	r22
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	c6 0e       	add	r12, r22
    27c6:	d7 1e       	adc	r13, r23
    27c8:	ef 28       	or	r14, r15
    27ca:	31 f0       	breq	.+12     	; 0x27d8 <conv_flt+0x204>
    27cc:	d7 fd       	sbrc	r29, 7
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <conv_flt+0x204>
    27d0:	ce 01       	movw	r24, r28
    27d2:	b3 01       	movw	r22, r6
    27d4:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    27d8:	c5 01       	movw	r24, r10
    27da:	b4 01       	movw	r22, r8
    27dc:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__floatunsisf>
    27e0:	d7 fe       	sbrs	r13, 7
    27e2:	0d c0       	rjmp	.+26     	; 0x27fe <conv_flt+0x22a>
    27e4:	a9 ea       	ldi	r26, 0xA9	; 169
    27e6:	ea 2e       	mov	r14, r26
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	fa 2e       	mov	r15, r26
    27ec:	d0 94       	com	r13
    27ee:	c1 94       	neg	r12
    27f0:	d1 08       	sbc	r13, r1
    27f2:	d3 94       	inc	r13
    27f4:	c0 e2       	ldi	r28, 0x20	; 32
    27f6:	d0 e0       	ldi	r29, 0x00	; 0
    27f8:	00 e0       	ldi	r16, 0x00	; 0
    27fa:	10 e0       	ldi	r17, 0x00	; 0
    27fc:	0e c0       	rjmp	.+28     	; 0x281a <conv_flt+0x246>
    27fe:	f1 ec       	ldi	r31, 0xC1	; 193
    2800:	ef 2e       	mov	r14, r31
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	ff 2e       	mov	r15, r31
    2806:	f6 cf       	rjmp	.-20     	; 0x27f4 <conv_flt+0x220>
    2808:	f7 01       	movw	r30, r14
    280a:	25 91       	lpm	r18, Z+
    280c:	35 91       	lpm	r19, Z+
    280e:	45 91       	lpm	r20, Z+
    2810:	54 91       	lpm	r21, Z+
    2812:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__mulsf3>
    2816:	cc 1a       	sub	r12, r28
    2818:	dd 0a       	sbc	r13, r29
    281a:	cc 16       	cp	r12, r28
    281c:	dd 06       	cpc	r13, r29
    281e:	a0 f7       	brcc	.-24     	; 0x2808 <conv_flt+0x234>
    2820:	d6 95       	lsr	r29
    2822:	c7 95       	ror	r28
    2824:	0f 5f       	subi	r16, 0xFF	; 255
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	06 30       	cpi	r16, 0x06	; 6
    282a:	11 05       	cpc	r17, r1
    282c:	29 f0       	breq	.+10     	; 0x2838 <conv_flt+0x264>
    282e:	ec ef       	ldi	r30, 0xFC	; 252
    2830:	ff ef       	ldi	r31, 0xFF	; 255
    2832:	ee 0e       	add	r14, r30
    2834:	ff 1e       	adc	r15, r31
    2836:	f1 cf       	rjmp	.-30     	; 0x281a <conv_flt+0x246>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	57 fc       	sbrc	r5, 7
    283e:	b0 58       	subi	r27, 0x80	; 128
    2840:	21 14       	cp	r2, r1
    2842:	31 04       	cpc	r3, r1
    2844:	29 f0       	breq	.+10     	; 0x2850 <conv_flt+0x27c>
    2846:	f1 01       	movw	r30, r2
    2848:	80 83       	st	Z, r24
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	b3 83       	std	Z+3, r27	; 0x03
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <conv_flt+0x282>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	7f 90       	pop	r7
    2870:	6f 90       	pop	r6
    2872:	5f 90       	pop	r5
    2874:	3f 90       	pop	r3
    2876:	2f 90       	pop	r2
    2878:	08 95       	ret

0000287a <vfscanf>:
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e3 e4       	ldi	r30, 0x43	; 67
    2880:	f4 e1       	ldi	r31, 0x14	; 20
    2882:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x6>
    2886:	4c 01       	movw	r8, r24
    2888:	5b 01       	movw	r10, r22
    288a:	3a 01       	movw	r6, r20
    288c:	fc 01       	movw	r30, r24
    288e:	17 82       	std	Z+7, r1	; 0x07
    2890:	16 82       	std	Z+6, r1	; 0x06
    2892:	55 24       	eor	r5, r5
    2894:	04 c1       	rjmp	.+520    	; 0x2a9e <vfscanf+0x224>
    2896:	81 2f       	mov	r24, r17
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <isspace>
    289e:	89 2b       	or	r24, r25
    28a0:	21 f0       	breq	.+8      	; 0x28aa <vfscanf+0x30>
    28a2:	c4 01       	movw	r24, r8
    28a4:	0e 94 91 11 	call	0x2322	; 0x2322 <skip_spaces>
    28a8:	fa c0       	rjmp	.+500    	; 0x2a9e <vfscanf+0x224>
    28aa:	15 32       	cpi	r17, 0x25	; 37
    28ac:	49 f4       	brne	.+18     	; 0x28c0 <vfscanf+0x46>
    28ae:	f5 01       	movw	r30, r10
    28b0:	f3 fc       	sbrc	r15, 3
    28b2:	65 91       	lpm	r22, Z+
    28b4:	f3 fe       	sbrs	r15, 3
    28b6:	61 91       	ld	r22, Z+
    28b8:	5f 01       	movw	r10, r30
    28ba:	65 32       	cpi	r22, 0x25	; 37
    28bc:	69 f4       	brne	.+26     	; 0x28d8 <vfscanf+0x5e>
    28be:	15 e2       	ldi	r17, 0x25	; 37
    28c0:	c4 01       	movw	r24, r8
    28c2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    28c6:	97 fd       	sbrc	r25, 7
    28c8:	f6 c0       	rjmp	.+492    	; 0x2ab6 <vfscanf+0x23c>
    28ca:	18 17       	cp	r17, r24
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <vfscanf+0x56>
    28ce:	e7 c0       	rjmp	.+462    	; 0x2a9e <vfscanf+0x224>
    28d0:	b4 01       	movw	r22, r8
    28d2:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    28d6:	f4 c0       	rjmp	.+488    	; 0x2ac0 <vfscanf+0x246>
    28d8:	6a 32       	cpi	r22, 0x2A	; 42
    28da:	19 f0       	breq	.+6      	; 0x28e2 <vfscanf+0x68>
    28dc:	16 2f       	mov	r17, r22
    28de:	00 e0       	ldi	r16, 0x00	; 0
    28e0:	06 c0       	rjmp	.+12     	; 0x28ee <vfscanf+0x74>
    28e2:	f3 fc       	sbrc	r15, 3
    28e4:	15 91       	lpm	r17, Z+
    28e6:	f3 fe       	sbrs	r15, 3
    28e8:	11 91       	ld	r17, Z+
    28ea:	5f 01       	movw	r10, r30
    28ec:	01 e0       	ldi	r16, 0x01	; 1
    28ee:	cc 24       	eor	r12, r12
    28f0:	dd 24       	eor	r13, r13
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <vfscanf+0x96>
    28f4:	02 60       	ori	r16, 0x02	; 2
    28f6:	b6 01       	movw	r22, r12
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	0e 94 63 11 	call	0x22c6	; 0x22c6 <mulacc>
    2902:	6b 01       	movw	r12, r22
    2904:	f5 01       	movw	r30, r10
    2906:	f3 fc       	sbrc	r15, 3
    2908:	15 91       	lpm	r17, Z+
    290a:	f3 fe       	sbrs	r15, 3
    290c:	11 91       	ld	r17, Z+
    290e:	5f 01       	movw	r10, r30
    2910:	21 2f       	mov	r18, r17
    2912:	20 53       	subi	r18, 0x30	; 48
    2914:	2a 30       	cpi	r18, 0x0A	; 10
    2916:	70 f3       	brcs	.-36     	; 0x28f4 <vfscanf+0x7a>
    2918:	01 fd       	sbrc	r16, 1
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <vfscanf+0xaa>
    291c:	cc 24       	eor	r12, r12
    291e:	ca 94       	dec	r12
    2920:	dc 2c       	mov	r13, r12
    2922:	04 c0       	rjmp	.+8      	; 0x292c <vfscanf+0xb2>
    2924:	c1 14       	cp	r12, r1
    2926:	d1 04       	cpc	r13, r1
    2928:	09 f4       	brne	.+2      	; 0x292c <vfscanf+0xb2>
    292a:	ca c0       	rjmp	.+404    	; 0x2ac0 <vfscanf+0x246>
    292c:	18 36       	cpi	r17, 0x68	; 104
    292e:	21 f0       	breq	.+8      	; 0x2938 <vfscanf+0xbe>
    2930:	1c 36       	cpi	r17, 0x6C	; 108
    2932:	99 f4       	brne	.+38     	; 0x295a <vfscanf+0xe0>
    2934:	f5 01       	movw	r30, r10
    2936:	0b c0       	rjmp	.+22     	; 0x294e <vfscanf+0xd4>
    2938:	f5 01       	movw	r30, r10
    293a:	f3 fc       	sbrc	r15, 3
    293c:	65 91       	lpm	r22, Z+
    293e:	f3 fe       	sbrs	r15, 3
    2940:	61 91       	ld	r22, Z+
    2942:	68 36       	cpi	r22, 0x68	; 104
    2944:	19 f0       	breq	.+6      	; 0x294c <vfscanf+0xd2>
    2946:	5f 01       	movw	r10, r30
    2948:	16 2f       	mov	r17, r22
    294a:	07 c0       	rjmp	.+14     	; 0x295a <vfscanf+0xe0>
    294c:	08 60       	ori	r16, 0x08	; 8
    294e:	04 60       	ori	r16, 0x04	; 4
    2950:	f3 fc       	sbrc	r15, 3
    2952:	15 91       	lpm	r17, Z+
    2954:	f3 fe       	sbrs	r15, 3
    2956:	11 91       	ld	r17, Z+
    2958:	5f 01       	movw	r10, r30
    295a:	11 23       	and	r17, r17
    295c:	09 f4       	brne	.+2      	; 0x2960 <vfscanf+0xe6>
    295e:	b0 c0       	rjmp	.+352    	; 0x2ac0 <vfscanf+0x246>
    2960:	88 e7       	ldi	r24, 0x78	; 120
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	61 2f       	mov	r22, r17
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <strchr_P>
    296c:	89 2b       	or	r24, r25
    296e:	09 f4       	brne	.+2      	; 0x2972 <vfscanf+0xf8>
    2970:	a7 c0       	rjmp	.+334    	; 0x2ac0 <vfscanf+0x246>
    2972:	80 2f       	mov	r24, r16
    2974:	00 ff       	sbrs	r16, 0
    2976:	03 c0       	rjmp	.+6      	; 0x297e <vfscanf+0x104>
    2978:	ee 24       	eor	r14, r14
    297a:	ff 24       	eor	r15, r15
    297c:	07 c0       	rjmp	.+14     	; 0x298c <vfscanf+0x112>
    297e:	f3 01       	movw	r30, r6
    2980:	e0 80       	ld	r14, Z
    2982:	f1 80       	ldd	r15, Z+1	; 0x01
    2984:	22 e0       	ldi	r18, 0x02	; 2
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	62 0e       	add	r6, r18
    298a:	73 1e       	adc	r7, r19
    298c:	1e 36       	cpi	r17, 0x6E	; 110
    298e:	51 f4       	brne	.+20     	; 0x29a4 <vfscanf+0x12a>
    2990:	f4 01       	movw	r30, r8
    2992:	46 81       	ldd	r20, Z+6	; 0x06
    2994:	57 81       	ldd	r21, Z+7	; 0x07
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	c7 01       	movw	r24, r14
    299c:	20 2f       	mov	r18, r16
    299e:	0e 94 57 11 	call	0x22ae	; 0x22ae <putval>
    29a2:	7d c0       	rjmp	.+250    	; 0x2a9e <vfscanf+0x224>
    29a4:	13 36       	cpi	r17, 0x63	; 99
    29a6:	b9 f4       	brne	.+46     	; 0x29d6 <vfscanf+0x15c>
    29a8:	81 fd       	sbrc	r24, 1
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <vfscanf+0x138>
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	c8 2e       	mov	r12, r24
    29b0:	d1 2c       	mov	r13, r1
    29b2:	c4 01       	movw	r24, r8
    29b4:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    29b8:	97 fd       	sbrc	r25, 7
    29ba:	7d c0       	rjmp	.+250    	; 0x2ab6 <vfscanf+0x23c>
    29bc:	e1 14       	cp	r14, r1
    29be:	f1 04       	cpc	r15, r1
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <vfscanf+0x14e>
    29c2:	f7 01       	movw	r30, r14
    29c4:	81 93       	st	Z+, r24
    29c6:	7f 01       	movw	r14, r30
    29c8:	08 94       	sec
    29ca:	c1 08       	sbc	r12, r1
    29cc:	d1 08       	sbc	r13, r1
    29ce:	c1 14       	cp	r12, r1
    29d0:	d1 04       	cpc	r13, r1
    29d2:	79 f7       	brne	.-34     	; 0x29b2 <vfscanf+0x138>
    29d4:	62 c0       	rjmp	.+196    	; 0x2a9a <vfscanf+0x220>
    29d6:	1b 35       	cpi	r17, 0x5B	; 91
    29d8:	59 f4       	brne	.+22     	; 0x29f0 <vfscanf+0x176>
    29da:	c4 01       	movw	r24, r8
    29dc:	b6 01       	movw	r22, r12
    29de:	a7 01       	movw	r20, r14
    29e0:	95 01       	movw	r18, r10
    29e2:	0e 94 3e 12 	call	0x247c	; 0x247c <conv_brk>
    29e6:	5c 01       	movw	r10, r24
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	09 f0       	breq	.+2      	; 0x29ee <vfscanf+0x174>
    29ec:	56 c0       	rjmp	.+172    	; 0x2a9a <vfscanf+0x220>
    29ee:	50 c0       	rjmp	.+160    	; 0x2a90 <vfscanf+0x216>
    29f0:	c4 01       	movw	r24, r8
    29f2:	0e 94 91 11 	call	0x2322	; 0x2322 <skip_spaces>
    29f6:	97 fd       	sbrc	r25, 7
    29f8:	5e c0       	rjmp	.+188    	; 0x2ab6 <vfscanf+0x23c>
    29fa:	1f 36       	cpi	r17, 0x6F	; 111
    29fc:	d1 f1       	breq	.+116    	; 0x2a72 <vfscanf+0x1f8>
    29fe:	10 37       	cpi	r17, 0x70	; 112
    2a00:	38 f4       	brcc	.+14     	; 0x2a10 <vfscanf+0x196>
    2a02:	14 36       	cpi	r17, 0x64	; 100
    2a04:	a1 f1       	breq	.+104    	; 0x2a6e <vfscanf+0x1f4>
    2a06:	19 36       	cpi	r17, 0x69	; 105
    2a08:	a9 f1       	breq	.+106    	; 0x2a74 <vfscanf+0x1fa>
    2a0a:	18 35       	cpi	r17, 0x58	; 88
    2a0c:	d1 f5       	brne	.+116    	; 0x2a82 <vfscanf+0x208>
    2a0e:	2d c0       	rjmp	.+90     	; 0x2a6a <vfscanf+0x1f0>
    2a10:	13 37       	cpi	r17, 0x73	; 115
    2a12:	51 f0       	breq	.+20     	; 0x2a28 <vfscanf+0x1ae>
    2a14:	14 37       	cpi	r17, 0x74	; 116
    2a16:	18 f4       	brcc	.+6      	; 0x2a1e <vfscanf+0x1a4>
    2a18:	10 37       	cpi	r17, 0x70	; 112
    2a1a:	99 f5       	brne	.+102    	; 0x2a82 <vfscanf+0x208>
    2a1c:	26 c0       	rjmp	.+76     	; 0x2a6a <vfscanf+0x1f0>
    2a1e:	15 37       	cpi	r17, 0x75	; 117
    2a20:	31 f1       	breq	.+76     	; 0x2a6e <vfscanf+0x1f4>
    2a22:	18 37       	cpi	r17, 0x78	; 120
    2a24:	71 f5       	brne	.+92     	; 0x2a82 <vfscanf+0x208>
    2a26:	21 c0       	rjmp	.+66     	; 0x2a6a <vfscanf+0x1f0>
    2a28:	c4 01       	movw	r24, r8
    2a2a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <fgetc>
    2a2e:	ec 01       	movw	r28, r24
    2a30:	97 fd       	sbrc	r25, 7
    2a32:	15 c0       	rjmp	.+42     	; 0x2a5e <vfscanf+0x1e4>
    2a34:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <isspace>
    2a38:	89 2b       	or	r24, r25
    2a3a:	29 f0       	breq	.+10     	; 0x2a46 <vfscanf+0x1cc>
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	b4 01       	movw	r22, r8
    2a40:	0e 94 a3 18 	call	0x3146	; 0x3146 <ungetc>
    2a44:	0c c0       	rjmp	.+24     	; 0x2a5e <vfscanf+0x1e4>
    2a46:	e1 14       	cp	r14, r1
    2a48:	f1 04       	cpc	r15, r1
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <vfscanf+0x1d8>
    2a4c:	f7 01       	movw	r30, r14
    2a4e:	c1 93       	st	Z+, r28
    2a50:	7f 01       	movw	r14, r30
    2a52:	08 94       	sec
    2a54:	c1 08       	sbc	r12, r1
    2a56:	d1 08       	sbc	r13, r1
    2a58:	c1 14       	cp	r12, r1
    2a5a:	d1 04       	cpc	r13, r1
    2a5c:	29 f7       	brne	.-54     	; 0x2a28 <vfscanf+0x1ae>
    2a5e:	e1 14       	cp	r14, r1
    2a60:	f1 04       	cpc	r15, r1
    2a62:	d9 f0       	breq	.+54     	; 0x2a9a <vfscanf+0x220>
    2a64:	f7 01       	movw	r30, r14
    2a66:	10 82       	st	Z, r1
    2a68:	18 c0       	rjmp	.+48     	; 0x2a9a <vfscanf+0x220>
    2a6a:	00 64       	ori	r16, 0x40	; 64
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <vfscanf+0x1fa>
    2a6e:	00 62       	ori	r16, 0x20	; 32
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <vfscanf+0x1fa>
    2a72:	00 61       	ori	r16, 0x10	; 16
    2a74:	c4 01       	movw	r24, r8
    2a76:	b6 01       	movw	r22, r12
    2a78:	a7 01       	movw	r20, r14
    2a7a:	20 2f       	mov	r18, r16
    2a7c:	0e 94 aa 11 	call	0x2354	; 0x2354 <conv_int>
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <vfscanf+0x212>
    2a82:	c4 01       	movw	r24, r8
    2a84:	b6 01       	movw	r22, r12
    2a86:	a7 01       	movw	r20, r14
    2a88:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <conv_flt>
    2a8c:	88 23       	and	r24, r24
    2a8e:	29 f4       	brne	.+10     	; 0x2a9a <vfscanf+0x220>
    2a90:	f4 01       	movw	r30, r8
    2a92:	83 81       	ldd	r24, Z+3	; 0x03
    2a94:	80 73       	andi	r24, 0x30	; 48
    2a96:	79 f4       	brne	.+30     	; 0x2ab6 <vfscanf+0x23c>
    2a98:	13 c0       	rjmp	.+38     	; 0x2ac0 <vfscanf+0x246>
    2a9a:	00 ff       	sbrs	r16, 0
    2a9c:	53 94       	inc	r5
    2a9e:	f4 01       	movw	r30, r8
    2aa0:	f3 80       	ldd	r15, Z+3	; 0x03
    2aa2:	f5 01       	movw	r30, r10
    2aa4:	f3 fc       	sbrc	r15, 3
    2aa6:	15 91       	lpm	r17, Z+
    2aa8:	f3 fe       	sbrs	r15, 3
    2aaa:	11 91       	ld	r17, Z+
    2aac:	5f 01       	movw	r10, r30
    2aae:	11 23       	and	r17, r17
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <vfscanf+0x23a>
    2ab2:	f1 ce       	rjmp	.-542    	; 0x2896 <vfscanf+0x1c>
    2ab4:	05 c0       	rjmp	.+10     	; 0x2ac0 <vfscanf+0x246>
    2ab6:	55 20       	and	r5, r5
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <vfscanf+0x246>
    2aba:	2f ef       	ldi	r18, 0xFF	; 255
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <vfscanf+0x24a>
    2ac0:	25 2d       	mov	r18, r5
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	c9 01       	movw	r24, r18
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	ef e0       	ldi	r30, 0x0F	; 15
    2acc:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x6>

00002ad0 <__floatunsisf>:
    2ad0:	e8 94       	clt
    2ad2:	09 c0       	rjmp	.+18     	; 0x2ae6 <__floatsisf+0x12>

00002ad4 <__floatsisf>:
    2ad4:	97 fb       	bst	r25, 7
    2ad6:	3e f4       	brtc	.+14     	; 0x2ae6 <__floatsisf+0x12>
    2ad8:	90 95       	com	r25
    2ada:	80 95       	com	r24
    2adc:	70 95       	com	r23
    2ade:	61 95       	neg	r22
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	99 23       	and	r25, r25
    2ae8:	a9 f0       	breq	.+42     	; 0x2b14 <__floatsisf+0x40>
    2aea:	f9 2f       	mov	r31, r25
    2aec:	96 e9       	ldi	r25, 0x96	; 150
    2aee:	bb 27       	eor	r27, r27
    2af0:	93 95       	inc	r25
    2af2:	f6 95       	lsr	r31
    2af4:	87 95       	ror	r24
    2af6:	77 95       	ror	r23
    2af8:	67 95       	ror	r22
    2afa:	b7 95       	ror	r27
    2afc:	f1 11       	cpse	r31, r1
    2afe:	f8 cf       	rjmp	.-16     	; 0x2af0 <__floatsisf+0x1c>
    2b00:	fa f4       	brpl	.+62     	; 0x2b40 <__floatsisf+0x6c>
    2b02:	bb 0f       	add	r27, r27
    2b04:	11 f4       	brne	.+4      	; 0x2b0a <__floatsisf+0x36>
    2b06:	60 ff       	sbrs	r22, 0
    2b08:	1b c0       	rjmp	.+54     	; 0x2b40 <__floatsisf+0x6c>
    2b0a:	6f 5f       	subi	r22, 0xFF	; 255
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	16 c0       	rjmp	.+44     	; 0x2b40 <__floatsisf+0x6c>
    2b14:	88 23       	and	r24, r24
    2b16:	11 f0       	breq	.+4      	; 0x2b1c <__floatsisf+0x48>
    2b18:	96 e9       	ldi	r25, 0x96	; 150
    2b1a:	11 c0       	rjmp	.+34     	; 0x2b3e <__floatsisf+0x6a>
    2b1c:	77 23       	and	r23, r23
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <__floatsisf+0x54>
    2b20:	9e e8       	ldi	r25, 0x8E	; 142
    2b22:	87 2f       	mov	r24, r23
    2b24:	76 2f       	mov	r23, r22
    2b26:	05 c0       	rjmp	.+10     	; 0x2b32 <__floatsisf+0x5e>
    2b28:	66 23       	and	r22, r22
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <__floatsisf+0x74>
    2b2c:	96 e8       	ldi	r25, 0x86	; 134
    2b2e:	86 2f       	mov	r24, r22
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	2a f0       	brmi	.+10     	; 0x2b40 <__floatsisf+0x6c>
    2b36:	9a 95       	dec	r25
    2b38:	66 0f       	add	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	da f7       	brpl	.-10     	; 0x2b36 <__floatsisf+0x62>
    2b40:	88 0f       	add	r24, r24
    2b42:	96 95       	lsr	r25
    2b44:	87 95       	ror	r24
    2b46:	97 f9       	bld	r25, 7
    2b48:	08 95       	ret

00002b4a <__mulsf3>:
    2b4a:	0b d0       	rcall	.+22     	; 0x2b62 <__mulsf3x>
    2b4c:	78 c0       	rjmp	.+240    	; 0x2c3e <__fp_round>
    2b4e:	69 d0       	rcall	.+210    	; 0x2c22 <__fp_pscA>
    2b50:	28 f0       	brcs	.+10     	; 0x2b5c <__mulsf3+0x12>
    2b52:	6e d0       	rcall	.+220    	; 0x2c30 <__fp_pscB>
    2b54:	18 f0       	brcs	.+6      	; 0x2b5c <__mulsf3+0x12>
    2b56:	95 23       	and	r25, r21
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <__mulsf3+0x12>
    2b5a:	5a c0       	rjmp	.+180    	; 0x2c10 <__fp_inf>
    2b5c:	5f c0       	rjmp	.+190    	; 0x2c1c <__fp_nan>
    2b5e:	11 24       	eor	r1, r1
    2b60:	a2 c0       	rjmp	.+324    	; 0x2ca6 <__fp_szero>

00002b62 <__mulsf3x>:
    2b62:	7e d0       	rcall	.+252    	; 0x2c60 <__fp_split3>
    2b64:	a0 f3       	brcs	.-24     	; 0x2b4e <__mulsf3+0x4>

00002b66 <__mulsf3_pse>:
    2b66:	95 9f       	mul	r25, r21
    2b68:	d1 f3       	breq	.-12     	; 0x2b5e <__mulsf3+0x14>
    2b6a:	95 0f       	add	r25, r21
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	55 1f       	adc	r21, r21
    2b70:	62 9f       	mul	r22, r18
    2b72:	f0 01       	movw	r30, r0
    2b74:	72 9f       	mul	r23, r18
    2b76:	bb 27       	eor	r27, r27
    2b78:	f0 0d       	add	r31, r0
    2b7a:	b1 1d       	adc	r27, r1
    2b7c:	63 9f       	mul	r22, r19
    2b7e:	aa 27       	eor	r26, r26
    2b80:	f0 0d       	add	r31, r0
    2b82:	b1 1d       	adc	r27, r1
    2b84:	aa 1f       	adc	r26, r26
    2b86:	64 9f       	mul	r22, r20
    2b88:	66 27       	eor	r22, r22
    2b8a:	b0 0d       	add	r27, r0
    2b8c:	a1 1d       	adc	r26, r1
    2b8e:	66 1f       	adc	r22, r22
    2b90:	82 9f       	mul	r24, r18
    2b92:	22 27       	eor	r18, r18
    2b94:	b0 0d       	add	r27, r0
    2b96:	a1 1d       	adc	r26, r1
    2b98:	62 1f       	adc	r22, r18
    2b9a:	73 9f       	mul	r23, r19
    2b9c:	b0 0d       	add	r27, r0
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	62 1f       	adc	r22, r18
    2ba2:	83 9f       	mul	r24, r19
    2ba4:	a0 0d       	add	r26, r0
    2ba6:	61 1d       	adc	r22, r1
    2ba8:	22 1f       	adc	r18, r18
    2baa:	74 9f       	mul	r23, r20
    2bac:	33 27       	eor	r19, r19
    2bae:	a0 0d       	add	r26, r0
    2bb0:	61 1d       	adc	r22, r1
    2bb2:	23 1f       	adc	r18, r19
    2bb4:	84 9f       	mul	r24, r20
    2bb6:	60 0d       	add	r22, r0
    2bb8:	21 1d       	adc	r18, r1
    2bba:	82 2f       	mov	r24, r18
    2bbc:	76 2f       	mov	r23, r22
    2bbe:	6a 2f       	mov	r22, r26
    2bc0:	11 24       	eor	r1, r1
    2bc2:	9f 57       	subi	r25, 0x7F	; 127
    2bc4:	50 40       	sbci	r21, 0x00	; 0
    2bc6:	8a f0       	brmi	.+34     	; 0x2bea <__mulsf3_pse+0x84>
    2bc8:	e1 f0       	breq	.+56     	; 0x2c02 <__mulsf3_pse+0x9c>
    2bca:	88 23       	and	r24, r24
    2bcc:	4a f0       	brmi	.+18     	; 0x2be0 <__mulsf3_pse+0x7a>
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	bb 1f       	adc	r27, r27
    2bd4:	66 1f       	adc	r22, r22
    2bd6:	77 1f       	adc	r23, r23
    2bd8:	88 1f       	adc	r24, r24
    2bda:	91 50       	subi	r25, 0x01	; 1
    2bdc:	50 40       	sbci	r21, 0x00	; 0
    2bde:	a9 f7       	brne	.-22     	; 0x2bca <__mulsf3_pse+0x64>
    2be0:	9e 3f       	cpi	r25, 0xFE	; 254
    2be2:	51 05       	cpc	r21, r1
    2be4:	70 f0       	brcs	.+28     	; 0x2c02 <__mulsf3_pse+0x9c>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <__fp_inf>
    2be8:	5e c0       	rjmp	.+188    	; 0x2ca6 <__fp_szero>
    2bea:	5f 3f       	cpi	r21, 0xFF	; 255
    2bec:	ec f3       	brlt	.-6      	; 0x2be8 <__mulsf3_pse+0x82>
    2bee:	98 3e       	cpi	r25, 0xE8	; 232
    2bf0:	dc f3       	brlt	.-10     	; 0x2be8 <__mulsf3_pse+0x82>
    2bf2:	86 95       	lsr	r24
    2bf4:	77 95       	ror	r23
    2bf6:	67 95       	ror	r22
    2bf8:	b7 95       	ror	r27
    2bfa:	f7 95       	ror	r31
    2bfc:	e7 95       	ror	r30
    2bfe:	9f 5f       	subi	r25, 0xFF	; 255
    2c00:	c1 f7       	brne	.-16     	; 0x2bf2 <__mulsf3_pse+0x8c>
    2c02:	fe 2b       	or	r31, r30
    2c04:	88 0f       	add	r24, r24
    2c06:	91 1d       	adc	r25, r1
    2c08:	96 95       	lsr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	97 f9       	bld	r25, 7
    2c0e:	08 95       	ret

00002c10 <__fp_inf>:
    2c10:	97 f9       	bld	r25, 7
    2c12:	9f 67       	ori	r25, 0x7F	; 127
    2c14:	80 e8       	ldi	r24, 0x80	; 128
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	08 95       	ret

00002c1c <__fp_nan>:
    2c1c:	9f ef       	ldi	r25, 0xFF	; 255
    2c1e:	80 ec       	ldi	r24, 0xC0	; 192
    2c20:	08 95       	ret

00002c22 <__fp_pscA>:
    2c22:	00 24       	eor	r0, r0
    2c24:	0a 94       	dec	r0
    2c26:	16 16       	cp	r1, r22
    2c28:	17 06       	cpc	r1, r23
    2c2a:	18 06       	cpc	r1, r24
    2c2c:	09 06       	cpc	r0, r25
    2c2e:	08 95       	ret

00002c30 <__fp_pscB>:
    2c30:	00 24       	eor	r0, r0
    2c32:	0a 94       	dec	r0
    2c34:	12 16       	cp	r1, r18
    2c36:	13 06       	cpc	r1, r19
    2c38:	14 06       	cpc	r1, r20
    2c3a:	05 06       	cpc	r0, r21
    2c3c:	08 95       	ret

00002c3e <__fp_round>:
    2c3e:	09 2e       	mov	r0, r25
    2c40:	03 94       	inc	r0
    2c42:	00 0c       	add	r0, r0
    2c44:	11 f4       	brne	.+4      	; 0x2c4a <__fp_round+0xc>
    2c46:	88 23       	and	r24, r24
    2c48:	52 f0       	brmi	.+20     	; 0x2c5e <__fp_round+0x20>
    2c4a:	bb 0f       	add	r27, r27
    2c4c:	40 f4       	brcc	.+16     	; 0x2c5e <__fp_round+0x20>
    2c4e:	bf 2b       	or	r27, r31
    2c50:	11 f4       	brne	.+4      	; 0x2c56 <__fp_round+0x18>
    2c52:	60 ff       	sbrs	r22, 0
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <__fp_round+0x20>
    2c56:	6f 5f       	subi	r22, 0xFF	; 255
    2c58:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5e:	08 95       	ret

00002c60 <__fp_split3>:
    2c60:	57 fd       	sbrc	r21, 7
    2c62:	90 58       	subi	r25, 0x80	; 128
    2c64:	44 0f       	add	r20, r20
    2c66:	55 1f       	adc	r21, r21
    2c68:	59 f0       	breq	.+22     	; 0x2c80 <__fp_splitA+0x10>
    2c6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6c:	71 f0       	breq	.+28     	; 0x2c8a <__fp_splitA+0x1a>
    2c6e:	47 95       	ror	r20

00002c70 <__fp_splitA>:
    2c70:	88 0f       	add	r24, r24
    2c72:	97 fb       	bst	r25, 7
    2c74:	99 1f       	adc	r25, r25
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <__fp_splitA+0x20>
    2c78:	9f 3f       	cpi	r25, 0xFF	; 255
    2c7a:	79 f0       	breq	.+30     	; 0x2c9a <__fp_splitA+0x2a>
    2c7c:	87 95       	ror	r24
    2c7e:	08 95       	ret
    2c80:	12 16       	cp	r1, r18
    2c82:	13 06       	cpc	r1, r19
    2c84:	14 06       	cpc	r1, r20
    2c86:	55 1f       	adc	r21, r21
    2c88:	f2 cf       	rjmp	.-28     	; 0x2c6e <__fp_split3+0xe>
    2c8a:	46 95       	lsr	r20
    2c8c:	f1 df       	rcall	.-30     	; 0x2c70 <__fp_splitA>
    2c8e:	08 c0       	rjmp	.+16     	; 0x2ca0 <__fp_splitA+0x30>
    2c90:	16 16       	cp	r1, r22
    2c92:	17 06       	cpc	r1, r23
    2c94:	18 06       	cpc	r1, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	f1 cf       	rjmp	.-30     	; 0x2c7c <__fp_splitA+0xc>
    2c9a:	86 95       	lsr	r24
    2c9c:	71 05       	cpc	r23, r1
    2c9e:	61 05       	cpc	r22, r1
    2ca0:	08 94       	sec
    2ca2:	08 95       	ret

00002ca4 <__fp_zero>:
    2ca4:	e8 94       	clt

00002ca6 <__fp_szero>:
    2ca6:	bb 27       	eor	r27, r27
    2ca8:	66 27       	eor	r22, r22
    2caa:	77 27       	eor	r23, r23
    2cac:	cb 01       	movw	r24, r22
    2cae:	97 f9       	bld	r25, 7
    2cb0:	08 95       	ret

00002cb2 <__udivmodhi4>:
    2cb2:	aa 1b       	sub	r26, r26
    2cb4:	bb 1b       	sub	r27, r27
    2cb6:	51 e1       	ldi	r21, 0x11	; 17
    2cb8:	07 c0       	rjmp	.+14     	; 0x2cc8 <__udivmodhi4_ep>

00002cba <__udivmodhi4_loop>:
    2cba:	aa 1f       	adc	r26, r26
    2cbc:	bb 1f       	adc	r27, r27
    2cbe:	a6 17       	cp	r26, r22
    2cc0:	b7 07       	cpc	r27, r23
    2cc2:	10 f0       	brcs	.+4      	; 0x2cc8 <__udivmodhi4_ep>
    2cc4:	a6 1b       	sub	r26, r22
    2cc6:	b7 0b       	sbc	r27, r23

00002cc8 <__udivmodhi4_ep>:
    2cc8:	88 1f       	adc	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	5a 95       	dec	r21
    2cce:	a9 f7       	brne	.-22     	; 0x2cba <__udivmodhi4_loop>
    2cd0:	80 95       	com	r24
    2cd2:	90 95       	com	r25
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	08 95       	ret

00002cda <__divmodhi4>:
    2cda:	97 fb       	bst	r25, 7
    2cdc:	09 2e       	mov	r0, r25
    2cde:	07 26       	eor	r0, r23
    2ce0:	0a d0       	rcall	.+20     	; 0x2cf6 <__divmodhi4_neg1>
    2ce2:	77 fd       	sbrc	r23, 7
    2ce4:	04 d0       	rcall	.+8      	; 0x2cee <__divmodhi4_neg2>
    2ce6:	e5 df       	rcall	.-54     	; 0x2cb2 <__udivmodhi4>
    2ce8:	06 d0       	rcall	.+12     	; 0x2cf6 <__divmodhi4_neg1>
    2cea:	00 20       	and	r0, r0
    2cec:	1a f4       	brpl	.+6      	; 0x2cf4 <__divmodhi4_exit>

00002cee <__divmodhi4_neg2>:
    2cee:	70 95       	com	r23
    2cf0:	61 95       	neg	r22
    2cf2:	7f 4f       	sbci	r23, 0xFF	; 255

00002cf4 <__divmodhi4_exit>:
    2cf4:	08 95       	ret

00002cf6 <__divmodhi4_neg1>:
    2cf6:	f6 f7       	brtc	.-4      	; 0x2cf4 <__divmodhi4_exit>
    2cf8:	90 95       	com	r25
    2cfa:	81 95       	neg	r24
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	08 95       	ret

00002d00 <__prologue_saves__>:
    2d00:	2f 92       	push	r2
    2d02:	3f 92       	push	r3
    2d04:	4f 92       	push	r4
    2d06:	5f 92       	push	r5
    2d08:	6f 92       	push	r6
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	ca 1b       	sub	r28, r26
    2d2a:	db 0b       	sbc	r29, r27
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	09 94       	ijmp

00002d38 <__epilogue_restores__>:
    2d38:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3a:	39 88       	ldd	r3, Y+17	; 0x11
    2d3c:	48 88       	ldd	r4, Y+16	; 0x10
    2d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d4e:	df 80       	ldd	r13, Y+7	; 0x07
    2d50:	ee 80       	ldd	r14, Y+6	; 0x06
    2d52:	fd 80       	ldd	r15, Y+5	; 0x05
    2d54:	0c 81       	ldd	r16, Y+4	; 0x04
    2d56:	1b 81       	ldd	r17, Y+3	; 0x03
    2d58:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5c:	ce 0f       	add	r28, r30
    2d5e:	d1 1d       	adc	r29, r1
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	ed 01       	movw	r28, r26
    2d6c:	08 95       	ret

00002d6e <__ftoa_engine>:
    2d6e:	28 30       	cpi	r18, 0x08	; 8
    2d70:	08 f0       	brcs	.+2      	; 0x2d74 <__ftoa_engine+0x6>
    2d72:	27 e0       	ldi	r18, 0x07	; 7
    2d74:	33 27       	eor	r19, r19
    2d76:	da 01       	movw	r26, r20
    2d78:	99 0f       	add	r25, r25
    2d7a:	31 1d       	adc	r19, r1
    2d7c:	87 fd       	sbrc	r24, 7
    2d7e:	91 60       	ori	r25, 0x01	; 1
    2d80:	00 96       	adiw	r24, 0x00	; 0
    2d82:	61 05       	cpc	r22, r1
    2d84:	71 05       	cpc	r23, r1
    2d86:	39 f4       	brne	.+14     	; 0x2d96 <__ftoa_engine+0x28>
    2d88:	32 60       	ori	r19, 0x02	; 2
    2d8a:	2e 5f       	subi	r18, 0xFE	; 254
    2d8c:	3d 93       	st	X+, r19
    2d8e:	30 e3       	ldi	r19, 0x30	; 48
    2d90:	2a 95       	dec	r18
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <__ftoa_engine+0x1e>
    2d94:	08 95       	ret
    2d96:	9f 3f       	cpi	r25, 0xFF	; 255
    2d98:	30 f0       	brcs	.+12     	; 0x2da6 <__ftoa_engine+0x38>
    2d9a:	80 38       	cpi	r24, 0x80	; 128
    2d9c:	71 05       	cpc	r23, r1
    2d9e:	61 05       	cpc	r22, r1
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <__ftoa_engine+0x36>
    2da2:	3c 5f       	subi	r19, 0xFC	; 252
    2da4:	3c 5f       	subi	r19, 0xFC	; 252
    2da6:	3d 93       	st	X+, r19
    2da8:	91 30       	cpi	r25, 0x01	; 1
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <__ftoa_engine+0x40>
    2dac:	80 68       	ori	r24, 0x80	; 128
    2dae:	91 1d       	adc	r25, r1
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	1f 93       	push	r17
    2db6:	0f 93       	push	r16
    2db8:	ff 92       	push	r15
    2dba:	ef 92       	push	r14
    2dbc:	19 2f       	mov	r17, r25
    2dbe:	98 7f       	andi	r25, 0xF8	; 248
    2dc0:	96 95       	lsr	r25
    2dc2:	e9 2f       	mov	r30, r25
    2dc4:	96 95       	lsr	r25
    2dc6:	96 95       	lsr	r25
    2dc8:	e9 0f       	add	r30, r25
    2dca:	ff 27       	eor	r31, r31
    2dcc:	e1 5a       	subi	r30, 0xA1	; 161
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	99 27       	eor	r25, r25
    2dd2:	33 27       	eor	r19, r19
    2dd4:	ee 24       	eor	r14, r14
    2dd6:	ff 24       	eor	r15, r15
    2dd8:	a7 01       	movw	r20, r14
    2dda:	e7 01       	movw	r28, r14
    2ddc:	05 90       	lpm	r0, Z+
    2dde:	08 94       	sec
    2de0:	07 94       	ror	r0
    2de2:	28 f4       	brcc	.+10     	; 0x2dee <__ftoa_engine+0x80>
    2de4:	36 0f       	add	r19, r22
    2de6:	e7 1e       	adc	r14, r23
    2de8:	f8 1e       	adc	r15, r24
    2dea:	49 1f       	adc	r20, r25
    2dec:	51 1d       	adc	r21, r1
    2dee:	66 0f       	add	r22, r22
    2df0:	77 1f       	adc	r23, r23
    2df2:	88 1f       	adc	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	06 94       	lsr	r0
    2df8:	a1 f7       	brne	.-24     	; 0x2de2 <__ftoa_engine+0x74>
    2dfa:	05 90       	lpm	r0, Z+
    2dfc:	07 94       	ror	r0
    2dfe:	28 f4       	brcc	.+10     	; 0x2e0a <__ftoa_engine+0x9c>
    2e00:	e7 0e       	add	r14, r23
    2e02:	f8 1e       	adc	r15, r24
    2e04:	49 1f       	adc	r20, r25
    2e06:	56 1f       	adc	r21, r22
    2e08:	c1 1d       	adc	r28, r1
    2e0a:	77 0f       	add	r23, r23
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	66 1f       	adc	r22, r22
    2e12:	06 94       	lsr	r0
    2e14:	a1 f7       	brne	.-24     	; 0x2dfe <__ftoa_engine+0x90>
    2e16:	05 90       	lpm	r0, Z+
    2e18:	07 94       	ror	r0
    2e1a:	28 f4       	brcc	.+10     	; 0x2e26 <__ftoa_engine+0xb8>
    2e1c:	f8 0e       	add	r15, r24
    2e1e:	49 1f       	adc	r20, r25
    2e20:	56 1f       	adc	r21, r22
    2e22:	c7 1f       	adc	r28, r23
    2e24:	d1 1d       	adc	r29, r1
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	66 1f       	adc	r22, r22
    2e2c:	77 1f       	adc	r23, r23
    2e2e:	06 94       	lsr	r0
    2e30:	a1 f7       	brne	.-24     	; 0x2e1a <__ftoa_engine+0xac>
    2e32:	05 90       	lpm	r0, Z+
    2e34:	07 94       	ror	r0
    2e36:	20 f4       	brcc	.+8      	; 0x2e40 <__ftoa_engine+0xd2>
    2e38:	49 0f       	add	r20, r25
    2e3a:	56 1f       	adc	r21, r22
    2e3c:	c7 1f       	adc	r28, r23
    2e3e:	d8 1f       	adc	r29, r24
    2e40:	99 0f       	add	r25, r25
    2e42:	66 1f       	adc	r22, r22
    2e44:	77 1f       	adc	r23, r23
    2e46:	88 1f       	adc	r24, r24
    2e48:	06 94       	lsr	r0
    2e4a:	a9 f7       	brne	.-22     	; 0x2e36 <__ftoa_engine+0xc8>
    2e4c:	84 91       	lpm	r24, Z+
    2e4e:	10 95       	com	r17
    2e50:	17 70       	andi	r17, 0x07	; 7
    2e52:	41 f0       	breq	.+16     	; 0x2e64 <__ftoa_engine+0xf6>
    2e54:	d6 95       	lsr	r29
    2e56:	c7 95       	ror	r28
    2e58:	57 95       	ror	r21
    2e5a:	47 95       	ror	r20
    2e5c:	f7 94       	ror	r15
    2e5e:	e7 94       	ror	r14
    2e60:	1a 95       	dec	r17
    2e62:	c1 f7       	brne	.-16     	; 0x2e54 <__ftoa_engine+0xe6>
    2e64:	e5 e0       	ldi	r30, 0x05	; 5
    2e66:	f1 e0       	ldi	r31, 0x01	; 1
    2e68:	68 94       	set
    2e6a:	15 90       	lpm	r1, Z+
    2e6c:	15 91       	lpm	r17, Z+
    2e6e:	35 91       	lpm	r19, Z+
    2e70:	65 91       	lpm	r22, Z+
    2e72:	95 91       	lpm	r25, Z+
    2e74:	05 90       	lpm	r0, Z+
    2e76:	7f e2       	ldi	r23, 0x2F	; 47
    2e78:	73 95       	inc	r23
    2e7a:	e1 18       	sub	r14, r1
    2e7c:	f1 0a       	sbc	r15, r17
    2e7e:	43 0b       	sbc	r20, r19
    2e80:	56 0b       	sbc	r21, r22
    2e82:	c9 0b       	sbc	r28, r25
    2e84:	d0 09       	sbc	r29, r0
    2e86:	c0 f7       	brcc	.-16     	; 0x2e78 <__ftoa_engine+0x10a>
    2e88:	e1 0c       	add	r14, r1
    2e8a:	f1 1e       	adc	r15, r17
    2e8c:	43 1f       	adc	r20, r19
    2e8e:	56 1f       	adc	r21, r22
    2e90:	c9 1f       	adc	r28, r25
    2e92:	d0 1d       	adc	r29, r0
    2e94:	7e f4       	brtc	.+30     	; 0x2eb4 <__ftoa_engine+0x146>
    2e96:	70 33       	cpi	r23, 0x30	; 48
    2e98:	11 f4       	brne	.+4      	; 0x2e9e <__ftoa_engine+0x130>
    2e9a:	8a 95       	dec	r24
    2e9c:	e6 cf       	rjmp	.-52     	; 0x2e6a <__ftoa_engine+0xfc>
    2e9e:	e8 94       	clt
    2ea0:	01 50       	subi	r16, 0x01	; 1
    2ea2:	30 f0       	brcs	.+12     	; 0x2eb0 <__ftoa_engine+0x142>
    2ea4:	08 0f       	add	r16, r24
    2ea6:	0a f4       	brpl	.+2      	; 0x2eaa <__ftoa_engine+0x13c>
    2ea8:	00 27       	eor	r16, r16
    2eaa:	02 17       	cp	r16, r18
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <__ftoa_engine+0x142>
    2eae:	20 2f       	mov	r18, r16
    2eb0:	23 95       	inc	r18
    2eb2:	02 2f       	mov	r16, r18
    2eb4:	7a 33       	cpi	r23, 0x3A	; 58
    2eb6:	28 f0       	brcs	.+10     	; 0x2ec2 <__ftoa_engine+0x154>
    2eb8:	79 e3       	ldi	r23, 0x39	; 57
    2eba:	7d 93       	st	X+, r23
    2ebc:	2a 95       	dec	r18
    2ebe:	e9 f7       	brne	.-6      	; 0x2eba <__ftoa_engine+0x14c>
    2ec0:	10 c0       	rjmp	.+32     	; 0x2ee2 <__ftoa_engine+0x174>
    2ec2:	7d 93       	st	X+, r23
    2ec4:	2a 95       	dec	r18
    2ec6:	89 f6       	brne	.-94     	; 0x2e6a <__ftoa_engine+0xfc>
    2ec8:	06 94       	lsr	r0
    2eca:	97 95       	ror	r25
    2ecc:	67 95       	ror	r22
    2ece:	37 95       	ror	r19
    2ed0:	17 95       	ror	r17
    2ed2:	17 94       	ror	r1
    2ed4:	e1 18       	sub	r14, r1
    2ed6:	f1 0a       	sbc	r15, r17
    2ed8:	43 0b       	sbc	r20, r19
    2eda:	56 0b       	sbc	r21, r22
    2edc:	c9 0b       	sbc	r28, r25
    2ede:	d0 09       	sbc	r29, r0
    2ee0:	98 f0       	brcs	.+38     	; 0x2f08 <__ftoa_engine+0x19a>
    2ee2:	23 95       	inc	r18
    2ee4:	7e 91       	ld	r23, -X
    2ee6:	73 95       	inc	r23
    2ee8:	7a 33       	cpi	r23, 0x3A	; 58
    2eea:	08 f0       	brcs	.+2      	; 0x2eee <__ftoa_engine+0x180>
    2eec:	70 e3       	ldi	r23, 0x30	; 48
    2eee:	7c 93       	st	X, r23
    2ef0:	20 13       	cpse	r18, r16
    2ef2:	b8 f7       	brcc	.-18     	; 0x2ee2 <__ftoa_engine+0x174>
    2ef4:	7e 91       	ld	r23, -X
    2ef6:	70 61       	ori	r23, 0x10	; 16
    2ef8:	7d 93       	st	X+, r23
    2efa:	30 f0       	brcs	.+12     	; 0x2f08 <__ftoa_engine+0x19a>
    2efc:	83 95       	inc	r24
    2efe:	71 e3       	ldi	r23, 0x31	; 49
    2f00:	7d 93       	st	X+, r23
    2f02:	70 e3       	ldi	r23, 0x30	; 48
    2f04:	2a 95       	dec	r18
    2f06:	e1 f7       	brne	.-8      	; 0x2f00 <__ftoa_engine+0x192>
    2f08:	11 24       	eor	r1, r1
    2f0a:	ef 90       	pop	r14
    2f0c:	ff 90       	pop	r15
    2f0e:	0f 91       	pop	r16
    2f10:	1f 91       	pop	r17
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	99 27       	eor	r25, r25
    2f18:	87 fd       	sbrc	r24, 7
    2f1a:	90 95       	com	r25
    2f1c:	08 95       	ret

00002f1e <isspace>:
    2f1e:	91 11       	cpse	r25, r1
    2f20:	8a c1       	rjmp	.+788    	; 0x3236 <__ctype_isfalse>
    2f22:	80 32       	cpi	r24, 0x20	; 32
    2f24:	19 f0       	breq	.+6      	; 0x2f2c <isspace+0xe>
    2f26:	89 50       	subi	r24, 0x09	; 9
    2f28:	85 50       	subi	r24, 0x05	; 5
    2f2a:	d0 f7       	brcc	.-12     	; 0x2f20 <isspace+0x2>
    2f2c:	08 95       	ret

00002f2e <tolower>:
    2f2e:	91 11       	cpse	r25, r1
    2f30:	08 95       	ret
    2f32:	81 54       	subi	r24, 0x41	; 65
    2f34:	8a 51       	subi	r24, 0x1A	; 26
    2f36:	08 f4       	brcc	.+2      	; 0x2f3a <tolower+0xc>
    2f38:	80 5e       	subi	r24, 0xE0	; 224
    2f3a:	85 5a       	subi	r24, 0xA5	; 165
    2f3c:	08 95       	ret

00002f3e <strchr_P>:
    2f3e:	fc 01       	movw	r30, r24
    2f40:	05 90       	lpm	r0, Z+
    2f42:	06 16       	cp	r0, r22
    2f44:	21 f0       	breq	.+8      	; 0x2f4e <strchr_P+0x10>
    2f46:	00 20       	and	r0, r0
    2f48:	d9 f7       	brne	.-10     	; 0x2f40 <strchr_P+0x2>
    2f4a:	c0 01       	movw	r24, r0
    2f4c:	08 95       	ret
    2f4e:	31 97       	sbiw	r30, 0x01	; 1
    2f50:	cf 01       	movw	r24, r30
    2f52:	08 95       	ret

00002f54 <strnlen_P>:
    2f54:	fc 01       	movw	r30, r24
    2f56:	05 90       	lpm	r0, Z+
    2f58:	61 50       	subi	r22, 0x01	; 1
    2f5a:	70 40       	sbci	r23, 0x00	; 0
    2f5c:	01 10       	cpse	r0, r1
    2f5e:	d8 f7       	brcc	.-10     	; 0x2f56 <strnlen_P+0x2>
    2f60:	80 95       	com	r24
    2f62:	90 95       	com	r25
    2f64:	8e 0f       	add	r24, r30
    2f66:	9f 1f       	adc	r25, r31
    2f68:	08 95       	ret

00002f6a <strnlen>:
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	61 50       	subi	r22, 0x01	; 1
    2f6e:	70 40       	sbci	r23, 0x00	; 0
    2f70:	01 90       	ld	r0, Z+
    2f72:	01 10       	cpse	r0, r1
    2f74:	d8 f7       	brcc	.-10     	; 0x2f6c <strnlen+0x2>
    2f76:	80 95       	com	r24
    2f78:	90 95       	com	r25
    2f7a:	8e 0f       	add	r24, r30
    2f7c:	9f 1f       	adc	r25, r31
    2f7e:	08 95       	ret

00002f80 <fgetc>:
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	ec 01       	movw	r28, r24
    2f86:	4b 81       	ldd	r20, Y+3	; 0x03
    2f88:	40 ff       	sbrs	r20, 0
    2f8a:	1a c0       	rjmp	.+52     	; 0x2fc0 <fgetc+0x40>
    2f8c:	46 ff       	sbrs	r20, 6
    2f8e:	0a c0       	rjmp	.+20     	; 0x2fa4 <fgetc+0x24>
    2f90:	4f 7b       	andi	r20, 0xBF	; 191
    2f92:	4b 83       	std	Y+3, r20	; 0x03
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	9f 81       	ldd	r25, Y+7	; 0x07
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	9f 83       	std	Y+7, r25	; 0x07
    2f9c:	8e 83       	std	Y+6, r24	; 0x06
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	2b c0       	rjmp	.+86     	; 0x2ffa <fgetc+0x7a>
    2fa4:	42 ff       	sbrs	r20, 2
    2fa6:	13 c0       	rjmp	.+38     	; 0x2fce <fgetc+0x4e>
    2fa8:	e8 81       	ld	r30, Y
    2faa:	f9 81       	ldd	r31, Y+1	; 0x01
    2fac:	80 81       	ld	r24, Z
    2fae:	28 2f       	mov	r18, r24
    2fb0:	33 27       	eor	r19, r19
    2fb2:	27 fd       	sbrc	r18, 7
    2fb4:	30 95       	com	r19
    2fb6:	21 15       	cp	r18, r1
    2fb8:	31 05       	cpc	r19, r1
    2fba:	29 f4       	brne	.+10     	; 0x2fc6 <fgetc+0x46>
    2fbc:	40 62       	ori	r20, 0x20	; 32
    2fbe:	4b 83       	std	Y+3, r20	; 0x03
    2fc0:	2f ef       	ldi	r18, 0xFF	; 255
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	1b c0       	rjmp	.+54     	; 0x2ffc <fgetc+0x7c>
    2fc6:	31 96       	adiw	r30, 0x01	; 1
    2fc8:	f9 83       	std	Y+1, r31	; 0x01
    2fca:	e8 83       	st	Y, r30
    2fcc:	11 c0       	rjmp	.+34     	; 0x2ff0 <fgetc+0x70>
    2fce:	ea 85       	ldd	r30, Y+10	; 0x0a
    2fd0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	09 95       	icall
    2fd6:	9c 01       	movw	r18, r24
    2fd8:	97 ff       	sbrs	r25, 7
    2fda:	0a c0       	rjmp	.+20     	; 0x2ff0 <fgetc+0x70>
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	11 f0       	breq	.+4      	; 0x2fe8 <fgetc+0x68>
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <fgetc+0x6a>
    2fe8:	80 e1       	ldi	r24, 0x10	; 16
    2fea:	89 2b       	or	r24, r25
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	e8 cf       	rjmp	.-48     	; 0x2fc0 <fgetc+0x40>
    2ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	9f 83       	std	Y+7, r25	; 0x07
    2ff8:	8e 83       	std	Y+6, r24	; 0x06
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	c9 01       	movw	r24, r18
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	08 95       	ret

00003004 <fprintf>:
    3004:	a0 e0       	ldi	r26, 0x00	; 0
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e8 e0       	ldi	r30, 0x08	; 8
    300a:	f8 e1       	ldi	r31, 0x18	; 24
    300c:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x20>
    3010:	9e 01       	movw	r18, r28
    3012:	27 5f       	subi	r18, 0xF7	; 247
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	6f 81       	ldd	r22, Y+7	; 0x07
    301c:	78 85       	ldd	r23, Y+8	; 0x08
    301e:	a9 01       	movw	r20, r18
    3020:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <vfprintf>
    3024:	20 96       	adiw	r28, 0x00	; 0
    3026:	e2 e0       	ldi	r30, 0x02	; 2
    3028:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x20>

0000302c <fputc>:
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	8c 01       	movw	r16, r24
    3036:	eb 01       	movw	r28, r22
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	81 ff       	sbrs	r24, 1
    303c:	1b c0       	rjmp	.+54     	; 0x3074 <fputc+0x48>
    303e:	82 ff       	sbrs	r24, 2
    3040:	0d c0       	rjmp	.+26     	; 0x305c <fputc+0x30>
    3042:	2e 81       	ldd	r18, Y+6	; 0x06
    3044:	3f 81       	ldd	r19, Y+7	; 0x07
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	28 17       	cp	r18, r24
    304c:	39 07       	cpc	r19, r25
    304e:	64 f4       	brge	.+24     	; 0x3068 <fputc+0x3c>
    3050:	e8 81       	ld	r30, Y
    3052:	f9 81       	ldd	r31, Y+1	; 0x01
    3054:	01 93       	st	Z+, r16
    3056:	f9 83       	std	Y+1, r31	; 0x01
    3058:	e8 83       	st	Y, r30
    305a:	06 c0       	rjmp	.+12     	; 0x3068 <fputc+0x3c>
    305c:	e8 85       	ldd	r30, Y+8	; 0x08
    305e:	f9 85       	ldd	r31, Y+9	; 0x09
    3060:	80 2f       	mov	r24, r16
    3062:	09 95       	icall
    3064:	89 2b       	or	r24, r25
    3066:	31 f4       	brne	.+12     	; 0x3074 <fputc+0x48>
    3068:	8e 81       	ldd	r24, Y+6	; 0x06
    306a:	9f 81       	ldd	r25, Y+7	; 0x07
    306c:	01 96       	adiw	r24, 0x01	; 1
    306e:	9f 83       	std	Y+7, r25	; 0x07
    3070:	8e 83       	std	Y+6, r24	; 0x06
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <fputc+0x4c>
    3074:	0f ef       	ldi	r16, 0xFF	; 255
    3076:	1f ef       	ldi	r17, 0xFF	; 255
    3078:	c8 01       	movw	r24, r16
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	08 95       	ret

00003084 <fputs>:
    3084:	ef 92       	push	r14
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	7c 01       	movw	r14, r24
    3092:	8b 01       	movw	r16, r22
    3094:	db 01       	movw	r26, r22
    3096:	13 96       	adiw	r26, 0x03	; 3
    3098:	8c 91       	ld	r24, X
    309a:	81 fd       	sbrc	r24, 1
    309c:	03 c0       	rjmp	.+6      	; 0x30a4 <fputs+0x20>
    309e:	cf ef       	ldi	r28, 0xFF	; 255
    30a0:	df ef       	ldi	r29, 0xFF	; 255
    30a2:	13 c0       	rjmp	.+38     	; 0x30ca <fputs+0x46>
    30a4:	c0 e0       	ldi	r28, 0x00	; 0
    30a6:	d0 e0       	ldi	r29, 0x00	; 0
    30a8:	0b c0       	rjmp	.+22     	; 0x30c0 <fputs+0x3c>
    30aa:	d8 01       	movw	r26, r16
    30ac:	18 96       	adiw	r26, 0x08	; 8
    30ae:	ed 91       	ld	r30, X+
    30b0:	fc 91       	ld	r31, X
    30b2:	19 97       	sbiw	r26, 0x09	; 9
    30b4:	b8 01       	movw	r22, r16
    30b6:	09 95       	icall
    30b8:	89 2b       	or	r24, r25
    30ba:	11 f0       	breq	.+4      	; 0x30c0 <fputs+0x3c>
    30bc:	cf ef       	ldi	r28, 0xFF	; 255
    30be:	df ef       	ldi	r29, 0xFF	; 255
    30c0:	f7 01       	movw	r30, r14
    30c2:	81 91       	ld	r24, Z+
    30c4:	7f 01       	movw	r14, r30
    30c6:	88 23       	and	r24, r24
    30c8:	81 f7       	brne	.-32     	; 0x30aa <fputs+0x26>
    30ca:	ce 01       	movw	r24, r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	e6 e0       	ldi	r30, 0x06	; 6
    30d2:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000030d6 <fscanf>:
    30d6:	a0 e0       	ldi	r26, 0x00	; 0
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e1 e7       	ldi	r30, 0x71	; 113
    30dc:	f8 e1       	ldi	r31, 0x18	; 24
    30de:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x20>
    30e2:	9e 01       	movw	r18, r28
    30e4:	27 5f       	subi	r18, 0xF7	; 247
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	6f 81       	ldd	r22, Y+7	; 0x07
    30ee:	78 85       	ldd	r23, Y+8	; 0x08
    30f0:	a9 01       	movw	r20, r18
    30f2:	0e 94 3d 14 	call	0x287a	; 0x287a <vfscanf>
    30f6:	20 96       	adiw	r28, 0x00	; 0
    30f8:	e2 e0       	ldi	r30, 0x02	; 2
    30fa:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x20>

000030fe <sprintf>:
    30fe:	ae e0       	ldi	r26, 0x0E	; 14
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e5 e8       	ldi	r30, 0x85	; 133
    3104:	f8 e1       	ldi	r31, 0x18	; 24
    3106:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x1c>
    310a:	0d 89       	ldd	r16, Y+21	; 0x15
    310c:	1e 89       	ldd	r17, Y+22	; 0x16
    310e:	86 e0       	ldi	r24, 0x06	; 6
    3110:	8c 83       	std	Y+4, r24	; 0x04
    3112:	1a 83       	std	Y+2, r17	; 0x02
    3114:	09 83       	std	Y+1, r16	; 0x01
    3116:	8f ef       	ldi	r24, 0xFF	; 255
    3118:	9f e7       	ldi	r25, 0x7F	; 127
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	9e 01       	movw	r18, r28
    3120:	27 5e       	subi	r18, 0xE7	; 231
    3122:	3f 4f       	sbci	r19, 0xFF	; 255
    3124:	ce 01       	movw	r24, r28
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	6f 89       	ldd	r22, Y+23	; 0x17
    312a:	78 8d       	ldd	r23, Y+24	; 0x18
    312c:	a9 01       	movw	r20, r18
    312e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <vfprintf>
    3132:	2f 81       	ldd	r18, Y+7	; 0x07
    3134:	38 85       	ldd	r19, Y+8	; 0x08
    3136:	02 0f       	add	r16, r18
    3138:	13 1f       	adc	r17, r19
    313a:	f8 01       	movw	r30, r16
    313c:	10 82       	st	Z, r1
    313e:	2e 96       	adiw	r28, 0x0e	; 14
    3140:	e4 e0       	ldi	r30, 0x04	; 4
    3142:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x1c>

00003146 <ungetc>:
    3146:	9c 01       	movw	r18, r24
    3148:	fb 01       	movw	r30, r22
    314a:	83 81       	ldd	r24, Z+3	; 0x03
    314c:	80 ff       	sbrs	r24, 0
    314e:	11 c0       	rjmp	.+34     	; 0x3172 <ungetc+0x2c>
    3150:	86 fd       	sbrc	r24, 6
    3152:	0f c0       	rjmp	.+30     	; 0x3172 <ungetc+0x2c>
    3154:	9f ef       	ldi	r25, 0xFF	; 255
    3156:	2f 3f       	cpi	r18, 0xFF	; 255
    3158:	39 07       	cpc	r19, r25
    315a:	59 f0       	breq	.+22     	; 0x3172 <ungetc+0x2c>
    315c:	22 83       	std	Z+2, r18	; 0x02
    315e:	80 64       	ori	r24, 0x40	; 64
    3160:	8f 7d       	andi	r24, 0xDF	; 223
    3162:	83 83       	std	Z+3, r24	; 0x03
    3164:	86 81       	ldd	r24, Z+6	; 0x06
    3166:	97 81       	ldd	r25, Z+7	; 0x07
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	97 83       	std	Z+7, r25	; 0x07
    316c:	86 83       	std	Z+6, r24	; 0x06
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <ungetc+0x30>
    3172:	2f ef       	ldi	r18, 0xFF	; 255
    3174:	3f ef       	ldi	r19, 0xFF	; 255
    3176:	c9 01       	movw	r24, r18
    3178:	08 95       	ret

0000317a <__ultoa_invert>:
    317a:	fa 01       	movw	r30, r20
    317c:	aa 27       	eor	r26, r26
    317e:	28 30       	cpi	r18, 0x08	; 8
    3180:	51 f1       	breq	.+84     	; 0x31d6 <__ultoa_invert+0x5c>
    3182:	20 31       	cpi	r18, 0x10	; 16
    3184:	81 f1       	breq	.+96     	; 0x31e6 <__ultoa_invert+0x6c>
    3186:	e8 94       	clt
    3188:	6f 93       	push	r22
    318a:	6e 7f       	andi	r22, 0xFE	; 254
    318c:	6e 5f       	subi	r22, 0xFE	; 254
    318e:	7f 4f       	sbci	r23, 0xFF	; 255
    3190:	8f 4f       	sbci	r24, 0xFF	; 255
    3192:	9f 4f       	sbci	r25, 0xFF	; 255
    3194:	af 4f       	sbci	r26, 0xFF	; 255
    3196:	b1 e0       	ldi	r27, 0x01	; 1
    3198:	3e d0       	rcall	.+124    	; 0x3216 <__ultoa_invert+0x9c>
    319a:	b4 e0       	ldi	r27, 0x04	; 4
    319c:	3c d0       	rcall	.+120    	; 0x3216 <__ultoa_invert+0x9c>
    319e:	67 0f       	add	r22, r23
    31a0:	78 1f       	adc	r23, r24
    31a2:	89 1f       	adc	r24, r25
    31a4:	9a 1f       	adc	r25, r26
    31a6:	a1 1d       	adc	r26, r1
    31a8:	68 0f       	add	r22, r24
    31aa:	79 1f       	adc	r23, r25
    31ac:	8a 1f       	adc	r24, r26
    31ae:	91 1d       	adc	r25, r1
    31b0:	a1 1d       	adc	r26, r1
    31b2:	6a 0f       	add	r22, r26
    31b4:	71 1d       	adc	r23, r1
    31b6:	81 1d       	adc	r24, r1
    31b8:	91 1d       	adc	r25, r1
    31ba:	a1 1d       	adc	r26, r1
    31bc:	20 d0       	rcall	.+64     	; 0x31fe <__ultoa_invert+0x84>
    31be:	09 f4       	brne	.+2      	; 0x31c2 <__ultoa_invert+0x48>
    31c0:	68 94       	set
    31c2:	3f 91       	pop	r19
    31c4:	2a e0       	ldi	r18, 0x0A	; 10
    31c6:	26 9f       	mul	r18, r22
    31c8:	11 24       	eor	r1, r1
    31ca:	30 19       	sub	r19, r0
    31cc:	30 5d       	subi	r19, 0xD0	; 208
    31ce:	31 93       	st	Z+, r19
    31d0:	de f6       	brtc	.-74     	; 0x3188 <__ultoa_invert+0xe>
    31d2:	cf 01       	movw	r24, r30
    31d4:	08 95       	ret
    31d6:	46 2f       	mov	r20, r22
    31d8:	47 70       	andi	r20, 0x07	; 7
    31da:	40 5d       	subi	r20, 0xD0	; 208
    31dc:	41 93       	st	Z+, r20
    31de:	b3 e0       	ldi	r27, 0x03	; 3
    31e0:	0f d0       	rcall	.+30     	; 0x3200 <__ultoa_invert+0x86>
    31e2:	c9 f7       	brne	.-14     	; 0x31d6 <__ultoa_invert+0x5c>
    31e4:	f6 cf       	rjmp	.-20     	; 0x31d2 <__ultoa_invert+0x58>
    31e6:	46 2f       	mov	r20, r22
    31e8:	4f 70       	andi	r20, 0x0F	; 15
    31ea:	40 5d       	subi	r20, 0xD0	; 208
    31ec:	4a 33       	cpi	r20, 0x3A	; 58
    31ee:	18 f0       	brcs	.+6      	; 0x31f6 <__ultoa_invert+0x7c>
    31f0:	49 5d       	subi	r20, 0xD9	; 217
    31f2:	31 fd       	sbrc	r19, 1
    31f4:	40 52       	subi	r20, 0x20	; 32
    31f6:	41 93       	st	Z+, r20
    31f8:	02 d0       	rcall	.+4      	; 0x31fe <__ultoa_invert+0x84>
    31fa:	a9 f7       	brne	.-22     	; 0x31e6 <__ultoa_invert+0x6c>
    31fc:	ea cf       	rjmp	.-44     	; 0x31d2 <__ultoa_invert+0x58>
    31fe:	b4 e0       	ldi	r27, 0x04	; 4
    3200:	a6 95       	lsr	r26
    3202:	97 95       	ror	r25
    3204:	87 95       	ror	r24
    3206:	77 95       	ror	r23
    3208:	67 95       	ror	r22
    320a:	ba 95       	dec	r27
    320c:	c9 f7       	brne	.-14     	; 0x3200 <__ultoa_invert+0x86>
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	61 05       	cpc	r22, r1
    3212:	71 05       	cpc	r23, r1
    3214:	08 95       	ret
    3216:	9b 01       	movw	r18, r22
    3218:	ac 01       	movw	r20, r24
    321a:	0a 2e       	mov	r0, r26
    321c:	06 94       	lsr	r0
    321e:	57 95       	ror	r21
    3220:	47 95       	ror	r20
    3222:	37 95       	ror	r19
    3224:	27 95       	ror	r18
    3226:	ba 95       	dec	r27
    3228:	c9 f7       	brne	.-14     	; 0x321c <__ultoa_invert+0xa2>
    322a:	62 0f       	add	r22, r18
    322c:	73 1f       	adc	r23, r19
    322e:	84 1f       	adc	r24, r20
    3230:	95 1f       	adc	r25, r21
    3232:	a0 1d       	adc	r26, r0
    3234:	08 95       	ret

00003236 <__ctype_isfalse>:
    3236:	99 27       	eor	r25, r25
    3238:	88 27       	eor	r24, r24

0000323a <__ctype_istrue>:
    323a:	08 95       	ret

0000323c <_exit>:
    323c:	f8 94       	cli

0000323e <__stop_program>:
    323e:	ff cf       	rjmp	.-2      	; 0x323e <__stop_program>
