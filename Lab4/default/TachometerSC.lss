
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00003912  000039a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  008001a2  008001a2  00003a48  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004be  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a49  00000000  00000000  00004046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001056  00000000  00000000  00006a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cdd  00000000  00000000  00007ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  000097c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000818  00000000  00000000  00009bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001481  00000000  00000000  0000a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_1>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_11>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_13>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_21>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000070 <__c.1790>:
      70:	6e 61 6e 00                                         nan.

00000074 <__c.1788>:
      74:	69 6e 66 00                                         inf.

00000078 <__c.2085>:
      78:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      88:	47 00                                               G.

0000008a <pstr_an>:
      8a:	61 6e 00                                            an.

0000008d <pstr_nfinity>:
      8d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000095 <pwr_m10>:
      95:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ad <pwr_p10>:
      ad:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bd:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000c5 <LcdCustomChar>:
      c5:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d5:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e5:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f5:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     105:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     115:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     125:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     135:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     145:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     155:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     165:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     175:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     185:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     195:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     1a5:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     1b5:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     1c5:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     1d5:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1e5:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1f5:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e1       	ldi	r29, 0x10	; 16
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e2 e1       	ldi	r30, 0x12	; 18
     214:	f9 e3       	ldi	r31, 0x39	; 57
     216:	02 c0       	rjmp	.+4      	; 0x21c <.do_copy_data_start>

00000218 <.do_copy_data_loop>:
     218:	05 90       	lpm	r0, Z+
     21a:	0d 92       	st	X+, r0

0000021c <.do_copy_data_start>:
     21c:	a2 3a       	cpi	r26, 0xA2	; 162
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <.do_copy_data_loop>

00000222 <__do_clear_bss>:
     222:	13 e0       	ldi	r17, 0x03	; 3
     224:	a2 ea       	ldi	r26, 0xA2	; 162
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	aa 31       	cpi	r26, 0x1A	; 26
     22e:	b1 07       	cpc	r27, r17
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 a7 06 	call	0xd4e	; 0xd4e <main>
     236:	0c 94 87 1c 	jmp	0x390e	; 0x390e <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     284:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     288:	50 90 c8 02 	lds	r5, 0x02C8
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     28c:	b0 9b       	sbis	0x16, 0	; 22
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_13+0x7a>
    ++kernel.cycles;
     290:	80 91 09 03 	lds	r24, 0x0309
     294:	90 91 0a 03 	lds	r25, 0x030A
     298:	a0 91 0b 03 	lds	r26, 0x030B
     29c:	b0 91 0c 03 	lds	r27, 0x030C
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 09 03 	sts	0x0309, r24
     2aa:	90 93 0a 03 	sts	0x030A, r25
     2ae:	a0 93 0b 03 	sts	0x030B, r26
     2b2:	b0 93 0c 03 	sts	0x030C, r27
    TIFR1 |= (1<<TOV1) ;
     2b6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2b8:	80 91 84 00 	lds	r24, 0x0084
     2bc:	90 91 85 00 	lds	r25, 0x0085
     2c0:	3c 01       	movw	r6, r24
     2c2:	88 24       	eor	r8, r8
     2c4:	99 24       	eor	r9, r9
     2c6:	80 91 09 03 	lds	r24, 0x0309
     2ca:	90 91 0a 03 	lds	r25, 0x030A
     2ce:	a0 91 0b 03 	lds	r26, 0x030B
     2d2:	b0 91 0c 03 	lds	r27, 0x030C
     2d6:	dc 01       	movw	r26, r24
     2d8:	99 27       	eor	r25, r25
     2da:	88 27       	eor	r24, r24
     2dc:	68 0e       	add	r6, r24
     2de:	79 1e       	adc	r7, r25
     2e0:	8a 1e       	adc	r8, r26
     2e2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	40 90 c7 02 	lds	r4, 0x02C7
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	af 2e       	mov	r10, r31
     2f0:	ff ef       	ldi	r31, 0xFF	; 255
     2f2:	bf 2e       	mov	r11, r31
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 2e       	mov	r12, r31
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     300:	33 24       	eor	r3, r3
     302:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     304:	cb e0       	ldi	r28, 0x0B	; 11
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	43 c0       	rjmp	.+134    	; 0x390 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     30a:	62 9d       	mul	r22, r2
     30c:	d0 01       	movw	r26, r0
     30e:	11 24       	eor	r1, r1
     310:	a7 53       	subi	r26, 0x37	; 55
     312:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	a1 f4       	brne	.+40     	; 0x346 <__vector_13+0x108>
      if (t->release <= now) {
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	ed 90       	ld	r14, X+
     322:	fd 90       	ld	r15, X+
     324:	0d 91       	ld	r16, X+
     326:	1c 91       	ld	r17, X
     328:	15 97       	sbiw	r26, 0x05	; 5
     32a:	6e 14       	cp	r6, r14
     32c:	7f 04       	cpc	r7, r15
     32e:	80 06       	cpc	r8, r16
     330:	91 06       	cpc	r9, r17
     332:	20 f0       	brcs	.+8      	; 0x33c <__vector_13+0xfe>
	t->state = READYQ;
     334:	1a 96       	adiw	r26, 0x0a	; 10
     336:	3c 92       	st	X, r3
     338:	1a 97       	sbiw	r26, 0x0a	; 10
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     33c:	ea 14       	cp	r14, r10
     33e:	fb 04       	cpc	r15, r11
     340:	0c 05       	cpc	r16, r12
     342:	1d 05       	cpc	r17, r13
     344:	10 f0       	brcs	.+4      	; 0x34a <__vector_13+0x10c>
     346:	86 01       	movw	r16, r12
     348:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     34a:	1a 96       	adiw	r26, 0x0a	; 10
     34c:	8c 91       	ld	r24, X
     34e:	1a 97       	sbiw	r26, 0x0a	; 10
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	d9 f4       	brne	.+54     	; 0x38a <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     354:	87 2f       	mov	r24, r23
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	9c 9f       	mul	r25, r28
     362:	f0 0d       	add	r31, r0
     364:	11 24       	eor	r1, r1
     366:	e9 53       	subi	r30, 0x39	; 57
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	16 96       	adiw	r26, 0x06	; 6
     36c:	2d 91       	ld	r18, X+
     36e:	3d 91       	ld	r19, X+
     370:	4d 91       	ld	r20, X+
     372:	5c 91       	ld	r21, X
     374:	19 97       	sbiw	r26, 0x09	; 9
     376:	80 85       	ldd	r24, Z+8	; 0x08
     378:	91 85       	ldd	r25, Z+9	; 0x09
     37a:	a2 85       	ldd	r26, Z+10	; 0x0a
     37c:	b3 85       	ldd	r27, Z+11	; 0x0b
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	4a 07       	cpc	r20, r26
     384:	5b 07       	cpc	r21, r27
     386:	08 f4       	brcc	.+2      	; 0x38a <__vector_13+0x14c>
     388:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	57 01       	movw	r10, r14
     38e:	68 01       	movw	r12, r16
     390:	46 16       	cp	r4, r22
     392:	08 f0       	brcs	.+2      	; 0x396 <__vector_13+0x158>
     394:	ba cf       	rjmp	.-140    	; 0x30a <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     396:	75 15       	cp	r23, r5
     398:	b1 f0       	breq	.+44     	; 0x3c6 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	5e 9e       	mul	r5, r30
     39e:	d0 01       	movw	r26, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	a7 53       	subi	r26, 0x37	; 55
     3a4:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     3a6:	8d b7       	in	r24, 0x3d	; 61
     3a8:	8c 93       	st	X, r24
    t->sph = SPH;
     3aa:	8e b7       	in	r24, 0x3e	; 62
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3b0:	7e 9f       	mul	r23, r30
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	e7 53       	subi	r30, 0x37	; 55
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3be:	80 81       	ld	r24, Z
     3c0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3c2:	70 93 c8 02 	sts	0x02C8, r23

  }

  kernel.nextHit = nextHit;  
     3c6:	a0 92 0d 03 	sts	0x030D, r10
     3ca:	b0 92 0e 03 	sts	0x030E, r11
     3ce:	c0 92 0f 03 	sts	0x030F, r12
     3d2:	d0 92 10 03 	sts	0x0310, r13

  now = (kernel.cycles << 16) + TCNT1;
     3d6:	20 91 84 00 	lds	r18, 0x0084
     3da:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	80 91 09 03 	lds	r24, 0x0309
     3e6:	90 91 0a 03 	lds	r25, 0x030A
     3ea:	a0 91 0b 03 	lds	r26, 0x030B
     3ee:	b0 91 0c 03 	lds	r27, 0x030C
     3f2:	dc 01       	movw	r26, r24
     3f4:	99 27       	eor	r25, r25
     3f6:	88 27       	eor	r24, r24
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	4a 1f       	adc	r20, r26
     3fe:	5b 1f       	adc	r21, r27
     400:	d6 01       	movw	r26, r12
     402:	c5 01       	movw	r24, r10
     404:	82 1b       	sub	r24, r18
     406:	93 0b       	sbc	r25, r19
     408:	a4 0b       	sbc	r26, r20
     40a:	b5 0b       	sbc	r27, r21
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	a1 05       	cpc	r26, r1
     416:	b1 05       	cpc	r27, r1
     418:	24 f4       	brge	.+8      	; 0x422 <__vector_13+0x1e4>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     422:	80 91 84 00 	lds	r24, 0x0084
     426:	90 91 85 00 	lds	r25, 0x0085
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	a4 1f       	adc	r26, r20
     434:	b5 1f       	adc	r27, r21
     436:	80 50       	subi	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	a1 40       	sbci	r26, 0x01	; 1
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	38 f4       	brcc	.+14     	; 0x44e <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     44e:	80 91 84 00 	lds	r24, 0x0084
     452:	90 91 85 00 	lds	r25, 0x0085
     456:	8c 5f       	subi	r24, 0xFC	; 252
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	28 f4       	brcc	.+10     	; 0x466 <__vector_13+0x228>
    OCR1A = 0x0000;
     45c:	10 92 89 00 	sts	0x0089, r1
     460:	10 92 88 00 	sts	0x0088, r1
     464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 89 00 	sts	0x0089, r25
     46e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6f 00 	sts	0x006F, r24
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	3f 90       	pop	r3
     4b2:	2f 90       	pop	r2
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4c6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	28 1b       	sub	r18, r24
     4dc:	39 0b       	sbc	r19, r25
     4de:	30 93 08 03 	sts	0x0308, r19
     4e2:	20 93 07 03 	sts	0x0307, r18
  kernel.nbrOfTasks = 0;
     4e6:	10 92 c7 02 	sts	0x02C7, r1
  kernel.running = 0;
     4ea:	10 92 c8 02 	sts	0x02C8, r1

  kernel.cycles = 0x0000;
     4ee:	10 92 09 03 	sts	0x0309, r1
     4f2:	10 92 0a 03 	sts	0x030A, r1
     4f6:	10 92 0b 03 	sts	0x030B, r1
     4fa:	10 92 0c 03 	sts	0x030C, r1
  kernel.nextHit = 0x7FFFFFFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	af ef       	ldi	r26, 0xFF	; 255
     504:	bf e7       	ldi	r27, 0x7F	; 127
     506:	80 93 0d 03 	sts	0x030D, r24
     50a:	90 93 0e 03 	sts	0x030E, r25
     50e:	a0 93 0f 03 	sts	0x030F, r26
     512:	b0 93 10 03 	sts	0x0310, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     516:	80 93 cf 02 	sts	0x02CF, r24
     51a:	90 93 d0 02 	sts	0x02D0, r25
     51e:	a0 93 d1 02 	sts	0x02D1, r26
     522:	b0 93 d2 02 	sts	0x02D2, r27
  kernel.tasks[0].release = 0x00000000;
     526:	10 92 cb 02 	sts	0x02CB, r1
     52a:	10 92 cc 02 	sts	0x02CC, r1
     52e:	10 92 cd 02 	sts	0x02CD, r1
     532:	10 92 ce 02 	sts	0x02CE, r1

  sei(); /* set enabled interrupts */
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	49 01       	movw	r8, r18
     554:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     556:	f8 94       	cli

  ++kernel.nbrOfTasks;
     558:	20 91 c7 02 	lds	r18, 0x02C7
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	20 93 c7 02 	sts	0x02C7, r18

  sp = kernel.memptr;
     562:	c0 91 07 03 	lds	r28, 0x0307
     566:	d0 91 08 03 	lds	r29, 0x0308
  kernel.memptr -= stacksize;  // decrease free mem ptr
     56a:	9e 01       	movw	r18, r28
     56c:	26 1b       	sub	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	30 93 08 03 	sts	0x0308, r19
     574:	20 93 07 03 	sts	0x0307, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     578:	88 83       	st	Y, r24
     57a:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     57c:	92 93       	st	-Z, r25
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     582:	ce 01       	movw	r24, r28
     584:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     58a:	a8 17       	cp	r26, r24
     58c:	b9 07       	cpc	r27, r25
     58e:	d9 f7       	brne	.-10     	; 0x586 <trtCreateTask+0x4c>
     590:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     592:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     594:	d2 92       	st	-Z, r13
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     59a:	9e 01       	movw	r18, r28
     59c:	23 52       	subi	r18, 0x23	; 35
     59e:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5a0:	1c 92       	st	X, r1
     5a2:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5a4:	a2 17       	cp	r26, r18
     5a6:	b3 07       	cpc	r27, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <trtCreateTask+0x66>
     5aa:	9f 01       	movw	r18, r30
     5ac:	26 50       	subi	r18, 0x06	; 6
     5ae:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5b0:	e0 91 c7 02 	lds	r30, 0x02C7
     5b4:	8b e0       	ldi	r24, 0x0B	; 11
     5b6:	e8 9f       	mul	r30, r24
     5b8:	f0 01       	movw	r30, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	e7 53       	subi	r30, 0x37	; 55
     5be:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     5c0:	82 82       	std	Z+2, r8	; 0x02
     5c2:	93 82       	std	Z+3, r9	; 0x03
     5c4:	a4 82       	std	Z+4, r10	; 0x04
     5c6:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	f7 82       	std	Z+7, r15	; 0x07
     5cc:	00 87       	std	Z+8, r16	; 0x08
     5ce:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     5d4:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5d6:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>

}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5f6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5f8:	e7 ec       	ldi	r30, 0xC7	; 199
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     602:	78 94       	sei
}
     604:	08 95       	ret

00000606 <trtWait>:

void trtWait(uint8_t semnbr) {
     606:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     608:	20 91 c8 02 	lds	r18, 0x02C8

  cli(); // disable interrupts
     60c:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     60e:	e8 2f       	mov	r30, r24
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e1 50       	subi	r30, 0x01	; 1
     614:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	19 f0       	breq	.+6      	; 0x622 <trtWait+0x1c>
    (*s)--;
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	10 c0       	rjmp	.+32     	; 0x642 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e7 53       	subi	r30, 0x37	; 55
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	4e 5f       	subi	r20, 0xFE	; 254
     63c:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	08 95       	ret

00000646 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     64e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     650:	00 91 c7 02 	lds	r16, 0x02C7
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	4f ef       	ldi	r20, 0xFF	; 255
     658:	5f ef       	ldi	r21, 0xFF	; 255
     65a:	6f ef       	ldi	r22, 0xFF	; 255
     65c:	7f ef       	ldi	r23, 0xFF	; 255
     65e:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     664:	21 2f       	mov	r18, r17
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     66e:	ef 9d       	mul	r30, r15
     670:	d0 01       	movw	r26, r0
     672:	11 24       	eor	r1, r1
     674:	a7 53       	subi	r26, 0x37	; 55
     676:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 91       	ld	r24, X
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	69 f4       	brne	.+26     	; 0x6a0 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8d 91       	ld	r24, X+
     68a:	9d 91       	ld	r25, X+
     68c:	0d 90       	ld	r0, X+
     68e:	bc 91       	ld	r27, X
     690:	a0 2d       	mov	r26, r0
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <trtSignal+0x5a>
     69c:	fe 2f       	mov	r31, r30
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <trtSignal+0x5e>
     6a0:	db 01       	movw	r26, r22
     6a2:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	0e 17       	cp	r16, r30
     6ac:	00 f7       	brcc	.-64     	; 0x66e <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6ae:	ff 23       	and	r31, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6b2:	e1 2f       	mov	r30, r17
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ea 53       	subi	r30, 0x3A	; 58
     6b8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ba:	81 ad       	ldd	r24, Z+57	; 0x39
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	81 af       	std	Z+57, r24	; 0x39
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6c2:	2f 2f       	mov	r18, r31
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	e9 53       	subi	r30, 0x39	; 57
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6ee:	20 91 84 00 	lds	r18, 0x0084
     6f2:	30 91 85 00 	lds	r19, 0x0085
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	80 91 09 03 	lds	r24, 0x0309
     6fe:	90 91 0a 03 	lds	r25, 0x030A
     702:	a0 91 0b 03 	lds	r26, 0x030B
     706:	b0 91 0c 03 	lds	r27, 0x030C
     70a:	dc 01       	movw	r26, r24
     70c:	99 27       	eor	r25, r25
     70e:	88 27       	eor	r24, r24
     710:	28 0f       	add	r18, r24
     712:	39 1f       	adc	r19, r25
     714:	4a 1f       	adc	r20, r26
     716:	5b 1f       	adc	r21, r27
}
     718:	b9 01       	movw	r22, r18
     71a:	ca 01       	movw	r24, r20
     71c:	08 95       	ret

0000071e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     71e:	e0 91 c8 02 	lds	r30, 0x02C8
     722:	ab e0       	ldi	r26, 0x0B	; 11
     724:	ea 9f       	mul	r30, r26
     726:	f0 01       	movw	r30, r0
     728:	11 24       	eor	r1, r1
     72a:	e7 53       	subi	r30, 0x37	; 55
     72c:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     72e:	f8 94       	cli

  t->state = TIMEQ;
     730:	a2 e0       	ldi	r26, 0x02	; 2
     732:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     73c:	26 83       	std	Z+6, r18	; 0x06
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	40 87       	std	Z+8, r20	; 0x08
     742:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     744:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     748:	08 95       	ret

0000074a <trtGetRelease>:


uint32_t trtGetRelease(void) {
     74a:	80 91 c8 02 	lds	r24, 0x02C8
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2b e0       	ldi	r18, 0x0B	; 11
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	82 9f       	mul	r24, r18
     756:	f0 01       	movw	r30, r0
     758:	83 9f       	mul	r24, r19
     75a:	f0 0d       	add	r31, r0
     75c:	92 9f       	mul	r25, r18
     75e:	f0 0d       	add	r31, r0
     760:	11 24       	eor	r1, r1
     762:	e9 53       	subi	r30, 0x39	; 57
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	df 01       	movw	r26, r30
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	64 81       	ldd	r22, Z+4	; 0x04
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     77e:	80 91 c8 02 	lds	r24, 0x02C8
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	82 9f       	mul	r24, r18
     78a:	f0 01       	movw	r30, r0
     78c:	83 9f       	mul	r24, r19
     78e:	f0 0d       	add	r31, r0
     790:	92 9f       	mul	r25, r18
     792:	f0 0d       	add	r31, r0
     794:	11 24       	eor	r1, r1
     796:	e9 53       	subi	r30, 0x39	; 57
     798:	fd 4f       	sbci	r31, 0xFD	; 253
     79a:	df 01       	movw	r26, r30
     79c:	18 96       	adiw	r26, 0x08	; 8
     79e:	60 85       	ldd	r22, Z+8	; 0x08
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	7c 91       	ld	r23, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	12 97       	sbiw	r26, 0x02	; 2
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 91       	ld	r25, X
     7b0:	08 95       	ret

000007b2 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7b2:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7b4:	80 91 c8 02 	lds	r24, 0x02C8
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	e9 53       	subi	r30, 0x39	; 57
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7d2:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     7d6:	08 95       	ret

000007d8 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7d8:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e1 50       	subi	r30, 0x01	; 1
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     7e2:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <trtAccept+0x16>
    (*s)--;
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7ee:	78 94       	sei
  return temp ;
}
     7f0:	08 95       	ret

000007f2 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7f2:	87 e6       	ldi	r24, 0x67	; 103
     7f4:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7f8:	e1 ec       	ldi	r30, 0xC1	; 193
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	88 e1       	ldi	r24, 0x18	; 24
     7fe:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     800:	10 92 f5 01 	sts	0x01F5, r1
     804:	10 92 f4 01 	sts	0x01F4, r1
  tx_out = 0;
     808:	10 92 f7 01 	sts	0x01F7, r1
     80c:	10 92 f6 01 	sts	0x01F6, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     810:	80 81       	ld	r24, Z
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 83       	st	Z, r24
}
     816:	08 95       	ret

00000818 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     82e:	20 91 f4 01 	lds	r18, 0x01F4
     832:	30 91 f5 01 	lds	r19, 0x01F5
     836:	80 91 f6 01 	lds	r24, 0x01F6
     83a:	90 91 f7 01 	lds	r25, 0x01F7
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	31 f4       	brne	.+12     	; 0x850 <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     844:	80 91 c1 00 	lds	r24, 0x00C1
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 93 c1 00 	sts	0x00C1, r24
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     850:	e0 91 f6 01 	lds	r30, 0x01F6
     854:	f0 91 f7 01 	lds	r31, 0x01F7
     858:	e8 50       	subi	r30, 0x08	; 8
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	80 81       	ld	r24, Z
     85e:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     862:	80 91 f6 01 	lds	r24, 0x01F6
     866:	90 91 f7 01 	lds	r25, 0x01F7
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 f7 01 	sts	0x01F7, r25
     870:	80 93 f6 01 	sts	0x01F6, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     874:	80 91 f6 01 	lds	r24, 0x01F6
     878:	90 91 f7 01 	lds	r25, 0x01F7
     87c:	88 3c       	cpi	r24, 0xC8	; 200
     87e:	91 05       	cpc	r25, r1
     880:	21 f4       	brne	.+8      	; 0x88a <__vector_21+0x72>
     882:	10 92 f7 01 	sts	0x01F7, r1
     886:	10 92 f6 01 	sts	0x01F6, r1
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8a0:	1f 93       	push	r17
     8a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	19 f4       	brne	.+6      	; 0x8ae <uart_putchar+0xe>
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
  char i = tx_in;
     8ae:	80 91 f4 01 	lds	r24, 0x01F4
     8b2:	90 91 f5 01 	lds	r25, 0x01F5
  i++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b8:	88 3c       	cpi	r24, 0xC8	; 200
     8ba:	09 f4       	brne	.+2      	; 0x8be <uart_putchar+0x1e>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8be:	e0 91 f4 01 	lds	r30, 0x01F4
     8c2:	f0 91 f5 01 	lds	r31, 0x01F5
     8c6:	e8 50       	subi	r30, 0x08	; 8
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	80 91 f6 01 	lds	r24, 0x01F6
     8d4:	90 91 f7 01 	lds	r25, 0x01F7
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	c9 f3       	breq	.-14     	; 0x8d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8de:	30 93 f5 01 	sts	0x01F5, r19
     8e2:	20 93 f4 01 	sts	0x01F4, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	1f 91       	pop	r17
     8f6:	08 95       	ret

000008f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91a:	80 91 c6 00 	lds	r24, 0x00C6
     91e:	80 93 11 03 	sts	0x0311, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     958:	80 91 a2 01 	lds	r24, 0x01A2
     95c:	90 91 a3 01 	lds	r25, 0x01A3
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <uart_getchar+0x1c>
     964:	a1 c0       	rjmp	.+322    	; 0xaa8 <uart_getchar+0x15e>
     966:	04 ea       	ldi	r16, 0xA4	; 164
     968:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	if (UCSR0A & _BV(FE0))
     970:	80 91 c0 00 	lds	r24, 0x00C0
     974:	84 ff       	sbrs	r24, 4
     976:	03 c0       	rjmp	.+6      	; 0x97e <uart_getchar+0x34>
     978:	2e ef       	ldi	r18, 0xFE	; 254
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	a9 c0       	rjmp	.+338    	; 0xad0 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     97e:	80 91 c0 00 	lds	r24, 0x00C0
     982:	83 fd       	sbrc	r24, 3
     984:	a3 c0       	rjmp	.+326    	; 0xacc <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     986:	90 91 11 03 	lds	r25, 0x0311

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     98a:	9d 30       	cpi	r25, 0x0D	; 13
     98c:	11 f0       	breq	.+4      	; 0x992 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	81 f4       	brne	.+32     	; 0x9b2 <uart_getchar+0x68>
	  {
	    *cp = c;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	f8 01       	movw	r30, r16
     996:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	    rxp = b;
     99e:	84 ea       	ldi	r24, 0xA4	; 164
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	90 93 a3 01 	sts	0x01A3, r25
     9a6:	80 93 a2 01 	sts	0x01A2, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b2:	99 30       	cpi	r25, 0x09	; 9
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <uart_getchar+0x6e>
     9b6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9b8:	89 2f       	mov	r24, r25
     9ba:	80 52       	subi	r24, 0x20	; 32
     9bc:	8f 35       	cpi	r24, 0x5F	; 95
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <uart_getchar+0x7a>
     9c0:	90 3a       	cpi	r25, 0xA0	; 160
     9c2:	70 f0       	brcs	.+28     	; 0x9e0 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	03 3f       	cpi	r16, 0xF3	; 243
     9c8:	1f 07       	cpc	r17, r31
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d0:	f8 01       	movw	r30, r16
     9d2:	91 93       	st	Z+, r25
     9d4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9d6:	89 2f       	mov	r24, r25
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     9de:	c5 cf       	rjmp	.-118    	; 0x96a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e0:	92 31       	cpi	r25, 0x12	; 18
     9e2:	39 f1       	breq	.+78     	; 0xa32 <uart_getchar+0xe8>
     9e4:	93 31       	cpi	r25, 0x13	; 19
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <uart_getchar+0xac>
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <uart_getchar+0xa4>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <uart_getchar+0x182>
     9ee:	98 30       	cpi	r25, 0x08	; 8
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <uart_getchar+0xaa>
     9f2:	bb cf       	rjmp	.-138    	; 0x96a <uart_getchar+0x20>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <uart_getchar+0xbe>
     9f6:	97 31       	cpi	r25, 0x17	; 23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <uart_getchar+0xb2>
     9fa:	4b c0       	rjmp	.+150    	; 0xa92 <uart_getchar+0x148>
     9fc:	9f 37       	cpi	r25, 0x7F	; 127
     9fe:	21 f0       	breq	.+8      	; 0xa08 <uart_getchar+0xbe>
     a00:	95 31       	cpi	r25, 0x15	; 21
     a02:	09 f0       	breq	.+2      	; 0xa06 <uart_getchar+0xbc>
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <uart_getchar+0x20>
     a06:	32 c0       	rjmp	.+100    	; 0xa6c <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	04 3a       	cpi	r16, 0xA4	; 164
     a0c:	1f 07       	cpc	r17, r31
     a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_getchar+0xc8>
     a10:	08 f4       	brcc	.+2      	; 0xa14 <uart_getchar+0xca>
     a12:	ab cf       	rjmp	.-170    	; 0x96a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	10 40       	sbci	r17, 0x00	; 0
     a30:	9c cf       	rjmp	.-200    	; 0x96a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a3a:	c4 ea       	ldi	r28, 0xA4	; 164
     a3c:	d1 e0       	ldi	r29, 0x01	; 1
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a40:	89 91       	ld	r24, Y+
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a48:	c0 17       	cp	r28, r16
     a4a:	d1 07       	cpc	r29, r17
     a4c:	c8 f3       	brcs	.-14     	; 0xa40 <uart_getchar+0xf6>
     a4e:	8d cf       	rjmp	.-230    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	04 3a       	cpi	r16, 0xA4	; 164
     a70:	18 07       	cpc	r17, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <uart_getchar+0x12c>
     a74:	68 f7       	brcc	.-38     	; 0xa50 <uart_getchar+0x106>
     a76:	79 cf       	rjmp	.-270    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a90:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a92:	e1 e0       	ldi	r30, 0x01	; 1
     a94:	04 3a       	cpi	r16, 0xA4	; 164
     a96:	1e 07       	cpc	r17, r30
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x152>
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <uart_getchar+0x154>
     a9c:	66 cf       	rjmp	.-308    	; 0x96a <uart_getchar+0x20>
     a9e:	e8 01       	movw	r28, r16
     aa0:	8a 91       	ld	r24, -Y
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	49 f7       	brne	.-46     	; 0xa78 <uart_getchar+0x12e>
     aa6:	61 cf       	rjmp	.-318    	; 0x96a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aa8:	e0 91 a2 01 	lds	r30, 0x01A2
     aac:	f0 91 a3 01 	lds	r31, 0x01A3
     ab0:	81 91       	ld	r24, Z+
     ab2:	f0 93 a3 01 	sts	0x01A3, r31
     ab6:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <uart_getchar+0x17c>
    rxp = 0;
     abe:	10 92 a3 01 	sts	0x01A3, r1
     ac2:	10 92 a2 01 	sts	0x01A2, r1

  return c;
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <uart_getchar+0x186>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad0:	c9 01       	movw	r24, r18
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <__vector_1>:
//function signatures
void setParam(uint8_t, float); //Helper method for setting PID parameters
void InitLCD(void);

// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf  ;
     af4:	e2 eb       	ldi	r30, 0xB2	; 178
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	20 81       	ld	r18, Z
     afa:	80 91 c5 02 	lds	r24, 0x02C5
     afe:	90 91 c6 02 	lds	r25, 0x02C6
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	90 93 13 03 	sts	0x0313, r25
     b0a:	80 93 12 03 	sts	0x0312, r24
        TCNT2 = 0 ;
     b0e:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     b10:	10 92 c6 02 	sts	0x02C6, r1
     b14:	10 92 c5 02 	sts	0x02C5, r1
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     b3a:	80 91 c5 02 	lds	r24, 0x02C5
     b3e:	90 91 c6 02 	lds	r25, 0x02C6
     b42:	80 50       	subi	r24, 0x00	; 0
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	90 93 c6 02 	sts	0x02C6, r25
     b4a:	80 93 c5 02 	sts	0x02C5, r24
}
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <pidControl>:

//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void pidControl(void* args) 
  {	
     b5c:	2f 92       	push	r2
     b5e:	3f 92       	push	r3
     b60:	4f 92       	push	r4
     b62:	5f 92       	push	r5
     b64:	6f 92       	push	r6
     b66:	7f 92       	push	r7
     b68:	8f 92       	push	r8
     b6a:	9f 92       	push	r9
     b6c:	af 92       	push	r10
     b6e:	bf 92       	push	r11
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <pidControl+0x26>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <pidControl+0x28>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62

	while(1)
	{
		prevOmega = localOmega;
		prevSign = sign;
		localOmega = ((20000000 / 1024) / 7) / motor_period;
     b8a:	20 91 12 03 	lds	r18, 0x0312
     b8e:	30 91 13 03 	lds	r19, 0x0313
     b92:	44 27       	eor	r20, r20
     b94:	37 fd       	sbrc	r19, 7
     b96:	40 95       	com	r20
     b98:	54 2f       	mov	r21, r20
     b9a:	66 ee       	ldi	r22, 0xE6	; 230
     b9c:	7a e0       	ldi	r23, 0x0A	; 10
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 ac 19 	call	0x3358	; 0x3358 <__divmodsi4>
     ba6:	79 01       	movw	r14, r18
     ba8:	8a 01       	movw	r16, r20
     baa:	69 01       	movw	r12, r18

		trtWait(SEM_OMEGA);
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		omega = localOmega;
     bb2:	f0 92 98 01 	sts	0x0198, r15
     bb6:	e0 92 97 01 	sts	0x0197, r14
		trtSignal(SEM_OMEGA);
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_OMEGA_REF);
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localOmegaRef = omegaRef;
     bc6:	20 91 93 01 	lds	r18, 0x0193
     bca:	30 91 94 01 	lds	r19, 0x0194
     bce:	3d 83       	std	Y+5, r19	; 0x05
     bd0:	2c 83       	std	Y+4, r18	; 0x04
		trtSignal(SEM_OMEGA_REF);
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_P);
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_p = k_p;
     bde:	e0 90 87 01 	lds	r14, 0x0187
     be2:	f0 90 88 01 	lds	r15, 0x0188
     be6:	00 91 89 01 	lds	r16, 0x0189
     bea:	10 91 8a 01 	lds	r17, 0x018A
		trtSignal(SEM_K_P);
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_I);
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_i = k_i;
     bfa:	80 90 8b 01 	lds	r8, 0x018B
     bfe:	90 90 8c 01 	lds	r9, 0x018C
     c02:	a0 90 8d 01 	lds	r10, 0x018D
     c06:	b0 90 8e 01 	lds	r11, 0x018E
		trtSignal(SEM_K_I);
     c0a:	85 e0       	ldi	r24, 0x05	; 5
     c0c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_D);
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_d = k_d;
     c16:	40 90 8f 01 	lds	r4, 0x018F
     c1a:	50 90 90 01 	lds	r5, 0x0190
     c1e:	60 90 91 01 	lds	r6, 0x0191
     c22:	70 90 92 01 	lds	r7, 0x0192
		trtSignal(SEM_K_D);
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_MAX_OUTPUT);
     c2c:	88 e0       	ldi	r24, 0x08	; 8
     c2e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localMaxOutput = maxOutput;
     c32:	80 91 95 01 	lds	r24, 0x0195
     c36:	90 91 96 01 	lds	r25, 0x0196
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
		trtSignal(SEM_MAX_OUTPUT);
     c3e:	88 e0       	ldi	r24, 0x08	; 8
     c40:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Proportional Error
		pError = localOmegaRef - localOmega;
     c44:	ec 81       	ldd	r30, Y+4	; 0x04
     c46:	fd 81       	ldd	r31, Y+5	; 0x05
     c48:	ec 19       	sub	r30, r12
     c4a:	fd 09       	sbc	r31, r13
     c4c:	fd 83       	std	Y+5, r31	; 0x05
     c4e:	ec 83       	std	Y+4, r30	; 0x04
     c50:	cc 24       	eor	r12, r12
     c52:	ef 2b       	or	r30, r31
     c54:	11 f0       	breq	.+4      	; 0xc5a <pidControl+0xfe>
     c56:	cc 24       	eor	r12, r12
     c58:	c3 94       	inc	r12
		else {
			sign = 0;
		}

		//Update the integral of the error
		if (sign == prevSign){
     c5a:	fb 81       	ldd	r31, Y+3	; 0x03
     c5c:	cf 16       	cp	r12, r31
     c5e:	19 f0       	breq	.+6      	; 0xc66 <pidControl+0x10a>
     c60:	22 24       	eor	r2, r2
     c62:	33 24       	eor	r3, r3
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <pidControl+0x112>
			integral += pError;
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 0e       	add	r2, r18
     c6c:	33 1e       	adc	r3, r19

		if (output < 0){
			OCR0A = 0;
		}
		else{
			OCR0A = 255 * output / localMaxOutput;
     c6e:	ec 81       	ldd	r30, Y+4	; 0x04
     c70:	fd 81       	ldd	r31, Y+5	; 0x05
     c72:	bf 01       	movw	r22, r30
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 94 18 	call	0x3128	; 0x3128 <__floatunsisf>
     c7c:	9b 01       	movw	r18, r22
     c7e:	ac 01       	movw	r20, r24
     c80:	c8 01       	movw	r24, r16
     c82:	b7 01       	movw	r22, r14
     c84:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__mulsf3>
     c88:	7b 01       	movw	r14, r22
     c8a:	8c 01       	movw	r16, r24
     c8c:	b1 01       	movw	r22, r2
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 94 18 	call	0x3128	; 0x3128 <__floatunsisf>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c5 01       	movw	r24, r10
     c9c:	b4 01       	movw	r22, r8
     c9e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__mulsf3>
     ca2:	9b 01       	movw	r18, r22
     ca4:	ac 01       	movw	r20, r24
     ca6:	c8 01       	movw	r24, r16
     ca8:	b7 01       	movw	r22, r14
     caa:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     cae:	7b 01       	movw	r14, r22
     cb0:	8c 01       	movw	r16, r24
     cb2:	2c 81       	ldd	r18, Y+4	; 0x04
     cb4:	3d 81       	ldd	r19, Y+5	; 0x05
     cb6:	b9 01       	movw	r22, r18
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 94 18 	call	0x3128	; 0x3128 <__floatunsisf>
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	c3 01       	movw	r24, r6
     cc6:	b2 01       	movw	r22, r4
     cc8:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__mulsf3>
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	c8 01       	movw	r24, r16
     cd2:	b7 01       	movw	r22, r14
     cd4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
     cd8:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fixunssfsi>
     cdc:	ef ef       	ldi	r30, 0xFF	; 255
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	6e 9f       	mul	r22, r30
     ce2:	c0 01       	movw	r24, r0
     ce4:	6f 9f       	mul	r22, r31
     ce6:	90 0d       	add	r25, r0
     ce8:	7e 9f       	mul	r23, r30
     cea:	90 0d       	add	r25, r0
     cec:	11 24       	eor	r1, r1
     cee:	69 81       	ldd	r22, Y+1	; 0x01
     cf0:	7a 81       	ldd	r23, Y+2	; 0x02
     cf2:	0e 94 85 19 	call	0x330a	; 0x330a <__udivmodhi4>
     cf6:	67 bd       	out	0x27, r22	; 39
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     cf8:	20 91 09 03 	lds	r18, 0x0309
     cfc:	30 91 0a 03 	lds	r19, 0x030A
     d00:	40 91 0b 03 	lds	r20, 0x030B
     d04:	50 91 0c 03 	lds	r21, 0x030C
     d08:	a9 01       	movw	r20, r18
     d0a:	33 27       	eor	r19, r19
     d0c:	22 27       	eor	r18, r18
     d0e:	60 91 84 00 	lds	r22, 0x0084
     d12:	70 91 85 00 	lds	r23, 0x0085
		}

		rel = trtCurrentTime() + SECONDS2TICKS(0.005);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.01);
	    trtSleepUntil(rel, dead);
     d16:	e0 90 84 00 	lds	r14, 0x0084
     d1a:	f0 90 85 00 	lds	r15, 0x0085
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	62 0f       	add	r22, r18
     d24:	73 1f       	adc	r23, r19
     d26:	84 1f       	adc	r24, r20
     d28:	95 1f       	adc	r25, r21
     d2a:	62 5b       	subi	r22, 0xB2	; 178
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	8f 4f       	sbci	r24, 0xFF	; 255
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	00 e0       	ldi	r16, 0x00	; 0
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	2e 0d       	add	r18, r14
     d38:	3f 1d       	adc	r19, r15
     d3a:	40 1f       	adc	r20, r16
     d3c:	51 1f       	adc	r21, r17
     d3e:	24 56       	subi	r18, 0x64	; 100
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	4f 4f       	sbci	r20, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
     d4a:	cb 82       	std	Y+3, r12	; 0x03
     d4c:	1e cf       	rjmp	.-452    	; 0xb8a <pidControl+0x2e>

00000d4e <main>:
  LCDclr();        //clear the display
  LCDGotoXY(0,0);
}

// --- Main Program ----------------------------------
int main(void) {
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17


  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     d5a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     d5e:	69 e7       	ldi	r22, 0x79	; 121
     d60:	71 e0       	ldi	r23, 0x01	; 1
     d62:	70 93 19 03 	sts	0x0319, r23
     d66:	60 93 18 03 	sts	0x0318, r22
     d6a:	70 93 15 03 	sts	0x0315, r23
     d6e:	60 93 14 03 	sts	0x0314, r22
     d72:	70 93 17 03 	sts	0x0317, r23
     d76:	60 93 16 03 	sts	0x0316, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <fputs>
  
  //initialize Timer2 and the external interrupt
  //set up INT0
	EIMSK = 1<<INT0 ; // turn on int0
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	9d bb       	out	0x1d, r25	; 29
	EICRA = 3 ;       // rising edge
     d86:	23 e0       	ldi	r18, 0x03	; 3
     d88:	20 93 69 00 	sts	0x0069, r18
	// turn on timer 2 to be read in int0 ISR
	TCCR2B = 7 ; // divide by 1024
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	80 93 b1 00 	sts	0x00B1, r24
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1 ;
     d92:	90 93 70 00 	sts	0x0070, r25

  //setup Timer 0
  // Set the timer for fast PWM mode, clear OC0A on Compare Match, set OC0A
  // at BOTTOM (non-inverting mode)
  TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); //Set the timer
     d96:	83 e8       	ldi	r24, 0x83	; 131
     d98:	84 bd       	out	0x24, r24	; 36

  //Set the prescalar to 64 so the PWM runs at less than 1000 Hz
  TCCR0B = (1 << CS01) | (1 << CS00);
     d9a:	25 bd       	out	0x25, r18	; 37

  OCR0A = 127;
     d9c:	8f e7       	ldi	r24, 0x7F	; 127
     d9e:	87 bd       	out	0x27, r24	; 39

  // start TRT
  trtInitKernel(128); // 80 bytes for the idle task stack
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 5f 02 	call	0x4be	; 0x4be <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     da8:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     daa:	10 92 00 03 	sts	0x0300, r1
  
  sei(); // set enabled interrupts;
     dae:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     db0:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     db2:	10 92 01 03 	sts	0x0301, r1
  
  sei(); // set enabled interrupts;
     db6:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     db8:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 02 03 	sts	0x0302, r24
  
  sei(); // set enabled interrupts;
     dc0:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dc2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     dc4:	80 93 06 03 	sts	0x0306, r24
  
  sei(); // set enabled interrupts;
     dc8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dca:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     dcc:	80 93 03 03 	sts	0x0303, r24
  
  sei(); // set enabled interrupts;
     dd0:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dd2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     dd4:	80 93 04 03 	sts	0x0304, r24
  
  sei(); // set enabled interrupts;
     dd8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dda:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     ddc:	80 93 05 03 	sts	0x0305, r24
  
  sei(); // set enabled interrupts;
     de0:	78 94       	sei
  trtCreateSemaphore(SEM_OMEGA, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_P, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_I, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_D, 1) ; // protect shared variables
 // --- creat tasks  ----------------
  trtCreateTask(pidControl, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     de2:	8e ea       	ldi	r24, 0xAE	; 174
     de4:	95 e0       	ldi	r25, 0x05	; 5
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	2d e0       	ldi	r18, 0x0D	; 13
     dec:	33 e0       	ldi	r19, 0x03	; 3
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	bd e0       	ldi	r27, 0x0D	; 13
     df4:	eb 2e       	mov	r14, r27
     df6:	b3 e0       	ldi	r27, 0x03	; 3
     df8:	fb 2e       	mov	r15, r27
     dfa:	01 2d       	mov	r16, r1
     dfc:	11 2d       	mov	r17, r1
     dfe:	a0 ec       	ldi	r26, 0xC0	; 192
     e00:	ca 2e       	mov	r12, r26
     e02:	a2 e0       	ldi	r26, 0x02	; 2
     e04:	da 2e       	mov	r13, r26
     e06:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(serialComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     e0a:	81 e6       	ldi	r24, 0x61	; 97
     e0c:	9a e0       	ldi	r25, 0x0A	; 10
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	2a e1       	ldi	r18, 0x1A	; 26
     e14:	36 e0       	ldi	r19, 0x06	; 6
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	fa e1       	ldi	r31, 0x1A	; 26
     e1c:	ef 2e       	mov	r14, r31
     e1e:	f6 e0       	ldi	r31, 0x06	; 6
     e20:	ff 2e       	mov	r15, r31
     e22:	01 2d       	mov	r16, r1
     e24:	11 2d       	mov	r17, r1
     e26:	e2 ec       	ldi	r30, 0xC2	; 194
     e28:	ce 2e       	mov	r12, r30
     e2a:	e2 e0       	ldi	r30, 0x02	; 2
     e2c:	de 2e       	mov	r13, r30
     e2e:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(displayParams, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     e32:	86 e3       	ldi	r24, 0x36	; 54
     e34:	97 e0       	ldi	r25, 0x07	; 7
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	71 e0       	ldi	r23, 0x01	; 1
     e3a:	2a e1       	ldi	r18, 0x1A	; 26
     e3c:	36 e0       	ldi	r19, 0x06	; 6
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     e46:	83 b7       	in	r24, 0x33	; 51
     e48:	81 7f       	andi	r24, 0xF1	; 241
     e4a:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     e4c:	83 b7       	in	r24, 0x33	; 51
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
     e52:	88 95       	sleep
     e54:	fe cf       	rjmp	.-4      	; 0xe52 <main+0x104>

00000e56 <InitLCD>:
	}
}

// --- Initialize the LCD ----------------------------
void InitLCD(void){
  LCDinit();  //initialize the display
     e56:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCDinit>
  LCDcursorOFF();
     e5a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCDcursorOFF>
  LCDclr();        //clear the display
     e5e:	0e 94 95 0b 	call	0x172a	; 0x172a <LCDclr>
  LCDGotoXY(0,0);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
}
     e6a:	08 95       	ret

00000e6c <displayParams>:
	}
  }

// --- spoiler ---------------------------------------
void displayParams(void* args) 
{
     e6c:	2f 92       	push	r2
     e6e:	3f 92       	push	r3
     e70:	4f 92       	push	r4
     e72:	5f 92       	push	r5
     e74:	6f 92       	push	r6
     e76:	7f 92       	push	r7
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	e0 97       	sbiw	r28, 0x30	; 48
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
	//String constants
	const uint8_t LCDSpeed[9] = "SPEED: \0";
     ea0:	de 01       	movw	r26, r28
     ea2:	57 96       	adiw	r26, 0x17	; 23
     ea4:	ea e1       	ldi	r30, 0x1A	; 26
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	89 e0       	ldi	r24, 0x09	; 9
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <displayParams+0x3e>
	const uint8_t LCDRPM[5] = "RPM\0";
     eb2:	de 01       	movw	r26, r28
     eb4:	52 96       	adiw	r26, 0x12	; 18
     eb6:	e3 e2       	ldi	r30, 0x23	; 35
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	01 90       	ld	r0, Z+
     ebe:	0d 92       	st	X+, r0
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	e1 f7       	brne	.-8      	; 0xebc <displayParams+0x50>
	uint8_t updateOmegaRef;
	uint8_t updatek_p;
	uint8_t updatek_i;
	uint8_t updatek_d;

	trtWait(SEM_OMEGA_REF);
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	int localOmegaRef = omegaRef;
     eca:	60 90 93 01 	lds	r6, 0x0193
     ece:	70 90 94 01 	lds	r7, 0x0194
	trtSignal(SEM_OMEGA_REF);
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_P);
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_p = k_p;
     ede:	80 91 87 01 	lds	r24, 0x0187
     ee2:	8f a3       	std	Y+39, r24	; 0x27
     ee4:	90 91 88 01 	lds	r25, 0x0188
     ee8:	98 a7       	std	Y+40, r25	; 0x28
     eea:	a0 91 89 01 	lds	r26, 0x0189
     eee:	a9 a7       	std	Y+41, r26	; 0x29
     ef0:	b0 91 8a 01 	lds	r27, 0x018A
     ef4:	ba a7       	std	Y+42, r27	; 0x2a
	trtSignal(SEM_K_P);
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_I);
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_i = k_i;
     f02:	80 91 8b 01 	lds	r24, 0x018B
     f06:	8b a3       	std	Y+35, r24	; 0x23
     f08:	90 91 8c 01 	lds	r25, 0x018C
     f0c:	9c a3       	std	Y+36, r25	; 0x24
     f0e:	a0 91 8d 01 	lds	r26, 0x018D
     f12:	ad a3       	std	Y+37, r26	; 0x25
     f14:	b0 91 8e 01 	lds	r27, 0x018E
     f18:	be a3       	std	Y+38, r27	; 0x26
	trtSignal(SEM_K_I);
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_D);
     f20:	86 e0       	ldi	r24, 0x06	; 6
     f22:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_d = k_d;
     f26:	80 91 8f 01 	lds	r24, 0x018F
     f2a:	88 a3       	std	Y+32, r24	; 0x20
     f2c:	90 91 90 01 	lds	r25, 0x0190
     f30:	99 a3       	std	Y+33, r25	; 0x21
     f32:	a0 91 91 01 	lds	r26, 0x0191
     f36:	aa a3       	std	Y+34, r26	; 0x22
     f38:	20 90 92 01 	lds	r2, 0x0192
	trtSignal(SEM_K_D);
     f3c:	86 e0       	ldi	r24, 0x06	; 6
     f3e:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


	//initialize the LCD
	InitLCD();
     f42:	0e 94 2b 07 	call	0xe56	; 0xe56 <InitLCD>
	LCDGotoXY(0, 0);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
  	LCDstring(LCDSpeed, SPEED_LEN);
     f4e:	ce 01       	movw	r24, r28
     f50:	47 96       	adiw	r24, 0x17	; 23
     f52:	67 e0       	ldi	r22, 0x07	; 7
     f54:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
  	
	sprintf(LCDOmega, "%i", omega);
     f58:	00 d0       	rcall	.+0      	; 0xf5a <displayParams+0xee>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <displayParams+0xf0>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <displayParams+0xf2>
     f5e:	ed b7       	in	r30, 0x3d	; 61
     f60:	fe b7       	in	r31, 0x3e	; 62
     f62:	31 96       	adiw	r30, 0x01	; 1
     f64:	8e 01       	movw	r16, r28
     f66:	02 5f       	subi	r16, 0xF2	; 242
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	ad b7       	in	r26, 0x3d	; 61
     f6c:	be b7       	in	r27, 0x3e	; 62
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	1c 93       	st	X, r17
     f72:	0e 93       	st	-X, r16
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	84 e1       	ldi	r24, 0x14	; 20
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	93 83       	std	Z+3, r25	; 0x03
     f7c:	82 83       	std	Z+2, r24	; 0x02
     f7e:	80 91 97 01 	lds	r24, 0x0197
     f82:	90 91 98 01 	lds	r25, 0x0198
     f86:	95 83       	std	Z+5, r25	; 0x05
     f88:	84 83       	std	Z+4, r24	; 0x04
     f8a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
	LCDGotoXY(OMEGA_LOC, 0);
     f8e:	8d b7       	in	r24, 0x3d	; 61
     f90:	9e b7       	in	r25, 0x3e	; 62
     f92:	06 96       	adiw	r24, 0x06	; 6
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	9e bf       	out	0x3e, r25	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	8d bf       	out	0x3d, r24	; 61
     f9e:	87 e0       	ldi	r24, 0x07	; 7
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
	omegaLen = strlen(LCDOmega);
     fa6:	f8 01       	movw	r30, r16
     fa8:	01 90       	ld	r0, Z+
     faa:	00 20       	and	r0, r0
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <displayParams+0x13c>
     fae:	31 97       	sbiw	r30, 0x01	; 1
     fb0:	6e 2f       	mov	r22, r30
     fb2:	60 1b       	sub	r22, r16
	if (omegaLen >= OMEGA_LEN) {
     fb4:	64 30       	cpi	r22, 0x04	; 4
     fb6:	08 f0       	brcs	.+2      	; 0xfba <displayParams+0x14e>
     fb8:	64 e0       	ldi	r22, 0x04	; 4
		omegaLen = OMEGA_LEN;
	}
	LCDstring(LCDOmega, omegaLen);
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 96       	adiw	r24, 0x0e	; 14
     fbe:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>

	LCDGotoXY(RPM_LOC, 0);
     fc2:	8d e0       	ldi	r24, 0x0D	; 13
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
	LCDstring(LCDRPM, RPM_LEN);
     fca:	ce 01       	movw	r24, r28
     fcc:	42 96       	adiw	r24, 0x12	; 18
     fce:	63 e0       	ldi	r22, 0x03	; 3
     fd0:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>

	sprintf(LCDOmegaRef, "%i", localOmegaRef);
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <displayParams+0x16a>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <displayParams+0x16c>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <displayParams+0x16e>
     fda:	ed b7       	in	r30, 0x3d	; 61
     fdc:	fe b7       	in	r31, 0x3e	; 62
     fde:	31 96       	adiw	r30, 0x01	; 1
     fe0:	8e 01       	movw	r16, r28
     fe2:	06 5f       	subi	r16, 0xF6	; 246
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	ad b7       	in	r26, 0x3d	; 61
     fe8:	be b7       	in	r27, 0x3e	; 62
     fea:	12 96       	adiw	r26, 0x02	; 2
     fec:	1c 93       	st	X, r17
     fee:	0e 93       	st	-X, r16
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	84 e1       	ldi	r24, 0x14	; 20
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	93 83       	std	Z+3, r25	; 0x03
     ff8:	82 83       	std	Z+2, r24	; 0x02
     ffa:	75 82       	std	Z+5, r7	; 0x05
     ffc:	64 82       	std	Z+4, r6	; 0x04
     ffe:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
	omegaRefLen = strlen(LCDOmegaRef);
    1002:	f8 01       	movw	r30, r16
    1004:	01 90       	ld	r0, Z+
    1006:	00 20       	and	r0, r0
    1008:	e9 f7       	brne	.-6      	; 0x1004 <displayParams+0x198>
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	be 2f       	mov	r27, r30
    100e:	b0 1b       	sub	r27, r16
    1010:	0b 2f       	mov	r16, r27
	if (omegaRefLen >= OMEGA_REF_LEN) {
    1012:	8d b7       	in	r24, 0x3d	; 61
    1014:	9e b7       	in	r25, 0x3e	; 62
    1016:	06 96       	adiw	r24, 0x06	; 6
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	9e bf       	out	0x3e, r25	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	8d bf       	out	0x3d, r24	; 61
    1022:	b4 30       	cpi	r27, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <displayParams+0x1bc>
    1026:	04 e0       	ldi	r16, 0x04	; 4
		omegaRefLen = OMEGA_REF_LEN;
	}
    LCDGotoXY(OMEGA_REF_LOC, 1);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
    LCDstring(LCDOmegaRef, omegaRefLen);
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	82 2e       	mov	r8, r18
    1034:	91 2c       	mov	r9, r1
    1036:	8c 0e       	add	r8, r28
    1038:	9d 1e       	adc	r9, r29
    103a:	c4 01       	movw	r24, r8
    103c:	60 2f       	mov	r22, r16
    103e:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
	
	sprintf(LCDk_p, "%f", localk_p);
    1042:	ad b7       	in	r26, 0x3d	; 61
    1044:	be b7       	in	r27, 0x3e	; 62
    1046:	18 97       	sbiw	r26, 0x08	; 8
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	be bf       	out	0x3e, r27	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	ad bf       	out	0x3d, r26	; 61
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	5e 01       	movw	r10, r28
    105a:	08 94       	sec
    105c:	a1 1c       	adc	r10, r1
    105e:	b1 1c       	adc	r11, r1
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	bc 92       	st	X, r11
    1064:	ae 92       	st	-X, r10
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	97 e1       	ldi	r25, 0x17	; 23
    106a:	e9 2e       	mov	r14, r25
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	f9 2e       	mov	r15, r25
    1070:	f3 82       	std	Z+3, r15	; 0x03
    1072:	e2 82       	std	Z+2, r14	; 0x02
    1074:	8f a1       	ldd	r24, Y+39	; 0x27
    1076:	98 a5       	ldd	r25, Y+40	; 0x28
    1078:	a9 a5       	ldd	r26, Y+41	; 0x29
    107a:	ba a5       	ldd	r27, Y+42	; 0x2a
    107c:	84 83       	std	Z+4, r24	; 0x04
    107e:	95 83       	std	Z+5, r25	; 0x05
    1080:	a6 83       	std	Z+6, r26	; 0x06
    1082:	b7 83       	std	Z+7, r27	; 0x07
    1084:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
    LCDGotoXY(K_P_LOC, 1);
    1088:	8d b7       	in	r24, 0x3d	; 61
    108a:	9e b7       	in	r25, 0x3e	; 62
    108c:	08 96       	adiw	r24, 0x08	; 8
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	9e bf       	out	0x3e, r25	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	8d bf       	out	0x3d, r24	; 61
    1098:	85 e0       	ldi	r24, 0x05	; 5
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
    LCDstring(LCDk_p, K_P_LEN);
    10a0:	c5 01       	movw	r24, r10
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>

	sprintf(LCDk_i, "%f", localk_i);
    10a8:	ad b7       	in	r26, 0x3d	; 61
    10aa:	be b7       	in	r27, 0x3e	; 62
    10ac:	18 97       	sbiw	r26, 0x08	; 8
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	be bf       	out	0x3e, r27	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	ad bf       	out	0x3d, r26	; 61
    10b8:	ed b7       	in	r30, 0x3d	; 61
    10ba:	fe b7       	in	r31, 0x3e	; 62
    10bc:	31 96       	adiw	r30, 0x01	; 1
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	c8 2e       	mov	r12, r24
    10c2:	d1 2c       	mov	r13, r1
    10c4:	cc 0e       	add	r12, r28
    10c6:	dd 1e       	adc	r13, r29
    10c8:	12 96       	adiw	r26, 0x02	; 2
    10ca:	dc 92       	st	X, r13
    10cc:	ce 92       	st	-X, r12
    10ce:	11 97       	sbiw	r26, 0x01	; 1
    10d0:	f3 82       	std	Z+3, r15	; 0x03
    10d2:	e2 82       	std	Z+2, r14	; 0x02
    10d4:	8b a1       	ldd	r24, Y+35	; 0x23
    10d6:	9c a1       	ldd	r25, Y+36	; 0x24
    10d8:	ad a1       	ldd	r26, Y+37	; 0x25
    10da:	be a1       	ldd	r27, Y+38	; 0x26
    10dc:	84 83       	std	Z+4, r24	; 0x04
    10de:	95 83       	std	Z+5, r25	; 0x05
    10e0:	a6 83       	std	Z+6, r26	; 0x06
    10e2:	b7 83       	std	Z+7, r27	; 0x07
    10e4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
    LCDGotoXY(K_I_LOC, 1);
    10e8:	8d b7       	in	r24, 0x3d	; 61
    10ea:	9e b7       	in	r25, 0x3e	; 62
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	9e bf       	out	0x3e, r25	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	8d bf       	out	0x3d, r24	; 61
    10f8:	89 e0       	ldi	r24, 0x09	; 9
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
    LCDstring(LCDk_i, K_I_LEN);
    1100:	c6 01       	movw	r24, r12
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>

	sprintf(LCDk_d, "%f", localk_d);
    1108:	ad b7       	in	r26, 0x3d	; 61
    110a:	be b7       	in	r27, 0x3e	; 62
    110c:	18 97       	sbiw	r26, 0x08	; 8
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	be bf       	out	0x3e, r27	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	ad bf       	out	0x3d, r26	; 61
    1118:	ed b7       	in	r30, 0x3d	; 61
    111a:	fe b7       	in	r31, 0x3e	; 62
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	8e 01       	movw	r16, r28
    1120:	09 5f       	subi	r16, 0xF9	; 249
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	1c 93       	st	X, r17
    1128:	0e 93       	st	-X, r16
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	f3 82       	std	Z+3, r15	; 0x03
    112e:	e2 82       	std	Z+2, r14	; 0x02
    1130:	88 a1       	ldd	r24, Y+32	; 0x20
    1132:	99 a1       	ldd	r25, Y+33	; 0x21
    1134:	aa a1       	ldd	r26, Y+34	; 0x22
    1136:	b2 2d       	mov	r27, r2
    1138:	84 83       	std	Z+4, r24	; 0x04
    113a:	95 83       	std	Z+5, r25	; 0x05
    113c:	a6 83       	std	Z+6, r26	; 0x06
    113e:	b7 83       	std	Z+7, r27	; 0x07
    1140:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
    LCDGotoXY(K_D_LOC, 1);
    1144:	8d b7       	in	r24, 0x3d	; 61
    1146:	9e b7       	in	r25, 0x3e	; 62
    1148:	08 96       	adiw	r24, 0x08	; 8
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	9e bf       	out	0x3e, r25	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	8d bf       	out	0x3d, r24	; 61
    1154:	8d e0       	ldi	r24, 0x0D	; 13
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
    LCDstring(LCDk_d, K_D_LEN);
    115c:	c8 01       	movw	r24, r16
    115e:	63 e0       	ldi	r22, 0x03	; 3
    1160:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		trtSignal(SEM_K_D);


		//Update the LCD
		if (updateOmegaRef){
			sprintf(LCDOmegaRef, "%i", localOmegaRef);
    1164:	24 01       	movw	r4, r8
    		LCDGotoXY(OMEGA_REF_LOC, 1);
	    	LCDstring(LCDOmegaRef, omegaRefLen);
		}

		if (updatek_p){
			sprintf(LCDk_p, "%f", localk_p);
    1166:	ab a6       	std	Y+43, r10	; 0x2b
    1168:	bc a6       	std	Y+44, r11	; 0x2c
    116a:	9e 2c       	mov	r9, r14
    116c:	af 2c       	mov	r10, r15
            LCDGotoXY(K_P_LOC, 1);
            LCDstring(LCDk_p, K_P_LEN);
		}

		if (updatek_i){
			sprintf(LCDk_i, "%f", localk_i);
    116e:	cd a6       	std	Y+45, r12	; 0x2d
    1170:	de a6       	std	Y+46, r13	; 0x2e
            LCDGotoXY(K_I_LOC, 1);
            LCDstring(LCDk_i, K_I_LEN);
		}

		if (updatek_d){
			sprintf(LCDk_d, "%f", localk_d);
    1172:	0f a7       	std	Y+47, r16	; 0x2f
    1174:	18 ab       	std	Y+48, r17	; 0x30
            LCDGotoXY(K_D_LOC, 1);
            LCDstring(LCDk_d, K_D_LEN);
		}

		trtWait(SEM_OMEGA);
		sprintf(LCDOmega, "%i", omega);
    1176:	0e e0       	ldi	r16, 0x0E	; 14
    1178:	c0 2e       	mov	r12, r16
    117a:	d1 2c       	mov	r13, r1
    117c:	cc 0e       	add	r12, r28
    117e:	dd 1e       	adc	r13, r29
	uint32_t rel, dead ;
	//Update the LCD about 5 times a second
	while(1)
	{
		//Check if the reference speed has changed
		trtWait(SEM_OMEGA_REF);
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localOmegaRef != omegaRef){
    1186:	80 91 93 01 	lds	r24, 0x0193
    118a:	90 91 94 01 	lds	r25, 0x0194
    118e:	68 16       	cp	r6, r24
    1190:	79 06       	cpc	r7, r25
    1192:	11 f4       	brne	.+4      	; 0x1198 <__stack+0x99>
    1194:	33 24       	eor	r3, r3
    1196:	03 c0       	rjmp	.+6      	; 0x119e <__stack+0x9f>
			localOmegaRef = omegaRef;
    1198:	3c 01       	movw	r6, r24
    119a:	33 24       	eor	r3, r3
    119c:	33 94       	inc	r3
			updateOmegaRef = 1;
		}
		else{
			updateOmegaRef = 0;
		}
		trtSignal(SEM_OMEGA_REF);
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the proportional gain has changed
		trtWait(SEM_K_P);
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_p != k_p) {
    11aa:	10 91 87 01 	lds	r17, 0x0187
    11ae:	00 91 88 01 	lds	r16, 0x0188
    11b2:	e0 90 89 01 	lds	r14, 0x0189
    11b6:	80 90 8a 01 	lds	r8, 0x018A
    11ba:	6f a1       	ldd	r22, Y+39	; 0x27
    11bc:	78 a5       	ldd	r23, Y+40	; 0x28
    11be:	89 a5       	ldd	r24, Y+41	; 0x29
    11c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11c2:	21 2f       	mov	r18, r17
    11c4:	30 2f       	mov	r19, r16
    11c6:	4e 2d       	mov	r20, r14
    11c8:	58 2d       	mov	r21, r8
    11ca:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__nesf2>
    11ce:	88 23       	and	r24, r24
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__stack+0xe1>
    11d2:	1f a3       	std	Y+39, r17	; 0x27
    11d4:	08 a7       	std	Y+40, r16	; 0x28
    11d6:	e9 a6       	std	Y+41, r14	; 0x29
    11d8:	8a a6       	std	Y+42, r8	; 0x2a
    11da:	bb 24       	eor	r11, r11
    11dc:	b3 94       	inc	r11
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <__stack+0xe3>
    11e0:	bb 24       	eor	r11, r11
			updatek_p = 1;
		}
		else{
			updatek_p = 0;
		}
		trtSignal(SEM_K_P);
    11e2:	84 e0       	ldi	r24, 0x04	; 4
    11e4:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the integral gain has changed
		trtWait(SEM_K_I);
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_i != k_i) {
    11ee:	10 91 8b 01 	lds	r17, 0x018B
    11f2:	00 91 8c 01 	lds	r16, 0x018C
    11f6:	e0 90 8d 01 	lds	r14, 0x018D
    11fa:	80 90 8e 01 	lds	r8, 0x018E
    11fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1200:	7c a1       	ldd	r23, Y+36	; 0x24
    1202:	8d a1       	ldd	r24, Y+37	; 0x25
    1204:	9e a1       	ldd	r25, Y+38	; 0x26
    1206:	21 2f       	mov	r18, r17
    1208:	30 2f       	mov	r19, r16
    120a:	4e 2d       	mov	r20, r14
    120c:	58 2d       	mov	r21, r8
    120e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__nesf2>
    1212:	88 23       	and	r24, r24
    1214:	39 f0       	breq	.+14     	; 0x1224 <__stack+0x125>
    1216:	1b a3       	std	Y+35, r17	; 0x23
    1218:	0c a3       	std	Y+36, r16	; 0x24
    121a:	ed a2       	std	Y+37, r14	; 0x25
    121c:	8e a2       	std	Y+38, r8	; 0x26
    121e:	ff 24       	eor	r15, r15
    1220:	f3 94       	inc	r15
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <__stack+0x127>
    1224:	ff 24       	eor	r15, r15
			updatek_i = 1;
		}
		else{
			updatek_i = 0;
		}
		trtSignal(SEM_K_I);
    1226:	85 e0       	ldi	r24, 0x05	; 5
    1228:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the derivative gain has changed
		trtWait(SEM_K_D);
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_d != k_d) {
    1232:	00 91 8f 01 	lds	r16, 0x018F
    1236:	e0 90 90 01 	lds	r14, 0x0190
    123a:	80 90 91 01 	lds	r8, 0x0191
    123e:	10 91 92 01 	lds	r17, 0x0192
    1242:	68 a1       	ldd	r22, Y+32	; 0x20
    1244:	79 a1       	ldd	r23, Y+33	; 0x21
    1246:	8a a1       	ldd	r24, Y+34	; 0x22
    1248:	92 2d       	mov	r25, r2
    124a:	20 2f       	mov	r18, r16
    124c:	3e 2d       	mov	r19, r14
    124e:	48 2d       	mov	r20, r8
    1250:	51 2f       	mov	r21, r17
    1252:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__nesf2>
    1256:	88 23       	and	r24, r24
    1258:	31 f0       	breq	.+12     	; 0x1266 <__stack+0x167>
    125a:	08 a3       	std	Y+32, r16	; 0x20
    125c:	e9 a2       	std	Y+33, r14	; 0x21
    125e:	8a a2       	std	Y+34, r8	; 0x22
    1260:	21 2e       	mov	r2, r17
    1262:	11 e0       	ldi	r17, 0x01	; 1
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <__stack+0x169>
    1266:	10 e0       	ldi	r17, 0x00	; 0
			updatek_d = 1;	
		}
		else{
			updatek_d = 0;
		}
		trtSignal(SEM_K_D);
    1268:	86 e0       	ldi	r24, 0x06	; 6
    126a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


		//Update the LCD
		if (updateOmegaRef){
    126e:	33 20       	and	r3, r3
    1270:	71 f1       	breq	.+92     	; 0x12ce <__stack+0x1cf>
			sprintf(LCDOmegaRef, "%i", localOmegaRef);
    1272:	00 d0       	rcall	.+0      	; 0x1274 <__stack+0x175>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <__stack+0x177>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <__stack+0x179>
    1278:	ed b7       	in	r30, 0x3d	; 61
    127a:	fe b7       	in	r31, 0x3e	; 62
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	ad b7       	in	r26, 0x3d	; 61
    1280:	be b7       	in	r27, 0x3e	; 62
    1282:	12 96       	adiw	r26, 0x02	; 2
    1284:	5c 92       	st	X, r5
    1286:	4e 92       	st	-X, r4
    1288:	11 97       	sbiw	r26, 0x01	; 1
    128a:	84 e1       	ldi	r24, 0x14	; 20
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	93 83       	std	Z+3, r25	; 0x03
    1290:	82 83       	std	Z+2, r24	; 0x02
    1292:	75 82       	std	Z+5, r7	; 0x05
    1294:	64 82       	std	Z+4, r6	; 0x04
    1296:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
			omegaRefLen = strlen(LCDOmegaRef);
    129a:	f2 01       	movw	r30, r4
    129c:	01 90       	ld	r0, Z+
    129e:	00 20       	and	r0, r0
    12a0:	e9 f7       	brne	.-6      	; 0x129c <__stack+0x19d>
    12a2:	31 97       	sbiw	r30, 0x01	; 1
    12a4:	0e 2f       	mov	r16, r30
    12a6:	04 19       	sub	r16, r4
			if (omegaRefLen >= OMEGA_REF_LEN) {
    12a8:	ad b7       	in	r26, 0x3d	; 61
    12aa:	be b7       	in	r27, 0x3e	; 62
    12ac:	16 96       	adiw	r26, 0x06	; 6
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	be bf       	out	0x3e, r27	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	ad bf       	out	0x3d, r26	; 61
    12b8:	04 30       	cpi	r16, 0x04	; 4
    12ba:	08 f0       	brcs	.+2      	; 0x12be <__stack+0x1bf>
    12bc:	04 e0       	ldi	r16, 0x04	; 4
				omegaRefLen = OMEGA_REF_LEN;
			}
    		LCDGotoXY(OMEGA_REF_LOC, 1);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
	    	LCDstring(LCDOmegaRef, omegaRefLen);
    12c6:	c2 01       	movw	r24, r4
    12c8:	60 2f       	mov	r22, r16
    12ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		}

		if (updatek_p){
    12ce:	bb 20       	and	r11, r11
    12d0:	89 f1       	breq	.+98     	; 0x1334 <__stack+0x235>
			sprintf(LCDk_p, "%f", localk_p);
    12d2:	8d b7       	in	r24, 0x3d	; 61
    12d4:	9e b7       	in	r25, 0x3e	; 62
    12d6:	08 97       	sbiw	r24, 0x08	; 8
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	9e bf       	out	0x3e, r25	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	8d bf       	out	0x3d, r24	; 61
    12e2:	ed b7       	in	r30, 0x3d	; 61
    12e4:	fe b7       	in	r31, 0x3e	; 62
    12e6:	31 96       	adiw	r30, 0x01	; 1
    12e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ea:	ad b7       	in	r26, 0x3d	; 61
    12ec:	be b7       	in	r27, 0x3e	; 62
    12ee:	11 96       	adiw	r26, 0x01	; 1
    12f0:	8c 93       	st	X, r24
    12f2:	11 97       	sbiw	r26, 0x01	; 1
    12f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f6:	12 96       	adiw	r26, 0x02	; 2
    12f8:	9c 93       	st	X, r25
    12fa:	92 82       	std	Z+2, r9	; 0x02
    12fc:	a3 82       	std	Z+3, r10	; 0x03
    12fe:	8f a1       	ldd	r24, Y+39	; 0x27
    1300:	98 a5       	ldd	r25, Y+40	; 0x28
    1302:	a9 a5       	ldd	r26, Y+41	; 0x29
    1304:	ba a5       	ldd	r27, Y+42	; 0x2a
    1306:	84 83       	std	Z+4, r24	; 0x04
    1308:	95 83       	std	Z+5, r25	; 0x05
    130a:	a6 83       	std	Z+6, r26	; 0x06
    130c:	b7 83       	std	Z+7, r27	; 0x07
    130e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
            LCDGotoXY(K_P_LOC, 1);
    1312:	ad b7       	in	r26, 0x3d	; 61
    1314:	be b7       	in	r27, 0x3e	; 62
    1316:	18 96       	adiw	r26, 0x08	; 8
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	be bf       	out	0x3e, r27	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	ad bf       	out	0x3d, r26	; 61
    1322:	85 e0       	ldi	r24, 0x05	; 5
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
            LCDstring(LCDk_p, K_P_LEN);
    132a:	8b a5       	ldd	r24, Y+43	; 0x2b
    132c:	9c a5       	ldd	r25, Y+44	; 0x2c
    132e:	63 e0       	ldi	r22, 0x03	; 3
    1330:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		}

		if (updatek_i){
    1334:	ff 20       	and	r15, r15
    1336:	89 f1       	breq	.+98     	; 0x139a <__stack+0x29b>
			sprintf(LCDk_i, "%f", localk_i);
    1338:	8d b7       	in	r24, 0x3d	; 61
    133a:	9e b7       	in	r25, 0x3e	; 62
    133c:	08 97       	sbiw	r24, 0x08	; 8
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	9e bf       	out	0x3e, r25	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	8d bf       	out	0x3d, r24	; 61
    1348:	ed b7       	in	r30, 0x3d	; 61
    134a:	fe b7       	in	r31, 0x3e	; 62
    134c:	31 96       	adiw	r30, 0x01	; 1
    134e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1350:	ad b7       	in	r26, 0x3d	; 61
    1352:	be b7       	in	r27, 0x3e	; 62
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	8c 93       	st	X, r24
    1358:	11 97       	sbiw	r26, 0x01	; 1
    135a:	9e a5       	ldd	r25, Y+46	; 0x2e
    135c:	12 96       	adiw	r26, 0x02	; 2
    135e:	9c 93       	st	X, r25
    1360:	92 82       	std	Z+2, r9	; 0x02
    1362:	a3 82       	std	Z+3, r10	; 0x03
    1364:	8b a1       	ldd	r24, Y+35	; 0x23
    1366:	9c a1       	ldd	r25, Y+36	; 0x24
    1368:	ad a1       	ldd	r26, Y+37	; 0x25
    136a:	be a1       	ldd	r27, Y+38	; 0x26
    136c:	84 83       	std	Z+4, r24	; 0x04
    136e:	95 83       	std	Z+5, r25	; 0x05
    1370:	a6 83       	std	Z+6, r26	; 0x06
    1372:	b7 83       	std	Z+7, r27	; 0x07
    1374:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
            LCDGotoXY(K_I_LOC, 1);
    1378:	ad b7       	in	r26, 0x3d	; 61
    137a:	be b7       	in	r27, 0x3e	; 62
    137c:	18 96       	adiw	r26, 0x08	; 8
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	be bf       	out	0x3e, r27	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	ad bf       	out	0x3d, r26	; 61
    1388:	89 e0       	ldi	r24, 0x09	; 9
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
            LCDstring(LCDk_i, K_I_LEN);
    1390:	8d a5       	ldd	r24, Y+45	; 0x2d
    1392:	9e a5       	ldd	r25, Y+46	; 0x2e
    1394:	63 e0       	ldi	r22, 0x03	; 3
    1396:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		}

		if (updatek_d){
    139a:	11 23       	and	r17, r17
    139c:	89 f1       	breq	.+98     	; 0x1400 <__stack+0x301>
			sprintf(LCDk_d, "%f", localk_d);
    139e:	8d b7       	in	r24, 0x3d	; 61
    13a0:	9e b7       	in	r25, 0x3e	; 62
    13a2:	08 97       	sbiw	r24, 0x08	; 8
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	9e bf       	out	0x3e, r25	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	8d bf       	out	0x3d, r24	; 61
    13ae:	ed b7       	in	r30, 0x3d	; 61
    13b0:	fe b7       	in	r31, 0x3e	; 62
    13b2:	31 96       	adiw	r30, 0x01	; 1
    13b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b6:	ad b7       	in	r26, 0x3d	; 61
    13b8:	be b7       	in	r27, 0x3e	; 62
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	8c 93       	st	X, r24
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	98 a9       	ldd	r25, Y+48	; 0x30
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	9c 93       	st	X, r25
    13c6:	92 82       	std	Z+2, r9	; 0x02
    13c8:	a3 82       	std	Z+3, r10	; 0x03
    13ca:	88 a1       	ldd	r24, Y+32	; 0x20
    13cc:	99 a1       	ldd	r25, Y+33	; 0x21
    13ce:	aa a1       	ldd	r26, Y+34	; 0x22
    13d0:	b2 2d       	mov	r27, r2
    13d2:	84 83       	std	Z+4, r24	; 0x04
    13d4:	95 83       	std	Z+5, r25	; 0x05
    13d6:	a6 83       	std	Z+6, r26	; 0x06
    13d8:	b7 83       	std	Z+7, r27	; 0x07
    13da:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
            LCDGotoXY(K_D_LOC, 1);
    13de:	ad b7       	in	r26, 0x3d	; 61
    13e0:	be b7       	in	r27, 0x3e	; 62
    13e2:	18 96       	adiw	r26, 0x08	; 8
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	be bf       	out	0x3e, r27	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	ad bf       	out	0x3d, r26	; 61
    13ee:	8d e0       	ldi	r24, 0x0D	; 13
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
            LCDstring(LCDk_d, K_D_LEN);
    13f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f8:	98 a9       	ldd	r25, Y+48	; 0x30
    13fa:	63 e0       	ldi	r22, 0x03	; 3
    13fc:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		}

		trtWait(SEM_OMEGA);
    1400:	87 e0       	ldi	r24, 0x07	; 7
    1402:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		sprintf(LCDOmega, "%i", omega);
    1406:	00 d0       	rcall	.+0      	; 0x1408 <__stack+0x309>
    1408:	00 d0       	rcall	.+0      	; 0x140a <__stack+0x30b>
    140a:	00 d0       	rcall	.+0      	; 0x140c <__stack+0x30d>
    140c:	ed b7       	in	r30, 0x3d	; 61
    140e:	fe b7       	in	r31, 0x3e	; 62
    1410:	31 96       	adiw	r30, 0x01	; 1
    1412:	ad b7       	in	r26, 0x3d	; 61
    1414:	be b7       	in	r27, 0x3e	; 62
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	dc 92       	st	X, r13
    141a:	ce 92       	st	-X, r12
    141c:	11 97       	sbiw	r26, 0x01	; 1
    141e:	84 e1       	ldi	r24, 0x14	; 20
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	93 83       	std	Z+3, r25	; 0x03
    1424:	82 83       	std	Z+2, r24	; 0x02
    1426:	80 91 97 01 	lds	r24, 0x0197
    142a:	90 91 98 01 	lds	r25, 0x0198
    142e:	95 83       	std	Z+5, r25	; 0x05
    1430:	84 83       	std	Z+4, r24	; 0x04
    1432:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <sprintf>
		LCDGotoXY(OMEGA_LOC, 0);
    1436:	ad b7       	in	r26, 0x3d	; 61
    1438:	be b7       	in	r27, 0x3e	; 62
    143a:	16 96       	adiw	r26, 0x06	; 6
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	be bf       	out	0x3e, r27	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	ad bf       	out	0x3d, r26	; 61
    1446:	87 e0       	ldi	r24, 0x07	; 7
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
		omegaLen = strlen(LCDOmega);
    144e:	f6 01       	movw	r30, r12
    1450:	01 90       	ld	r0, Z+
    1452:	00 20       	and	r0, r0
    1454:	e9 f7       	brne	.-6      	; 0x1450 <__stack+0x351>
    1456:	31 97       	sbiw	r30, 0x01	; 1
    1458:	6e 2f       	mov	r22, r30
    145a:	6c 19       	sub	r22, r12
		if (omegaLen >= OMEGA_LEN) {
    145c:	64 30       	cpi	r22, 0x04	; 4
    145e:	08 f0       	brcs	.+2      	; 0x1462 <__stack+0x363>
    1460:	64 e0       	ldi	r22, 0x04	; 4
			omegaLen = OMEGA_LEN;
		}
		LCDstring(LCDOmega, omegaLen);
    1462:	c6 01       	movw	r24, r12
    1464:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCDstring>
		trtSignal(SEM_OMEGA);
    1468:	87 e0       	ldi	r24, 0x07	; 7
    146a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    146e:	20 91 09 03 	lds	r18, 0x0309
    1472:	30 91 0a 03 	lds	r19, 0x030A
    1476:	40 91 0b 03 	lds	r20, 0x030B
    147a:	50 91 0c 03 	lds	r21, 0x030C
    147e:	a9 01       	movw	r20, r18
    1480:	33 27       	eor	r19, r19
    1482:	22 27       	eor	r18, r18
    1484:	60 91 84 00 	lds	r22, 0x0084
    1488:	70 91 85 00 	lds	r23, 0x0085

		rel = trtCurrentTime() + SECONDS2TICKS(0.1);
		dead = trtCurrentTime() + SECONDS2TICKS(0.225);
		trtSleepUntil(rel, dead);
    148c:	e0 90 84 00 	lds	r14, 0x0084
    1490:	f0 90 85 00 	lds	r15, 0x0085
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	62 0f       	add	r22, r18
    149a:	73 1f       	adc	r23, r19
    149c:	84 1f       	adc	r24, r20
    149e:	95 1f       	adc	r25, r21
    14a0:	66 5e       	subi	r22, 0xE6	; 230
    14a2:	79 4f       	sbci	r23, 0xF9	; 249
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	00 e0       	ldi	r16, 0x00	; 0
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	2e 0d       	add	r18, r14
    14ae:	3f 1d       	adc	r19, r15
    14b0:	40 1f       	adc	r20, r16
    14b2:	51 1f       	adc	r21, r17
    14b4:	25 54       	subi	r18, 0x45	; 69
    14b6:	32 4f       	sbci	r19, 0xF2	; 242
    14b8:	4f 4f       	sbci	r20, 0xFF	; 255
    14ba:	5f 4f       	sbci	r21, 0xFF	; 255
    14bc:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
    14c0:	5f ce       	rjmp	.-834    	; 0x1180 <__stack+0x81>

000014c2 <serialComm>:


//read the commands from the user
// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  {
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <serialComm+0x22>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <serialComm+0x24>
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    14ec:	68 e2       	ldi	r22, 0x28	; 40
    14ee:	46 2e       	mov	r4, r22
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	56 2e       	mov	r5, r22
    14f4:	3e 01       	movw	r6, r28
    14f6:	08 94       	sec
    14f8:	61 1c       	adc	r6, r1
    14fa:	71 1c       	adc	r7, r1
    14fc:	52 e0       	ldi	r21, 0x02	; 2
    14fe:	85 2e       	mov	r8, r21
    1500:	91 2c       	mov	r9, r1
    1502:	8c 0e       	add	r8, r28
    1504:	9d 1e       	adc	r9, r29
					trtWait(SEM_K_D);
					k_d = val;
					trtSignal(SEM_K_D);
					break;
				default:
					fprintf(stdout, "Command %c not recognized\n", cmd);
    1506:	4d e2       	ldi	r20, 0x2D	; 45
    1508:	a4 2e       	mov	r10, r20
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	b4 2e       	mov	r11, r20
					break;
			}
		}
		else{
			fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    150e:	38 e4       	ldi	r19, 0x48	; 72
    1510:	c3 2e       	mov	r12, r19
    1512:	31 e0       	ldi	r19, 0x01	; 1
    1514:	d3 2e       	mov	r13, r19
		// 									set the proportional gain to val1
		//									set the integral gain to val2
		//									set the differential gain to val3
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
    1516:	60 91 16 03 	lds	r22, 0x0316
    151a:	70 91 17 03 	lds	r23, 0x0317
    151e:	8e e3       	ldi	r24, 0x3E	; 62
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    1526:	8d b7       	in	r24, 0x3d	; 61
    1528:	9e b7       	in	r25, 0x3e	; 62
    152a:	08 97       	sbiw	r24, 0x08	; 8
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	9e bf       	out	0x3e, r25	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	8d bf       	out	0x3d, r24	; 61
    1536:	ed b7       	in	r30, 0x3d	; 61
    1538:	fe b7       	in	r31, 0x3e	; 62
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	80 91 14 03 	lds	r24, 0x0314
    1540:	90 91 15 03 	lds	r25, 0x0315
    1544:	ad b7       	in	r26, 0x3d	; 61
    1546:	be b7       	in	r27, 0x3e	; 62
    1548:	12 96       	adiw	r26, 0x02	; 2
    154a:	9c 93       	st	X, r25
    154c:	8e 93       	st	-X, r24
    154e:	11 97       	sbiw	r26, 0x01	; 1
    1550:	53 82       	std	Z+3, r5	; 0x03
    1552:	42 82       	std	Z+2, r4	; 0x02
    1554:	75 82       	std	Z+5, r7	; 0x05
    1556:	64 82       	std	Z+4, r6	; 0x04
    1558:	97 82       	std	Z+7, r9	; 0x07
    155a:	86 82       	std	Z+6, r8	; 0x06
    155c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <fscanf>
		//trtWait(SEM_STRING_DONE);

		//update the parameters
		//fprintf(stdout, "Cmd is %c\n", cmd);
		//fprintf(stdout, "Val is %f\n", val);
		if (val >= 0) {
    1560:	ea 80       	ldd	r14, Y+2	; 0x02
    1562:	fb 80       	ldd	r15, Y+3	; 0x03
    1564:	0c 81       	ldd	r16, Y+4	; 0x04
    1566:	1d 81       	ldd	r17, Y+5	; 0x05
    1568:	8d b7       	in	r24, 0x3d	; 61
    156a:	9e b7       	in	r25, 0x3e	; 62
    156c:	08 96       	adiw	r24, 0x08	; 8
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	9e bf       	out	0x3e, r25	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	8d bf       	out	0x3d, r24	; 61
    1578:	c8 01       	movw	r24, r16
    157a:	b7 01       	movw	r22, r14
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__gesf2>
    1588:	88 23       	and	r24, r24
    158a:	0c f4       	brge	.+2      	; 0x158e <serialComm+0xcc>
    158c:	6c c0       	rjmp	.+216    	; 0x1666 <serialComm+0x1a4>
			switch (cmd){
    158e:	29 81       	ldd	r18, Y+1	; 0x01
    1590:	29 36       	cpi	r18, 0x69	; 105
    1592:	59 f1       	breq	.+86     	; 0x15ea <serialComm+0x128>
    1594:	2a 36       	cpi	r18, 0x6A	; 106
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <serialComm+0xde>
    1598:	24 36       	cpi	r18, 0x64	; 100
    159a:	09 f0       	breq	.+2      	; 0x159e <serialComm+0xdc>
    159c:	4a c0       	rjmp	.+148    	; 0x1632 <serialComm+0x170>
    159e:	36 c0       	rjmp	.+108    	; 0x160c <serialComm+0x14a>
    15a0:	20 37       	cpi	r18, 0x70	; 112
    15a2:	91 f0       	breq	.+36     	; 0x15c8 <serialComm+0x106>
    15a4:	23 37       	cpi	r18, 0x73	; 115
    15a6:	09 f0       	breq	.+2      	; 0x15aa <serialComm+0xe8>
    15a8:	44 c0       	rjmp	.+136    	; 0x1632 <serialComm+0x170>
				case 's':
					trtWait(SEM_OMEGA_REF);
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					omegaRef = (int) val;
    15b0:	6a 81       	ldd	r22, Y+2	; 0x02
    15b2:	7b 81       	ldd	r23, Y+3	; 0x03
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixsfsi>
    15bc:	70 93 94 01 	sts	0x0194, r23
    15c0:	60 93 93 01 	sts	0x0193, r22
					trtSignal(SEM_OMEGA_REF);
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	32 c0       	rjmp	.+100    	; 0x162c <serialComm+0x16a>
					break;
				case 'p':
					trtWait(SEM_K_P);
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_p = val;
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	9b 81       	ldd	r25, Y+3	; 0x03
    15d2:	ac 81       	ldd	r26, Y+4	; 0x04
    15d4:	bd 81       	ldd	r27, Y+5	; 0x05
    15d6:	80 93 87 01 	sts	0x0187, r24
    15da:	90 93 88 01 	sts	0x0188, r25
    15de:	a0 93 89 01 	sts	0x0189, r26
    15e2:	b0 93 8a 01 	sts	0x018A, r27
					trtSignal(SEM_K_P);
    15e6:	84 e0       	ldi	r24, 0x04	; 4
    15e8:	21 c0       	rjmp	.+66     	; 0x162c <serialComm+0x16a>
					break;
				case 'i':
					trtWait(SEM_K_I);
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_i = val;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	9b 81       	ldd	r25, Y+3	; 0x03
    15f4:	ac 81       	ldd	r26, Y+4	; 0x04
    15f6:	bd 81       	ldd	r27, Y+5	; 0x05
    15f8:	80 93 8b 01 	sts	0x018B, r24
    15fc:	90 93 8c 01 	sts	0x018C, r25
    1600:	a0 93 8d 01 	sts	0x018D, r26
    1604:	b0 93 8e 01 	sts	0x018E, r27
					trtSignal(SEM_K_I);
    1608:	85 e0       	ldi	r24, 0x05	; 5
    160a:	10 c0       	rjmp	.+32     	; 0x162c <serialComm+0x16a>
					break;
				case 'd':
					trtWait(SEM_K_D);
    160c:	86 e0       	ldi	r24, 0x06	; 6
    160e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_d = val;
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	ac 81       	ldd	r26, Y+4	; 0x04
    1618:	bd 81       	ldd	r27, Y+5	; 0x05
    161a:	80 93 8f 01 	sts	0x018F, r24
    161e:	90 93 90 01 	sts	0x0190, r25
    1622:	a0 93 91 01 	sts	0x0191, r26
    1626:	b0 93 92 01 	sts	0x0192, r27
					trtSignal(SEM_K_D);
    162a:	86 e0       	ldi	r24, 0x06	; 6
    162c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
    1630:	72 cf       	rjmp	.-284    	; 0x1516 <serialComm+0x54>
					break;
				default:
					fprintf(stdout, "Command %c not recognized\n", cmd);
    1632:	00 d0       	rcall	.+0      	; 0x1634 <serialComm+0x172>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <serialComm+0x174>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <serialComm+0x176>
    1638:	ed b7       	in	r30, 0x3d	; 61
    163a:	fe b7       	in	r31, 0x3e	; 62
    163c:	31 96       	adiw	r30, 0x01	; 1
    163e:	80 91 16 03 	lds	r24, 0x0316
    1642:	90 91 17 03 	lds	r25, 0x0317
    1646:	ad b7       	in	r26, 0x3d	; 61
    1648:	be b7       	in	r27, 0x3e	; 62
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	9c 93       	st	X, r25
    164e:	8e 93       	st	-X, r24
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	b3 82       	std	Z+3, r11	; 0x03
    1654:	a2 82       	std	Z+2, r10	; 0x02
    1656:	24 83       	std	Z+4, r18	; 0x04
    1658:	15 82       	std	Z+5, r1	; 0x05
    165a:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <fprintf>
    165e:	8d b7       	in	r24, 0x3d	; 61
    1660:	9e b7       	in	r25, 0x3e	; 62
    1662:	06 96       	adiw	r24, 0x06	; 6
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <serialComm+0x1e0>
					break;
			}
		}
		else{
			fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    1666:	ad b7       	in	r26, 0x3d	; 61
    1668:	be b7       	in	r27, 0x3e	; 62
    166a:	18 97       	sbiw	r26, 0x08	; 8
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	be bf       	out	0x3e, r27	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	ad bf       	out	0x3d, r26	; 61
    1676:	ed b7       	in	r30, 0x3d	; 61
    1678:	fe b7       	in	r31, 0x3e	; 62
    167a:	31 96       	adiw	r30, 0x01	; 1
    167c:	80 91 16 03 	lds	r24, 0x0316
    1680:	90 91 17 03 	lds	r25, 0x0317
    1684:	12 96       	adiw	r26, 0x02	; 2
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	d3 82       	std	Z+3, r13	; 0x03
    168e:	c2 82       	std	Z+2, r12	; 0x02
    1690:	e4 82       	std	Z+4, r14	; 0x04
    1692:	f5 82       	std	Z+5, r15	; 0x05
    1694:	06 83       	std	Z+6, r16	; 0x06
    1696:	17 83       	std	Z+7, r17	; 0x07
    1698:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <fprintf>
    169c:	8d b7       	in	r24, 0x3d	; 61
    169e:	9e b7       	in	r25, 0x3e	; 62
    16a0:	08 96       	adiw	r24, 0x08	; 8
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	9e bf       	out	0x3e, r25	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	8d bf       	out	0x3d, r24	; 61
    16ac:	34 cf       	rjmp	.-408    	; 0x1516 <serialComm+0x54>

000016ae <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    16ae:	28 2f       	mov	r18, r24
    16b0:	20 7f       	andi	r18, 0xF0	; 240
    16b2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    16b4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    16b6:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b8:	20 ea       	ldi	r18, 0xA0	; 160
    16ba:	3f e0       	ldi	r19, 0x0F	; 15
    16bc:	f9 01       	movw	r30, r18
    16be:	31 97       	sbiw	r30, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    16c2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    16c4:	40 98       	cbi	0x08, 0	; 8
    16c6:	f9 01       	movw	r30, r18
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	44 e0       	ldi	r20, 0x04	; 4
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	4a 95       	dec	r20
    16d6:	e1 f7       	brne	.-8      	; 0x16d0 <LCDsendChar+0x22>
    16d8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    16da:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    16dc:	42 9a       	sbi	0x08, 2	; 8
    16de:	c9 01       	movw	r24, r18
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    16e4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    16e6:	40 98       	cbi	0x08, 0	; 8
    16e8:	c9 01       	movw	r24, r18
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    16ee:	08 95       	ret

000016f0 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    16f0:	28 2f       	mov	r18, r24
    16f2:	20 7f       	andi	r18, 0xF0	; 240
    16f4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    16f6:	42 9a       	sbi	0x08, 2	; 8
    16f8:	20 ea       	ldi	r18, 0xA0	; 160
    16fa:	3f e0       	ldi	r19, 0x0F	; 15
    16fc:	f9 01       	movw	r30, r18
    16fe:	31 97       	sbiw	r30, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1702:	42 98       	cbi	0x08, 2	; 8
    1704:	f9 01       	movw	r30, r18
    1706:	31 97       	sbiw	r30, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	54 e0       	ldi	r21, 0x04	; 4
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	5a 95       	dec	r21
    1714:	e1 f7       	brne	.-8      	; 0x170e <LCDsendCommand+0x1e>
    1716:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1718:	42 9a       	sbi	0x08, 2	; 8
    171a:	c9 01       	movw	r24, r18
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1720:	42 98       	cbi	0x08, 2	; 8
    1722:	c9 01       	movw	r24, r18
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    1728:	08 95       	ret

0000172a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    1730:	08 95       	ret

00001732 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    1738:	08 95       	ret

0000173a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	49 f0       	breq	.+18     	; 0x175a <LCDstring+0x20>
    1748:	ec 01       	movw	r28, r24
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    174e:	89 91       	ld	r24, Y+
    1750:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1754:	1f 5f       	subi	r17, 0xFF	; 255
    1756:	10 17       	cp	r17, r16
    1758:	d0 f3       	brcs	.-12     	; 0x174e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1764:	62 30       	cpi	r22, 0x02	; 2
    1766:	31 f0       	breq	.+12     	; 0x1774 <LCDGotoXY+0x10>
    1768:	63 30       	cpi	r22, 0x03	; 3
    176a:	31 f0       	breq	.+12     	; 0x1778 <LCDGotoXY+0x14>
    176c:	61 30       	cpi	r22, 0x01	; 1
    176e:	29 f4       	brne	.+10     	; 0x177a <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1770:	80 5c       	subi	r24, 0xC0	; 192
    1772:	03 c0       	rjmp	.+6      	; 0x177a <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1774:	8c 5e       	subi	r24, 0xEC	; 236
    1776:	01 c0       	rjmp	.+2      	; 0x177a <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1778:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    177a:	80 68       	ori	r24, 0x80	; 128
    177c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
	
}
    1780:	08 95       	ret

00001782 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	ec 01       	movw	r28, r24
    178a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    178c:	64 2f       	mov	r22, r20
    178e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDGotoXY>
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	03 c0       	rjmp	.+6      	; 0x179c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1796:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    179a:	1f 5f       	subi	r17, 0xFF	; 255
    179c:	fe 01       	movw	r30, r28
    179e:	e1 0f       	add	r30, r17
    17a0:	f1 1d       	adc	r31, r1
    17a2:	84 91       	lpm	r24, Z+
    17a4:	88 23       	and	r24, r24
    17a6:	b9 f7       	brne	.-18     	; 0x1796 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	08 95       	ret

000017b0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	7c 01       	movw	r14, r24
    17be:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    17c0:	11 0f       	add	r17, r17
    17c2:	11 0f       	add	r17, r17
    17c4:	11 0f       	add	r17, r17
    17c6:	10 64       	ori	r17, 0x40	; 64
    17c8:	c0 e0       	ldi	r28, 0x00	; 0
    17ca:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    17cc:	f7 01       	movw	r30, r14
    17ce:	ec 0f       	add	r30, r28
    17d0:	fd 1f       	adc	r31, r29
    17d2:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    17d4:	81 2f       	mov	r24, r17
    17d6:	8c 0f       	add	r24, r28
    17d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
		LCDsendChar(pcc);
    17dc:	80 2f       	mov	r24, r16
    17de:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    17e2:	21 96       	adiw	r28, 0x01	; 1
    17e4:	c8 30       	cpi	r28, 0x08	; 8
    17e6:	d1 05       	cpc	r29, r1
    17e8:	89 f7       	brne	.-30     	; 0x17cc <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	08 95       	ret

000017f8 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	80 e6       	ldi	r24, 0x60	; 96
    1800:	9a ee       	ldi	r25, 0xEA	; 234
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1806:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1808:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    180a:	87 b1       	in	r24, 0x07	; 7
    180c:	80 6f       	ori	r24, 0xF0	; 240
    180e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1810:	87 b1       	in	r24, 0x07	; 7
    1812:	87 60       	ori	r24, 0x07	; 7
    1814:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    181a:	42 9a       	sbi	0x08, 2	; 8
    181c:	20 ea       	ldi	r18, 0xA0	; 160
    181e:	3f e0       	ldi	r19, 0x0F	; 15
    1820:	f9 01       	movw	r30, r18
    1822:	31 97       	sbiw	r30, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1826:	42 98       	cbi	0x08, 2	; 8
    1828:	f9 01       	movw	r30, r18
    182a:	31 97       	sbiw	r30, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    182e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1830:	42 9a       	sbi	0x08, 2	; 8
    1832:	c9 01       	movw	r24, r18
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1838:	42 98       	cbi	0x08, 2	; 8
    183a:	c9 01       	movw	r24, r18
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1844:	42 9a       	sbi	0x08, 2	; 8
    1846:	c9 01       	movw	r24, r18
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    184c:	42 98       	cbi	0x08, 2	; 8
    184e:	c9 01       	movw	r24, r18
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1854:	88 e2       	ldi	r24, 0x28	; 40
    1856:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    185a:	8c e0       	ldi	r24, 0x0C	; 12
    185c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
    1860:	c5 ec       	ldi	r28, 0xC5	; 197
    1862:	d0 e0       	ldi	r29, 0x00	; 0
    1864:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1866:	16 2f       	mov	r17, r22
    1868:	1f 5f       	subi	r17, 0xFF	; 255
    186a:	ce 01       	movw	r24, r28
    186c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCDdefinechar>
    1870:	28 96       	adiw	r28, 0x08	; 8
    1872:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1874:	18 30       	cpi	r17, 0x08	; 8
    1876:	b9 f7       	brne	.-18     	; 0x1866 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	08 95       	ret

00001880 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	08 2f       	mov	r16, r24
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    188a:	8e e1       	ldi	r24, 0x1E	; 30
    188c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1890:	1f 5f       	subi	r17, 0xFF	; 255
    1892:	10 17       	cp	r17, r16
    1894:	d0 f3       	brcs	.-12     	; 0x188a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	08 2f       	mov	r16, r24
    18a2:	10 e0       	ldi	r17, 0x00	; 0
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    18a6:	88 e1       	ldi	r24, 0x18	; 24
    18a8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    18ac:	1f 5f       	subi	r17, 0xFF	; 255
    18ae:	10 17       	cp	r17, r16
    18b0:	d0 f3       	brcs	.-12     	; 0x18a6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	08 95       	ret

000018b8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    18b8:	8e e0       	ldi	r24, 0x0E	; 14
    18ba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    18be:	08 95       	ret

000018c0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    18c0:	8f e0       	ldi	r24, 0x0F	; 15
    18c2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    18c6:	08 95       	ret

000018c8 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    18c8:	8c e0       	ldi	r24, 0x0C	; 12
    18ca:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    18ce:	08 95       	ret

000018d0 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    18d0:	88 e0       	ldi	r24, 0x08	; 8
    18d2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    18d6:	08 95       	ret

000018d8 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
}
    18de:	08 95       	ret

000018e0 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	08 2f       	mov	r16, r24
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    18ea:	80 e1       	ldi	r24, 0x10	; 16
    18ec:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    18f0:	1f 5f       	subi	r17, 0xFF	; 255
    18f2:	10 17       	cp	r17, r16
    18f4:	d0 f3       	brcs	.-12     	; 0x18ea <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

000018fc <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	08 2f       	mov	r16, r24
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	04 c0       	rjmp	.+8      	; 0x190e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1906:	84 e1       	ldi	r24, 0x14	; 20
    1908:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    190c:	1f 5f       	subi	r17, 0xFF	; 255
    190e:	10 17       	cp	r17, r16
    1910:	d0 f3       	brcs	.-12     	; 0x1906 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1928:	96 e0       	ldi	r25, 0x06	; 6
    192a:	89 9f       	mul	r24, r25
    192c:	c0 01       	movw	r24, r0
    192e:	11 24       	eor	r1, r1
    1930:	24 2f       	mov	r18, r20
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	ac 01       	movw	r20, r24
    1936:	42 9f       	mul	r20, r18
    1938:	c0 01       	movw	r24, r0
    193a:	43 9f       	mul	r20, r19
    193c:	90 0d       	add	r25, r0
    193e:	52 9f       	mul	r21, r18
    1940:	90 0d       	add	r25, r0
    1942:	11 24       	eor	r1, r1
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	0e 94 99 19 	call	0x3332	; 0x3332 <__divmodhi4>
    194a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    194c:	cb 01       	movw	r24, r22
    194e:	66 e0       	ldi	r22, 0x06	; 6
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	0e 94 85 19 	call	0x330a	; 0x330a <__udivmodhi4>
    1956:	e8 2e       	mov	r14, r24
    1958:	ff 24       	eor	r15, r15
    195a:	00 e0       	ldi	r16, 0x00	; 0
    195c:	10 e0       	ldi	r17, 0x00	; 0
    195e:	12 c0       	rjmp	.+36     	; 0x1984 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1960:	c8 01       	movw	r24, r16
    1962:	05 96       	adiw	r24, 0x05	; 5
    1964:	c8 17       	cp	r28, r24
    1966:	d9 07       	cpc	r29, r25
    1968:	10 f0       	brcs	.+4      	; 0x196e <LCDprogressBar+0x56>
    196a:	85 e0       	ldi	r24, 0x05	; 5
    196c:	06 c0       	rjmp	.+12     	; 0x197a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    196e:	c0 17       	cp	r28, r16
    1970:	d1 07       	cpc	r29, r17
    1972:	10 f0       	brcs	.+4      	; 0x1978 <LCDprogressBar+0x60>
    1974:	8e 2d       	mov	r24, r14
    1976:	01 c0       	rjmp	.+2      	; 0x197a <LCDprogressBar+0x62>
    1978:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    197a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    197e:	f3 94       	inc	r15
    1980:	0a 5f       	subi	r16, 0xFA	; 250
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	fd 14       	cp	r15, r13
    1986:	60 f3       	brcs	.-40     	; 0x1960 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	08 95       	ret

00001998 <__fixunssfsi>:
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	7b 01       	movw	r14, r22
    19a2:	8c 01       	movw	r16, r24
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	5f e4       	ldi	r21, 0x4F	; 79
    19ac:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__gesf2>
    19b0:	88 23       	and	r24, r24
    19b2:	8c f0       	brlt	.+34     	; 0x19d6 <__fixunssfsi+0x3e>
    19b4:	c8 01       	movw	r24, r16
    19b6:	b7 01       	movw	r22, r14
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	5f e4       	ldi	r21, 0x4F	; 79
    19c0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__subsf3>
    19c4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixsfsi>
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	20 50       	subi	r18, 0x00	; 0
    19ce:	30 40       	sbci	r19, 0x00	; 0
    19d0:	40 40       	sbci	r20, 0x00	; 0
    19d2:	50 48       	sbci	r21, 0x80	; 128
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <__fixunssfsi+0x4a>
    19d6:	c8 01       	movw	r24, r16
    19d8:	b7 01       	movw	r22, r14
    19da:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixsfsi>
    19de:	9b 01       	movw	r18, r22
    19e0:	ac 01       	movw	r20, r24
    19e2:	b9 01       	movw	r22, r18
    19e4:	ca 01       	movw	r24, r20
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	08 95       	ret

000019f0 <_fpadd_parts>:
    19f0:	a0 e0       	ldi	r26, 0x00	; 0
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ee ef       	ldi	r30, 0xFE	; 254
    19f6:	fc e0       	ldi	r31, 0x0C	; 12
    19f8:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__>
    19fc:	dc 01       	movw	r26, r24
    19fe:	2b 01       	movw	r4, r22
    1a00:	fa 01       	movw	r30, r20
    1a02:	9c 91       	ld	r25, X
    1a04:	92 30       	cpi	r25, 0x02	; 2
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <_fpadd_parts+0x1a>
    1a08:	39 c1       	rjmp	.+626    	; 0x1c7c <_fpadd_parts+0x28c>
    1a0a:	eb 01       	movw	r28, r22
    1a0c:	88 81       	ld	r24, Y
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	08 f4       	brcc	.+2      	; 0x1a14 <_fpadd_parts+0x24>
    1a12:	33 c1       	rjmp	.+614    	; 0x1c7a <_fpadd_parts+0x28a>
    1a14:	94 30       	cpi	r25, 0x04	; 4
    1a16:	69 f4       	brne	.+26     	; 0x1a32 <_fpadd_parts+0x42>
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <_fpadd_parts+0x2e>
    1a1c:	2f c1       	rjmp	.+606    	; 0x1c7c <_fpadd_parts+0x28c>
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	9c 91       	ld	r25, X
    1a22:	11 97       	sbiw	r26, 0x01	; 1
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	98 17       	cp	r25, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <_fpadd_parts+0x3c>
    1a2a:	28 c1       	rjmp	.+592    	; 0x1c7c <_fpadd_parts+0x28c>
    1a2c:	a9 e9       	ldi	r26, 0x99	; 153
    1a2e:	b1 e0       	ldi	r27, 0x01	; 1
    1a30:	25 c1       	rjmp	.+586    	; 0x1c7c <_fpadd_parts+0x28c>
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <_fpadd_parts+0x48>
    1a36:	21 c1       	rjmp	.+578    	; 0x1c7a <_fpadd_parts+0x28a>
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	a9 f4       	brne	.+42     	; 0x1a66 <_fpadd_parts+0x76>
    1a3c:	92 30       	cpi	r25, 0x02	; 2
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <_fpadd_parts+0x52>
    1a40:	1d c1       	rjmp	.+570    	; 0x1c7c <_fpadd_parts+0x28c>
    1a42:	9a 01       	movw	r18, r20
    1a44:	ad 01       	movw	r20, r26
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	ea 01       	movw	r28, r20
    1a4a:	09 90       	ld	r0, Y+
    1a4c:	ae 01       	movw	r20, r28
    1a4e:	e9 01       	movw	r28, r18
    1a50:	09 92       	st	Y+, r0
    1a52:	9e 01       	movw	r18, r28
    1a54:	81 50       	subi	r24, 0x01	; 1
    1a56:	c1 f7       	brne	.-16     	; 0x1a48 <_fpadd_parts+0x58>
    1a58:	e2 01       	movw	r28, r4
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	11 96       	adiw	r26, 0x01	; 1
    1a5e:	9c 91       	ld	r25, X
    1a60:	89 23       	and	r24, r25
    1a62:	81 83       	std	Z+1, r24	; 0x01
    1a64:	08 c1       	rjmp	.+528    	; 0x1c76 <_fpadd_parts+0x286>
    1a66:	92 30       	cpi	r25, 0x02	; 2
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <_fpadd_parts+0x7c>
    1a6a:	07 c1       	rjmp	.+526    	; 0x1c7a <_fpadd_parts+0x28a>
    1a6c:	12 96       	adiw	r26, 0x02	; 2
    1a6e:	2d 90       	ld	r2, X+
    1a70:	3c 90       	ld	r3, X
    1a72:	13 97       	sbiw	r26, 0x03	; 3
    1a74:	eb 01       	movw	r28, r22
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	14 96       	adiw	r26, 0x04	; 4
    1a7c:	ad 90       	ld	r10, X+
    1a7e:	bd 90       	ld	r11, X+
    1a80:	cd 90       	ld	r12, X+
    1a82:	dc 90       	ld	r13, X
    1a84:	17 97       	sbiw	r26, 0x07	; 7
    1a86:	ec 80       	ldd	r14, Y+4	; 0x04
    1a88:	fd 80       	ldd	r15, Y+5	; 0x05
    1a8a:	0e 81       	ldd	r16, Y+6	; 0x06
    1a8c:	1f 81       	ldd	r17, Y+7	; 0x07
    1a8e:	91 01       	movw	r18, r2
    1a90:	28 1b       	sub	r18, r24
    1a92:	39 0b       	sbc	r19, r25
    1a94:	b9 01       	movw	r22, r18
    1a96:	37 ff       	sbrs	r19, 7
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <_fpadd_parts+0xb2>
    1a9a:	66 27       	eor	r22, r22
    1a9c:	77 27       	eor	r23, r23
    1a9e:	62 1b       	sub	r22, r18
    1aa0:	73 0b       	sbc	r23, r19
    1aa2:	60 32       	cpi	r22, 0x20	; 32
    1aa4:	71 05       	cpc	r23, r1
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <_fpadd_parts+0xba>
    1aa8:	61 c0       	rjmp	.+194    	; 0x1b6c <_fpadd_parts+0x17c>
    1aaa:	12 16       	cp	r1, r18
    1aac:	13 06       	cpc	r1, r19
    1aae:	6c f5       	brge	.+90     	; 0x1b0a <_fpadd_parts+0x11a>
    1ab0:	37 01       	movw	r6, r14
    1ab2:	48 01       	movw	r8, r16
    1ab4:	06 2e       	mov	r0, r22
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <_fpadd_parts+0xd0>
    1ab8:	96 94       	lsr	r9
    1aba:	87 94       	ror	r8
    1abc:	77 94       	ror	r7
    1abe:	67 94       	ror	r6
    1ac0:	0a 94       	dec	r0
    1ac2:	d2 f7       	brpl	.-12     	; 0x1ab8 <_fpadd_parts+0xc8>
    1ac4:	21 e0       	ldi	r18, 0x01	; 1
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <_fpadd_parts+0xe6>
    1ace:	22 0f       	add	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	44 1f       	adc	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	6a 95       	dec	r22
    1ad8:	d2 f7       	brpl	.-12     	; 0x1ace <_fpadd_parts+0xde>
    1ada:	21 50       	subi	r18, 0x01	; 1
    1adc:	30 40       	sbci	r19, 0x00	; 0
    1ade:	40 40       	sbci	r20, 0x00	; 0
    1ae0:	50 40       	sbci	r21, 0x00	; 0
    1ae2:	2e 21       	and	r18, r14
    1ae4:	3f 21       	and	r19, r15
    1ae6:	40 23       	and	r20, r16
    1ae8:	51 23       	and	r21, r17
    1aea:	21 15       	cp	r18, r1
    1aec:	31 05       	cpc	r19, r1
    1aee:	41 05       	cpc	r20, r1
    1af0:	51 05       	cpc	r21, r1
    1af2:	21 f0       	breq	.+8      	; 0x1afc <_fpadd_parts+0x10c>
    1af4:	21 e0       	ldi	r18, 0x01	; 1
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	79 01       	movw	r14, r18
    1afe:	8a 01       	movw	r16, r20
    1b00:	e6 28       	or	r14, r6
    1b02:	f7 28       	or	r15, r7
    1b04:	08 29       	or	r16, r8
    1b06:	19 29       	or	r17, r9
    1b08:	3c c0       	rjmp	.+120    	; 0x1b82 <_fpadd_parts+0x192>
    1b0a:	23 2b       	or	r18, r19
    1b0c:	d1 f1       	breq	.+116    	; 0x1b82 <_fpadd_parts+0x192>
    1b0e:	26 0e       	add	r2, r22
    1b10:	37 1e       	adc	r3, r23
    1b12:	35 01       	movw	r6, r10
    1b14:	46 01       	movw	r8, r12
    1b16:	06 2e       	mov	r0, r22
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <_fpadd_parts+0x132>
    1b1a:	96 94       	lsr	r9
    1b1c:	87 94       	ror	r8
    1b1e:	77 94       	ror	r7
    1b20:	67 94       	ror	r6
    1b22:	0a 94       	dec	r0
    1b24:	d2 f7       	brpl	.-12     	; 0x1b1a <_fpadd_parts+0x12a>
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <_fpadd_parts+0x148>
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	44 1f       	adc	r20, r20
    1b36:	55 1f       	adc	r21, r21
    1b38:	6a 95       	dec	r22
    1b3a:	d2 f7       	brpl	.-12     	; 0x1b30 <_fpadd_parts+0x140>
    1b3c:	21 50       	subi	r18, 0x01	; 1
    1b3e:	30 40       	sbci	r19, 0x00	; 0
    1b40:	40 40       	sbci	r20, 0x00	; 0
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	2a 21       	and	r18, r10
    1b46:	3b 21       	and	r19, r11
    1b48:	4c 21       	and	r20, r12
    1b4a:	5d 21       	and	r21, r13
    1b4c:	21 15       	cp	r18, r1
    1b4e:	31 05       	cpc	r19, r1
    1b50:	41 05       	cpc	r20, r1
    1b52:	51 05       	cpc	r21, r1
    1b54:	21 f0       	breq	.+8      	; 0x1b5e <_fpadd_parts+0x16e>
    1b56:	21 e0       	ldi	r18, 0x01	; 1
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	59 01       	movw	r10, r18
    1b60:	6a 01       	movw	r12, r20
    1b62:	a6 28       	or	r10, r6
    1b64:	b7 28       	or	r11, r7
    1b66:	c8 28       	or	r12, r8
    1b68:	d9 28       	or	r13, r9
    1b6a:	0b c0       	rjmp	.+22     	; 0x1b82 <_fpadd_parts+0x192>
    1b6c:	82 15       	cp	r24, r2
    1b6e:	93 05       	cpc	r25, r3
    1b70:	2c f0       	brlt	.+10     	; 0x1b7c <_fpadd_parts+0x18c>
    1b72:	1c 01       	movw	r2, r24
    1b74:	aa 24       	eor	r10, r10
    1b76:	bb 24       	eor	r11, r11
    1b78:	65 01       	movw	r12, r10
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <_fpadd_parts+0x192>
    1b7c:	ee 24       	eor	r14, r14
    1b7e:	ff 24       	eor	r15, r15
    1b80:	87 01       	movw	r16, r14
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	9c 91       	ld	r25, X
    1b86:	d2 01       	movw	r26, r4
    1b88:	11 96       	adiw	r26, 0x01	; 1
    1b8a:	8c 91       	ld	r24, X
    1b8c:	98 17       	cp	r25, r24
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <_fpadd_parts+0x1a2>
    1b90:	45 c0       	rjmp	.+138    	; 0x1c1c <_fpadd_parts+0x22c>
    1b92:	99 23       	and	r25, r25
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <_fpadd_parts+0x1b4>
    1b96:	a8 01       	movw	r20, r16
    1b98:	97 01       	movw	r18, r14
    1b9a:	2a 19       	sub	r18, r10
    1b9c:	3b 09       	sbc	r19, r11
    1b9e:	4c 09       	sbc	r20, r12
    1ba0:	5d 09       	sbc	r21, r13
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <_fpadd_parts+0x1c0>
    1ba4:	a6 01       	movw	r20, r12
    1ba6:	95 01       	movw	r18, r10
    1ba8:	2e 19       	sub	r18, r14
    1baa:	3f 09       	sbc	r19, r15
    1bac:	40 0b       	sbc	r20, r16
    1bae:	51 0b       	sbc	r21, r17
    1bb0:	57 fd       	sbrc	r21, 7
    1bb2:	08 c0       	rjmp	.+16     	; 0x1bc4 <_fpadd_parts+0x1d4>
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	33 82       	std	Z+3, r3	; 0x03
    1bb8:	22 82       	std	Z+2, r2	; 0x02
    1bba:	24 83       	std	Z+4, r18	; 0x04
    1bbc:	35 83       	std	Z+5, r19	; 0x05
    1bbe:	46 83       	std	Z+6, r20	; 0x06
    1bc0:	57 83       	std	Z+7, r21	; 0x07
    1bc2:	1d c0       	rjmp	.+58     	; 0x1bfe <_fpadd_parts+0x20e>
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	81 83       	std	Z+1, r24	; 0x01
    1bc8:	33 82       	std	Z+3, r3	; 0x03
    1bca:	22 82       	std	Z+2, r2	; 0x02
    1bcc:	88 27       	eor	r24, r24
    1bce:	99 27       	eor	r25, r25
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	82 1b       	sub	r24, r18
    1bd4:	93 0b       	sbc	r25, r19
    1bd6:	a4 0b       	sbc	r26, r20
    1bd8:	b5 0b       	sbc	r27, r21
    1bda:	84 83       	std	Z+4, r24	; 0x04
    1bdc:	95 83       	std	Z+5, r25	; 0x05
    1bde:	a6 83       	std	Z+6, r26	; 0x06
    1be0:	b7 83       	std	Z+7, r27	; 0x07
    1be2:	0d c0       	rjmp	.+26     	; 0x1bfe <_fpadd_parts+0x20e>
    1be4:	22 0f       	add	r18, r18
    1be6:	33 1f       	adc	r19, r19
    1be8:	44 1f       	adc	r20, r20
    1bea:	55 1f       	adc	r21, r21
    1bec:	24 83       	std	Z+4, r18	; 0x04
    1bee:	35 83       	std	Z+5, r19	; 0x05
    1bf0:	46 83       	std	Z+6, r20	; 0x06
    1bf2:	57 83       	std	Z+7, r21	; 0x07
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	93 83       	std	Z+3, r25	; 0x03
    1bfc:	82 83       	std	Z+2, r24	; 0x02
    1bfe:	24 81       	ldd	r18, Z+4	; 0x04
    1c00:	35 81       	ldd	r19, Z+5	; 0x05
    1c02:	46 81       	ldd	r20, Z+6	; 0x06
    1c04:	57 81       	ldd	r21, Z+7	; 0x07
    1c06:	da 01       	movw	r26, r20
    1c08:	c9 01       	movw	r24, r18
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	a1 09       	sbc	r26, r1
    1c0e:	b1 09       	sbc	r27, r1
    1c10:	8f 5f       	subi	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	af 4f       	sbci	r26, 0xFF	; 255
    1c16:	bf 43       	sbci	r27, 0x3F	; 63
    1c18:	28 f3       	brcs	.-54     	; 0x1be4 <_fpadd_parts+0x1f4>
    1c1a:	0b c0       	rjmp	.+22     	; 0x1c32 <_fpadd_parts+0x242>
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	33 82       	std	Z+3, r3	; 0x03
    1c20:	22 82       	std	Z+2, r2	; 0x02
    1c22:	ea 0c       	add	r14, r10
    1c24:	fb 1c       	adc	r15, r11
    1c26:	0c 1d       	adc	r16, r12
    1c28:	1d 1d       	adc	r17, r13
    1c2a:	e4 82       	std	Z+4, r14	; 0x04
    1c2c:	f5 82       	std	Z+5, r15	; 0x05
    1c2e:	06 83       	std	Z+6, r16	; 0x06
    1c30:	17 83       	std	Z+7, r17	; 0x07
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	80 83       	st	Z, r24
    1c36:	24 81       	ldd	r18, Z+4	; 0x04
    1c38:	35 81       	ldd	r19, Z+5	; 0x05
    1c3a:	46 81       	ldd	r20, Z+6	; 0x06
    1c3c:	57 81       	ldd	r21, Z+7	; 0x07
    1c3e:	57 ff       	sbrs	r21, 7
    1c40:	1a c0       	rjmp	.+52     	; 0x1c76 <_fpadd_parts+0x286>
    1c42:	c9 01       	movw	r24, r18
    1c44:	aa 27       	eor	r26, r26
    1c46:	97 fd       	sbrc	r25, 7
    1c48:	a0 95       	com	r26
    1c4a:	ba 2f       	mov	r27, r26
    1c4c:	81 70       	andi	r24, 0x01	; 1
    1c4e:	90 70       	andi	r25, 0x00	; 0
    1c50:	a0 70       	andi	r26, 0x00	; 0
    1c52:	b0 70       	andi	r27, 0x00	; 0
    1c54:	56 95       	lsr	r21
    1c56:	47 95       	ror	r20
    1c58:	37 95       	ror	r19
    1c5a:	27 95       	ror	r18
    1c5c:	82 2b       	or	r24, r18
    1c5e:	93 2b       	or	r25, r19
    1c60:	a4 2b       	or	r26, r20
    1c62:	b5 2b       	or	r27, r21
    1c64:	84 83       	std	Z+4, r24	; 0x04
    1c66:	95 83       	std	Z+5, r25	; 0x05
    1c68:	a6 83       	std	Z+6, r26	; 0x06
    1c6a:	b7 83       	std	Z+7, r27	; 0x07
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	93 83       	std	Z+3, r25	; 0x03
    1c74:	82 83       	std	Z+2, r24	; 0x02
    1c76:	df 01       	movw	r26, r30
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <_fpadd_parts+0x28c>
    1c7a:	d2 01       	movw	r26, r4
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	e2 e1       	ldi	r30, 0x12	; 18
    1c84:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__>

00001c88 <__subsf3>:
    1c88:	a0 e2       	ldi	r26, 0x20	; 32
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ea e4       	ldi	r30, 0x4A	; 74
    1c8e:	fe e0       	ldi	r31, 0x0E	; 14
    1c90:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x18>
    1c94:	69 83       	std	Y+1, r22	; 0x01
    1c96:	7a 83       	std	Y+2, r23	; 0x02
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	2d 83       	std	Y+5, r18	; 0x05
    1c9e:	3e 83       	std	Y+6, r19	; 0x06
    1ca0:	4f 83       	std	Y+7, r20	; 0x07
    1ca2:	58 87       	std	Y+8, r21	; 0x08
    1ca4:	e9 e0       	ldi	r30, 0x09	; 9
    1ca6:	ee 2e       	mov	r14, r30
    1ca8:	f1 2c       	mov	r15, r1
    1caa:	ec 0e       	add	r14, r28
    1cac:	fd 1e       	adc	r15, r29
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	b7 01       	movw	r22, r14
    1cb4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1cb8:	8e 01       	movw	r16, r28
    1cba:	0f 5e       	subi	r16, 0xEF	; 239
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	05 96       	adiw	r24, 0x05	; 5
    1cc2:	b8 01       	movw	r22, r16
    1cc4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1cc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	89 27       	eor	r24, r25
    1cce:	8a 8b       	std	Y+18, r24	; 0x12
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	b8 01       	movw	r22, r16
    1cd4:	ae 01       	movw	r20, r28
    1cd6:	47 5e       	subi	r20, 0xE7	; 231
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_fpadd_parts>
    1cde:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__pack_f>
    1ce2:	a0 96       	adiw	r28, 0x20	; 32
    1ce4:	e6 e0       	ldi	r30, 0x06	; 6
    1ce6:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x18>

00001cea <__addsf3>:
    1cea:	a0 e2       	ldi	r26, 0x20	; 32
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e7       	ldi	r30, 0x7B	; 123
    1cf0:	fe e0       	ldi	r31, 0x0E	; 14
    1cf2:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x18>
    1cf6:	69 83       	std	Y+1, r22	; 0x01
    1cf8:	7a 83       	std	Y+2, r23	; 0x02
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	2d 83       	std	Y+5, r18	; 0x05
    1d00:	3e 83       	std	Y+6, r19	; 0x06
    1d02:	4f 83       	std	Y+7, r20	; 0x07
    1d04:	58 87       	std	Y+8, r21	; 0x08
    1d06:	f9 e0       	ldi	r31, 0x09	; 9
    1d08:	ef 2e       	mov	r14, r31
    1d0a:	f1 2c       	mov	r15, r1
    1d0c:	ec 0e       	add	r14, r28
    1d0e:	fd 1e       	adc	r15, r29
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	b7 01       	movw	r22, r14
    1d16:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	0f 5e       	subi	r16, 0xEF	; 239
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	ce 01       	movw	r24, r28
    1d22:	05 96       	adiw	r24, 0x05	; 5
    1d24:	b8 01       	movw	r22, r16
    1d26:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1d2a:	c7 01       	movw	r24, r14
    1d2c:	b8 01       	movw	r22, r16
    1d2e:	ae 01       	movw	r20, r28
    1d30:	47 5e       	subi	r20, 0xE7	; 231
    1d32:	5f 4f       	sbci	r21, 0xFF	; 255
    1d34:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_fpadd_parts>
    1d38:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__pack_f>
    1d3c:	a0 96       	adiw	r28, 0x20	; 32
    1d3e:	e6 e0       	ldi	r30, 0x06	; 6
    1d40:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x18>

00001d44 <__nesf2>:
    1d44:	a8 e1       	ldi	r26, 0x18	; 24
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e8 ea       	ldi	r30, 0xA8	; 168
    1d4a:	fe e0       	ldi	r31, 0x0E	; 14
    1d4c:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x18>
    1d50:	69 83       	std	Y+1, r22	; 0x01
    1d52:	7a 83       	std	Y+2, r23	; 0x02
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	2d 83       	std	Y+5, r18	; 0x05
    1d5a:	3e 83       	std	Y+6, r19	; 0x06
    1d5c:	4f 83       	std	Y+7, r20	; 0x07
    1d5e:	58 87       	std	Y+8, r21	; 0x08
    1d60:	89 e0       	ldi	r24, 0x09	; 9
    1d62:	e8 2e       	mov	r14, r24
    1d64:	f1 2c       	mov	r15, r1
    1d66:	ec 0e       	add	r14, r28
    1d68:	fd 1e       	adc	r15, r29
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	b7 01       	movw	r22, r14
    1d70:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1d74:	8e 01       	movw	r16, r28
    1d76:	0f 5e       	subi	r16, 0xEF	; 239
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	05 96       	adiw	r24, 0x05	; 5
    1d7e:	b8 01       	movw	r22, r16
    1d80:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	40 f0       	brcs	.+16     	; 0x1d9a <__nesf2+0x56>
    1d8a:	89 89       	ldd	r24, Y+17	; 0x11
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	28 f0       	brcs	.+10     	; 0x1d9a <__nesf2+0x56>
    1d90:	c7 01       	movw	r24, r14
    1d92:	b8 01       	movw	r22, r16
    1d94:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fpcmp_parts_f>
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <__nesf2+0x58>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	68 96       	adiw	r28, 0x18	; 24
    1d9e:	e6 e0       	ldi	r30, 0x06	; 6
    1da0:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x18>

00001da4 <__gesf2>:
    1da4:	a8 e1       	ldi	r26, 0x18	; 24
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 ed       	ldi	r30, 0xD8	; 216
    1daa:	fe e0       	ldi	r31, 0x0E	; 14
    1dac:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x18>
    1db0:	69 83       	std	Y+1, r22	; 0x01
    1db2:	7a 83       	std	Y+2, r23	; 0x02
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	2d 83       	std	Y+5, r18	; 0x05
    1dba:	3e 83       	std	Y+6, r19	; 0x06
    1dbc:	4f 83       	std	Y+7, r20	; 0x07
    1dbe:	58 87       	std	Y+8, r21	; 0x08
    1dc0:	89 e0       	ldi	r24, 0x09	; 9
    1dc2:	e8 2e       	mov	r14, r24
    1dc4:	f1 2c       	mov	r15, r1
    1dc6:	ec 0e       	add	r14, r28
    1dc8:	fd 1e       	adc	r15, r29
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	b7 01       	movw	r22, r14
    1dd0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	0f 5e       	subi	r16, 0xEF	; 239
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	ce 01       	movw	r24, r28
    1ddc:	05 96       	adiw	r24, 0x05	; 5
    1dde:	b8 01       	movw	r22, r16
    1de0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	40 f0       	brcs	.+16     	; 0x1dfa <__gesf2+0x56>
    1dea:	89 89       	ldd	r24, Y+17	; 0x11
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	28 f0       	brcs	.+10     	; 0x1dfa <__gesf2+0x56>
    1df0:	c7 01       	movw	r24, r14
    1df2:	b8 01       	movw	r22, r16
    1df4:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fpcmp_parts_f>
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <__gesf2+0x58>
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	68 96       	adiw	r28, 0x18	; 24
    1dfe:	e6 e0       	ldi	r30, 0x06	; 6
    1e00:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x18>

00001e04 <__fixsfsi>:
    1e04:	ac e0       	ldi	r26, 0x0C	; 12
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e8 e0       	ldi	r30, 0x08	; 8
    1e0a:	ff e0       	ldi	r31, 0x0F	; 15
    1e0c:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x20>
    1e10:	69 83       	std	Y+1, r22	; 0x01
    1e12:	7a 83       	std	Y+2, r23	; 0x02
    1e14:	8b 83       	std	Y+3, r24	; 0x03
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	be 01       	movw	r22, r28
    1e1e:	6b 5f       	subi	r22, 0xFB	; 251
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	61 f1       	breq	.+88     	; 0x1e84 <__fixsfsi+0x80>
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	50 f1       	brcs	.+84     	; 0x1e84 <__fixsfsi+0x80>
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <__fixsfsi+0x38>
    1e34:	8e 81       	ldd	r24, Y+6	; 0x06
    1e36:	88 23       	and	r24, r24
    1e38:	51 f1       	breq	.+84     	; 0x1e8e <__fixsfsi+0x8a>
    1e3a:	2e c0       	rjmp	.+92     	; 0x1e98 <__fixsfsi+0x94>
    1e3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e3e:	38 85       	ldd	r19, Y+8	; 0x08
    1e40:	37 fd       	sbrc	r19, 7
    1e42:	20 c0       	rjmp	.+64     	; 0x1e84 <__fixsfsi+0x80>
    1e44:	6e 81       	ldd	r22, Y+6	; 0x06
    1e46:	2f 31       	cpi	r18, 0x1F	; 31
    1e48:	31 05       	cpc	r19, r1
    1e4a:	1c f0       	brlt	.+6      	; 0x1e52 <__fixsfsi+0x4e>
    1e4c:	66 23       	and	r22, r22
    1e4e:	f9 f0       	breq	.+62     	; 0x1e8e <__fixsfsi+0x8a>
    1e50:	23 c0       	rjmp	.+70     	; 0x1e98 <__fixsfsi+0x94>
    1e52:	8e e1       	ldi	r24, 0x1E	; 30
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	82 1b       	sub	r24, r18
    1e58:	93 0b       	sbc	r25, r19
    1e5a:	29 85       	ldd	r18, Y+9	; 0x09
    1e5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e60:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <__fixsfsi+0x68>
    1e64:	56 95       	lsr	r21
    1e66:	47 95       	ror	r20
    1e68:	37 95       	ror	r19
    1e6a:	27 95       	ror	r18
    1e6c:	8a 95       	dec	r24
    1e6e:	d2 f7       	brpl	.-12     	; 0x1e64 <__fixsfsi+0x60>
    1e70:	66 23       	and	r22, r22
    1e72:	b1 f0       	breq	.+44     	; 0x1ea0 <__fixsfsi+0x9c>
    1e74:	50 95       	com	r21
    1e76:	40 95       	com	r20
    1e78:	30 95       	com	r19
    1e7a:	21 95       	neg	r18
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e80:	5f 4f       	sbci	r21, 0xFF	; 255
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <__fixsfsi+0x9c>
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <__fixsfsi+0x9c>
    1e8e:	2f ef       	ldi	r18, 0xFF	; 255
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f ef       	ldi	r20, 0xFF	; 255
    1e94:	5f e7       	ldi	r21, 0x7F	; 127
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <__fixsfsi+0x9c>
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e8       	ldi	r21, 0x80	; 128
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	2c 96       	adiw	r28, 0x0c	; 12
    1ea6:	e2 e0       	ldi	r30, 0x02	; 2
    1ea8:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x20>

00001eac <__pack_f>:
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e4 80       	ldd	r14, Z+4	; 0x04
    1eba:	f5 80       	ldd	r15, Z+5	; 0x05
    1ebc:	06 81       	ldd	r16, Z+6	; 0x06
    1ebe:	17 81       	ldd	r17, Z+7	; 0x07
    1ec0:	d1 80       	ldd	r13, Z+1	; 0x01
    1ec2:	80 81       	ld	r24, Z
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	48 f4       	brcc	.+18     	; 0x1eda <__pack_f+0x2e>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e1       	ldi	r26, 0x10	; 16
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e8 2a       	or	r14, r24
    1ed2:	f9 2a       	or	r15, r25
    1ed4:	0a 2b       	or	r16, r26
    1ed6:	1b 2b       	or	r17, r27
    1ed8:	a5 c0       	rjmp	.+330    	; 0x2024 <__pack_f+0x178>
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <__pack_f+0x34>
    1ede:	9f c0       	rjmp	.+318    	; 0x201e <__pack_f+0x172>
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	21 f4       	brne	.+8      	; 0x1eec <__pack_f+0x40>
    1ee4:	ee 24       	eor	r14, r14
    1ee6:	ff 24       	eor	r15, r15
    1ee8:	87 01       	movw	r16, r14
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <__pack_f+0x4a>
    1eec:	e1 14       	cp	r14, r1
    1eee:	f1 04       	cpc	r15, r1
    1ef0:	01 05       	cpc	r16, r1
    1ef2:	11 05       	cpc	r17, r1
    1ef4:	19 f4       	brne	.+6      	; 0x1efc <__pack_f+0x50>
    1ef6:	e0 e0       	ldi	r30, 0x00	; 0
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	96 c0       	rjmp	.+300    	; 0x2028 <__pack_f+0x17c>
    1efc:	62 81       	ldd	r22, Z+2	; 0x02
    1efe:	73 81       	ldd	r23, Z+3	; 0x03
    1f00:	9f ef       	ldi	r25, 0xFF	; 255
    1f02:	62 38       	cpi	r22, 0x82	; 130
    1f04:	79 07       	cpc	r23, r25
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <__pack_f+0x5e>
    1f08:	5b c0       	rjmp	.+182    	; 0x1fc0 <__pack_f+0x114>
    1f0a:	22 e8       	ldi	r18, 0x82	; 130
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	26 1b       	sub	r18, r22
    1f10:	37 0b       	sbc	r19, r23
    1f12:	2a 31       	cpi	r18, 0x1A	; 26
    1f14:	31 05       	cpc	r19, r1
    1f16:	2c f0       	brlt	.+10     	; 0x1f22 <__pack_f+0x76>
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	2a c0       	rjmp	.+84     	; 0x1f76 <__pack_f+0xca>
    1f22:	b8 01       	movw	r22, r16
    1f24:	a7 01       	movw	r20, r14
    1f26:	02 2e       	mov	r0, r18
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <__pack_f+0x86>
    1f2a:	76 95       	lsr	r23
    1f2c:	67 95       	ror	r22
    1f2e:	57 95       	ror	r21
    1f30:	47 95       	ror	r20
    1f32:	0a 94       	dec	r0
    1f34:	d2 f7       	brpl	.-12     	; 0x1f2a <__pack_f+0x7e>
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <__pack_f+0x9c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	2a 95       	dec	r18
    1f4a:	d2 f7       	brpl	.-12     	; 0x1f40 <__pack_f+0x94>
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	a1 09       	sbc	r26, r1
    1f50:	b1 09       	sbc	r27, r1
    1f52:	8e 21       	and	r24, r14
    1f54:	9f 21       	and	r25, r15
    1f56:	a0 23       	and	r26, r16
    1f58:	b1 23       	and	r27, r17
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	a1 05       	cpc	r26, r1
    1f5e:	b1 05       	cpc	r27, r1
    1f60:	21 f0       	breq	.+8      	; 0x1f6a <__pack_f+0xbe>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	9a 01       	movw	r18, r20
    1f6c:	ab 01       	movw	r20, r22
    1f6e:	28 2b       	or	r18, r24
    1f70:	39 2b       	or	r19, r25
    1f72:	4a 2b       	or	r20, r26
    1f74:	5b 2b       	or	r21, r27
    1f76:	da 01       	movw	r26, r20
    1f78:	c9 01       	movw	r24, r18
    1f7a:	8f 77       	andi	r24, 0x7F	; 127
    1f7c:	90 70       	andi	r25, 0x00	; 0
    1f7e:	a0 70       	andi	r26, 0x00	; 0
    1f80:	b0 70       	andi	r27, 0x00	; 0
    1f82:	80 34       	cpi	r24, 0x40	; 64
    1f84:	91 05       	cpc	r25, r1
    1f86:	a1 05       	cpc	r26, r1
    1f88:	b1 05       	cpc	r27, r1
    1f8a:	39 f4       	brne	.+14     	; 0x1f9a <__pack_f+0xee>
    1f8c:	27 ff       	sbrs	r18, 7
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <__pack_f+0xf6>
    1f90:	20 5c       	subi	r18, 0xC0	; 192
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	4f 4f       	sbci	r20, 0xFF	; 255
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <__pack_f+0xf6>
    1f9a:	21 5c       	subi	r18, 0xC1	; 193
    1f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	e0 e0       	ldi	r30, 0x00	; 0
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	20 30       	cpi	r18, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	3a 07       	cpc	r19, r26
    1fac:	a0 e0       	ldi	r26, 0x00	; 0
    1fae:	4a 07       	cpc	r20, r26
    1fb0:	a0 e4       	ldi	r26, 0x40	; 64
    1fb2:	5a 07       	cpc	r21, r26
    1fb4:	10 f0       	brcs	.+4      	; 0x1fba <__pack_f+0x10e>
    1fb6:	e1 e0       	ldi	r30, 0x01	; 1
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	79 01       	movw	r14, r18
    1fbc:	8a 01       	movw	r16, r20
    1fbe:	27 c0       	rjmp	.+78     	; 0x200e <__pack_f+0x162>
    1fc0:	60 38       	cpi	r22, 0x80	; 128
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	64 f5       	brge	.+88     	; 0x201e <__pack_f+0x172>
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	e1 58       	subi	r30, 0x81	; 129
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	d8 01       	movw	r26, r16
    1fce:	c7 01       	movw	r24, r14
    1fd0:	8f 77       	andi	r24, 0x7F	; 127
    1fd2:	90 70       	andi	r25, 0x00	; 0
    1fd4:	a0 70       	andi	r26, 0x00	; 0
    1fd6:	b0 70       	andi	r27, 0x00	; 0
    1fd8:	80 34       	cpi	r24, 0x40	; 64
    1fda:	91 05       	cpc	r25, r1
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <__pack_f+0x144>
    1fe2:	e7 fe       	sbrs	r14, 7
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <__pack_f+0x154>
    1fe6:	80 e4       	ldi	r24, 0x40	; 64
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <__pack_f+0x14c>
    1ff0:	8f e3       	ldi	r24, 0x3F	; 63
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e8 0e       	add	r14, r24
    1ffa:	f9 1e       	adc	r15, r25
    1ffc:	0a 1f       	adc	r16, r26
    1ffe:	1b 1f       	adc	r17, r27
    2000:	17 ff       	sbrs	r17, 7
    2002:	05 c0       	rjmp	.+10     	; 0x200e <__pack_f+0x162>
    2004:	16 95       	lsr	r17
    2006:	07 95       	ror	r16
    2008:	f7 94       	ror	r15
    200a:	e7 94       	ror	r14
    200c:	31 96       	adiw	r30, 0x01	; 1
    200e:	87 e0       	ldi	r24, 0x07	; 7
    2010:	16 95       	lsr	r17
    2012:	07 95       	ror	r16
    2014:	f7 94       	ror	r15
    2016:	e7 94       	ror	r14
    2018:	8a 95       	dec	r24
    201a:	d1 f7       	brne	.-12     	; 0x2010 <__pack_f+0x164>
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <__pack_f+0x17c>
    201e:	ee 24       	eor	r14, r14
    2020:	ff 24       	eor	r15, r15
    2022:	87 01       	movw	r16, r14
    2024:	ef ef       	ldi	r30, 0xFF	; 255
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	6e 2f       	mov	r22, r30
    202a:	67 95       	ror	r22
    202c:	66 27       	eor	r22, r22
    202e:	67 95       	ror	r22
    2030:	90 2f       	mov	r25, r16
    2032:	9f 77       	andi	r25, 0x7F	; 127
    2034:	d7 94       	ror	r13
    2036:	dd 24       	eor	r13, r13
    2038:	d7 94       	ror	r13
    203a:	8e 2f       	mov	r24, r30
    203c:	86 95       	lsr	r24
    203e:	49 2f       	mov	r20, r25
    2040:	46 2b       	or	r20, r22
    2042:	58 2f       	mov	r21, r24
    2044:	5d 29       	or	r21, r13
    2046:	b7 01       	movw	r22, r14
    2048:	ca 01       	movw	r24, r20
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	08 95       	ret

00002056 <__unpack_f>:
    2056:	fc 01       	movw	r30, r24
    2058:	db 01       	movw	r26, r22
    205a:	40 81       	ld	r20, Z
    205c:	51 81       	ldd	r21, Z+1	; 0x01
    205e:	22 81       	ldd	r18, Z+2	; 0x02
    2060:	62 2f       	mov	r22, r18
    2062:	6f 77       	andi	r22, 0x7F	; 127
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	22 1f       	adc	r18, r18
    2068:	22 27       	eor	r18, r18
    206a:	22 1f       	adc	r18, r18
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	89 2f       	mov	r24, r25
    2070:	88 0f       	add	r24, r24
    2072:	82 2b       	or	r24, r18
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	99 1f       	adc	r25, r25
    207a:	99 27       	eor	r25, r25
    207c:	99 1f       	adc	r25, r25
    207e:	11 96       	adiw	r26, 0x01	; 1
    2080:	9c 93       	st	X, r25
    2082:	11 97       	sbiw	r26, 0x01	; 1
    2084:	21 15       	cp	r18, r1
    2086:	31 05       	cpc	r19, r1
    2088:	a9 f5       	brne	.+106    	; 0x20f4 <__unpack_f+0x9e>
    208a:	41 15       	cp	r20, r1
    208c:	51 05       	cpc	r21, r1
    208e:	61 05       	cpc	r22, r1
    2090:	71 05       	cpc	r23, r1
    2092:	11 f4       	brne	.+4      	; 0x2098 <__unpack_f+0x42>
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	37 c0       	rjmp	.+110    	; 0x2106 <__unpack_f+0xb0>
    2098:	82 e8       	ldi	r24, 0x82	; 130
    209a:	9f ef       	ldi	r25, 0xFF	; 255
    209c:	13 96       	adiw	r26, 0x03	; 3
    209e:	9c 93       	st	X, r25
    20a0:	8e 93       	st	-X, r24
    20a2:	12 97       	sbiw	r26, 0x02	; 2
    20a4:	9a 01       	movw	r18, r20
    20a6:	ab 01       	movw	r20, r22
    20a8:	67 e0       	ldi	r22, 0x07	; 7
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	44 1f       	adc	r20, r20
    20b0:	55 1f       	adc	r21, r21
    20b2:	6a 95       	dec	r22
    20b4:	d1 f7       	brne	.-12     	; 0x20aa <__unpack_f+0x54>
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	8c 93       	st	X, r24
    20ba:	0d c0       	rjmp	.+26     	; 0x20d6 <__unpack_f+0x80>
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	44 1f       	adc	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	12 96       	adiw	r26, 0x02	; 2
    20c6:	8d 91       	ld	r24, X+
    20c8:	9c 91       	ld	r25, X
    20ca:	13 97       	sbiw	r26, 0x03	; 3
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	13 96       	adiw	r26, 0x03	; 3
    20d0:	9c 93       	st	X, r25
    20d2:	8e 93       	st	-X, r24
    20d4:	12 97       	sbiw	r26, 0x02	; 2
    20d6:	20 30       	cpi	r18, 0x00	; 0
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	38 07       	cpc	r19, r24
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	48 07       	cpc	r20, r24
    20e0:	80 e4       	ldi	r24, 0x40	; 64
    20e2:	58 07       	cpc	r21, r24
    20e4:	58 f3       	brcs	.-42     	; 0x20bc <__unpack_f+0x66>
    20e6:	14 96       	adiw	r26, 0x04	; 4
    20e8:	2d 93       	st	X+, r18
    20ea:	3d 93       	st	X+, r19
    20ec:	4d 93       	st	X+, r20
    20ee:	5c 93       	st	X, r21
    20f0:	17 97       	sbiw	r26, 0x07	; 7
    20f2:	08 95       	ret
    20f4:	2f 3f       	cpi	r18, 0xFF	; 255
    20f6:	31 05       	cpc	r19, r1
    20f8:	79 f4       	brne	.+30     	; 0x2118 <__unpack_f+0xc2>
    20fa:	41 15       	cp	r20, r1
    20fc:	51 05       	cpc	r21, r1
    20fe:	61 05       	cpc	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	19 f4       	brne	.+6      	; 0x210a <__unpack_f+0xb4>
    2104:	84 e0       	ldi	r24, 0x04	; 4
    2106:	8c 93       	st	X, r24
    2108:	08 95       	ret
    210a:	64 ff       	sbrs	r22, 4
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <__unpack_f+0xbe>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	8c 93       	st	X, r24
    2112:	12 c0       	rjmp	.+36     	; 0x2138 <__unpack_f+0xe2>
    2114:	1c 92       	st	X, r1
    2116:	10 c0       	rjmp	.+32     	; 0x2138 <__unpack_f+0xe2>
    2118:	2f 57       	subi	r18, 0x7F	; 127
    211a:	30 40       	sbci	r19, 0x00	; 0
    211c:	13 96       	adiw	r26, 0x03	; 3
    211e:	3c 93       	st	X, r19
    2120:	2e 93       	st	-X, r18
    2122:	12 97       	sbiw	r26, 0x02	; 2
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	8c 93       	st	X, r24
    2128:	87 e0       	ldi	r24, 0x07	; 7
    212a:	44 0f       	add	r20, r20
    212c:	55 1f       	adc	r21, r21
    212e:	66 1f       	adc	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	8a 95       	dec	r24
    2134:	d1 f7       	brne	.-12     	; 0x212a <__unpack_f+0xd4>
    2136:	70 64       	ori	r23, 0x40	; 64
    2138:	14 96       	adiw	r26, 0x04	; 4
    213a:	4d 93       	st	X+, r20
    213c:	5d 93       	st	X+, r21
    213e:	6d 93       	st	X+, r22
    2140:	7c 93       	st	X, r23
    2142:	17 97       	sbiw	r26, 0x07	; 7
    2144:	08 95       	ret

00002146 <__fpcmp_parts_f>:
    2146:	1f 93       	push	r17
    2148:	dc 01       	movw	r26, r24
    214a:	fb 01       	movw	r30, r22
    214c:	9c 91       	ld	r25, X
    214e:	92 30       	cpi	r25, 0x02	; 2
    2150:	08 f4       	brcc	.+2      	; 0x2154 <__fpcmp_parts_f+0xe>
    2152:	47 c0       	rjmp	.+142    	; 0x21e2 <__fpcmp_parts_f+0x9c>
    2154:	80 81       	ld	r24, Z
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	08 f4       	brcc	.+2      	; 0x215c <__fpcmp_parts_f+0x16>
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <__fpcmp_parts_f+0x9c>
    215c:	94 30       	cpi	r25, 0x04	; 4
    215e:	51 f4       	brne	.+20     	; 0x2174 <__fpcmp_parts_f+0x2e>
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	1c 91       	ld	r17, X
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	99 f5       	brne	.+102    	; 0x21ce <__fpcmp_parts_f+0x88>
    2168:	81 81       	ldd	r24, Z+1	; 0x01
    216a:	68 2f       	mov	r22, r24
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	61 1b       	sub	r22, r17
    2170:	71 09       	sbc	r23, r1
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <__fpcmp_parts_f+0xac>
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	21 f0       	breq	.+8      	; 0x2180 <__fpcmp_parts_f+0x3a>
    2178:	92 30       	cpi	r25, 0x02	; 2
    217a:	31 f4       	brne	.+12     	; 0x2188 <__fpcmp_parts_f+0x42>
    217c:	82 30       	cpi	r24, 0x02	; 2
    217e:	b9 f1       	breq	.+110    	; 0x21ee <__fpcmp_parts_f+0xa8>
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	88 23       	and	r24, r24
    2184:	89 f1       	breq	.+98     	; 0x21e8 <__fpcmp_parts_f+0xa2>
    2186:	2d c0       	rjmp	.+90     	; 0x21e2 <__fpcmp_parts_f+0x9c>
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	1c 91       	ld	r17, X
    218c:	11 97       	sbiw	r26, 0x01	; 1
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	f1 f0       	breq	.+60     	; 0x21ce <__fpcmp_parts_f+0x88>
    2192:	81 81       	ldd	r24, Z+1	; 0x01
    2194:	18 17       	cp	r17, r24
    2196:	d9 f4       	brne	.+54     	; 0x21ce <__fpcmp_parts_f+0x88>
    2198:	12 96       	adiw	r26, 0x02	; 2
    219a:	2d 91       	ld	r18, X+
    219c:	3c 91       	ld	r19, X
    219e:	13 97       	sbiw	r26, 0x03	; 3
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	82 17       	cp	r24, r18
    21a6:	93 07       	cpc	r25, r19
    21a8:	94 f0       	brlt	.+36     	; 0x21ce <__fpcmp_parts_f+0x88>
    21aa:	28 17       	cp	r18, r24
    21ac:	39 07       	cpc	r19, r25
    21ae:	bc f0       	brlt	.+46     	; 0x21de <__fpcmp_parts_f+0x98>
    21b0:	14 96       	adiw	r26, 0x04	; 4
    21b2:	8d 91       	ld	r24, X+
    21b4:	9d 91       	ld	r25, X+
    21b6:	0d 90       	ld	r0, X+
    21b8:	bc 91       	ld	r27, X
    21ba:	a0 2d       	mov	r26, r0
    21bc:	24 81       	ldd	r18, Z+4	; 0x04
    21be:	35 81       	ldd	r19, Z+5	; 0x05
    21c0:	46 81       	ldd	r20, Z+6	; 0x06
    21c2:	57 81       	ldd	r21, Z+7	; 0x07
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	4a 07       	cpc	r20, r26
    21ca:	5b 07       	cpc	r21, r27
    21cc:	18 f4       	brcc	.+6      	; 0x21d4 <__fpcmp_parts_f+0x8e>
    21ce:	11 23       	and	r17, r17
    21d0:	41 f0       	breq	.+16     	; 0x21e2 <__fpcmp_parts_f+0x9c>
    21d2:	0a c0       	rjmp	.+20     	; 0x21e8 <__fpcmp_parts_f+0xa2>
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	a4 07       	cpc	r26, r20
    21da:	b5 07       	cpc	r27, r21
    21dc:	40 f4       	brcc	.+16     	; 0x21ee <__fpcmp_parts_f+0xa8>
    21de:	11 23       	and	r17, r17
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <__fpcmp_parts_f+0xa2>
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <__fpcmp_parts_f+0xac>
    21e8:	6f ef       	ldi	r22, 0xFF	; 255
    21ea:	7f ef       	ldi	r23, 0xFF	; 255
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <__fpcmp_parts_f+0xac>
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	cb 01       	movw	r24, r22
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret

000021f8 <vfprintf>:
    21f8:	a1 e1       	ldi	r26, 0x11	; 17
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e0       	ldi	r30, 0x02	; 2
    21fe:	f1 e1       	ldi	r31, 0x11	; 17
    2200:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__>
    2204:	3c 01       	movw	r6, r24
    2206:	7f 87       	std	Y+15, r23	; 0x0f
    2208:	6e 87       	std	Y+14, r22	; 0x0e
    220a:	6a 01       	movw	r12, r20
    220c:	fc 01       	movw	r30, r24
    220e:	17 82       	std	Z+7, r1	; 0x07
    2210:	16 82       	std	Z+6, r1	; 0x06
    2212:	83 81       	ldd	r24, Z+3	; 0x03
    2214:	81 fd       	sbrc	r24, 1
    2216:	03 c0       	rjmp	.+6      	; 0x221e <vfprintf+0x26>
    2218:	6f ef       	ldi	r22, 0xFF	; 255
    221a:	7f ef       	ldi	r23, 0xFF	; 255
    221c:	6f c3       	rjmp	.+1758   	; 0x28fc <vfprintf+0x704>
    221e:	9e 01       	movw	r18, r28
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	39 8b       	std	Y+17, r19	; 0x11
    2226:	28 8b       	std	Y+16, r18	; 0x10
    2228:	f3 01       	movw	r30, r6
    222a:	23 81       	ldd	r18, Z+3	; 0x03
    222c:	ee 85       	ldd	r30, Y+14	; 0x0e
    222e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2230:	23 fd       	sbrc	r18, 3
    2232:	85 91       	lpm	r24, Z+
    2234:	23 ff       	sbrs	r18, 3
    2236:	81 91       	ld	r24, Z+
    2238:	ff 87       	std	Y+15, r31	; 0x0f
    223a:	ee 87       	std	Y+14, r30	; 0x0e
    223c:	88 23       	and	r24, r24
    223e:	09 f4       	brne	.+2      	; 0x2242 <vfprintf+0x4a>
    2240:	5a c3       	rjmp	.+1716   	; 0x28f6 <vfprintf+0x6fe>
    2242:	85 32       	cpi	r24, 0x25	; 37
    2244:	51 f4       	brne	.+20     	; 0x225a <vfprintf+0x62>
    2246:	ee 85       	ldd	r30, Y+14	; 0x0e
    2248:	ff 85       	ldd	r31, Y+15	; 0x0f
    224a:	23 fd       	sbrc	r18, 3
    224c:	85 91       	lpm	r24, Z+
    224e:	23 ff       	sbrs	r18, 3
    2250:	81 91       	ld	r24, Z+
    2252:	ff 87       	std	Y+15, r31	; 0x0f
    2254:	ee 87       	std	Y+14, r30	; 0x0e
    2256:	85 32       	cpi	r24, 0x25	; 37
    2258:	29 f4       	brne	.+10     	; 0x2264 <vfprintf+0x6c>
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	b3 01       	movw	r22, r6
    225e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2262:	e2 cf       	rjmp	.-60     	; 0x2228 <vfprintf+0x30>
    2264:	98 2f       	mov	r25, r24
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	88 24       	eor	r8, r8
    226a:	99 24       	eor	r9, r9
    226c:	10 32       	cpi	r17, 0x20	; 32
    226e:	b0 f4       	brcc	.+44     	; 0x229c <vfprintf+0xa4>
    2270:	9b 32       	cpi	r25, 0x2B	; 43
    2272:	69 f0       	breq	.+26     	; 0x228e <vfprintf+0x96>
    2274:	9c 32       	cpi	r25, 0x2C	; 44
    2276:	28 f4       	brcc	.+10     	; 0x2282 <vfprintf+0x8a>
    2278:	90 32       	cpi	r25, 0x20	; 32
    227a:	51 f0       	breq	.+20     	; 0x2290 <vfprintf+0x98>
    227c:	93 32       	cpi	r25, 0x23	; 35
    227e:	71 f4       	brne	.+28     	; 0x229c <vfprintf+0xa4>
    2280:	0b c0       	rjmp	.+22     	; 0x2298 <vfprintf+0xa0>
    2282:	9d 32       	cpi	r25, 0x2D	; 45
    2284:	39 f0       	breq	.+14     	; 0x2294 <vfprintf+0x9c>
    2286:	90 33       	cpi	r25, 0x30	; 48
    2288:	49 f4       	brne	.+18     	; 0x229c <vfprintf+0xa4>
    228a:	11 60       	ori	r17, 0x01	; 1
    228c:	28 c0       	rjmp	.+80     	; 0x22de <vfprintf+0xe6>
    228e:	12 60       	ori	r17, 0x02	; 2
    2290:	14 60       	ori	r17, 0x04	; 4
    2292:	25 c0       	rjmp	.+74     	; 0x22de <vfprintf+0xe6>
    2294:	18 60       	ori	r17, 0x08	; 8
    2296:	23 c0       	rjmp	.+70     	; 0x22de <vfprintf+0xe6>
    2298:	10 61       	ori	r17, 0x10	; 16
    229a:	21 c0       	rjmp	.+66     	; 0x22de <vfprintf+0xe6>
    229c:	17 fd       	sbrc	r17, 7
    229e:	2a c0       	rjmp	.+84     	; 0x22f4 <vfprintf+0xfc>
    22a0:	89 2f       	mov	r24, r25
    22a2:	80 53       	subi	r24, 0x30	; 48
    22a4:	8a 30       	cpi	r24, 0x0A	; 10
    22a6:	78 f4       	brcc	.+30     	; 0x22c6 <vfprintf+0xce>
    22a8:	16 ff       	sbrs	r17, 6
    22aa:	06 c0       	rjmp	.+12     	; 0x22b8 <vfprintf+0xc0>
    22ac:	fa e0       	ldi	r31, 0x0A	; 10
    22ae:	9f 9e       	mul	r9, r31
    22b0:	90 2c       	mov	r9, r0
    22b2:	11 24       	eor	r1, r1
    22b4:	98 0e       	add	r9, r24
    22b6:	13 c0       	rjmp	.+38     	; 0x22de <vfprintf+0xe6>
    22b8:	3a e0       	ldi	r19, 0x0A	; 10
    22ba:	83 9e       	mul	r8, r19
    22bc:	80 2c       	mov	r8, r0
    22be:	11 24       	eor	r1, r1
    22c0:	88 0e       	add	r8, r24
    22c2:	10 62       	ori	r17, 0x20	; 32
    22c4:	0c c0       	rjmp	.+24     	; 0x22de <vfprintf+0xe6>
    22c6:	9e 32       	cpi	r25, 0x2E	; 46
    22c8:	21 f4       	brne	.+8      	; 0x22d2 <vfprintf+0xda>
    22ca:	16 fd       	sbrc	r17, 6
    22cc:	14 c3       	rjmp	.+1576   	; 0x28f6 <vfprintf+0x6fe>
    22ce:	10 64       	ori	r17, 0x40	; 64
    22d0:	06 c0       	rjmp	.+12     	; 0x22de <vfprintf+0xe6>
    22d2:	9c 36       	cpi	r25, 0x6C	; 108
    22d4:	11 f4       	brne	.+4      	; 0x22da <vfprintf+0xe2>
    22d6:	10 68       	ori	r17, 0x80	; 128
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <vfprintf+0xe6>
    22da:	98 36       	cpi	r25, 0x68	; 104
    22dc:	59 f4       	brne	.+22     	; 0x22f4 <vfprintf+0xfc>
    22de:	ee 85       	ldd	r30, Y+14	; 0x0e
    22e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    22e2:	23 fd       	sbrc	r18, 3
    22e4:	95 91       	lpm	r25, Z+
    22e6:	23 ff       	sbrs	r18, 3
    22e8:	91 91       	ld	r25, Z+
    22ea:	ff 87       	std	Y+15, r31	; 0x0f
    22ec:	ee 87       	std	Y+14, r30	; 0x0e
    22ee:	99 23       	and	r25, r25
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <vfprintf+0xfc>
    22f2:	bc cf       	rjmp	.-136    	; 0x226c <vfprintf+0x74>
    22f4:	89 2f       	mov	r24, r25
    22f6:	85 54       	subi	r24, 0x45	; 69
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	20 f4       	brcc	.+8      	; 0x2304 <vfprintf+0x10c>
    22fc:	81 2f       	mov	r24, r17
    22fe:	80 61       	ori	r24, 0x10	; 16
    2300:	90 5e       	subi	r25, 0xE0	; 224
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <vfprintf+0x11a>
    2304:	89 2f       	mov	r24, r25
    2306:	85 56       	subi	r24, 0x65	; 101
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	08 f0       	brcs	.+2      	; 0x230e <vfprintf+0x116>
    230c:	9f c1       	rjmp	.+830    	; 0x264c <vfprintf+0x454>
    230e:	81 2f       	mov	r24, r17
    2310:	8f 7e       	andi	r24, 0xEF	; 239
    2312:	86 fd       	sbrc	r24, 6
    2314:	02 c0       	rjmp	.+4      	; 0x231a <vfprintf+0x122>
    2316:	76 e0       	ldi	r23, 0x06	; 6
    2318:	97 2e       	mov	r9, r23
    231a:	6f e3       	ldi	r22, 0x3F	; 63
    231c:	f6 2e       	mov	r15, r22
    231e:	f8 22       	and	r15, r24
    2320:	95 36       	cpi	r25, 0x65	; 101
    2322:	19 f4       	brne	.+6      	; 0x232a <vfprintf+0x132>
    2324:	f0 e4       	ldi	r31, 0x40	; 64
    2326:	ff 2a       	or	r15, r31
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <vfprintf+0x140>
    232a:	96 36       	cpi	r25, 0x66	; 102
    232c:	19 f4       	brne	.+6      	; 0x2334 <vfprintf+0x13c>
    232e:	20 e8       	ldi	r18, 0x80	; 128
    2330:	f2 2a       	or	r15, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x140>
    2334:	91 10       	cpse	r9, r1
    2336:	9a 94       	dec	r9
    2338:	f7 fe       	sbrs	r15, 7
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <vfprintf+0x158>
    233c:	3b e3       	ldi	r19, 0x3B	; 59
    233e:	39 15       	cp	r19, r9
    2340:	18 f4       	brcc	.+6      	; 0x2348 <vfprintf+0x150>
    2342:	5c e3       	ldi	r21, 0x3C	; 60
    2344:	b5 2e       	mov	r11, r21
    2346:	02 c0       	rjmp	.+4      	; 0x234c <vfprintf+0x154>
    2348:	b9 2c       	mov	r11, r9
    234a:	b3 94       	inc	r11
    234c:	27 e0       	ldi	r18, 0x07	; 7
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <vfprintf+0x16a>
    2350:	47 e0       	ldi	r20, 0x07	; 7
    2352:	49 15       	cp	r20, r9
    2354:	20 f4       	brcc	.+8      	; 0x235e <vfprintf+0x166>
    2356:	bb 24       	eor	r11, r11
    2358:	47 e0       	ldi	r20, 0x07	; 7
    235a:	94 2e       	mov	r9, r20
    235c:	f7 cf       	rjmp	.-18     	; 0x234c <vfprintf+0x154>
    235e:	29 2d       	mov	r18, r9
    2360:	bb 24       	eor	r11, r11
    2362:	c6 01       	movw	r24, r12
    2364:	04 96       	adiw	r24, 0x04	; 4
    2366:	9d 87       	std	Y+13, r25	; 0x0d
    2368:	8c 87       	std	Y+12, r24	; 0x0c
    236a:	f6 01       	movw	r30, r12
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	ae 01       	movw	r20, r28
    2376:	4f 5f       	subi	r20, 0xFF	; 255
    2378:	5f 4f       	sbci	r21, 0xFF	; 255
    237a:	0b 2d       	mov	r16, r11
    237c:	0e 94 20 1a 	call	0x3440	; 0x3440 <__ftoa_engine>
    2380:	6c 01       	movw	r12, r24
    2382:	09 81       	ldd	r16, Y+1	; 0x01
    2384:	20 2e       	mov	r2, r16
    2386:	33 24       	eor	r3, r3
    2388:	00 ff       	sbrs	r16, 0
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <vfprintf+0x19c>
    238c:	03 fd       	sbrc	r16, 3
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <vfprintf+0x19c>
    2390:	1d e2       	ldi	r17, 0x2D	; 45
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <vfprintf+0x1ae>
    2394:	f1 fe       	sbrs	r15, 1
    2396:	02 c0       	rjmp	.+4      	; 0x239c <vfprintf+0x1a4>
    2398:	1b e2       	ldi	r17, 0x2B	; 43
    239a:	05 c0       	rjmp	.+10     	; 0x23a6 <vfprintf+0x1ae>
    239c:	f2 fc       	sbrc	r15, 2
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <vfprintf+0x1ac>
    23a0:	10 e0       	ldi	r17, 0x00	; 0
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <vfprintf+0x1ae>
    23a4:	10 e2       	ldi	r17, 0x20	; 32
    23a6:	c1 01       	movw	r24, r2
    23a8:	8c 70       	andi	r24, 0x0C	; 12
    23aa:	90 70       	andi	r25, 0x00	; 0
    23ac:	89 2b       	or	r24, r25
    23ae:	b9 f1       	breq	.+110    	; 0x241e <vfprintf+0x226>
    23b0:	11 23       	and	r17, r17
    23b2:	11 f4       	brne	.+4      	; 0x23b8 <vfprintf+0x1c0>
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <vfprintf+0x1c2>
    23b8:	84 e0       	ldi	r24, 0x04	; 4
    23ba:	88 15       	cp	r24, r8
    23bc:	10 f0       	brcs	.+4      	; 0x23c2 <vfprintf+0x1ca>
    23be:	88 24       	eor	r8, r8
    23c0:	0a c0       	rjmp	.+20     	; 0x23d6 <vfprintf+0x1de>
    23c2:	88 1a       	sub	r8, r24
    23c4:	f3 fc       	sbrc	r15, 3
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <vfprintf+0x1de>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	b3 01       	movw	r22, r6
    23ce:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    23d2:	8a 94       	dec	r8
    23d4:	c9 f7       	brne	.-14     	; 0x23c8 <vfprintf+0x1d0>
    23d6:	11 23       	and	r17, r17
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <vfprintf+0x1ec>
    23da:	81 2f       	mov	r24, r17
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	b3 01       	movw	r22, r6
    23e0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    23e4:	23 fe       	sbrs	r2, 3
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x1f6>
    23e8:	00 e7       	ldi	r16, 0x70	; 112
    23ea:	10 e0       	ldi	r17, 0x00	; 0
    23ec:	0e c0       	rjmp	.+28     	; 0x240a <vfprintf+0x212>
    23ee:	04 e7       	ldi	r16, 0x74	; 116
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	0b c0       	rjmp	.+22     	; 0x240a <vfprintf+0x212>
    23f4:	e1 14       	cp	r14, r1
    23f6:	f1 04       	cpc	r15, r1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <vfprintf+0x204>
    23fa:	80 52       	subi	r24, 0x20	; 32
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	b3 01       	movw	r22, r6
    2400:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2404:	0f 5f       	subi	r16, 0xFF	; 255
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	05 c0       	rjmp	.+10     	; 0x2414 <vfprintf+0x21c>
    240a:	ef 2c       	mov	r14, r15
    240c:	ff 24       	eor	r15, r15
    240e:	f0 e1       	ldi	r31, 0x10	; 16
    2410:	ef 22       	and	r14, r31
    2412:	ff 24       	eor	r15, r15
    2414:	f8 01       	movw	r30, r16
    2416:	84 91       	lpm	r24, Z+
    2418:	88 23       	and	r24, r24
    241a:	61 f7       	brne	.-40     	; 0x23f4 <vfprintf+0x1fc>
    241c:	14 c1       	rjmp	.+552    	; 0x2646 <vfprintf+0x44e>
    241e:	f7 fe       	sbrs	r15, 7
    2420:	12 c0       	rjmp	.+36     	; 0x2446 <vfprintf+0x24e>
    2422:	bc 0c       	add	r11, r12
    2424:	24 fe       	sbrs	r2, 4
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <vfprintf+0x238>
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	81 33       	cpi	r24, 0x31	; 49
    242c:	09 f4       	brne	.+2      	; 0x2430 <vfprintf+0x238>
    242e:	ba 94       	dec	r11
    2430:	1b 14       	cp	r1, r11
    2432:	1c f0       	brlt	.+6      	; 0x243a <vfprintf+0x242>
    2434:	bb 24       	eor	r11, r11
    2436:	b3 94       	inc	r11
    2438:	2d c0       	rjmp	.+90     	; 0x2494 <vfprintf+0x29c>
    243a:	f8 e0       	ldi	r31, 0x08	; 8
    243c:	fb 15       	cp	r31, r11
    243e:	50 f5       	brcc	.+84     	; 0x2494 <vfprintf+0x29c>
    2440:	38 e0       	ldi	r19, 0x08	; 8
    2442:	b3 2e       	mov	r11, r19
    2444:	27 c0       	rjmp	.+78     	; 0x2494 <vfprintf+0x29c>
    2446:	f6 fc       	sbrc	r15, 6
    2448:	25 c0       	rjmp	.+74     	; 0x2494 <vfprintf+0x29c>
    244a:	89 2d       	mov	r24, r9
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	8c 15       	cp	r24, r12
    2450:	9d 05       	cpc	r25, r13
    2452:	4c f0       	brlt	.+18     	; 0x2466 <vfprintf+0x26e>
    2454:	2c ef       	ldi	r18, 0xFC	; 252
    2456:	c2 16       	cp	r12, r18
    2458:	2f ef       	ldi	r18, 0xFF	; 255
    245a:	d2 06       	cpc	r13, r18
    245c:	24 f0       	brlt	.+8      	; 0x2466 <vfprintf+0x26e>
    245e:	30 e8       	ldi	r19, 0x80	; 128
    2460:	f3 2a       	or	r15, r19
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <vfprintf+0x26e>
    2464:	9a 94       	dec	r9
    2466:	99 20       	and	r9, r9
    2468:	49 f0       	breq	.+18     	; 0x247c <vfprintf+0x284>
    246a:	e2 e0       	ldi	r30, 0x02	; 2
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	ec 0f       	add	r30, r28
    2470:	fd 1f       	adc	r31, r29
    2472:	e9 0d       	add	r30, r9
    2474:	f1 1d       	adc	r31, r1
    2476:	80 81       	ld	r24, Z
    2478:	80 33       	cpi	r24, 0x30	; 48
    247a:	a1 f3       	breq	.-24     	; 0x2464 <vfprintf+0x26c>
    247c:	f7 fe       	sbrs	r15, 7
    247e:	0a c0       	rjmp	.+20     	; 0x2494 <vfprintf+0x29c>
    2480:	b9 2c       	mov	r11, r9
    2482:	b3 94       	inc	r11
    2484:	89 2d       	mov	r24, r9
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	c8 16       	cp	r12, r24
    248a:	d9 06       	cpc	r13, r25
    248c:	14 f0       	brlt	.+4      	; 0x2492 <vfprintf+0x29a>
    248e:	99 24       	eor	r9, r9
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <vfprintf+0x29c>
    2492:	9c 18       	sub	r9, r12
    2494:	f7 fc       	sbrc	r15, 7
    2496:	03 c0       	rjmp	.+6      	; 0x249e <vfprintf+0x2a6>
    2498:	25 e0       	ldi	r18, 0x05	; 5
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	09 c0       	rjmp	.+18     	; 0x24b0 <vfprintf+0x2b8>
    249e:	1c 14       	cp	r1, r12
    24a0:	1d 04       	cpc	r1, r13
    24a2:	1c f0       	brlt	.+6      	; 0x24aa <vfprintf+0x2b2>
    24a4:	21 e0       	ldi	r18, 0x01	; 1
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <vfprintf+0x2b8>
    24aa:	96 01       	movw	r18, r12
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	11 23       	and	r17, r17
    24b2:	11 f0       	breq	.+4      	; 0x24b8 <vfprintf+0x2c0>
    24b4:	2f 5f       	subi	r18, 0xFF	; 255
    24b6:	3f 4f       	sbci	r19, 0xFF	; 255
    24b8:	99 20       	and	r9, r9
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <vfprintf+0x2ce>
    24bc:	89 2d       	mov	r24, r9
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	28 0f       	add	r18, r24
    24c4:	39 1f       	adc	r19, r25
    24c6:	88 2d       	mov	r24, r8
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	28 17       	cp	r18, r24
    24cc:	39 07       	cpc	r19, r25
    24ce:	14 f0       	brlt	.+4      	; 0x24d4 <vfprintf+0x2dc>
    24d0:	88 24       	eor	r8, r8
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <vfprintf+0x2de>
    24d4:	82 1a       	sub	r8, r18
    24d6:	4f 2c       	mov	r4, r15
    24d8:	55 24       	eor	r5, r5
    24da:	c2 01       	movw	r24, r4
    24dc:	89 70       	andi	r24, 0x09	; 9
    24de:	90 70       	andi	r25, 0x00	; 0
    24e0:	89 2b       	or	r24, r25
    24e2:	39 f0       	breq	.+14     	; 0x24f2 <vfprintf+0x2fa>
    24e4:	08 c0       	rjmp	.+16     	; 0x24f6 <vfprintf+0x2fe>
    24e6:	80 e2       	ldi	r24, 0x20	; 32
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	b3 01       	movw	r22, r6
    24ec:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    24f0:	8a 94       	dec	r8
    24f2:	88 20       	and	r8, r8
    24f4:	c1 f7       	brne	.-16     	; 0x24e6 <vfprintf+0x2ee>
    24f6:	11 23       	and	r17, r17
    24f8:	29 f0       	breq	.+10     	; 0x2504 <vfprintf+0x30c>
    24fa:	81 2f       	mov	r24, r17
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	b3 01       	movw	r22, r6
    2500:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2504:	43 fe       	sbrs	r4, 3
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <vfprintf+0x31e>
    2508:	08 c0       	rjmp	.+16     	; 0x251a <vfprintf+0x322>
    250a:	80 e3       	ldi	r24, 0x30	; 48
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	b3 01       	movw	r22, r6
    2510:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2514:	8a 94       	dec	r8
    2516:	88 20       	and	r8, r8
    2518:	c1 f7       	brne	.-16     	; 0x250a <vfprintf+0x312>
    251a:	f7 fe       	sbrs	r15, 7
    251c:	46 c0       	rjmp	.+140    	; 0x25aa <vfprintf+0x3b2>
    251e:	86 01       	movw	r16, r12
    2520:	d7 fe       	sbrs	r13, 7
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <vfprintf+0x330>
    2524:	00 e0       	ldi	r16, 0x00	; 0
    2526:	10 e0       	ldi	r17, 0x00	; 0
    2528:	76 01       	movw	r14, r12
    252a:	08 94       	sec
    252c:	e1 1c       	adc	r14, r1
    252e:	f1 1c       	adc	r15, r1
    2530:	e0 1a       	sub	r14, r16
    2532:	f1 0a       	sbc	r15, r17
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	4c 0f       	add	r20, r28
    253a:	5d 1f       	adc	r21, r29
    253c:	e4 0e       	add	r14, r20
    253e:	f5 1e       	adc	r15, r21
    2540:	26 01       	movw	r4, r12
    2542:	4b 18       	sub	r4, r11
    2544:	51 08       	sbc	r5, r1
    2546:	89 2d       	mov	r24, r9
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	aa 24       	eor	r10, r10
    254c:	bb 24       	eor	r11, r11
    254e:	a8 1a       	sub	r10, r24
    2550:	b9 0a       	sbc	r11, r25
    2552:	5f ef       	ldi	r21, 0xFF	; 255
    2554:	0f 3f       	cpi	r16, 0xFF	; 255
    2556:	15 07       	cpc	r17, r21
    2558:	29 f4       	brne	.+10     	; 0x2564 <vfprintf+0x36c>
    255a:	8e e2       	ldi	r24, 0x2E	; 46
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	b3 01       	movw	r22, r6
    2560:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2564:	c0 16       	cp	r12, r16
    2566:	d1 06       	cpc	r13, r17
    2568:	34 f0       	brlt	.+12     	; 0x2576 <vfprintf+0x37e>
    256a:	40 16       	cp	r4, r16
    256c:	51 06       	cpc	r5, r17
    256e:	1c f4       	brge	.+6      	; 0x2576 <vfprintf+0x37e>
    2570:	f7 01       	movw	r30, r14
    2572:	80 81       	ld	r24, Z
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <vfprintf+0x380>
    2576:	80 e3       	ldi	r24, 0x30	; 48
    2578:	01 50       	subi	r16, 0x01	; 1
    257a:	10 40       	sbci	r17, 0x00	; 0
    257c:	08 94       	sec
    257e:	e1 1c       	adc	r14, r1
    2580:	f1 1c       	adc	r15, r1
    2582:	0a 15       	cp	r16, r10
    2584:	1b 05       	cpc	r17, r11
    2586:	2c f0       	brlt	.+10     	; 0x2592 <vfprintf+0x39a>
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	b3 01       	movw	r22, r6
    258c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2590:	e0 cf       	rjmp	.-64     	; 0x2552 <vfprintf+0x35a>
    2592:	0c 15       	cp	r16, r12
    2594:	1d 05       	cpc	r17, r13
    2596:	39 f4       	brne	.+14     	; 0x25a6 <vfprintf+0x3ae>
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	96 33       	cpi	r25, 0x36	; 54
    259c:	18 f4       	brcc	.+6      	; 0x25a4 <vfprintf+0x3ac>
    259e:	95 33       	cpi	r25, 0x35	; 53
    25a0:	11 f4       	brne	.+4      	; 0x25a6 <vfprintf+0x3ae>
    25a2:	24 fe       	sbrs	r2, 4
    25a4:	81 e3       	ldi	r24, 0x31	; 49
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	4b c0       	rjmp	.+150    	; 0x2640 <vfprintf+0x448>
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	81 33       	cpi	r24, 0x31	; 49
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <vfprintf+0x3ba>
    25b0:	0f 7e       	andi	r16, 0xEF	; 239
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	b3 01       	movw	r22, r6
    25b6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    25ba:	99 20       	and	r9, r9
    25bc:	a1 f0       	breq	.+40     	; 0x25e6 <vfprintf+0x3ee>
    25be:	8e e2       	ldi	r24, 0x2E	; 46
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	b3 01       	movw	r22, r6
    25c4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    25c8:	12 e0       	ldi	r17, 0x02	; 2
    25ca:	e1 e0       	ldi	r30, 0x01	; 1
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	ec 0f       	add	r30, r28
    25d0:	fd 1f       	adc	r31, r29
    25d2:	e1 0f       	add	r30, r17
    25d4:	f1 1d       	adc	r31, r1
    25d6:	1f 5f       	subi	r17, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	b3 01       	movw	r22, r6
    25de:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    25e2:	9a 94       	dec	r9
    25e4:	91 f7       	brne	.-28     	; 0x25ca <vfprintf+0x3d2>
    25e6:	44 fc       	sbrc	r4, 4
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <vfprintf+0x3f8>
    25ea:	85 e6       	ldi	r24, 0x65	; 101
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x3fc>
    25f0:	85 e4       	ldi	r24, 0x45	; 69
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	b3 01       	movw	r22, r6
    25f6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    25fa:	d7 fc       	sbrc	r13, 7
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <vfprintf+0x410>
    25fe:	c1 14       	cp	r12, r1
    2600:	d1 04       	cpc	r13, r1
    2602:	41 f4       	brne	.+16     	; 0x2614 <vfprintf+0x41c>
    2604:	04 ff       	sbrs	r16, 4
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <vfprintf+0x41c>
    2608:	d0 94       	com	r13
    260a:	c1 94       	neg	r12
    260c:	d1 08       	sbc	r13, r1
    260e:	d3 94       	inc	r13
    2610:	8d e2       	ldi	r24, 0x2D	; 45
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <vfprintf+0x41e>
    2614:	8b e2       	ldi	r24, 0x2B	; 43
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	b3 01       	movw	r22, r6
    261a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    261e:	80 e3       	ldi	r24, 0x30	; 48
    2620:	05 c0       	rjmp	.+10     	; 0x262c <vfprintf+0x434>
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	26 ef       	ldi	r18, 0xF6	; 246
    2626:	3f ef       	ldi	r19, 0xFF	; 255
    2628:	c2 0e       	add	r12, r18
    262a:	d3 1e       	adc	r13, r19
    262c:	3a e0       	ldi	r19, 0x0A	; 10
    262e:	c3 16       	cp	r12, r19
    2630:	d1 04       	cpc	r13, r1
    2632:	bc f7       	brge	.-18     	; 0x2622 <vfprintf+0x42a>
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	b3 01       	movw	r22, r6
    2638:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    263c:	c6 01       	movw	r24, r12
    263e:	c0 96       	adiw	r24, 0x30	; 48
    2640:	b3 01       	movw	r22, r6
    2642:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2646:	cc 84       	ldd	r12, Y+12	; 0x0c
    2648:	dd 84       	ldd	r13, Y+13	; 0x0d
    264a:	52 c1       	rjmp	.+676    	; 0x28f0 <vfprintf+0x6f8>
    264c:	93 36       	cpi	r25, 0x63	; 99
    264e:	31 f0       	breq	.+12     	; 0x265c <vfprintf+0x464>
    2650:	93 37       	cpi	r25, 0x73	; 115
    2652:	99 f0       	breq	.+38     	; 0x267a <vfprintf+0x482>
    2654:	93 35       	cpi	r25, 0x53	; 83
    2656:	09 f0       	breq	.+2      	; 0x265a <vfprintf+0x462>
    2658:	59 c0       	rjmp	.+178    	; 0x270c <vfprintf+0x514>
    265a:	23 c0       	rjmp	.+70     	; 0x26a2 <vfprintf+0x4aa>
    265c:	f6 01       	movw	r30, r12
    265e:	80 81       	ld	r24, Z
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	5e 01       	movw	r10, r28
    2664:	08 94       	sec
    2666:	a1 1c       	adc	r10, r1
    2668:	b1 1c       	adc	r11, r1
    266a:	22 e0       	ldi	r18, 0x02	; 2
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	c2 0e       	add	r12, r18
    2670:	d3 1e       	adc	r13, r19
    2672:	21 e0       	ldi	r18, 0x01	; 1
    2674:	e2 2e       	mov	r14, r18
    2676:	f1 2c       	mov	r15, r1
    2678:	12 c0       	rjmp	.+36     	; 0x269e <vfprintf+0x4a6>
    267a:	f6 01       	movw	r30, r12
    267c:	a0 80       	ld	r10, Z
    267e:	b1 80       	ldd	r11, Z+1	; 0x01
    2680:	16 fd       	sbrc	r17, 6
    2682:	03 c0       	rjmp	.+6      	; 0x268a <vfprintf+0x492>
    2684:	6f ef       	ldi	r22, 0xFF	; 255
    2686:	7f ef       	ldi	r23, 0xFF	; 255
    2688:	02 c0       	rjmp	.+4      	; 0x268e <vfprintf+0x496>
    268a:	69 2d       	mov	r22, r9
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	22 e0       	ldi	r18, 0x02	; 2
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	c2 0e       	add	r12, r18
    2694:	d3 1e       	adc	r13, r19
    2696:	c5 01       	movw	r24, r10
    2698:	0e 94 1e 1b 	call	0x363c	; 0x363c <strnlen>
    269c:	7c 01       	movw	r14, r24
    269e:	1f 77       	andi	r17, 0x7F	; 127
    26a0:	13 c0       	rjmp	.+38     	; 0x26c8 <vfprintf+0x4d0>
    26a2:	f6 01       	movw	r30, r12
    26a4:	a0 80       	ld	r10, Z
    26a6:	b1 80       	ldd	r11, Z+1	; 0x01
    26a8:	16 fd       	sbrc	r17, 6
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <vfprintf+0x4ba>
    26ac:	6f ef       	ldi	r22, 0xFF	; 255
    26ae:	7f ef       	ldi	r23, 0xFF	; 255
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <vfprintf+0x4be>
    26b2:	69 2d       	mov	r22, r9
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	22 e0       	ldi	r18, 0x02	; 2
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	c2 0e       	add	r12, r18
    26bc:	d3 1e       	adc	r13, r19
    26be:	c5 01       	movw	r24, r10
    26c0:	0e 94 13 1b 	call	0x3626	; 0x3626 <strnlen_P>
    26c4:	7c 01       	movw	r14, r24
    26c6:	10 68       	ori	r17, 0x80	; 128
    26c8:	13 ff       	sbrs	r17, 3
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <vfprintf+0x4e2>
    26cc:	1b c0       	rjmp	.+54     	; 0x2704 <vfprintf+0x50c>
    26ce:	80 e2       	ldi	r24, 0x20	; 32
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	b3 01       	movw	r22, r6
    26d4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    26d8:	8a 94       	dec	r8
    26da:	88 2d       	mov	r24, r8
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	e8 16       	cp	r14, r24
    26e0:	f9 06       	cpc	r15, r25
    26e2:	a8 f3       	brcs	.-22     	; 0x26ce <vfprintf+0x4d6>
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <vfprintf+0x50c>
    26e6:	f5 01       	movw	r30, r10
    26e8:	17 fd       	sbrc	r17, 7
    26ea:	85 91       	lpm	r24, Z+
    26ec:	17 ff       	sbrs	r17, 7
    26ee:	81 91       	ld	r24, Z+
    26f0:	5f 01       	movw	r10, r30
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	b3 01       	movw	r22, r6
    26f6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    26fa:	81 10       	cpse	r8, r1
    26fc:	8a 94       	dec	r8
    26fe:	08 94       	sec
    2700:	e1 08       	sbc	r14, r1
    2702:	f1 08       	sbc	r15, r1
    2704:	e1 14       	cp	r14, r1
    2706:	f1 04       	cpc	r15, r1
    2708:	71 f7       	brne	.-36     	; 0x26e6 <vfprintf+0x4ee>
    270a:	f2 c0       	rjmp	.+484    	; 0x28f0 <vfprintf+0x6f8>
    270c:	94 36       	cpi	r25, 0x64	; 100
    270e:	11 f0       	breq	.+4      	; 0x2714 <vfprintf+0x51c>
    2710:	99 36       	cpi	r25, 0x69	; 105
    2712:	89 f5       	brne	.+98     	; 0x2776 <vfprintf+0x57e>
    2714:	17 ff       	sbrs	r17, 7
    2716:	08 c0       	rjmp	.+16     	; 0x2728 <vfprintf+0x530>
    2718:	f6 01       	movw	r30, r12
    271a:	20 81       	ld	r18, Z
    271c:	31 81       	ldd	r19, Z+1	; 0x01
    271e:	42 81       	ldd	r20, Z+2	; 0x02
    2720:	53 81       	ldd	r21, Z+3	; 0x03
    2722:	84 e0       	ldi	r24, 0x04	; 4
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0a c0       	rjmp	.+20     	; 0x273c <vfprintf+0x544>
    2728:	f6 01       	movw	r30, r12
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	9c 01       	movw	r18, r24
    2730:	44 27       	eor	r20, r20
    2732:	37 fd       	sbrc	r19, 7
    2734:	40 95       	com	r20
    2736:	54 2f       	mov	r21, r20
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	c8 0e       	add	r12, r24
    273e:	d9 1e       	adc	r13, r25
    2740:	9f e6       	ldi	r25, 0x6F	; 111
    2742:	f9 2e       	mov	r15, r25
    2744:	f1 22       	and	r15, r17
    2746:	57 ff       	sbrs	r21, 7
    2748:	09 c0       	rjmp	.+18     	; 0x275c <vfprintf+0x564>
    274a:	50 95       	com	r21
    274c:	40 95       	com	r20
    274e:	30 95       	com	r19
    2750:	21 95       	neg	r18
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	4f 4f       	sbci	r20, 0xFF	; 255
    2756:	5f 4f       	sbci	r21, 0xFF	; 255
    2758:	90 e8       	ldi	r25, 0x80	; 128
    275a:	f9 2a       	or	r15, r25
    275c:	ca 01       	movw	r24, r20
    275e:	b9 01       	movw	r22, r18
    2760:	ae 01       	movw	r20, r28
    2762:	4f 5f       	subi	r20, 0xFF	; 255
    2764:	5f 4f       	sbci	r21, 0xFF	; 255
    2766:	2a e0       	ldi	r18, 0x0A	; 10
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	0e 94 26 1c 	call	0x384c	; 0x384c <__ultoa_invert>
    276e:	e8 2e       	mov	r14, r24
    2770:	e8 89       	ldd	r30, Y+16	; 0x10
    2772:	ee 1a       	sub	r14, r30
    2774:	41 c0       	rjmp	.+130    	; 0x27f8 <vfprintf+0x600>
    2776:	95 37       	cpi	r25, 0x75	; 117
    2778:	21 f4       	brne	.+8      	; 0x2782 <vfprintf+0x58a>
    277a:	1f 7e       	andi	r17, 0xEF	; 239
    277c:	2a e0       	ldi	r18, 0x0A	; 10
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	1c c0       	rjmp	.+56     	; 0x27ba <vfprintf+0x5c2>
    2782:	19 7f       	andi	r17, 0xF9	; 249
    2784:	9f 36       	cpi	r25, 0x6F	; 111
    2786:	61 f0       	breq	.+24     	; 0x27a0 <vfprintf+0x5a8>
    2788:	90 37       	cpi	r25, 0x70	; 112
    278a:	20 f4       	brcc	.+8      	; 0x2794 <vfprintf+0x59c>
    278c:	98 35       	cpi	r25, 0x58	; 88
    278e:	09 f0       	breq	.+2      	; 0x2792 <vfprintf+0x59a>
    2790:	b2 c0       	rjmp	.+356    	; 0x28f6 <vfprintf+0x6fe>
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <vfprintf+0x5ba>
    2794:	90 37       	cpi	r25, 0x70	; 112
    2796:	39 f0       	breq	.+14     	; 0x27a6 <vfprintf+0x5ae>
    2798:	98 37       	cpi	r25, 0x78	; 120
    279a:	09 f0       	breq	.+2      	; 0x279e <vfprintf+0x5a6>
    279c:	ac c0       	rjmp	.+344    	; 0x28f6 <vfprintf+0x6fe>
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <vfprintf+0x5b0>
    27a0:	28 e0       	ldi	r18, 0x08	; 8
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	0a c0       	rjmp	.+20     	; 0x27ba <vfprintf+0x5c2>
    27a6:	10 61       	ori	r17, 0x10	; 16
    27a8:	14 fd       	sbrc	r17, 4
    27aa:	14 60       	ori	r17, 0x04	; 4
    27ac:	20 e1       	ldi	r18, 0x10	; 16
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <vfprintf+0x5c2>
    27b2:	14 fd       	sbrc	r17, 4
    27b4:	16 60       	ori	r17, 0x06	; 6
    27b6:	20 e1       	ldi	r18, 0x10	; 16
    27b8:	32 e0       	ldi	r19, 0x02	; 2
    27ba:	17 ff       	sbrs	r17, 7
    27bc:	08 c0       	rjmp	.+16     	; 0x27ce <vfprintf+0x5d6>
    27be:	f6 01       	movw	r30, r12
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	44 e0       	ldi	r20, 0x04	; 4
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	08 c0       	rjmp	.+16     	; 0x27de <vfprintf+0x5e6>
    27ce:	f6 01       	movw	r30, r12
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	bc 01       	movw	r22, r24
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	42 e0       	ldi	r20, 0x02	; 2
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	c4 0e       	add	r12, r20
    27e0:	d5 1e       	adc	r13, r21
    27e2:	ae 01       	movw	r20, r28
    27e4:	4f 5f       	subi	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	0e 94 26 1c 	call	0x384c	; 0x384c <__ultoa_invert>
    27ec:	e8 2e       	mov	r14, r24
    27ee:	58 89       	ldd	r21, Y+16	; 0x10
    27f0:	e5 1a       	sub	r14, r21
    27f2:	8f e7       	ldi	r24, 0x7F	; 127
    27f4:	f8 2e       	mov	r15, r24
    27f6:	f1 22       	and	r15, r17
    27f8:	f6 fe       	sbrs	r15, 6
    27fa:	0b c0       	rjmp	.+22     	; 0x2812 <vfprintf+0x61a>
    27fc:	8e ef       	ldi	r24, 0xFE	; 254
    27fe:	f8 22       	and	r15, r24
    2800:	e9 14       	cp	r14, r9
    2802:	38 f4       	brcc	.+14     	; 0x2812 <vfprintf+0x61a>
    2804:	f4 fe       	sbrs	r15, 4
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <vfprintf+0x61e>
    2808:	f2 fc       	sbrc	r15, 2
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x61e>
    280c:	9f ee       	ldi	r25, 0xEF	; 239
    280e:	f9 22       	and	r15, r25
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0x61e>
    2812:	1e 2d       	mov	r17, r14
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <vfprintf+0x620>
    2816:	19 2d       	mov	r17, r9
    2818:	f4 fe       	sbrs	r15, 4
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <vfprintf+0x63e>
    281c:	fe 01       	movw	r30, r28
    281e:	ee 0d       	add	r30, r14
    2820:	f1 1d       	adc	r31, r1
    2822:	80 81       	ld	r24, Z
    2824:	80 33       	cpi	r24, 0x30	; 48
    2826:	19 f4       	brne	.+6      	; 0x282e <vfprintf+0x636>
    2828:	e9 ee       	ldi	r30, 0xE9	; 233
    282a:	fe 22       	and	r15, r30
    282c:	08 c0       	rjmp	.+16     	; 0x283e <vfprintf+0x646>
    282e:	1f 5f       	subi	r17, 0xFF	; 255
    2830:	f2 fe       	sbrs	r15, 2
    2832:	05 c0       	rjmp	.+10     	; 0x283e <vfprintf+0x646>
    2834:	03 c0       	rjmp	.+6      	; 0x283c <vfprintf+0x644>
    2836:	8f 2d       	mov	r24, r15
    2838:	86 78       	andi	r24, 0x86	; 134
    283a:	09 f0       	breq	.+2      	; 0x283e <vfprintf+0x646>
    283c:	1f 5f       	subi	r17, 0xFF	; 255
    283e:	0f 2d       	mov	r16, r15
    2840:	f3 fc       	sbrc	r15, 3
    2842:	14 c0       	rjmp	.+40     	; 0x286c <vfprintf+0x674>
    2844:	f0 fe       	sbrs	r15, 0
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <vfprintf+0x66e>
    2848:	18 15       	cp	r17, r8
    284a:	10 f0       	brcs	.+4      	; 0x2850 <vfprintf+0x658>
    284c:	9e 2c       	mov	r9, r14
    284e:	0b c0       	rjmp	.+22     	; 0x2866 <vfprintf+0x66e>
    2850:	9e 2c       	mov	r9, r14
    2852:	98 0c       	add	r9, r8
    2854:	91 1a       	sub	r9, r17
    2856:	18 2d       	mov	r17, r8
    2858:	06 c0       	rjmp	.+12     	; 0x2866 <vfprintf+0x66e>
    285a:	80 e2       	ldi	r24, 0x20	; 32
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	b3 01       	movw	r22, r6
    2860:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2864:	1f 5f       	subi	r17, 0xFF	; 255
    2866:	18 15       	cp	r17, r8
    2868:	c0 f3       	brcs	.-16     	; 0x285a <vfprintf+0x662>
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <vfprintf+0x67c>
    286c:	18 15       	cp	r17, r8
    286e:	10 f4       	brcc	.+4      	; 0x2874 <vfprintf+0x67c>
    2870:	81 1a       	sub	r8, r17
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <vfprintf+0x67e>
    2874:	88 24       	eor	r8, r8
    2876:	04 ff       	sbrs	r16, 4
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <vfprintf+0x6a0>
    287a:	80 e3       	ldi	r24, 0x30	; 48
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	b3 01       	movw	r22, r6
    2880:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    2884:	02 ff       	sbrs	r16, 2
    2886:	1d c0       	rjmp	.+58     	; 0x28c2 <vfprintf+0x6ca>
    2888:	01 fd       	sbrc	r16, 1
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <vfprintf+0x69a>
    288c:	88 e7       	ldi	r24, 0x78	; 120
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e c0       	rjmp	.+28     	; 0x28ae <vfprintf+0x6b6>
    2892:	88 e5       	ldi	r24, 0x58	; 88
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0b c0       	rjmp	.+22     	; 0x28ae <vfprintf+0x6b6>
    2898:	80 2f       	mov	r24, r16
    289a:	86 78       	andi	r24, 0x86	; 134
    289c:	91 f0       	breq	.+36     	; 0x28c2 <vfprintf+0x6ca>
    289e:	01 ff       	sbrs	r16, 1
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <vfprintf+0x6ae>
    28a2:	8b e2       	ldi	r24, 0x2B	; 43
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <vfprintf+0x6b0>
    28a6:	80 e2       	ldi	r24, 0x20	; 32
    28a8:	f7 fc       	sbrc	r15, 7
    28aa:	8d e2       	ldi	r24, 0x2D	; 45
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	b3 01       	movw	r22, r6
    28b0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0x6ca>
    28b6:	80 e3       	ldi	r24, 0x30	; 48
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	b3 01       	movw	r22, r6
    28bc:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    28c0:	9a 94       	dec	r9
    28c2:	e9 14       	cp	r14, r9
    28c4:	c0 f3       	brcs	.-16     	; 0x28b6 <vfprintf+0x6be>
    28c6:	ea 94       	dec	r14
    28c8:	e1 e0       	ldi	r30, 0x01	; 1
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	ec 0f       	add	r30, r28
    28ce:	fd 1f       	adc	r31, r29
    28d0:	ee 0d       	add	r30, r14
    28d2:	f1 1d       	adc	r31, r1
    28d4:	80 81       	ld	r24, Z
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	b3 01       	movw	r22, r6
    28da:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    28de:	ee 20       	and	r14, r14
    28e0:	91 f7       	brne	.-28     	; 0x28c6 <vfprintf+0x6ce>
    28e2:	06 c0       	rjmp	.+12     	; 0x28f0 <vfprintf+0x6f8>
    28e4:	80 e2       	ldi	r24, 0x20	; 32
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	b3 01       	movw	r22, r6
    28ea:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <fputc>
    28ee:	8a 94       	dec	r8
    28f0:	88 20       	and	r8, r8
    28f2:	c1 f7       	brne	.-16     	; 0x28e4 <vfprintf+0x6ec>
    28f4:	99 cc       	rjmp	.-1742   	; 0x2228 <vfprintf+0x30>
    28f6:	f3 01       	movw	r30, r6
    28f8:	66 81       	ldd	r22, Z+6	; 0x06
    28fa:	77 81       	ldd	r23, Z+7	; 0x07
    28fc:	cb 01       	movw	r24, r22
    28fe:	61 96       	adiw	r28, 0x11	; 17
    2900:	e2 e1       	ldi	r30, 0x12	; 18
    2902:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__>

00002906 <putval>:
    2906:	fc 01       	movw	r30, r24
    2908:	20 fd       	sbrc	r18, 0
    290a:	08 c0       	rjmp	.+16     	; 0x291c <putval+0x16>
    290c:	23 fd       	sbrc	r18, 3
    290e:	05 c0       	rjmp	.+10     	; 0x291a <putval+0x14>
    2910:	22 ff       	sbrs	r18, 2
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <putval+0x12>
    2914:	73 83       	std	Z+3, r23	; 0x03
    2916:	62 83       	std	Z+2, r22	; 0x02
    2918:	51 83       	std	Z+1, r21	; 0x01
    291a:	40 83       	st	Z, r20
    291c:	08 95       	ret

0000291e <mulacc>:
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	44 ff       	sbrs	r20, 4
    2928:	02 c0       	rjmp	.+4      	; 0x292e <mulacc+0x10>
    292a:	33 e0       	ldi	r19, 0x03	; 3
    292c:	11 c0       	rjmp	.+34     	; 0x2950 <mulacc+0x32>
    292e:	46 ff       	sbrs	r20, 6
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <mulacc+0x18>
    2932:	34 e0       	ldi	r19, 0x04	; 4
    2934:	0d c0       	rjmp	.+26     	; 0x2950 <mulacc+0x32>
    2936:	db 01       	movw	r26, r22
    2938:	fc 01       	movw	r30, r24
    293a:	aa 0f       	add	r26, r26
    293c:	bb 1f       	adc	r27, r27
    293e:	ee 1f       	adc	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	10 94       	com	r1
    2944:	d1 f7       	brne	.-12     	; 0x293a <mulacc+0x1c>
    2946:	6a 0f       	add	r22, r26
    2948:	7b 1f       	adc	r23, r27
    294a:	8e 1f       	adc	r24, r30
    294c:	9f 1f       	adc	r25, r31
    294e:	31 e0       	ldi	r19, 0x01	; 1
    2950:	66 0f       	add	r22, r22
    2952:	77 1f       	adc	r23, r23
    2954:	88 1f       	adc	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	31 50       	subi	r19, 0x01	; 1
    295a:	d1 f7       	brne	.-12     	; 0x2950 <mulacc+0x32>
    295c:	7b 01       	movw	r14, r22
    295e:	8c 01       	movw	r16, r24
    2960:	e2 0e       	add	r14, r18
    2962:	f1 1c       	adc	r15, r1
    2964:	01 1d       	adc	r16, r1
    2966:	11 1d       	adc	r17, r1
    2968:	a8 01       	movw	r20, r16
    296a:	97 01       	movw	r18, r14
    296c:	b7 01       	movw	r22, r14
    296e:	ca 01       	movw	r24, r20
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	08 95       	ret

0000297a <skip_spaces>:
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	8c 01       	movw	r16, r24
    2984:	c8 01       	movw	r24, r16
    2986:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    298a:	ec 01       	movw	r28, r24
    298c:	97 fd       	sbrc	r25, 7
    298e:	08 c0       	rjmp	.+16     	; 0x29a0 <skip_spaces+0x26>
    2990:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <isspace>
    2994:	89 2b       	or	r24, r25
    2996:	b1 f7       	brne	.-20     	; 0x2984 <skip_spaces+0xa>
    2998:	ce 01       	movw	r24, r28
    299a:	b8 01       	movw	r22, r16
    299c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    29a0:	ce 01       	movw	r24, r28
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	08 95       	ret

000029ac <conv_int>:
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	5c 01       	movw	r10, r24
    29c4:	eb 01       	movw	r28, r22
    29c6:	4a 01       	movw	r8, r20
    29c8:	12 2f       	mov	r17, r18
    29ca:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    29ce:	ac 01       	movw	r20, r24
    29d0:	8b 32       	cpi	r24, 0x2B	; 43
    29d2:	19 f0       	breq	.+6      	; 0x29da <conv_int+0x2e>
    29d4:	8d 32       	cpi	r24, 0x2D	; 45
    29d6:	51 f4       	brne	.+20     	; 0x29ec <conv_int+0x40>
    29d8:	10 68       	ori	r17, 0x80	; 128
    29da:	21 97       	sbiw	r28, 0x01	; 1
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <conv_int+0x34>
    29de:	6d c0       	rjmp	.+218    	; 0x2aba <conv_int+0x10e>
    29e0:	c5 01       	movw	r24, r10
    29e2:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    29e6:	ac 01       	movw	r20, r24
    29e8:	97 fd       	sbrc	r25, 7
    29ea:	67 c0       	rjmp	.+206    	; 0x2aba <conv_int+0x10e>
    29ec:	6d ef       	ldi	r22, 0xFD	; 253
    29ee:	d6 2e       	mov	r13, r22
    29f0:	d1 22       	and	r13, r17
    29f2:	8d 2d       	mov	r24, r13
    29f4:	80 73       	andi	r24, 0x30	; 48
    29f6:	01 f5       	brne	.+64     	; 0x2a38 <conv_int+0x8c>
    29f8:	40 33       	cpi	r20, 0x30	; 48
    29fa:	f1 f4       	brne	.+60     	; 0x2a38 <conv_int+0x8c>
    29fc:	21 97       	sbiw	r28, 0x01	; 1
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <conv_int+0x56>
    2a00:	47 c0       	rjmp	.+142    	; 0x2a90 <conv_int+0xe4>
    2a02:	c5 01       	movw	r24, r10
    2a04:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2a08:	ac 01       	movw	r20, r24
    2a0a:	97 fd       	sbrc	r25, 7
    2a0c:	41 c0       	rjmp	.+130    	; 0x2a90 <conv_int+0xe4>
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	d8 2a       	or	r13, r24
    2a12:	48 37       	cpi	r20, 0x78	; 120
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <conv_int+0x6e>
    2a16:	48 35       	cpi	r20, 0x58	; 88
    2a18:	59 f4       	brne	.+22     	; 0x2a30 <conv_int+0x84>
    2a1a:	80 e4       	ldi	r24, 0x40	; 64
    2a1c:	d8 2a       	or	r13, r24
    2a1e:	21 97       	sbiw	r28, 0x01	; 1
    2a20:	b9 f1       	breq	.+110    	; 0x2a90 <conv_int+0xe4>
    2a22:	c5 01       	movw	r24, r10
    2a24:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2a28:	ac 01       	movw	r20, r24
    2a2a:	99 23       	and	r25, r25
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <conv_int+0x8c>
    2a2e:	30 c0       	rjmp	.+96     	; 0x2a90 <conv_int+0xe4>
    2a30:	d6 fc       	sbrc	r13, 6
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <conv_int+0x8c>
    2a34:	80 e1       	ldi	r24, 0x10	; 16
    2a36:	d8 2a       	or	r13, r24
    2a38:	ee 24       	eor	r14, r14
    2a3a:	ff 24       	eor	r15, r15
    2a3c:	87 01       	movw	r16, r14
    2a3e:	24 2f       	mov	r18, r20
    2a40:	20 53       	subi	r18, 0x30	; 48
    2a42:	28 30       	cpi	r18, 0x08	; 8
    2a44:	88 f0       	brcs	.+34     	; 0x2a68 <conv_int+0xbc>
    2a46:	d4 fc       	sbrc	r13, 4
    2a48:	09 c0       	rjmp	.+18     	; 0x2a5c <conv_int+0xb0>
    2a4a:	2a 30       	cpi	r18, 0x0A	; 10
    2a4c:	68 f0       	brcs	.+26     	; 0x2a68 <conv_int+0xbc>
    2a4e:	d6 fe       	sbrs	r13, 6
    2a50:	05 c0       	rjmp	.+10     	; 0x2a5c <conv_int+0xb0>
    2a52:	2f 7d       	andi	r18, 0xDF	; 223
    2a54:	82 2f       	mov	r24, r18
    2a56:	81 51       	subi	r24, 0x11	; 17
    2a58:	86 30       	cpi	r24, 0x06	; 6
    2a5a:	28 f0       	brcs	.+10     	; 0x2a66 <conv_int+0xba>
    2a5c:	ca 01       	movw	r24, r20
    2a5e:	b5 01       	movw	r22, r10
    2a60:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    2a64:	12 c0       	rjmp	.+36     	; 0x2a8a <conv_int+0xde>
    2a66:	27 50       	subi	r18, 0x07	; 7
    2a68:	c8 01       	movw	r24, r16
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	4d 2d       	mov	r20, r13
    2a6e:	0e 94 8f 14 	call	0x291e	; 0x291e <mulacc>
    2a72:	7b 01       	movw	r14, r22
    2a74:	8c 01       	movw	r16, r24
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	d8 2a       	or	r13, r24
    2a7a:	21 97       	sbiw	r28, 0x01	; 1
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <conv_int+0xea>
    2a7e:	c5 01       	movw	r24, r10
    2a80:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2a84:	ac 01       	movw	r20, r24
    2a86:	97 ff       	sbrs	r25, 7
    2a88:	da cf       	rjmp	.-76     	; 0x2a3e <conv_int+0x92>
    2a8a:	d1 fc       	sbrc	r13, 1
    2a8c:	04 c0       	rjmp	.+8      	; 0x2a96 <conv_int+0xea>
    2a8e:	15 c0       	rjmp	.+42     	; 0x2aba <conv_int+0x10e>
    2a90:	ee 24       	eor	r14, r14
    2a92:	ff 24       	eor	r15, r15
    2a94:	87 01       	movw	r16, r14
    2a96:	d7 fe       	sbrs	r13, 7
    2a98:	08 c0       	rjmp	.+16     	; 0x2aaa <conv_int+0xfe>
    2a9a:	10 95       	com	r17
    2a9c:	00 95       	com	r16
    2a9e:	f0 94       	com	r15
    2aa0:	e0 94       	com	r14
    2aa2:	e1 1c       	adc	r14, r1
    2aa4:	f1 1c       	adc	r15, r1
    2aa6:	01 1d       	adc	r16, r1
    2aa8:	11 1d       	adc	r17, r1
    2aaa:	c4 01       	movw	r24, r8
    2aac:	b8 01       	movw	r22, r16
    2aae:	a7 01       	movw	r20, r14
    2ab0:	2d 2d       	mov	r18, r13
    2ab2:	0e 94 83 14 	call	0x2906	; 0x2906 <putval>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <conv_int+0x110>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	bf 90       	pop	r11
    2acc:	af 90       	pop	r10
    2ace:	9f 90       	pop	r9
    2ad0:	8f 90       	pop	r8
    2ad2:	08 95       	ret

00002ad4 <conv_brk>:
    2ad4:	a0 e2       	ldi	r26, 0x20	; 32
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e0 e7       	ldi	r30, 0x70	; 112
    2ada:	f5 e1       	ldi	r31, 0x15	; 21
    2adc:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__+0x8>
    2ae0:	5c 01       	movw	r10, r24
    2ae2:	6b 01       	movw	r12, r22
    2ae4:	8a 01       	movw	r16, r20
    2ae6:	79 01       	movw	r14, r18
    2ae8:	fe 01       	movw	r30, r28
    2aea:	31 96       	adiw	r30, 0x01	; 1
    2aec:	80 e2       	ldi	r24, 0x20	; 32
    2aee:	df 01       	movw	r26, r30
    2af0:	1d 92       	st	X+, r1
    2af2:	8a 95       	dec	r24
    2af4:	e9 f7       	brne	.-6      	; 0x2af0 <conv_brk+0x1c>
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	3f 01       	movw	r6, r30
    2b02:	a1 e0       	ldi	r26, 0x01	; 1
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	f5 01       	movw	r30, r10
    2b08:	83 81       	ldd	r24, Z+3	; 0x03
    2b0a:	f7 01       	movw	r30, r14
    2b0c:	83 fd       	sbrc	r24, 3
    2b0e:	25 91       	lpm	r18, Z+
    2b10:	83 ff       	sbrs	r24, 3
    2b12:	21 91       	ld	r18, Z+
    2b14:	7f 01       	movw	r14, r30
    2b16:	22 23       	and	r18, r18
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <conv_brk+0x48>
    2b1a:	81 c0       	rjmp	.+258    	; 0x2c1e <conv_brk+0x14a>
    2b1c:	2e 35       	cpi	r18, 0x5E	; 94
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <conv_brk+0x52>
    2b20:	41 15       	cp	r20, r1
    2b22:	51 05       	cpc	r21, r1
    2b24:	69 f1       	breq	.+90     	; 0x2b80 <conv_brk+0xac>
    2b26:	87 2f       	mov	r24, r23
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	84 17       	cp	r24, r20
    2b2c:	95 07       	cpc	r25, r21
    2b2e:	44 f4       	brge	.+16     	; 0x2b40 <conv_brk+0x6c>
    2b30:	2d 35       	cpi	r18, 0x5D	; 93
    2b32:	51 f1       	breq	.+84     	; 0x2b88 <conv_brk+0xb4>
    2b34:	2d 32       	cpi	r18, 0x2D	; 45
    2b36:	21 f4       	brne	.+8      	; 0x2b40 <conv_brk+0x6c>
    2b38:	33 23       	and	r19, r19
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <conv_brk+0x72>
    2b3c:	31 e0       	ldi	r19, 0x01	; 1
    2b3e:	21 c0       	rjmp	.+66     	; 0x2b82 <conv_brk+0xae>
    2b40:	33 23       	and	r19, r19
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <conv_brk+0x72>
    2b44:	62 2f       	mov	r22, r18
    2b46:	32 2f       	mov	r19, r18
    2b48:	83 2f       	mov	r24, r19
    2b4a:	86 95       	lsr	r24
    2b4c:	86 95       	lsr	r24
    2b4e:	86 95       	lsr	r24
    2b50:	f3 01       	movw	r30, r6
    2b52:	e8 0f       	add	r30, r24
    2b54:	f1 1d       	adc	r31, r1
    2b56:	83 2f       	mov	r24, r19
    2b58:	87 70       	andi	r24, 0x07	; 7
    2b5a:	4d 01       	movw	r8, r26
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <conv_brk+0x8e>
    2b5e:	88 0c       	add	r8, r8
    2b60:	99 1c       	adc	r9, r9
    2b62:	8a 95       	dec	r24
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <conv_brk+0x8a>
    2b66:	20 81       	ld	r18, Z
    2b68:	28 29       	or	r18, r8
    2b6a:	20 83       	st	Z, r18
    2b6c:	36 17       	cp	r19, r22
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <conv_brk+0xa0>
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <conv_brk+0xae>
    2b74:	36 17       	cp	r19, r22
    2b76:	10 f4       	brcc	.+4      	; 0x2b7c <conv_brk+0xa8>
    2b78:	3f 5f       	subi	r19, 0xFF	; 255
    2b7a:	e6 cf       	rjmp	.-52     	; 0x2b48 <conv_brk+0x74>
    2b7c:	31 50       	subi	r19, 0x01	; 1
    2b7e:	e4 cf       	rjmp	.-56     	; 0x2b48 <conv_brk+0x74>
    2b80:	71 e0       	ldi	r23, 0x01	; 1
    2b82:	4f 5f       	subi	r20, 0xFF	; 255
    2b84:	5f 4f       	sbci	r21, 0xFF	; 255
    2b86:	bf cf       	rjmp	.-130    	; 0x2b06 <conv_brk+0x32>
    2b88:	33 23       	and	r19, r19
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <conv_brk+0xbe>
    2b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8e:	80 62       	ori	r24, 0x20	; 32
    2b90:	8e 83       	std	Y+6, r24	; 0x06
    2b92:	77 23       	and	r23, r23
    2b94:	59 f0       	breq	.+22     	; 0x2bac <conv_brk+0xd8>
    2b96:	fe 01       	movw	r30, r28
    2b98:	31 96       	adiw	r30, 0x01	; 1
    2b9a:	9e 01       	movw	r18, r28
    2b9c:	2f 5d       	subi	r18, 0xDF	; 223
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 95       	com	r24
    2ba4:	81 93       	st	Z+, r24
    2ba6:	e2 17       	cp	r30, r18
    2ba8:	f3 07       	cpc	r31, r19
    2baa:	d1 f7       	brne	.-12     	; 0x2ba0 <conv_brk+0xcc>
    2bac:	99 24       	eor	r9, r9
    2bae:	93 94       	inc	r9
    2bb0:	3e 01       	movw	r6, r28
    2bb2:	08 94       	sec
    2bb4:	61 1c       	adc	r6, r1
    2bb6:	71 1c       	adc	r7, r1
    2bb8:	c5 01       	movw	r24, r10
    2bba:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2bbe:	ac 01       	movw	r20, r24
    2bc0:	97 fd       	sbrc	r25, 7
    2bc2:	25 c0       	rjmp	.+74     	; 0x2c0e <conv_brk+0x13a>
    2bc4:	86 95       	lsr	r24
    2bc6:	86 95       	lsr	r24
    2bc8:	86 95       	lsr	r24
    2bca:	f3 01       	movw	r30, r6
    2bcc:	e8 0f       	add	r30, r24
    2bce:	f1 1d       	adc	r31, r1
    2bd0:	80 81       	ld	r24, Z
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9a 01       	movw	r18, r20
    2bd6:	27 70       	andi	r18, 0x07	; 7
    2bd8:	30 70       	andi	r19, 0x00	; 0
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <conv_brk+0x10c>
    2bdc:	95 95       	asr	r25
    2bde:	87 95       	ror	r24
    2be0:	2a 95       	dec	r18
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <conv_brk+0x108>
    2be4:	80 fd       	sbrc	r24, 0
    2be6:	05 c0       	rjmp	.+10     	; 0x2bf2 <conv_brk+0x11e>
    2be8:	ca 01       	movw	r24, r20
    2bea:	b5 01       	movw	r22, r10
    2bec:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <conv_brk+0x13a>
    2bf2:	01 15       	cp	r16, r1
    2bf4:	11 05       	cpc	r17, r1
    2bf6:	19 f0       	breq	.+6      	; 0x2bfe <conv_brk+0x12a>
    2bf8:	d8 01       	movw	r26, r16
    2bfa:	4d 93       	st	X+, r20
    2bfc:	8d 01       	movw	r16, r26
    2bfe:	08 94       	sec
    2c00:	c1 08       	sbc	r12, r1
    2c02:	d1 08       	sbc	r13, r1
    2c04:	99 24       	eor	r9, r9
    2c06:	c1 14       	cp	r12, r1
    2c08:	d1 04       	cpc	r13, r1
    2c0a:	b1 f6       	brne	.-84     	; 0x2bb8 <conv_brk+0xe4>
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <conv_brk+0x13e>
    2c0e:	99 20       	and	r9, r9
    2c10:	31 f4       	brne	.+12     	; 0x2c1e <conv_brk+0x14a>
    2c12:	01 15       	cp	r16, r1
    2c14:	11 05       	cpc	r17, r1
    2c16:	29 f0       	breq	.+10     	; 0x2c22 <conv_brk+0x14e>
    2c18:	f8 01       	movw	r30, r16
    2c1a:	10 82       	st	Z, r1
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <conv_brk+0x14e>
    2c1e:	ee 24       	eor	r14, r14
    2c20:	ff 24       	eor	r15, r15
    2c22:	c7 01       	movw	r24, r14
    2c24:	a0 96       	adiw	r28, 0x20	; 32
    2c26:	ee e0       	ldi	r30, 0x0E	; 14
    2c28:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__+0x8>

00002c2c <conv_flt>:
    2c2c:	2f 92       	push	r2
    2c2e:	3f 92       	push	r3
    2c30:	5f 92       	push	r5
    2c32:	6f 92       	push	r6
    2c34:	7f 92       	push	r7
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	3c 01       	movw	r6, r24
    2c50:	7b 01       	movw	r14, r22
    2c52:	1a 01       	movw	r2, r20
    2c54:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2c58:	ec 01       	movw	r28, r24
    2c5a:	8b 32       	cpi	r24, 0x2B	; 43
    2c5c:	39 f0       	breq	.+14     	; 0x2c6c <conv_flt+0x40>
    2c5e:	8d 32       	cpi	r24, 0x2D	; 45
    2c60:	11 f0       	breq	.+4      	; 0x2c66 <conv_flt+0x3a>
    2c62:	55 24       	eor	r5, r5
    2c64:	11 c0       	rjmp	.+34     	; 0x2c88 <conv_flt+0x5c>
    2c66:	b0 e8       	ldi	r27, 0x80	; 128
    2c68:	5b 2e       	mov	r5, r27
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <conv_flt+0x42>
    2c6c:	55 24       	eor	r5, r5
    2c6e:	08 94       	sec
    2c70:	e1 08       	sbc	r14, r1
    2c72:	f1 08       	sbc	r15, r1
    2c74:	e1 14       	cp	r14, r1
    2c76:	f1 04       	cpc	r15, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <conv_flt+0x50>
    2c7a:	18 c1       	rjmp	.+560    	; 0x2eac <conv_flt+0x280>
    2c7c:	c3 01       	movw	r24, r6
    2c7e:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2c82:	ec 01       	movw	r28, r24
    2c84:	97 fd       	sbrc	r25, 7
    2c86:	12 c1       	rjmp	.+548    	; 0x2eac <conv_flt+0x280>
    2c88:	ce 01       	movw	r24, r28
    2c8a:	0e 94 00 1b 	call	0x3600	; 0x3600 <tolower>
    2c8e:	89 36       	cpi	r24, 0x69	; 105
    2c90:	91 05       	cpc	r25, r1
    2c92:	21 f0       	breq	.+8      	; 0x2c9c <conv_flt+0x70>
    2c94:	8e 36       	cpi	r24, 0x6E	; 110
    2c96:	91 05       	cpc	r25, r1
    2c98:	99 f5       	brne	.+102    	; 0x2d00 <conv_flt+0xd4>
    2c9a:	1d c0       	rjmp	.+58     	; 0x2cd6 <conv_flt+0xaa>
    2c9c:	0d e8       	ldi	r16, 0x8D	; 141
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	1c c0       	rjmp	.+56     	; 0x2cda <conv_flt+0xae>
    2ca2:	08 94       	sec
    2ca4:	e1 08       	sbc	r14, r1
    2ca6:	f1 08       	sbc	r15, r1
    2ca8:	e1 14       	cp	r14, r1
    2caa:	f1 04       	cpc	r15, r1
    2cac:	71 f0       	breq	.+28     	; 0x2cca <conv_flt+0x9e>
    2cae:	c3 01       	movw	r24, r6
    2cb0:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2cb4:	ec 01       	movw	r28, r24
    2cb6:	97 fd       	sbrc	r25, 7
    2cb8:	08 c0       	rjmp	.+16     	; 0x2cca <conv_flt+0x9e>
    2cba:	0e 94 00 1b 	call	0x3600	; 0x3600 <tolower>
    2cbe:	d8 16       	cp	r13, r24
    2cc0:	61 f0       	breq	.+24     	; 0x2cda <conv_flt+0xae>
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	b3 01       	movw	r22, r6
    2cc6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	00 39       	cpi	r16, 0x90	; 144
    2cce:	12 07       	cpc	r17, r18
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <conv_flt+0xa8>
    2cd2:	ec c0       	rjmp	.+472    	; 0x2eac <conv_flt+0x280>
    2cd4:	08 c0       	rjmp	.+16     	; 0x2ce6 <conv_flt+0xba>
    2cd6:	0a e8       	ldi	r16, 0x8A	; 138
    2cd8:	10 e0       	ldi	r17, 0x00	; 0
    2cda:	f8 01       	movw	r30, r16
    2cdc:	0f 5f       	subi	r16, 0xFF	; 255
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	d4 90       	lpm	r13, Z+
    2ce2:	dd 20       	and	r13, r13
    2ce4:	f1 f6       	brne	.-68     	; 0x2ca2 <conv_flt+0x76>
    2ce6:	0d 58       	subi	r16, 0x8D	; 141
    2ce8:	10 40       	sbci	r17, 0x00	; 0
    2cea:	29 f0       	breq	.+10     	; 0x2cf6 <conv_flt+0xca>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e8       	ldi	r26, 0x80	; 128
    2cf2:	bf e7       	ldi	r27, 0x7F	; 127
    2cf4:	cf c0       	rjmp	.+414    	; 0x2e94 <conv_flt+0x268>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 ec       	ldi	r26, 0xC0	; 192
    2cfc:	bf e7       	ldi	r27, 0x7F	; 127
    2cfe:	ca c0       	rjmp	.+404    	; 0x2e94 <conv_flt+0x268>
    2d00:	cc 24       	eor	r12, r12
    2d02:	dd 24       	eor	r13, r13
    2d04:	88 24       	eor	r8, r8
    2d06:	99 24       	eor	r9, r9
    2d08:	54 01       	movw	r10, r8
    2d0a:	ae 01       	movw	r20, r28
    2d0c:	40 53       	subi	r20, 0x30	; 48
    2d0e:	24 2f       	mov	r18, r20
    2d10:	4a 30       	cpi	r20, 0x0A	; 10
    2d12:	38 f5       	brcc	.+78     	; 0x2d62 <conv_flt+0x136>
    2d14:	52 e0       	ldi	r21, 0x02	; 2
    2d16:	55 2a       	or	r5, r21
    2d18:	85 2d       	mov	r24, r5
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	48 70       	andi	r20, 0x08	; 8
    2d20:	50 70       	andi	r21, 0x00	; 0
    2d22:	52 fe       	sbrs	r5, 2
    2d24:	06 c0       	rjmp	.+12     	; 0x2d32 <conv_flt+0x106>
    2d26:	45 2b       	or	r20, r21
    2d28:	11 f5       	brne	.+68     	; 0x2d6e <conv_flt+0x142>
    2d2a:	08 94       	sec
    2d2c:	c1 1c       	adc	r12, r1
    2d2e:	d1 1c       	adc	r13, r1
    2d30:	1e c0       	rjmp	.+60     	; 0x2d6e <conv_flt+0x142>
    2d32:	45 2b       	or	r20, r21
    2d34:	19 f0       	breq	.+6      	; 0x2d3c <conv_flt+0x110>
    2d36:	08 94       	sec
    2d38:	c1 08       	sbc	r12, r1
    2d3a:	d1 08       	sbc	r13, r1
    2d3c:	c5 01       	movw	r24, r10
    2d3e:	b4 01       	movw	r22, r8
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	0e 94 8f 14 	call	0x291e	; 0x291e <mulacc>
    2d46:	4b 01       	movw	r8, r22
    2d48:	5c 01       	movw	r10, r24
    2d4a:	88 e9       	ldi	r24, 0x98	; 152
    2d4c:	88 16       	cp	r8, r24
    2d4e:	89 e9       	ldi	r24, 0x99	; 153
    2d50:	98 06       	cpc	r9, r24
    2d52:	89 e9       	ldi	r24, 0x99	; 153
    2d54:	a8 06       	cpc	r10, r24
    2d56:	89 e1       	ldi	r24, 0x19	; 25
    2d58:	b8 06       	cpc	r11, r24
    2d5a:	48 f0       	brcs	.+18     	; 0x2d6e <conv_flt+0x142>
    2d5c:	94 e0       	ldi	r25, 0x04	; 4
    2d5e:	59 2a       	or	r5, r25
    2d60:	06 c0       	rjmp	.+12     	; 0x2d6e <conv_flt+0x142>
    2d62:	4e 3f       	cpi	r20, 0xFE	; 254
    2d64:	81 f4       	brne	.+32     	; 0x2d86 <conv_flt+0x15a>
    2d66:	53 fc       	sbrc	r5, 3
    2d68:	0e c0       	rjmp	.+28     	; 0x2d86 <conv_flt+0x15a>
    2d6a:	e8 e0       	ldi	r30, 0x08	; 8
    2d6c:	5e 2a       	or	r5, r30
    2d6e:	08 94       	sec
    2d70:	e1 08       	sbc	r14, r1
    2d72:	f1 08       	sbc	r15, r1
    2d74:	e1 14       	cp	r14, r1
    2d76:	f1 04       	cpc	r15, r1
    2d78:	31 f0       	breq	.+12     	; 0x2d86 <conv_flt+0x15a>
    2d7a:	c3 01       	movw	r24, r6
    2d7c:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2d80:	ec 01       	movw	r28, r24
    2d82:	97 ff       	sbrs	r25, 7
    2d84:	c2 cf       	rjmp	.-124    	; 0x2d0a <conv_flt+0xde>
    2d86:	51 fe       	sbrs	r5, 1
    2d88:	91 c0       	rjmp	.+290    	; 0x2eac <conv_flt+0x280>
    2d8a:	c5 36       	cpi	r28, 0x65	; 101
    2d8c:	19 f0       	breq	.+6      	; 0x2d94 <conv_flt+0x168>
    2d8e:	c5 34       	cpi	r28, 0x45	; 69
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <conv_flt+0x168>
    2d92:	46 c0       	rjmp	.+140    	; 0x2e20 <conv_flt+0x1f4>
    2d94:	08 94       	sec
    2d96:	e1 08       	sbc	r14, r1
    2d98:	f1 08       	sbc	r15, r1
    2d9a:	e1 14       	cp	r14, r1
    2d9c:	f1 04       	cpc	r15, r1
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <conv_flt+0x176>
    2da0:	85 c0       	rjmp	.+266    	; 0x2eac <conv_flt+0x280>
    2da2:	c3 01       	movw	r24, r6
    2da4:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2da8:	ec 01       	movw	r28, r24
    2daa:	97 fd       	sbrc	r25, 7
    2dac:	7f c0       	rjmp	.+254    	; 0x2eac <conv_flt+0x280>
    2dae:	8b 32       	cpi	r24, 0x2B	; 43
    2db0:	21 f0       	breq	.+8      	; 0x2dba <conv_flt+0x18e>
    2db2:	8d 32       	cpi	r24, 0x2D	; 45
    2db4:	69 f4       	brne	.+26     	; 0x2dd0 <conv_flt+0x1a4>
    2db6:	f0 e1       	ldi	r31, 0x10	; 16
    2db8:	5f 2a       	or	r5, r31
    2dba:	08 94       	sec
    2dbc:	e1 08       	sbc	r14, r1
    2dbe:	f1 08       	sbc	r15, r1
    2dc0:	e1 14       	cp	r14, r1
    2dc2:	f1 04       	cpc	r15, r1
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <conv_flt+0x19c>
    2dc6:	72 c0       	rjmp	.+228    	; 0x2eac <conv_flt+0x280>
    2dc8:	c3 01       	movw	r24, r6
    2dca:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2dce:	ec 01       	movw	r28, r24
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	c0 97       	sbiw	r24, 0x30	; 48
    2dd4:	0a 97       	sbiw	r24, 0x0a	; 10
    2dd6:	08 f0       	brcs	.+2      	; 0x2dda <conv_flt+0x1ae>
    2dd8:	69 c0       	rjmp	.+210    	; 0x2eac <conv_flt+0x280>
    2dda:	00 e0       	ldi	r16, 0x00	; 0
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	b8 01       	movw	r22, r16
    2de0:	88 27       	eor	r24, r24
    2de2:	77 fd       	sbrc	r23, 7
    2de4:	80 95       	com	r24
    2de6:	98 2f       	mov	r25, r24
    2de8:	ae 01       	movw	r20, r28
    2dea:	40 53       	subi	r20, 0x30	; 48
    2dec:	24 2f       	mov	r18, r20
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	0e 94 8f 14 	call	0x291e	; 0x291e <mulacc>
    2df4:	8b 01       	movw	r16, r22
    2df6:	08 94       	sec
    2df8:	e1 08       	sbc	r14, r1
    2dfa:	f1 08       	sbc	r15, r1
    2dfc:	e1 14       	cp	r14, r1
    2dfe:	f1 04       	cpc	r15, r1
    2e00:	39 f0       	breq	.+14     	; 0x2e10 <conv_flt+0x1e4>
    2e02:	c3 01       	movw	r24, r6
    2e04:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2e08:	ec 01       	movw	r28, r24
    2e0a:	c0 97       	sbiw	r24, 0x30	; 48
    2e0c:	0a 97       	sbiw	r24, 0x0a	; 10
    2e0e:	38 f3       	brcs	.-50     	; 0x2dde <conv_flt+0x1b2>
    2e10:	b8 01       	movw	r22, r16
    2e12:	54 fe       	sbrs	r5, 4
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <conv_flt+0x1f0>
    2e16:	70 95       	com	r23
    2e18:	61 95       	neg	r22
    2e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1c:	c6 0e       	add	r12, r22
    2e1e:	d7 1e       	adc	r13, r23
    2e20:	ef 28       	or	r14, r15
    2e22:	31 f0       	breq	.+12     	; 0x2e30 <conv_flt+0x204>
    2e24:	d7 fd       	sbrc	r29, 7
    2e26:	04 c0       	rjmp	.+8      	; 0x2e30 <conv_flt+0x204>
    2e28:	ce 01       	movw	r24, r28
    2e2a:	b3 01       	movw	r22, r6
    2e2c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    2e30:	c5 01       	movw	r24, r10
    2e32:	b4 01       	movw	r22, r8
    2e34:	0e 94 94 18 	call	0x3128	; 0x3128 <__floatunsisf>
    2e38:	d7 fe       	sbrs	r13, 7
    2e3a:	0d c0       	rjmp	.+26     	; 0x2e56 <conv_flt+0x22a>
    2e3c:	a9 ea       	ldi	r26, 0xA9	; 169
    2e3e:	ea 2e       	mov	r14, r26
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	fa 2e       	mov	r15, r26
    2e44:	d0 94       	com	r13
    2e46:	c1 94       	neg	r12
    2e48:	d1 08       	sbc	r13, r1
    2e4a:	d3 94       	inc	r13
    2e4c:	c0 e2       	ldi	r28, 0x20	; 32
    2e4e:	d0 e0       	ldi	r29, 0x00	; 0
    2e50:	00 e0       	ldi	r16, 0x00	; 0
    2e52:	10 e0       	ldi	r17, 0x00	; 0
    2e54:	0e c0       	rjmp	.+28     	; 0x2e72 <conv_flt+0x246>
    2e56:	f1 ec       	ldi	r31, 0xC1	; 193
    2e58:	ef 2e       	mov	r14, r31
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	ff 2e       	mov	r15, r31
    2e5e:	f6 cf       	rjmp	.-20     	; 0x2e4c <conv_flt+0x220>
    2e60:	f7 01       	movw	r30, r14
    2e62:	25 91       	lpm	r18, Z+
    2e64:	35 91       	lpm	r19, Z+
    2e66:	45 91       	lpm	r20, Z+
    2e68:	54 91       	lpm	r21, Z+
    2e6a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__mulsf3>
    2e6e:	cc 1a       	sub	r12, r28
    2e70:	dd 0a       	sbc	r13, r29
    2e72:	cc 16       	cp	r12, r28
    2e74:	dd 06       	cpc	r13, r29
    2e76:	a0 f7       	brcc	.-24     	; 0x2e60 <conv_flt+0x234>
    2e78:	d6 95       	lsr	r29
    2e7a:	c7 95       	ror	r28
    2e7c:	0f 5f       	subi	r16, 0xFF	; 255
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	06 30       	cpi	r16, 0x06	; 6
    2e82:	11 05       	cpc	r17, r1
    2e84:	29 f0       	breq	.+10     	; 0x2e90 <conv_flt+0x264>
    2e86:	ec ef       	ldi	r30, 0xFC	; 252
    2e88:	ff ef       	ldi	r31, 0xFF	; 255
    2e8a:	ee 0e       	add	r14, r30
    2e8c:	ff 1e       	adc	r15, r31
    2e8e:	f1 cf       	rjmp	.-30     	; 0x2e72 <conv_flt+0x246>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	57 fc       	sbrc	r5, 7
    2e96:	b0 58       	subi	r27, 0x80	; 128
    2e98:	21 14       	cp	r2, r1
    2e9a:	31 04       	cpc	r3, r1
    2e9c:	29 f0       	breq	.+10     	; 0x2ea8 <conv_flt+0x27c>
    2e9e:	f1 01       	movw	r30, r2
    2ea0:	80 83       	st	Z, r24
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	a2 83       	std	Z+2, r26	; 0x02
    2ea6:	b3 83       	std	Z+3, r27	; 0x03
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	01 c0       	rjmp	.+2      	; 0x2eae <conv_flt+0x282>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	df 90       	pop	r13
    2ebc:	cf 90       	pop	r12
    2ebe:	bf 90       	pop	r11
    2ec0:	af 90       	pop	r10
    2ec2:	9f 90       	pop	r9
    2ec4:	8f 90       	pop	r8
    2ec6:	7f 90       	pop	r7
    2ec8:	6f 90       	pop	r6
    2eca:	5f 90       	pop	r5
    2ecc:	3f 90       	pop	r3
    2ece:	2f 90       	pop	r2
    2ed0:	08 95       	ret

00002ed2 <vfscanf>:
    2ed2:	a0 e0       	ldi	r26, 0x00	; 0
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ef e6       	ldi	r30, 0x6F	; 111
    2ed8:	f7 e1       	ldi	r31, 0x17	; 23
    2eda:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__+0x6>
    2ede:	4c 01       	movw	r8, r24
    2ee0:	5b 01       	movw	r10, r22
    2ee2:	3a 01       	movw	r6, r20
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	17 82       	std	Z+7, r1	; 0x07
    2ee8:	16 82       	std	Z+6, r1	; 0x06
    2eea:	55 24       	eor	r5, r5
    2eec:	04 c1       	rjmp	.+520    	; 0x30f6 <vfscanf+0x224>
    2eee:	81 2f       	mov	r24, r17
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <isspace>
    2ef6:	89 2b       	or	r24, r25
    2ef8:	21 f0       	breq	.+8      	; 0x2f02 <vfscanf+0x30>
    2efa:	c4 01       	movw	r24, r8
    2efc:	0e 94 bd 14 	call	0x297a	; 0x297a <skip_spaces>
    2f00:	fa c0       	rjmp	.+500    	; 0x30f6 <vfscanf+0x224>
    2f02:	15 32       	cpi	r17, 0x25	; 37
    2f04:	49 f4       	brne	.+18     	; 0x2f18 <vfscanf+0x46>
    2f06:	f5 01       	movw	r30, r10
    2f08:	f3 fc       	sbrc	r15, 3
    2f0a:	65 91       	lpm	r22, Z+
    2f0c:	f3 fe       	sbrs	r15, 3
    2f0e:	61 91       	ld	r22, Z+
    2f10:	5f 01       	movw	r10, r30
    2f12:	65 32       	cpi	r22, 0x25	; 37
    2f14:	69 f4       	brne	.+26     	; 0x2f30 <vfscanf+0x5e>
    2f16:	15 e2       	ldi	r17, 0x25	; 37
    2f18:	c4 01       	movw	r24, r8
    2f1a:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    2f1e:	97 fd       	sbrc	r25, 7
    2f20:	f6 c0       	rjmp	.+492    	; 0x310e <vfscanf+0x23c>
    2f22:	18 17       	cp	r17, r24
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <vfscanf+0x56>
    2f26:	e7 c0       	rjmp	.+462    	; 0x30f6 <vfscanf+0x224>
    2f28:	b4 01       	movw	r22, r8
    2f2a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    2f2e:	f4 c0       	rjmp	.+488    	; 0x3118 <vfscanf+0x246>
    2f30:	6a 32       	cpi	r22, 0x2A	; 42
    2f32:	19 f0       	breq	.+6      	; 0x2f3a <vfscanf+0x68>
    2f34:	16 2f       	mov	r17, r22
    2f36:	00 e0       	ldi	r16, 0x00	; 0
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <vfscanf+0x74>
    2f3a:	f3 fc       	sbrc	r15, 3
    2f3c:	15 91       	lpm	r17, Z+
    2f3e:	f3 fe       	sbrs	r15, 3
    2f40:	11 91       	ld	r17, Z+
    2f42:	5f 01       	movw	r10, r30
    2f44:	01 e0       	ldi	r16, 0x01	; 1
    2f46:	cc 24       	eor	r12, r12
    2f48:	dd 24       	eor	r13, r13
    2f4a:	0e c0       	rjmp	.+28     	; 0x2f68 <vfscanf+0x96>
    2f4c:	02 60       	ori	r16, 0x02	; 2
    2f4e:	b6 01       	movw	r22, r12
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	40 e2       	ldi	r20, 0x20	; 32
    2f56:	0e 94 8f 14 	call	0x291e	; 0x291e <mulacc>
    2f5a:	6b 01       	movw	r12, r22
    2f5c:	f5 01       	movw	r30, r10
    2f5e:	f3 fc       	sbrc	r15, 3
    2f60:	15 91       	lpm	r17, Z+
    2f62:	f3 fe       	sbrs	r15, 3
    2f64:	11 91       	ld	r17, Z+
    2f66:	5f 01       	movw	r10, r30
    2f68:	21 2f       	mov	r18, r17
    2f6a:	20 53       	subi	r18, 0x30	; 48
    2f6c:	2a 30       	cpi	r18, 0x0A	; 10
    2f6e:	70 f3       	brcs	.-36     	; 0x2f4c <vfscanf+0x7a>
    2f70:	01 fd       	sbrc	r16, 1
    2f72:	04 c0       	rjmp	.+8      	; 0x2f7c <vfscanf+0xaa>
    2f74:	cc 24       	eor	r12, r12
    2f76:	ca 94       	dec	r12
    2f78:	dc 2c       	mov	r13, r12
    2f7a:	04 c0       	rjmp	.+8      	; 0x2f84 <vfscanf+0xb2>
    2f7c:	c1 14       	cp	r12, r1
    2f7e:	d1 04       	cpc	r13, r1
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <vfscanf+0xb2>
    2f82:	ca c0       	rjmp	.+404    	; 0x3118 <vfscanf+0x246>
    2f84:	18 36       	cpi	r17, 0x68	; 104
    2f86:	21 f0       	breq	.+8      	; 0x2f90 <vfscanf+0xbe>
    2f88:	1c 36       	cpi	r17, 0x6C	; 108
    2f8a:	99 f4       	brne	.+38     	; 0x2fb2 <vfscanf+0xe0>
    2f8c:	f5 01       	movw	r30, r10
    2f8e:	0b c0       	rjmp	.+22     	; 0x2fa6 <vfscanf+0xd4>
    2f90:	f5 01       	movw	r30, r10
    2f92:	f3 fc       	sbrc	r15, 3
    2f94:	65 91       	lpm	r22, Z+
    2f96:	f3 fe       	sbrs	r15, 3
    2f98:	61 91       	ld	r22, Z+
    2f9a:	68 36       	cpi	r22, 0x68	; 104
    2f9c:	19 f0       	breq	.+6      	; 0x2fa4 <vfscanf+0xd2>
    2f9e:	5f 01       	movw	r10, r30
    2fa0:	16 2f       	mov	r17, r22
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <vfscanf+0xe0>
    2fa4:	08 60       	ori	r16, 0x08	; 8
    2fa6:	04 60       	ori	r16, 0x04	; 4
    2fa8:	f3 fc       	sbrc	r15, 3
    2faa:	15 91       	lpm	r17, Z+
    2fac:	f3 fe       	sbrs	r15, 3
    2fae:	11 91       	ld	r17, Z+
    2fb0:	5f 01       	movw	r10, r30
    2fb2:	11 23       	and	r17, r17
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <vfscanf+0xe6>
    2fb6:	b0 c0       	rjmp	.+352    	; 0x3118 <vfscanf+0x246>
    2fb8:	88 e7       	ldi	r24, 0x78	; 120
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	61 2f       	mov	r22, r17
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	0e 94 08 1b 	call	0x3610	; 0x3610 <strchr_P>
    2fc4:	89 2b       	or	r24, r25
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <vfscanf+0xf8>
    2fc8:	a7 c0       	rjmp	.+334    	; 0x3118 <vfscanf+0x246>
    2fca:	80 2f       	mov	r24, r16
    2fcc:	00 ff       	sbrs	r16, 0
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <vfscanf+0x104>
    2fd0:	ee 24       	eor	r14, r14
    2fd2:	ff 24       	eor	r15, r15
    2fd4:	07 c0       	rjmp	.+14     	; 0x2fe4 <vfscanf+0x112>
    2fd6:	f3 01       	movw	r30, r6
    2fd8:	e0 80       	ld	r14, Z
    2fda:	f1 80       	ldd	r15, Z+1	; 0x01
    2fdc:	22 e0       	ldi	r18, 0x02	; 2
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	62 0e       	add	r6, r18
    2fe2:	73 1e       	adc	r7, r19
    2fe4:	1e 36       	cpi	r17, 0x6E	; 110
    2fe6:	51 f4       	brne	.+20     	; 0x2ffc <vfscanf+0x12a>
    2fe8:	f4 01       	movw	r30, r8
    2fea:	46 81       	ldd	r20, Z+6	; 0x06
    2fec:	57 81       	ldd	r21, Z+7	; 0x07
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	c7 01       	movw	r24, r14
    2ff4:	20 2f       	mov	r18, r16
    2ff6:	0e 94 83 14 	call	0x2906	; 0x2906 <putval>
    2ffa:	7d c0       	rjmp	.+250    	; 0x30f6 <vfscanf+0x224>
    2ffc:	13 36       	cpi	r17, 0x63	; 99
    2ffe:	b9 f4       	brne	.+46     	; 0x302e <vfscanf+0x15c>
    3000:	81 fd       	sbrc	r24, 1
    3002:	03 c0       	rjmp	.+6      	; 0x300a <vfscanf+0x138>
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	c8 2e       	mov	r12, r24
    3008:	d1 2c       	mov	r13, r1
    300a:	c4 01       	movw	r24, r8
    300c:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    3010:	97 fd       	sbrc	r25, 7
    3012:	7d c0       	rjmp	.+250    	; 0x310e <vfscanf+0x23c>
    3014:	e1 14       	cp	r14, r1
    3016:	f1 04       	cpc	r15, r1
    3018:	19 f0       	breq	.+6      	; 0x3020 <vfscanf+0x14e>
    301a:	f7 01       	movw	r30, r14
    301c:	81 93       	st	Z+, r24
    301e:	7f 01       	movw	r14, r30
    3020:	08 94       	sec
    3022:	c1 08       	sbc	r12, r1
    3024:	d1 08       	sbc	r13, r1
    3026:	c1 14       	cp	r12, r1
    3028:	d1 04       	cpc	r13, r1
    302a:	79 f7       	brne	.-34     	; 0x300a <vfscanf+0x138>
    302c:	62 c0       	rjmp	.+196    	; 0x30f2 <vfscanf+0x220>
    302e:	1b 35       	cpi	r17, 0x5B	; 91
    3030:	59 f4       	brne	.+22     	; 0x3048 <vfscanf+0x176>
    3032:	c4 01       	movw	r24, r8
    3034:	b6 01       	movw	r22, r12
    3036:	a7 01       	movw	r20, r14
    3038:	95 01       	movw	r18, r10
    303a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <conv_brk>
    303e:	5c 01       	movw	r10, r24
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	09 f0       	breq	.+2      	; 0x3046 <vfscanf+0x174>
    3044:	56 c0       	rjmp	.+172    	; 0x30f2 <vfscanf+0x220>
    3046:	50 c0       	rjmp	.+160    	; 0x30e8 <vfscanf+0x216>
    3048:	c4 01       	movw	r24, r8
    304a:	0e 94 bd 14 	call	0x297a	; 0x297a <skip_spaces>
    304e:	97 fd       	sbrc	r25, 7
    3050:	5e c0       	rjmp	.+188    	; 0x310e <vfscanf+0x23c>
    3052:	1f 36       	cpi	r17, 0x6F	; 111
    3054:	d1 f1       	breq	.+116    	; 0x30ca <vfscanf+0x1f8>
    3056:	10 37       	cpi	r17, 0x70	; 112
    3058:	38 f4       	brcc	.+14     	; 0x3068 <vfscanf+0x196>
    305a:	14 36       	cpi	r17, 0x64	; 100
    305c:	a1 f1       	breq	.+104    	; 0x30c6 <vfscanf+0x1f4>
    305e:	19 36       	cpi	r17, 0x69	; 105
    3060:	a9 f1       	breq	.+106    	; 0x30cc <vfscanf+0x1fa>
    3062:	18 35       	cpi	r17, 0x58	; 88
    3064:	d1 f5       	brne	.+116    	; 0x30da <vfscanf+0x208>
    3066:	2d c0       	rjmp	.+90     	; 0x30c2 <vfscanf+0x1f0>
    3068:	13 37       	cpi	r17, 0x73	; 115
    306a:	51 f0       	breq	.+20     	; 0x3080 <vfscanf+0x1ae>
    306c:	14 37       	cpi	r17, 0x74	; 116
    306e:	18 f4       	brcc	.+6      	; 0x3076 <vfscanf+0x1a4>
    3070:	10 37       	cpi	r17, 0x70	; 112
    3072:	99 f5       	brne	.+102    	; 0x30da <vfscanf+0x208>
    3074:	26 c0       	rjmp	.+76     	; 0x30c2 <vfscanf+0x1f0>
    3076:	15 37       	cpi	r17, 0x75	; 117
    3078:	31 f1       	breq	.+76     	; 0x30c6 <vfscanf+0x1f4>
    307a:	18 37       	cpi	r17, 0x78	; 120
    307c:	71 f5       	brne	.+92     	; 0x30da <vfscanf+0x208>
    307e:	21 c0       	rjmp	.+66     	; 0x30c2 <vfscanf+0x1f0>
    3080:	c4 01       	movw	r24, r8
    3082:	0e 94 29 1b 	call	0x3652	; 0x3652 <fgetc>
    3086:	ec 01       	movw	r28, r24
    3088:	97 fd       	sbrc	r25, 7
    308a:	15 c0       	rjmp	.+42     	; 0x30b6 <vfscanf+0x1e4>
    308c:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <isspace>
    3090:	89 2b       	or	r24, r25
    3092:	29 f0       	breq	.+10     	; 0x309e <vfscanf+0x1cc>
    3094:	ce 01       	movw	r24, r28
    3096:	b4 01       	movw	r22, r8
    3098:	0e 94 0c 1c 	call	0x3818	; 0x3818 <ungetc>
    309c:	0c c0       	rjmp	.+24     	; 0x30b6 <vfscanf+0x1e4>
    309e:	e1 14       	cp	r14, r1
    30a0:	f1 04       	cpc	r15, r1
    30a2:	19 f0       	breq	.+6      	; 0x30aa <vfscanf+0x1d8>
    30a4:	f7 01       	movw	r30, r14
    30a6:	c1 93       	st	Z+, r28
    30a8:	7f 01       	movw	r14, r30
    30aa:	08 94       	sec
    30ac:	c1 08       	sbc	r12, r1
    30ae:	d1 08       	sbc	r13, r1
    30b0:	c1 14       	cp	r12, r1
    30b2:	d1 04       	cpc	r13, r1
    30b4:	29 f7       	brne	.-54     	; 0x3080 <vfscanf+0x1ae>
    30b6:	e1 14       	cp	r14, r1
    30b8:	f1 04       	cpc	r15, r1
    30ba:	d9 f0       	breq	.+54     	; 0x30f2 <vfscanf+0x220>
    30bc:	f7 01       	movw	r30, r14
    30be:	10 82       	st	Z, r1
    30c0:	18 c0       	rjmp	.+48     	; 0x30f2 <vfscanf+0x220>
    30c2:	00 64       	ori	r16, 0x40	; 64
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <vfscanf+0x1fa>
    30c6:	00 62       	ori	r16, 0x20	; 32
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <vfscanf+0x1fa>
    30ca:	00 61       	ori	r16, 0x10	; 16
    30cc:	c4 01       	movw	r24, r8
    30ce:	b6 01       	movw	r22, r12
    30d0:	a7 01       	movw	r20, r14
    30d2:	20 2f       	mov	r18, r16
    30d4:	0e 94 d6 14 	call	0x29ac	; 0x29ac <conv_int>
    30d8:	05 c0       	rjmp	.+10     	; 0x30e4 <vfscanf+0x212>
    30da:	c4 01       	movw	r24, r8
    30dc:	b6 01       	movw	r22, r12
    30de:	a7 01       	movw	r20, r14
    30e0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <conv_flt>
    30e4:	88 23       	and	r24, r24
    30e6:	29 f4       	brne	.+10     	; 0x30f2 <vfscanf+0x220>
    30e8:	f4 01       	movw	r30, r8
    30ea:	83 81       	ldd	r24, Z+3	; 0x03
    30ec:	80 73       	andi	r24, 0x30	; 48
    30ee:	79 f4       	brne	.+30     	; 0x310e <vfscanf+0x23c>
    30f0:	13 c0       	rjmp	.+38     	; 0x3118 <vfscanf+0x246>
    30f2:	00 ff       	sbrs	r16, 0
    30f4:	53 94       	inc	r5
    30f6:	f4 01       	movw	r30, r8
    30f8:	f3 80       	ldd	r15, Z+3	; 0x03
    30fa:	f5 01       	movw	r30, r10
    30fc:	f3 fc       	sbrc	r15, 3
    30fe:	15 91       	lpm	r17, Z+
    3100:	f3 fe       	sbrs	r15, 3
    3102:	11 91       	ld	r17, Z+
    3104:	5f 01       	movw	r10, r30
    3106:	11 23       	and	r17, r17
    3108:	09 f0       	breq	.+2      	; 0x310c <vfscanf+0x23a>
    310a:	f1 ce       	rjmp	.-542    	; 0x2eee <vfscanf+0x1c>
    310c:	05 c0       	rjmp	.+10     	; 0x3118 <vfscanf+0x246>
    310e:	55 20       	and	r5, r5
    3110:	19 f4       	brne	.+6      	; 0x3118 <vfscanf+0x246>
    3112:	2f ef       	ldi	r18, 0xFF	; 255
    3114:	3f ef       	ldi	r19, 0xFF	; 255
    3116:	02 c0       	rjmp	.+4      	; 0x311c <vfscanf+0x24a>
    3118:	25 2d       	mov	r18, r5
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	c9 01       	movw	r24, r18
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	ef e0       	ldi	r30, 0x0F	; 15
    3124:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__+0x6>

00003128 <__floatunsisf>:
    3128:	e8 94       	clt
    312a:	09 c0       	rjmp	.+18     	; 0x313e <__floatsisf+0x12>

0000312c <__floatsisf>:
    312c:	97 fb       	bst	r25, 7
    312e:	3e f4       	brtc	.+14     	; 0x313e <__floatsisf+0x12>
    3130:	90 95       	com	r25
    3132:	80 95       	com	r24
    3134:	70 95       	com	r23
    3136:	61 95       	neg	r22
    3138:	7f 4f       	sbci	r23, 0xFF	; 255
    313a:	8f 4f       	sbci	r24, 0xFF	; 255
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	99 23       	and	r25, r25
    3140:	a9 f0       	breq	.+42     	; 0x316c <__floatsisf+0x40>
    3142:	f9 2f       	mov	r31, r25
    3144:	96 e9       	ldi	r25, 0x96	; 150
    3146:	bb 27       	eor	r27, r27
    3148:	93 95       	inc	r25
    314a:	f6 95       	lsr	r31
    314c:	87 95       	ror	r24
    314e:	77 95       	ror	r23
    3150:	67 95       	ror	r22
    3152:	b7 95       	ror	r27
    3154:	f1 11       	cpse	r31, r1
    3156:	f8 cf       	rjmp	.-16     	; 0x3148 <__floatsisf+0x1c>
    3158:	fa f4       	brpl	.+62     	; 0x3198 <__floatsisf+0x6c>
    315a:	bb 0f       	add	r27, r27
    315c:	11 f4       	brne	.+4      	; 0x3162 <__floatsisf+0x36>
    315e:	60 ff       	sbrs	r22, 0
    3160:	1b c0       	rjmp	.+54     	; 0x3198 <__floatsisf+0x6c>
    3162:	6f 5f       	subi	r22, 0xFF	; 255
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	8f 4f       	sbci	r24, 0xFF	; 255
    3168:	9f 4f       	sbci	r25, 0xFF	; 255
    316a:	16 c0       	rjmp	.+44     	; 0x3198 <__floatsisf+0x6c>
    316c:	88 23       	and	r24, r24
    316e:	11 f0       	breq	.+4      	; 0x3174 <__floatsisf+0x48>
    3170:	96 e9       	ldi	r25, 0x96	; 150
    3172:	11 c0       	rjmp	.+34     	; 0x3196 <__floatsisf+0x6a>
    3174:	77 23       	and	r23, r23
    3176:	21 f0       	breq	.+8      	; 0x3180 <__floatsisf+0x54>
    3178:	9e e8       	ldi	r25, 0x8E	; 142
    317a:	87 2f       	mov	r24, r23
    317c:	76 2f       	mov	r23, r22
    317e:	05 c0       	rjmp	.+10     	; 0x318a <__floatsisf+0x5e>
    3180:	66 23       	and	r22, r22
    3182:	71 f0       	breq	.+28     	; 0x31a0 <__floatsisf+0x74>
    3184:	96 e8       	ldi	r25, 0x86	; 134
    3186:	86 2f       	mov	r24, r22
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	2a f0       	brmi	.+10     	; 0x3198 <__floatsisf+0x6c>
    318e:	9a 95       	dec	r25
    3190:	66 0f       	add	r22, r22
    3192:	77 1f       	adc	r23, r23
    3194:	88 1f       	adc	r24, r24
    3196:	da f7       	brpl	.-10     	; 0x318e <__floatsisf+0x62>
    3198:	88 0f       	add	r24, r24
    319a:	96 95       	lsr	r25
    319c:	87 95       	ror	r24
    319e:	97 f9       	bld	r25, 7
    31a0:	08 95       	ret

000031a2 <__mulsf3>:
    31a2:	0b d0       	rcall	.+22     	; 0x31ba <__mulsf3x>
    31a4:	78 c0       	rjmp	.+240    	; 0x3296 <__fp_round>
    31a6:	69 d0       	rcall	.+210    	; 0x327a <__fp_pscA>
    31a8:	28 f0       	brcs	.+10     	; 0x31b4 <__mulsf3+0x12>
    31aa:	6e d0       	rcall	.+220    	; 0x3288 <__fp_pscB>
    31ac:	18 f0       	brcs	.+6      	; 0x31b4 <__mulsf3+0x12>
    31ae:	95 23       	and	r25, r21
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <__mulsf3+0x12>
    31b2:	5a c0       	rjmp	.+180    	; 0x3268 <__fp_inf>
    31b4:	5f c0       	rjmp	.+190    	; 0x3274 <__fp_nan>
    31b6:	11 24       	eor	r1, r1
    31b8:	a2 c0       	rjmp	.+324    	; 0x32fe <__fp_szero>

000031ba <__mulsf3x>:
    31ba:	7e d0       	rcall	.+252    	; 0x32b8 <__fp_split3>
    31bc:	a0 f3       	brcs	.-24     	; 0x31a6 <__mulsf3+0x4>

000031be <__mulsf3_pse>:
    31be:	95 9f       	mul	r25, r21
    31c0:	d1 f3       	breq	.-12     	; 0x31b6 <__mulsf3+0x14>
    31c2:	95 0f       	add	r25, r21
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	55 1f       	adc	r21, r21
    31c8:	62 9f       	mul	r22, r18
    31ca:	f0 01       	movw	r30, r0
    31cc:	72 9f       	mul	r23, r18
    31ce:	bb 27       	eor	r27, r27
    31d0:	f0 0d       	add	r31, r0
    31d2:	b1 1d       	adc	r27, r1
    31d4:	63 9f       	mul	r22, r19
    31d6:	aa 27       	eor	r26, r26
    31d8:	f0 0d       	add	r31, r0
    31da:	b1 1d       	adc	r27, r1
    31dc:	aa 1f       	adc	r26, r26
    31de:	64 9f       	mul	r22, r20
    31e0:	66 27       	eor	r22, r22
    31e2:	b0 0d       	add	r27, r0
    31e4:	a1 1d       	adc	r26, r1
    31e6:	66 1f       	adc	r22, r22
    31e8:	82 9f       	mul	r24, r18
    31ea:	22 27       	eor	r18, r18
    31ec:	b0 0d       	add	r27, r0
    31ee:	a1 1d       	adc	r26, r1
    31f0:	62 1f       	adc	r22, r18
    31f2:	73 9f       	mul	r23, r19
    31f4:	b0 0d       	add	r27, r0
    31f6:	a1 1d       	adc	r26, r1
    31f8:	62 1f       	adc	r22, r18
    31fa:	83 9f       	mul	r24, r19
    31fc:	a0 0d       	add	r26, r0
    31fe:	61 1d       	adc	r22, r1
    3200:	22 1f       	adc	r18, r18
    3202:	74 9f       	mul	r23, r20
    3204:	33 27       	eor	r19, r19
    3206:	a0 0d       	add	r26, r0
    3208:	61 1d       	adc	r22, r1
    320a:	23 1f       	adc	r18, r19
    320c:	84 9f       	mul	r24, r20
    320e:	60 0d       	add	r22, r0
    3210:	21 1d       	adc	r18, r1
    3212:	82 2f       	mov	r24, r18
    3214:	76 2f       	mov	r23, r22
    3216:	6a 2f       	mov	r22, r26
    3218:	11 24       	eor	r1, r1
    321a:	9f 57       	subi	r25, 0x7F	; 127
    321c:	50 40       	sbci	r21, 0x00	; 0
    321e:	8a f0       	brmi	.+34     	; 0x3242 <__mulsf3_pse+0x84>
    3220:	e1 f0       	breq	.+56     	; 0x325a <__mulsf3_pse+0x9c>
    3222:	88 23       	and	r24, r24
    3224:	4a f0       	brmi	.+18     	; 0x3238 <__mulsf3_pse+0x7a>
    3226:	ee 0f       	add	r30, r30
    3228:	ff 1f       	adc	r31, r31
    322a:	bb 1f       	adc	r27, r27
    322c:	66 1f       	adc	r22, r22
    322e:	77 1f       	adc	r23, r23
    3230:	88 1f       	adc	r24, r24
    3232:	91 50       	subi	r25, 0x01	; 1
    3234:	50 40       	sbci	r21, 0x00	; 0
    3236:	a9 f7       	brne	.-22     	; 0x3222 <__mulsf3_pse+0x64>
    3238:	9e 3f       	cpi	r25, 0xFE	; 254
    323a:	51 05       	cpc	r21, r1
    323c:	70 f0       	brcs	.+28     	; 0x325a <__mulsf3_pse+0x9c>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <__fp_inf>
    3240:	5e c0       	rjmp	.+188    	; 0x32fe <__fp_szero>
    3242:	5f 3f       	cpi	r21, 0xFF	; 255
    3244:	ec f3       	brlt	.-6      	; 0x3240 <__mulsf3_pse+0x82>
    3246:	98 3e       	cpi	r25, 0xE8	; 232
    3248:	dc f3       	brlt	.-10     	; 0x3240 <__mulsf3_pse+0x82>
    324a:	86 95       	lsr	r24
    324c:	77 95       	ror	r23
    324e:	67 95       	ror	r22
    3250:	b7 95       	ror	r27
    3252:	f7 95       	ror	r31
    3254:	e7 95       	ror	r30
    3256:	9f 5f       	subi	r25, 0xFF	; 255
    3258:	c1 f7       	brne	.-16     	; 0x324a <__mulsf3_pse+0x8c>
    325a:	fe 2b       	or	r31, r30
    325c:	88 0f       	add	r24, r24
    325e:	91 1d       	adc	r25, r1
    3260:	96 95       	lsr	r25
    3262:	87 95       	ror	r24
    3264:	97 f9       	bld	r25, 7
    3266:	08 95       	ret

00003268 <__fp_inf>:
    3268:	97 f9       	bld	r25, 7
    326a:	9f 67       	ori	r25, 0x7F	; 127
    326c:	80 e8       	ldi	r24, 0x80	; 128
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	08 95       	ret

00003274 <__fp_nan>:
    3274:	9f ef       	ldi	r25, 0xFF	; 255
    3276:	80 ec       	ldi	r24, 0xC0	; 192
    3278:	08 95       	ret

0000327a <__fp_pscA>:
    327a:	00 24       	eor	r0, r0
    327c:	0a 94       	dec	r0
    327e:	16 16       	cp	r1, r22
    3280:	17 06       	cpc	r1, r23
    3282:	18 06       	cpc	r1, r24
    3284:	09 06       	cpc	r0, r25
    3286:	08 95       	ret

00003288 <__fp_pscB>:
    3288:	00 24       	eor	r0, r0
    328a:	0a 94       	dec	r0
    328c:	12 16       	cp	r1, r18
    328e:	13 06       	cpc	r1, r19
    3290:	14 06       	cpc	r1, r20
    3292:	05 06       	cpc	r0, r21
    3294:	08 95       	ret

00003296 <__fp_round>:
    3296:	09 2e       	mov	r0, r25
    3298:	03 94       	inc	r0
    329a:	00 0c       	add	r0, r0
    329c:	11 f4       	brne	.+4      	; 0x32a2 <__fp_round+0xc>
    329e:	88 23       	and	r24, r24
    32a0:	52 f0       	brmi	.+20     	; 0x32b6 <__fp_round+0x20>
    32a2:	bb 0f       	add	r27, r27
    32a4:	40 f4       	brcc	.+16     	; 0x32b6 <__fp_round+0x20>
    32a6:	bf 2b       	or	r27, r31
    32a8:	11 f4       	brne	.+4      	; 0x32ae <__fp_round+0x18>
    32aa:	60 ff       	sbrs	r22, 0
    32ac:	04 c0       	rjmp	.+8      	; 0x32b6 <__fp_round+0x20>
    32ae:	6f 5f       	subi	r22, 0xFF	; 255
    32b0:	7f 4f       	sbci	r23, 0xFF	; 255
    32b2:	8f 4f       	sbci	r24, 0xFF	; 255
    32b4:	9f 4f       	sbci	r25, 0xFF	; 255
    32b6:	08 95       	ret

000032b8 <__fp_split3>:
    32b8:	57 fd       	sbrc	r21, 7
    32ba:	90 58       	subi	r25, 0x80	; 128
    32bc:	44 0f       	add	r20, r20
    32be:	55 1f       	adc	r21, r21
    32c0:	59 f0       	breq	.+22     	; 0x32d8 <__fp_splitA+0x10>
    32c2:	5f 3f       	cpi	r21, 0xFF	; 255
    32c4:	71 f0       	breq	.+28     	; 0x32e2 <__fp_splitA+0x1a>
    32c6:	47 95       	ror	r20

000032c8 <__fp_splitA>:
    32c8:	88 0f       	add	r24, r24
    32ca:	97 fb       	bst	r25, 7
    32cc:	99 1f       	adc	r25, r25
    32ce:	61 f0       	breq	.+24     	; 0x32e8 <__fp_splitA+0x20>
    32d0:	9f 3f       	cpi	r25, 0xFF	; 255
    32d2:	79 f0       	breq	.+30     	; 0x32f2 <__fp_splitA+0x2a>
    32d4:	87 95       	ror	r24
    32d6:	08 95       	ret
    32d8:	12 16       	cp	r1, r18
    32da:	13 06       	cpc	r1, r19
    32dc:	14 06       	cpc	r1, r20
    32de:	55 1f       	adc	r21, r21
    32e0:	f2 cf       	rjmp	.-28     	; 0x32c6 <__fp_split3+0xe>
    32e2:	46 95       	lsr	r20
    32e4:	f1 df       	rcall	.-30     	; 0x32c8 <__fp_splitA>
    32e6:	08 c0       	rjmp	.+16     	; 0x32f8 <__fp_splitA+0x30>
    32e8:	16 16       	cp	r1, r22
    32ea:	17 06       	cpc	r1, r23
    32ec:	18 06       	cpc	r1, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	f1 cf       	rjmp	.-30     	; 0x32d4 <__fp_splitA+0xc>
    32f2:	86 95       	lsr	r24
    32f4:	71 05       	cpc	r23, r1
    32f6:	61 05       	cpc	r22, r1
    32f8:	08 94       	sec
    32fa:	08 95       	ret

000032fc <__fp_zero>:
    32fc:	e8 94       	clt

000032fe <__fp_szero>:
    32fe:	bb 27       	eor	r27, r27
    3300:	66 27       	eor	r22, r22
    3302:	77 27       	eor	r23, r23
    3304:	cb 01       	movw	r24, r22
    3306:	97 f9       	bld	r25, 7
    3308:	08 95       	ret

0000330a <__udivmodhi4>:
    330a:	aa 1b       	sub	r26, r26
    330c:	bb 1b       	sub	r27, r27
    330e:	51 e1       	ldi	r21, 0x11	; 17
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <__udivmodhi4_ep>

00003312 <__udivmodhi4_loop>:
    3312:	aa 1f       	adc	r26, r26
    3314:	bb 1f       	adc	r27, r27
    3316:	a6 17       	cp	r26, r22
    3318:	b7 07       	cpc	r27, r23
    331a:	10 f0       	brcs	.+4      	; 0x3320 <__udivmodhi4_ep>
    331c:	a6 1b       	sub	r26, r22
    331e:	b7 0b       	sbc	r27, r23

00003320 <__udivmodhi4_ep>:
    3320:	88 1f       	adc	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	5a 95       	dec	r21
    3326:	a9 f7       	brne	.-22     	; 0x3312 <__udivmodhi4_loop>
    3328:	80 95       	com	r24
    332a:	90 95       	com	r25
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	08 95       	ret

00003332 <__divmodhi4>:
    3332:	97 fb       	bst	r25, 7
    3334:	09 2e       	mov	r0, r25
    3336:	07 26       	eor	r0, r23
    3338:	0a d0       	rcall	.+20     	; 0x334e <__divmodhi4_neg1>
    333a:	77 fd       	sbrc	r23, 7
    333c:	04 d0       	rcall	.+8      	; 0x3346 <__divmodhi4_neg2>
    333e:	e5 df       	rcall	.-54     	; 0x330a <__udivmodhi4>
    3340:	06 d0       	rcall	.+12     	; 0x334e <__divmodhi4_neg1>
    3342:	00 20       	and	r0, r0
    3344:	1a f4       	brpl	.+6      	; 0x334c <__divmodhi4_exit>

00003346 <__divmodhi4_neg2>:
    3346:	70 95       	com	r23
    3348:	61 95       	neg	r22
    334a:	7f 4f       	sbci	r23, 0xFF	; 255

0000334c <__divmodhi4_exit>:
    334c:	08 95       	ret

0000334e <__divmodhi4_neg1>:
    334e:	f6 f7       	brtc	.-4      	; 0x334c <__divmodhi4_exit>
    3350:	90 95       	com	r25
    3352:	81 95       	neg	r24
    3354:	9f 4f       	sbci	r25, 0xFF	; 255
    3356:	08 95       	ret

00003358 <__divmodsi4>:
    3358:	97 fb       	bst	r25, 7
    335a:	09 2e       	mov	r0, r25
    335c:	05 26       	eor	r0, r21
    335e:	0e d0       	rcall	.+28     	; 0x337c <__divmodsi4_neg1>
    3360:	57 fd       	sbrc	r21, 7
    3362:	04 d0       	rcall	.+8      	; 0x336c <__divmodsi4_neg2>
    3364:	4b d0       	rcall	.+150    	; 0x33fc <__udivmodsi4>
    3366:	0a d0       	rcall	.+20     	; 0x337c <__divmodsi4_neg1>
    3368:	00 1c       	adc	r0, r0
    336a:	38 f4       	brcc	.+14     	; 0x337a <__divmodsi4_exit>

0000336c <__divmodsi4_neg2>:
    336c:	50 95       	com	r21
    336e:	40 95       	com	r20
    3370:	30 95       	com	r19
    3372:	21 95       	neg	r18
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	4f 4f       	sbci	r20, 0xFF	; 255
    3378:	5f 4f       	sbci	r21, 0xFF	; 255

0000337a <__divmodsi4_exit>:
    337a:	08 95       	ret

0000337c <__divmodsi4_neg1>:
    337c:	f6 f7       	brtc	.-4      	; 0x337a <__divmodsi4_exit>
    337e:	90 95       	com	r25
    3380:	80 95       	com	r24
    3382:	70 95       	com	r23
    3384:	61 95       	neg	r22
    3386:	7f 4f       	sbci	r23, 0xFF	; 255
    3388:	8f 4f       	sbci	r24, 0xFF	; 255
    338a:	9f 4f       	sbci	r25, 0xFF	; 255
    338c:	08 95       	ret

0000338e <__prologue_saves__>:
    338e:	2f 92       	push	r2
    3390:	3f 92       	push	r3
    3392:	4f 92       	push	r4
    3394:	5f 92       	push	r5
    3396:	6f 92       	push	r6
    3398:	7f 92       	push	r7
    339a:	8f 92       	push	r8
    339c:	9f 92       	push	r9
    339e:	af 92       	push	r10
    33a0:	bf 92       	push	r11
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	ca 1b       	sub	r28, r26
    33b8:	db 0b       	sbc	r29, r27
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	09 94       	ijmp

000033c6 <__epilogue_restores__>:
    33c6:	2a 88       	ldd	r2, Y+18	; 0x12
    33c8:	39 88       	ldd	r3, Y+17	; 0x11
    33ca:	48 88       	ldd	r4, Y+16	; 0x10
    33cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33d8:	b9 84       	ldd	r11, Y+9	; 0x09
    33da:	c8 84       	ldd	r12, Y+8	; 0x08
    33dc:	df 80       	ldd	r13, Y+7	; 0x07
    33de:	ee 80       	ldd	r14, Y+6	; 0x06
    33e0:	fd 80       	ldd	r15, Y+5	; 0x05
    33e2:	0c 81       	ldd	r16, Y+4	; 0x04
    33e4:	1b 81       	ldd	r17, Y+3	; 0x03
    33e6:	aa 81       	ldd	r26, Y+2	; 0x02
    33e8:	b9 81       	ldd	r27, Y+1	; 0x01
    33ea:	ce 0f       	add	r28, r30
    33ec:	d1 1d       	adc	r29, r1
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	ed 01       	movw	r28, r26
    33fa:	08 95       	ret

000033fc <__udivmodsi4>:
    33fc:	a1 e2       	ldi	r26, 0x21	; 33
    33fe:	1a 2e       	mov	r1, r26
    3400:	aa 1b       	sub	r26, r26
    3402:	bb 1b       	sub	r27, r27
    3404:	fd 01       	movw	r30, r26
    3406:	0d c0       	rjmp	.+26     	; 0x3422 <__udivmodsi4_ep>

00003408 <__udivmodsi4_loop>:
    3408:	aa 1f       	adc	r26, r26
    340a:	bb 1f       	adc	r27, r27
    340c:	ee 1f       	adc	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	a2 17       	cp	r26, r18
    3412:	b3 07       	cpc	r27, r19
    3414:	e4 07       	cpc	r30, r20
    3416:	f5 07       	cpc	r31, r21
    3418:	20 f0       	brcs	.+8      	; 0x3422 <__udivmodsi4_ep>
    341a:	a2 1b       	sub	r26, r18
    341c:	b3 0b       	sbc	r27, r19
    341e:	e4 0b       	sbc	r30, r20
    3420:	f5 0b       	sbc	r31, r21

00003422 <__udivmodsi4_ep>:
    3422:	66 1f       	adc	r22, r22
    3424:	77 1f       	adc	r23, r23
    3426:	88 1f       	adc	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	1a 94       	dec	r1
    342c:	69 f7       	brne	.-38     	; 0x3408 <__udivmodsi4_loop>
    342e:	60 95       	com	r22
    3430:	70 95       	com	r23
    3432:	80 95       	com	r24
    3434:	90 95       	com	r25
    3436:	9b 01       	movw	r18, r22
    3438:	ac 01       	movw	r20, r24
    343a:	bd 01       	movw	r22, r26
    343c:	cf 01       	movw	r24, r30
    343e:	08 95       	ret

00003440 <__ftoa_engine>:
    3440:	28 30       	cpi	r18, 0x08	; 8
    3442:	08 f0       	brcs	.+2      	; 0x3446 <__ftoa_engine+0x6>
    3444:	27 e0       	ldi	r18, 0x07	; 7
    3446:	33 27       	eor	r19, r19
    3448:	da 01       	movw	r26, r20
    344a:	99 0f       	add	r25, r25
    344c:	31 1d       	adc	r19, r1
    344e:	87 fd       	sbrc	r24, 7
    3450:	91 60       	ori	r25, 0x01	; 1
    3452:	00 96       	adiw	r24, 0x00	; 0
    3454:	61 05       	cpc	r22, r1
    3456:	71 05       	cpc	r23, r1
    3458:	39 f4       	brne	.+14     	; 0x3468 <__ftoa_engine+0x28>
    345a:	32 60       	ori	r19, 0x02	; 2
    345c:	2e 5f       	subi	r18, 0xFE	; 254
    345e:	3d 93       	st	X+, r19
    3460:	30 e3       	ldi	r19, 0x30	; 48
    3462:	2a 95       	dec	r18
    3464:	e1 f7       	brne	.-8      	; 0x345e <__ftoa_engine+0x1e>
    3466:	08 95       	ret
    3468:	9f 3f       	cpi	r25, 0xFF	; 255
    346a:	30 f0       	brcs	.+12     	; 0x3478 <__ftoa_engine+0x38>
    346c:	80 38       	cpi	r24, 0x80	; 128
    346e:	71 05       	cpc	r23, r1
    3470:	61 05       	cpc	r22, r1
    3472:	09 f0       	breq	.+2      	; 0x3476 <__ftoa_engine+0x36>
    3474:	3c 5f       	subi	r19, 0xFC	; 252
    3476:	3c 5f       	subi	r19, 0xFC	; 252
    3478:	3d 93       	st	X+, r19
    347a:	91 30       	cpi	r25, 0x01	; 1
    347c:	08 f0       	brcs	.+2      	; 0x3480 <__ftoa_engine+0x40>
    347e:	80 68       	ori	r24, 0x80	; 128
    3480:	91 1d       	adc	r25, r1
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	1f 93       	push	r17
    3488:	0f 93       	push	r16
    348a:	ff 92       	push	r15
    348c:	ef 92       	push	r14
    348e:	19 2f       	mov	r17, r25
    3490:	98 7f       	andi	r25, 0xF8	; 248
    3492:	96 95       	lsr	r25
    3494:	e9 2f       	mov	r30, r25
    3496:	96 95       	lsr	r25
    3498:	96 95       	lsr	r25
    349a:	e9 0f       	add	r30, r25
    349c:	ff 27       	eor	r31, r31
    349e:	e1 5a       	subi	r30, 0xA1	; 161
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	99 27       	eor	r25, r25
    34a4:	33 27       	eor	r19, r19
    34a6:	ee 24       	eor	r14, r14
    34a8:	ff 24       	eor	r15, r15
    34aa:	a7 01       	movw	r20, r14
    34ac:	e7 01       	movw	r28, r14
    34ae:	05 90       	lpm	r0, Z+
    34b0:	08 94       	sec
    34b2:	07 94       	ror	r0
    34b4:	28 f4       	brcc	.+10     	; 0x34c0 <__ftoa_engine+0x80>
    34b6:	36 0f       	add	r19, r22
    34b8:	e7 1e       	adc	r14, r23
    34ba:	f8 1e       	adc	r15, r24
    34bc:	49 1f       	adc	r20, r25
    34be:	51 1d       	adc	r21, r1
    34c0:	66 0f       	add	r22, r22
    34c2:	77 1f       	adc	r23, r23
    34c4:	88 1f       	adc	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	06 94       	lsr	r0
    34ca:	a1 f7       	brne	.-24     	; 0x34b4 <__ftoa_engine+0x74>
    34cc:	05 90       	lpm	r0, Z+
    34ce:	07 94       	ror	r0
    34d0:	28 f4       	brcc	.+10     	; 0x34dc <__ftoa_engine+0x9c>
    34d2:	e7 0e       	add	r14, r23
    34d4:	f8 1e       	adc	r15, r24
    34d6:	49 1f       	adc	r20, r25
    34d8:	56 1f       	adc	r21, r22
    34da:	c1 1d       	adc	r28, r1
    34dc:	77 0f       	add	r23, r23
    34de:	88 1f       	adc	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	66 1f       	adc	r22, r22
    34e4:	06 94       	lsr	r0
    34e6:	a1 f7       	brne	.-24     	; 0x34d0 <__ftoa_engine+0x90>
    34e8:	05 90       	lpm	r0, Z+
    34ea:	07 94       	ror	r0
    34ec:	28 f4       	brcc	.+10     	; 0x34f8 <__ftoa_engine+0xb8>
    34ee:	f8 0e       	add	r15, r24
    34f0:	49 1f       	adc	r20, r25
    34f2:	56 1f       	adc	r21, r22
    34f4:	c7 1f       	adc	r28, r23
    34f6:	d1 1d       	adc	r29, r1
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	66 1f       	adc	r22, r22
    34fe:	77 1f       	adc	r23, r23
    3500:	06 94       	lsr	r0
    3502:	a1 f7       	brne	.-24     	; 0x34ec <__ftoa_engine+0xac>
    3504:	05 90       	lpm	r0, Z+
    3506:	07 94       	ror	r0
    3508:	20 f4       	brcc	.+8      	; 0x3512 <__ftoa_engine+0xd2>
    350a:	49 0f       	add	r20, r25
    350c:	56 1f       	adc	r21, r22
    350e:	c7 1f       	adc	r28, r23
    3510:	d8 1f       	adc	r29, r24
    3512:	99 0f       	add	r25, r25
    3514:	66 1f       	adc	r22, r22
    3516:	77 1f       	adc	r23, r23
    3518:	88 1f       	adc	r24, r24
    351a:	06 94       	lsr	r0
    351c:	a9 f7       	brne	.-22     	; 0x3508 <__ftoa_engine+0xc8>
    351e:	84 91       	lpm	r24, Z+
    3520:	10 95       	com	r17
    3522:	17 70       	andi	r17, 0x07	; 7
    3524:	41 f0       	breq	.+16     	; 0x3536 <__ftoa_engine+0xf6>
    3526:	d6 95       	lsr	r29
    3528:	c7 95       	ror	r28
    352a:	57 95       	ror	r21
    352c:	47 95       	ror	r20
    352e:	f7 94       	ror	r15
    3530:	e7 94       	ror	r14
    3532:	1a 95       	dec	r17
    3534:	c1 f7       	brne	.-16     	; 0x3526 <__ftoa_engine+0xe6>
    3536:	e5 e0       	ldi	r30, 0x05	; 5
    3538:	f1 e0       	ldi	r31, 0x01	; 1
    353a:	68 94       	set
    353c:	15 90       	lpm	r1, Z+
    353e:	15 91       	lpm	r17, Z+
    3540:	35 91       	lpm	r19, Z+
    3542:	65 91       	lpm	r22, Z+
    3544:	95 91       	lpm	r25, Z+
    3546:	05 90       	lpm	r0, Z+
    3548:	7f e2       	ldi	r23, 0x2F	; 47
    354a:	73 95       	inc	r23
    354c:	e1 18       	sub	r14, r1
    354e:	f1 0a       	sbc	r15, r17
    3550:	43 0b       	sbc	r20, r19
    3552:	56 0b       	sbc	r21, r22
    3554:	c9 0b       	sbc	r28, r25
    3556:	d0 09       	sbc	r29, r0
    3558:	c0 f7       	brcc	.-16     	; 0x354a <__ftoa_engine+0x10a>
    355a:	e1 0c       	add	r14, r1
    355c:	f1 1e       	adc	r15, r17
    355e:	43 1f       	adc	r20, r19
    3560:	56 1f       	adc	r21, r22
    3562:	c9 1f       	adc	r28, r25
    3564:	d0 1d       	adc	r29, r0
    3566:	7e f4       	brtc	.+30     	; 0x3586 <__ftoa_engine+0x146>
    3568:	70 33       	cpi	r23, 0x30	; 48
    356a:	11 f4       	brne	.+4      	; 0x3570 <__ftoa_engine+0x130>
    356c:	8a 95       	dec	r24
    356e:	e6 cf       	rjmp	.-52     	; 0x353c <__ftoa_engine+0xfc>
    3570:	e8 94       	clt
    3572:	01 50       	subi	r16, 0x01	; 1
    3574:	30 f0       	brcs	.+12     	; 0x3582 <__ftoa_engine+0x142>
    3576:	08 0f       	add	r16, r24
    3578:	0a f4       	brpl	.+2      	; 0x357c <__ftoa_engine+0x13c>
    357a:	00 27       	eor	r16, r16
    357c:	02 17       	cp	r16, r18
    357e:	08 f4       	brcc	.+2      	; 0x3582 <__ftoa_engine+0x142>
    3580:	20 2f       	mov	r18, r16
    3582:	23 95       	inc	r18
    3584:	02 2f       	mov	r16, r18
    3586:	7a 33       	cpi	r23, 0x3A	; 58
    3588:	28 f0       	brcs	.+10     	; 0x3594 <__ftoa_engine+0x154>
    358a:	79 e3       	ldi	r23, 0x39	; 57
    358c:	7d 93       	st	X+, r23
    358e:	2a 95       	dec	r18
    3590:	e9 f7       	brne	.-6      	; 0x358c <__ftoa_engine+0x14c>
    3592:	10 c0       	rjmp	.+32     	; 0x35b4 <__ftoa_engine+0x174>
    3594:	7d 93       	st	X+, r23
    3596:	2a 95       	dec	r18
    3598:	89 f6       	brne	.-94     	; 0x353c <__ftoa_engine+0xfc>
    359a:	06 94       	lsr	r0
    359c:	97 95       	ror	r25
    359e:	67 95       	ror	r22
    35a0:	37 95       	ror	r19
    35a2:	17 95       	ror	r17
    35a4:	17 94       	ror	r1
    35a6:	e1 18       	sub	r14, r1
    35a8:	f1 0a       	sbc	r15, r17
    35aa:	43 0b       	sbc	r20, r19
    35ac:	56 0b       	sbc	r21, r22
    35ae:	c9 0b       	sbc	r28, r25
    35b0:	d0 09       	sbc	r29, r0
    35b2:	98 f0       	brcs	.+38     	; 0x35da <__ftoa_engine+0x19a>
    35b4:	23 95       	inc	r18
    35b6:	7e 91       	ld	r23, -X
    35b8:	73 95       	inc	r23
    35ba:	7a 33       	cpi	r23, 0x3A	; 58
    35bc:	08 f0       	brcs	.+2      	; 0x35c0 <__ftoa_engine+0x180>
    35be:	70 e3       	ldi	r23, 0x30	; 48
    35c0:	7c 93       	st	X, r23
    35c2:	20 13       	cpse	r18, r16
    35c4:	b8 f7       	brcc	.-18     	; 0x35b4 <__ftoa_engine+0x174>
    35c6:	7e 91       	ld	r23, -X
    35c8:	70 61       	ori	r23, 0x10	; 16
    35ca:	7d 93       	st	X+, r23
    35cc:	30 f0       	brcs	.+12     	; 0x35da <__ftoa_engine+0x19a>
    35ce:	83 95       	inc	r24
    35d0:	71 e3       	ldi	r23, 0x31	; 49
    35d2:	7d 93       	st	X+, r23
    35d4:	70 e3       	ldi	r23, 0x30	; 48
    35d6:	2a 95       	dec	r18
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <__ftoa_engine+0x192>
    35da:	11 24       	eor	r1, r1
    35dc:	ef 90       	pop	r14
    35de:	ff 90       	pop	r15
    35e0:	0f 91       	pop	r16
    35e2:	1f 91       	pop	r17
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	99 27       	eor	r25, r25
    35ea:	87 fd       	sbrc	r24, 7
    35ec:	90 95       	com	r25
    35ee:	08 95       	ret

000035f0 <isspace>:
    35f0:	91 11       	cpse	r25, r1
    35f2:	8a c1       	rjmp	.+788    	; 0x3908 <__ctype_isfalse>
    35f4:	80 32       	cpi	r24, 0x20	; 32
    35f6:	19 f0       	breq	.+6      	; 0x35fe <isspace+0xe>
    35f8:	89 50       	subi	r24, 0x09	; 9
    35fa:	85 50       	subi	r24, 0x05	; 5
    35fc:	d0 f7       	brcc	.-12     	; 0x35f2 <isspace+0x2>
    35fe:	08 95       	ret

00003600 <tolower>:
    3600:	91 11       	cpse	r25, r1
    3602:	08 95       	ret
    3604:	81 54       	subi	r24, 0x41	; 65
    3606:	8a 51       	subi	r24, 0x1A	; 26
    3608:	08 f4       	brcc	.+2      	; 0x360c <tolower+0xc>
    360a:	80 5e       	subi	r24, 0xE0	; 224
    360c:	85 5a       	subi	r24, 0xA5	; 165
    360e:	08 95       	ret

00003610 <strchr_P>:
    3610:	fc 01       	movw	r30, r24
    3612:	05 90       	lpm	r0, Z+
    3614:	06 16       	cp	r0, r22
    3616:	21 f0       	breq	.+8      	; 0x3620 <strchr_P+0x10>
    3618:	00 20       	and	r0, r0
    361a:	d9 f7       	brne	.-10     	; 0x3612 <strchr_P+0x2>
    361c:	c0 01       	movw	r24, r0
    361e:	08 95       	ret
    3620:	31 97       	sbiw	r30, 0x01	; 1
    3622:	cf 01       	movw	r24, r30
    3624:	08 95       	ret

00003626 <strnlen_P>:
    3626:	fc 01       	movw	r30, r24
    3628:	05 90       	lpm	r0, Z+
    362a:	61 50       	subi	r22, 0x01	; 1
    362c:	70 40       	sbci	r23, 0x00	; 0
    362e:	01 10       	cpse	r0, r1
    3630:	d8 f7       	brcc	.-10     	; 0x3628 <strnlen_P+0x2>
    3632:	80 95       	com	r24
    3634:	90 95       	com	r25
    3636:	8e 0f       	add	r24, r30
    3638:	9f 1f       	adc	r25, r31
    363a:	08 95       	ret

0000363c <strnlen>:
    363c:	fc 01       	movw	r30, r24
    363e:	61 50       	subi	r22, 0x01	; 1
    3640:	70 40       	sbci	r23, 0x00	; 0
    3642:	01 90       	ld	r0, Z+
    3644:	01 10       	cpse	r0, r1
    3646:	d8 f7       	brcc	.-10     	; 0x363e <strnlen+0x2>
    3648:	80 95       	com	r24
    364a:	90 95       	com	r25
    364c:	8e 0f       	add	r24, r30
    364e:	9f 1f       	adc	r25, r31
    3650:	08 95       	ret

00003652 <fgetc>:
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	ec 01       	movw	r28, r24
    3658:	4b 81       	ldd	r20, Y+3	; 0x03
    365a:	40 ff       	sbrs	r20, 0
    365c:	1a c0       	rjmp	.+52     	; 0x3692 <fgetc+0x40>
    365e:	46 ff       	sbrs	r20, 6
    3660:	0a c0       	rjmp	.+20     	; 0x3676 <fgetc+0x24>
    3662:	4f 7b       	andi	r20, 0xBF	; 191
    3664:	4b 83       	std	Y+3, r20	; 0x03
    3666:	8e 81       	ldd	r24, Y+6	; 0x06
    3668:	9f 81       	ldd	r25, Y+7	; 0x07
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	9f 83       	std	Y+7, r25	; 0x07
    366e:	8e 83       	std	Y+6, r24	; 0x06
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	28 2f       	mov	r18, r24
    3674:	2b c0       	rjmp	.+86     	; 0x36cc <fgetc+0x7a>
    3676:	42 ff       	sbrs	r20, 2
    3678:	13 c0       	rjmp	.+38     	; 0x36a0 <fgetc+0x4e>
    367a:	e8 81       	ld	r30, Y
    367c:	f9 81       	ldd	r31, Y+1	; 0x01
    367e:	80 81       	ld	r24, Z
    3680:	28 2f       	mov	r18, r24
    3682:	33 27       	eor	r19, r19
    3684:	27 fd       	sbrc	r18, 7
    3686:	30 95       	com	r19
    3688:	21 15       	cp	r18, r1
    368a:	31 05       	cpc	r19, r1
    368c:	29 f4       	brne	.+10     	; 0x3698 <fgetc+0x46>
    368e:	40 62       	ori	r20, 0x20	; 32
    3690:	4b 83       	std	Y+3, r20	; 0x03
    3692:	2f ef       	ldi	r18, 0xFF	; 255
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	1b c0       	rjmp	.+54     	; 0x36ce <fgetc+0x7c>
    3698:	31 96       	adiw	r30, 0x01	; 1
    369a:	f9 83       	std	Y+1, r31	; 0x01
    369c:	e8 83       	st	Y, r30
    369e:	11 c0       	rjmp	.+34     	; 0x36c2 <fgetc+0x70>
    36a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    36a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    36a4:	ce 01       	movw	r24, r28
    36a6:	09 95       	icall
    36a8:	9c 01       	movw	r18, r24
    36aa:	97 ff       	sbrs	r25, 7
    36ac:	0a c0       	rjmp	.+20     	; 0x36c2 <fgetc+0x70>
    36ae:	9b 81       	ldd	r25, Y+3	; 0x03
    36b0:	2f 5f       	subi	r18, 0xFF	; 255
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	11 f0       	breq	.+4      	; 0x36ba <fgetc+0x68>
    36b6:	80 e2       	ldi	r24, 0x20	; 32
    36b8:	01 c0       	rjmp	.+2      	; 0x36bc <fgetc+0x6a>
    36ba:	80 e1       	ldi	r24, 0x10	; 16
    36bc:	89 2b       	or	r24, r25
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	e8 cf       	rjmp	.-48     	; 0x3692 <fgetc+0x40>
    36c2:	8e 81       	ldd	r24, Y+6	; 0x06
    36c4:	9f 81       	ldd	r25, Y+7	; 0x07
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	9f 83       	std	Y+7, r25	; 0x07
    36ca:	8e 83       	std	Y+6, r24	; 0x06
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	c9 01       	movw	r24, r18
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	08 95       	ret

000036d6 <fprintf>:
    36d6:	a0 e0       	ldi	r26, 0x00	; 0
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e1 e7       	ldi	r30, 0x71	; 113
    36dc:	fb e1       	ldi	r31, 0x1B	; 27
    36de:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x20>
    36e2:	9e 01       	movw	r18, r28
    36e4:	27 5f       	subi	r18, 0xF7	; 247
    36e6:	3f 4f       	sbci	r19, 0xFF	; 255
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	6f 81       	ldd	r22, Y+7	; 0x07
    36ee:	78 85       	ldd	r23, Y+8	; 0x08
    36f0:	a9 01       	movw	r20, r18
    36f2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vfprintf>
    36f6:	20 96       	adiw	r28, 0x00	; 0
    36f8:	e2 e0       	ldi	r30, 0x02	; 2
    36fa:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x20>

000036fe <fputc>:
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	8c 01       	movw	r16, r24
    3708:	eb 01       	movw	r28, r22
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	81 ff       	sbrs	r24, 1
    370e:	1b c0       	rjmp	.+54     	; 0x3746 <fputc+0x48>
    3710:	82 ff       	sbrs	r24, 2
    3712:	0d c0       	rjmp	.+26     	; 0x372e <fputc+0x30>
    3714:	2e 81       	ldd	r18, Y+6	; 0x06
    3716:	3f 81       	ldd	r19, Y+7	; 0x07
    3718:	8c 81       	ldd	r24, Y+4	; 0x04
    371a:	9d 81       	ldd	r25, Y+5	; 0x05
    371c:	28 17       	cp	r18, r24
    371e:	39 07       	cpc	r19, r25
    3720:	64 f4       	brge	.+24     	; 0x373a <fputc+0x3c>
    3722:	e8 81       	ld	r30, Y
    3724:	f9 81       	ldd	r31, Y+1	; 0x01
    3726:	01 93       	st	Z+, r16
    3728:	f9 83       	std	Y+1, r31	; 0x01
    372a:	e8 83       	st	Y, r30
    372c:	06 c0       	rjmp	.+12     	; 0x373a <fputc+0x3c>
    372e:	e8 85       	ldd	r30, Y+8	; 0x08
    3730:	f9 85       	ldd	r31, Y+9	; 0x09
    3732:	80 2f       	mov	r24, r16
    3734:	09 95       	icall
    3736:	89 2b       	or	r24, r25
    3738:	31 f4       	brne	.+12     	; 0x3746 <fputc+0x48>
    373a:	8e 81       	ldd	r24, Y+6	; 0x06
    373c:	9f 81       	ldd	r25, Y+7	; 0x07
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	9f 83       	std	Y+7, r25	; 0x07
    3742:	8e 83       	std	Y+6, r24	; 0x06
    3744:	02 c0       	rjmp	.+4      	; 0x374a <fputc+0x4c>
    3746:	0f ef       	ldi	r16, 0xFF	; 255
    3748:	1f ef       	ldi	r17, 0xFF	; 255
    374a:	c8 01       	movw	r24, r16
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	1f 91       	pop	r17
    3752:	0f 91       	pop	r16
    3754:	08 95       	ret

00003756 <fputs>:
    3756:	ef 92       	push	r14
    3758:	ff 92       	push	r15
    375a:	0f 93       	push	r16
    375c:	1f 93       	push	r17
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	7c 01       	movw	r14, r24
    3764:	8b 01       	movw	r16, r22
    3766:	db 01       	movw	r26, r22
    3768:	13 96       	adiw	r26, 0x03	; 3
    376a:	8c 91       	ld	r24, X
    376c:	81 fd       	sbrc	r24, 1
    376e:	03 c0       	rjmp	.+6      	; 0x3776 <fputs+0x20>
    3770:	cf ef       	ldi	r28, 0xFF	; 255
    3772:	df ef       	ldi	r29, 0xFF	; 255
    3774:	13 c0       	rjmp	.+38     	; 0x379c <fputs+0x46>
    3776:	c0 e0       	ldi	r28, 0x00	; 0
    3778:	d0 e0       	ldi	r29, 0x00	; 0
    377a:	0b c0       	rjmp	.+22     	; 0x3792 <fputs+0x3c>
    377c:	d8 01       	movw	r26, r16
    377e:	18 96       	adiw	r26, 0x08	; 8
    3780:	ed 91       	ld	r30, X+
    3782:	fc 91       	ld	r31, X
    3784:	19 97       	sbiw	r26, 0x09	; 9
    3786:	b8 01       	movw	r22, r16
    3788:	09 95       	icall
    378a:	89 2b       	or	r24, r25
    378c:	11 f0       	breq	.+4      	; 0x3792 <fputs+0x3c>
    378e:	cf ef       	ldi	r28, 0xFF	; 255
    3790:	df ef       	ldi	r29, 0xFF	; 255
    3792:	f7 01       	movw	r30, r14
    3794:	81 91       	ld	r24, Z+
    3796:	7f 01       	movw	r14, r30
    3798:	88 23       	and	r24, r24
    379a:	81 f7       	brne	.-32     	; 0x377c <fputs+0x26>
    379c:	ce 01       	movw	r24, r28
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	e6 e0       	ldi	r30, 0x06	; 6
    37a4:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x18>

000037a8 <fscanf>:
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	ea ed       	ldi	r30, 0xDA	; 218
    37ae:	fb e1       	ldi	r31, 0x1B	; 27
    37b0:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x20>
    37b4:	9e 01       	movw	r18, r28
    37b6:	27 5f       	subi	r18, 0xF7	; 247
    37b8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ba:	8d 81       	ldd	r24, Y+5	; 0x05
    37bc:	9e 81       	ldd	r25, Y+6	; 0x06
    37be:	6f 81       	ldd	r22, Y+7	; 0x07
    37c0:	78 85       	ldd	r23, Y+8	; 0x08
    37c2:	a9 01       	movw	r20, r18
    37c4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <vfscanf>
    37c8:	20 96       	adiw	r28, 0x00	; 0
    37ca:	e2 e0       	ldi	r30, 0x02	; 2
    37cc:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x20>

000037d0 <sprintf>:
    37d0:	ae e0       	ldi	r26, 0x0E	; 14
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	ee ee       	ldi	r30, 0xEE	; 238
    37d6:	fb e1       	ldi	r31, 0x1B	; 27
    37d8:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <__prologue_saves__+0x1c>
    37dc:	0d 89       	ldd	r16, Y+21	; 0x15
    37de:	1e 89       	ldd	r17, Y+22	; 0x16
    37e0:	86 e0       	ldi	r24, 0x06	; 6
    37e2:	8c 83       	std	Y+4, r24	; 0x04
    37e4:	1a 83       	std	Y+2, r17	; 0x02
    37e6:	09 83       	std	Y+1, r16	; 0x01
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	9f e7       	ldi	r25, 0x7F	; 127
    37ec:	9e 83       	std	Y+6, r25	; 0x06
    37ee:	8d 83       	std	Y+5, r24	; 0x05
    37f0:	9e 01       	movw	r18, r28
    37f2:	27 5e       	subi	r18, 0xE7	; 231
    37f4:	3f 4f       	sbci	r19, 0xFF	; 255
    37f6:	ce 01       	movw	r24, r28
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	6f 89       	ldd	r22, Y+23	; 0x17
    37fc:	78 8d       	ldd	r23, Y+24	; 0x18
    37fe:	a9 01       	movw	r20, r18
    3800:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <vfprintf>
    3804:	2f 81       	ldd	r18, Y+7	; 0x07
    3806:	38 85       	ldd	r19, Y+8	; 0x08
    3808:	02 0f       	add	r16, r18
    380a:	13 1f       	adc	r17, r19
    380c:	f8 01       	movw	r30, r16
    380e:	10 82       	st	Z, r1
    3810:	2e 96       	adiw	r28, 0x0e	; 14
    3812:	e4 e0       	ldi	r30, 0x04	; 4
    3814:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__epilogue_restores__+0x1c>

00003818 <ungetc>:
    3818:	9c 01       	movw	r18, r24
    381a:	fb 01       	movw	r30, r22
    381c:	83 81       	ldd	r24, Z+3	; 0x03
    381e:	80 ff       	sbrs	r24, 0
    3820:	11 c0       	rjmp	.+34     	; 0x3844 <ungetc+0x2c>
    3822:	86 fd       	sbrc	r24, 6
    3824:	0f c0       	rjmp	.+30     	; 0x3844 <ungetc+0x2c>
    3826:	9f ef       	ldi	r25, 0xFF	; 255
    3828:	2f 3f       	cpi	r18, 0xFF	; 255
    382a:	39 07       	cpc	r19, r25
    382c:	59 f0       	breq	.+22     	; 0x3844 <ungetc+0x2c>
    382e:	22 83       	std	Z+2, r18	; 0x02
    3830:	80 64       	ori	r24, 0x40	; 64
    3832:	8f 7d       	andi	r24, 0xDF	; 223
    3834:	83 83       	std	Z+3, r24	; 0x03
    3836:	86 81       	ldd	r24, Z+6	; 0x06
    3838:	97 81       	ldd	r25, Z+7	; 0x07
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	97 83       	std	Z+7, r25	; 0x07
    383e:	86 83       	std	Z+6, r24	; 0x06
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <ungetc+0x30>
    3844:	2f ef       	ldi	r18, 0xFF	; 255
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	c9 01       	movw	r24, r18
    384a:	08 95       	ret

0000384c <__ultoa_invert>:
    384c:	fa 01       	movw	r30, r20
    384e:	aa 27       	eor	r26, r26
    3850:	28 30       	cpi	r18, 0x08	; 8
    3852:	51 f1       	breq	.+84     	; 0x38a8 <__ultoa_invert+0x5c>
    3854:	20 31       	cpi	r18, 0x10	; 16
    3856:	81 f1       	breq	.+96     	; 0x38b8 <__ultoa_invert+0x6c>
    3858:	e8 94       	clt
    385a:	6f 93       	push	r22
    385c:	6e 7f       	andi	r22, 0xFE	; 254
    385e:	6e 5f       	subi	r22, 0xFE	; 254
    3860:	7f 4f       	sbci	r23, 0xFF	; 255
    3862:	8f 4f       	sbci	r24, 0xFF	; 255
    3864:	9f 4f       	sbci	r25, 0xFF	; 255
    3866:	af 4f       	sbci	r26, 0xFF	; 255
    3868:	b1 e0       	ldi	r27, 0x01	; 1
    386a:	3e d0       	rcall	.+124    	; 0x38e8 <__ultoa_invert+0x9c>
    386c:	b4 e0       	ldi	r27, 0x04	; 4
    386e:	3c d0       	rcall	.+120    	; 0x38e8 <__ultoa_invert+0x9c>
    3870:	67 0f       	add	r22, r23
    3872:	78 1f       	adc	r23, r24
    3874:	89 1f       	adc	r24, r25
    3876:	9a 1f       	adc	r25, r26
    3878:	a1 1d       	adc	r26, r1
    387a:	68 0f       	add	r22, r24
    387c:	79 1f       	adc	r23, r25
    387e:	8a 1f       	adc	r24, r26
    3880:	91 1d       	adc	r25, r1
    3882:	a1 1d       	adc	r26, r1
    3884:	6a 0f       	add	r22, r26
    3886:	71 1d       	adc	r23, r1
    3888:	81 1d       	adc	r24, r1
    388a:	91 1d       	adc	r25, r1
    388c:	a1 1d       	adc	r26, r1
    388e:	20 d0       	rcall	.+64     	; 0x38d0 <__ultoa_invert+0x84>
    3890:	09 f4       	brne	.+2      	; 0x3894 <__ultoa_invert+0x48>
    3892:	68 94       	set
    3894:	3f 91       	pop	r19
    3896:	2a e0       	ldi	r18, 0x0A	; 10
    3898:	26 9f       	mul	r18, r22
    389a:	11 24       	eor	r1, r1
    389c:	30 19       	sub	r19, r0
    389e:	30 5d       	subi	r19, 0xD0	; 208
    38a0:	31 93       	st	Z+, r19
    38a2:	de f6       	brtc	.-74     	; 0x385a <__ultoa_invert+0xe>
    38a4:	cf 01       	movw	r24, r30
    38a6:	08 95       	ret
    38a8:	46 2f       	mov	r20, r22
    38aa:	47 70       	andi	r20, 0x07	; 7
    38ac:	40 5d       	subi	r20, 0xD0	; 208
    38ae:	41 93       	st	Z+, r20
    38b0:	b3 e0       	ldi	r27, 0x03	; 3
    38b2:	0f d0       	rcall	.+30     	; 0x38d2 <__ultoa_invert+0x86>
    38b4:	c9 f7       	brne	.-14     	; 0x38a8 <__ultoa_invert+0x5c>
    38b6:	f6 cf       	rjmp	.-20     	; 0x38a4 <__ultoa_invert+0x58>
    38b8:	46 2f       	mov	r20, r22
    38ba:	4f 70       	andi	r20, 0x0F	; 15
    38bc:	40 5d       	subi	r20, 0xD0	; 208
    38be:	4a 33       	cpi	r20, 0x3A	; 58
    38c0:	18 f0       	brcs	.+6      	; 0x38c8 <__ultoa_invert+0x7c>
    38c2:	49 5d       	subi	r20, 0xD9	; 217
    38c4:	31 fd       	sbrc	r19, 1
    38c6:	40 52       	subi	r20, 0x20	; 32
    38c8:	41 93       	st	Z+, r20
    38ca:	02 d0       	rcall	.+4      	; 0x38d0 <__ultoa_invert+0x84>
    38cc:	a9 f7       	brne	.-22     	; 0x38b8 <__ultoa_invert+0x6c>
    38ce:	ea cf       	rjmp	.-44     	; 0x38a4 <__ultoa_invert+0x58>
    38d0:	b4 e0       	ldi	r27, 0x04	; 4
    38d2:	a6 95       	lsr	r26
    38d4:	97 95       	ror	r25
    38d6:	87 95       	ror	r24
    38d8:	77 95       	ror	r23
    38da:	67 95       	ror	r22
    38dc:	ba 95       	dec	r27
    38de:	c9 f7       	brne	.-14     	; 0x38d2 <__ultoa_invert+0x86>
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	61 05       	cpc	r22, r1
    38e4:	71 05       	cpc	r23, r1
    38e6:	08 95       	ret
    38e8:	9b 01       	movw	r18, r22
    38ea:	ac 01       	movw	r20, r24
    38ec:	0a 2e       	mov	r0, r26
    38ee:	06 94       	lsr	r0
    38f0:	57 95       	ror	r21
    38f2:	47 95       	ror	r20
    38f4:	37 95       	ror	r19
    38f6:	27 95       	ror	r18
    38f8:	ba 95       	dec	r27
    38fa:	c9 f7       	brne	.-14     	; 0x38ee <__ultoa_invert+0xa2>
    38fc:	62 0f       	add	r22, r18
    38fe:	73 1f       	adc	r23, r19
    3900:	84 1f       	adc	r24, r20
    3902:	95 1f       	adc	r25, r21
    3904:	a0 1d       	adc	r26, r0
    3906:	08 95       	ret

00003908 <__ctype_isfalse>:
    3908:	99 27       	eor	r25, r25
    390a:	88 27       	eor	r24, r24

0000390c <__ctype_istrue>:
    390c:	08 95       	ret

0000390e <_exit>:
    390e:	f8 94       	cli

00003910 <__stop_program>:
    3910:	ff cf       	rjmp	.-2      	; 0x3910 <__stop_program>
