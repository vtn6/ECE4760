
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00001954  000019e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800160  00800160  00001a48  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d9  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6a  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035f  00000000  00000000  000026ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b7  00000000  00000000  00002a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c1  00000000  00000000  0000385d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_20>
      54:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000070 <__c.1988>:
      70:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e5       	ldi	r30, 0x54	; 84
      90:	f9 e1       	ldi	r31, 0x19	; 25
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a0 36       	cpi	r26, 0x60	; 96
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 3e       	cpi	r26, 0xE8	; 232
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e7 04 	call	0x9ce	; 0x9ce <main>
      b2:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 92       	push	r2
      c6:	3f 92       	push	r3
      c8:	4f 92       	push	r4
      ca:	5f 92       	push	r5
      cc:	6f 92       	push	r6
      ce:	7f 92       	push	r7
      d0:	8f 92       	push	r8
      d2:	9f 92       	push	r9
      d4:	af 92       	push	r10
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	2f 93       	push	r18
      e6:	3f 93       	push	r19
      e8:	4f 93       	push	r20
      ea:	5f 93       	push	r21
      ec:	6f 93       	push	r22
      ee:	7f 93       	push	r23
      f0:	8f 93       	push	r24
      f2:	9f 93       	push	r25
      f4:	af 93       	push	r26
      f6:	bf 93       	push	r27
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	ef 93       	push	r30
      fe:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     100:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     104:	50 90 8c 02 	lds	r5, 0x028C
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     108:	b0 9b       	sbis	0x16, 0	; 22
     10a:	14 c0       	rjmp	.+40     	; 0x134 <__vector_13+0x7a>
    ++kernel.cycles;
     10c:	80 91 cd 02 	lds	r24, 0x02CD
     110:	90 91 ce 02 	lds	r25, 0x02CE
     114:	a0 91 cf 02 	lds	r26, 0x02CF
     118:	b0 91 d0 02 	lds	r27, 0x02D0
     11c:	01 96       	adiw	r24, 0x01	; 1
     11e:	a1 1d       	adc	r26, r1
     120:	b1 1d       	adc	r27, r1
     122:	80 93 cd 02 	sts	0x02CD, r24
     126:	90 93 ce 02 	sts	0x02CE, r25
     12a:	a0 93 cf 02 	sts	0x02CF, r26
     12e:	b0 93 d0 02 	sts	0x02D0, r27
    TIFR1 |= (1<<TOV1) ;
     132:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     134:	80 91 84 00 	lds	r24, 0x0084
     138:	90 91 85 00 	lds	r25, 0x0085
     13c:	3c 01       	movw	r6, r24
     13e:	88 24       	eor	r8, r8
     140:	99 24       	eor	r9, r9
     142:	80 91 cd 02 	lds	r24, 0x02CD
     146:	90 91 ce 02 	lds	r25, 0x02CE
     14a:	a0 91 cf 02 	lds	r26, 0x02CF
     14e:	b0 91 d0 02 	lds	r27, 0x02D0
     152:	dc 01       	movw	r26, r24
     154:	99 27       	eor	r25, r25
     156:	88 27       	eor	r24, r24
     158:	68 0e       	add	r6, r24
     15a:	79 1e       	adc	r7, r25
     15c:	8a 1e       	adc	r8, r26
     15e:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     160:	40 90 8b 02 	lds	r4, 0x028B
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	ff ef       	ldi	r31, 0xFF	; 255
     16a:	af 2e       	mov	r10, r31
     16c:	ff ef       	ldi	r31, 0xFF	; 255
     16e:	bf 2e       	mov	r11, r31
     170:	ff ef       	ldi	r31, 0xFF	; 255
     172:	cf 2e       	mov	r12, r31
     174:	ff e7       	ldi	r31, 0x7F	; 127
     176:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     178:	eb e0       	ldi	r30, 0x0B	; 11
     17a:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     17c:	33 24       	eor	r3, r3
     17e:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     180:	cb e0       	ldi	r28, 0x0B	; 11
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	43 c0       	rjmp	.+134    	; 0x20c <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     186:	62 9d       	mul	r22, r2
     188:	d0 01       	movw	r26, r0
     18a:	11 24       	eor	r1, r1
     18c:	a3 57       	subi	r26, 0x73	; 115
     18e:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     190:	1a 96       	adiw	r26, 0x0a	; 10
     192:	8c 91       	ld	r24, X
     194:	1a 97       	sbiw	r26, 0x0a	; 10
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	a1 f4       	brne	.+40     	; 0x1c2 <__vector_13+0x108>
      if (t->release <= now) {
     19a:	12 96       	adiw	r26, 0x02	; 2
     19c:	ed 90       	ld	r14, X+
     19e:	fd 90       	ld	r15, X+
     1a0:	0d 91       	ld	r16, X+
     1a2:	1c 91       	ld	r17, X
     1a4:	15 97       	sbiw	r26, 0x05	; 5
     1a6:	6e 14       	cp	r6, r14
     1a8:	7f 04       	cpc	r7, r15
     1aa:	80 06       	cpc	r8, r16
     1ac:	91 06       	cpc	r9, r17
     1ae:	20 f0       	brcs	.+8      	; 0x1b8 <__vector_13+0xfe>
	t->state = READYQ;
     1b0:	1a 96       	adiw	r26, 0x0a	; 10
     1b2:	3c 92       	st	X, r3
     1b4:	1a 97       	sbiw	r26, 0x0a	; 10
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     1b8:	ea 14       	cp	r14, r10
     1ba:	fb 04       	cpc	r15, r11
     1bc:	0c 05       	cpc	r16, r12
     1be:	1d 05       	cpc	r17, r13
     1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__vector_13+0x10c>
     1c2:	86 01       	movw	r16, r12
     1c4:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     1c6:	1a 96       	adiw	r26, 0x0a	; 10
     1c8:	8c 91       	ld	r24, X
     1ca:	1a 97       	sbiw	r26, 0x0a	; 10
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	d9 f4       	brne	.+54     	; 0x206 <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     1d0:	87 2f       	mov	r24, r23
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	8c 9f       	mul	r24, r28
     1d6:	f0 01       	movw	r30, r0
     1d8:	8d 9f       	mul	r24, r29
     1da:	f0 0d       	add	r31, r0
     1dc:	9c 9f       	mul	r25, r28
     1de:	f0 0d       	add	r31, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	e5 57       	subi	r30, 0x75	; 117
     1e4:	fd 4f       	sbci	r31, 0xFD	; 253
     1e6:	16 96       	adiw	r26, 0x06	; 6
     1e8:	2d 91       	ld	r18, X+
     1ea:	3d 91       	ld	r19, X+
     1ec:	4d 91       	ld	r20, X+
     1ee:	5c 91       	ld	r21, X
     1f0:	19 97       	sbiw	r26, 0x09	; 9
     1f2:	80 85       	ldd	r24, Z+8	; 0x08
     1f4:	91 85       	ldd	r25, Z+9	; 0x09
     1f6:	a2 85       	ldd	r26, Z+10	; 0x0a
     1f8:	b3 85       	ldd	r27, Z+11	; 0x0b
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	4a 07       	cpc	r20, r26
     200:	5b 07       	cpc	r21, r27
     202:	08 f4       	brcc	.+2      	; 0x206 <__vector_13+0x14c>
     204:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     206:	6f 5f       	subi	r22, 0xFF	; 255
     208:	57 01       	movw	r10, r14
     20a:	68 01       	movw	r12, r16
     20c:	46 16       	cp	r4, r22
     20e:	08 f0       	brcs	.+2      	; 0x212 <__vector_13+0x158>
     210:	ba cf       	rjmp	.-140    	; 0x186 <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     212:	75 15       	cp	r23, r5
     214:	b1 f0       	breq	.+44     	; 0x242 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     216:	eb e0       	ldi	r30, 0x0B	; 11
     218:	5e 9e       	mul	r5, r30
     21a:	d0 01       	movw	r26, r0
     21c:	11 24       	eor	r1, r1
     21e:	a3 57       	subi	r26, 0x73	; 115
     220:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     222:	8d b7       	in	r24, 0x3d	; 61
     224:	8c 93       	st	X, r24
    t->sph = SPH;
     226:	8e b7       	in	r24, 0x3e	; 62
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     22c:	7e 9f       	mul	r23, r30
     22e:	f0 01       	movw	r30, r0
     230:	11 24       	eor	r1, r1
     232:	e3 57       	subi	r30, 0x73	; 115
     234:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     236:	81 81       	ldd	r24, Z+1	; 0x01
     238:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     23a:	80 81       	ld	r24, Z
     23c:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     23e:	70 93 8c 02 	sts	0x028C, r23

  }

  kernel.nextHit = nextHit;  
     242:	a0 92 d1 02 	sts	0x02D1, r10
     246:	b0 92 d2 02 	sts	0x02D2, r11
     24a:	c0 92 d3 02 	sts	0x02D3, r12
     24e:	d0 92 d4 02 	sts	0x02D4, r13

  now = (kernel.cycles << 16) + TCNT1;
     252:	20 91 84 00 	lds	r18, 0x0084
     256:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	80 91 cd 02 	lds	r24, 0x02CD
     262:	90 91 ce 02 	lds	r25, 0x02CE
     266:	a0 91 cf 02 	lds	r26, 0x02CF
     26a:	b0 91 d0 02 	lds	r27, 0x02D0
     26e:	dc 01       	movw	r26, r24
     270:	99 27       	eor	r25, r25
     272:	88 27       	eor	r24, r24
     274:	28 0f       	add	r18, r24
     276:	39 1f       	adc	r19, r25
     278:	4a 1f       	adc	r20, r26
     27a:	5b 1f       	adc	r21, r27
     27c:	d6 01       	movw	r26, r12
     27e:	c5 01       	movw	r24, r10
     280:	82 1b       	sub	r24, r18
     282:	93 0b       	sbc	r25, r19
     284:	a4 0b       	sbc	r26, r20
     286:	b5 0b       	sbc	r27, r21
     288:	9c 01       	movw	r18, r24
     28a:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	91 05       	cpc	r25, r1
     290:	a1 05       	cpc	r26, r1
     292:	b1 05       	cpc	r27, r1
     294:	24 f4       	brge	.+8      	; 0x29e <__vector_13+0x1e4>
     296:	24 e0       	ldi	r18, 0x04	; 4
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     29e:	80 91 84 00 	lds	r24, 0x0084
     2a2:	90 91 85 00 	lds	r25, 0x0085
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	82 0f       	add	r24, r18
     2ac:	93 1f       	adc	r25, r19
     2ae:	a4 1f       	adc	r26, r20
     2b0:	b5 1f       	adc	r27, r21
     2b2:	80 50       	subi	r24, 0x00	; 0
     2b4:	90 40       	sbci	r25, 0x00	; 0
     2b6:	a1 40       	sbci	r26, 0x01	; 1
     2b8:	b0 40       	sbci	r27, 0x00	; 0
     2ba:	38 f4       	brcc	.+14     	; 0x2ca <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     2bc:	80 91 84 00 	lds	r24, 0x0084
     2c0:	90 91 85 00 	lds	r25, 0x0085
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     2ca:	80 91 84 00 	lds	r24, 0x0084
     2ce:	90 91 85 00 	lds	r25, 0x0085
     2d2:	8c 5f       	subi	r24, 0xFC	; 252
     2d4:	9f 4f       	sbci	r25, 0xFF	; 255
     2d6:	28 f4       	brcc	.+10     	; 0x2e2 <__vector_13+0x228>
    OCR1A = 0x0000;
     2d8:	10 92 89 00 	sts	0x0089, r1
     2dc:	10 92 88 00 	sts	0x0088, r1
     2e0:	06 c0       	rjmp	.+12     	; 0x2ee <__vector_13+0x234>
  } else {
    OCR1A = 4;
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	90 93 89 00 	sts	0x0089, r25
     2ea:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	80 93 6f 00 	sts	0x006F, r24
}
     2f4:	ff 91       	pop	r31
     2f6:	ef 91       	pop	r30
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	bf 91       	pop	r27
     2fe:	af 91       	pop	r26
     300:	9f 91       	pop	r25
     302:	8f 91       	pop	r24
     304:	7f 91       	pop	r23
     306:	6f 91       	pop	r22
     308:	5f 91       	pop	r21
     30a:	4f 91       	pop	r20
     30c:	3f 91       	pop	r19
     30e:	2f 91       	pop	r18
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	7f 90       	pop	r7
     326:	6f 90       	pop	r6
     328:	5f 90       	pop	r5
     32a:	4f 90       	pop	r4
     32c:	3f 90       	pop	r3
     32e:	2f 90       	pop	r2
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     33a:	10 92 85 00 	sts	0x0085, r1
     33e:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     342:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     346:	25 e0       	ldi	r18, 0x05	; 5
     348:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     34c:	22 e0       	ldi	r18, 0x02	; 2
     34e:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	30 e1       	ldi	r19, 0x10	; 16
     356:	28 1b       	sub	r18, r24
     358:	39 0b       	sbc	r19, r25
     35a:	30 93 cc 02 	sts	0x02CC, r19
     35e:	20 93 cb 02 	sts	0x02CB, r18
  kernel.nbrOfTasks = 0;
     362:	10 92 8b 02 	sts	0x028B, r1
  kernel.running = 0;
     366:	10 92 8c 02 	sts	0x028C, r1

  kernel.cycles = 0x0000;
     36a:	10 92 cd 02 	sts	0x02CD, r1
     36e:	10 92 ce 02 	sts	0x02CE, r1
     372:	10 92 cf 02 	sts	0x02CF, r1
     376:	10 92 d0 02 	sts	0x02D0, r1
  kernel.nextHit = 0x7FFFFFFF;
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	9f ef       	ldi	r25, 0xFF	; 255
     37e:	af ef       	ldi	r26, 0xFF	; 255
     380:	bf e7       	ldi	r27, 0x7F	; 127
     382:	80 93 d1 02 	sts	0x02D1, r24
     386:	90 93 d2 02 	sts	0x02D2, r25
     38a:	a0 93 d3 02 	sts	0x02D3, r26
     38e:	b0 93 d4 02 	sts	0x02D4, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     392:	80 93 93 02 	sts	0x0293, r24
     396:	90 93 94 02 	sts	0x0294, r25
     39a:	a0 93 95 02 	sts	0x0295, r26
     39e:	b0 93 96 02 	sts	0x0296, r27
  kernel.tasks[0].release = 0x00000000;
     3a2:	10 92 8f 02 	sts	0x028F, r1
     3a6:	10 92 90 02 	sts	0x0290, r1
     3aa:	10 92 91 02 	sts	0x0291, r1
     3ae:	10 92 92 02 	sts	0x0292, r1

  sei(); /* set enabled interrupts */
     3b2:	78 94       	sei
}
     3b4:	08 95       	ret

000003b6 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     3b6:	8f 92       	push	r8
     3b8:	9f 92       	push	r9
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	49 01       	movw	r8, r18
     3d0:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     3d2:	f8 94       	cli

  ++kernel.nbrOfTasks;
     3d4:	20 91 8b 02 	lds	r18, 0x028B
     3d8:	2f 5f       	subi	r18, 0xFF	; 255
     3da:	20 93 8b 02 	sts	0x028B, r18

  sp = kernel.memptr;
     3de:	c0 91 cb 02 	lds	r28, 0x02CB
     3e2:	d0 91 cc 02 	lds	r29, 0x02CC
  kernel.memptr -= stacksize;  // decrease free mem ptr
     3e6:	9e 01       	movw	r18, r28
     3e8:	26 1b       	sub	r18, r22
     3ea:	37 0b       	sbc	r19, r23
     3ec:	30 93 cc 02 	sts	0x02CC, r19
     3f0:	20 93 cb 02 	sts	0x02CB, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     3f4:	88 83       	st	Y, r24
     3f6:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     3f8:	92 93       	st	-Z, r25
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     3fe:	ce 01       	movw	r24, r28
     400:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     402:	1c 92       	st	X, r1
     404:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     406:	a8 17       	cp	r26, r24
     408:	b9 07       	cpc	r27, r25
     40a:	d9 f7       	brne	.-10     	; 0x402 <trtCreateTask+0x4c>
     40c:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     40e:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     410:	d2 92       	st	-Z, r13
     412:	31 97       	sbiw	r30, 0x01	; 1
     414:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     416:	9e 01       	movw	r18, r28
     418:	23 52       	subi	r18, 0x23	; 35
     41a:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     41c:	1c 92       	st	X, r1
     41e:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     420:	a2 17       	cp	r26, r18
     422:	b3 07       	cpc	r27, r19
     424:	d9 f7       	brne	.-10     	; 0x41c <trtCreateTask+0x66>
     426:	9f 01       	movw	r18, r30
     428:	26 50       	subi	r18, 0x06	; 6
     42a:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     42c:	e0 91 8b 02 	lds	r30, 0x028B
     430:	8b e0       	ldi	r24, 0x0B	; 11
     432:	e8 9f       	mul	r30, r24
     434:	f0 01       	movw	r30, r0
     436:	11 24       	eor	r1, r1
     438:	e3 57       	subi	r30, 0x73	; 115
     43a:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     43c:	82 82       	std	Z+2, r8	; 0x02
     43e:	93 82       	std	Z+3, r9	; 0x03
     440:	a4 82       	std	Z+4, r10	; 0x04
     442:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     444:	e6 82       	std	Z+6, r14	; 0x06
     446:	f7 82       	std	Z+7, r15	; 0x07
     448:	00 87       	std	Z+8, r16	; 0x08
     44a:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     450:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     452:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     454:	0e 94 5d 00 	call	0xba	; 0xba <__vector_13>

}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	bf 90       	pop	r11
     46a:	af 90       	pop	r10
     46c:	9f 90       	pop	r9
     46e:	8f 90       	pop	r8
     470:	08 95       	ret

00000472 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     472:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     474:	eb e8       	ldi	r30, 0x8B	; 139
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	e8 0f       	add	r30, r24
     47a:	f1 1d       	adc	r31, r1
     47c:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     47e:	78 94       	sei
}
     480:	08 95       	ret

00000482 <trtWait>:

void trtWait(uint8_t semnbr) {
     482:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     484:	20 91 8c 02 	lds	r18, 0x028C

  cli(); // disable interrupts
     488:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     48a:	e8 2f       	mov	r30, r24
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ed 53       	subi	r30, 0x3D	; 61
     490:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     492:	80 81       	ld	r24, Z
     494:	88 23       	and	r24, r24
     496:	19 f0       	breq	.+6      	; 0x49e <trtWait+0x1c>
    (*s)--;
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	80 83       	st	Z, r24
     49c:	10 c0       	rjmp	.+32     	; 0x4be <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	8b e0       	ldi	r24, 0x0B	; 11
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	28 9f       	mul	r18, r24
     4a6:	f0 01       	movw	r30, r0
     4a8:	29 9f       	mul	r18, r25
     4aa:	f0 0d       	add	r31, r0
     4ac:	38 9f       	mul	r19, r24
     4ae:	f0 0d       	add	r31, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	e3 57       	subi	r30, 0x73	; 115
     4b4:	fd 4f       	sbci	r31, 0xFD	; 253
     4b6:	4e 5f       	subi	r20, 0xFE	; 254
     4b8:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     4ba:	0e 94 5d 00 	call	0xba	; 0xba <__vector_13>
  }

  sei(); // reenable interrupts
     4be:	78 94       	sei
}
     4c0:	08 95       	ret

000004c2 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     4ca:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     4cc:	00 91 8b 02 	lds	r16, 0x028B
     4d0:	e1 e0       	ldi	r30, 0x01	; 1
     4d2:	4f ef       	ldi	r20, 0xFF	; 255
     4d4:	5f ef       	ldi	r21, 0xFF	; 255
     4d6:	6f ef       	ldi	r22, 0xFF	; 255
     4d8:	7f ef       	ldi	r23, 0xFF	; 255
     4da:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     4dc:	8b e0       	ldi	r24, 0x0B	; 11
     4de:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4e0:	21 2f       	mov	r18, r17
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	2e 5f       	subi	r18, 0xFE	; 254
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	1e c0       	rjmp	.+60     	; 0x526 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     4ea:	ef 9d       	mul	r30, r15
     4ec:	d0 01       	movw	r26, r0
     4ee:	11 24       	eor	r1, r1
     4f0:	a3 57       	subi	r26, 0x73	; 115
     4f2:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     4f4:	1a 96       	adiw	r26, 0x0a	; 10
     4f6:	8c 91       	ld	r24, X
     4f8:	1a 97       	sbiw	r26, 0x0a	; 10
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	69 f4       	brne	.+26     	; 0x51c <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     502:	16 96       	adiw	r26, 0x06	; 6
     504:	8d 91       	ld	r24, X+
     506:	9d 91       	ld	r25, X+
     508:	0d 90       	ld	r0, X+
     50a:	bc 91       	ld	r27, X
     50c:	a0 2d       	mov	r26, r0
     50e:	48 17       	cp	r20, r24
     510:	59 07       	cpc	r21, r25
     512:	6a 07       	cpc	r22, r26
     514:	7b 07       	cpc	r23, r27
     516:	10 f0       	brcs	.+4      	; 0x51c <trtSignal+0x5a>
     518:	fe 2f       	mov	r31, r30
     51a:	02 c0       	rjmp	.+4      	; 0x520 <trtSignal+0x5e>
     51c:	db 01       	movw	r26, r22
     51e:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     520:	ef 5f       	subi	r30, 0xFF	; 255
     522:	ac 01       	movw	r20, r24
     524:	bd 01       	movw	r22, r26
     526:	0e 17       	cp	r16, r30
     528:	00 f7       	brcc	.-64     	; 0x4ea <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     52a:	ff 23       	and	r31, r31
     52c:	41 f4       	brne	.+16     	; 0x53e <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     52e:	e1 2f       	mov	r30, r17
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	e6 57       	subi	r30, 0x76	; 118
     534:	fd 4f       	sbci	r31, 0xFD	; 253
     536:	81 ad       	ldd	r24, Z+57	; 0x39
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	81 af       	std	Z+57, r24	; 0x39
     53c:	11 c0       	rjmp	.+34     	; 0x560 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     53e:	2f 2f       	mov	r18, r31
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	8b e0       	ldi	r24, 0x0B	; 11
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	28 9f       	mul	r18, r24
     548:	f0 01       	movw	r30, r0
     54a:	29 9f       	mul	r18, r25
     54c:	f0 0d       	add	r31, r0
     54e:	38 9f       	mul	r19, r24
     550:	f0 0d       	add	r31, r0
     552:	11 24       	eor	r1, r1
     554:	e5 57       	subi	r30, 0x75	; 117
     556:	fd 4f       	sbci	r31, 0xFD	; 253
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     55c:	0e 94 5d 00 	call	0xba	; 0xba <__vector_13>
  }

  sei(); // reenable interrupts
     560:	78 94       	sei
}
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	08 95       	ret

0000056a <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     56a:	20 91 84 00 	lds	r18, 0x0084
     56e:	30 91 85 00 	lds	r19, 0x0085
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	80 91 cd 02 	lds	r24, 0x02CD
     57a:	90 91 ce 02 	lds	r25, 0x02CE
     57e:	a0 91 cf 02 	lds	r26, 0x02CF
     582:	b0 91 d0 02 	lds	r27, 0x02D0
     586:	dc 01       	movw	r26, r24
     588:	99 27       	eor	r25, r25
     58a:	88 27       	eor	r24, r24
     58c:	28 0f       	add	r18, r24
     58e:	39 1f       	adc	r19, r25
     590:	4a 1f       	adc	r20, r26
     592:	5b 1f       	adc	r21, r27
}
     594:	b9 01       	movw	r22, r18
     596:	ca 01       	movw	r24, r20
     598:	08 95       	ret

0000059a <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     59a:	e0 91 8c 02 	lds	r30, 0x028C
     59e:	ab e0       	ldi	r26, 0x0B	; 11
     5a0:	ea 9f       	mul	r30, r26
     5a2:	f0 01       	movw	r30, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	e3 57       	subi	r30, 0x73	; 115
     5a8:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     5aa:	f8 94       	cli

  t->state = TIMEQ;
     5ac:	a2 e0       	ldi	r26, 0x02	; 2
     5ae:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     5b0:	62 83       	std	Z+2, r22	; 0x02
     5b2:	73 83       	std	Z+3, r23	; 0x03
     5b4:	84 83       	std	Z+4, r24	; 0x04
     5b6:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     5b8:	26 83       	std	Z+6, r18	; 0x06
     5ba:	37 83       	std	Z+7, r19	; 0x07
     5bc:	40 87       	std	Z+8, r20	; 0x08
     5be:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5c0:	0e 94 5d 00 	call	0xba	; 0xba <__vector_13>
}
     5c4:	08 95       	ret

000005c6 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     5c6:	80 91 8c 02 	lds	r24, 0x028C
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2b e0       	ldi	r18, 0x0B	; 11
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	82 9f       	mul	r24, r18
     5d2:	f0 01       	movw	r30, r0
     5d4:	83 9f       	mul	r24, r19
     5d6:	f0 0d       	add	r31, r0
     5d8:	92 9f       	mul	r25, r18
     5da:	f0 0d       	add	r31, r0
     5dc:	11 24       	eor	r1, r1
     5de:	e5 57       	subi	r30, 0x75	; 117
     5e0:	fd 4f       	sbci	r31, 0xFD	; 253
     5e2:	df 01       	movw	r26, r30
     5e4:	14 96       	adiw	r26, 0x04	; 4
     5e6:	64 81       	ldd	r22, Z+4	; 0x04
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	7c 91       	ld	r23, X
     5ec:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     5ee:	12 96       	adiw	r26, 0x02	; 2
     5f0:	8c 91       	ld	r24, X
     5f2:	12 97       	sbiw	r26, 0x02	; 2
     5f4:	13 96       	adiw	r26, 0x03	; 3
     5f6:	9c 91       	ld	r25, X
     5f8:	08 95       	ret

000005fa <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     5fa:	80 91 8c 02 	lds	r24, 0x028C
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2b e0       	ldi	r18, 0x0B	; 11
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	82 9f       	mul	r24, r18
     606:	f0 01       	movw	r30, r0
     608:	83 9f       	mul	r24, r19
     60a:	f0 0d       	add	r31, r0
     60c:	92 9f       	mul	r25, r18
     60e:	f0 0d       	add	r31, r0
     610:	11 24       	eor	r1, r1
     612:	e5 57       	subi	r30, 0x75	; 117
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	df 01       	movw	r26, r30
     618:	18 96       	adiw	r26, 0x08	; 8
     61a:	60 85       	ldd	r22, Z+8	; 0x08
     61c:	11 96       	adiw	r26, 0x01	; 1
     61e:	7c 91       	ld	r23, X
     620:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     622:	12 96       	adiw	r26, 0x02	; 2
     624:	8c 91       	ld	r24, X
     626:	12 97       	sbiw	r26, 0x02	; 2
     628:	13 96       	adiw	r26, 0x03	; 3
     62a:	9c 91       	ld	r25, X
     62c:	08 95       	ret

0000062e <trtTerminate>:

void trtTerminate(void) {

  cli();
     62e:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     630:	80 91 8c 02 	lds	r24, 0x028C
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2b e0       	ldi	r18, 0x0B	; 11
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	82 9f       	mul	r24, r18
     63c:	f0 01       	movw	r30, r0
     63e:	83 9f       	mul	r24, r19
     640:	f0 0d       	add	r31, r0
     642:	92 9f       	mul	r25, r18
     644:	f0 0d       	add	r31, r0
     646:	11 24       	eor	r1, r1
     648:	e5 57       	subi	r30, 0x75	; 117
     64a:	fd 4f       	sbci	r31, 0xFD	; 253
     64c:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     64e:	0e 94 5d 00 	call	0xba	; 0xba <__vector_13>
}
     652:	08 95       	ret

00000654 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     654:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     656:	e8 2f       	mov	r30, r24
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ed 53       	subi	r30, 0x3D	; 61
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     65e:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     660:	88 23       	and	r24, r24
     662:	19 f0       	breq	.+6      	; 0x66a <trtAccept+0x16>
    (*s)--;
     664:	81 50       	subi	r24, 0x01	; 1
     666:	80 83       	st	Z, r24
     668:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     66a:	78 94       	sei
  return temp ;
}
     66c:	08 95       	ret

0000066e <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     66e:	87 e6       	ldi	r24, 0x67	; 103
     670:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     674:	e1 ec       	ldi	r30, 0xC1	; 193
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	88 e1       	ldi	r24, 0x18	; 24
     67a:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     67c:	10 92 b3 01 	sts	0x01B3, r1
     680:	10 92 b2 01 	sts	0x01B2, r1
  tx_out = 0;
     684:	10 92 b5 01 	sts	0x01B5, r1
     688:	10 92 b4 01 	sts	0x01B4, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     68c:	80 81       	ld	r24, Z
     68e:	80 68       	ori	r24, 0x80	; 128
     690:	80 83       	st	Z, r24
}
     692:	08 95       	ret

00000694 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     6aa:	20 91 b2 01 	lds	r18, 0x01B2
     6ae:	30 91 b3 01 	lds	r19, 0x01B3
     6b2:	80 91 b4 01 	lds	r24, 0x01B4
     6b6:	90 91 b5 01 	lds	r25, 0x01B5
     6ba:	28 17       	cp	r18, r24
     6bc:	39 07       	cpc	r19, r25
     6be:	31 f4       	brne	.+12     	; 0x6cc <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     6c0:	80 91 c1 00 	lds	r24, 0x00C1
     6c4:	8f 7d       	andi	r24, 0xDF	; 223
     6c6:	80 93 c1 00 	sts	0x00C1, r24
     6ca:	1d c0       	rjmp	.+58     	; 0x706 <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     6cc:	e0 91 b4 01 	lds	r30, 0x01B4
     6d0:	f0 91 b5 01 	lds	r31, 0x01B5
     6d4:	ea 54       	subi	r30, 0x4A	; 74
     6d6:	fe 4f       	sbci	r31, 0xFE	; 254
     6d8:	80 81       	ld	r24, Z
     6da:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     6de:	80 91 b4 01 	lds	r24, 0x01B4
     6e2:	90 91 b5 01 	lds	r25, 0x01B5
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	90 93 b5 01 	sts	0x01B5, r25
     6ec:	80 93 b4 01 	sts	0x01B4, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     6f0:	80 91 b4 01 	lds	r24, 0x01B4
     6f4:	90 91 b5 01 	lds	r25, 0x01B5
     6f8:	88 3c       	cpi	r24, 0xC8	; 200
     6fa:	91 05       	cpc	r25, r1
     6fc:	21 f4       	brne	.+8      	; 0x706 <__vector_21+0x72>
     6fe:	10 92 b5 01 	sts	0x01B5, r1
     702:	10 92 b4 01 	sts	0x01B4, r1
  }
}
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     71c:	1f 93       	push	r17
     71e:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     720:	8a 30       	cpi	r24, 0x0A	; 10
     722:	19 f4       	brne	.+6      	; 0x72a <uart_putchar+0xe>
     724:	8d e0       	ldi	r24, 0x0D	; 13
     726:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
  char i = tx_in;
     72a:	80 91 b2 01 	lds	r24, 0x01B2
     72e:	90 91 b3 01 	lds	r25, 0x01B3
  i++;
     732:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     734:	88 3c       	cpi	r24, 0xC8	; 200
     736:	09 f4       	brne	.+2      	; 0x73a <uart_putchar+0x1e>
     738:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     73a:	e0 91 b2 01 	lds	r30, 0x01B2
     73e:	f0 91 b3 01 	lds	r31, 0x01B3
     742:	ea 54       	subi	r30, 0x4A	; 74
     744:	fe 4f       	sbci	r31, 0xFE	; 254
     746:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	80 91 b4 01 	lds	r24, 0x01B4
     750:	90 91 b5 01 	lds	r25, 0x01B5
     754:	28 17       	cp	r18, r24
     756:	39 07       	cpc	r19, r25
     758:	c9 f3       	breq	.-14     	; 0x74c <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     75a:	30 93 b3 01 	sts	0x01B3, r19
     75e:	20 93 b2 01 	sts	0x01B2, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     762:	80 91 c1 00 	lds	r24, 0x00C1
     766:	80 62       	ori	r24, 0x20	; 32
     768:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	1f 91       	pop	r17
     772:	08 95       	ret

00000774 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	trt_rx_c = UDR0;
     796:	80 91 c6 00 	lds	r24, 0x00C6
     79a:	80 93 e1 02 	sts	0x02E1, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <trtSignal>
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     7d4:	80 91 60 01 	lds	r24, 0x0160
     7d8:	90 91 61 01 	lds	r25, 0x0161
     7dc:	89 2b       	or	r24, r25
     7de:	09 f0       	breq	.+2      	; 0x7e2 <uart_getchar+0x1c>
     7e0:	a1 c0       	rjmp	.+322    	; 0x924 <uart_getchar+0x15e>
     7e2:	02 e6       	ldi	r16, 0x62	; 98
     7e4:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 41 02 	call	0x482	; 0x482 <trtWait>
	if (UCSR0A & _BV(FE0))
     7ec:	80 91 c0 00 	lds	r24, 0x00C0
     7f0:	84 ff       	sbrs	r24, 4
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <uart_getchar+0x34>
     7f4:	2e ef       	ldi	r18, 0xFE	; 254
     7f6:	3f ef       	ldi	r19, 0xFF	; 255
     7f8:	a9 c0       	rjmp	.+338    	; 0x94c <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     7fa:	80 91 c0 00 	lds	r24, 0x00C0
     7fe:	83 fd       	sbrc	r24, 3
     800:	a3 c0       	rjmp	.+326    	; 0x948 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     802:	90 91 e1 02 	lds	r25, 0x02E1

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     806:	9d 30       	cpi	r25, 0x0D	; 13
     808:	11 f0       	breq	.+4      	; 0x80e <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     80a:	9a 30       	cpi	r25, 0x0A	; 10
     80c:	81 f4       	brne	.+32     	; 0x82e <uart_getchar+0x68>
	  {
	    *cp = c;
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	f8 01       	movw	r30, r16
     812:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     814:	b7 01       	movw	r22, r14
     816:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
	    rxp = b;
     81a:	82 e6       	ldi	r24, 0x62	; 98
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	90 93 61 01 	sts	0x0161, r25
     822:	80 93 60 01 	sts	0x0160, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	0e 94 61 02 	call	0x4c2	; 0x4c2 <trtSignal>
     82c:	7b c0       	rjmp	.+246    	; 0x924 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     82e:	99 30       	cpi	r25, 0x09	; 9
     830:	09 f4       	brne	.+2      	; 0x834 <uart_getchar+0x6e>
     832:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     834:	89 2f       	mov	r24, r25
     836:	80 52       	subi	r24, 0x20	; 32
     838:	8f 35       	cpi	r24, 0x5F	; 95
     83a:	10 f0       	brcs	.+4      	; 0x840 <uart_getchar+0x7a>
     83c:	90 3a       	cpi	r25, 0xA0	; 160
     83e:	70 f0       	brcs	.+28     	; 0x85c <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	01 3b       	cpi	r16, 0xB1	; 177
     844:	1f 07       	cpc	r17, r31
     846:	11 f4       	brne	.+4      	; 0x84c <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     848:	87 e0       	ldi	r24, 0x07	; 7
     84a:	04 c0       	rjmp	.+8      	; 0x854 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     84c:	f8 01       	movw	r30, r16
     84e:	91 93       	st	Z+, r25
     850:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     852:	89 2f       	mov	r24, r25
     854:	b7 01       	movw	r22, r14
     856:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
     85a:	c5 cf       	rjmp	.-118    	; 0x7e6 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     85c:	92 31       	cpi	r25, 0x12	; 18
     85e:	39 f1       	breq	.+78     	; 0x8ae <uart_getchar+0xe8>
     860:	93 31       	cpi	r25, 0x13	; 19
     862:	38 f4       	brcc	.+14     	; 0x872 <uart_getchar+0xac>
     864:	93 30       	cpi	r25, 0x03	; 3
     866:	09 f4       	brne	.+2      	; 0x86a <uart_getchar+0xa4>
     868:	6f c0       	rjmp	.+222    	; 0x948 <uart_getchar+0x182>
     86a:	98 30       	cpi	r25, 0x08	; 8
     86c:	09 f0       	breq	.+2      	; 0x870 <uart_getchar+0xaa>
     86e:	bb cf       	rjmp	.-138    	; 0x7e6 <uart_getchar+0x20>
     870:	09 c0       	rjmp	.+18     	; 0x884 <uart_getchar+0xbe>
     872:	97 31       	cpi	r25, 0x17	; 23
     874:	09 f4       	brne	.+2      	; 0x878 <uart_getchar+0xb2>
     876:	4b c0       	rjmp	.+150    	; 0x90e <uart_getchar+0x148>
     878:	9f 37       	cpi	r25, 0x7F	; 127
     87a:	21 f0       	breq	.+8      	; 0x884 <uart_getchar+0xbe>
     87c:	95 31       	cpi	r25, 0x15	; 21
     87e:	09 f0       	breq	.+2      	; 0x882 <uart_getchar+0xbc>
     880:	b2 cf       	rjmp	.-156    	; 0x7e6 <uart_getchar+0x20>
     882:	32 c0       	rjmp	.+100    	; 0x8e8 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	02 36       	cpi	r16, 0x62	; 98
     888:	1f 07       	cpc	r17, r31
     88a:	09 f0       	breq	.+2      	; 0x88e <uart_getchar+0xc8>
     88c:	08 f4       	brcc	.+2      	; 0x890 <uart_getchar+0xca>
     88e:	ab cf       	rjmp	.-170    	; 0x7e6 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	b7 01       	movw	r22, r14
     894:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar(' ', stream);
     898:	80 e2       	ldi	r24, 0x20	; 32
     89a:	b7 01       	movw	r22, r14
     89c:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar('\b', stream);
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	b7 01       	movw	r22, r14
     8a4:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		cp--;
     8a8:	01 50       	subi	r16, 0x01	; 1
     8aa:	10 40       	sbci	r17, 0x00	; 0
     8ac:	9c cf       	rjmp	.-200    	; 0x7e6 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
     8b6:	c2 e6       	ldi	r28, 0x62	; 98
     8b8:	d1 e0       	ldi	r29, 0x01	; 1
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     8bc:	89 91       	ld	r24, Y+
     8be:	b7 01       	movw	r22, r14
     8c0:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     8c4:	c0 17       	cp	r28, r16
     8c6:	d1 07       	cpc	r29, r17
     8c8:	c8 f3       	brcs	.-14     	; 0x8bc <uart_getchar+0xf6>
     8ca:	8d cf       	rjmp	.-230    	; 0x7e6 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	b7 01       	movw	r22, r14
     8d0:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar(' ', stream);
     8d4:	80 e2       	ldi	r24, 0x20	; 32
     8d6:	b7 01       	movw	r22, r14
     8d8:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar('\b', stream);
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		cp--;
     8e4:	01 50       	subi	r16, 0x01	; 1
     8e6:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	02 36       	cpi	r16, 0x62	; 98
     8ec:	18 07       	cpc	r17, r24
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <uart_getchar+0x12c>
     8f0:	68 f7       	brcc	.-38     	; 0x8cc <uart_getchar+0x106>
     8f2:	79 cf       	rjmp	.-270    	; 0x7e6 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	b7 01       	movw	r22, r14
     8f8:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar(' ', stream);
     8fc:	80 e2       	ldi	r24, 0x20	; 32
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
		uart_putchar('\b', stream);
     904:	88 e0       	ldi	r24, 0x08	; 8
     906:	b7 01       	movw	r22, r14
     908:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_putchar>
     90c:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     90e:	e1 e0       	ldi	r30, 0x01	; 1
     910:	02 36       	cpi	r16, 0x62	; 98
     912:	1e 07       	cpc	r17, r30
     914:	09 f0       	breq	.+2      	; 0x918 <uart_getchar+0x152>
     916:	08 f4       	brcc	.+2      	; 0x91a <uart_getchar+0x154>
     918:	66 cf       	rjmp	.-308    	; 0x7e6 <uart_getchar+0x20>
     91a:	e8 01       	movw	r28, r16
     91c:	8a 91       	ld	r24, -Y
     91e:	80 32       	cpi	r24, 0x20	; 32
     920:	49 f7       	brne	.-46     	; 0x8f4 <uart_getchar+0x12e>
     922:	61 cf       	rjmp	.-318    	; 0x7e6 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     924:	e0 91 60 01 	lds	r30, 0x0160
     928:	f0 91 61 01 	lds	r31, 0x0161
     92c:	81 91       	ld	r24, Z+
     92e:	f0 93 61 01 	sts	0x0161, r31
     932:	e0 93 60 01 	sts	0x0160, r30
  if (c == '\n')
     936:	8a 30       	cpi	r24, 0x0A	; 10
     938:	21 f4       	brne	.+8      	; 0x942 <uart_getchar+0x17c>
    rxp = 0;
     93a:	10 92 61 01 	sts	0x0161, r1
     93e:	10 92 60 01 	sts	0x0160, r1

  return c;
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <uart_getchar+0x186>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	3f ef       	ldi	r19, 0xFF	; 255
}
     94c:	c9 01       	movw	r24, r18
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	08 95       	ret

0000095c <spoiler>:
	}
  }

// --- spoiler ---------------------------------------
void spoiler(void* args) 
{
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     968:	c0 e9       	ldi	r28, 0x90	; 144
     96a:	d1 e0       	ldi	r29, 0x01	; 1
     96c:	88 ee       	ldi	r24, 0xE8	; 232
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	fe 01       	movw	r30, r28
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <spoiler+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     976:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     978:	d9 f7       	brne	.-10     	; 0x970 <spoiler+0x14>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     97a:	20 91 cd 02 	lds	r18, 0x02CD
     97e:	30 91 ce 02 	lds	r19, 0x02CE
     982:	40 91 cf 02 	lds	r20, 0x02CF
     986:	50 91 d0 02 	lds	r21, 0x02D0
     98a:	a9 01       	movw	r20, r18
     98c:	33 27       	eor	r19, r19
     98e:	22 27       	eor	r18, r18
     990:	60 91 84 00 	lds	r22, 0x0084
     994:	70 91 85 00 	lds	r23, 0x0085
	while(1)
	{
		_delay_ms(100);
		rel = trtCurrentTime() + SECONDS2TICKS(0.1);
		dead = trtCurrentTime() + SECONDS2TICKS(0.2);
		trtSleepUntil(rel, dead);
     998:	e0 90 84 00 	lds	r14, 0x0084
     99c:	f0 90 85 00 	lds	r15, 0x0085
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	62 0f       	add	r22, r18
     9a6:	73 1f       	adc	r23, r19
     9a8:	84 1f       	adc	r24, r20
     9aa:	95 1f       	adc	r25, r21
     9ac:	66 5e       	subi	r22, 0xE6	; 230
     9ae:	79 4f       	sbci	r23, 0xF9	; 249
     9b0:	8f 4f       	sbci	r24, 0xFF	; 255
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	2e 0d       	add	r18, r14
     9ba:	3f 1d       	adc	r19, r15
     9bc:	40 1f       	adc	r20, r16
     9be:	51 1f       	adc	r21, r17
     9c0:	2b 5c       	subi	r18, 0xCB	; 203
     9c2:	33 4f       	sbci	r19, 0xF3	; 243
     9c4:	4f 4f       	sbci	r20, 0xFF	; 255
     9c6:	5f 4f       	sbci	r21, 0xFF	; 255
     9c8:	0e 94 cd 02 	call	0x59a	; 0x59a <trtSleepUntil>
     9cc:	cf cf       	rjmp	.-98     	; 0x96c <spoiler+0x10>

000009ce <main>:
		k_d = val;
	else
		fprintf(stdout, "Command %c unrecognized\n", cmd);
}

int main(void) {
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17


  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     9da:	0e 94 37 03 	call	0x66e	; 0x66e <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     9de:	62 e5       	ldi	r22, 0x52	; 82
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	70 93 e7 02 	sts	0x02E7, r23
     9e6:	60 93 e6 02 	sts	0x02E6, r22
     9ea:	70 93 e3 02 	sts	0x02E3, r23
     9ee:	60 93 e2 02 	sts	0x02E2, r22
     9f2:	70 93 e5 02 	sts	0x02E5, r23
     9f6:	60 93 e4 02 	sts	0x02E4, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <fputs>
  
  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     a02:	80 e5       	ldi	r24, 0x50	; 80
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 9d 01 	call	0x33a	; 0x33a <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a0a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a0c:	10 92 c4 02 	sts	0x02C4, r1
  
  sei(); // set enabled interrupts;
     a10:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a12:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a14:	10 92 c5 02 	sts	0x02C5, r1
  
  sei(); // set enabled interrupts;
     a18:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a1a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 c6 02 	sts	0x02C6, r24
  
  sei(); // set enabled interrupts;
     a22:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variables

 // --- creat tasks  ----------------
  trtCreateTask(buttonComm, 200, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     a24:	87 ea       	ldi	r24, 0xA7	; 167
     a26:	95 e0       	ldi	r25, 0x05	; 5
     a28:	68 ec       	ldi	r22, 0xC8	; 200
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	2d e0       	ldi	r18, 0x0D	; 13
     a2e:	33 e0       	ldi	r19, 0x03	; 3
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	bd e0       	ldi	r27, 0x0D	; 13
     a36:	eb 2e       	mov	r14, r27
     a38:	b3 e0       	ldi	r27, 0x03	; 3
     a3a:	fb 2e       	mov	r15, r27
     a3c:	01 2d       	mov	r16, r1
     a3e:	11 2d       	mov	r17, r1
     a40:	ae e7       	ldi	r26, 0x7E	; 126
     a42:	ca 2e       	mov	r12, r26
     a44:	a2 e0       	ldi	r26, 0x02	; 2
     a46:	da 2e       	mov	r13, r26
     a48:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtCreateTask>
  trtCreateTask(serialComm, 200, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     a4c:	86 e2       	ldi	r24, 0x26	; 38
     a4e:	96 e0       	ldi	r25, 0x06	; 6
     a50:	68 ec       	ldi	r22, 0xC8	; 200
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	2a e1       	ldi	r18, 0x1A	; 26
     a56:	36 e0       	ldi	r19, 0x06	; 6
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	fa e1       	ldi	r31, 0x1A	; 26
     a5e:	ef 2e       	mov	r14, r31
     a60:	f6 e0       	ldi	r31, 0x06	; 6
     a62:	ff 2e       	mov	r15, r31
     a64:	01 2d       	mov	r16, r1
     a66:	11 2d       	mov	r17, r1
     a68:	e0 e8       	ldi	r30, 0x80	; 128
     a6a:	ce 2e       	mov	r12, r30
     a6c:	e2 e0       	ldi	r30, 0x02	; 2
     a6e:	de 2e       	mov	r13, r30
     a70:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtCreateTask>
  trtCreateTask(spoiler, 200, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     a74:	8e ea       	ldi	r24, 0xAE	; 174
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	68 ec       	ldi	r22, 0xC8	; 200
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	2a e1       	ldi	r18, 0x1A	; 26
     a7e:	36 e0       	ldi	r19, 0x06	; 6
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0e 94 db 01 	call	0x3b6	; 0x3b6 <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	81 7f       	andi	r24, 0xF1	; 241
     a8c:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
     a94:	88 95       	sleep
     a96:	fe cf       	rjmp	.-4      	; 0xa94 <main+0xc6>

00000a98 <setParam>:
		trtSleepUntil(rel, dead);
	}
}
// --- Main Program ----------------------------------

void setParam(uint8_t cmd, float val){
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	7a 01       	movw	r14, r20
     aa2:	8b 01       	movw	r16, r22
	cmd = tolower(cmd);
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 94 06 	call	0xd28	; 0xd28 <tolower>
     aaa:	28 2f       	mov	r18, r24
	if (cmd == 's')
     aac:	83 37       	cpi	r24, 0x73	; 115
     aae:	49 f4       	brne	.+18     	; 0xac2 <setParam+0x2a>
		omegaRef = val;
     ab0:	e0 92 d9 02 	sts	0x02D9, r14
     ab4:	f0 92 da 02 	sts	0x02DA, r15
     ab8:	00 93 db 02 	sts	0x02DB, r16
     abc:	10 93 dc 02 	sts	0x02DC, r17
     ac0:	41 c0       	rjmp	.+130    	; 0xb44 <setParam+0xac>
	else if (cmd == 'p')
     ac2:	80 37       	cpi	r24, 0x70	; 112
     ac4:	49 f4       	brne	.+18     	; 0xad8 <setParam+0x40>
		k_p = val;		
     ac6:	e0 92 dd 02 	sts	0x02DD, r14
     aca:	f0 92 de 02 	sts	0x02DE, r15
     ace:	00 93 df 02 	sts	0x02DF, r16
     ad2:	10 93 e0 02 	sts	0x02E0, r17
     ad6:	36 c0       	rjmp	.+108    	; 0xb44 <setParam+0xac>
	else if (cmd == 'i')		
     ad8:	89 36       	cpi	r24, 0x69	; 105
     ada:	49 f4       	brne	.+18     	; 0xaee <setParam+0x56>
		k_i = val;
     adc:	e0 92 87 02 	sts	0x0287, r14
     ae0:	f0 92 88 02 	sts	0x0288, r15
     ae4:	00 93 89 02 	sts	0x0289, r16
     ae8:	10 93 8a 02 	sts	0x028A, r17
     aec:	2b c0       	rjmp	.+86     	; 0xb44 <setParam+0xac>
	else if (cmd == 'd')
     aee:	84 36       	cpi	r24, 0x64	; 100
     af0:	49 f4       	brne	.+18     	; 0xb04 <setParam+0x6c>
		k_d = val;
     af2:	e0 92 82 02 	sts	0x0282, r14
     af6:	f0 92 83 02 	sts	0x0283, r15
     afa:	00 93 84 02 	sts	0x0284, r16
     afe:	10 93 85 02 	sts	0x0285, r17
     b02:	20 c0       	rjmp	.+64     	; 0xb44 <setParam+0xac>
	else
		fprintf(stdout, "Command %c unrecognized\n", cmd);
     b04:	00 d0       	rcall	.+0      	; 0xb06 <setParam+0x6e>
     b06:	00 d0       	rcall	.+0      	; 0xb08 <setParam+0x70>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <setParam+0x72>
     b0a:	ed b7       	in	r30, 0x3d	; 61
     b0c:	fe b7       	in	r31, 0x3e	; 62
     b0e:	31 96       	adiw	r30, 0x01	; 1
     b10:	80 91 e4 02 	lds	r24, 0x02E4
     b14:	90 91 e5 02 	lds	r25, 0x02E5
     b18:	ad b7       	in	r26, 0x3d	; 61
     b1a:	be b7       	in	r27, 0x3e	; 62
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	9c 93       	st	X, r25
     b20:	8e 93       	st	-X, r24
     b22:	11 97       	sbiw	r26, 0x01	; 1
     b24:	84 e1       	ldi	r24, 0x14	; 20
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	93 83       	std	Z+3, r25	; 0x03
     b2a:	82 83       	std	Z+2, r24	; 0x02
     b2c:	24 83       	std	Z+4, r18	; 0x04
     b2e:	15 82       	std	Z+5, r1	; 0x05
     b30:	0e 94 9c 06 	call	0xd38	; 0xd38 <fprintf>
     b34:	8d b7       	in	r24, 0x3d	; 61
     b36:	9e b7       	in	r25, 0x3e	; 62
     b38:	06 96       	adiw	r24, 0x06	; 6
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	9e bf       	out	0x3e, r25	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	8d bf       	out	0x3d, r24	; 61
}
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	08 95       	ret

00000b4e <buttonComm>:
//function signatures
void setParam(uint8_t, float); //Helper method for setting PID parameters
//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void buttonComm(void* args) 
  {	
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
  	uint32_t rel, dead ;
	uint8_t sw, sw_num ;
	uint8_t sw_state ;

	sw_state = 0 ; // no buttons pushed
	DDRC = 0xff;    // led connections
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	87 b9       	out	0x07, r24	; 7
  	PORTC = 0xff;
     b62:	88 b9       	out	0x08, r24	; 8
	DDRA = 0x01 ;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	81 b9       	out	0x01, r24	; 1
     b68:	dd 24       	eor	r13, r13
	

	while(1)
	{
		PORTA =  PORTA ^ 0x01 ;
     b6a:	cc 24       	eor	r12, r12
     b6c:	c3 94       	inc	r12
			while(sw>1)
			{
				sw = sw>>1; 
				sw_num++ ;
			}
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     b6e:	cd e2       	ldi	r28, 0x2D	; 45
     b70:	d1 e0       	ldi	r29, 0x01	; 1
	DDRA = 0x01 ;
	

	while(1)
	{
		PORTA =  PORTA ^ 0x01 ;
     b72:	82 b1       	in	r24, 0x02	; 2
     b74:	8c 25       	eor	r24, r12
     b76:	82 b9       	out	0x02, r24	; 2
		// read the buttons
		// if a button is pushed,
		// latch on the corresponding LED
		sw = ~PINB ;
     b78:	13 b1       	in	r17, 0x03	; 3
     b7a:	10 95       	com	r17
		// update shared leds
		trtWait(SEM_SHARED) ;
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	0e 94 41 02 	call	0x482	; 0x482 <trtWait>
		led = led | sw ;
     b82:	80 91 86 02 	lds	r24, 0x0286
     b86:	81 2b       	or	r24, r17
     b88:	80 93 86 02 	sts	0x0286, r24
		PORTC = ~led ;
     b8c:	80 95       	com	r24
     b8e:	88 b9       	out	0x08, r24	; 8
		trtSignal(SEM_SHARED);
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	0e 94 61 02 	call	0x4c2	; 0x4c2 <trtSignal>
		
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
     b96:	dd 20       	and	r13, r13
     b98:	49 f5       	brne	.+82     	; 0xbec <buttonComm+0x9e>
     b9a:	11 23       	and	r17, r17
     b9c:	69 f1       	breq	.+90     	; 0xbf8 <buttonComm+0xaa>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <buttonComm+0x58>
		{
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
			{
				sw = sw>>1; 
     ba2:	16 95       	lsr	r17
				sw_num++ ;
     ba4:	2f 5f       	subi	r18, 0xFF	; 255
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
		{
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
     ba6:	11 30       	cpi	r17, 0x01	; 1
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <buttonComm+0x54>
			{
				sw = sw>>1; 
				sw_num++ ;
			}
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     baa:	00 d0       	rcall	.+0      	; 0xbac <buttonComm+0x5e>
     bac:	00 d0       	rcall	.+0      	; 0xbae <buttonComm+0x60>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <buttonComm+0x62>
     bb0:	ed b7       	in	r30, 0x3d	; 61
     bb2:	fe b7       	in	r31, 0x3e	; 62
     bb4:	31 96       	adiw	r30, 0x01	; 1
     bb6:	80 91 e4 02 	lds	r24, 0x02E4
     bba:	90 91 e5 02 	lds	r25, 0x02E5
     bbe:	ad b7       	in	r26, 0x3d	; 61
     bc0:	be b7       	in	r27, 0x3e	; 62
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	9c 93       	st	X, r25
     bc6:	8e 93       	st	-X, r24
     bc8:	11 97       	sbiw	r26, 0x01	; 1
     bca:	d3 83       	std	Z+3, r29	; 0x03
     bcc:	c2 83       	std	Z+2, r28	; 0x02
     bce:	24 83       	std	Z+4, r18	; 0x04
     bd0:	15 82       	std	Z+5, r1	; 0x05
     bd2:	0e 94 9c 06 	call	0xd38	; 0xd38 <fprintf>
     bd6:	dd 24       	eor	r13, r13
     bd8:	d3 94       	inc	r13
     bda:	8d b7       	in	r24, 0x3d	; 61
     bdc:	9e b7       	in	r25, 0x3e	; 62
     bde:	06 96       	adiw	r24, 0x06	; 6
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	9e bf       	out	0x3e, r25	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	8d bf       	out	0x3d, r24	; 61
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <buttonComm+0xaa>
			sw_state = 1 ;
		}
		if (sw_state == 1 && sw==0) // button release?
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	d9 16       	cp	r13, r25
     bf0:	19 f4       	brne	.+6      	; 0xbf8 <buttonComm+0xaa>
     bf2:	11 23       	and	r17, r17
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <buttonComm+0xaa>
     bf6:	dd 24       	eor	r13, r13
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     bf8:	20 91 cd 02 	lds	r18, 0x02CD
     bfc:	30 91 ce 02 	lds	r19, 0x02CE
     c00:	40 91 cf 02 	lds	r20, 0x02CF
     c04:	50 91 d0 02 	lds	r21, 0x02D0
     c08:	a9 01       	movw	r20, r18
     c0a:	33 27       	eor	r19, r19
     c0c:	22 27       	eor	r18, r18
     c0e:	60 91 84 00 	lds	r22, 0x0084
     c12:	70 91 85 00 	lds	r23, 0x0085
		// debouncer works well with 50 mSec sleep
		

	    rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.01);
	    trtSleepUntil(rel, dead);
     c16:	e0 90 84 00 	lds	r14, 0x0084
     c1a:	f0 90 85 00 	lds	r15, 0x0085
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	62 0f       	add	r22, r18
     c24:	73 1f       	adc	r23, r19
     c26:	84 1f       	adc	r24, r20
     c28:	95 1f       	adc	r25, r21
     c2a:	64 56       	subi	r22, 0x64	; 100
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	8f 4f       	sbci	r24, 0xFF	; 255
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	00 e0       	ldi	r16, 0x00	; 0
     c34:	10 e0       	ldi	r17, 0x00	; 0
     c36:	2e 0d       	add	r18, r14
     c38:	3f 1d       	adc	r19, r15
     c3a:	40 1f       	adc	r20, r16
     c3c:	51 1f       	adc	r21, r17
     c3e:	24 56       	subi	r18, 0x64	; 100
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	4f 4f       	sbci	r20, 0xFF	; 255
     c44:	5f 4f       	sbci	r21, 0xFF	; 255
     c46:	0e 94 cd 02 	call	0x59a	; 0x59a <trtSleepUntil>
     c4a:	93 cf       	rjmp	.-218    	; 0xb72 <buttonComm+0x24>

00000c4c <serialComm>:


//read the commands from the user
// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  {
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <serialComm+0x16>
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		int  valpoo;
		fscanf(stdin, "%c %d", &cmd0, &valpoo);
     c68:	81 e4       	ldi	r24, 0x41	; 65
     c6a:	a8 2e       	mov	r10, r24
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	b8 2e       	mov	r11, r24
     c70:	6e 01       	movw	r12, r28
     c72:	08 94       	sec
     c74:	c1 1c       	adc	r12, r1
     c76:	d1 1c       	adc	r13, r1
     c78:	02 e0       	ldi	r16, 0x02	; 2
     c7a:	e0 2e       	mov	r14, r16
     c7c:	f1 2c       	mov	r15, r1
     c7e:	ec 0e       	add	r14, r28
     c80:	fd 1e       	adc	r15, r29
		//trtWait(SEM_STRING_DONE);

		if (cmd0 == 'a')
			fprintf(stdout, "OCAML: %d\n", valpoo);
     c82:	07 e4       	ldi	r16, 0x47	; 71
     c84:	11 e0       	ldi	r17, 0x01	; 1
		// 									set the proportional gain to val1
		//									set the integral gain to val2
		//									set the differential gain to val3
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
     c86:	60 91 e4 02 	lds	r22, 0x02E4
     c8a:	70 91 e5 02 	lds	r23, 0x02E5
     c8e:	8e e3       	ldi	r24, 0x3E	; 62
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		int  valpoo;
		fscanf(stdin, "%c %d", &cmd0, &valpoo);
     c96:	8d b7       	in	r24, 0x3d	; 61
     c98:	9e b7       	in	r25, 0x3e	; 62
     c9a:	08 97       	sbiw	r24, 0x08	; 8
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	9e bf       	out	0x3e, r25	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	8d bf       	out	0x3d, r24	; 61
     ca6:	ed b7       	in	r30, 0x3d	; 61
     ca8:	fe b7       	in	r31, 0x3e	; 62
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	80 91 e2 02 	lds	r24, 0x02E2
     cb0:	90 91 e3 02 	lds	r25, 0x02E3
     cb4:	ad b7       	in	r26, 0x3d	; 61
     cb6:	be b7       	in	r27, 0x3e	; 62
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	b3 82       	std	Z+3, r11	; 0x03
     cc2:	a2 82       	std	Z+2, r10	; 0x02
     cc4:	d5 82       	std	Z+5, r13	; 0x05
     cc6:	c4 82       	std	Z+4, r12	; 0x04
     cc8:	f7 82       	std	Z+7, r15	; 0x07
     cca:	e6 82       	std	Z+6, r14	; 0x06
     ccc:	0e 94 05 07 	call	0xe0a	; 0xe0a <fscanf>
		//trtWait(SEM_STRING_DONE);

		if (cmd0 == 'a')
     cd0:	8d b7       	in	r24, 0x3d	; 61
     cd2:	9e b7       	in	r25, 0x3e	; 62
     cd4:	08 96       	adiw	r24, 0x08	; 8
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	9e bf       	out	0x3e, r25	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	8d bf       	out	0x3d, r24	; 61
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	81 36       	cpi	r24, 0x61	; 97
     ce4:	81 f6       	brne	.-96     	; 0xc86 <serialComm+0x3a>
			fprintf(stdout, "OCAML: %d\n", valpoo);
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <serialComm+0x9c>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <serialComm+0x9e>
     cea:	00 d0       	rcall	.+0      	; 0xcec <serialComm+0xa0>
     cec:	ed b7       	in	r30, 0x3d	; 61
     cee:	fe b7       	in	r31, 0x3e	; 62
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	80 91 e4 02 	lds	r24, 0x02E4
     cf6:	90 91 e5 02 	lds	r25, 0x02E5
     cfa:	ad b7       	in	r26, 0x3d	; 61
     cfc:	be b7       	in	r27, 0x3e	; 62
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	13 83       	std	Z+3, r17	; 0x03
     d08:	02 83       	std	Z+2, r16	; 0x02
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	95 83       	std	Z+5, r25	; 0x05
     d10:	84 83       	std	Z+4, r24	; 0x04
     d12:	0e 94 9c 06 	call	0xd38	; 0xd38 <fprintf>
     d16:	8d b7       	in	r24, 0x3d	; 61
     d18:	9e b7       	in	r25, 0x3e	; 62
     d1a:	06 96       	adiw	r24, 0x06	; 6
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	9e bf       	out	0x3e, r25	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	8d bf       	out	0x3d, r24	; 61
     d26:	af cf       	rjmp	.-162    	; 0xc86 <serialComm+0x3a>

00000d28 <tolower>:
     d28:	91 11       	cpse	r25, r1
     d2a:	08 95       	ret
     d2c:	81 54       	subi	r24, 0x41	; 65
     d2e:	8a 51       	subi	r24, 0x1A	; 26
     d30:	08 f4       	brcc	.+2      	; 0xd34 <tolower+0xc>
     d32:	80 5e       	subi	r24, 0xE0	; 224
     d34:	85 5a       	subi	r24, 0xA5	; 165
     d36:	08 95       	ret

00000d38 <fprintf>:
     d38:	a0 e0       	ldi	r26, 0x00	; 0
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e2 ea       	ldi	r30, 0xA2	; 162
     d3e:	f6 e0       	ldi	r31, 0x06	; 6
     d40:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__prologue_saves__+0x20>
     d44:	9e 01       	movw	r18, r28
     d46:	27 5f       	subi	r18, 0xF7	; 247
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	6f 81       	ldd	r22, Y+7	; 0x07
     d50:	78 85       	ldd	r23, Y+8	; 0x08
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 19 07 	call	0xe32	; 0xe32 <vfprintf>
     d58:	20 96       	adiw	r28, 0x00	; 0
     d5a:	e2 e0       	ldi	r30, 0x02	; 2
     d5c:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__epilogue_restores__+0x20>

00000d60 <fputc>:
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	8c 01       	movw	r16, r24
     d6a:	eb 01       	movw	r28, r22
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	81 ff       	sbrs	r24, 1
     d70:	1b c0       	rjmp	.+54     	; 0xda8 <fputc+0x48>
     d72:	82 ff       	sbrs	r24, 2
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <fputc+0x30>
     d76:	2e 81       	ldd	r18, Y+6	; 0x06
     d78:	3f 81       	ldd	r19, Y+7	; 0x07
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	64 f4       	brge	.+24     	; 0xd9c <fputc+0x3c>
     d84:	e8 81       	ld	r30, Y
     d86:	f9 81       	ldd	r31, Y+1	; 0x01
     d88:	01 93       	st	Z+, r16
     d8a:	f9 83       	std	Y+1, r31	; 0x01
     d8c:	e8 83       	st	Y, r30
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <fputc+0x3c>
     d90:	e8 85       	ldd	r30, Y+8	; 0x08
     d92:	f9 85       	ldd	r31, Y+9	; 0x09
     d94:	80 2f       	mov	r24, r16
     d96:	09 95       	icall
     d98:	89 2b       	or	r24, r25
     d9a:	31 f4       	brne	.+12     	; 0xda8 <fputc+0x48>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9f 83       	std	Y+7, r25	; 0x07
     da4:	8e 83       	std	Y+6, r24	; 0x06
     da6:	02 c0       	rjmp	.+4      	; 0xdac <fputc+0x4c>
     da8:	0f ef       	ldi	r16, 0xFF	; 255
     daa:	1f ef       	ldi	r17, 0xFF	; 255
     dac:	c8 01       	movw	r24, r16
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <fputs>:
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	7c 01       	movw	r14, r24
     dc6:	8b 01       	movw	r16, r22
     dc8:	db 01       	movw	r26, r22
     dca:	13 96       	adiw	r26, 0x03	; 3
     dcc:	8c 91       	ld	r24, X
     dce:	81 fd       	sbrc	r24, 1
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fputs+0x20>
     dd2:	cf ef       	ldi	r28, 0xFF	; 255
     dd4:	df ef       	ldi	r29, 0xFF	; 255
     dd6:	13 c0       	rjmp	.+38     	; 0xdfe <fputs+0x46>
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	0b c0       	rjmp	.+22     	; 0xdf4 <fputs+0x3c>
     dde:	d8 01       	movw	r26, r16
     de0:	18 96       	adiw	r26, 0x08	; 8
     de2:	ed 91       	ld	r30, X+
     de4:	fc 91       	ld	r31, X
     de6:	19 97       	sbiw	r26, 0x09	; 9
     de8:	b8 01       	movw	r22, r16
     dea:	09 95       	icall
     dec:	89 2b       	or	r24, r25
     dee:	11 f0       	breq	.+4      	; 0xdf4 <fputs+0x3c>
     df0:	cf ef       	ldi	r28, 0xFF	; 255
     df2:	df ef       	ldi	r29, 0xFF	; 255
     df4:	f7 01       	movw	r30, r14
     df6:	81 91       	ld	r24, Z+
     df8:	7f 01       	movw	r14, r30
     dfa:	88 23       	and	r24, r24
     dfc:	81 f7       	brne	.-32     	; 0xdde <fputs+0x26>
     dfe:	ce 01       	movw	r24, r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	e6 e0       	ldi	r30, 0x06	; 6
     e06:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

00000e0a <fscanf>:
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e0       	ldi	r30, 0x0B	; 11
     e10:	f7 e0       	ldi	r31, 0x07	; 7
     e12:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__prologue_saves__+0x20>
     e16:	9e 01       	movw	r18, r28
     e18:	27 5f       	subi	r18, 0xF7	; 247
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	9e 81       	ldd	r25, Y+6	; 0x06
     e20:	6f 81       	ldd	r22, Y+7	; 0x07
     e22:	78 85       	ldd	r23, Y+8	; 0x08
     e24:	a9 01       	movw	r20, r18
     e26:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <vfscanf>
     e2a:	20 96       	adiw	r28, 0x00	; 0
     e2c:	e2 e0       	ldi	r30, 0x02	; 2
     e2e:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__epilogue_restores__+0x20>

00000e32 <vfprintf>:
     e32:	ab e0       	ldi	r26, 0x0B	; 11
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e1       	ldi	r30, 0x1F	; 31
     e38:	f7 e0       	ldi	r31, 0x07	; 7
     e3a:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__prologue_saves__>
     e3e:	3c 01       	movw	r6, r24
     e40:	2b 01       	movw	r4, r22
     e42:	5a 01       	movw	r10, r20
     e44:	fc 01       	movw	r30, r24
     e46:	17 82       	std	Z+7, r1	; 0x07
     e48:	16 82       	std	Z+6, r1	; 0x06
     e4a:	83 81       	ldd	r24, Z+3	; 0x03
     e4c:	81 fd       	sbrc	r24, 1
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x24>
     e50:	6f ef       	ldi	r22, 0xFF	; 255
     e52:	7f ef       	ldi	r23, 0xFF	; 255
     e54:	c6 c1       	rjmp	.+908    	; 0x11e2 <__stack+0xe3>
     e56:	9a e0       	ldi	r25, 0x0A	; 10
     e58:	89 2e       	mov	r8, r25
     e5a:	1e 01       	movw	r2, r28
     e5c:	08 94       	sec
     e5e:	21 1c       	adc	r2, r1
     e60:	31 1c       	adc	r3, r1
     e62:	f3 01       	movw	r30, r6
     e64:	23 81       	ldd	r18, Z+3	; 0x03
     e66:	f2 01       	movw	r30, r4
     e68:	23 fd       	sbrc	r18, 3
     e6a:	85 91       	lpm	r24, Z+
     e6c:	23 ff       	sbrs	r18, 3
     e6e:	81 91       	ld	r24, Z+
     e70:	2f 01       	movw	r4, r30
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <vfprintf+0x46>
     e76:	b2 c1       	rjmp	.+868    	; 0x11dc <__stack+0xdd>
     e78:	85 32       	cpi	r24, 0x25	; 37
     e7a:	39 f4       	brne	.+14     	; 0xe8a <vfprintf+0x58>
     e7c:	23 fd       	sbrc	r18, 3
     e7e:	85 91       	lpm	r24, Z+
     e80:	23 ff       	sbrs	r18, 3
     e82:	81 91       	ld	r24, Z+
     e84:	2f 01       	movw	r4, r30
     e86:	85 32       	cpi	r24, 0x25	; 37
     e88:	29 f4       	brne	.+10     	; 0xe94 <vfprintf+0x62>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	b3 01       	movw	r22, r6
     e8e:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
     e92:	e7 cf       	rjmp	.-50     	; 0xe62 <vfprintf+0x30>
     e94:	98 2f       	mov	r25, r24
     e96:	ff 24       	eor	r15, r15
     e98:	ee 24       	eor	r14, r14
     e9a:	99 24       	eor	r9, r9
     e9c:	ff e1       	ldi	r31, 0x1F	; 31
     e9e:	ff 15       	cp	r31, r15
     ea0:	d0 f0       	brcs	.+52     	; 0xed6 <vfprintf+0xa4>
     ea2:	9b 32       	cpi	r25, 0x2B	; 43
     ea4:	69 f0       	breq	.+26     	; 0xec0 <vfprintf+0x8e>
     ea6:	9c 32       	cpi	r25, 0x2C	; 44
     ea8:	28 f4       	brcc	.+10     	; 0xeb4 <vfprintf+0x82>
     eaa:	90 32       	cpi	r25, 0x20	; 32
     eac:	59 f0       	breq	.+22     	; 0xec4 <vfprintf+0x92>
     eae:	93 32       	cpi	r25, 0x23	; 35
     eb0:	91 f4       	brne	.+36     	; 0xed6 <vfprintf+0xa4>
     eb2:	0e c0       	rjmp	.+28     	; 0xed0 <vfprintf+0x9e>
     eb4:	9d 32       	cpi	r25, 0x2D	; 45
     eb6:	49 f0       	breq	.+18     	; 0xeca <vfprintf+0x98>
     eb8:	90 33       	cpi	r25, 0x30	; 48
     eba:	69 f4       	brne	.+26     	; 0xed6 <vfprintf+0xa4>
     ebc:	41 e0       	ldi	r20, 0x01	; 1
     ebe:	24 c0       	rjmp	.+72     	; 0xf08 <vfprintf+0xd6>
     ec0:	52 e0       	ldi	r21, 0x02	; 2
     ec2:	f5 2a       	or	r15, r21
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	f8 2a       	or	r15, r24
     ec8:	28 c0       	rjmp	.+80     	; 0xf1a <vfprintf+0xe8>
     eca:	98 e0       	ldi	r25, 0x08	; 8
     ecc:	f9 2a       	or	r15, r25
     ece:	25 c0       	rjmp	.+74     	; 0xf1a <vfprintf+0xe8>
     ed0:	e0 e1       	ldi	r30, 0x10	; 16
     ed2:	fe 2a       	or	r15, r30
     ed4:	22 c0       	rjmp	.+68     	; 0xf1a <vfprintf+0xe8>
     ed6:	f7 fc       	sbrc	r15, 7
     ed8:	29 c0       	rjmp	.+82     	; 0xf2c <vfprintf+0xfa>
     eda:	89 2f       	mov	r24, r25
     edc:	80 53       	subi	r24, 0x30	; 48
     ede:	8a 30       	cpi	r24, 0x0A	; 10
     ee0:	70 f4       	brcc	.+28     	; 0xefe <vfprintf+0xcc>
     ee2:	f6 fe       	sbrs	r15, 6
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <vfprintf+0xbe>
     ee6:	98 9c       	mul	r9, r8
     ee8:	90 2c       	mov	r9, r0
     eea:	11 24       	eor	r1, r1
     eec:	98 0e       	add	r9, r24
     eee:	15 c0       	rjmp	.+42     	; 0xf1a <vfprintf+0xe8>
     ef0:	e8 9c       	mul	r14, r8
     ef2:	e0 2c       	mov	r14, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	e8 0e       	add	r14, r24
     ef8:	f0 e2       	ldi	r31, 0x20	; 32
     efa:	ff 2a       	or	r15, r31
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <vfprintf+0xe8>
     efe:	9e 32       	cpi	r25, 0x2E	; 46
     f00:	29 f4       	brne	.+10     	; 0xf0c <vfprintf+0xda>
     f02:	f6 fc       	sbrc	r15, 6
     f04:	6b c1       	rjmp	.+726    	; 0x11dc <__stack+0xdd>
     f06:	40 e4       	ldi	r20, 0x40	; 64
     f08:	f4 2a       	or	r15, r20
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <vfprintf+0xe8>
     f0c:	9c 36       	cpi	r25, 0x6C	; 108
     f0e:	19 f4       	brne	.+6      	; 0xf16 <vfprintf+0xe4>
     f10:	50 e8       	ldi	r21, 0x80	; 128
     f12:	f5 2a       	or	r15, r21
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0xe8>
     f16:	98 36       	cpi	r25, 0x68	; 104
     f18:	49 f4       	brne	.+18     	; 0xf2c <vfprintf+0xfa>
     f1a:	f2 01       	movw	r30, r4
     f1c:	23 fd       	sbrc	r18, 3
     f1e:	95 91       	lpm	r25, Z+
     f20:	23 ff       	sbrs	r18, 3
     f22:	91 91       	ld	r25, Z+
     f24:	2f 01       	movw	r4, r30
     f26:	99 23       	and	r25, r25
     f28:	09 f0       	breq	.+2      	; 0xf2c <vfprintf+0xfa>
     f2a:	b8 cf       	rjmp	.-144    	; 0xe9c <vfprintf+0x6a>
     f2c:	89 2f       	mov	r24, r25
     f2e:	85 54       	subi	r24, 0x45	; 69
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	18 f0       	brcs	.+6      	; 0xf3a <vfprintf+0x108>
     f34:	80 52       	subi	r24, 0x20	; 32
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x116>
     f3a:	44 e0       	ldi	r20, 0x04	; 4
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	a4 0e       	add	r10, r20
     f40:	b5 1e       	adc	r11, r21
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	59 83       	std	Y+1, r21	; 0x01
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <vfprintf+0x134>
     f48:	93 36       	cpi	r25, 0x63	; 99
     f4a:	31 f0       	breq	.+12     	; 0xf58 <vfprintf+0x126>
     f4c:	93 37       	cpi	r25, 0x73	; 115
     f4e:	79 f0       	breq	.+30     	; 0xf6e <vfprintf+0x13c>
     f50:	93 35       	cpi	r25, 0x53	; 83
     f52:	09 f0       	breq	.+2      	; 0xf56 <vfprintf+0x124>
     f54:	56 c0       	rjmp	.+172    	; 0x1002 <vfprintf+0x1d0>
     f56:	20 c0       	rjmp	.+64     	; 0xf98 <vfprintf+0x166>
     f58:	f5 01       	movw	r30, r10
     f5a:	80 81       	ld	r24, Z
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	42 e0       	ldi	r20, 0x02	; 2
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	a4 0e       	add	r10, r20
     f64:	b5 1e       	adc	r11, r21
     f66:	61 01       	movw	r12, r2
     f68:	01 e0       	ldi	r16, 0x01	; 1
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	12 c0       	rjmp	.+36     	; 0xf92 <vfprintf+0x160>
     f6e:	f5 01       	movw	r30, r10
     f70:	c0 80       	ld	r12, Z
     f72:	d1 80       	ldd	r13, Z+1	; 0x01
     f74:	f6 fc       	sbrc	r15, 6
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x14c>
     f78:	6f ef       	ldi	r22, 0xFF	; 255
     f7a:	7f ef       	ldi	r23, 0xFF	; 255
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x150>
     f7e:	69 2d       	mov	r22, r9
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	42 e0       	ldi	r20, 0x02	; 2
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	a4 0e       	add	r10, r20
     f88:	b5 1e       	adc	r11, r21
     f8a:	c6 01       	movw	r24, r12
     f8c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <strnlen>
     f90:	8c 01       	movw	r16, r24
     f92:	5f e7       	ldi	r21, 0x7F	; 127
     f94:	f5 22       	and	r15, r21
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <vfprintf+0x18e>
     f98:	f5 01       	movw	r30, r10
     f9a:	c0 80       	ld	r12, Z
     f9c:	d1 80       	ldd	r13, Z+1	; 0x01
     f9e:	f6 fc       	sbrc	r15, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x176>
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x17a>
     fa8:	69 2d       	mov	r22, r9
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	42 e0       	ldi	r20, 0x02	; 2
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	a4 0e       	add	r10, r20
     fb2:	b5 1e       	adc	r11, r21
     fb4:	c6 01       	movw	r24, r12
     fb6:	0e 94 9e 0b 	call	0x173c	; 0x173c <strnlen_P>
     fba:	8c 01       	movw	r16, r24
     fbc:	50 e8       	ldi	r21, 0x80	; 128
     fbe:	f5 2a       	or	r15, r21
     fc0:	f3 fe       	sbrs	r15, 3
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <vfprintf+0x1a0>
     fc4:	1a c0       	rjmp	.+52     	; 0xffa <vfprintf+0x1c8>
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	b3 01       	movw	r22, r6
     fcc:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
     fd0:	ea 94       	dec	r14
     fd2:	8e 2d       	mov	r24, r14
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	08 17       	cp	r16, r24
     fd8:	19 07       	cpc	r17, r25
     fda:	a8 f3       	brcs	.-22     	; 0xfc6 <vfprintf+0x194>
     fdc:	0e c0       	rjmp	.+28     	; 0xffa <vfprintf+0x1c8>
     fde:	f6 01       	movw	r30, r12
     fe0:	f7 fc       	sbrc	r15, 7
     fe2:	85 91       	lpm	r24, Z+
     fe4:	f7 fe       	sbrs	r15, 7
     fe6:	81 91       	ld	r24, Z+
     fe8:	6f 01       	movw	r12, r30
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b3 01       	movw	r22, r6
     fee:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
     ff2:	e1 10       	cpse	r14, r1
     ff4:	ea 94       	dec	r14
     ff6:	01 50       	subi	r16, 0x01	; 1
     ff8:	10 40       	sbci	r17, 0x00	; 0
     ffa:	01 15       	cp	r16, r1
     ffc:	11 05       	cpc	r17, r1
     ffe:	79 f7       	brne	.-34     	; 0xfde <vfprintf+0x1ac>
    1000:	ea c0       	rjmp	.+468    	; 0x11d6 <__stack+0xd7>
    1002:	94 36       	cpi	r25, 0x64	; 100
    1004:	11 f0       	breq	.+4      	; 0x100a <vfprintf+0x1d8>
    1006:	99 36       	cpi	r25, 0x69	; 105
    1008:	69 f5       	brne	.+90     	; 0x1064 <vfprintf+0x232>
    100a:	f7 fe       	sbrs	r15, 7
    100c:	08 c0       	rjmp	.+16     	; 0x101e <vfprintf+0x1ec>
    100e:	f5 01       	movw	r30, r10
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	42 81       	ldd	r20, Z+2	; 0x02
    1016:	53 81       	ldd	r21, Z+3	; 0x03
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0a c0       	rjmp	.+20     	; 0x1032 <vfprintf+0x200>
    101e:	f5 01       	movw	r30, r10
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	9c 01       	movw	r18, r24
    1026:	44 27       	eor	r20, r20
    1028:	37 fd       	sbrc	r19, 7
    102a:	40 95       	com	r20
    102c:	54 2f       	mov	r21, r20
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a8 0e       	add	r10, r24
    1034:	b9 1e       	adc	r11, r25
    1036:	9f e6       	ldi	r25, 0x6F	; 111
    1038:	f9 22       	and	r15, r25
    103a:	57 ff       	sbrs	r21, 7
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <vfprintf+0x21e>
    103e:	50 95       	com	r21
    1040:	40 95       	com	r20
    1042:	30 95       	com	r19
    1044:	21 95       	neg	r18
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	4f 4f       	sbci	r20, 0xFF	; 255
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	e0 e8       	ldi	r30, 0x80	; 128
    104e:	fe 2a       	or	r15, r30
    1050:	ca 01       	movw	r24, r20
    1052:	b9 01       	movw	r22, r18
    1054:	a1 01       	movw	r20, r2
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	0e 94 10 0c 	call	0x1820	; 0x1820 <__ultoa_invert>
    105e:	d8 2e       	mov	r13, r24
    1060:	d2 18       	sub	r13, r2
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <vfprintf+0x2b2>
    1064:	95 37       	cpi	r25, 0x75	; 117
    1066:	29 f4       	brne	.+10     	; 0x1072 <vfprintf+0x240>
    1068:	1f 2d       	mov	r17, r15
    106a:	1f 7e       	andi	r17, 0xEF	; 239
    106c:	2a e0       	ldi	r18, 0x0A	; 10
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	1d c0       	rjmp	.+58     	; 0x10ac <vfprintf+0x27a>
    1072:	1f 2d       	mov	r17, r15
    1074:	19 7f       	andi	r17, 0xF9	; 249
    1076:	9f 36       	cpi	r25, 0x6F	; 111
    1078:	61 f0       	breq	.+24     	; 0x1092 <vfprintf+0x260>
    107a:	90 37       	cpi	r25, 0x70	; 112
    107c:	20 f4       	brcc	.+8      	; 0x1086 <vfprintf+0x254>
    107e:	98 35       	cpi	r25, 0x58	; 88
    1080:	09 f0       	breq	.+2      	; 0x1084 <vfprintf+0x252>
    1082:	ac c0       	rjmp	.+344    	; 0x11dc <__stack+0xdd>
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <vfprintf+0x272>
    1086:	90 37       	cpi	r25, 0x70	; 112
    1088:	39 f0       	breq	.+14     	; 0x1098 <vfprintf+0x266>
    108a:	98 37       	cpi	r25, 0x78	; 120
    108c:	09 f0       	breq	.+2      	; 0x1090 <vfprintf+0x25e>
    108e:	a6 c0       	rjmp	.+332    	; 0x11dc <__stack+0xdd>
    1090:	04 c0       	rjmp	.+8      	; 0x109a <vfprintf+0x268>
    1092:	28 e0       	ldi	r18, 0x08	; 8
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <vfprintf+0x27a>
    1098:	10 61       	ori	r17, 0x10	; 16
    109a:	14 fd       	sbrc	r17, 4
    109c:	14 60       	ori	r17, 0x04	; 4
    109e:	20 e1       	ldi	r18, 0x10	; 16
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <vfprintf+0x27a>
    10a4:	14 fd       	sbrc	r17, 4
    10a6:	16 60       	ori	r17, 0x06	; 6
    10a8:	20 e1       	ldi	r18, 0x10	; 16
    10aa:	32 e0       	ldi	r19, 0x02	; 2
    10ac:	17 ff       	sbrs	r17, 7
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <vfprintf+0x28e>
    10b0:	f5 01       	movw	r30, r10
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	44 e0       	ldi	r20, 0x04	; 4
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <vfprintf+0x29e>
    10c0:	f5 01       	movw	r30, r10
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	bc 01       	movw	r22, r24
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	42 e0       	ldi	r20, 0x02	; 2
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	a4 0e       	add	r10, r20
    10d2:	b5 1e       	adc	r11, r21
    10d4:	a1 01       	movw	r20, r2
    10d6:	0e 94 10 0c 	call	0x1820	; 0x1820 <__ultoa_invert>
    10da:	d8 2e       	mov	r13, r24
    10dc:	d2 18       	sub	r13, r2
    10de:	8f e7       	ldi	r24, 0x7F	; 127
    10e0:	f8 2e       	mov	r15, r24
    10e2:	f1 22       	and	r15, r17
    10e4:	f6 fe       	sbrs	r15, 6
    10e6:	0b c0       	rjmp	.+22     	; 0x10fe <vfprintf+0x2cc>
    10e8:	5e ef       	ldi	r21, 0xFE	; 254
    10ea:	f5 22       	and	r15, r21
    10ec:	d9 14       	cp	r13, r9
    10ee:	38 f4       	brcc	.+14     	; 0x10fe <vfprintf+0x2cc>
    10f0:	f4 fe       	sbrs	r15, 4
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <__stack+0x3>
    10f4:	f2 fc       	sbrc	r15, 2
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <__stack+0x3>
    10f8:	8f ee       	ldi	r24, 0xEF	; 239
    10fa:	f8 22       	and	r15, r24
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <__stack+0x3>
    10fe:	1d 2d       	mov	r17, r13
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <__stack+0x5>
    1102:	19 2d       	mov	r17, r9
    1104:	f4 fe       	sbrs	r15, 4
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <__stack+0x23>
    1108:	fe 01       	movw	r30, r28
    110a:	ed 0d       	add	r30, r13
    110c:	f1 1d       	adc	r31, r1
    110e:	80 81       	ld	r24, Z
    1110:	80 33       	cpi	r24, 0x30	; 48
    1112:	19 f4       	brne	.+6      	; 0x111a <__stack+0x1b>
    1114:	99 ee       	ldi	r25, 0xE9	; 233
    1116:	f9 22       	and	r15, r25
    1118:	08 c0       	rjmp	.+16     	; 0x112a <__stack+0x2b>
    111a:	1f 5f       	subi	r17, 0xFF	; 255
    111c:	f2 fe       	sbrs	r15, 2
    111e:	05 c0       	rjmp	.+10     	; 0x112a <__stack+0x2b>
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <__stack+0x29>
    1122:	8f 2d       	mov	r24, r15
    1124:	86 78       	andi	r24, 0x86	; 134
    1126:	09 f0       	breq	.+2      	; 0x112a <__stack+0x2b>
    1128:	1f 5f       	subi	r17, 0xFF	; 255
    112a:	0f 2d       	mov	r16, r15
    112c:	f3 fc       	sbrc	r15, 3
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <__stack+0x59>
    1130:	f0 fe       	sbrs	r15, 0
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <__stack+0x53>
    1134:	1e 15       	cp	r17, r14
    1136:	10 f0       	brcs	.+4      	; 0x113c <__stack+0x3d>
    1138:	9d 2c       	mov	r9, r13
    113a:	0b c0       	rjmp	.+22     	; 0x1152 <__stack+0x53>
    113c:	9d 2c       	mov	r9, r13
    113e:	9e 0c       	add	r9, r14
    1140:	91 1a       	sub	r9, r17
    1142:	1e 2d       	mov	r17, r14
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <__stack+0x53>
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	b3 01       	movw	r22, r6
    114c:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    1150:	1f 5f       	subi	r17, 0xFF	; 255
    1152:	1e 15       	cp	r17, r14
    1154:	c0 f3       	brcs	.-16     	; 0x1146 <__stack+0x47>
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <__stack+0x61>
    1158:	1e 15       	cp	r17, r14
    115a:	10 f4       	brcc	.+4      	; 0x1160 <__stack+0x61>
    115c:	e1 1a       	sub	r14, r17
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <__stack+0x63>
    1160:	ee 24       	eor	r14, r14
    1162:	04 ff       	sbrs	r16, 4
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <__stack+0x85>
    1166:	80 e3       	ldi	r24, 0x30	; 48
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	b3 01       	movw	r22, r6
    116c:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    1170:	02 ff       	sbrs	r16, 2
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <__stack+0xaf>
    1174:	01 fd       	sbrc	r16, 1
    1176:	03 c0       	rjmp	.+6      	; 0x117e <__stack+0x7f>
    1178:	88 e7       	ldi	r24, 0x78	; 120
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e c0       	rjmp	.+28     	; 0x119a <__stack+0x9b>
    117e:	88 e5       	ldi	r24, 0x58	; 88
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0b c0       	rjmp	.+22     	; 0x119a <__stack+0x9b>
    1184:	80 2f       	mov	r24, r16
    1186:	86 78       	andi	r24, 0x86	; 134
    1188:	91 f0       	breq	.+36     	; 0x11ae <__stack+0xaf>
    118a:	01 ff       	sbrs	r16, 1
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <__stack+0x93>
    118e:	8b e2       	ldi	r24, 0x2B	; 43
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <__stack+0x95>
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	f7 fc       	sbrc	r15, 7
    1196:	8d e2       	ldi	r24, 0x2D	; 45
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <__stack+0xaf>
    11a2:	80 e3       	ldi	r24, 0x30	; 48
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	b3 01       	movw	r22, r6
    11a8:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    11ac:	9a 94       	dec	r9
    11ae:	d9 14       	cp	r13, r9
    11b0:	c0 f3       	brcs	.-16     	; 0x11a2 <__stack+0xa3>
    11b2:	da 94       	dec	r13
    11b4:	f1 01       	movw	r30, r2
    11b6:	ed 0d       	add	r30, r13
    11b8:	f1 1d       	adc	r31, r1
    11ba:	80 81       	ld	r24, Z
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	b3 01       	movw	r22, r6
    11c0:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    11c4:	dd 20       	and	r13, r13
    11c6:	a9 f7       	brne	.-22     	; 0x11b2 <__stack+0xb3>
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <__stack+0xd7>
    11ca:	80 e2       	ldi	r24, 0x20	; 32
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	b3 01       	movw	r22, r6
    11d0:	0e 94 b0 06 	call	0xd60	; 0xd60 <fputc>
    11d4:	ea 94       	dec	r14
    11d6:	ee 20       	and	r14, r14
    11d8:	c1 f7       	brne	.-16     	; 0x11ca <__stack+0xcb>
    11da:	43 ce       	rjmp	.-890    	; 0xe62 <vfprintf+0x30>
    11dc:	f3 01       	movw	r30, r6
    11de:	66 81       	ldd	r22, Z+6	; 0x06
    11e0:	77 81       	ldd	r23, Z+7	; 0x07
    11e2:	cb 01       	movw	r24, r22
    11e4:	2b 96       	adiw	r28, 0x0b	; 11
    11e6:	e2 e1       	ldi	r30, 0x12	; 18
    11e8:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__epilogue_restores__>

000011ec <putval>:
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 fd       	sbrc	r18, 0
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <putval+0x16>
    11f2:	23 fd       	sbrc	r18, 3
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <putval+0x14>
    11f6:	22 ff       	sbrs	r18, 2
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <putval+0x12>
    11fa:	73 83       	std	Z+3, r23	; 0x03
    11fc:	62 83       	std	Z+2, r22	; 0x02
    11fe:	51 83       	std	Z+1, r21	; 0x01
    1200:	40 83       	st	Z, r20
    1202:	08 95       	ret

00001204 <mulacc>:
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	44 ff       	sbrs	r20, 4
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <mulacc+0x10>
    1210:	33 e0       	ldi	r19, 0x03	; 3
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <mulacc+0x32>
    1214:	46 ff       	sbrs	r20, 6
    1216:	02 c0       	rjmp	.+4      	; 0x121c <mulacc+0x18>
    1218:	34 e0       	ldi	r19, 0x04	; 4
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <mulacc+0x32>
    121c:	db 01       	movw	r26, r22
    121e:	fc 01       	movw	r30, r24
    1220:	aa 0f       	add	r26, r26
    1222:	bb 1f       	adc	r27, r27
    1224:	ee 1f       	adc	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	10 94       	com	r1
    122a:	d1 f7       	brne	.-12     	; 0x1220 <mulacc+0x1c>
    122c:	6a 0f       	add	r22, r26
    122e:	7b 1f       	adc	r23, r27
    1230:	8e 1f       	adc	r24, r30
    1232:	9f 1f       	adc	r25, r31
    1234:	31 e0       	ldi	r19, 0x01	; 1
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	31 50       	subi	r19, 0x01	; 1
    1240:	d1 f7       	brne	.-12     	; 0x1236 <mulacc+0x32>
    1242:	7b 01       	movw	r14, r22
    1244:	8c 01       	movw	r16, r24
    1246:	e2 0e       	add	r14, r18
    1248:	f1 1c       	adc	r15, r1
    124a:	01 1d       	adc	r16, r1
    124c:	11 1d       	adc	r17, r1
    124e:	a8 01       	movw	r20, r16
    1250:	97 01       	movw	r18, r14
    1252:	b7 01       	movw	r22, r14
    1254:	ca 01       	movw	r24, r20
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	08 95       	ret

00001260 <skip_spaces>:
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	8c 01       	movw	r16, r24
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    1270:	ec 01       	movw	r28, r24
    1272:	97 fd       	sbrc	r25, 7
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <skip_spaces+0x26>
    1276:	0e 94 8b 0b 	call	0x1716	; 0x1716 <isspace>
    127a:	89 2b       	or	r24, r25
    127c:	b1 f7       	brne	.-20     	; 0x126a <skip_spaces+0xa>
    127e:	ce 01       	movw	r24, r28
    1280:	b8 01       	movw	r22, r16
    1282:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ungetc>
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <conv_int>:
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f9 e0       	ldi	r31, 0x09	; 9
    129a:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__prologue_saves__+0x10>
    129e:	ec 01       	movw	r28, r24
    12a0:	c6 2e       	mov	r12, r22
    12a2:	5a 01       	movw	r10, r20
    12a4:	12 2f       	mov	r17, r18
    12a6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    12aa:	ac 01       	movw	r20, r24
    12ac:	8b 32       	cpi	r24, 0x2B	; 43
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <conv_int+0x24>
    12b0:	8d 32       	cpi	r24, 0x2D	; 45
    12b2:	51 f4       	brne	.+20     	; 0x12c8 <conv_int+0x36>
    12b4:	10 68       	ori	r17, 0x80	; 128
    12b6:	ca 94       	dec	r12
    12b8:	09 f4       	brne	.+2      	; 0x12bc <conv_int+0x2a>
    12ba:	6d c0       	rjmp	.+218    	; 0x1396 <conv_int+0x104>
    12bc:	ce 01       	movw	r24, r28
    12be:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    12c2:	ac 01       	movw	r20, r24
    12c4:	97 fd       	sbrc	r25, 7
    12c6:	67 c0       	rjmp	.+206    	; 0x1396 <conv_int+0x104>
    12c8:	6d ef       	ldi	r22, 0xFD	; 253
    12ca:	d6 2e       	mov	r13, r22
    12cc:	d1 22       	and	r13, r17
    12ce:	8d 2d       	mov	r24, r13
    12d0:	80 73       	andi	r24, 0x30	; 48
    12d2:	01 f5       	brne	.+64     	; 0x1314 <conv_int+0x82>
    12d4:	40 33       	cpi	r20, 0x30	; 48
    12d6:	f1 f4       	brne	.+60     	; 0x1314 <conv_int+0x82>
    12d8:	ca 94       	dec	r12
    12da:	09 f4       	brne	.+2      	; 0x12de <conv_int+0x4c>
    12dc:	47 c0       	rjmp	.+142    	; 0x136c <conv_int+0xda>
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    12e4:	ac 01       	movw	r20, r24
    12e6:	97 fd       	sbrc	r25, 7
    12e8:	41 c0       	rjmp	.+130    	; 0x136c <conv_int+0xda>
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	d8 2a       	or	r13, r24
    12ee:	48 37       	cpi	r20, 0x78	; 120
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <conv_int+0x64>
    12f2:	48 35       	cpi	r20, 0x58	; 88
    12f4:	59 f4       	brne	.+22     	; 0x130c <conv_int+0x7a>
    12f6:	80 e4       	ldi	r24, 0x40	; 64
    12f8:	d8 2a       	or	r13, r24
    12fa:	ca 94       	dec	r12
    12fc:	b9 f1       	breq	.+110    	; 0x136c <conv_int+0xda>
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    1304:	ac 01       	movw	r20, r24
    1306:	99 23       	and	r25, r25
    1308:	2c f4       	brge	.+10     	; 0x1314 <conv_int+0x82>
    130a:	30 c0       	rjmp	.+96     	; 0x136c <conv_int+0xda>
    130c:	d6 fc       	sbrc	r13, 6
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <conv_int+0x82>
    1310:	80 e1       	ldi	r24, 0x10	; 16
    1312:	d8 2a       	or	r13, r24
    1314:	ee 24       	eor	r14, r14
    1316:	ff 24       	eor	r15, r15
    1318:	87 01       	movw	r16, r14
    131a:	24 2f       	mov	r18, r20
    131c:	20 53       	subi	r18, 0x30	; 48
    131e:	28 30       	cpi	r18, 0x08	; 8
    1320:	88 f0       	brcs	.+34     	; 0x1344 <conv_int+0xb2>
    1322:	d4 fc       	sbrc	r13, 4
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <conv_int+0xa6>
    1326:	2a 30       	cpi	r18, 0x0A	; 10
    1328:	68 f0       	brcs	.+26     	; 0x1344 <conv_int+0xb2>
    132a:	d6 fe       	sbrs	r13, 6
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <conv_int+0xa6>
    132e:	2f 7d       	andi	r18, 0xDF	; 223
    1330:	82 2f       	mov	r24, r18
    1332:	81 51       	subi	r24, 0x11	; 17
    1334:	86 30       	cpi	r24, 0x06	; 6
    1336:	28 f0       	brcs	.+10     	; 0x1342 <conv_int+0xb0>
    1338:	ca 01       	movw	r24, r20
    133a:	be 01       	movw	r22, r28
    133c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ungetc>
    1340:	12 c0       	rjmp	.+36     	; 0x1366 <conv_int+0xd4>
    1342:	27 50       	subi	r18, 0x07	; 7
    1344:	c8 01       	movw	r24, r16
    1346:	b7 01       	movw	r22, r14
    1348:	4d 2d       	mov	r20, r13
    134a:	0e 94 02 09 	call	0x1204	; 0x1204 <mulacc>
    134e:	7b 01       	movw	r14, r22
    1350:	8c 01       	movw	r16, r24
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	d8 2a       	or	r13, r24
    1356:	ca 94       	dec	r12
    1358:	61 f0       	breq	.+24     	; 0x1372 <conv_int+0xe0>
    135a:	ce 01       	movw	r24, r28
    135c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    1360:	ac 01       	movw	r20, r24
    1362:	97 ff       	sbrs	r25, 7
    1364:	da cf       	rjmp	.-76     	; 0x131a <conv_int+0x88>
    1366:	d1 fc       	sbrc	r13, 1
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <conv_int+0xe0>
    136a:	15 c0       	rjmp	.+42     	; 0x1396 <conv_int+0x104>
    136c:	ee 24       	eor	r14, r14
    136e:	ff 24       	eor	r15, r15
    1370:	87 01       	movw	r16, r14
    1372:	d7 fe       	sbrs	r13, 7
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <conv_int+0xf4>
    1376:	10 95       	com	r17
    1378:	00 95       	com	r16
    137a:	f0 94       	com	r15
    137c:	e0 94       	com	r14
    137e:	e1 1c       	adc	r14, r1
    1380:	f1 1c       	adc	r15, r1
    1382:	01 1d       	adc	r16, r1
    1384:	11 1d       	adc	r17, r1
    1386:	c5 01       	movw	r24, r10
    1388:	b8 01       	movw	r22, r16
    138a:	a7 01       	movw	r20, r14
    138c:	2d 2d       	mov	r18, r13
    138e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <putval>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <conv_int+0x106>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	ea e0       	ldi	r30, 0x0A	; 10
    139e:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__epilogue_restores__+0x10>

000013a2 <conv_brk>:
    13a2:	a0 e2       	ldi	r26, 0x20	; 32
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 ed       	ldi	r30, 0xD7	; 215
    13a8:	f9 e0       	ldi	r31, 0x09	; 9
    13aa:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__prologue_saves__+0x8>
    13ae:	6c 01       	movw	r12, r24
    13b0:	a6 2e       	mov	r10, r22
    13b2:	8a 01       	movw	r16, r20
    13b4:	79 01       	movw	r14, r18
    13b6:	fe 01       	movw	r30, r28
    13b8:	31 96       	adiw	r30, 0x01	; 1
    13ba:	80 e2       	ldi	r24, 0x20	; 32
    13bc:	df 01       	movw	r26, r30
    13be:	1d 92       	st	X+, r1
    13c0:	8a 95       	dec	r24
    13c2:	e9 f7       	brne	.-6      	; 0x13be <conv_brk+0x1c>
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	4f 01       	movw	r8, r30
    13d0:	a1 e0       	ldi	r26, 0x01	; 1
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	f6 01       	movw	r30, r12
    13d6:	83 81       	ldd	r24, Z+3	; 0x03
    13d8:	f7 01       	movw	r30, r14
    13da:	83 fd       	sbrc	r24, 3
    13dc:	25 91       	lpm	r18, Z+
    13de:	83 ff       	sbrs	r24, 3
    13e0:	21 91       	ld	r18, Z+
    13e2:	7f 01       	movw	r14, r30
    13e4:	22 23       	and	r18, r18
    13e6:	09 f4       	brne	.+2      	; 0x13ea <conv_brk+0x48>
    13e8:	7e c0       	rjmp	.+252    	; 0x14e6 <conv_brk+0x144>
    13ea:	2e 35       	cpi	r18, 0x5E	; 94
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <conv_brk+0x52>
    13ee:	41 15       	cp	r20, r1
    13f0:	51 05       	cpc	r21, r1
    13f2:	69 f1       	breq	.+90     	; 0x144e <conv_brk+0xac>
    13f4:	87 2f       	mov	r24, r23
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	84 17       	cp	r24, r20
    13fa:	95 07       	cpc	r25, r21
    13fc:	44 f4       	brge	.+16     	; 0x140e <conv_brk+0x6c>
    13fe:	2d 35       	cpi	r18, 0x5D	; 93
    1400:	51 f1       	breq	.+84     	; 0x1456 <conv_brk+0xb4>
    1402:	2d 32       	cpi	r18, 0x2D	; 45
    1404:	21 f4       	brne	.+8      	; 0x140e <conv_brk+0x6c>
    1406:	33 23       	and	r19, r19
    1408:	29 f4       	brne	.+10     	; 0x1414 <conv_brk+0x72>
    140a:	31 e0       	ldi	r19, 0x01	; 1
    140c:	21 c0       	rjmp	.+66     	; 0x1450 <conv_brk+0xae>
    140e:	33 23       	and	r19, r19
    1410:	09 f4       	brne	.+2      	; 0x1414 <conv_brk+0x72>
    1412:	62 2f       	mov	r22, r18
    1414:	32 2f       	mov	r19, r18
    1416:	83 2f       	mov	r24, r19
    1418:	86 95       	lsr	r24
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	f4 01       	movw	r30, r8
    1420:	e8 0f       	add	r30, r24
    1422:	f1 1d       	adc	r31, r1
    1424:	83 2f       	mov	r24, r19
    1426:	87 70       	andi	r24, 0x07	; 7
    1428:	3d 01       	movw	r6, r26
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <conv_brk+0x8e>
    142c:	66 0c       	add	r6, r6
    142e:	77 1c       	adc	r7, r7
    1430:	8a 95       	dec	r24
    1432:	e2 f7       	brpl	.-8      	; 0x142c <conv_brk+0x8a>
    1434:	20 81       	ld	r18, Z
    1436:	26 29       	or	r18, r6
    1438:	20 83       	st	Z, r18
    143a:	36 17       	cp	r19, r22
    143c:	11 f4       	brne	.+4      	; 0x1442 <conv_brk+0xa0>
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <conv_brk+0xae>
    1442:	36 17       	cp	r19, r22
    1444:	10 f4       	brcc	.+4      	; 0x144a <conv_brk+0xa8>
    1446:	3f 5f       	subi	r19, 0xFF	; 255
    1448:	e6 cf       	rjmp	.-52     	; 0x1416 <conv_brk+0x74>
    144a:	31 50       	subi	r19, 0x01	; 1
    144c:	e4 cf       	rjmp	.-56     	; 0x1416 <conv_brk+0x74>
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	bf cf       	rjmp	.-130    	; 0x13d4 <conv_brk+0x32>
    1456:	33 23       	and	r19, r19
    1458:	19 f0       	breq	.+6      	; 0x1460 <conv_brk+0xbe>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	80 62       	ori	r24, 0x20	; 32
    145e:	8e 83       	std	Y+6, r24	; 0x06
    1460:	77 23       	and	r23, r23
    1462:	59 f0       	breq	.+22     	; 0x147a <conv_brk+0xd8>
    1464:	fe 01       	movw	r30, r28
    1466:	31 96       	adiw	r30, 0x01	; 1
    1468:	9e 01       	movw	r18, r28
    146a:	2f 5d       	subi	r18, 0xDF	; 223
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	80 95       	com	r24
    1472:	81 93       	st	Z+, r24
    1474:	e2 17       	cp	r30, r18
    1476:	f3 07       	cpc	r31, r19
    1478:	d1 f7       	brne	.-12     	; 0x146e <conv_brk+0xcc>
    147a:	bb 24       	eor	r11, r11
    147c:	b3 94       	inc	r11
    147e:	4e 01       	movw	r8, r28
    1480:	08 94       	sec
    1482:	81 1c       	adc	r8, r1
    1484:	91 1c       	adc	r9, r1
    1486:	c6 01       	movw	r24, r12
    1488:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    148c:	ac 01       	movw	r20, r24
    148e:	97 fd       	sbrc	r25, 7
    1490:	22 c0       	rjmp	.+68     	; 0x14d6 <conv_brk+0x134>
    1492:	86 95       	lsr	r24
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	f4 01       	movw	r30, r8
    149a:	e8 0f       	add	r30, r24
    149c:	f1 1d       	adc	r31, r1
    149e:	80 81       	ld	r24, Z
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9a 01       	movw	r18, r20
    14a4:	27 70       	andi	r18, 0x07	; 7
    14a6:	30 70       	andi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <conv_brk+0x10c>
    14aa:	95 95       	asr	r25
    14ac:	87 95       	ror	r24
    14ae:	2a 95       	dec	r18
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <conv_brk+0x108>
    14b2:	80 fd       	sbrc	r24, 0
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <conv_brk+0x11e>
    14b6:	ca 01       	movw	r24, r20
    14b8:	b6 01       	movw	r22, r12
    14ba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ungetc>
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <conv_brk+0x134>
    14c0:	01 15       	cp	r16, r1
    14c2:	11 05       	cpc	r17, r1
    14c4:	19 f0       	breq	.+6      	; 0x14cc <conv_brk+0x12a>
    14c6:	d8 01       	movw	r26, r16
    14c8:	4d 93       	st	X+, r20
    14ca:	8d 01       	movw	r16, r26
    14cc:	aa 94       	dec	r10
    14ce:	bb 24       	eor	r11, r11
    14d0:	aa 20       	and	r10, r10
    14d2:	c9 f6       	brne	.-78     	; 0x1486 <conv_brk+0xe4>
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <conv_brk+0x138>
    14d6:	bb 20       	and	r11, r11
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <conv_brk+0x144>
    14da:	01 15       	cp	r16, r1
    14dc:	11 05       	cpc	r17, r1
    14de:	29 f0       	breq	.+10     	; 0x14ea <conv_brk+0x148>
    14e0:	f8 01       	movw	r30, r16
    14e2:	10 82       	st	Z, r1
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <conv_brk+0x148>
    14e6:	ee 24       	eor	r14, r14
    14e8:	ff 24       	eor	r15, r15
    14ea:	c7 01       	movw	r24, r14
    14ec:	a0 96       	adiw	r28, 0x20	; 32
    14ee:	ee e0       	ldi	r30, 0x0E	; 14
    14f0:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__epilogue_restores__+0x8>

000014f4 <vfscanf>:
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e0 e8       	ldi	r30, 0x80	; 128
    14fa:	fa e0       	ldi	r31, 0x0A	; 10
    14fc:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__prologue_saves__+0x8>
    1500:	5c 01       	movw	r10, r24
    1502:	6b 01       	movw	r12, r22
    1504:	3a 01       	movw	r6, r20
    1506:	fc 01       	movw	r30, r24
    1508:	17 82       	std	Z+7, r1	; 0x07
    150a:	16 82       	std	Z+6, r1	; 0x06
    150c:	88 24       	eor	r8, r8
    150e:	ea c0       	rjmp	.+468    	; 0x16e4 <vfscanf+0x1f0>
    1510:	81 2f       	mov	r24, r17
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 8b 0b 	call	0x1716	; 0x1716 <isspace>
    1518:	89 2b       	or	r24, r25
    151a:	21 f0       	breq	.+8      	; 0x1524 <vfscanf+0x30>
    151c:	c5 01       	movw	r24, r10
    151e:	0e 94 30 09 	call	0x1260	; 0x1260 <skip_spaces>
    1522:	e0 c0       	rjmp	.+448    	; 0x16e4 <vfscanf+0x1f0>
    1524:	15 32       	cpi	r17, 0x25	; 37
    1526:	49 f4       	brne	.+18     	; 0x153a <vfscanf+0x46>
    1528:	f6 01       	movw	r30, r12
    152a:	f3 fc       	sbrc	r15, 3
    152c:	65 91       	lpm	r22, Z+
    152e:	f3 fe       	sbrs	r15, 3
    1530:	61 91       	ld	r22, Z+
    1532:	6f 01       	movw	r12, r30
    1534:	65 32       	cpi	r22, 0x25	; 37
    1536:	69 f4       	brne	.+26     	; 0x1552 <vfscanf+0x5e>
    1538:	15 e2       	ldi	r17, 0x25	; 37
    153a:	c5 01       	movw	r24, r10
    153c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    1540:	97 fd       	sbrc	r25, 7
    1542:	dc c0       	rjmp	.+440    	; 0x16fc <vfscanf+0x208>
    1544:	18 17       	cp	r17, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <vfscanf+0x56>
    1548:	cd c0       	rjmp	.+410    	; 0x16e4 <vfscanf+0x1f0>
    154a:	b5 01       	movw	r22, r10
    154c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ungetc>
    1550:	da c0       	rjmp	.+436    	; 0x1706 <vfscanf+0x212>
    1552:	6a 32       	cpi	r22, 0x2A	; 42
    1554:	19 f0       	breq	.+6      	; 0x155c <vfscanf+0x68>
    1556:	16 2f       	mov	r17, r22
    1558:	00 e0       	ldi	r16, 0x00	; 0
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfscanf+0x74>
    155c:	f3 fc       	sbrc	r15, 3
    155e:	15 91       	lpm	r17, Z+
    1560:	f3 fe       	sbrs	r15, 3
    1562:	11 91       	ld	r17, Z+
    1564:	6f 01       	movw	r12, r30
    1566:	01 e0       	ldi	r16, 0x01	; 1
    1568:	99 24       	eor	r9, r9
    156a:	0f c0       	rjmp	.+30     	; 0x158a <vfscanf+0x96>
    156c:	02 60       	ori	r16, 0x02	; 2
    156e:	69 2d       	mov	r22, r9
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	0e 94 02 09 	call	0x1204	; 0x1204 <mulacc>
    157c:	96 2e       	mov	r9, r22
    157e:	f6 01       	movw	r30, r12
    1580:	f3 fc       	sbrc	r15, 3
    1582:	15 91       	lpm	r17, Z+
    1584:	f3 fe       	sbrs	r15, 3
    1586:	11 91       	ld	r17, Z+
    1588:	6f 01       	movw	r12, r30
    158a:	21 2f       	mov	r18, r17
    158c:	20 53       	subi	r18, 0x30	; 48
    158e:	2a 30       	cpi	r18, 0x0A	; 10
    1590:	68 f3       	brcs	.-38     	; 0x156c <vfscanf+0x78>
    1592:	01 fd       	sbrc	r16, 1
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfscanf+0xa8>
    1596:	99 24       	eor	r9, r9
    1598:	9a 94       	dec	r9
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <vfscanf+0xae>
    159c:	99 20       	and	r9, r9
    159e:	09 f4       	brne	.+2      	; 0x15a2 <vfscanf+0xae>
    15a0:	b2 c0       	rjmp	.+356    	; 0x1706 <vfscanf+0x212>
    15a2:	18 36       	cpi	r17, 0x68	; 104
    15a4:	21 f0       	breq	.+8      	; 0x15ae <vfscanf+0xba>
    15a6:	1c 36       	cpi	r17, 0x6C	; 108
    15a8:	99 f4       	brne	.+38     	; 0x15d0 <vfscanf+0xdc>
    15aa:	f6 01       	movw	r30, r12
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <vfscanf+0xd0>
    15ae:	f6 01       	movw	r30, r12
    15b0:	f3 fc       	sbrc	r15, 3
    15b2:	65 91       	lpm	r22, Z+
    15b4:	f3 fe       	sbrs	r15, 3
    15b6:	61 91       	ld	r22, Z+
    15b8:	68 36       	cpi	r22, 0x68	; 104
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <vfscanf+0xce>
    15bc:	6f 01       	movw	r12, r30
    15be:	16 2f       	mov	r17, r22
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <vfscanf+0xdc>
    15c2:	08 60       	ori	r16, 0x08	; 8
    15c4:	04 60       	ori	r16, 0x04	; 4
    15c6:	f3 fc       	sbrc	r15, 3
    15c8:	15 91       	lpm	r17, Z+
    15ca:	f3 fe       	sbrs	r15, 3
    15cc:	11 91       	ld	r17, Z+
    15ce:	6f 01       	movw	r12, r30
    15d0:	11 23       	and	r17, r17
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <vfscanf+0xe2>
    15d4:	98 c0       	rjmp	.+304    	; 0x1706 <vfscanf+0x212>
    15d6:	80 e7       	ldi	r24, 0x70	; 112
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	61 2f       	mov	r22, r17
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	0e 94 93 0b 	call	0x1726	; 0x1726 <strchr_P>
    15e2:	89 2b       	or	r24, r25
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <vfscanf+0xf4>
    15e6:	8f c0       	rjmp	.+286    	; 0x1706 <vfscanf+0x212>
    15e8:	80 2f       	mov	r24, r16
    15ea:	00 ff       	sbrs	r16, 0
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <vfscanf+0x100>
    15ee:	ee 24       	eor	r14, r14
    15f0:	ff 24       	eor	r15, r15
    15f2:	07 c0       	rjmp	.+14     	; 0x1602 <vfscanf+0x10e>
    15f4:	f3 01       	movw	r30, r6
    15f6:	e0 80       	ld	r14, Z
    15f8:	f1 80       	ldd	r15, Z+1	; 0x01
    15fa:	22 e0       	ldi	r18, 0x02	; 2
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	62 0e       	add	r6, r18
    1600:	73 1e       	adc	r7, r19
    1602:	1e 36       	cpi	r17, 0x6E	; 110
    1604:	51 f4       	brne	.+20     	; 0x161a <vfscanf+0x126>
    1606:	f5 01       	movw	r30, r10
    1608:	46 81       	ldd	r20, Z+6	; 0x06
    160a:	57 81       	ldd	r21, Z+7	; 0x07
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	c7 01       	movw	r24, r14
    1612:	20 2f       	mov	r18, r16
    1614:	0e 94 f6 08 	call	0x11ec	; 0x11ec <putval>
    1618:	65 c0       	rjmp	.+202    	; 0x16e4 <vfscanf+0x1f0>
    161a:	13 36       	cpi	r17, 0x63	; 99
    161c:	91 f4       	brne	.+36     	; 0x1642 <vfscanf+0x14e>
    161e:	81 fd       	sbrc	r24, 1
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfscanf+0x132>
    1622:	99 24       	eor	r9, r9
    1624:	93 94       	inc	r9
    1626:	c5 01       	movw	r24, r10
    1628:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    162c:	97 fd       	sbrc	r25, 7
    162e:	66 c0       	rjmp	.+204    	; 0x16fc <vfscanf+0x208>
    1630:	e1 14       	cp	r14, r1
    1632:	f1 04       	cpc	r15, r1
    1634:	19 f0       	breq	.+6      	; 0x163c <vfscanf+0x148>
    1636:	f7 01       	movw	r30, r14
    1638:	81 93       	st	Z+, r24
    163a:	7f 01       	movw	r14, r30
    163c:	9a 94       	dec	r9
    163e:	99 f7       	brne	.-26     	; 0x1626 <vfscanf+0x132>
    1640:	4f c0       	rjmp	.+158    	; 0x16e0 <vfscanf+0x1ec>
    1642:	1b 35       	cpi	r17, 0x5B	; 91
    1644:	59 f4       	brne	.+22     	; 0x165c <vfscanf+0x168>
    1646:	c5 01       	movw	r24, r10
    1648:	69 2d       	mov	r22, r9
    164a:	a7 01       	movw	r20, r14
    164c:	96 01       	movw	r18, r12
    164e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <conv_brk>
    1652:	6c 01       	movw	r12, r24
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	09 f0       	breq	.+2      	; 0x165a <vfscanf+0x166>
    1658:	43 c0       	rjmp	.+134    	; 0x16e0 <vfscanf+0x1ec>
    165a:	3d c0       	rjmp	.+122    	; 0x16d6 <vfscanf+0x1e2>
    165c:	c5 01       	movw	r24, r10
    165e:	0e 94 30 09 	call	0x1260	; 0x1260 <skip_spaces>
    1662:	97 fd       	sbrc	r25, 7
    1664:	4b c0       	rjmp	.+150    	; 0x16fc <vfscanf+0x208>
    1666:	1f 36       	cpi	r17, 0x6F	; 111
    1668:	59 f1       	breq	.+86     	; 0x16c0 <vfscanf+0x1cc>
    166a:	10 37       	cpi	r17, 0x70	; 112
    166c:	28 f4       	brcc	.+10     	; 0x1678 <vfscanf+0x184>
    166e:	14 36       	cpi	r17, 0x64	; 100
    1670:	29 f1       	breq	.+74     	; 0x16bc <vfscanf+0x1c8>
    1672:	19 36       	cpi	r17, 0x69	; 105
    1674:	39 f5       	brne	.+78     	; 0x16c4 <vfscanf+0x1d0>
    1676:	27 c0       	rjmp	.+78     	; 0x16c6 <vfscanf+0x1d2>
    1678:	13 37       	cpi	r17, 0x73	; 115
    167a:	19 f0       	breq	.+6      	; 0x1682 <vfscanf+0x18e>
    167c:	15 37       	cpi	r17, 0x75	; 117
    167e:	11 f5       	brne	.+68     	; 0x16c4 <vfscanf+0x1d0>
    1680:	1d c0       	rjmp	.+58     	; 0x16bc <vfscanf+0x1c8>
    1682:	c5 01       	movw	r24, r10
    1684:	0e 94 b4 0b 	call	0x1768	; 0x1768 <fgetc>
    1688:	ec 01       	movw	r28, r24
    168a:	97 fd       	sbrc	r25, 7
    168c:	11 c0       	rjmp	.+34     	; 0x16b0 <vfscanf+0x1bc>
    168e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <isspace>
    1692:	89 2b       	or	r24, r25
    1694:	29 f0       	breq	.+10     	; 0x16a0 <vfscanf+0x1ac>
    1696:	ce 01       	movw	r24, r28
    1698:	b5 01       	movw	r22, r10
    169a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ungetc>
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <vfscanf+0x1bc>
    16a0:	e1 14       	cp	r14, r1
    16a2:	f1 04       	cpc	r15, r1
    16a4:	19 f0       	breq	.+6      	; 0x16ac <vfscanf+0x1b8>
    16a6:	f7 01       	movw	r30, r14
    16a8:	c1 93       	st	Z+, r28
    16aa:	7f 01       	movw	r14, r30
    16ac:	9a 94       	dec	r9
    16ae:	49 f7       	brne	.-46     	; 0x1682 <vfscanf+0x18e>
    16b0:	e1 14       	cp	r14, r1
    16b2:	f1 04       	cpc	r15, r1
    16b4:	a9 f0       	breq	.+42     	; 0x16e0 <vfscanf+0x1ec>
    16b6:	f7 01       	movw	r30, r14
    16b8:	10 82       	st	Z, r1
    16ba:	12 c0       	rjmp	.+36     	; 0x16e0 <vfscanf+0x1ec>
    16bc:	00 62       	ori	r16, 0x20	; 32
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <vfscanf+0x1d2>
    16c0:	00 61       	ori	r16, 0x10	; 16
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <vfscanf+0x1d2>
    16c4:	00 64       	ori	r16, 0x40	; 64
    16c6:	c5 01       	movw	r24, r10
    16c8:	69 2d       	mov	r22, r9
    16ca:	a7 01       	movw	r20, r14
    16cc:	20 2f       	mov	r18, r16
    16ce:	0e 94 49 09 	call	0x1292	; 0x1292 <conv_int>
    16d2:	88 23       	and	r24, r24
    16d4:	29 f4       	brne	.+10     	; 0x16e0 <vfscanf+0x1ec>
    16d6:	f5 01       	movw	r30, r10
    16d8:	83 81       	ldd	r24, Z+3	; 0x03
    16da:	80 73       	andi	r24, 0x30	; 48
    16dc:	79 f4       	brne	.+30     	; 0x16fc <vfscanf+0x208>
    16de:	13 c0       	rjmp	.+38     	; 0x1706 <vfscanf+0x212>
    16e0:	00 ff       	sbrs	r16, 0
    16e2:	83 94       	inc	r8
    16e4:	f5 01       	movw	r30, r10
    16e6:	f3 80       	ldd	r15, Z+3	; 0x03
    16e8:	f6 01       	movw	r30, r12
    16ea:	f3 fc       	sbrc	r15, 3
    16ec:	15 91       	lpm	r17, Z+
    16ee:	f3 fe       	sbrs	r15, 3
    16f0:	11 91       	ld	r17, Z+
    16f2:	6f 01       	movw	r12, r30
    16f4:	11 23       	and	r17, r17
    16f6:	09 f0       	breq	.+2      	; 0x16fa <vfscanf+0x206>
    16f8:	0b cf       	rjmp	.-490    	; 0x1510 <vfscanf+0x1c>
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <vfscanf+0x212>
    16fc:	88 20       	and	r8, r8
    16fe:	19 f4       	brne	.+6      	; 0x1706 <vfscanf+0x212>
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfscanf+0x216>
    1706:	28 2d       	mov	r18, r8
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	c9 01       	movw	r24, r18
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	ee e0       	ldi	r30, 0x0E	; 14
    1712:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__epilogue_restores__+0x8>

00001716 <isspace>:
    1716:	91 11       	cpse	r25, r1
    1718:	e1 c0       	rjmp	.+450    	; 0x18dc <__ctype_isfalse>
    171a:	80 32       	cpi	r24, 0x20	; 32
    171c:	19 f0       	breq	.+6      	; 0x1724 <isspace+0xe>
    171e:	89 50       	subi	r24, 0x09	; 9
    1720:	85 50       	subi	r24, 0x05	; 5
    1722:	d0 f7       	brcc	.-12     	; 0x1718 <isspace+0x2>
    1724:	08 95       	ret

00001726 <strchr_P>:
    1726:	fc 01       	movw	r30, r24
    1728:	05 90       	lpm	r0, Z+
    172a:	06 16       	cp	r0, r22
    172c:	21 f0       	breq	.+8      	; 0x1736 <strchr_P+0x10>
    172e:	00 20       	and	r0, r0
    1730:	d9 f7       	brne	.-10     	; 0x1728 <strchr_P+0x2>
    1732:	c0 01       	movw	r24, r0
    1734:	08 95       	ret
    1736:	31 97       	sbiw	r30, 0x01	; 1
    1738:	cf 01       	movw	r24, r30
    173a:	08 95       	ret

0000173c <strnlen_P>:
    173c:	fc 01       	movw	r30, r24
    173e:	05 90       	lpm	r0, Z+
    1740:	61 50       	subi	r22, 0x01	; 1
    1742:	70 40       	sbci	r23, 0x00	; 0
    1744:	01 10       	cpse	r0, r1
    1746:	d8 f7       	brcc	.-10     	; 0x173e <strnlen_P+0x2>
    1748:	80 95       	com	r24
    174a:	90 95       	com	r25
    174c:	8e 0f       	add	r24, r30
    174e:	9f 1f       	adc	r25, r31
    1750:	08 95       	ret

00001752 <strnlen>:
    1752:	fc 01       	movw	r30, r24
    1754:	61 50       	subi	r22, 0x01	; 1
    1756:	70 40       	sbci	r23, 0x00	; 0
    1758:	01 90       	ld	r0, Z+
    175a:	01 10       	cpse	r0, r1
    175c:	d8 f7       	brcc	.-10     	; 0x1754 <strnlen+0x2>
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	8e 0f       	add	r24, r30
    1764:	9f 1f       	adc	r25, r31
    1766:	08 95       	ret

00001768 <fgetc>:
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	ec 01       	movw	r28, r24
    176e:	4b 81       	ldd	r20, Y+3	; 0x03
    1770:	40 ff       	sbrs	r20, 0
    1772:	1a c0       	rjmp	.+52     	; 0x17a8 <fgetc+0x40>
    1774:	46 ff       	sbrs	r20, 6
    1776:	0a c0       	rjmp	.+20     	; 0x178c <fgetc+0x24>
    1778:	4f 7b       	andi	r20, 0xBF	; 191
    177a:	4b 83       	std	Y+3, r20	; 0x03
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	9f 83       	std	Y+7, r25	; 0x07
    1784:	8e 83       	std	Y+6, r24	; 0x06
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	2b c0       	rjmp	.+86     	; 0x17e2 <fgetc+0x7a>
    178c:	42 ff       	sbrs	r20, 2
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <fgetc+0x4e>
    1790:	e8 81       	ld	r30, Y
    1792:	f9 81       	ldd	r31, Y+1	; 0x01
    1794:	80 81       	ld	r24, Z
    1796:	28 2f       	mov	r18, r24
    1798:	33 27       	eor	r19, r19
    179a:	27 fd       	sbrc	r18, 7
    179c:	30 95       	com	r19
    179e:	21 15       	cp	r18, r1
    17a0:	31 05       	cpc	r19, r1
    17a2:	29 f4       	brne	.+10     	; 0x17ae <fgetc+0x46>
    17a4:	40 62       	ori	r20, 0x20	; 32
    17a6:	4b 83       	std	Y+3, r20	; 0x03
    17a8:	2f ef       	ldi	r18, 0xFF	; 255
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <fgetc+0x7c>
    17ae:	31 96       	adiw	r30, 0x01	; 1
    17b0:	f9 83       	std	Y+1, r31	; 0x01
    17b2:	e8 83       	st	Y, r30
    17b4:	11 c0       	rjmp	.+34     	; 0x17d8 <fgetc+0x70>
    17b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    17b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    17ba:	ce 01       	movw	r24, r28
    17bc:	09 95       	icall
    17be:	9c 01       	movw	r18, r24
    17c0:	97 ff       	sbrs	r25, 7
    17c2:	0a c0       	rjmp	.+20     	; 0x17d8 <fgetc+0x70>
    17c4:	9b 81       	ldd	r25, Y+3	; 0x03
    17c6:	2f 5f       	subi	r18, 0xFF	; 255
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	11 f0       	breq	.+4      	; 0x17d0 <fgetc+0x68>
    17cc:	80 e2       	ldi	r24, 0x20	; 32
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <fgetc+0x6a>
    17d0:	80 e1       	ldi	r24, 0x10	; 16
    17d2:	89 2b       	or	r24, r25
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	e8 cf       	rjmp	.-48     	; 0x17a8 <fgetc+0x40>
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	9f 83       	std	Y+7, r25	; 0x07
    17e0:	8e 83       	std	Y+6, r24	; 0x06
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	c9 01       	movw	r24, r18
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <ungetc>:
    17ec:	9c 01       	movw	r18, r24
    17ee:	fb 01       	movw	r30, r22
    17f0:	83 81       	ldd	r24, Z+3	; 0x03
    17f2:	80 ff       	sbrs	r24, 0
    17f4:	11 c0       	rjmp	.+34     	; 0x1818 <ungetc+0x2c>
    17f6:	86 fd       	sbrc	r24, 6
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <ungetc+0x2c>
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	2f 3f       	cpi	r18, 0xFF	; 255
    17fe:	39 07       	cpc	r19, r25
    1800:	59 f0       	breq	.+22     	; 0x1818 <ungetc+0x2c>
    1802:	22 83       	std	Z+2, r18	; 0x02
    1804:	80 64       	ori	r24, 0x40	; 64
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	83 83       	std	Z+3, r24	; 0x03
    180a:	86 81       	ldd	r24, Z+6	; 0x06
    180c:	97 81       	ldd	r25, Z+7	; 0x07
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	97 83       	std	Z+7, r25	; 0x07
    1812:	86 83       	std	Z+6, r24	; 0x06
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <ungetc+0x30>
    1818:	2f ef       	ldi	r18, 0xFF	; 255
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	c9 01       	movw	r24, r18
    181e:	08 95       	ret

00001820 <__ultoa_invert>:
    1820:	fa 01       	movw	r30, r20
    1822:	aa 27       	eor	r26, r26
    1824:	28 30       	cpi	r18, 0x08	; 8
    1826:	51 f1       	breq	.+84     	; 0x187c <__ultoa_invert+0x5c>
    1828:	20 31       	cpi	r18, 0x10	; 16
    182a:	81 f1       	breq	.+96     	; 0x188c <__ultoa_invert+0x6c>
    182c:	e8 94       	clt
    182e:	6f 93       	push	r22
    1830:	6e 7f       	andi	r22, 0xFE	; 254
    1832:	6e 5f       	subi	r22, 0xFE	; 254
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8f 4f       	sbci	r24, 0xFF	; 255
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	af 4f       	sbci	r26, 0xFF	; 255
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	3e d0       	rcall	.+124    	; 0x18bc <__ultoa_invert+0x9c>
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	3c d0       	rcall	.+120    	; 0x18bc <__ultoa_invert+0x9c>
    1844:	67 0f       	add	r22, r23
    1846:	78 1f       	adc	r23, r24
    1848:	89 1f       	adc	r24, r25
    184a:	9a 1f       	adc	r25, r26
    184c:	a1 1d       	adc	r26, r1
    184e:	68 0f       	add	r22, r24
    1850:	79 1f       	adc	r23, r25
    1852:	8a 1f       	adc	r24, r26
    1854:	91 1d       	adc	r25, r1
    1856:	a1 1d       	adc	r26, r1
    1858:	6a 0f       	add	r22, r26
    185a:	71 1d       	adc	r23, r1
    185c:	81 1d       	adc	r24, r1
    185e:	91 1d       	adc	r25, r1
    1860:	a1 1d       	adc	r26, r1
    1862:	20 d0       	rcall	.+64     	; 0x18a4 <__ultoa_invert+0x84>
    1864:	09 f4       	brne	.+2      	; 0x1868 <__ultoa_invert+0x48>
    1866:	68 94       	set
    1868:	3f 91       	pop	r19
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	26 9f       	mul	r18, r22
    186e:	11 24       	eor	r1, r1
    1870:	30 19       	sub	r19, r0
    1872:	30 5d       	subi	r19, 0xD0	; 208
    1874:	31 93       	st	Z+, r19
    1876:	de f6       	brtc	.-74     	; 0x182e <__ultoa_invert+0xe>
    1878:	cf 01       	movw	r24, r30
    187a:	08 95       	ret
    187c:	46 2f       	mov	r20, r22
    187e:	47 70       	andi	r20, 0x07	; 7
    1880:	40 5d       	subi	r20, 0xD0	; 208
    1882:	41 93       	st	Z+, r20
    1884:	b3 e0       	ldi	r27, 0x03	; 3
    1886:	0f d0       	rcall	.+30     	; 0x18a6 <__ultoa_invert+0x86>
    1888:	c9 f7       	brne	.-14     	; 0x187c <__ultoa_invert+0x5c>
    188a:	f6 cf       	rjmp	.-20     	; 0x1878 <__ultoa_invert+0x58>
    188c:	46 2f       	mov	r20, r22
    188e:	4f 70       	andi	r20, 0x0F	; 15
    1890:	40 5d       	subi	r20, 0xD0	; 208
    1892:	4a 33       	cpi	r20, 0x3A	; 58
    1894:	18 f0       	brcs	.+6      	; 0x189c <__ultoa_invert+0x7c>
    1896:	49 5d       	subi	r20, 0xD9	; 217
    1898:	31 fd       	sbrc	r19, 1
    189a:	40 52       	subi	r20, 0x20	; 32
    189c:	41 93       	st	Z+, r20
    189e:	02 d0       	rcall	.+4      	; 0x18a4 <__ultoa_invert+0x84>
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__ultoa_invert+0x6c>
    18a2:	ea cf       	rjmp	.-44     	; 0x1878 <__ultoa_invert+0x58>
    18a4:	b4 e0       	ldi	r27, 0x04	; 4
    18a6:	a6 95       	lsr	r26
    18a8:	97 95       	ror	r25
    18aa:	87 95       	ror	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	ba 95       	dec	r27
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__ultoa_invert+0x86>
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 05       	cpc	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	08 95       	ret
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	0a 2e       	mov	r0, r26
    18c2:	06 94       	lsr	r0
    18c4:	57 95       	ror	r21
    18c6:	47 95       	ror	r20
    18c8:	37 95       	ror	r19
    18ca:	27 95       	ror	r18
    18cc:	ba 95       	dec	r27
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__ultoa_invert+0xa2>
    18d0:	62 0f       	add	r22, r18
    18d2:	73 1f       	adc	r23, r19
    18d4:	84 1f       	adc	r24, r20
    18d6:	95 1f       	adc	r25, r21
    18d8:	a0 1d       	adc	r26, r0
    18da:	08 95       	ret

000018dc <__ctype_isfalse>:
    18dc:	99 27       	eor	r25, r25
    18de:	88 27       	eor	r24, r24

000018e0 <__ctype_istrue>:
    18e0:	08 95       	ret

000018e2 <__prologue_saves__>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	ca 1b       	sub	r28, r26
    190c:	db 0b       	sbc	r29, r27
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	09 94       	ijmp

0000191a <__epilogue_restores__>:
    191a:	2a 88       	ldd	r2, Y+18	; 0x12
    191c:	39 88       	ldd	r3, Y+17	; 0x11
    191e:	48 88       	ldd	r4, Y+16	; 0x10
    1920:	5f 84       	ldd	r5, Y+15	; 0x0f
    1922:	6e 84       	ldd	r6, Y+14	; 0x0e
    1924:	7d 84       	ldd	r7, Y+13	; 0x0d
    1926:	8c 84       	ldd	r8, Y+12	; 0x0c
    1928:	9b 84       	ldd	r9, Y+11	; 0x0b
    192a:	aa 84       	ldd	r10, Y+10	; 0x0a
    192c:	b9 84       	ldd	r11, Y+9	; 0x09
    192e:	c8 84       	ldd	r12, Y+8	; 0x08
    1930:	df 80       	ldd	r13, Y+7	; 0x07
    1932:	ee 80       	ldd	r14, Y+6	; 0x06
    1934:	fd 80       	ldd	r15, Y+5	; 0x05
    1936:	0c 81       	ldd	r16, Y+4	; 0x04
    1938:	1b 81       	ldd	r17, Y+3	; 0x03
    193a:	aa 81       	ldd	r26, Y+2	; 0x02
    193c:	b9 81       	ldd	r27, Y+1	; 0x01
    193e:	ce 0f       	add	r28, r30
    1940:	d1 1d       	adc	r29, r1
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	ed 01       	movw	r28, r26
    194e:	08 95       	ret

00001950 <_exit>:
    1950:	f8 94       	cli

00001952 <__stop_program>:
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <__stop_program>
