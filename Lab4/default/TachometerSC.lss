
TachometerSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00003a64  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000181  008001a0  008001a0  00003b98  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004cf  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e67  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000126c  00000000  00000000  0000702e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f13  00000000  00000000  0000829a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000a1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000838  00000000  00000000  0000a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001541  00000000  00000000  0000adf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_1>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_11>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_13>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_21>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000070 <__c.1790>:
      70:	6e 61 6e 00                                         nan.

00000074 <__c.1788>:
      74:	69 6e 66 00                                         inf.

00000078 <__c.2085>:
      78:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      88:	47 00                                               G.

0000008a <pstr_an>:
      8a:	61 6e 00                                            an.

0000008d <pstr_nfinity>:
      8d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000095 <pwr_m10>:
      95:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a5:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000ad <pwr_p10>:
      ad:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bd:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000c5 <LcdCustomChar>:
      c5:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d5:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e5:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f5:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     105:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     115:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     125:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     135:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     145:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     155:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     165:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     175:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     185:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     195:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     1a5:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     1b5:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     1c5:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     1d5:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     1e5:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     1f5:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e1       	ldi	r29, 0x10	; 16
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e4 e6       	ldi	r30, 0x64	; 100
     214:	fa e3       	ldi	r31, 0x3A	; 58
     216:	02 c0       	rjmp	.+4      	; 0x21c <.do_copy_data_start>

00000218 <.do_copy_data_loop>:
     218:	05 90       	lpm	r0, Z+
     21a:	0d 92       	st	X+, r0

0000021c <.do_copy_data_start>:
     21c:	a0 3a       	cpi	r26, 0xA0	; 160
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <.do_copy_data_loop>

00000222 <__do_clear_bss>:
     222:	13 e0       	ldi	r17, 0x03	; 3
     224:	a0 ea       	ldi	r26, 0xA0	; 160
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a1 32       	cpi	r26, 0x21	; 33
     22e:	b1 07       	cpc	r27, r17
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 de 06 	call	0xdbc	; 0xdbc <main>
     236:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     284:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     288:	50 90 d0 02 	lds	r5, 0x02D0
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     28c:	b0 9b       	sbis	0x16, 0	; 22
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_13+0x7a>
    ++kernel.cycles;
     290:	80 91 12 03 	lds	r24, 0x0312
     294:	90 91 13 03 	lds	r25, 0x0313
     298:	a0 91 14 03 	lds	r26, 0x0314
     29c:	b0 91 15 03 	lds	r27, 0x0315
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 12 03 	sts	0x0312, r24
     2aa:	90 93 13 03 	sts	0x0313, r25
     2ae:	a0 93 14 03 	sts	0x0314, r26
     2b2:	b0 93 15 03 	sts	0x0315, r27
    TIFR1 |= (1<<TOV1) ;
     2b6:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     2b8:	80 91 84 00 	lds	r24, 0x0084
     2bc:	90 91 85 00 	lds	r25, 0x0085
     2c0:	3c 01       	movw	r6, r24
     2c2:	88 24       	eor	r8, r8
     2c4:	99 24       	eor	r9, r9
     2c6:	80 91 12 03 	lds	r24, 0x0312
     2ca:	90 91 13 03 	lds	r25, 0x0313
     2ce:	a0 91 14 03 	lds	r26, 0x0314
     2d2:	b0 91 15 03 	lds	r27, 0x0315
     2d6:	dc 01       	movw	r26, r24
     2d8:	99 27       	eor	r25, r25
     2da:	88 27       	eor	r24, r24
     2dc:	68 0e       	add	r6, r24
     2de:	79 1e       	adc	r7, r25
     2e0:	8a 1e       	adc	r8, r26
     2e2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	40 90 cf 02 	lds	r4, 0x02CF
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	ff ef       	ldi	r31, 0xFF	; 255
     2ee:	af 2e       	mov	r10, r31
     2f0:	ff ef       	ldi	r31, 0xFF	; 255
     2f2:	bf 2e       	mov	r11, r31
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 2e       	mov	r12, r31
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     2fc:	eb e0       	ldi	r30, 0x0B	; 11
     2fe:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     300:	33 24       	eor	r3, r3
     302:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     304:	cb e0       	ldi	r28, 0x0B	; 11
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	43 c0       	rjmp	.+134    	; 0x390 <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     30a:	62 9d       	mul	r22, r2
     30c:	d0 01       	movw	r26, r0
     30e:	11 24       	eor	r1, r1
     310:	af 52       	subi	r26, 0x2F	; 47
     312:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     314:	1a 96       	adiw	r26, 0x0a	; 10
     316:	8c 91       	ld	r24, X
     318:	1a 97       	sbiw	r26, 0x0a	; 10
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	a1 f4       	brne	.+40     	; 0x346 <__vector_13+0x108>
      if (t->release <= now) {
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	ed 90       	ld	r14, X+
     322:	fd 90       	ld	r15, X+
     324:	0d 91       	ld	r16, X+
     326:	1c 91       	ld	r17, X
     328:	15 97       	sbiw	r26, 0x05	; 5
     32a:	6e 14       	cp	r6, r14
     32c:	7f 04       	cpc	r7, r15
     32e:	80 06       	cpc	r8, r16
     330:	91 06       	cpc	r9, r17
     332:	20 f0       	brcs	.+8      	; 0x33c <__vector_13+0xfe>
	t->state = READYQ;
     334:	1a 96       	adiw	r26, 0x0a	; 10
     336:	3c 92       	st	X, r3
     338:	1a 97       	sbiw	r26, 0x0a	; 10
     33a:	05 c0       	rjmp	.+10     	; 0x346 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     33c:	ea 14       	cp	r14, r10
     33e:	fb 04       	cpc	r15, r11
     340:	0c 05       	cpc	r16, r12
     342:	1d 05       	cpc	r17, r13
     344:	10 f0       	brcs	.+4      	; 0x34a <__vector_13+0x10c>
     346:	86 01       	movw	r16, r12
     348:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     34a:	1a 96       	adiw	r26, 0x0a	; 10
     34c:	8c 91       	ld	r24, X
     34e:	1a 97       	sbiw	r26, 0x0a	; 10
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	d9 f4       	brne	.+54     	; 0x38a <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     354:	87 2f       	mov	r24, r23
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	9c 9f       	mul	r25, r28
     362:	f0 0d       	add	r31, r0
     364:	11 24       	eor	r1, r1
     366:	e1 53       	subi	r30, 0x31	; 49
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	16 96       	adiw	r26, 0x06	; 6
     36c:	2d 91       	ld	r18, X+
     36e:	3d 91       	ld	r19, X+
     370:	4d 91       	ld	r20, X+
     372:	5c 91       	ld	r21, X
     374:	19 97       	sbiw	r26, 0x09	; 9
     376:	80 85       	ldd	r24, Z+8	; 0x08
     378:	91 85       	ldd	r25, Z+9	; 0x09
     37a:	a2 85       	ldd	r26, Z+10	; 0x0a
     37c:	b3 85       	ldd	r27, Z+11	; 0x0b
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	4a 07       	cpc	r20, r26
     384:	5b 07       	cpc	r21, r27
     386:	08 f4       	brcc	.+2      	; 0x38a <__vector_13+0x14c>
     388:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	57 01       	movw	r10, r14
     38e:	68 01       	movw	r12, r16
     390:	46 16       	cp	r4, r22
     392:	08 f0       	brcs	.+2      	; 0x396 <__vector_13+0x158>
     394:	ba cf       	rjmp	.-140    	; 0x30a <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     396:	75 15       	cp	r23, r5
     398:	b1 f0       	breq	.+44     	; 0x3c6 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	5e 9e       	mul	r5, r30
     39e:	d0 01       	movw	r26, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	af 52       	subi	r26, 0x2F	; 47
     3a4:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     3a6:	8d b7       	in	r24, 0x3d	; 61
     3a8:	8c 93       	st	X, r24
    t->sph = SPH;
     3aa:	8e b7       	in	r24, 0x3e	; 62
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     3b0:	7e 9f       	mul	r23, r30
     3b2:	f0 01       	movw	r30, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	ef 52       	subi	r30, 0x2F	; 47
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     3be:	80 81       	ld	r24, Z
     3c0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     3c2:	70 93 d0 02 	sts	0x02D0, r23

  }

  kernel.nextHit = nextHit;  
     3c6:	a0 92 16 03 	sts	0x0316, r10
     3ca:	b0 92 17 03 	sts	0x0317, r11
     3ce:	c0 92 18 03 	sts	0x0318, r12
     3d2:	d0 92 19 03 	sts	0x0319, r13

  now = (kernel.cycles << 16) + TCNT1;
     3d6:	20 91 84 00 	lds	r18, 0x0084
     3da:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	80 91 12 03 	lds	r24, 0x0312
     3e6:	90 91 13 03 	lds	r25, 0x0313
     3ea:	a0 91 14 03 	lds	r26, 0x0314
     3ee:	b0 91 15 03 	lds	r27, 0x0315
     3f2:	dc 01       	movw	r26, r24
     3f4:	99 27       	eor	r25, r25
     3f6:	88 27       	eor	r24, r24
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	4a 1f       	adc	r20, r26
     3fe:	5b 1f       	adc	r21, r27
     400:	d6 01       	movw	r26, r12
     402:	c5 01       	movw	r24, r10
     404:	82 1b       	sub	r24, r18
     406:	93 0b       	sbc	r25, r19
     408:	a4 0b       	sbc	r26, r20
     40a:	b5 0b       	sbc	r27, r21
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	a1 05       	cpc	r26, r1
     416:	b1 05       	cpc	r27, r1
     418:	24 f4       	brge	.+8      	; 0x422 <__vector_13+0x1e4>
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     422:	80 91 84 00 	lds	r24, 0x0084
     426:	90 91 85 00 	lds	r25, 0x0085
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	a4 1f       	adc	r26, r20
     434:	b5 1f       	adc	r27, r21
     436:	80 50       	subi	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	a1 40       	sbci	r26, 0x01	; 1
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	38 f4       	brcc	.+14     	; 0x44e <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     440:	80 91 84 00 	lds	r24, 0x0084
     444:	90 91 85 00 	lds	r25, 0x0085
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     44e:	80 91 84 00 	lds	r24, 0x0084
     452:	90 91 85 00 	lds	r25, 0x0085
     456:	8c 5f       	subi	r24, 0xFC	; 252
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	28 f4       	brcc	.+10     	; 0x466 <__vector_13+0x228>
    OCR1A = 0x0000;
     45c:	10 92 89 00 	sts	0x0089, r1
     460:	10 92 88 00 	sts	0x0088, r1
     464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_13+0x234>
  } else {
    OCR1A = 4;
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 89 00 	sts	0x0089, r25
     46e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6f 00 	sts	0x006F, r24
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	bf 91       	pop	r27
     482:	af 91       	pop	r26
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	7f 91       	pop	r23
     48a:	6f 91       	pop	r22
     48c:	5f 91       	pop	r21
     48e:	4f 91       	pop	r20
     490:	3f 91       	pop	r19
     492:	2f 91       	pop	r18
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	3f 90       	pop	r3
     4b2:	2f 90       	pop	r2
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     4c6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	28 1b       	sub	r18, r24
     4dc:	39 0b       	sbc	r19, r25
     4de:	30 93 11 03 	sts	0x0311, r19
     4e2:	20 93 10 03 	sts	0x0310, r18
  kernel.nbrOfTasks = 0;
     4e6:	10 92 cf 02 	sts	0x02CF, r1
  kernel.running = 0;
     4ea:	10 92 d0 02 	sts	0x02D0, r1

  kernel.cycles = 0x0000;
     4ee:	10 92 12 03 	sts	0x0312, r1
     4f2:	10 92 13 03 	sts	0x0313, r1
     4f6:	10 92 14 03 	sts	0x0314, r1
     4fa:	10 92 15 03 	sts	0x0315, r1
  kernel.nextHit = 0x7FFFFFFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	af ef       	ldi	r26, 0xFF	; 255
     504:	bf e7       	ldi	r27, 0x7F	; 127
     506:	80 93 16 03 	sts	0x0316, r24
     50a:	90 93 17 03 	sts	0x0317, r25
     50e:	a0 93 18 03 	sts	0x0318, r26
     512:	b0 93 19 03 	sts	0x0319, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     516:	80 93 d7 02 	sts	0x02D7, r24
     51a:	90 93 d8 02 	sts	0x02D8, r25
     51e:	a0 93 d9 02 	sts	0x02D9, r26
     522:	b0 93 da 02 	sts	0x02DA, r27
  kernel.tasks[0].release = 0x00000000;
     526:	10 92 d3 02 	sts	0x02D3, r1
     52a:	10 92 d4 02 	sts	0x02D4, r1
     52e:	10 92 d5 02 	sts	0x02D5, r1
     532:	10 92 d6 02 	sts	0x02D6, r1

  sei(); /* set enabled interrupts */
     536:	78 94       	sei
}
     538:	08 95       	ret

0000053a <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	49 01       	movw	r8, r18
     554:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     556:	f8 94       	cli

  ++kernel.nbrOfTasks;
     558:	20 91 cf 02 	lds	r18, 0x02CF
     55c:	2f 5f       	subi	r18, 0xFF	; 255
     55e:	20 93 cf 02 	sts	0x02CF, r18

  sp = kernel.memptr;
     562:	c0 91 10 03 	lds	r28, 0x0310
     566:	d0 91 11 03 	lds	r29, 0x0311
  kernel.memptr -= stacksize;  // decrease free mem ptr
     56a:	9e 01       	movw	r18, r28
     56c:	26 1b       	sub	r18, r22
     56e:	37 0b       	sbc	r19, r23
     570:	30 93 11 03 	sts	0x0311, r19
     574:	20 93 10 03 	sts	0x0310, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     578:	88 83       	st	Y, r24
     57a:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     57c:	92 93       	st	-Z, r25
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     582:	ce 01       	movw	r24, r28
     584:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     58a:	a8 17       	cp	r26, r24
     58c:	b9 07       	cpc	r27, r25
     58e:	d9 f7       	brne	.-10     	; 0x586 <trtCreateTask+0x4c>
     590:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     592:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     594:	d2 92       	st	-Z, r13
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     59a:	9e 01       	movw	r18, r28
     59c:	23 52       	subi	r18, 0x23	; 35
     59e:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     5a0:	1c 92       	st	X, r1
     5a2:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     5a4:	a2 17       	cp	r26, r18
     5a6:	b3 07       	cpc	r27, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <trtCreateTask+0x66>
     5aa:	9f 01       	movw	r18, r30
     5ac:	26 50       	subi	r18, 0x06	; 6
     5ae:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     5b0:	e0 91 cf 02 	lds	r30, 0x02CF
     5b4:	8b e0       	ldi	r24, 0x0B	; 11
     5b6:	e8 9f       	mul	r30, r24
     5b8:	f0 01       	movw	r30, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	ef 52       	subi	r30, 0x2F	; 47
     5be:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     5c0:	82 82       	std	Z+2, r8	; 0x02
     5c2:	93 82       	std	Z+3, r9	; 0x03
     5c4:	a4 82       	std	Z+4, r10	; 0x04
     5c6:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	f7 82       	std	Z+7, r15	; 0x07
     5cc:	00 87       	std	Z+8, r16	; 0x08
     5ce:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     5d4:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     5d6:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     5d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>

}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	08 95       	ret

000005f6 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     5f6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     5f8:	ef ec       	ldi	r30, 0xCF	; 207
     5fa:	f2 e0       	ldi	r31, 0x02	; 2
     5fc:	e8 0f       	add	r30, r24
     5fe:	f1 1d       	adc	r31, r1
     600:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     602:	78 94       	sei
}
     604:	08 95       	ret

00000606 <trtWait>:

void trtWait(uint8_t semnbr) {
     606:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     608:	20 91 d0 02 	lds	r18, 0x02D0

  cli(); // disable interrupts
     60c:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     60e:	e8 2f       	mov	r30, r24
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e9 5f       	subi	r30, 0xF9	; 249
     614:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	19 f0       	breq	.+6      	; 0x622 <trtWait+0x1c>
    (*s)--;
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	10 c0       	rjmp	.+32     	; 0x642 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	ef 52       	subi	r30, 0x2F	; 47
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	4e 5f       	subi	r20, 0xFE	; 254
     63c:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	08 95       	ret

00000646 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     64e:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     650:	00 91 cf 02 	lds	r16, 0x02CF
     654:	e1 e0       	ldi	r30, 0x01	; 1
     656:	4f ef       	ldi	r20, 0xFF	; 255
     658:	5f ef       	ldi	r21, 0xFF	; 255
     65a:	6f ef       	ldi	r22, 0xFF	; 255
     65c:	7f ef       	ldi	r23, 0xFF	; 255
     65e:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     664:	21 2f       	mov	r18, r17
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     66e:	ef 9d       	mul	r30, r15
     670:	d0 01       	movw	r26, r0
     672:	11 24       	eor	r1, r1
     674:	af 52       	subi	r26, 0x2F	; 47
     676:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 91       	ld	r24, X
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	69 f4       	brne	.+26     	; 0x6a0 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	8d 91       	ld	r24, X+
     68a:	9d 91       	ld	r25, X+
     68c:	0d 90       	ld	r0, X+
     68e:	bc 91       	ld	r27, X
     690:	a0 2d       	mov	r26, r0
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <trtSignal+0x5a>
     69c:	fe 2f       	mov	r31, r30
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <trtSignal+0x5e>
     6a0:	db 01       	movw	r26, r22
     6a2:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	0e 17       	cp	r16, r30
     6ac:	00 f7       	brcc	.-64     	; 0x66e <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     6ae:	ff 23       	and	r31, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     6b2:	e1 2f       	mov	r30, r17
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e2 53       	subi	r30, 0x32	; 50
     6b8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ba:	81 ad       	ldd	r24, Z+57	; 0x39
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	81 af       	std	Z+57, r24	; 0x39
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     6c2:	2f 2f       	mov	r18, r31
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	e1 53       	subi	r30, 0x31	; 49
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     6ee:	20 91 84 00 	lds	r18, 0x0084
     6f2:	30 91 85 00 	lds	r19, 0x0085
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	80 91 12 03 	lds	r24, 0x0312
     6fe:	90 91 13 03 	lds	r25, 0x0313
     702:	a0 91 14 03 	lds	r26, 0x0314
     706:	b0 91 15 03 	lds	r27, 0x0315
     70a:	dc 01       	movw	r26, r24
     70c:	99 27       	eor	r25, r25
     70e:	88 27       	eor	r24, r24
     710:	28 0f       	add	r18, r24
     712:	39 1f       	adc	r19, r25
     714:	4a 1f       	adc	r20, r26
     716:	5b 1f       	adc	r21, r27
}
     718:	b9 01       	movw	r22, r18
     71a:	ca 01       	movw	r24, r20
     71c:	08 95       	ret

0000071e <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     71e:	e0 91 d0 02 	lds	r30, 0x02D0
     722:	ab e0       	ldi	r26, 0x0B	; 11
     724:	ea 9f       	mul	r30, r26
     726:	f0 01       	movw	r30, r0
     728:	11 24       	eor	r1, r1
     72a:	ef 52       	subi	r30, 0x2F	; 47
     72c:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     72e:	f8 94       	cli

  t->state = TIMEQ;
     730:	a2 e0       	ldi	r26, 0x02	; 2
     732:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	73 83       	std	Z+3, r23	; 0x03
     738:	84 83       	std	Z+4, r24	; 0x04
     73a:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     73c:	26 83       	std	Z+6, r18	; 0x06
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	40 87       	std	Z+8, r20	; 0x08
     742:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     744:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     748:	08 95       	ret

0000074a <trtGetRelease>:


uint32_t trtGetRelease(void) {
     74a:	80 91 d0 02 	lds	r24, 0x02D0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2b e0       	ldi	r18, 0x0B	; 11
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	82 9f       	mul	r24, r18
     756:	f0 01       	movw	r30, r0
     758:	83 9f       	mul	r24, r19
     75a:	f0 0d       	add	r31, r0
     75c:	92 9f       	mul	r25, r18
     75e:	f0 0d       	add	r31, r0
     760:	11 24       	eor	r1, r1
     762:	e1 53       	subi	r30, 0x31	; 49
     764:	fd 4f       	sbci	r31, 0xFD	; 253
     766:	df 01       	movw	r26, r30
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	64 81       	ldd	r22, Z+4	; 0x04
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     77e:	80 91 d0 02 	lds	r24, 0x02D0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2b e0       	ldi	r18, 0x0B	; 11
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	82 9f       	mul	r24, r18
     78a:	f0 01       	movw	r30, r0
     78c:	83 9f       	mul	r24, r19
     78e:	f0 0d       	add	r31, r0
     790:	92 9f       	mul	r25, r18
     792:	f0 0d       	add	r31, r0
     794:	11 24       	eor	r1, r1
     796:	e1 53       	subi	r30, 0x31	; 49
     798:	fd 4f       	sbci	r31, 0xFD	; 253
     79a:	df 01       	movw	r26, r30
     79c:	18 96       	adiw	r26, 0x08	; 8
     79e:	60 85       	ldd	r22, Z+8	; 0x08
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	7c 91       	ld	r23, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	8c 91       	ld	r24, X
     7aa:	12 97       	sbiw	r26, 0x02	; 2
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 91       	ld	r25, X
     7b0:	08 95       	ret

000007b2 <trtTerminate>:

void trtTerminate(void) {

  cli();
     7b2:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     7b4:	80 91 d0 02 	lds	r24, 0x02D0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e0       	ldi	r18, 0x0B	; 11
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	82 9f       	mul	r24, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	83 9f       	mul	r24, r19
     7c4:	f0 0d       	add	r31, r0
     7c6:	92 9f       	mul	r25, r18
     7c8:	f0 0d       	add	r31, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	e1 53       	subi	r30, 0x31	; 49
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7d2:	0e 94 1f 01 	call	0x23e	; 0x23e <__vector_13>
}
     7d6:	08 95       	ret

000007d8 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     7d8:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e9 5f       	subi	r30, 0xF9	; 249
     7e0:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     7e2:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <trtAccept+0x16>
    (*s)--;
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     7ee:	78 94       	sei
  return temp ;
}
     7f0:	08 95       	ret

000007f2 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     7f2:	87 e6       	ldi	r24, 0x67	; 103
     7f4:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     7f8:	e1 ec       	ldi	r30, 0xC1	; 193
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	88 e1       	ldi	r24, 0x18	; 24
     7fe:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     800:	10 92 ff 01 	sts	0x01FF, r1
     804:	10 92 fe 01 	sts	0x01FE, r1
  tx_out = 0;
     808:	10 92 01 02 	sts	0x0201, r1
     80c:	10 92 00 02 	sts	0x0200, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     810:	80 81       	ld	r24, Z
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 83       	st	Z, r24
}
     816:	08 95       	ret

00000818 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     82e:	20 91 fe 01 	lds	r18, 0x01FE
     832:	30 91 ff 01 	lds	r19, 0x01FF
     836:	80 91 00 02 	lds	r24, 0x0200
     83a:	90 91 01 02 	lds	r25, 0x0201
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	31 f4       	brne	.+12     	; 0x850 <__vector_21+0x38>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     844:	80 91 c1 00 	lds	r24, 0x00C1
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 93 c1 00 	sts	0x00C1, r24
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__vector_21+0x72>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     850:	e0 91 00 02 	lds	r30, 0x0200
     854:	f0 91 01 02 	lds	r31, 0x0201
     858:	ee 5f       	subi	r30, 0xFE	; 254
     85a:	fd 4f       	sbci	r31, 0xFD	; 253
     85c:	80 81       	ld	r24, Z
     85e:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     862:	80 91 00 02 	lds	r24, 0x0200
     866:	90 91 01 02 	lds	r25, 0x0201
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	90 93 01 02 	sts	0x0201, r25
     870:	80 93 00 02 	sts	0x0200, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     874:	80 91 00 02 	lds	r24, 0x0200
     878:	90 91 01 02 	lds	r25, 0x0201
     87c:	88 3c       	cpi	r24, 0xC8	; 200
     87e:	91 05       	cpc	r25, r1
     880:	21 f4       	brne	.+8      	; 0x88a <__vector_21+0x72>
     882:	10 92 01 02 	sts	0x0201, r1
     886:	10 92 00 02 	sts	0x0200, r1
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     8a0:	1f 93       	push	r17
     8a2:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	19 f4       	brne	.+6      	; 0x8ae <uart_putchar+0xe>
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
  char i = tx_in;
     8ae:	80 91 fe 01 	lds	r24, 0x01FE
     8b2:	90 91 ff 01 	lds	r25, 0x01FF
  i++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     8b8:	88 3c       	cpi	r24, 0xC8	; 200
     8ba:	09 f4       	brne	.+2      	; 0x8be <uart_putchar+0x1e>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     8be:	e0 91 fe 01 	lds	r30, 0x01FE
     8c2:	f0 91 ff 01 	lds	r31, 0x01FF
     8c6:	ee 5f       	subi	r30, 0xFE	; 254
     8c8:	fd 4f       	sbci	r31, 0xFD	; 253
     8ca:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	80 91 00 02 	lds	r24, 0x0200
     8d4:	90 91 01 02 	lds	r25, 0x0201
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	c9 f3       	breq	.-14     	; 0x8d0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     8de:	30 93 ff 01 	sts	0x01FF, r19
     8e2:	20 93 fe 01 	sts	0x01FE, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     8e6:	80 91 c1 00 	lds	r24, 0x00C1
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	1f 91       	pop	r17
     8f6:	08 95       	ret

000008f8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	trt_rx_c = UDR0;
     91a:	80 91 c6 00 	lds	r24, 0x00C6
     91e:	80 93 1a 03 	sts	0x031A, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     958:	80 91 ac 01 	lds	r24, 0x01AC
     95c:	90 91 ad 01 	lds	r25, 0x01AD
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <uart_getchar+0x1c>
     964:	a1 c0       	rjmp	.+322    	; 0xaa8 <uart_getchar+0x15e>
     966:	0e ea       	ldi	r16, 0xAE	; 174
     968:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	if (UCSR0A & _BV(FE0))
     970:	80 91 c0 00 	lds	r24, 0x00C0
     974:	84 ff       	sbrs	r24, 4
     976:	03 c0       	rjmp	.+6      	; 0x97e <uart_getchar+0x34>
     978:	2e ef       	ldi	r18, 0xFE	; 254
     97a:	3f ef       	ldi	r19, 0xFF	; 255
     97c:	a9 c0       	rjmp	.+338    	; 0xad0 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     97e:	80 91 c0 00 	lds	r24, 0x00C0
     982:	83 fd       	sbrc	r24, 3
     984:	a3 c0       	rjmp	.+326    	; 0xacc <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     986:	90 91 1a 03 	lds	r25, 0x031A

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     98a:	9d 30       	cpi	r25, 0x0D	; 13
     98c:	11 f0       	breq	.+4      	; 0x992 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     98e:	9a 30       	cpi	r25, 0x0A	; 10
     990:	81 f4       	brne	.+32     	; 0x9b2 <uart_getchar+0x68>
	  {
	    *cp = c;
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	f8 01       	movw	r30, r16
     996:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	    rxp = b;
     99e:	8e ea       	ldi	r24, 0xAE	; 174
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	90 93 ad 01 	sts	0x01AD, r25
     9a6:	80 93 ac 01 	sts	0x01AC, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     9b2:	99 30       	cpi	r25, 0x09	; 9
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <uart_getchar+0x6e>
     9b6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9b8:	89 2f       	mov	r24, r25
     9ba:	80 52       	subi	r24, 0x20	; 32
     9bc:	8f 35       	cpi	r24, 0x5F	; 95
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <uart_getchar+0x7a>
     9c0:	90 3a       	cpi	r25, 0xA0	; 160
     9c2:	70 f0       	brcs	.+28     	; 0x9e0 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	0d 3f       	cpi	r16, 0xFD	; 253
     9c8:	1f 07       	cpc	r17, r31
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     9d0:	f8 01       	movw	r30, r16
     9d2:	91 93       	st	Z+, r25
     9d4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     9d6:	89 2f       	mov	r24, r25
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     9de:	c5 cf       	rjmp	.-118    	; 0x96a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9e0:	92 31       	cpi	r25, 0x12	; 18
     9e2:	39 f1       	breq	.+78     	; 0xa32 <uart_getchar+0xe8>
     9e4:	93 31       	cpi	r25, 0x13	; 19
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <uart_getchar+0xac>
     9e8:	93 30       	cpi	r25, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <uart_getchar+0xa4>
     9ec:	6f c0       	rjmp	.+222    	; 0xacc <uart_getchar+0x182>
     9ee:	98 30       	cpi	r25, 0x08	; 8
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <uart_getchar+0xaa>
     9f2:	bb cf       	rjmp	.-138    	; 0x96a <uart_getchar+0x20>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <uart_getchar+0xbe>
     9f6:	97 31       	cpi	r25, 0x17	; 23
     9f8:	09 f4       	brne	.+2      	; 0x9fc <uart_getchar+0xb2>
     9fa:	4b c0       	rjmp	.+150    	; 0xa92 <uart_getchar+0x148>
     9fc:	9f 37       	cpi	r25, 0x7F	; 127
     9fe:	21 f0       	breq	.+8      	; 0xa08 <uart_getchar+0xbe>
     a00:	95 31       	cpi	r25, 0x15	; 21
     a02:	09 f0       	breq	.+2      	; 0xa06 <uart_getchar+0xbc>
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <uart_getchar+0x20>
     a06:	32 c0       	rjmp	.+100    	; 0xa6c <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	0e 3a       	cpi	r16, 0xAE	; 174
     a0c:	1f 07       	cpc	r17, r31
     a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_getchar+0xc8>
     a10:	08 f4       	brcc	.+2      	; 0xa14 <uart_getchar+0xca>
     a12:	ab cf       	rjmp	.-170    	; 0x96a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a1c:	80 e2       	ldi	r24, 0x20	; 32
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	10 40       	sbci	r17, 0x00	; 0
     a30:	9c cf       	rjmp	.-200    	; 0x96a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a3a:	ce ea       	ldi	r28, 0xAE	; 174
     a3c:	d1 e0       	ldi	r29, 0x01	; 1
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a40:	89 91       	ld	r24, Y+
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a48:	c0 17       	cp	r28, r16
     a4a:	d1 07       	cpc	r29, r17
     a4c:	c8 f3       	brcs	.-14     	; 0xa40 <uart_getchar+0xf6>
     a4e:	8d cf       	rjmp	.-230    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 3a       	cpi	r16, 0xAE	; 174
     a70:	18 07       	cpc	r17, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <uart_getchar+0x12c>
     a74:	68 f7       	brcc	.-38     	; 0xa50 <uart_getchar+0x106>
     a76:	79 cf       	rjmp	.-270    	; 0x96a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	b7 01       	movw	r22, r14
     a7c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar(' ', stream);
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
		uart_putchar('\b', stream);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_putchar>
     a90:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a92:	e1 e0       	ldi	r30, 0x01	; 1
     a94:	0e 3a       	cpi	r16, 0xAE	; 174
     a96:	1e 07       	cpc	r17, r30
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x152>
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <uart_getchar+0x154>
     a9c:	66 cf       	rjmp	.-308    	; 0x96a <uart_getchar+0x20>
     a9e:	e8 01       	movw	r28, r16
     aa0:	8a 91       	ld	r24, -Y
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	49 f7       	brne	.-46     	; 0xa78 <uart_getchar+0x12e>
     aa6:	61 cf       	rjmp	.-318    	; 0x96a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     aa8:	e0 91 ac 01 	lds	r30, 0x01AC
     aac:	f0 91 ad 01 	lds	r31, 0x01AD
     ab0:	81 91       	ld	r24, Z+
     ab2:	f0 93 ad 01 	sts	0x01AD, r31
     ab6:	e0 93 ac 01 	sts	0x01AC, r30
  if (c == '\n')
     aba:	8a 30       	cpi	r24, 0x0A	; 10
     abc:	21 f4       	brne	.+8      	; 0xac6 <uart_getchar+0x17c>
    rxp = 0;
     abe:	10 92 ad 01 	sts	0x01AD, r1
     ac2:	10 92 ac 01 	sts	0x01AC, r1

  return c;
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <uart_getchar+0x186>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
}
     ad0:	c9 01       	movw	r24, r18
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <__vector_1>:
//function signatures
void setParam(uint8_t, float); //Helper method for setting PID parameters
void InitLCD(void);

// --- external interrupt ISR ------------------------
ISR (INT0_vect) {
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
        motor_period = TCNT2 + motor_period_ovlf;
     af4:	e2 eb       	ldi	r30, 0xB2	; 178
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	20 81       	ld	r18, Z
     afa:	80 91 aa 01 	lds	r24, 0x01AA
     afe:	90 91 ab 01 	lds	r25, 0x01AB
     b02:	82 0f       	add	r24, r18
     b04:	91 1d       	adc	r25, r1
     b06:	90 93 a9 01 	sts	0x01A9, r25
     b0a:	80 93 a8 01 	sts	0x01A8, r24
        TCNT2 = 0 ;
     b0e:	10 82       	st	Z, r1
        motor_period_ovlf = 0 ;
     b10:	10 92 ab 01 	sts	0x01AB, r1
     b14:	10 92 aa 01 	sts	0x01AA, r1
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_11>:
// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     b3a:	80 91 aa 01 	lds	r24, 0x01AA
     b3e:	90 91 ab 01 	lds	r25, 0x01AB
     b42:	80 50       	subi	r24, 0x00	; 0
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	90 93 ab 01 	sts	0x01AB, r25
     b4a:	80 93 aa 01 	sts	0x01AA, r24
}
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <pidControl>:

//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void pidControl(void* args) 
  {	
     b5c:	2f 92       	push	r2
     b5e:	3f 92       	push	r3
     b60:	4f 92       	push	r4
     b62:	5f 92       	push	r5
     b64:	6f 92       	push	r6
     b66:	7f 92       	push	r7
     b68:	8f 92       	push	r8
     b6a:	9f 92       	push	r9
     b6c:	af 92       	push	r10
     b6e:	bf 92       	push	r11
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	27 97       	sbiw	r28, 0x07	; 7
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
	float localk_p;
	float localk_i;
	float localk_d;
	uint8_t first = 1;

	DDRB = 0xff;
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
     b94:	15 b8       	out	0x05, r1	; 5
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	29 83       	std	Y+1, r18	; 0x01
     b9a:	1a 82       	std	Y+2, r1	; 0x02
		if (!first){
			prevOmega = localOmega;
			prevSign = sign;
			prevError = error;
		}
		if (!motor_period) {
     b9c:	80 91 a8 01 	lds	r24, 0x01A8
     ba0:	90 91 a9 01 	lds	r25, 0x01A9
     ba4:	89 2b       	or	r24, r25
     ba6:	19 f4       	brne	.+6      	; 0xbae <pidControl+0x52>
     ba8:	1f 82       	std	Y+7, r1	; 0x07
     baa:	1e 82       	std	Y+6, r1	; 0x06
     bac:	1c c0       	rjmp	.+56     	; 0xbe6 <pidControl+0x8a>
			localOmega = 0;
		}
		else{
			localOmega = (uint16_t) ((16000000.0 / 1024.0) / (float)motor_period * 60.0);
     bae:	60 91 a8 01 	lds	r22, 0x01A8
     bb2:	70 91 a9 01 	lds	r23, 0x01A9
     bb6:	88 27       	eor	r24, r24
     bb8:	77 fd       	sbrc	r23, 7
     bba:	80 95       	com	r24
     bbc:	98 2f       	mov	r25, r24
     bbe:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatsisf>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	74 e2       	ldi	r23, 0x24	; 36
     bca:	84 e7       	ldi	r24, 0x74	; 116
     bcc:	96 e4       	ldi	r25, 0x46	; 70
     bce:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__divsf3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e7       	ldi	r20, 0x70	; 112
     bd8:	52 e4       	ldi	r21, 0x42	; 66
     bda:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
     bde:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
     be2:	7f 83       	std	Y+7, r23	; 0x07
     be4:	6e 83       	std	Y+6, r22	; 0x06
		}

		trtWait(SEM_OMEGA);
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		omega = localOmega; 
     bec:	8e 81       	ldd	r24, Y+6	; 0x06
     bee:	9f 81       	ldd	r25, Y+7	; 0x07
     bf0:	90 93 97 01 	sts	0x0197, r25
     bf4:	80 93 96 01 	sts	0x0196, r24
		trtSignal(SEM_OMEGA);
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_OMEGA_REF);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localOmegaRef = omegaRef;
     c04:	c0 90 94 01 	lds	r12, 0x0194
     c08:	d0 90 95 01 	lds	r13, 0x0195
		trtSignal(SEM_OMEGA_REF);
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_P);
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_p = k_p;
     c18:	e0 90 90 01 	lds	r14, 0x0190
     c1c:	f0 90 91 01 	lds	r15, 0x0191
     c20:	00 91 92 01 	lds	r16, 0x0192
     c24:	10 91 93 01 	lds	r17, 0x0193
		trtSignal(SEM_K_P);
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_I);
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_i = k_i;
     c34:	80 90 a0 01 	lds	r8, 0x01A0
     c38:	90 90 a1 01 	lds	r9, 0x01A1
     c3c:	a0 90 a2 01 	lds	r10, 0x01A2
     c40:	b0 90 a3 01 	lds	r11, 0x01A3
		trtSignal(SEM_K_I);
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		trtWait(SEM_K_D);
     c4a:	86 e0       	ldi	r24, 0x06	; 6
     c4c:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localk_d = k_d;
     c50:	40 90 a4 01 	lds	r4, 0x01A4
     c54:	50 90 a5 01 	lds	r5, 0x01A5
     c58:	60 90 a6 01 	lds	r6, 0x01A6
     c5c:	70 90 a7 01 	lds	r7, 0x01A7
		trtSignal(SEM_K_D);
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Proportional Error
		error = localOmegaRef - localOmega;
     c66:	ee 81       	ldd	r30, Y+6	; 0x06
     c68:	ff 81       	ldd	r31, Y+7	; 0x07
     c6a:	ce 1a       	sub	r12, r30
     c6c:	df 0a       	sbc	r13, r31

		//Integral Error

		//Get the current sign of the error
		if (!first) {
     c6e:	f9 81       	ldd	r31, Y+1	; 0x01
     c70:	ff 23       	and	r31, r31
     c72:	c1 f4       	brne	.+48     	; 0xca4 <pidControl+0x148>
			if (error - prevError > 0){
     c74:	96 01       	movw	r18, r12
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	28 1b       	sub	r18, r24
     c7c:	39 0b       	sbc	r19, r25
     c7e:	3f 83       	std	Y+7, r19	; 0x07
     c80:	2e 83       	std	Y+6, r18	; 0x06
     c82:	12 16       	cp	r1, r18
     c84:	13 06       	cpc	r1, r19
     c86:	1c f4       	brge	.+6      	; 0xc8e <pidControl+0x132>
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	56 c0       	rjmp	.+172    	; 0xd3a <pidControl+0x1de>
				sign = 1;
			}
			else if (error - prevError < 0) {
     c8e:	ee 81       	ldd	r30, Y+6	; 0x06
     c90:	ff 81       	ldd	r31, Y+7	; 0x07
     c92:	ef 2b       	or	r30, r31
     c94:	09 f4       	brne	.+2      	; 0xc98 <pidControl+0x13c>
     c96:	50 c0       	rjmp	.+160    	; 0xd38 <pidControl+0x1dc>
     c98:	ff ef       	ldi	r31, 0xFF	; 255
     c9a:	fa 83       	std	Y+2, r31	; 0x02
     c9c:	4e c0       	rjmp	.+156    	; 0xd3a <pidControl+0x1de>
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
				integral += error;
     c9e:	2c 0c       	add	r2, r12
     ca0:	3d 1c       	adc	r3, r13
     ca2:	52 c0       	rjmp	.+164    	; 0xd48 <pidControl+0x1ec>
		//determine what the output should be
		if (!first){
			output = localk_p * error + localk_i * integral + localk_d * derivative;
		}
		else{
			output = localk_p * error;
     ca4:	b6 01       	movw	r22, r12
     ca6:	88 27       	eor	r24, r24
     ca8:	77 fd       	sbrc	r23, 7
     caa:	80 95       	com	r24
     cac:	98 2f       	mov	r25, r24
     cae:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatsisf>
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
     cb6:	c8 01       	movw	r24, r16
     cb8:	b7 01       	movw	r22, r14
     cba:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
     cbe:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fixsfsi>
			first = 0;
		}

		if (output < 0){
     cc2:	77 ff       	sbrs	r23, 7
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <pidControl+0x16e>
			OCR0A = 0;
     cc6:	17 bc       	out	0x27, r1	; 39
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <pidControl+0x17e>
		}
		else if (output > 255) {
     cca:	6f 3f       	cpi	r22, 0xFF	; 255
     ccc:	71 05       	cpc	r23, r1
     cce:	21 f0       	breq	.+8      	; 0xcd8 <pidControl+0x17c>
     cd0:	1c f0       	brlt	.+6      	; 0xcd8 <pidControl+0x17c>
			OCR0A = 255;
     cd2:	2f ef       	ldi	r18, 0xFF	; 255
     cd4:	27 bd       	out	0x27, r18	; 39
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <pidControl+0x17e>
		}
		else {
			OCR0A = output;
     cd8:	67 bd       	out	0x27, r22	; 39
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     cda:	20 91 12 03 	lds	r18, 0x0312
     cde:	30 91 13 03 	lds	r19, 0x0313
     ce2:	40 91 14 03 	lds	r20, 0x0314
     ce6:	50 91 15 03 	lds	r21, 0x0315
     cea:	a9 01       	movw	r20, r18
     cec:	33 27       	eor	r19, r19
     cee:	22 27       	eor	r18, r18
     cf0:	60 91 84 00 	lds	r22, 0x0084
     cf4:	70 91 85 00 	lds	r23, 0x0085
		}

		rel = trtCurrentTime() + SECONDS2TICKS(0.02);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.025);
	    trtSleepUntil(rel, dead);
     cf8:	e0 90 84 00 	lds	r14, 0x0084
     cfc:	f0 90 85 00 	lds	r15, 0x0085
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	62 0f       	add	r22, r18
     d06:	73 1f       	adc	r23, r19
     d08:	84 1f       	adc	r24, r20
     d0a:	95 1f       	adc	r25, r21
     d0c:	68 5c       	subi	r22, 0xC8	; 200
     d0e:	7e 4f       	sbci	r23, 0xFE	; 254
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	2e 0d       	add	r18, r14
     d1a:	3f 1d       	adc	r19, r15
     d1c:	40 1f       	adc	r20, r16
     d1e:	51 1f       	adc	r21, r17
     d20:	2a 57       	subi	r18, 0x7A	; 122
     d22:	3e 4f       	sbci	r19, 0xFE	; 254
     d24:	4f 4f       	sbci	r20, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	3a 81       	ldd	r19, Y+2	; 0x02
     d30:	3b 83       	std	Y+3, r19	; 0x03
     d32:	dd 82       	std	Y+5, r13	; 0x05
     d34:	cc 82       	std	Y+4, r12	; 0x04
     d36:	32 cf       	rjmp	.-412    	; 0xb9c <pidControl+0x40>
     d38:	1a 82       	std	Y+2, r1	; 0x02
			}
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	89 17       	cp	r24, r25
     d40:	09 f4       	brne	.+2      	; 0xd44 <pidControl+0x1e8>
     d42:	ad cf       	rjmp	.-166    	; 0xc9e <pidControl+0x142>
     d44:	22 24       	eor	r2, r2
     d46:	33 24       	eor	r3, r3
			derivative = error - prevError;
		}

		//determine what the output should be
		if (!first){
			output = localk_p * error + localk_i * integral + localk_d * derivative;
     d48:	b6 01       	movw	r22, r12
     d4a:	88 27       	eor	r24, r24
     d4c:	77 fd       	sbrc	r23, 7
     d4e:	80 95       	com	r24
     d50:	98 2f       	mov	r25, r24
     d52:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatsisf>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c8 01       	movw	r24, r16
     d5c:	b7 01       	movw	r22, r14
     d5e:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
     d62:	7b 01       	movw	r14, r22
     d64:	8c 01       	movw	r16, r24
     d66:	b1 01       	movw	r22, r2
     d68:	88 27       	eor	r24, r24
     d6a:	77 fd       	sbrc	r23, 7
     d6c:	80 95       	com	r24
     d6e:	98 2f       	mov	r25, r24
     d70:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatsisf>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	c5 01       	movw	r24, r10
     d7a:	b4 01       	movw	r22, r8
     d7c:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c8 01       	movw	r24, r16
     d86:	b7 01       	movw	r22, r14
     d88:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__addsf3>
     d8c:	7b 01       	movw	r14, r22
     d8e:	8c 01       	movw	r16, r24
     d90:	ee 81       	ldd	r30, Y+6	; 0x06
     d92:	ff 81       	ldd	r31, Y+7	; 0x07
     d94:	bf 01       	movw	r22, r30
     d96:	88 27       	eor	r24, r24
     d98:	77 fd       	sbrc	r23, 7
     d9a:	80 95       	com	r24
     d9c:	98 2f       	mov	r25, r24
     d9e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatsisf>
     da2:	9b 01       	movw	r18, r22
     da4:	ac 01       	movw	r20, r24
     da6:	c3 01       	movw	r24, r6
     da8:	b2 01       	movw	r22, r4
     daa:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c8 01       	movw	r24, r16
     db4:	b7 01       	movw	r22, r14
     db6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__addsf3>
     dba:	81 cf       	rjmp	.-254    	; 0xcbe <pidControl+0x162>

00000dbc <main>:
  LCDclr();        //clear the display
  LCDGotoXY(0,0);
}

// --- Main Program ----------------------------------
int main(void) {
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17

  DDRD = 0b11111011;
     dc8:	8b ef       	ldi	r24, 0xFB	; 251
     dca:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0;
     dcc:	1b b8       	out	0x0b, r1	; 11
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     dce:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     dd2:	62 e8       	ldi	r22, 0x82	; 130
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	70 93 20 03 	sts	0x0320, r23
     dda:	60 93 1f 03 	sts	0x031F, r22
     dde:	70 93 1c 03 	sts	0x031C, r23
     de2:	60 93 1b 03 	sts	0x031B, r22
     de6:	70 93 1e 03 	sts	0x031E, r23
     dea:	60 93 1d 03 	sts	0x031D, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <fputs>
  
  //initialize Timer2 and the external interrupt
  //set up INT0
	EIMSK = 1<<INT0 ; // turn on int0
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9d bb       	out	0x1d, r25	; 29
	EICRA = 3 ;       // rising edge
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	80 93 69 00 	sts	0x0069, r24
	// turn on timer 2 to be read in int0 ISR
	TCCR2B = 7 ; // divide by 1024
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	80 93 b1 00 	sts	0x00B1, r24
	// turn on timer 2 overflow ISR for double precision time
	TIMSK2 = 1 ;
     e06:	90 93 70 00 	sts	0x0070, r25

  //setup Timer 0
  // Set the timer for fast PWM mode, clear OC0A on Compare Match, set OC0A
  // at BOTTOM (non-inverting mode)
  TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); //Set the timer
     e0a:	83 e8       	ldi	r24, 0x83	; 131
     e0c:	84 bd       	out	0x24, r24	; 36

  //Set the prescalar to 256 so the PWM runs at less than 1000 Hz
  TCCR0B = (1 << CS02) | (1 << CS00);
     e0e:	85 e0       	ldi	r24, 0x05	; 5
     e10:	85 bd       	out	0x25, r24	; 37

  OCR0A = 127;
     e12:	8f e7       	ldi	r24, 0x7F	; 127
     e14:	87 bd       	out	0x27, r24	; 39

  // start TRT
  trtInitKernel(128); // 80 bytes for the idle task stack
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 5f 02 	call	0x4be	; 0x4be <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e1e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e20:	10 92 08 03 	sts	0x0308, r1
  
  sei(); // set enabled interrupts;
     e24:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e26:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e28:	10 92 09 03 	sts	0x0309, r1
  
  sei(); // set enabled interrupts;
     e2c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e2e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 0a 03 	sts	0x030A, r24
  
  sei(); // set enabled interrupts;
     e36:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e38:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e3a:	80 93 0e 03 	sts	0x030E, r24
  
  sei(); // set enabled interrupts;
     e3e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e40:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e42:	80 93 0b 03 	sts	0x030B, r24
  
  sei(); // set enabled interrupts;
     e46:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e48:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e4a:	80 93 0c 03 	sts	0x030C, r24
  
  sei(); // set enabled interrupts;
     e4e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     e50:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     e52:	80 93 0d 03 	sts	0x030D, r24
  
  sei(); // set enabled interrupts;
     e56:	78 94       	sei
  trtCreateSemaphore(SEM_OMEGA, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_P, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_I, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_K_D, 1) ; // protect shared variables
 // --- creat tasks  ----------------
  trtCreateTask(pidControl, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     e58:	8e ea       	ldi	r24, 0xAE	; 174
     e5a:	95 e0       	ldi	r25, 0x05	; 5
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	2d e0       	ldi	r18, 0x0D	; 13
     e62:	33 e0       	ldi	r19, 0x03	; 3
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	bd e0       	ldi	r27, 0x0D	; 13
     e6a:	eb 2e       	mov	r14, r27
     e6c:	b3 e0       	ldi	r27, 0x03	; 3
     e6e:	fb 2e       	mov	r15, r27
     e70:	01 2d       	mov	r16, r1
     e72:	11 2d       	mov	r17, r1
     e74:	aa ec       	ldi	r26, 0xCA	; 202
     e76:	ca 2e       	mov	r12, r26
     e78:	a2 e0       	ldi	r26, 0x02	; 2
     e7a:	da 2e       	mov	r13, r26
     e7c:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(serialComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     e80:	8b e9       	ldi	r24, 0x9B	; 155
     e82:	9a e0       	ldi	r25, 0x0A	; 10
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	71 e0       	ldi	r23, 0x01	; 1
     e88:	2a e1       	ldi	r18, 0x1A	; 26
     e8a:	36 e0       	ldi	r19, 0x06	; 6
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	fa e1       	ldi	r31, 0x1A	; 26
     e92:	ef 2e       	mov	r14, r31
     e94:	f6 e0       	ldi	r31, 0x06	; 6
     e96:	ff 2e       	mov	r15, r31
     e98:	01 2d       	mov	r16, r1
     e9a:	11 2d       	mov	r17, r1
     e9c:	ec ec       	ldi	r30, 0xCC	; 204
     e9e:	ce 2e       	mov	r12, r30
     ea0:	e2 e0       	ldi	r30, 0x02	; 2
     ea2:	de 2e       	mov	r13, r30
     ea4:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  trtCreateTask(displayParams, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     ea8:	82 e7       	ldi	r24, 0x72	; 114
     eaa:	97 e0       	ldi	r25, 0x07	; 7
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	2a e1       	ldi	r18, 0x1A	; 26
     eb2:	36 e0       	ldi	r19, 0x06	; 6
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 9d 02 	call	0x53a	; 0x53a <trtCreateTask>
  
  sei();
     ebc:	78 94       	sei
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     ebe:	83 b7       	in	r24, 0x33	; 51
     ec0:	81 7f       	andi	r24, 0xF1	; 241
     ec2:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     ec4:	83 b7       	in	r24, 0x33	; 51
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
     eca:	88 95       	sleep
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <main+0x10e>

00000ece <InitLCD>:
	}
}

// --- Initialize the LCD ----------------------------
void InitLCD(void){
  LCDinit();  //initialize the display
     ece:	0e 94 36 0c 	call	0x186c	; 0x186c <LCDinit>
  LCDcursorOFF();
     ed2:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCDcursorOFF>
  LCDclr();        //clear the display
     ed6:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCDclr>
  LCDGotoXY(0,0);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
}
     ee2:	08 95       	ret

00000ee4 <displayParams>:
	}
  }

// --- spoiler ---------------------------------------
void displayParams(void* args) 
{
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	e0 97       	sbiw	r28, 0x30	; 48
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
	//String constants
	const uint8_t LCDSpeed[9] = "SPEED: \0";
     f18:	de 01       	movw	r26, r28
     f1a:	57 96       	adiw	r26, 0x17	; 23
     f1c:	e3 e2       	ldi	r30, 0x23	; 35
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	89 e0       	ldi	r24, 0x09	; 9
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	e1 f7       	brne	.-8      	; 0xf22 <displayParams+0x3e>
	const uint8_t LCDRPM[5] = "RPM\0";
     f2a:	de 01       	movw	r26, r28
     f2c:	52 96       	adiw	r26, 0x12	; 18
     f2e:	ec e2       	ldi	r30, 0x2C	; 44
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	01 90       	ld	r0, Z+
     f36:	0d 92       	st	X+, r0
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <displayParams+0x50>
	uint8_t updateOmegaRef;
	uint8_t updatek_p;
	uint8_t updatek_i;
	uint8_t updatek_d;

	trtWait(SEM_OMEGA_REF);
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	int localOmegaRef = omegaRef;
     f42:	60 90 94 01 	lds	r6, 0x0194
     f46:	70 90 95 01 	lds	r7, 0x0195
	trtSignal(SEM_OMEGA_REF);
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_P);
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_p = k_p;
     f56:	80 91 90 01 	lds	r24, 0x0190
     f5a:	8f a3       	std	Y+39, r24	; 0x27
     f5c:	90 91 91 01 	lds	r25, 0x0191
     f60:	98 a7       	std	Y+40, r25	; 0x28
     f62:	a0 91 92 01 	lds	r26, 0x0192
     f66:	a9 a7       	std	Y+41, r26	; 0x29
     f68:	b0 91 93 01 	lds	r27, 0x0193
     f6c:	ba a7       	std	Y+42, r27	; 0x2a
	trtSignal(SEM_K_P);
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_I);
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_i = k_i;
     f7a:	80 91 a0 01 	lds	r24, 0x01A0
     f7e:	8b a3       	std	Y+35, r24	; 0x23
     f80:	90 91 a1 01 	lds	r25, 0x01A1
     f84:	9c a3       	std	Y+36, r25	; 0x24
     f86:	a0 91 a2 01 	lds	r26, 0x01A2
     f8a:	ad a3       	std	Y+37, r26	; 0x25
     f8c:	b0 91 a3 01 	lds	r27, 0x01A3
     f90:	be a3       	std	Y+38, r27	; 0x26
	trtSignal(SEM_K_I);
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

	trtWait(SEM_K_D);
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
	float localk_d = k_d;
     f9e:	80 91 a4 01 	lds	r24, 0x01A4
     fa2:	88 a3       	std	Y+32, r24	; 0x20
     fa4:	90 91 a5 01 	lds	r25, 0x01A5
     fa8:	99 a3       	std	Y+33, r25	; 0x21
     faa:	a0 91 a6 01 	lds	r26, 0x01A6
     fae:	aa a3       	std	Y+34, r26	; 0x22
     fb0:	20 90 a7 01 	lds	r2, 0x01A7
	trtSignal(SEM_K_D);
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


	//initialize the LCD
	InitLCD();
     fba:	0e 94 67 07 	call	0xece	; 0xece <InitLCD>
	LCDGotoXY(0, 0);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
  	LCDstring(LCDSpeed, SPEED_LEN);
     fc6:	ce 01       	movw	r24, r28
     fc8:	47 96       	adiw	r24, 0x17	; 23
     fca:	67 e0       	ldi	r22, 0x07	; 7
     fcc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
  	
	sprintf(LCDOmega, "%i", omega);
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <displayParams+0xee>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <displayParams+0xf0>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <displayParams+0xf2>
     fd6:	ed b7       	in	r30, 0x3d	; 61
     fd8:	fe b7       	in	r31, 0x3e	; 62
     fda:	31 96       	adiw	r30, 0x01	; 1
     fdc:	8e 01       	movw	r16, r28
     fde:	02 5f       	subi	r16, 0xF2	; 242
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	ad b7       	in	r26, 0x3d	; 61
     fe4:	be b7       	in	r27, 0x3e	; 62
     fe6:	12 96       	adiw	r26, 0x02	; 2
     fe8:	1c 93       	st	X, r17
     fea:	0e 93       	st	-X, r16
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	84 e1       	ldi	r24, 0x14	; 20
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	93 83       	std	Z+3, r25	; 0x03
     ff4:	82 83       	std	Z+2, r24	; 0x02
     ff6:	80 91 96 01 	lds	r24, 0x0196
     ffa:	90 91 97 01 	lds	r25, 0x0197
     ffe:	95 83       	std	Z+5, r25	; 0x05
    1000:	84 83       	std	Z+4, r24	; 0x04
    1002:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
	LCDGotoXY(OMEGA_LOC, 0);
    1006:	8d b7       	in	r24, 0x3d	; 61
    1008:	9e b7       	in	r25, 0x3e	; 62
    100a:	06 96       	adiw	r24, 0x06	; 6
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	9e bf       	out	0x3e, r25	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	8d bf       	out	0x3d, r24	; 61
    1016:	87 e0       	ldi	r24, 0x07	; 7
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
	omegaLen = strlen(LCDOmega);
    101e:	f8 01       	movw	r30, r16
    1020:	01 90       	ld	r0, Z+
    1022:	00 20       	and	r0, r0
    1024:	e9 f7       	brne	.-6      	; 0x1020 <displayParams+0x13c>
    1026:	31 97       	sbiw	r30, 0x01	; 1
    1028:	6e 2f       	mov	r22, r30
    102a:	60 1b       	sub	r22, r16
	if (omegaLen >= OMEGA_LEN) {
    102c:	64 30       	cpi	r22, 0x04	; 4
    102e:	08 f0       	brcs	.+2      	; 0x1032 <displayParams+0x14e>
    1030:	64 e0       	ldi	r22, 0x04	; 4
		omegaLen = OMEGA_LEN;
	}
	LCDstring(LCDOmega, omegaLen);
    1032:	ce 01       	movw	r24, r28
    1034:	0e 96       	adiw	r24, 0x0e	; 14
    1036:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>

	LCDGotoXY(RPM_LOC, 0);
    103a:	8d e0       	ldi	r24, 0x0D	; 13
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
	LCDstring(LCDRPM, RPM_LEN);
    1042:	ce 01       	movw	r24, r28
    1044:	42 96       	adiw	r24, 0x12	; 18
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>

	sprintf(LCDOmegaRef, "%i", localOmegaRef);
    104c:	00 d0       	rcall	.+0      	; 0x104e <displayParams+0x16a>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <displayParams+0x16c>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <displayParams+0x16e>
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	8e 01       	movw	r16, r28
    105a:	06 5f       	subi	r16, 0xF6	; 246
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	ad b7       	in	r26, 0x3d	; 61
    1060:	be b7       	in	r27, 0x3e	; 62
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	1c 93       	st	X, r17
    1066:	0e 93       	st	-X, r16
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	84 e1       	ldi	r24, 0x14	; 20
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	93 83       	std	Z+3, r25	; 0x03
    1070:	82 83       	std	Z+2, r24	; 0x02
    1072:	75 82       	std	Z+5, r7	; 0x05
    1074:	64 82       	std	Z+4, r6	; 0x04
    1076:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
	omegaRefLen = strlen(LCDOmegaRef);
    107a:	f8 01       	movw	r30, r16
    107c:	01 90       	ld	r0, Z+
    107e:	00 20       	and	r0, r0
    1080:	e9 f7       	brne	.-6      	; 0x107c <displayParams+0x198>
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	be 2f       	mov	r27, r30
    1086:	b0 1b       	sub	r27, r16
    1088:	0b 2f       	mov	r16, r27
	if (omegaRefLen >= OMEGA_REF_LEN) {
    108a:	8d b7       	in	r24, 0x3d	; 61
    108c:	9e b7       	in	r25, 0x3e	; 62
    108e:	06 96       	adiw	r24, 0x06	; 6
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	9e bf       	out	0x3e, r25	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	8d bf       	out	0x3d, r24	; 61
    109a:	b4 30       	cpi	r27, 0x04	; 4
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <displayParams+0x1bc>
    109e:	04 e0       	ldi	r16, 0x04	; 4
		omegaRefLen = OMEGA_REF_LEN;
	}
    LCDGotoXY(OMEGA_REF_LOC, 1);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
    LCDstring(LCDOmegaRef, omegaRefLen);
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	82 2e       	mov	r8, r18
    10ac:	91 2c       	mov	r9, r1
    10ae:	8c 0e       	add	r8, r28
    10b0:	9d 1e       	adc	r9, r29
    10b2:	c4 01       	movw	r24, r8
    10b4:	60 2f       	mov	r22, r16
    10b6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
	
	sprintf(LCDk_p, "%f", localk_p);
    10ba:	ad b7       	in	r26, 0x3d	; 61
    10bc:	be b7       	in	r27, 0x3e	; 62
    10be:	18 97       	sbiw	r26, 0x08	; 8
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	be bf       	out	0x3e, r27	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	ad bf       	out	0x3d, r26	; 61
    10ca:	ed b7       	in	r30, 0x3d	; 61
    10cc:	fe b7       	in	r31, 0x3e	; 62
    10ce:	31 96       	adiw	r30, 0x01	; 1
    10d0:	5e 01       	movw	r10, r28
    10d2:	08 94       	sec
    10d4:	a1 1c       	adc	r10, r1
    10d6:	b1 1c       	adc	r11, r1
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	bc 92       	st	X, r11
    10dc:	ae 92       	st	-X, r10
    10de:	11 97       	sbiw	r26, 0x01	; 1
    10e0:	97 e1       	ldi	r25, 0x17	; 23
    10e2:	e9 2e       	mov	r14, r25
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	f9 2e       	mov	r15, r25
    10e8:	f3 82       	std	Z+3, r15	; 0x03
    10ea:	e2 82       	std	Z+2, r14	; 0x02
    10ec:	8f a1       	ldd	r24, Y+39	; 0x27
    10ee:	98 a5       	ldd	r25, Y+40	; 0x28
    10f0:	a9 a5       	ldd	r26, Y+41	; 0x29
    10f2:	ba a5       	ldd	r27, Y+42	; 0x2a
    10f4:	84 83       	std	Z+4, r24	; 0x04
    10f6:	95 83       	std	Z+5, r25	; 0x05
    10f8:	a6 83       	std	Z+6, r26	; 0x06
    10fa:	b7 83       	std	Z+7, r27	; 0x07
    10fc:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
    LCDGotoXY(K_P_LOC, 1);
    1100:	8d b7       	in	r24, 0x3d	; 61
    1102:	9e b7       	in	r25, 0x3e	; 62
    1104:	08 96       	adiw	r24, 0x08	; 8
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	9e bf       	out	0x3e, r25	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	8d bf       	out	0x3d, r24	; 61
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
    LCDstring(LCDk_p, K_P_LEN);
    1118:	c5 01       	movw	r24, r10
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>

	sprintf(LCDk_i, "%f", localk_i);
    1120:	ad b7       	in	r26, 0x3d	; 61
    1122:	be b7       	in	r27, 0x3e	; 62
    1124:	18 97       	sbiw	r26, 0x08	; 8
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	be bf       	out	0x3e, r27	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	ad bf       	out	0x3d, r26	; 61
    1130:	ed b7       	in	r30, 0x3d	; 61
    1132:	fe b7       	in	r31, 0x3e	; 62
    1134:	31 96       	adiw	r30, 0x01	; 1
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	c8 2e       	mov	r12, r24
    113a:	d1 2c       	mov	r13, r1
    113c:	cc 0e       	add	r12, r28
    113e:	dd 1e       	adc	r13, r29
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	dc 92       	st	X, r13
    1144:	ce 92       	st	-X, r12
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	f3 82       	std	Z+3, r15	; 0x03
    114a:	e2 82       	std	Z+2, r14	; 0x02
    114c:	8b a1       	ldd	r24, Y+35	; 0x23
    114e:	9c a1       	ldd	r25, Y+36	; 0x24
    1150:	ad a1       	ldd	r26, Y+37	; 0x25
    1152:	be a1       	ldd	r27, Y+38	; 0x26
    1154:	84 83       	std	Z+4, r24	; 0x04
    1156:	95 83       	std	Z+5, r25	; 0x05
    1158:	a6 83       	std	Z+6, r26	; 0x06
    115a:	b7 83       	std	Z+7, r27	; 0x07
    115c:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
    LCDGotoXY(K_I_LOC, 1);
    1160:	8d b7       	in	r24, 0x3d	; 61
    1162:	9e b7       	in	r25, 0x3e	; 62
    1164:	08 96       	adiw	r24, 0x08	; 8
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	9e bf       	out	0x3e, r25	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	8d bf       	out	0x3d, r24	; 61
    1170:	89 e0       	ldi	r24, 0x09	; 9
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
    LCDstring(LCDk_i, K_I_LEN);
    1178:	c6 01       	movw	r24, r12
    117a:	63 e0       	ldi	r22, 0x03	; 3
    117c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>

	sprintf(LCDk_d, "%f", localk_d);
    1180:	ad b7       	in	r26, 0x3d	; 61
    1182:	be b7       	in	r27, 0x3e	; 62
    1184:	18 97       	sbiw	r26, 0x08	; 8
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	be bf       	out	0x3e, r27	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	ad bf       	out	0x3d, r26	; 61
    1190:	ed b7       	in	r30, 0x3d	; 61
    1192:	fe b7       	in	r31, 0x3e	; 62
    1194:	31 96       	adiw	r30, 0x01	; 1
    1196:	8e 01       	movw	r16, r28
    1198:	09 5f       	subi	r16, 0xF9	; 249
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	1c 93       	st	X, r17
    11a0:	0e 93       	st	-X, r16
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	f3 82       	std	Z+3, r15	; 0x03
    11a6:	e2 82       	std	Z+2, r14	; 0x02
    11a8:	88 a1       	ldd	r24, Y+32	; 0x20
    11aa:	99 a1       	ldd	r25, Y+33	; 0x21
    11ac:	aa a1       	ldd	r26, Y+34	; 0x22
    11ae:	b2 2d       	mov	r27, r2
    11b0:	84 83       	std	Z+4, r24	; 0x04
    11b2:	95 83       	std	Z+5, r25	; 0x05
    11b4:	a6 83       	std	Z+6, r26	; 0x06
    11b6:	b7 83       	std	Z+7, r27	; 0x07
    11b8:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
    LCDGotoXY(K_D_LOC, 1);
    11bc:	8d b7       	in	r24, 0x3d	; 61
    11be:	9e b7       	in	r25, 0x3e	; 62
    11c0:	08 96       	adiw	r24, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	9e bf       	out	0x3e, r25	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	8d bf       	out	0x3d, r24	; 61
    11cc:	8d e0       	ldi	r24, 0x0D	; 13
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
    LCDstring(LCDk_d, K_D_LEN);
    11d4:	c8 01       	movw	r24, r16
    11d6:	63 e0       	ldi	r22, 0x03	; 3
    11d8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
		trtSignal(SEM_K_D);


		//Update the LCD
		if (updateOmegaRef){
			sprintf(LCDOmegaRef, "%i ", localOmegaRef);
    11dc:	24 01       	movw	r4, r8
    		LCDGotoXY(OMEGA_REF_LOC, 1);
	    	LCDstring(LCDOmegaRef, omegaRefLen);
		}

		if (updatek_p){
			sprintf(LCDk_p, "%f", localk_p);
    11de:	ab a6       	std	Y+43, r10	; 0x2b
    11e0:	bc a6       	std	Y+44, r11	; 0x2c
    11e2:	9e 2c       	mov	r9, r14
    11e4:	af 2c       	mov	r10, r15
            LCDGotoXY(K_P_LOC, 1);
            LCDstring(LCDk_p, K_P_LEN);
		}

		if (updatek_i){
			sprintf(LCDk_i, "%f", localk_i);
    11e6:	cd a6       	std	Y+45, r12	; 0x2d
    11e8:	de a6       	std	Y+46, r13	; 0x2e
            LCDGotoXY(K_I_LOC, 1);
            LCDstring(LCDk_i, K_I_LEN);
		}

		if (updatek_d){
			sprintf(LCDk_d, "%f", localk_d);
    11ea:	0f a7       	std	Y+47, r16	; 0x2f
    11ec:	18 ab       	std	Y+48, r17	; 0x30
		}

		trtWait(SEM_OMEGA);
		localOmega = omega;
		trtSignal(SEM_OMEGA);
		sprintf(LCDOmega, "%i  ", localOmega);
    11ee:	0e e0       	ldi	r16, 0x0E	; 14
    11f0:	c0 2e       	mov	r12, r16
    11f2:	d1 2c       	mov	r13, r1
    11f4:	cc 0e       	add	r12, r28
    11f6:	dd 1e       	adc	r13, r29
	uint32_t rel, dead ;
	//Update the LCD about 5 times a second
	while(1)
	{
		//Check if the reference speed has changed
		trtWait(SEM_OMEGA_REF);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localOmegaRef != omegaRef){
    11fe:	80 91 94 01 	lds	r24, 0x0194
    1202:	90 91 95 01 	lds	r25, 0x0195
    1206:	68 16       	cp	r6, r24
    1208:	79 06       	cpc	r7, r25
    120a:	11 f4       	brne	.+4      	; 0x1210 <__stack+0x111>
    120c:	33 24       	eor	r3, r3
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <__stack+0x117>
			localOmegaRef = omegaRef;
    1210:	3c 01       	movw	r6, r24
    1212:	33 24       	eor	r3, r3
    1214:	33 94       	inc	r3
			updateOmegaRef = 1;
		}
		else{
			updateOmegaRef = 0;
		}
		trtSignal(SEM_OMEGA_REF);
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the proportional gain has changed
		trtWait(SEM_K_P);
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_p != k_p) {
    1222:	10 91 90 01 	lds	r17, 0x0190
    1226:	00 91 91 01 	lds	r16, 0x0191
    122a:	e0 90 92 01 	lds	r14, 0x0192
    122e:	80 90 93 01 	lds	r8, 0x0193
    1232:	6f a1       	ldd	r22, Y+39	; 0x27
    1234:	78 a5       	ldd	r23, Y+40	; 0x28
    1236:	89 a5       	ldd	r24, Y+41	; 0x29
    1238:	9a a5       	ldd	r25, Y+42	; 0x2a
    123a:	21 2f       	mov	r18, r17
    123c:	30 2f       	mov	r19, r16
    123e:	4e 2d       	mov	r20, r14
    1240:	58 2d       	mov	r21, r8
    1242:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__nesf2>
    1246:	88 23       	and	r24, r24
    1248:	39 f0       	breq	.+14     	; 0x1258 <__stack+0x159>
    124a:	1f a3       	std	Y+39, r17	; 0x27
    124c:	08 a7       	std	Y+40, r16	; 0x28
    124e:	e9 a6       	std	Y+41, r14	; 0x29
    1250:	8a a6       	std	Y+42, r8	; 0x2a
    1252:	bb 24       	eor	r11, r11
    1254:	b3 94       	inc	r11
    1256:	01 c0       	rjmp	.+2      	; 0x125a <__stack+0x15b>
    1258:	bb 24       	eor	r11, r11
			updatek_p = 1;
		}
		else{
			updatek_p = 0;
		}
		trtSignal(SEM_K_P);
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the integral gain has changed
		trtWait(SEM_K_I);
    1260:	85 e0       	ldi	r24, 0x05	; 5
    1262:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_i != k_i) {
    1266:	10 91 a0 01 	lds	r17, 0x01A0
    126a:	00 91 a1 01 	lds	r16, 0x01A1
    126e:	e0 90 a2 01 	lds	r14, 0x01A2
    1272:	80 90 a3 01 	lds	r8, 0x01A3
    1276:	6b a1       	ldd	r22, Y+35	; 0x23
    1278:	7c a1       	ldd	r23, Y+36	; 0x24
    127a:	8d a1       	ldd	r24, Y+37	; 0x25
    127c:	9e a1       	ldd	r25, Y+38	; 0x26
    127e:	21 2f       	mov	r18, r17
    1280:	30 2f       	mov	r19, r16
    1282:	4e 2d       	mov	r20, r14
    1284:	58 2d       	mov	r21, r8
    1286:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__nesf2>
    128a:	88 23       	and	r24, r24
    128c:	39 f0       	breq	.+14     	; 0x129c <__stack+0x19d>
    128e:	1b a3       	std	Y+35, r17	; 0x23
    1290:	0c a3       	std	Y+36, r16	; 0x24
    1292:	ed a2       	std	Y+37, r14	; 0x25
    1294:	8e a2       	std	Y+38, r8	; 0x26
    1296:	ff 24       	eor	r15, r15
    1298:	f3 94       	inc	r15
    129a:	01 c0       	rjmp	.+2      	; 0x129e <__stack+0x19f>
    129c:	ff 24       	eor	r15, r15
			updatek_i = 1;
		}
		else{
			updatek_i = 0;
		}
		trtSignal(SEM_K_I);
    129e:	85 e0       	ldi	r24, 0x05	; 5
    12a0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>

		//Check if the derivative gain has changed
		trtWait(SEM_K_D);
    12a4:	86 e0       	ldi	r24, 0x06	; 6
    12a6:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		if (localk_d != k_d) {
    12aa:	00 91 a4 01 	lds	r16, 0x01A4
    12ae:	e0 90 a5 01 	lds	r14, 0x01A5
    12b2:	80 90 a6 01 	lds	r8, 0x01A6
    12b6:	10 91 a7 01 	lds	r17, 0x01A7
    12ba:	68 a1       	ldd	r22, Y+32	; 0x20
    12bc:	79 a1       	ldd	r23, Y+33	; 0x21
    12be:	8a a1       	ldd	r24, Y+34	; 0x22
    12c0:	92 2d       	mov	r25, r2
    12c2:	20 2f       	mov	r18, r16
    12c4:	3e 2d       	mov	r19, r14
    12c6:	48 2d       	mov	r20, r8
    12c8:	51 2f       	mov	r21, r17
    12ca:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__nesf2>
    12ce:	88 23       	and	r24, r24
    12d0:	31 f0       	breq	.+12     	; 0x12de <__stack+0x1df>
    12d2:	08 a3       	std	Y+32, r16	; 0x20
    12d4:	e9 a2       	std	Y+33, r14	; 0x21
    12d6:	8a a2       	std	Y+34, r8	; 0x22
    12d8:	21 2e       	mov	r2, r17
    12da:	11 e0       	ldi	r17, 0x01	; 1
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <__stack+0x1e1>
    12de:	10 e0       	ldi	r17, 0x00	; 0
			updatek_d = 1;	
		}
		else{
			updatek_d = 0;
		}
		trtSignal(SEM_K_D);
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>


		//Update the LCD
		if (updateOmegaRef){
    12e6:	33 20       	and	r3, r3
    12e8:	71 f1       	breq	.+92     	; 0x1346 <__stack+0x247>
			sprintf(LCDOmegaRef, "%i ", localOmegaRef);
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <__stack+0x1ed>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <__stack+0x1ef>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <__stack+0x1f1>
    12f0:	ed b7       	in	r30, 0x3d	; 61
    12f2:	fe b7       	in	r31, 0x3e	; 62
    12f4:	31 96       	adiw	r30, 0x01	; 1
    12f6:	ad b7       	in	r26, 0x3d	; 61
    12f8:	be b7       	in	r27, 0x3e	; 62
    12fa:	12 96       	adiw	r26, 0x02	; 2
    12fc:	5c 92       	st	X, r5
    12fe:	4e 92       	st	-X, r4
    1300:	11 97       	sbiw	r26, 0x01	; 1
    1302:	8a e1       	ldi	r24, 0x1A	; 26
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	93 83       	std	Z+3, r25	; 0x03
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	75 82       	std	Z+5, r7	; 0x05
    130c:	64 82       	std	Z+4, r6	; 0x04
    130e:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
			omegaRefLen = strlen(LCDOmegaRef);
    1312:	f2 01       	movw	r30, r4
    1314:	01 90       	ld	r0, Z+
    1316:	00 20       	and	r0, r0
    1318:	e9 f7       	brne	.-6      	; 0x1314 <__stack+0x215>
    131a:	31 97       	sbiw	r30, 0x01	; 1
    131c:	0e 2f       	mov	r16, r30
    131e:	04 19       	sub	r16, r4
			if (omegaRefLen >= OMEGA_REF_LEN) {
    1320:	ad b7       	in	r26, 0x3d	; 61
    1322:	be b7       	in	r27, 0x3e	; 62
    1324:	16 96       	adiw	r26, 0x06	; 6
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	be bf       	out	0x3e, r27	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	ad bf       	out	0x3d, r26	; 61
    1330:	04 30       	cpi	r16, 0x04	; 4
    1332:	08 f0       	brcs	.+2      	; 0x1336 <__stack+0x237>
    1334:	04 e0       	ldi	r16, 0x04	; 4
				omegaRefLen = OMEGA_REF_LEN;
			}
    		LCDGotoXY(OMEGA_REF_LOC, 1);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
	    	LCDstring(LCDOmegaRef, omegaRefLen);
    133e:	c2 01       	movw	r24, r4
    1340:	60 2f       	mov	r22, r16
    1342:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
		}

		if (updatek_p){
    1346:	bb 20       	and	r11, r11
    1348:	89 f1       	breq	.+98     	; 0x13ac <__stack+0x2ad>
			sprintf(LCDk_p, "%f", localk_p);
    134a:	8d b7       	in	r24, 0x3d	; 61
    134c:	9e b7       	in	r25, 0x3e	; 62
    134e:	08 97       	sbiw	r24, 0x08	; 8
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	9e bf       	out	0x3e, r25	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	8d bf       	out	0x3d, r24	; 61
    135a:	ed b7       	in	r30, 0x3d	; 61
    135c:	fe b7       	in	r31, 0x3e	; 62
    135e:	31 96       	adiw	r30, 0x01	; 1
    1360:	8b a5       	ldd	r24, Y+43	; 0x2b
    1362:	ad b7       	in	r26, 0x3d	; 61
    1364:	be b7       	in	r27, 0x3e	; 62
    1366:	11 96       	adiw	r26, 0x01	; 1
    1368:	8c 93       	st	X, r24
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	9c a5       	ldd	r25, Y+44	; 0x2c
    136e:	12 96       	adiw	r26, 0x02	; 2
    1370:	9c 93       	st	X, r25
    1372:	92 82       	std	Z+2, r9	; 0x02
    1374:	a3 82       	std	Z+3, r10	; 0x03
    1376:	8f a1       	ldd	r24, Y+39	; 0x27
    1378:	98 a5       	ldd	r25, Y+40	; 0x28
    137a:	a9 a5       	ldd	r26, Y+41	; 0x29
    137c:	ba a5       	ldd	r27, Y+42	; 0x2a
    137e:	84 83       	std	Z+4, r24	; 0x04
    1380:	95 83       	std	Z+5, r25	; 0x05
    1382:	a6 83       	std	Z+6, r26	; 0x06
    1384:	b7 83       	std	Z+7, r27	; 0x07
    1386:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
            LCDGotoXY(K_P_LOC, 1);
    138a:	ad b7       	in	r26, 0x3d	; 61
    138c:	be b7       	in	r27, 0x3e	; 62
    138e:	18 96       	adiw	r26, 0x08	; 8
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	be bf       	out	0x3e, r27	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	ad bf       	out	0x3d, r26	; 61
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
            LCDstring(LCDk_p, K_P_LEN);
    13a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13a6:	63 e0       	ldi	r22, 0x03	; 3
    13a8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
		}

		if (updatek_i){
    13ac:	ff 20       	and	r15, r15
    13ae:	89 f1       	breq	.+98     	; 0x1412 <__stack+0x313>
			sprintf(LCDk_i, "%f", localk_i);
    13b0:	8d b7       	in	r24, 0x3d	; 61
    13b2:	9e b7       	in	r25, 0x3e	; 62
    13b4:	08 97       	sbiw	r24, 0x08	; 8
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	9e bf       	out	0x3e, r25	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	8d bf       	out	0x3d, r24	; 61
    13c0:	ed b7       	in	r30, 0x3d	; 61
    13c2:	fe b7       	in	r31, 0x3e	; 62
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c8:	ad b7       	in	r26, 0x3d	; 61
    13ca:	be b7       	in	r27, 0x3e	; 62
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	8c 93       	st	X, r24
    13d0:	11 97       	sbiw	r26, 0x01	; 1
    13d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	9c 93       	st	X, r25
    13d8:	92 82       	std	Z+2, r9	; 0x02
    13da:	a3 82       	std	Z+3, r10	; 0x03
    13dc:	8b a1       	ldd	r24, Y+35	; 0x23
    13de:	9c a1       	ldd	r25, Y+36	; 0x24
    13e0:	ad a1       	ldd	r26, Y+37	; 0x25
    13e2:	be a1       	ldd	r27, Y+38	; 0x26
    13e4:	84 83       	std	Z+4, r24	; 0x04
    13e6:	95 83       	std	Z+5, r25	; 0x05
    13e8:	a6 83       	std	Z+6, r26	; 0x06
    13ea:	b7 83       	std	Z+7, r27	; 0x07
    13ec:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
            LCDGotoXY(K_I_LOC, 1);
    13f0:	ad b7       	in	r26, 0x3d	; 61
    13f2:	be b7       	in	r27, 0x3e	; 62
    13f4:	18 96       	adiw	r26, 0x08	; 8
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	be bf       	out	0x3e, r27	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	ad bf       	out	0x3d, r26	; 61
    1400:	89 e0       	ldi	r24, 0x09	; 9
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
            LCDstring(LCDk_i, K_I_LEN);
    1408:	8d a5       	ldd	r24, Y+45	; 0x2d
    140a:	9e a5       	ldd	r25, Y+46	; 0x2e
    140c:	63 e0       	ldi	r22, 0x03	; 3
    140e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
		}

		if (updatek_d){
    1412:	11 23       	and	r17, r17
    1414:	89 f1       	breq	.+98     	; 0x1478 <__stack+0x379>
			sprintf(LCDk_d, "%f", localk_d);
    1416:	8d b7       	in	r24, 0x3d	; 61
    1418:	9e b7       	in	r25, 0x3e	; 62
    141a:	08 97       	sbiw	r24, 0x08	; 8
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	9e bf       	out	0x3e, r25	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	8d bf       	out	0x3d, r24	; 61
    1426:	ed b7       	in	r30, 0x3d	; 61
    1428:	fe b7       	in	r31, 0x3e	; 62
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	8f a5       	ldd	r24, Y+47	; 0x2f
    142e:	ad b7       	in	r26, 0x3d	; 61
    1430:	be b7       	in	r27, 0x3e	; 62
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	8c 93       	st	X, r24
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	98 a9       	ldd	r25, Y+48	; 0x30
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	9c 93       	st	X, r25
    143e:	92 82       	std	Z+2, r9	; 0x02
    1440:	a3 82       	std	Z+3, r10	; 0x03
    1442:	88 a1       	ldd	r24, Y+32	; 0x20
    1444:	99 a1       	ldd	r25, Y+33	; 0x21
    1446:	aa a1       	ldd	r26, Y+34	; 0x22
    1448:	b2 2d       	mov	r27, r2
    144a:	84 83       	std	Z+4, r24	; 0x04
    144c:	95 83       	std	Z+5, r25	; 0x05
    144e:	a6 83       	std	Z+6, r26	; 0x06
    1450:	b7 83       	std	Z+7, r27	; 0x07
    1452:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
            LCDGotoXY(K_D_LOC, 1);
    1456:	ad b7       	in	r26, 0x3d	; 61
    1458:	be b7       	in	r27, 0x3e	; 62
    145a:	18 96       	adiw	r26, 0x08	; 8
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	be bf       	out	0x3e, r27	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	ad bf       	out	0x3d, r26	; 61
    1466:	8d e0       	ldi	r24, 0x0D	; 13
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
            LCDstring(LCDk_d, K_D_LEN);
    146e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1470:	98 a9       	ldd	r25, Y+48	; 0x30
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
		}

		trtWait(SEM_OMEGA);
    1478:	87 e0       	ldi	r24, 0x07	; 7
    147a:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
		localOmega = omega;
    147e:	00 91 96 01 	lds	r16, 0x0196
    1482:	10 91 97 01 	lds	r17, 0x0197
		trtSignal(SEM_OMEGA);
    1486:	87 e0       	ldi	r24, 0x07	; 7
    1488:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
		sprintf(LCDOmega, "%i  ", localOmega);
    148c:	00 d0       	rcall	.+0      	; 0x148e <__stack+0x38f>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <__stack+0x391>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <__stack+0x393>
    1492:	ed b7       	in	r30, 0x3d	; 61
    1494:	fe b7       	in	r31, 0x3e	; 62
    1496:	31 96       	adiw	r30, 0x01	; 1
    1498:	ad b7       	in	r26, 0x3d	; 61
    149a:	be b7       	in	r27, 0x3e	; 62
    149c:	12 96       	adiw	r26, 0x02	; 2
    149e:	dc 92       	st	X, r13
    14a0:	ce 92       	st	-X, r12
    14a2:	11 97       	sbiw	r26, 0x01	; 1
    14a4:	8e e1       	ldi	r24, 0x1E	; 30
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	82 83       	std	Z+2, r24	; 0x02
    14ac:	15 83       	std	Z+5, r17	; 0x05
    14ae:	04 83       	std	Z+4, r16	; 0x04
    14b0:	0e 94 91 1c 	call	0x3922	; 0x3922 <sprintf>
		LCDGotoXY(OMEGA_LOC, 0);
    14b4:	ad b7       	in	r26, 0x3d	; 61
    14b6:	be b7       	in	r27, 0x3e	; 62
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	be bf       	out	0x3e, r27	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	ad bf       	out	0x3d, r26	; 61
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
		omegaLen = strlen(LCDOmega);
    14cc:	f6 01       	movw	r30, r12
    14ce:	01 90       	ld	r0, Z+
    14d0:	00 20       	and	r0, r0
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <__stack+0x3cf>
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	ec 19       	sub	r30, r12
    14d8:	fd 09       	sbc	r31, r13
		LCDstring(LCDOmega, omegaLen);
    14da:	c6 01       	movw	r24, r12
    14dc:	6e 2f       	mov	r22, r30
    14de:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCDstring>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    14e2:	20 91 12 03 	lds	r18, 0x0312
    14e6:	30 91 13 03 	lds	r19, 0x0313
    14ea:	40 91 14 03 	lds	r20, 0x0314
    14ee:	50 91 15 03 	lds	r21, 0x0315
    14f2:	a9 01       	movw	r20, r18
    14f4:	33 27       	eor	r19, r19
    14f6:	22 27       	eor	r18, r18
    14f8:	60 91 84 00 	lds	r22, 0x0084
    14fc:	70 91 85 00 	lds	r23, 0x0085
		

		rel = trtCurrentTime() + SECONDS2TICKS(0.2);
		dead = trtCurrentTime() + SECONDS2TICKS(0.225);
		trtSleepUntil(rel, dead);
    1500:	e0 90 84 00 	lds	r14, 0x0084
    1504:	f0 90 85 00 	lds	r15, 0x0085
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	62 0f       	add	r22, r18
    150e:	73 1f       	adc	r23, r19
    1510:	84 1f       	adc	r24, r20
    1512:	95 1f       	adc	r25, r21
    1514:	6b 5c       	subi	r22, 0xCB	; 203
    1516:	73 4f       	sbci	r23, 0xF3	; 243
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
    1520:	2e 0d       	add	r18, r14
    1522:	3f 1d       	adc	r19, r15
    1524:	40 1f       	adc	r20, r16
    1526:	51 1f       	adc	r21, r17
    1528:	25 54       	subi	r18, 0x45	; 69
    152a:	32 4f       	sbci	r19, 0xF2	; 242
    152c:	4f 4f       	sbci	r20, 0xFF	; 255
    152e:	5f 4f       	sbci	r21, 0xFF	; 255
    1530:	0e 94 8f 03 	call	0x71e	; 0x71e <trtSleepUntil>
    1534:	61 ce       	rjmp	.-830    	; 0x11f8 <__stack+0xf9>

00001536 <serialComm>:


//read the commands from the user
// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  {
    1536:	4f 92       	push	r4
    1538:	5f 92       	push	r5
    153a:	6f 92       	push	r6
    153c:	7f 92       	push	r7
    153e:	8f 92       	push	r8
    1540:	9f 92       	push	r9
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <serialComm+0x22>
    1558:	00 d0       	rcall	.+0      	; 0x155a <serialComm+0x24>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    1560:	61 e3       	ldi	r22, 0x31	; 49
    1562:	46 2e       	mov	r4, r22
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	56 2e       	mov	r5, r22
    1568:	3e 01       	movw	r6, r28
    156a:	08 94       	sec
    156c:	61 1c       	adc	r6, r1
    156e:	71 1c       	adc	r7, r1
    1570:	52 e0       	ldi	r21, 0x02	; 2
    1572:	85 2e       	mov	r8, r21
    1574:	91 2c       	mov	r9, r1
    1576:	8c 0e       	add	r8, r28
    1578:	9d 1e       	adc	r9, r29
					trtWait(SEM_K_D);
					k_d = val;
					trtSignal(SEM_K_D);
					break;
				default:
					fprintf(stdout, "Command %c not recognized\n", cmd);
    157a:	46 e3       	ldi	r20, 0x36	; 54
    157c:	a4 2e       	mov	r10, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	b4 2e       	mov	r11, r20
					break;
			}
		}
		else{
			fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    1582:	31 e5       	ldi	r19, 0x51	; 81
    1584:	c3 2e       	mov	r12, r19
    1586:	31 e0       	ldi	r19, 0x01	; 1
    1588:	d3 2e       	mov	r13, r19
		// 									set the proportional gain to val1
		//									set the integral gain to val2
		//									set the differential gain to val3
		//If an invalid command is received alert the user of what went wrong
		
		fprintf(stdout, ">") ;
    158a:	60 91 1d 03 	lds	r22, 0x031D
    158e:	70 91 1e 03 	lds	r23, 0x031E
    1592:	8e e3       	ldi	r24, 0x3E	; 62
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
		//numParams = fscanf(stdin, "%c %f %c %f %c %f %c %f", &cmd0, &val0, &cmd1, &val1, &cmd2, &val2, &cmd3, &val3) ;
		
		fscanf(stdin, "%s%f", &cmd, &val);
    159a:	8d b7       	in	r24, 0x3d	; 61
    159c:	9e b7       	in	r25, 0x3e	; 62
    159e:	08 97       	sbiw	r24, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	9e bf       	out	0x3e, r25	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	8d bf       	out	0x3d, r24	; 61
    15aa:	ed b7       	in	r30, 0x3d	; 61
    15ac:	fe b7       	in	r31, 0x3e	; 62
    15ae:	31 96       	adiw	r30, 0x01	; 1
    15b0:	80 91 1b 03 	lds	r24, 0x031B
    15b4:	90 91 1c 03 	lds	r25, 0x031C
    15b8:	ad b7       	in	r26, 0x3d	; 61
    15ba:	be b7       	in	r27, 0x3e	; 62
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	11 97       	sbiw	r26, 0x01	; 1
    15c4:	53 82       	std	Z+3, r5	; 0x03
    15c6:	42 82       	std	Z+2, r4	; 0x02
    15c8:	75 82       	std	Z+5, r7	; 0x05
    15ca:	64 82       	std	Z+4, r6	; 0x04
    15cc:	97 82       	std	Z+7, r9	; 0x07
    15ce:	86 82       	std	Z+6, r8	; 0x06
    15d0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <fscanf>
		//trtWait(SEM_STRING_DONE);

		//update the parameters
		//fprintf(stdout, "Cmd is %c\n", cmd);
		//fprintf(stdout, "Val is %f\n", val);
		if (val >= 0) {
    15d4:	ea 80       	ldd	r14, Y+2	; 0x02
    15d6:	fb 80       	ldd	r15, Y+3	; 0x03
    15d8:	0c 81       	ldd	r16, Y+4	; 0x04
    15da:	1d 81       	ldd	r17, Y+5	; 0x05
    15dc:	8d b7       	in	r24, 0x3d	; 61
    15de:	9e b7       	in	r25, 0x3e	; 62
    15e0:	08 96       	adiw	r24, 0x08	; 8
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	9e bf       	out	0x3e, r25	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	8d bf       	out	0x3d, r24	; 61
    15ec:	c8 01       	movw	r24, r16
    15ee:	b7 01       	movw	r22, r14
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__gesf2>
    15fc:	88 23       	and	r24, r24
    15fe:	0c f4       	brge	.+2      	; 0x1602 <serialComm+0xcc>
    1600:	6c c0       	rjmp	.+216    	; 0x16da <serialComm+0x1a4>
			switch (cmd){
    1602:	29 81       	ldd	r18, Y+1	; 0x01
    1604:	29 36       	cpi	r18, 0x69	; 105
    1606:	59 f1       	breq	.+86     	; 0x165e <serialComm+0x128>
    1608:	2a 36       	cpi	r18, 0x6A	; 106
    160a:	20 f4       	brcc	.+8      	; 0x1614 <serialComm+0xde>
    160c:	24 36       	cpi	r18, 0x64	; 100
    160e:	09 f0       	breq	.+2      	; 0x1612 <serialComm+0xdc>
    1610:	4a c0       	rjmp	.+148    	; 0x16a6 <serialComm+0x170>
    1612:	36 c0       	rjmp	.+108    	; 0x1680 <serialComm+0x14a>
    1614:	20 37       	cpi	r18, 0x70	; 112
    1616:	91 f0       	breq	.+36     	; 0x163c <serialComm+0x106>
    1618:	23 37       	cpi	r18, 0x73	; 115
    161a:	09 f0       	breq	.+2      	; 0x161e <serialComm+0xe8>
    161c:	44 c0       	rjmp	.+136    	; 0x16a6 <serialComm+0x170>
				case 's':
					trtWait(SEM_OMEGA_REF);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					omegaRef = (int) val;
    1624:	6a 81       	ldd	r22, Y+2	; 0x02
    1626:	7b 81       	ldd	r23, Y+3	; 0x03
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fixsfsi>
    1630:	70 93 95 01 	sts	0x0195, r23
    1634:	60 93 94 01 	sts	0x0194, r22
					trtSignal(SEM_OMEGA_REF);
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	32 c0       	rjmp	.+100    	; 0x16a0 <serialComm+0x16a>
					break;
				case 'p':
					trtWait(SEM_K_P);
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_p = val;
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	ac 81       	ldd	r26, Y+4	; 0x04
    1648:	bd 81       	ldd	r27, Y+5	; 0x05
    164a:	80 93 90 01 	sts	0x0190, r24
    164e:	90 93 91 01 	sts	0x0191, r25
    1652:	a0 93 92 01 	sts	0x0192, r26
    1656:	b0 93 93 01 	sts	0x0193, r27
					trtSignal(SEM_K_P);
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	21 c0       	rjmp	.+66     	; 0x16a0 <serialComm+0x16a>
					break;
				case 'i':
					trtWait(SEM_K_I);
    165e:	85 e0       	ldi	r24, 0x05	; 5
    1660:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_i = val;
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	9b 81       	ldd	r25, Y+3	; 0x03
    1668:	ac 81       	ldd	r26, Y+4	; 0x04
    166a:	bd 81       	ldd	r27, Y+5	; 0x05
    166c:	80 93 a0 01 	sts	0x01A0, r24
    1670:	90 93 a1 01 	sts	0x01A1, r25
    1674:	a0 93 a2 01 	sts	0x01A2, r26
    1678:	b0 93 a3 01 	sts	0x01A3, r27
					trtSignal(SEM_K_I);
    167c:	85 e0       	ldi	r24, 0x05	; 5
    167e:	10 c0       	rjmp	.+32     	; 0x16a0 <serialComm+0x16a>
					break;
				case 'd':
					trtWait(SEM_K_D);
    1680:	86 e0       	ldi	r24, 0x06	; 6
    1682:	0e 94 03 03 	call	0x606	; 0x606 <trtWait>
					k_d = val;
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	ac 81       	ldd	r26, Y+4	; 0x04
    168c:	bd 81       	ldd	r27, Y+5	; 0x05
    168e:	80 93 a4 01 	sts	0x01A4, r24
    1692:	90 93 a5 01 	sts	0x01A5, r25
    1696:	a0 93 a6 01 	sts	0x01A6, r26
    169a:	b0 93 a7 01 	sts	0x01A7, r27
					trtSignal(SEM_K_D);
    169e:	86 e0       	ldi	r24, 0x06	; 6
    16a0:	0e 94 23 03 	call	0x646	; 0x646 <trtSignal>
    16a4:	72 cf       	rjmp	.-284    	; 0x158a <serialComm+0x54>
					break;
				default:
					fprintf(stdout, "Command %c not recognized\n", cmd);
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <serialComm+0x172>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <serialComm+0x174>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <serialComm+0x176>
    16ac:	ed b7       	in	r30, 0x3d	; 61
    16ae:	fe b7       	in	r31, 0x3e	; 62
    16b0:	31 96       	adiw	r30, 0x01	; 1
    16b2:	80 91 1d 03 	lds	r24, 0x031D
    16b6:	90 91 1e 03 	lds	r25, 0x031E
    16ba:	ad b7       	in	r26, 0x3d	; 61
    16bc:	be b7       	in	r27, 0x3e	; 62
    16be:	12 96       	adiw	r26, 0x02	; 2
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    16c6:	b3 82       	std	Z+3, r11	; 0x03
    16c8:	a2 82       	std	Z+2, r10	; 0x02
    16ca:	24 83       	std	Z+4, r18	; 0x04
    16cc:	15 82       	std	Z+5, r1	; 0x05
    16ce:	0e 94 14 1c 	call	0x3828	; 0x3828 <fprintf>
    16d2:	8d b7       	in	r24, 0x3d	; 61
    16d4:	9e b7       	in	r25, 0x3e	; 62
    16d6:	06 96       	adiw	r24, 0x06	; 6
    16d8:	1e c0       	rjmp	.+60     	; 0x1716 <serialComm+0x1e0>
					break;
			}
		}
		else{
			fprintf(stdout, "Parameters must be non negative, %f is negative\n", val);
    16da:	ad b7       	in	r26, 0x3d	; 61
    16dc:	be b7       	in	r27, 0x3e	; 62
    16de:	18 97       	sbiw	r26, 0x08	; 8
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	be bf       	out	0x3e, r27	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	ad bf       	out	0x3d, r26	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	80 91 1d 03 	lds	r24, 0x031D
    16f4:	90 91 1e 03 	lds	r25, 0x031E
    16f8:	12 96       	adiw	r26, 0x02	; 2
    16fa:	9c 93       	st	X, r25
    16fc:	8e 93       	st	-X, r24
    16fe:	11 97       	sbiw	r26, 0x01	; 1
    1700:	d3 82       	std	Z+3, r13	; 0x03
    1702:	c2 82       	std	Z+2, r12	; 0x02
    1704:	e4 82       	std	Z+4, r14	; 0x04
    1706:	f5 82       	std	Z+5, r15	; 0x05
    1708:	06 83       	std	Z+6, r16	; 0x06
    170a:	17 83       	std	Z+7, r17	; 0x07
    170c:	0e 94 14 1c 	call	0x3828	; 0x3828 <fprintf>
    1710:	8d b7       	in	r24, 0x3d	; 61
    1712:	9e b7       	in	r25, 0x3e	; 62
    1714:	08 96       	adiw	r24, 0x08	; 8
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	9e bf       	out	0x3e, r25	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	8d bf       	out	0x3d, r24	; 61
    1720:	34 cf       	rjmp	.-408    	; 0x158a <serialComm+0x54>

00001722 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    1722:	28 2f       	mov	r18, r24
    1724:	20 7f       	andi	r18, 0xF0	; 240
    1726:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1728:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    172a:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172c:	20 ea       	ldi	r18, 0xA0	; 160
    172e:	3f e0       	ldi	r19, 0x0F	; 15
    1730:	f9 01       	movw	r30, r18
    1732:	31 97       	sbiw	r30, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    1736:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1738:	40 98       	cbi	0x08, 0	; 8
    173a:	f9 01       	movw	r30, r18
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	44 e0       	ldi	r20, 0x04	; 4
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	4a 95       	dec	r20
    174a:	e1 f7       	brne	.-8      	; 0x1744 <LCDsendChar+0x22>
    174c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    174e:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1750:	42 9a       	sbi	0x08, 2	; 8
    1752:	c9 01       	movw	r24, r18
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    1758:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    175a:	40 98       	cbi	0x08, 0	; 8
    175c:	c9 01       	movw	r24, r18
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    1762:	08 95       	ret

00001764 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1764:	28 2f       	mov	r18, r24
    1766:	20 7f       	andi	r18, 0xF0	; 240
    1768:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    176a:	42 9a       	sbi	0x08, 2	; 8
    176c:	20 ea       	ldi	r18, 0xA0	; 160
    176e:	3f e0       	ldi	r19, 0x0F	; 15
    1770:	f9 01       	movw	r30, r18
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1776:	42 98       	cbi	0x08, 2	; 8
    1778:	f9 01       	movw	r30, r18
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	54 e0       	ldi	r21, 0x04	; 4
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	5a 95       	dec	r21
    1788:	e1 f7       	brne	.-8      	; 0x1782 <LCDsendCommand+0x1e>
    178a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    178c:	42 9a       	sbi	0x08, 2	; 8
    178e:	c9 01       	movw	r24, r18
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1794:	42 98       	cbi	0x08, 2	; 8
    1796:	c9 01       	movw	r24, r18
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    179c:	08 95       	ret

0000179e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    17a4:	08 95       	ret

000017a6 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    17ac:	08 95       	ret

000017ae <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	49 f0       	breq	.+18     	; 0x17ce <LCDstring+0x20>
    17bc:	ec 01       	movw	r28, r24
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    17c2:	89 91       	ld	r24, Y+
    17c4:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    17c8:	1f 5f       	subi	r17, 0xFF	; 255
    17ca:	10 17       	cp	r17, r16
    17cc:	d0 f3       	brcs	.-12     	; 0x17c2 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    17d8:	62 30       	cpi	r22, 0x02	; 2
    17da:	31 f0       	breq	.+12     	; 0x17e8 <LCDGotoXY+0x10>
    17dc:	63 30       	cpi	r22, 0x03	; 3
    17de:	31 f0       	breq	.+12     	; 0x17ec <LCDGotoXY+0x14>
    17e0:	61 30       	cpi	r22, 0x01	; 1
    17e2:	29 f4       	brne	.+10     	; 0x17ee <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    17e4:	80 5c       	subi	r24, 0xC0	; 192
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    17e8:	8c 5e       	subi	r24, 0xEC	; 236
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    17ec:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    17ee:	80 68       	ori	r24, 0x80	; 128
    17f0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
	
}
    17f4:	08 95       	ret

000017f6 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
    17fe:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1800:	64 2f       	mov	r22, r20
    1802:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDGotoXY>
    1806:	10 e0       	ldi	r17, 0x00	; 0
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    180a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    180e:	1f 5f       	subi	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e1 0f       	add	r30, r17
    1814:	f1 1d       	adc	r31, r1
    1816:	84 91       	lpm	r24, Z+
    1818:	88 23       	and	r24, r24
    181a:	b9 f7       	brne	.-18     	; 0x180a <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	7c 01       	movw	r14, r24
    1832:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1834:	11 0f       	add	r17, r17
    1836:	11 0f       	add	r17, r17
    1838:	11 0f       	add	r17, r17
    183a:	10 64       	ori	r17, 0x40	; 64
    183c:	c0 e0       	ldi	r28, 0x00	; 0
    183e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1840:	f7 01       	movw	r30, r14
    1842:	ec 0f       	add	r30, r28
    1844:	fd 1f       	adc	r31, r29
    1846:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1848:	81 2f       	mov	r24, r17
    184a:	8c 0f       	add	r24, r28
    184c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
		LCDsendChar(pcc);
    1850:	80 2f       	mov	r24, r16
    1852:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1856:	21 96       	adiw	r28, 0x01	; 1
    1858:	c8 30       	cpi	r28, 0x08	; 8
    185a:	d1 05       	cpc	r29, r1
    185c:	89 f7       	brne	.-30     	; 0x1840 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	08 95       	ret

0000186c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	80 e6       	ldi	r24, 0x60	; 96
    1874:	9a ee       	ldi	r25, 0xEA	; 234
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    187a:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    187c:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    187e:	87 b1       	in	r24, 0x07	; 7
    1880:	80 6f       	ori	r24, 0xF0	; 240
    1882:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1884:	87 b1       	in	r24, 0x07	; 7
    1886:	87 60       	ori	r24, 0x07	; 7
    1888:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    188e:	42 9a       	sbi	0x08, 2	; 8
    1890:	20 ea       	ldi	r18, 0xA0	; 160
    1892:	3f e0       	ldi	r19, 0x0F	; 15
    1894:	f9 01       	movw	r30, r18
    1896:	31 97       	sbiw	r30, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    189a:	42 98       	cbi	0x08, 2	; 8
    189c:	f9 01       	movw	r30, r18
    189e:	31 97       	sbiw	r30, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    18a2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18a4:	42 9a       	sbi	0x08, 2	; 8
    18a6:	c9 01       	movw	r24, r18
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    18ac:	42 98       	cbi	0x08, 2	; 8
    18ae:	c9 01       	movw	r24, r18
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    18b4:	80 e2       	ldi	r24, 0x20	; 32
    18b6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18b8:	42 9a       	sbi	0x08, 2	; 8
    18ba:	c9 01       	movw	r24, r18
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    18c0:	42 98       	cbi	0x08, 2	; 8
    18c2:	c9 01       	movw	r24, r18
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    18c8:	88 e2       	ldi	r24, 0x28	; 40
    18ca:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    18ce:	8c e0       	ldi	r24, 0x0C	; 12
    18d0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
    18d4:	c5 ec       	ldi	r28, 0xC5	; 197
    18d6:	d0 e0       	ldi	r29, 0x00	; 0
    18d8:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    18da:	16 2f       	mov	r17, r22
    18dc:	1f 5f       	subi	r17, 0xFF	; 255
    18de:	ce 01       	movw	r24, r28
    18e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCDdefinechar>
    18e4:	28 96       	adiw	r28, 0x08	; 8
    18e6:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    18e8:	18 30       	cpi	r17, 0x08	; 8
    18ea:	b9 f7       	brne	.-18     	; 0x18da <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	08 2f       	mov	r16, r24
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    18fe:	8e e1       	ldi	r24, 0x1E	; 30
    1900:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1904:	1f 5f       	subi	r17, 0xFF	; 255
    1906:	10 17       	cp	r17, r16
    1908:	d0 f3       	brcs	.-12     	; 0x18fe <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	08 2f       	mov	r16, r24
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    191a:	88 e1       	ldi	r24, 0x18	; 24
    191c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1920:	1f 5f       	subi	r17, 0xFF	; 255
    1922:	10 17       	cp	r17, r16
    1924:	d0 f3       	brcs	.-12     	; 0x191a <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    192c:	8e e0       	ldi	r24, 0x0E	; 14
    192e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    1932:	08 95       	ret

00001934 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1934:	8f e0       	ldi	r24, 0x0F	; 15
    1936:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    193a:	08 95       	ret

0000193c <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    193c:	8c e0       	ldi	r24, 0x0C	; 12
    193e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    1942:	08 95       	ret

00001944 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1944:	88 e0       	ldi	r24, 0x08	; 8
    1946:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    194a:	08 95       	ret

0000194c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    194c:	8c e0       	ldi	r24, 0x0C	; 12
    194e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
}
    1952:	08 95       	ret

00001954 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	08 2f       	mov	r16, r24
    195a:	10 e0       	ldi	r17, 0x00	; 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    195e:	80 e1       	ldi	r24, 0x10	; 16
    1960:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1964:	1f 5f       	subi	r17, 0xFF	; 255
    1966:	10 17       	cp	r17, r16
    1968:	d0 f3       	brcs	.-12     	; 0x195e <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	08 2f       	mov	r16, r24
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    197a:	84 e1       	ldi	r24, 0x14	; 20
    197c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1980:	1f 5f       	subi	r17, 0xFF	; 255
    1982:	10 17       	cp	r17, r16
    1984:	d0 f3       	brcs	.-12     	; 0x197a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	08 95       	ret

0000198c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    199c:	96 e0       	ldi	r25, 0x06	; 6
    199e:	89 9f       	mul	r24, r25
    19a0:	c0 01       	movw	r24, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	24 2f       	mov	r18, r20
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	ac 01       	movw	r20, r24
    19aa:	42 9f       	mul	r20, r18
    19ac:	c0 01       	movw	r24, r0
    19ae:	43 9f       	mul	r20, r19
    19b0:	90 0d       	add	r25, r0
    19b2:	52 9f       	mul	r21, r18
    19b4:	90 0d       	add	r25, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__divmodhi4>
    19be:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    19c0:	cb 01       	movw	r24, r22
    19c2:	66 e0       	ldi	r22, 0x06	; 6
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodhi4>
    19ca:	e8 2e       	mov	r14, r24
    19cc:	ff 24       	eor	r15, r15
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	12 c0       	rjmp	.+36     	; 0x19f8 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    19d4:	c8 01       	movw	r24, r16
    19d6:	05 96       	adiw	r24, 0x05	; 5
    19d8:	c8 17       	cp	r28, r24
    19da:	d9 07       	cpc	r29, r25
    19dc:	10 f0       	brcs	.+4      	; 0x19e2 <LCDprogressBar+0x56>
    19de:	85 e0       	ldi	r24, 0x05	; 5
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    19e2:	c0 17       	cp	r28, r16
    19e4:	d1 07       	cpc	r29, r17
    19e6:	10 f0       	brcs	.+4      	; 0x19ec <LCDprogressBar+0x60>
    19e8:	8e 2d       	mov	r24, r14
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <LCDprogressBar+0x62>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    19ee:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    19f2:	f3 94       	inc	r15
    19f4:	0a 5f       	subi	r16, 0xFA	; 250
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fd 14       	cp	r15, r13
    19fa:	60 f3       	brcs	.-40     	; 0x19d4 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	08 95       	ret

00001a0c <__fixunssfsi>:
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	7b 01       	movw	r14, r22
    1a16:	8c 01       	movw	r16, r24
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	5f e4       	ldi	r21, 0x4F	; 79
    1a20:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__gesf2>
    1a24:	88 23       	and	r24, r24
    1a26:	8c f0       	brlt	.+34     	; 0x1a4a <__fixunssfsi+0x3e>
    1a28:	c8 01       	movw	r24, r16
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	5f e4       	ldi	r21, 0x4F	; 79
    1a34:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__subsf3>
    1a38:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fixsfsi>
    1a3c:	9b 01       	movw	r18, r22
    1a3e:	ac 01       	movw	r20, r24
    1a40:	20 50       	subi	r18, 0x00	; 0
    1a42:	30 40       	sbci	r19, 0x00	; 0
    1a44:	40 40       	sbci	r20, 0x00	; 0
    1a46:	50 48       	sbci	r21, 0x80	; 128
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <__fixunssfsi+0x4a>
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fixsfsi>
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	b9 01       	movw	r22, r18
    1a58:	ca 01       	movw	r24, r20
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	08 95       	ret

00001a64 <_fpadd_parts>:
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	fd e0       	ldi	r31, 0x0D	; 13
    1a6c:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__prologue_saves__>
    1a70:	dc 01       	movw	r26, r24
    1a72:	2b 01       	movw	r4, r22
    1a74:	fa 01       	movw	r30, r20
    1a76:	9c 91       	ld	r25, X
    1a78:	92 30       	cpi	r25, 0x02	; 2
    1a7a:	08 f4       	brcc	.+2      	; 0x1a7e <_fpadd_parts+0x1a>
    1a7c:	39 c1       	rjmp	.+626    	; 0x1cf0 <_fpadd_parts+0x28c>
    1a7e:	eb 01       	movw	r28, r22
    1a80:	88 81       	ld	r24, Y
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <_fpadd_parts+0x24>
    1a86:	33 c1       	rjmp	.+614    	; 0x1cee <_fpadd_parts+0x28a>
    1a88:	94 30       	cpi	r25, 0x04	; 4
    1a8a:	69 f4       	brne	.+26     	; 0x1aa6 <_fpadd_parts+0x42>
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <_fpadd_parts+0x2e>
    1a90:	2f c1       	rjmp	.+606    	; 0x1cf0 <_fpadd_parts+0x28c>
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	9c 91       	ld	r25, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	98 17       	cp	r25, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <_fpadd_parts+0x3c>
    1a9e:	28 c1       	rjmp	.+592    	; 0x1cf0 <_fpadd_parts+0x28c>
    1aa0:	a8 e9       	ldi	r26, 0x98	; 152
    1aa2:	b1 e0       	ldi	r27, 0x01	; 1
    1aa4:	25 c1       	rjmp	.+586    	; 0x1cf0 <_fpadd_parts+0x28c>
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <_fpadd_parts+0x48>
    1aaa:	21 c1       	rjmp	.+578    	; 0x1cee <_fpadd_parts+0x28a>
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	a9 f4       	brne	.+42     	; 0x1ada <_fpadd_parts+0x76>
    1ab0:	92 30       	cpi	r25, 0x02	; 2
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <_fpadd_parts+0x52>
    1ab4:	1d c1       	rjmp	.+570    	; 0x1cf0 <_fpadd_parts+0x28c>
    1ab6:	9a 01       	movw	r18, r20
    1ab8:	ad 01       	movw	r20, r26
    1aba:	88 e0       	ldi	r24, 0x08	; 8
    1abc:	ea 01       	movw	r28, r20
    1abe:	09 90       	ld	r0, Y+
    1ac0:	ae 01       	movw	r20, r28
    1ac2:	e9 01       	movw	r28, r18
    1ac4:	09 92       	st	Y+, r0
    1ac6:	9e 01       	movw	r18, r28
    1ac8:	81 50       	subi	r24, 0x01	; 1
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <_fpadd_parts+0x58>
    1acc:	e2 01       	movw	r28, r4
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 91       	ld	r25, X
    1ad4:	89 23       	and	r24, r25
    1ad6:	81 83       	std	Z+1, r24	; 0x01
    1ad8:	08 c1       	rjmp	.+528    	; 0x1cea <_fpadd_parts+0x286>
    1ada:	92 30       	cpi	r25, 0x02	; 2
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <_fpadd_parts+0x7c>
    1ade:	07 c1       	rjmp	.+526    	; 0x1cee <_fpadd_parts+0x28a>
    1ae0:	12 96       	adiw	r26, 0x02	; 2
    1ae2:	2d 90       	ld	r2, X+
    1ae4:	3c 90       	ld	r3, X
    1ae6:	13 97       	sbiw	r26, 0x03	; 3
    1ae8:	eb 01       	movw	r28, r22
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	14 96       	adiw	r26, 0x04	; 4
    1af0:	ad 90       	ld	r10, X+
    1af2:	bd 90       	ld	r11, X+
    1af4:	cd 90       	ld	r12, X+
    1af6:	dc 90       	ld	r13, X
    1af8:	17 97       	sbiw	r26, 0x07	; 7
    1afa:	ec 80       	ldd	r14, Y+4	; 0x04
    1afc:	fd 80       	ldd	r15, Y+5	; 0x05
    1afe:	0e 81       	ldd	r16, Y+6	; 0x06
    1b00:	1f 81       	ldd	r17, Y+7	; 0x07
    1b02:	91 01       	movw	r18, r2
    1b04:	28 1b       	sub	r18, r24
    1b06:	39 0b       	sbc	r19, r25
    1b08:	b9 01       	movw	r22, r18
    1b0a:	37 ff       	sbrs	r19, 7
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <_fpadd_parts+0xb2>
    1b0e:	66 27       	eor	r22, r22
    1b10:	77 27       	eor	r23, r23
    1b12:	62 1b       	sub	r22, r18
    1b14:	73 0b       	sbc	r23, r19
    1b16:	60 32       	cpi	r22, 0x20	; 32
    1b18:	71 05       	cpc	r23, r1
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <_fpadd_parts+0xba>
    1b1c:	61 c0       	rjmp	.+194    	; 0x1be0 <_fpadd_parts+0x17c>
    1b1e:	12 16       	cp	r1, r18
    1b20:	13 06       	cpc	r1, r19
    1b22:	6c f5       	brge	.+90     	; 0x1b7e <_fpadd_parts+0x11a>
    1b24:	37 01       	movw	r6, r14
    1b26:	48 01       	movw	r8, r16
    1b28:	06 2e       	mov	r0, r22
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <_fpadd_parts+0xd0>
    1b2c:	96 94       	lsr	r9
    1b2e:	87 94       	ror	r8
    1b30:	77 94       	ror	r7
    1b32:	67 94       	ror	r6
    1b34:	0a 94       	dec	r0
    1b36:	d2 f7       	brpl	.-12     	; 0x1b2c <_fpadd_parts+0xc8>
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <_fpadd_parts+0xe6>
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	44 1f       	adc	r20, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	6a 95       	dec	r22
    1b4c:	d2 f7       	brpl	.-12     	; 0x1b42 <_fpadd_parts+0xde>
    1b4e:	21 50       	subi	r18, 0x01	; 1
    1b50:	30 40       	sbci	r19, 0x00	; 0
    1b52:	40 40       	sbci	r20, 0x00	; 0
    1b54:	50 40       	sbci	r21, 0x00	; 0
    1b56:	2e 21       	and	r18, r14
    1b58:	3f 21       	and	r19, r15
    1b5a:	40 23       	and	r20, r16
    1b5c:	51 23       	and	r21, r17
    1b5e:	21 15       	cp	r18, r1
    1b60:	31 05       	cpc	r19, r1
    1b62:	41 05       	cpc	r20, r1
    1b64:	51 05       	cpc	r21, r1
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <_fpadd_parts+0x10c>
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	79 01       	movw	r14, r18
    1b72:	8a 01       	movw	r16, r20
    1b74:	e6 28       	or	r14, r6
    1b76:	f7 28       	or	r15, r7
    1b78:	08 29       	or	r16, r8
    1b7a:	19 29       	or	r17, r9
    1b7c:	3c c0       	rjmp	.+120    	; 0x1bf6 <_fpadd_parts+0x192>
    1b7e:	23 2b       	or	r18, r19
    1b80:	d1 f1       	breq	.+116    	; 0x1bf6 <_fpadd_parts+0x192>
    1b82:	26 0e       	add	r2, r22
    1b84:	37 1e       	adc	r3, r23
    1b86:	35 01       	movw	r6, r10
    1b88:	46 01       	movw	r8, r12
    1b8a:	06 2e       	mov	r0, r22
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <_fpadd_parts+0x132>
    1b8e:	96 94       	lsr	r9
    1b90:	87 94       	ror	r8
    1b92:	77 94       	ror	r7
    1b94:	67 94       	ror	r6
    1b96:	0a 94       	dec	r0
    1b98:	d2 f7       	brpl	.-12     	; 0x1b8e <_fpadd_parts+0x12a>
    1b9a:	21 e0       	ldi	r18, 0x01	; 1
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <_fpadd_parts+0x148>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	6a 95       	dec	r22
    1bae:	d2 f7       	brpl	.-12     	; 0x1ba4 <_fpadd_parts+0x140>
    1bb0:	21 50       	subi	r18, 0x01	; 1
    1bb2:	30 40       	sbci	r19, 0x00	; 0
    1bb4:	40 40       	sbci	r20, 0x00	; 0
    1bb6:	50 40       	sbci	r21, 0x00	; 0
    1bb8:	2a 21       	and	r18, r10
    1bba:	3b 21       	and	r19, r11
    1bbc:	4c 21       	and	r20, r12
    1bbe:	5d 21       	and	r21, r13
    1bc0:	21 15       	cp	r18, r1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	41 05       	cpc	r20, r1
    1bc6:	51 05       	cpc	r21, r1
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <_fpadd_parts+0x16e>
    1bca:	21 e0       	ldi	r18, 0x01	; 1
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	59 01       	movw	r10, r18
    1bd4:	6a 01       	movw	r12, r20
    1bd6:	a6 28       	or	r10, r6
    1bd8:	b7 28       	or	r11, r7
    1bda:	c8 28       	or	r12, r8
    1bdc:	d9 28       	or	r13, r9
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <_fpadd_parts+0x192>
    1be0:	82 15       	cp	r24, r2
    1be2:	93 05       	cpc	r25, r3
    1be4:	2c f0       	brlt	.+10     	; 0x1bf0 <_fpadd_parts+0x18c>
    1be6:	1c 01       	movw	r2, r24
    1be8:	aa 24       	eor	r10, r10
    1bea:	bb 24       	eor	r11, r11
    1bec:	65 01       	movw	r12, r10
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <_fpadd_parts+0x192>
    1bf0:	ee 24       	eor	r14, r14
    1bf2:	ff 24       	eor	r15, r15
    1bf4:	87 01       	movw	r16, r14
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 91       	ld	r25, X
    1bfa:	d2 01       	movw	r26, r4
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	8c 91       	ld	r24, X
    1c00:	98 17       	cp	r25, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <_fpadd_parts+0x1a2>
    1c04:	45 c0       	rjmp	.+138    	; 0x1c90 <_fpadd_parts+0x22c>
    1c06:	99 23       	and	r25, r25
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <_fpadd_parts+0x1b4>
    1c0a:	a8 01       	movw	r20, r16
    1c0c:	97 01       	movw	r18, r14
    1c0e:	2a 19       	sub	r18, r10
    1c10:	3b 09       	sbc	r19, r11
    1c12:	4c 09       	sbc	r20, r12
    1c14:	5d 09       	sbc	r21, r13
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <_fpadd_parts+0x1c0>
    1c18:	a6 01       	movw	r20, r12
    1c1a:	95 01       	movw	r18, r10
    1c1c:	2e 19       	sub	r18, r14
    1c1e:	3f 09       	sbc	r19, r15
    1c20:	40 0b       	sbc	r20, r16
    1c22:	51 0b       	sbc	r21, r17
    1c24:	57 fd       	sbrc	r21, 7
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <_fpadd_parts+0x1d4>
    1c28:	11 82       	std	Z+1, r1	; 0x01
    1c2a:	33 82       	std	Z+3, r3	; 0x03
    1c2c:	22 82       	std	Z+2, r2	; 0x02
    1c2e:	24 83       	std	Z+4, r18	; 0x04
    1c30:	35 83       	std	Z+5, r19	; 0x05
    1c32:	46 83       	std	Z+6, r20	; 0x06
    1c34:	57 83       	std	Z+7, r21	; 0x07
    1c36:	1d c0       	rjmp	.+58     	; 0x1c72 <_fpadd_parts+0x20e>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	81 83       	std	Z+1, r24	; 0x01
    1c3c:	33 82       	std	Z+3, r3	; 0x03
    1c3e:	22 82       	std	Z+2, r2	; 0x02
    1c40:	88 27       	eor	r24, r24
    1c42:	99 27       	eor	r25, r25
    1c44:	dc 01       	movw	r26, r24
    1c46:	82 1b       	sub	r24, r18
    1c48:	93 0b       	sbc	r25, r19
    1c4a:	a4 0b       	sbc	r26, r20
    1c4c:	b5 0b       	sbc	r27, r21
    1c4e:	84 83       	std	Z+4, r24	; 0x04
    1c50:	95 83       	std	Z+5, r25	; 0x05
    1c52:	a6 83       	std	Z+6, r26	; 0x06
    1c54:	b7 83       	std	Z+7, r27	; 0x07
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <_fpadd_parts+0x20e>
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	44 1f       	adc	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	24 83       	std	Z+4, r18	; 0x04
    1c62:	35 83       	std	Z+5, r19	; 0x05
    1c64:	46 83       	std	Z+6, r20	; 0x06
    1c66:	57 83       	std	Z+7, r21	; 0x07
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	93 83       	std	Z+3, r25	; 0x03
    1c70:	82 83       	std	Z+2, r24	; 0x02
    1c72:	24 81       	ldd	r18, Z+4	; 0x04
    1c74:	35 81       	ldd	r19, Z+5	; 0x05
    1c76:	46 81       	ldd	r20, Z+6	; 0x06
    1c78:	57 81       	ldd	r21, Z+7	; 0x07
    1c7a:	da 01       	movw	r26, r20
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	a1 09       	sbc	r26, r1
    1c82:	b1 09       	sbc	r27, r1
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	af 4f       	sbci	r26, 0xFF	; 255
    1c8a:	bf 43       	sbci	r27, 0x3F	; 63
    1c8c:	28 f3       	brcs	.-54     	; 0x1c58 <_fpadd_parts+0x1f4>
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <_fpadd_parts+0x242>
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	33 82       	std	Z+3, r3	; 0x03
    1c94:	22 82       	std	Z+2, r2	; 0x02
    1c96:	ea 0c       	add	r14, r10
    1c98:	fb 1c       	adc	r15, r11
    1c9a:	0c 1d       	adc	r16, r12
    1c9c:	1d 1d       	adc	r17, r13
    1c9e:	e4 82       	std	Z+4, r14	; 0x04
    1ca0:	f5 82       	std	Z+5, r15	; 0x05
    1ca2:	06 83       	std	Z+6, r16	; 0x06
    1ca4:	17 83       	std	Z+7, r17	; 0x07
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	80 83       	st	Z, r24
    1caa:	24 81       	ldd	r18, Z+4	; 0x04
    1cac:	35 81       	ldd	r19, Z+5	; 0x05
    1cae:	46 81       	ldd	r20, Z+6	; 0x06
    1cb0:	57 81       	ldd	r21, Z+7	; 0x07
    1cb2:	57 ff       	sbrs	r21, 7
    1cb4:	1a c0       	rjmp	.+52     	; 0x1cea <_fpadd_parts+0x286>
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	aa 27       	eor	r26, r26
    1cba:	97 fd       	sbrc	r25, 7
    1cbc:	a0 95       	com	r26
    1cbe:	ba 2f       	mov	r27, r26
    1cc0:	81 70       	andi	r24, 0x01	; 1
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	a0 70       	andi	r26, 0x00	; 0
    1cc6:	b0 70       	andi	r27, 0x00	; 0
    1cc8:	56 95       	lsr	r21
    1cca:	47 95       	ror	r20
    1ccc:	37 95       	ror	r19
    1cce:	27 95       	ror	r18
    1cd0:	82 2b       	or	r24, r18
    1cd2:	93 2b       	or	r25, r19
    1cd4:	a4 2b       	or	r26, r20
    1cd6:	b5 2b       	or	r27, r21
    1cd8:	84 83       	std	Z+4, r24	; 0x04
    1cda:	95 83       	std	Z+5, r25	; 0x05
    1cdc:	a6 83       	std	Z+6, r26	; 0x06
    1cde:	b7 83       	std	Z+7, r27	; 0x07
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	93 83       	std	Z+3, r25	; 0x03
    1ce8:	82 83       	std	Z+2, r24	; 0x02
    1cea:	df 01       	movw	r26, r30
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <_fpadd_parts+0x28c>
    1cee:	d2 01       	movw	r26, r4
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	e2 e1       	ldi	r30, 0x12	; 18
    1cf8:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__epilogue_restores__>

00001cfc <__subsf3>:
    1cfc:	a0 e2       	ldi	r26, 0x20	; 32
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e8       	ldi	r30, 0x84	; 132
    1d02:	fe e0       	ldi	r31, 0x0E	; 14
    1d04:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x18>
    1d08:	69 83       	std	Y+1, r22	; 0x01
    1d0a:	7a 83       	std	Y+2, r23	; 0x02
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	2d 83       	std	Y+5, r18	; 0x05
    1d12:	3e 83       	std	Y+6, r19	; 0x06
    1d14:	4f 83       	std	Y+7, r20	; 0x07
    1d16:	58 87       	std	Y+8, r21	; 0x08
    1d18:	e9 e0       	ldi	r30, 0x09	; 9
    1d1a:	ee 2e       	mov	r14, r30
    1d1c:	f1 2c       	mov	r15, r1
    1d1e:	ec 0e       	add	r14, r28
    1d20:	fd 1e       	adc	r15, r29
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	b7 01       	movw	r22, r14
    1d28:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	0f 5e       	subi	r16, 0xEF	; 239
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	ce 01       	movw	r24, r28
    1d34:	05 96       	adiw	r24, 0x05	; 5
    1d36:	b8 01       	movw	r22, r16
    1d38:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1d3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	89 27       	eor	r24, r25
    1d42:	8a 8b       	std	Y+18, r24	; 0x12
    1d44:	c7 01       	movw	r24, r14
    1d46:	b8 01       	movw	r22, r16
    1d48:	ae 01       	movw	r20, r28
    1d4a:	47 5e       	subi	r20, 0xE7	; 231
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_fpadd_parts>
    1d52:	0e 94 3c 10 	call	0x2078	; 0x2078 <__pack_f>
    1d56:	a0 96       	adiw	r28, 0x20	; 32
    1d58:	e6 e0       	ldi	r30, 0x06	; 6
    1d5a:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x18>

00001d5e <__addsf3>:
    1d5e:	a0 e2       	ldi	r26, 0x20	; 32
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 eb       	ldi	r30, 0xB5	; 181
    1d64:	fe e0       	ldi	r31, 0x0E	; 14
    1d66:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x18>
    1d6a:	69 83       	std	Y+1, r22	; 0x01
    1d6c:	7a 83       	std	Y+2, r23	; 0x02
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	2d 83       	std	Y+5, r18	; 0x05
    1d74:	3e 83       	std	Y+6, r19	; 0x06
    1d76:	4f 83       	std	Y+7, r20	; 0x07
    1d78:	58 87       	std	Y+8, r21	; 0x08
    1d7a:	f9 e0       	ldi	r31, 0x09	; 9
    1d7c:	ef 2e       	mov	r14, r31
    1d7e:	f1 2c       	mov	r15, r1
    1d80:	ec 0e       	add	r14, r28
    1d82:	fd 1e       	adc	r15, r29
    1d84:	ce 01       	movw	r24, r28
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	b7 01       	movw	r22, r14
    1d8a:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1d8e:	8e 01       	movw	r16, r28
    1d90:	0f 5e       	subi	r16, 0xEF	; 239
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	ce 01       	movw	r24, r28
    1d96:	05 96       	adiw	r24, 0x05	; 5
    1d98:	b8 01       	movw	r22, r16
    1d9a:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b8 01       	movw	r22, r16
    1da2:	ae 01       	movw	r20, r28
    1da4:	47 5e       	subi	r20, 0xE7	; 231
    1da6:	5f 4f       	sbci	r21, 0xFF	; 255
    1da8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_fpadd_parts>
    1dac:	0e 94 3c 10 	call	0x2078	; 0x2078 <__pack_f>
    1db0:	a0 96       	adiw	r28, 0x20	; 32
    1db2:	e6 e0       	ldi	r30, 0x06	; 6
    1db4:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x18>

00001db8 <__divsf3>:
    1db8:	a8 e1       	ldi	r26, 0x18	; 24
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__prologue_saves__+0x10>
    1dc4:	69 83       	std	Y+1, r22	; 0x01
    1dc6:	7a 83       	std	Y+2, r23	; 0x02
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	2d 83       	std	Y+5, r18	; 0x05
    1dce:	3e 83       	std	Y+6, r19	; 0x06
    1dd0:	4f 83       	std	Y+7, r20	; 0x07
    1dd2:	58 87       	std	Y+8, r21	; 0x08
    1dd4:	b9 e0       	ldi	r27, 0x09	; 9
    1dd6:	eb 2e       	mov	r14, r27
    1dd8:	f1 2c       	mov	r15, r1
    1dda:	ec 0e       	add	r14, r28
    1ddc:	fd 1e       	adc	r15, r29
    1dde:	ce 01       	movw	r24, r28
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	b7 01       	movw	r22, r14
    1de4:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1de8:	8e 01       	movw	r16, r28
    1dea:	0f 5e       	subi	r16, 0xEF	; 239
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	ce 01       	movw	r24, r28
    1df0:	05 96       	adiw	r24, 0x05	; 5
    1df2:	b8 01       	movw	r22, r16
    1df4:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1df8:	29 85       	ldd	r18, Y+9	; 0x09
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <__divsf3+0x48>
    1dfe:	7e c0       	rjmp	.+252    	; 0x1efc <__divsf3+0x144>
    1e00:	39 89       	ldd	r19, Y+17	; 0x11
    1e02:	32 30       	cpi	r19, 0x02	; 2
    1e04:	10 f4       	brcc	.+4      	; 0x1e0a <__divsf3+0x52>
    1e06:	b8 01       	movw	r22, r16
    1e08:	7c c0       	rjmp	.+248    	; 0x1f02 <__divsf3+0x14a>
    1e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0e:	89 27       	eor	r24, r25
    1e10:	8a 87       	std	Y+10, r24	; 0x0a
    1e12:	24 30       	cpi	r18, 0x04	; 4
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <__divsf3+0x62>
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 f4       	brne	.+12     	; 0x1e26 <__divsf3+0x6e>
    1e1a:	23 17       	cp	r18, r19
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <__divsf3+0x68>
    1e1e:	6e c0       	rjmp	.+220    	; 0x1efc <__divsf3+0x144>
    1e20:	68 e9       	ldi	r22, 0x98	; 152
    1e22:	71 e0       	ldi	r23, 0x01	; 1
    1e24:	6e c0       	rjmp	.+220    	; 0x1f02 <__divsf3+0x14a>
    1e26:	34 30       	cpi	r19, 0x04	; 4
    1e28:	39 f4       	brne	.+14     	; 0x1e38 <__divsf3+0x80>
    1e2a:	1d 86       	std	Y+13, r1	; 0x0d
    1e2c:	1e 86       	std	Y+14, r1	; 0x0e
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
    1e30:	18 8a       	std	Y+16, r1	; 0x10
    1e32:	1c 86       	std	Y+12, r1	; 0x0c
    1e34:	1b 86       	std	Y+11, r1	; 0x0b
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <__divsf3+0x88>
    1e38:	32 30       	cpi	r19, 0x02	; 2
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <__divsf3+0x8c>
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	89 87       	std	Y+9, r24	; 0x09
    1e40:	b7 01       	movw	r22, r14
    1e42:	5f c0       	rjmp	.+190    	; 0x1f02 <__divsf3+0x14a>
    1e44:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e46:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	28 1b       	sub	r18, r24
    1e4e:	39 0b       	sbc	r19, r25
    1e50:	3c 87       	std	Y+12, r19	; 0x0c
    1e52:	2b 87       	std	Y+11, r18	; 0x0b
    1e54:	ed 84       	ldd	r14, Y+13	; 0x0d
    1e56:	fe 84       	ldd	r15, Y+14	; 0x0e
    1e58:	0f 85       	ldd	r16, Y+15	; 0x0f
    1e5a:	18 89       	ldd	r17, Y+16	; 0x10
    1e5c:	ad 88       	ldd	r10, Y+21	; 0x15
    1e5e:	be 88       	ldd	r11, Y+22	; 0x16
    1e60:	cf 88       	ldd	r12, Y+23	; 0x17
    1e62:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e64:	ea 14       	cp	r14, r10
    1e66:	fb 04       	cpc	r15, r11
    1e68:	0c 05       	cpc	r16, r12
    1e6a:	1d 05       	cpc	r17, r13
    1e6c:	40 f4       	brcc	.+16     	; 0x1e7e <__divsf3+0xc6>
    1e6e:	ee 0c       	add	r14, r14
    1e70:	ff 1c       	adc	r15, r15
    1e72:	00 1f       	adc	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	21 50       	subi	r18, 0x01	; 1
    1e78:	30 40       	sbci	r19, 0x00	; 0
    1e7a:	3c 87       	std	Y+12, r19	; 0x0c
    1e7c:	2b 87       	std	Y+11, r18	; 0x0b
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e4       	ldi	r27, 0x40	; 64
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	ea 14       	cp	r14, r10
    1e94:	fb 04       	cpc	r15, r11
    1e96:	0c 05       	cpc	r16, r12
    1e98:	1d 05       	cpc	r17, r13
    1e9a:	40 f0       	brcs	.+16     	; 0x1eac <__divsf3+0xf4>
    1e9c:	28 2b       	or	r18, r24
    1e9e:	39 2b       	or	r19, r25
    1ea0:	4a 2b       	or	r20, r26
    1ea2:	5b 2b       	or	r21, r27
    1ea4:	ea 18       	sub	r14, r10
    1ea6:	fb 08       	sbc	r15, r11
    1ea8:	0c 09       	sbc	r16, r12
    1eaa:	1d 09       	sbc	r17, r13
    1eac:	b6 95       	lsr	r27
    1eae:	a7 95       	ror	r26
    1eb0:	97 95       	ror	r25
    1eb2:	87 95       	ror	r24
    1eb4:	ee 0c       	add	r14, r14
    1eb6:	ff 1c       	adc	r15, r15
    1eb8:	00 1f       	adc	r16, r16
    1eba:	11 1f       	adc	r17, r17
    1ebc:	6f 5f       	subi	r22, 0xFF	; 255
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	6f 31       	cpi	r22, 0x1F	; 31
    1ec2:	71 05       	cpc	r23, r1
    1ec4:	31 f7       	brne	.-52     	; 0x1e92 <__divsf3+0xda>
    1ec6:	da 01       	movw	r26, r20
    1ec8:	c9 01       	movw	r24, r18
    1eca:	8f 77       	andi	r24, 0x7F	; 127
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	a0 70       	andi	r26, 0x00	; 0
    1ed0:	b0 70       	andi	r27, 0x00	; 0
    1ed2:	80 34       	cpi	r24, 0x40	; 64
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	a1 05       	cpc	r26, r1
    1ed8:	b1 05       	cpc	r27, r1
    1eda:	61 f4       	brne	.+24     	; 0x1ef4 <__divsf3+0x13c>
    1edc:	27 fd       	sbrc	r18, 7
    1ede:	0a c0       	rjmp	.+20     	; 0x1ef4 <__divsf3+0x13c>
    1ee0:	e1 14       	cp	r14, r1
    1ee2:	f1 04       	cpc	r15, r1
    1ee4:	01 05       	cpc	r16, r1
    1ee6:	11 05       	cpc	r17, r1
    1ee8:	29 f0       	breq	.+10     	; 0x1ef4 <__divsf3+0x13c>
    1eea:	20 5c       	subi	r18, 0xC0	; 192
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef2:	20 78       	andi	r18, 0x80	; 128
    1ef4:	2d 87       	std	Y+13, r18	; 0x0d
    1ef6:	3e 87       	std	Y+14, r19	; 0x0e
    1ef8:	4f 87       	std	Y+15, r20	; 0x0f
    1efa:	58 8b       	std	Y+16, r21	; 0x10
    1efc:	be 01       	movw	r22, r28
    1efe:	67 5f       	subi	r22, 0xF7	; 247
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	cb 01       	movw	r24, r22
    1f04:	0e 94 3c 10 	call	0x2078	; 0x2078 <__pack_f>
    1f08:	68 96       	adiw	r28, 0x18	; 24
    1f0a:	ea e0       	ldi	r30, 0x0A	; 10
    1f0c:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__epilogue_restores__+0x10>

00001f10 <__nesf2>:
    1f10:	a8 e1       	ldi	r26, 0x18	; 24
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e8       	ldi	r30, 0x8E	; 142
    1f16:	ff e0       	ldi	r31, 0x0F	; 15
    1f18:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x18>
    1f1c:	69 83       	std	Y+1, r22	; 0x01
    1f1e:	7a 83       	std	Y+2, r23	; 0x02
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	2d 83       	std	Y+5, r18	; 0x05
    1f26:	3e 83       	std	Y+6, r19	; 0x06
    1f28:	4f 83       	std	Y+7, r20	; 0x07
    1f2a:	58 87       	std	Y+8, r21	; 0x08
    1f2c:	89 e0       	ldi	r24, 0x09	; 9
    1f2e:	e8 2e       	mov	r14, r24
    1f30:	f1 2c       	mov	r15, r1
    1f32:	ec 0e       	add	r14, r28
    1f34:	fd 1e       	adc	r15, r29
    1f36:	ce 01       	movw	r24, r28
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	b7 01       	movw	r22, r14
    1f3c:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1f40:	8e 01       	movw	r16, r28
    1f42:	0f 5e       	subi	r16, 0xEF	; 239
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	ce 01       	movw	r24, r28
    1f48:	05 96       	adiw	r24, 0x05	; 5
    1f4a:	b8 01       	movw	r22, r16
    1f4c:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	40 f0       	brcs	.+16     	; 0x1f66 <__nesf2+0x56>
    1f56:	89 89       	ldd	r24, Y+17	; 0x11
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	28 f0       	brcs	.+10     	; 0x1f66 <__nesf2+0x56>
    1f5c:	c7 01       	movw	r24, r14
    1f5e:	b8 01       	movw	r22, r16
    1f60:	0e 94 89 11 	call	0x2312	; 0x2312 <__fpcmp_parts_f>
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <__nesf2+0x58>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	68 96       	adiw	r28, 0x18	; 24
    1f6a:	e6 e0       	ldi	r30, 0x06	; 6
    1f6c:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x18>

00001f70 <__gesf2>:
    1f70:	a8 e1       	ldi	r26, 0x18	; 24
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ee eb       	ldi	r30, 0xBE	; 190
    1f76:	ff e0       	ldi	r31, 0x0F	; 15
    1f78:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__+0x18>
    1f7c:	69 83       	std	Y+1, r22	; 0x01
    1f7e:	7a 83       	std	Y+2, r23	; 0x02
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	2d 83       	std	Y+5, r18	; 0x05
    1f86:	3e 83       	std	Y+6, r19	; 0x06
    1f88:	4f 83       	std	Y+7, r20	; 0x07
    1f8a:	58 87       	std	Y+8, r21	; 0x08
    1f8c:	89 e0       	ldi	r24, 0x09	; 9
    1f8e:	e8 2e       	mov	r14, r24
    1f90:	f1 2c       	mov	r15, r1
    1f92:	ec 0e       	add	r14, r28
    1f94:	fd 1e       	adc	r15, r29
    1f96:	ce 01       	movw	r24, r28
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	0f 5e       	subi	r16, 0xEF	; 239
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	05 96       	adiw	r24, 0x05	; 5
    1faa:	b8 01       	movw	r22, r16
    1fac:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	40 f0       	brcs	.+16     	; 0x1fc6 <__gesf2+0x56>
    1fb6:	89 89       	ldd	r24, Y+17	; 0x11
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	28 f0       	brcs	.+10     	; 0x1fc6 <__gesf2+0x56>
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	b8 01       	movw	r22, r16
    1fc0:	0e 94 89 11 	call	0x2312	; 0x2312 <__fpcmp_parts_f>
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <__gesf2+0x58>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	68 96       	adiw	r28, 0x18	; 24
    1fca:	e6 e0       	ldi	r30, 0x06	; 6
    1fcc:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x18>

00001fd0 <__fixsfsi>:
    1fd0:	ac e0       	ldi	r26, 0x0C	; 12
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	ee ee       	ldi	r30, 0xEE	; 238
    1fd6:	ff e0       	ldi	r31, 0x0F	; 15
    1fd8:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x20>
    1fdc:	69 83       	std	Y+1, r22	; 0x01
    1fde:	7a 83       	std	Y+2, r23	; 0x02
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	be 01       	movw	r22, r28
    1fea:	6b 5f       	subi	r22, 0xFB	; 251
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	0e 94 11 11 	call	0x2222	; 0x2222 <__unpack_f>
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	82 30       	cpi	r24, 0x02	; 2
    1ff6:	61 f1       	breq	.+88     	; 0x2050 <__fixsfsi+0x80>
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	50 f1       	brcs	.+84     	; 0x2050 <__fixsfsi+0x80>
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <__fixsfsi+0x38>
    2000:	8e 81       	ldd	r24, Y+6	; 0x06
    2002:	88 23       	and	r24, r24
    2004:	51 f1       	breq	.+84     	; 0x205a <__fixsfsi+0x8a>
    2006:	2e c0       	rjmp	.+92     	; 0x2064 <__fixsfsi+0x94>
    2008:	2f 81       	ldd	r18, Y+7	; 0x07
    200a:	38 85       	ldd	r19, Y+8	; 0x08
    200c:	37 fd       	sbrc	r19, 7
    200e:	20 c0       	rjmp	.+64     	; 0x2050 <__fixsfsi+0x80>
    2010:	6e 81       	ldd	r22, Y+6	; 0x06
    2012:	2f 31       	cpi	r18, 0x1F	; 31
    2014:	31 05       	cpc	r19, r1
    2016:	1c f0       	brlt	.+6      	; 0x201e <__fixsfsi+0x4e>
    2018:	66 23       	and	r22, r22
    201a:	f9 f0       	breq	.+62     	; 0x205a <__fixsfsi+0x8a>
    201c:	23 c0       	rjmp	.+70     	; 0x2064 <__fixsfsi+0x94>
    201e:	8e e1       	ldi	r24, 0x1E	; 30
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	82 1b       	sub	r24, r18
    2024:	93 0b       	sbc	r25, r19
    2026:	29 85       	ldd	r18, Y+9	; 0x09
    2028:	3a 85       	ldd	r19, Y+10	; 0x0a
    202a:	4b 85       	ldd	r20, Y+11	; 0x0b
    202c:	5c 85       	ldd	r21, Y+12	; 0x0c
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <__fixsfsi+0x68>
    2030:	56 95       	lsr	r21
    2032:	47 95       	ror	r20
    2034:	37 95       	ror	r19
    2036:	27 95       	ror	r18
    2038:	8a 95       	dec	r24
    203a:	d2 f7       	brpl	.-12     	; 0x2030 <__fixsfsi+0x60>
    203c:	66 23       	and	r22, r22
    203e:	b1 f0       	breq	.+44     	; 0x206c <__fixsfsi+0x9c>
    2040:	50 95       	com	r21
    2042:	40 95       	com	r20
    2044:	30 95       	com	r19
    2046:	21 95       	neg	r18
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	4f 4f       	sbci	r20, 0xFF	; 255
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	0e c0       	rjmp	.+28     	; 0x206c <__fixsfsi+0x9c>
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	09 c0       	rjmp	.+18     	; 0x206c <__fixsfsi+0x9c>
    205a:	2f ef       	ldi	r18, 0xFF	; 255
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f ef       	ldi	r20, 0xFF	; 255
    2060:	5f e7       	ldi	r21, 0x7F	; 127
    2062:	04 c0       	rjmp	.+8      	; 0x206c <__fixsfsi+0x9c>
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e8       	ldi	r21, 0x80	; 128
    206c:	b9 01       	movw	r22, r18
    206e:	ca 01       	movw	r24, r20
    2070:	2c 96       	adiw	r28, 0x0c	; 12
    2072:	e2 e0       	ldi	r30, 0x02	; 2
    2074:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x20>

00002078 <__pack_f>:
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	fc 01       	movw	r30, r24
    2084:	e4 80       	ldd	r14, Z+4	; 0x04
    2086:	f5 80       	ldd	r15, Z+5	; 0x05
    2088:	06 81       	ldd	r16, Z+6	; 0x06
    208a:	17 81       	ldd	r17, Z+7	; 0x07
    208c:	d1 80       	ldd	r13, Z+1	; 0x01
    208e:	80 81       	ld	r24, Z
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	48 f4       	brcc	.+18     	; 0x20a6 <__pack_f+0x2e>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e1       	ldi	r26, 0x10	; 16
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e8 2a       	or	r14, r24
    209e:	f9 2a       	or	r15, r25
    20a0:	0a 2b       	or	r16, r26
    20a2:	1b 2b       	or	r17, r27
    20a4:	a5 c0       	rjmp	.+330    	; 0x21f0 <__pack_f+0x178>
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	09 f4       	brne	.+2      	; 0x20ac <__pack_f+0x34>
    20aa:	9f c0       	rjmp	.+318    	; 0x21ea <__pack_f+0x172>
    20ac:	82 30       	cpi	r24, 0x02	; 2
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <__pack_f+0x40>
    20b0:	ee 24       	eor	r14, r14
    20b2:	ff 24       	eor	r15, r15
    20b4:	87 01       	movw	r16, r14
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <__pack_f+0x4a>
    20b8:	e1 14       	cp	r14, r1
    20ba:	f1 04       	cpc	r15, r1
    20bc:	01 05       	cpc	r16, r1
    20be:	11 05       	cpc	r17, r1
    20c0:	19 f4       	brne	.+6      	; 0x20c8 <__pack_f+0x50>
    20c2:	e0 e0       	ldi	r30, 0x00	; 0
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	96 c0       	rjmp	.+300    	; 0x21f4 <__pack_f+0x17c>
    20c8:	62 81       	ldd	r22, Z+2	; 0x02
    20ca:	73 81       	ldd	r23, Z+3	; 0x03
    20cc:	9f ef       	ldi	r25, 0xFF	; 255
    20ce:	62 38       	cpi	r22, 0x82	; 130
    20d0:	79 07       	cpc	r23, r25
    20d2:	0c f0       	brlt	.+2      	; 0x20d6 <__pack_f+0x5e>
    20d4:	5b c0       	rjmp	.+182    	; 0x218c <__pack_f+0x114>
    20d6:	22 e8       	ldi	r18, 0x82	; 130
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	26 1b       	sub	r18, r22
    20dc:	37 0b       	sbc	r19, r23
    20de:	2a 31       	cpi	r18, 0x1A	; 26
    20e0:	31 05       	cpc	r19, r1
    20e2:	2c f0       	brlt	.+10     	; 0x20ee <__pack_f+0x76>
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	2a c0       	rjmp	.+84     	; 0x2142 <__pack_f+0xca>
    20ee:	b8 01       	movw	r22, r16
    20f0:	a7 01       	movw	r20, r14
    20f2:	02 2e       	mov	r0, r18
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <__pack_f+0x86>
    20f6:	76 95       	lsr	r23
    20f8:	67 95       	ror	r22
    20fa:	57 95       	ror	r21
    20fc:	47 95       	ror	r20
    20fe:	0a 94       	dec	r0
    2100:	d2 f7       	brpl	.-12     	; 0x20f6 <__pack_f+0x7e>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <__pack_f+0x9c>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	aa 1f       	adc	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	2a 95       	dec	r18
    2116:	d2 f7       	brpl	.-12     	; 0x210c <__pack_f+0x94>
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	a1 09       	sbc	r26, r1
    211c:	b1 09       	sbc	r27, r1
    211e:	8e 21       	and	r24, r14
    2120:	9f 21       	and	r25, r15
    2122:	a0 23       	and	r26, r16
    2124:	b1 23       	and	r27, r17
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	a1 05       	cpc	r26, r1
    212a:	b1 05       	cpc	r27, r1
    212c:	21 f0       	breq	.+8      	; 0x2136 <__pack_f+0xbe>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	9a 01       	movw	r18, r20
    2138:	ab 01       	movw	r20, r22
    213a:	28 2b       	or	r18, r24
    213c:	39 2b       	or	r19, r25
    213e:	4a 2b       	or	r20, r26
    2140:	5b 2b       	or	r21, r27
    2142:	da 01       	movw	r26, r20
    2144:	c9 01       	movw	r24, r18
    2146:	8f 77       	andi	r24, 0x7F	; 127
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	a0 70       	andi	r26, 0x00	; 0
    214c:	b0 70       	andi	r27, 0x00	; 0
    214e:	80 34       	cpi	r24, 0x40	; 64
    2150:	91 05       	cpc	r25, r1
    2152:	a1 05       	cpc	r26, r1
    2154:	b1 05       	cpc	r27, r1
    2156:	39 f4       	brne	.+14     	; 0x2166 <__pack_f+0xee>
    2158:	27 ff       	sbrs	r18, 7
    215a:	09 c0       	rjmp	.+18     	; 0x216e <__pack_f+0xf6>
    215c:	20 5c       	subi	r18, 0xC0	; 192
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	4f 4f       	sbci	r20, 0xFF	; 255
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
    2164:	04 c0       	rjmp	.+8      	; 0x216e <__pack_f+0xf6>
    2166:	21 5c       	subi	r18, 0xC1	; 193
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	4f 4f       	sbci	r20, 0xFF	; 255
    216c:	5f 4f       	sbci	r21, 0xFF	; 255
    216e:	e0 e0       	ldi	r30, 0x00	; 0
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	20 30       	cpi	r18, 0x00	; 0
    2174:	a0 e0       	ldi	r26, 0x00	; 0
    2176:	3a 07       	cpc	r19, r26
    2178:	a0 e0       	ldi	r26, 0x00	; 0
    217a:	4a 07       	cpc	r20, r26
    217c:	a0 e4       	ldi	r26, 0x40	; 64
    217e:	5a 07       	cpc	r21, r26
    2180:	10 f0       	brcs	.+4      	; 0x2186 <__pack_f+0x10e>
    2182:	e1 e0       	ldi	r30, 0x01	; 1
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	79 01       	movw	r14, r18
    2188:	8a 01       	movw	r16, r20
    218a:	27 c0       	rjmp	.+78     	; 0x21da <__pack_f+0x162>
    218c:	60 38       	cpi	r22, 0x80	; 128
    218e:	71 05       	cpc	r23, r1
    2190:	64 f5       	brge	.+88     	; 0x21ea <__pack_f+0x172>
    2192:	fb 01       	movw	r30, r22
    2194:	e1 58       	subi	r30, 0x81	; 129
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	d8 01       	movw	r26, r16
    219a:	c7 01       	movw	r24, r14
    219c:	8f 77       	andi	r24, 0x7F	; 127
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	a0 70       	andi	r26, 0x00	; 0
    21a2:	b0 70       	andi	r27, 0x00	; 0
    21a4:	80 34       	cpi	r24, 0x40	; 64
    21a6:	91 05       	cpc	r25, r1
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	39 f4       	brne	.+14     	; 0x21bc <__pack_f+0x144>
    21ae:	e7 fe       	sbrs	r14, 7
    21b0:	0d c0       	rjmp	.+26     	; 0x21cc <__pack_f+0x154>
    21b2:	80 e4       	ldi	r24, 0x40	; 64
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e0       	ldi	r26, 0x00	; 0
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <__pack_f+0x14c>
    21bc:	8f e3       	ldi	r24, 0x3F	; 63
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e8 0e       	add	r14, r24
    21c6:	f9 1e       	adc	r15, r25
    21c8:	0a 1f       	adc	r16, r26
    21ca:	1b 1f       	adc	r17, r27
    21cc:	17 ff       	sbrs	r17, 7
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <__pack_f+0x162>
    21d0:	16 95       	lsr	r17
    21d2:	07 95       	ror	r16
    21d4:	f7 94       	ror	r15
    21d6:	e7 94       	ror	r14
    21d8:	31 96       	adiw	r30, 0x01	; 1
    21da:	87 e0       	ldi	r24, 0x07	; 7
    21dc:	16 95       	lsr	r17
    21de:	07 95       	ror	r16
    21e0:	f7 94       	ror	r15
    21e2:	e7 94       	ror	r14
    21e4:	8a 95       	dec	r24
    21e6:	d1 f7       	brne	.-12     	; 0x21dc <__pack_f+0x164>
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <__pack_f+0x17c>
    21ea:	ee 24       	eor	r14, r14
    21ec:	ff 24       	eor	r15, r15
    21ee:	87 01       	movw	r16, r14
    21f0:	ef ef       	ldi	r30, 0xFF	; 255
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	6e 2f       	mov	r22, r30
    21f6:	67 95       	ror	r22
    21f8:	66 27       	eor	r22, r22
    21fa:	67 95       	ror	r22
    21fc:	90 2f       	mov	r25, r16
    21fe:	9f 77       	andi	r25, 0x7F	; 127
    2200:	d7 94       	ror	r13
    2202:	dd 24       	eor	r13, r13
    2204:	d7 94       	ror	r13
    2206:	8e 2f       	mov	r24, r30
    2208:	86 95       	lsr	r24
    220a:	49 2f       	mov	r20, r25
    220c:	46 2b       	or	r20, r22
    220e:	58 2f       	mov	r21, r24
    2210:	5d 29       	or	r21, r13
    2212:	b7 01       	movw	r22, r14
    2214:	ca 01       	movw	r24, r20
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	08 95       	ret

00002222 <__unpack_f>:
    2222:	fc 01       	movw	r30, r24
    2224:	db 01       	movw	r26, r22
    2226:	40 81       	ld	r20, Z
    2228:	51 81       	ldd	r21, Z+1	; 0x01
    222a:	22 81       	ldd	r18, Z+2	; 0x02
    222c:	62 2f       	mov	r22, r18
    222e:	6f 77       	andi	r22, 0x7F	; 127
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	22 1f       	adc	r18, r18
    2234:	22 27       	eor	r18, r18
    2236:	22 1f       	adc	r18, r18
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	89 2f       	mov	r24, r25
    223c:	88 0f       	add	r24, r24
    223e:	82 2b       	or	r24, r18
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	99 1f       	adc	r25, r25
    2246:	99 27       	eor	r25, r25
    2248:	99 1f       	adc	r25, r25
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	9c 93       	st	X, r25
    224e:	11 97       	sbiw	r26, 0x01	; 1
    2250:	21 15       	cp	r18, r1
    2252:	31 05       	cpc	r19, r1
    2254:	a9 f5       	brne	.+106    	; 0x22c0 <__unpack_f+0x9e>
    2256:	41 15       	cp	r20, r1
    2258:	51 05       	cpc	r21, r1
    225a:	61 05       	cpc	r22, r1
    225c:	71 05       	cpc	r23, r1
    225e:	11 f4       	brne	.+4      	; 0x2264 <__unpack_f+0x42>
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	37 c0       	rjmp	.+110    	; 0x22d2 <__unpack_f+0xb0>
    2264:	82 e8       	ldi	r24, 0x82	; 130
    2266:	9f ef       	ldi	r25, 0xFF	; 255
    2268:	13 96       	adiw	r26, 0x03	; 3
    226a:	9c 93       	st	X, r25
    226c:	8e 93       	st	-X, r24
    226e:	12 97       	sbiw	r26, 0x02	; 2
    2270:	9a 01       	movw	r18, r20
    2272:	ab 01       	movw	r20, r22
    2274:	67 e0       	ldi	r22, 0x07	; 7
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	44 1f       	adc	r20, r20
    227c:	55 1f       	adc	r21, r21
    227e:	6a 95       	dec	r22
    2280:	d1 f7       	brne	.-12     	; 0x2276 <__unpack_f+0x54>
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	8c 93       	st	X, r24
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <__unpack_f+0x80>
    2288:	22 0f       	add	r18, r18
    228a:	33 1f       	adc	r19, r19
    228c:	44 1f       	adc	r20, r20
    228e:	55 1f       	adc	r21, r21
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	8d 91       	ld	r24, X+
    2294:	9c 91       	ld	r25, X
    2296:	13 97       	sbiw	r26, 0x03	; 3
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	20 30       	cpi	r18, 0x00	; 0
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	38 07       	cpc	r19, r24
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	48 07       	cpc	r20, r24
    22ac:	80 e4       	ldi	r24, 0x40	; 64
    22ae:	58 07       	cpc	r21, r24
    22b0:	58 f3       	brcs	.-42     	; 0x2288 <__unpack_f+0x66>
    22b2:	14 96       	adiw	r26, 0x04	; 4
    22b4:	2d 93       	st	X+, r18
    22b6:	3d 93       	st	X+, r19
    22b8:	4d 93       	st	X+, r20
    22ba:	5c 93       	st	X, r21
    22bc:	17 97       	sbiw	r26, 0x07	; 7
    22be:	08 95       	ret
    22c0:	2f 3f       	cpi	r18, 0xFF	; 255
    22c2:	31 05       	cpc	r19, r1
    22c4:	79 f4       	brne	.+30     	; 0x22e4 <__unpack_f+0xc2>
    22c6:	41 15       	cp	r20, r1
    22c8:	51 05       	cpc	r21, r1
    22ca:	61 05       	cpc	r22, r1
    22cc:	71 05       	cpc	r23, r1
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <__unpack_f+0xb4>
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	8c 93       	st	X, r24
    22d4:	08 95       	ret
    22d6:	64 ff       	sbrs	r22, 4
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <__unpack_f+0xbe>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8c 93       	st	X, r24
    22de:	12 c0       	rjmp	.+36     	; 0x2304 <__unpack_f+0xe2>
    22e0:	1c 92       	st	X, r1
    22e2:	10 c0       	rjmp	.+32     	; 0x2304 <__unpack_f+0xe2>
    22e4:	2f 57       	subi	r18, 0x7F	; 127
    22e6:	30 40       	sbci	r19, 0x00	; 0
    22e8:	13 96       	adiw	r26, 0x03	; 3
    22ea:	3c 93       	st	X, r19
    22ec:	2e 93       	st	-X, r18
    22ee:	12 97       	sbiw	r26, 0x02	; 2
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	8c 93       	st	X, r24
    22f4:	87 e0       	ldi	r24, 0x07	; 7
    22f6:	44 0f       	add	r20, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	8a 95       	dec	r24
    2300:	d1 f7       	brne	.-12     	; 0x22f6 <__unpack_f+0xd4>
    2302:	70 64       	ori	r23, 0x40	; 64
    2304:	14 96       	adiw	r26, 0x04	; 4
    2306:	4d 93       	st	X+, r20
    2308:	5d 93       	st	X+, r21
    230a:	6d 93       	st	X+, r22
    230c:	7c 93       	st	X, r23
    230e:	17 97       	sbiw	r26, 0x07	; 7
    2310:	08 95       	ret

00002312 <__fpcmp_parts_f>:
    2312:	1f 93       	push	r17
    2314:	dc 01       	movw	r26, r24
    2316:	fb 01       	movw	r30, r22
    2318:	9c 91       	ld	r25, X
    231a:	92 30       	cpi	r25, 0x02	; 2
    231c:	08 f4       	brcc	.+2      	; 0x2320 <__fpcmp_parts_f+0xe>
    231e:	47 c0       	rjmp	.+142    	; 0x23ae <__fpcmp_parts_f+0x9c>
    2320:	80 81       	ld	r24, Z
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	08 f4       	brcc	.+2      	; 0x2328 <__fpcmp_parts_f+0x16>
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <__fpcmp_parts_f+0x9c>
    2328:	94 30       	cpi	r25, 0x04	; 4
    232a:	51 f4       	brne	.+20     	; 0x2340 <__fpcmp_parts_f+0x2e>
    232c:	11 96       	adiw	r26, 0x01	; 1
    232e:	1c 91       	ld	r17, X
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	99 f5       	brne	.+102    	; 0x239a <__fpcmp_parts_f+0x88>
    2334:	81 81       	ldd	r24, Z+1	; 0x01
    2336:	68 2f       	mov	r22, r24
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	61 1b       	sub	r22, r17
    233c:	71 09       	sbc	r23, r1
    233e:	3f c0       	rjmp	.+126    	; 0x23be <__fpcmp_parts_f+0xac>
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	21 f0       	breq	.+8      	; 0x234c <__fpcmp_parts_f+0x3a>
    2344:	92 30       	cpi	r25, 0x02	; 2
    2346:	31 f4       	brne	.+12     	; 0x2354 <__fpcmp_parts_f+0x42>
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	b9 f1       	breq	.+110    	; 0x23ba <__fpcmp_parts_f+0xa8>
    234c:	81 81       	ldd	r24, Z+1	; 0x01
    234e:	88 23       	and	r24, r24
    2350:	89 f1       	breq	.+98     	; 0x23b4 <__fpcmp_parts_f+0xa2>
    2352:	2d c0       	rjmp	.+90     	; 0x23ae <__fpcmp_parts_f+0x9c>
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	1c 91       	ld	r17, X
    2358:	11 97       	sbiw	r26, 0x01	; 1
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	f1 f0       	breq	.+60     	; 0x239a <__fpcmp_parts_f+0x88>
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	18 17       	cp	r17, r24
    2362:	d9 f4       	brne	.+54     	; 0x239a <__fpcmp_parts_f+0x88>
    2364:	12 96       	adiw	r26, 0x02	; 2
    2366:	2d 91       	ld	r18, X+
    2368:	3c 91       	ld	r19, X
    236a:	13 97       	sbiw	r26, 0x03	; 3
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	82 17       	cp	r24, r18
    2372:	93 07       	cpc	r25, r19
    2374:	94 f0       	brlt	.+36     	; 0x239a <__fpcmp_parts_f+0x88>
    2376:	28 17       	cp	r18, r24
    2378:	39 07       	cpc	r19, r25
    237a:	bc f0       	brlt	.+46     	; 0x23aa <__fpcmp_parts_f+0x98>
    237c:	14 96       	adiw	r26, 0x04	; 4
    237e:	8d 91       	ld	r24, X+
    2380:	9d 91       	ld	r25, X+
    2382:	0d 90       	ld	r0, X+
    2384:	bc 91       	ld	r27, X
    2386:	a0 2d       	mov	r26, r0
    2388:	24 81       	ldd	r18, Z+4	; 0x04
    238a:	35 81       	ldd	r19, Z+5	; 0x05
    238c:	46 81       	ldd	r20, Z+6	; 0x06
    238e:	57 81       	ldd	r21, Z+7	; 0x07
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	4a 07       	cpc	r20, r26
    2396:	5b 07       	cpc	r21, r27
    2398:	18 f4       	brcc	.+6      	; 0x23a0 <__fpcmp_parts_f+0x8e>
    239a:	11 23       	and	r17, r17
    239c:	41 f0       	breq	.+16     	; 0x23ae <__fpcmp_parts_f+0x9c>
    239e:	0a c0       	rjmp	.+20     	; 0x23b4 <__fpcmp_parts_f+0xa2>
    23a0:	82 17       	cp	r24, r18
    23a2:	93 07       	cpc	r25, r19
    23a4:	a4 07       	cpc	r26, r20
    23a6:	b5 07       	cpc	r27, r21
    23a8:	40 f4       	brcc	.+16     	; 0x23ba <__fpcmp_parts_f+0xa8>
    23aa:	11 23       	and	r17, r17
    23ac:	19 f0       	breq	.+6      	; 0x23b4 <__fpcmp_parts_f+0xa2>
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <__fpcmp_parts_f+0xac>
    23b4:	6f ef       	ldi	r22, 0xFF	; 255
    23b6:	7f ef       	ldi	r23, 0xFF	; 255
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <__fpcmp_parts_f+0xac>
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	cb 01       	movw	r24, r22
    23c0:	1f 91       	pop	r17
    23c2:	08 95       	ret

000023c4 <vfprintf>:
    23c4:	a1 e1       	ldi	r26, 0x11	; 17
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ca:	f1 e1       	ldi	r31, 0x11	; 17
    23cc:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__prologue_saves__>
    23d0:	3c 01       	movw	r6, r24
    23d2:	7f 87       	std	Y+15, r23	; 0x0f
    23d4:	6e 87       	std	Y+14, r22	; 0x0e
    23d6:	6a 01       	movw	r12, r20
    23d8:	fc 01       	movw	r30, r24
    23da:	17 82       	std	Z+7, r1	; 0x07
    23dc:	16 82       	std	Z+6, r1	; 0x06
    23de:	83 81       	ldd	r24, Z+3	; 0x03
    23e0:	81 fd       	sbrc	r24, 1
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <vfprintf+0x26>
    23e4:	6f ef       	ldi	r22, 0xFF	; 255
    23e6:	7f ef       	ldi	r23, 0xFF	; 255
    23e8:	6f c3       	rjmp	.+1758   	; 0x2ac8 <vfprintf+0x704>
    23ea:	9e 01       	movw	r18, r28
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	39 8b       	std	Y+17, r19	; 0x11
    23f2:	28 8b       	std	Y+16, r18	; 0x10
    23f4:	f3 01       	movw	r30, r6
    23f6:	23 81       	ldd	r18, Z+3	; 0x03
    23f8:	ee 85       	ldd	r30, Y+14	; 0x0e
    23fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    23fc:	23 fd       	sbrc	r18, 3
    23fe:	85 91       	lpm	r24, Z+
    2400:	23 ff       	sbrs	r18, 3
    2402:	81 91       	ld	r24, Z+
    2404:	ff 87       	std	Y+15, r31	; 0x0f
    2406:	ee 87       	std	Y+14, r30	; 0x0e
    2408:	88 23       	and	r24, r24
    240a:	09 f4       	brne	.+2      	; 0x240e <vfprintf+0x4a>
    240c:	5a c3       	rjmp	.+1716   	; 0x2ac2 <vfprintf+0x6fe>
    240e:	85 32       	cpi	r24, 0x25	; 37
    2410:	51 f4       	brne	.+20     	; 0x2426 <vfprintf+0x62>
    2412:	ee 85       	ldd	r30, Y+14	; 0x0e
    2414:	ff 85       	ldd	r31, Y+15	; 0x0f
    2416:	23 fd       	sbrc	r18, 3
    2418:	85 91       	lpm	r24, Z+
    241a:	23 ff       	sbrs	r18, 3
    241c:	81 91       	ld	r24, Z+
    241e:	ff 87       	std	Y+15, r31	; 0x0f
    2420:	ee 87       	std	Y+14, r30	; 0x0e
    2422:	85 32       	cpi	r24, 0x25	; 37
    2424:	29 f4       	brne	.+10     	; 0x2430 <vfprintf+0x6c>
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b3 01       	movw	r22, r6
    242a:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    242e:	e2 cf       	rjmp	.-60     	; 0x23f4 <vfprintf+0x30>
    2430:	98 2f       	mov	r25, r24
    2432:	10 e0       	ldi	r17, 0x00	; 0
    2434:	88 24       	eor	r8, r8
    2436:	99 24       	eor	r9, r9
    2438:	10 32       	cpi	r17, 0x20	; 32
    243a:	b0 f4       	brcc	.+44     	; 0x2468 <vfprintf+0xa4>
    243c:	9b 32       	cpi	r25, 0x2B	; 43
    243e:	69 f0       	breq	.+26     	; 0x245a <vfprintf+0x96>
    2440:	9c 32       	cpi	r25, 0x2C	; 44
    2442:	28 f4       	brcc	.+10     	; 0x244e <vfprintf+0x8a>
    2444:	90 32       	cpi	r25, 0x20	; 32
    2446:	51 f0       	breq	.+20     	; 0x245c <vfprintf+0x98>
    2448:	93 32       	cpi	r25, 0x23	; 35
    244a:	71 f4       	brne	.+28     	; 0x2468 <vfprintf+0xa4>
    244c:	0b c0       	rjmp	.+22     	; 0x2464 <vfprintf+0xa0>
    244e:	9d 32       	cpi	r25, 0x2D	; 45
    2450:	39 f0       	breq	.+14     	; 0x2460 <vfprintf+0x9c>
    2452:	90 33       	cpi	r25, 0x30	; 48
    2454:	49 f4       	brne	.+18     	; 0x2468 <vfprintf+0xa4>
    2456:	11 60       	ori	r17, 0x01	; 1
    2458:	28 c0       	rjmp	.+80     	; 0x24aa <vfprintf+0xe6>
    245a:	12 60       	ori	r17, 0x02	; 2
    245c:	14 60       	ori	r17, 0x04	; 4
    245e:	25 c0       	rjmp	.+74     	; 0x24aa <vfprintf+0xe6>
    2460:	18 60       	ori	r17, 0x08	; 8
    2462:	23 c0       	rjmp	.+70     	; 0x24aa <vfprintf+0xe6>
    2464:	10 61       	ori	r17, 0x10	; 16
    2466:	21 c0       	rjmp	.+66     	; 0x24aa <vfprintf+0xe6>
    2468:	17 fd       	sbrc	r17, 7
    246a:	2a c0       	rjmp	.+84     	; 0x24c0 <vfprintf+0xfc>
    246c:	89 2f       	mov	r24, r25
    246e:	80 53       	subi	r24, 0x30	; 48
    2470:	8a 30       	cpi	r24, 0x0A	; 10
    2472:	78 f4       	brcc	.+30     	; 0x2492 <vfprintf+0xce>
    2474:	16 ff       	sbrs	r17, 6
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <vfprintf+0xc0>
    2478:	fa e0       	ldi	r31, 0x0A	; 10
    247a:	9f 9e       	mul	r9, r31
    247c:	90 2c       	mov	r9, r0
    247e:	11 24       	eor	r1, r1
    2480:	98 0e       	add	r9, r24
    2482:	13 c0       	rjmp	.+38     	; 0x24aa <vfprintf+0xe6>
    2484:	3a e0       	ldi	r19, 0x0A	; 10
    2486:	83 9e       	mul	r8, r19
    2488:	80 2c       	mov	r8, r0
    248a:	11 24       	eor	r1, r1
    248c:	88 0e       	add	r8, r24
    248e:	10 62       	ori	r17, 0x20	; 32
    2490:	0c c0       	rjmp	.+24     	; 0x24aa <vfprintf+0xe6>
    2492:	9e 32       	cpi	r25, 0x2E	; 46
    2494:	21 f4       	brne	.+8      	; 0x249e <vfprintf+0xda>
    2496:	16 fd       	sbrc	r17, 6
    2498:	14 c3       	rjmp	.+1576   	; 0x2ac2 <vfprintf+0x6fe>
    249a:	10 64       	ori	r17, 0x40	; 64
    249c:	06 c0       	rjmp	.+12     	; 0x24aa <vfprintf+0xe6>
    249e:	9c 36       	cpi	r25, 0x6C	; 108
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <vfprintf+0xe2>
    24a2:	10 68       	ori	r17, 0x80	; 128
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0xe6>
    24a6:	98 36       	cpi	r25, 0x68	; 104
    24a8:	59 f4       	brne	.+22     	; 0x24c0 <vfprintf+0xfc>
    24aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    24ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    24ae:	23 fd       	sbrc	r18, 3
    24b0:	95 91       	lpm	r25, Z+
    24b2:	23 ff       	sbrs	r18, 3
    24b4:	91 91       	ld	r25, Z+
    24b6:	ff 87       	std	Y+15, r31	; 0x0f
    24b8:	ee 87       	std	Y+14, r30	; 0x0e
    24ba:	99 23       	and	r25, r25
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <vfprintf+0xfc>
    24be:	bc cf       	rjmp	.-136    	; 0x2438 <vfprintf+0x74>
    24c0:	89 2f       	mov	r24, r25
    24c2:	85 54       	subi	r24, 0x45	; 69
    24c4:	83 30       	cpi	r24, 0x03	; 3
    24c6:	20 f4       	brcc	.+8      	; 0x24d0 <vfprintf+0x10c>
    24c8:	81 2f       	mov	r24, r17
    24ca:	80 61       	ori	r24, 0x10	; 16
    24cc:	90 5e       	subi	r25, 0xE0	; 224
    24ce:	07 c0       	rjmp	.+14     	; 0x24de <vfprintf+0x11a>
    24d0:	89 2f       	mov	r24, r25
    24d2:	85 56       	subi	r24, 0x65	; 101
    24d4:	83 30       	cpi	r24, 0x03	; 3
    24d6:	08 f0       	brcs	.+2      	; 0x24da <vfprintf+0x116>
    24d8:	9f c1       	rjmp	.+830    	; 0x2818 <vfprintf+0x454>
    24da:	81 2f       	mov	r24, r17
    24dc:	8f 7e       	andi	r24, 0xEF	; 239
    24de:	86 fd       	sbrc	r24, 6
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <vfprintf+0x122>
    24e2:	76 e0       	ldi	r23, 0x06	; 6
    24e4:	97 2e       	mov	r9, r23
    24e6:	6f e3       	ldi	r22, 0x3F	; 63
    24e8:	f6 2e       	mov	r15, r22
    24ea:	f8 22       	and	r15, r24
    24ec:	95 36       	cpi	r25, 0x65	; 101
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <vfprintf+0x132>
    24f0:	f0 e4       	ldi	r31, 0x40	; 64
    24f2:	ff 2a       	or	r15, r31
    24f4:	07 c0       	rjmp	.+14     	; 0x2504 <vfprintf+0x140>
    24f6:	96 36       	cpi	r25, 0x66	; 102
    24f8:	19 f4       	brne	.+6      	; 0x2500 <vfprintf+0x13c>
    24fa:	20 e8       	ldi	r18, 0x80	; 128
    24fc:	f2 2a       	or	r15, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <vfprintf+0x140>
    2500:	91 10       	cpse	r9, r1
    2502:	9a 94       	dec	r9
    2504:	f7 fe       	sbrs	r15, 7
    2506:	0a c0       	rjmp	.+20     	; 0x251c <vfprintf+0x158>
    2508:	3b e3       	ldi	r19, 0x3B	; 59
    250a:	39 15       	cp	r19, r9
    250c:	18 f4       	brcc	.+6      	; 0x2514 <vfprintf+0x150>
    250e:	5c e3       	ldi	r21, 0x3C	; 60
    2510:	b5 2e       	mov	r11, r21
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <vfprintf+0x154>
    2514:	b9 2c       	mov	r11, r9
    2516:	b3 94       	inc	r11
    2518:	27 e0       	ldi	r18, 0x07	; 7
    251a:	09 c0       	rjmp	.+18     	; 0x252e <vfprintf+0x16a>
    251c:	47 e0       	ldi	r20, 0x07	; 7
    251e:	49 15       	cp	r20, r9
    2520:	20 f4       	brcc	.+8      	; 0x252a <vfprintf+0x166>
    2522:	bb 24       	eor	r11, r11
    2524:	47 e0       	ldi	r20, 0x07	; 7
    2526:	94 2e       	mov	r9, r20
    2528:	f7 cf       	rjmp	.-18     	; 0x2518 <vfprintf+0x154>
    252a:	29 2d       	mov	r18, r9
    252c:	bb 24       	eor	r11, r11
    252e:	c6 01       	movw	r24, r12
    2530:	04 96       	adiw	r24, 0x04	; 4
    2532:	9d 87       	std	Y+13, r25	; 0x0d
    2534:	8c 87       	std	Y+12, r24	; 0x0c
    2536:	f6 01       	movw	r30, r12
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	ae 01       	movw	r20, r28
    2542:	4f 5f       	subi	r20, 0xFF	; 255
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	0b 2d       	mov	r16, r11
    2548:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__ftoa_engine>
    254c:	6c 01       	movw	r12, r24
    254e:	09 81       	ldd	r16, Y+1	; 0x01
    2550:	20 2e       	mov	r2, r16
    2552:	33 24       	eor	r3, r3
    2554:	00 ff       	sbrs	r16, 0
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <vfprintf+0x19c>
    2558:	03 fd       	sbrc	r16, 3
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0x19c>
    255c:	1d e2       	ldi	r17, 0x2D	; 45
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <vfprintf+0x1ae>
    2560:	f1 fe       	sbrs	r15, 1
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <vfprintf+0x1a4>
    2564:	1b e2       	ldi	r17, 0x2B	; 43
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <vfprintf+0x1ae>
    2568:	f2 fc       	sbrc	r15, 2
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <vfprintf+0x1ac>
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <vfprintf+0x1ae>
    2570:	10 e2       	ldi	r17, 0x20	; 32
    2572:	c1 01       	movw	r24, r2
    2574:	8c 70       	andi	r24, 0x0C	; 12
    2576:	90 70       	andi	r25, 0x00	; 0
    2578:	89 2b       	or	r24, r25
    257a:	b9 f1       	breq	.+110    	; 0x25ea <vfprintf+0x226>
    257c:	11 23       	and	r17, r17
    257e:	11 f4       	brne	.+4      	; 0x2584 <vfprintf+0x1c0>
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <vfprintf+0x1c2>
    2584:	84 e0       	ldi	r24, 0x04	; 4
    2586:	88 15       	cp	r24, r8
    2588:	10 f0       	brcs	.+4      	; 0x258e <vfprintf+0x1ca>
    258a:	88 24       	eor	r8, r8
    258c:	0a c0       	rjmp	.+20     	; 0x25a2 <vfprintf+0x1de>
    258e:	88 1a       	sub	r8, r24
    2590:	f3 fc       	sbrc	r15, 3
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <vfprintf+0x1de>
    2594:	80 e2       	ldi	r24, 0x20	; 32
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	b3 01       	movw	r22, r6
    259a:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    259e:	8a 94       	dec	r8
    25a0:	c9 f7       	brne	.-14     	; 0x2594 <vfprintf+0x1d0>
    25a2:	11 23       	and	r17, r17
    25a4:	29 f0       	breq	.+10     	; 0x25b0 <vfprintf+0x1ec>
    25a6:	81 2f       	mov	r24, r17
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	b3 01       	movw	r22, r6
    25ac:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    25b0:	23 fe       	sbrs	r2, 3
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <vfprintf+0x1f6>
    25b4:	00 e7       	ldi	r16, 0x70	; 112
    25b6:	10 e0       	ldi	r17, 0x00	; 0
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <vfprintf+0x212>
    25ba:	04 e7       	ldi	r16, 0x74	; 116
    25bc:	10 e0       	ldi	r17, 0x00	; 0
    25be:	0b c0       	rjmp	.+22     	; 0x25d6 <vfprintf+0x212>
    25c0:	e1 14       	cp	r14, r1
    25c2:	f1 04       	cpc	r15, r1
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <vfprintf+0x204>
    25c6:	80 52       	subi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	b3 01       	movw	r22, r6
    25cc:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    25d0:	0f 5f       	subi	r16, 0xFF	; 255
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	05 c0       	rjmp	.+10     	; 0x25e0 <vfprintf+0x21c>
    25d6:	ef 2c       	mov	r14, r15
    25d8:	ff 24       	eor	r15, r15
    25da:	f0 e1       	ldi	r31, 0x10	; 16
    25dc:	ef 22       	and	r14, r31
    25de:	ff 24       	eor	r15, r15
    25e0:	f8 01       	movw	r30, r16
    25e2:	84 91       	lpm	r24, Z+
    25e4:	88 23       	and	r24, r24
    25e6:	61 f7       	brne	.-40     	; 0x25c0 <vfprintf+0x1fc>
    25e8:	14 c1       	rjmp	.+552    	; 0x2812 <vfprintf+0x44e>
    25ea:	f7 fe       	sbrs	r15, 7
    25ec:	12 c0       	rjmp	.+36     	; 0x2612 <vfprintf+0x24e>
    25ee:	bc 0c       	add	r11, r12
    25f0:	24 fe       	sbrs	r2, 4
    25f2:	04 c0       	rjmp	.+8      	; 0x25fc <vfprintf+0x238>
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	81 33       	cpi	r24, 0x31	; 49
    25f8:	09 f4       	brne	.+2      	; 0x25fc <vfprintf+0x238>
    25fa:	ba 94       	dec	r11
    25fc:	1b 14       	cp	r1, r11
    25fe:	1c f0       	brlt	.+6      	; 0x2606 <vfprintf+0x242>
    2600:	bb 24       	eor	r11, r11
    2602:	b3 94       	inc	r11
    2604:	2d c0       	rjmp	.+90     	; 0x2660 <vfprintf+0x29c>
    2606:	f8 e0       	ldi	r31, 0x08	; 8
    2608:	fb 15       	cp	r31, r11
    260a:	50 f5       	brcc	.+84     	; 0x2660 <vfprintf+0x29c>
    260c:	38 e0       	ldi	r19, 0x08	; 8
    260e:	b3 2e       	mov	r11, r19
    2610:	27 c0       	rjmp	.+78     	; 0x2660 <vfprintf+0x29c>
    2612:	f6 fc       	sbrc	r15, 6
    2614:	25 c0       	rjmp	.+74     	; 0x2660 <vfprintf+0x29c>
    2616:	89 2d       	mov	r24, r9
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	8c 15       	cp	r24, r12
    261c:	9d 05       	cpc	r25, r13
    261e:	4c f0       	brlt	.+18     	; 0x2632 <vfprintf+0x26e>
    2620:	2c ef       	ldi	r18, 0xFC	; 252
    2622:	c2 16       	cp	r12, r18
    2624:	2f ef       	ldi	r18, 0xFF	; 255
    2626:	d2 06       	cpc	r13, r18
    2628:	24 f0       	brlt	.+8      	; 0x2632 <vfprintf+0x26e>
    262a:	30 e8       	ldi	r19, 0x80	; 128
    262c:	f3 2a       	or	r15, r19
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <vfprintf+0x26e>
    2630:	9a 94       	dec	r9
    2632:	99 20       	and	r9, r9
    2634:	49 f0       	breq	.+18     	; 0x2648 <vfprintf+0x284>
    2636:	e2 e0       	ldi	r30, 0x02	; 2
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	ec 0f       	add	r30, r28
    263c:	fd 1f       	adc	r31, r29
    263e:	e9 0d       	add	r30, r9
    2640:	f1 1d       	adc	r31, r1
    2642:	80 81       	ld	r24, Z
    2644:	80 33       	cpi	r24, 0x30	; 48
    2646:	a1 f3       	breq	.-24     	; 0x2630 <vfprintf+0x26c>
    2648:	f7 fe       	sbrs	r15, 7
    264a:	0a c0       	rjmp	.+20     	; 0x2660 <vfprintf+0x29c>
    264c:	b9 2c       	mov	r11, r9
    264e:	b3 94       	inc	r11
    2650:	89 2d       	mov	r24, r9
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	c8 16       	cp	r12, r24
    2656:	d9 06       	cpc	r13, r25
    2658:	14 f0       	brlt	.+4      	; 0x265e <vfprintf+0x29a>
    265a:	99 24       	eor	r9, r9
    265c:	01 c0       	rjmp	.+2      	; 0x2660 <vfprintf+0x29c>
    265e:	9c 18       	sub	r9, r12
    2660:	f7 fc       	sbrc	r15, 7
    2662:	03 c0       	rjmp	.+6      	; 0x266a <vfprintf+0x2a6>
    2664:	25 e0       	ldi	r18, 0x05	; 5
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	09 c0       	rjmp	.+18     	; 0x267c <vfprintf+0x2b8>
    266a:	1c 14       	cp	r1, r12
    266c:	1d 04       	cpc	r1, r13
    266e:	1c f0       	brlt	.+6      	; 0x2676 <vfprintf+0x2b2>
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	03 c0       	rjmp	.+6      	; 0x267c <vfprintf+0x2b8>
    2676:	96 01       	movw	r18, r12
    2678:	2f 5f       	subi	r18, 0xFF	; 255
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	11 23       	and	r17, r17
    267e:	11 f0       	breq	.+4      	; 0x2684 <vfprintf+0x2c0>
    2680:	2f 5f       	subi	r18, 0xFF	; 255
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	99 20       	and	r9, r9
    2686:	29 f0       	breq	.+10     	; 0x2692 <vfprintf+0x2ce>
    2688:	89 2d       	mov	r24, r9
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	28 0f       	add	r18, r24
    2690:	39 1f       	adc	r19, r25
    2692:	88 2d       	mov	r24, r8
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	14 f0       	brlt	.+4      	; 0x26a0 <vfprintf+0x2dc>
    269c:	88 24       	eor	r8, r8
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <vfprintf+0x2de>
    26a0:	82 1a       	sub	r8, r18
    26a2:	4f 2c       	mov	r4, r15
    26a4:	55 24       	eor	r5, r5
    26a6:	c2 01       	movw	r24, r4
    26a8:	89 70       	andi	r24, 0x09	; 9
    26aa:	90 70       	andi	r25, 0x00	; 0
    26ac:	89 2b       	or	r24, r25
    26ae:	39 f0       	breq	.+14     	; 0x26be <vfprintf+0x2fa>
    26b0:	08 c0       	rjmp	.+16     	; 0x26c2 <vfprintf+0x2fe>
    26b2:	80 e2       	ldi	r24, 0x20	; 32
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	b3 01       	movw	r22, r6
    26b8:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    26bc:	8a 94       	dec	r8
    26be:	88 20       	and	r8, r8
    26c0:	c1 f7       	brne	.-16     	; 0x26b2 <vfprintf+0x2ee>
    26c2:	11 23       	and	r17, r17
    26c4:	29 f0       	breq	.+10     	; 0x26d0 <vfprintf+0x30c>
    26c6:	81 2f       	mov	r24, r17
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	b3 01       	movw	r22, r6
    26cc:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    26d0:	43 fe       	sbrs	r4, 3
    26d2:	07 c0       	rjmp	.+14     	; 0x26e2 <vfprintf+0x31e>
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <vfprintf+0x322>
    26d6:	80 e3       	ldi	r24, 0x30	; 48
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	b3 01       	movw	r22, r6
    26dc:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    26e0:	8a 94       	dec	r8
    26e2:	88 20       	and	r8, r8
    26e4:	c1 f7       	brne	.-16     	; 0x26d6 <vfprintf+0x312>
    26e6:	f7 fe       	sbrs	r15, 7
    26e8:	46 c0       	rjmp	.+140    	; 0x2776 <vfprintf+0x3b2>
    26ea:	86 01       	movw	r16, r12
    26ec:	d7 fe       	sbrs	r13, 7
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <vfprintf+0x330>
    26f0:	00 e0       	ldi	r16, 0x00	; 0
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	76 01       	movw	r14, r12
    26f6:	08 94       	sec
    26f8:	e1 1c       	adc	r14, r1
    26fa:	f1 1c       	adc	r15, r1
    26fc:	e0 1a       	sub	r14, r16
    26fe:	f1 0a       	sbc	r15, r17
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	4c 0f       	add	r20, r28
    2706:	5d 1f       	adc	r21, r29
    2708:	e4 0e       	add	r14, r20
    270a:	f5 1e       	adc	r15, r21
    270c:	26 01       	movw	r4, r12
    270e:	4b 18       	sub	r4, r11
    2710:	51 08       	sbc	r5, r1
    2712:	89 2d       	mov	r24, r9
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	aa 24       	eor	r10, r10
    2718:	bb 24       	eor	r11, r11
    271a:	a8 1a       	sub	r10, r24
    271c:	b9 0a       	sbc	r11, r25
    271e:	5f ef       	ldi	r21, 0xFF	; 255
    2720:	0f 3f       	cpi	r16, 0xFF	; 255
    2722:	15 07       	cpc	r17, r21
    2724:	29 f4       	brne	.+10     	; 0x2730 <vfprintf+0x36c>
    2726:	8e e2       	ldi	r24, 0x2E	; 46
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	b3 01       	movw	r22, r6
    272c:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2730:	c0 16       	cp	r12, r16
    2732:	d1 06       	cpc	r13, r17
    2734:	34 f0       	brlt	.+12     	; 0x2742 <vfprintf+0x37e>
    2736:	40 16       	cp	r4, r16
    2738:	51 06       	cpc	r5, r17
    273a:	1c f4       	brge	.+6      	; 0x2742 <vfprintf+0x37e>
    273c:	f7 01       	movw	r30, r14
    273e:	80 81       	ld	r24, Z
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <vfprintf+0x380>
    2742:	80 e3       	ldi	r24, 0x30	; 48
    2744:	01 50       	subi	r16, 0x01	; 1
    2746:	10 40       	sbci	r17, 0x00	; 0
    2748:	08 94       	sec
    274a:	e1 1c       	adc	r14, r1
    274c:	f1 1c       	adc	r15, r1
    274e:	0a 15       	cp	r16, r10
    2750:	1b 05       	cpc	r17, r11
    2752:	2c f0       	brlt	.+10     	; 0x275e <vfprintf+0x39a>
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	b3 01       	movw	r22, r6
    2758:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    275c:	e0 cf       	rjmp	.-64     	; 0x271e <vfprintf+0x35a>
    275e:	0c 15       	cp	r16, r12
    2760:	1d 05       	cpc	r17, r13
    2762:	39 f4       	brne	.+14     	; 0x2772 <vfprintf+0x3ae>
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	96 33       	cpi	r25, 0x36	; 54
    2768:	18 f4       	brcc	.+6      	; 0x2770 <vfprintf+0x3ac>
    276a:	95 33       	cpi	r25, 0x35	; 53
    276c:	11 f4       	brne	.+4      	; 0x2772 <vfprintf+0x3ae>
    276e:	24 fe       	sbrs	r2, 4
    2770:	81 e3       	ldi	r24, 0x31	; 49
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	4b c0       	rjmp	.+150    	; 0x280c <vfprintf+0x448>
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	81 33       	cpi	r24, 0x31	; 49
    277a:	09 f0       	breq	.+2      	; 0x277e <vfprintf+0x3ba>
    277c:	0f 7e       	andi	r16, 0xEF	; 239
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	b3 01       	movw	r22, r6
    2782:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2786:	99 20       	and	r9, r9
    2788:	a1 f0       	breq	.+40     	; 0x27b2 <vfprintf+0x3ee>
    278a:	8e e2       	ldi	r24, 0x2E	; 46
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	b3 01       	movw	r22, r6
    2790:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2794:	12 e0       	ldi	r17, 0x02	; 2
    2796:	e1 e0       	ldi	r30, 0x01	; 1
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	ec 0f       	add	r30, r28
    279c:	fd 1f       	adc	r31, r29
    279e:	e1 0f       	add	r30, r17
    27a0:	f1 1d       	adc	r31, r1
    27a2:	1f 5f       	subi	r17, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	b3 01       	movw	r22, r6
    27aa:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    27ae:	9a 94       	dec	r9
    27b0:	91 f7       	brne	.-28     	; 0x2796 <vfprintf+0x3d2>
    27b2:	44 fc       	sbrc	r4, 4
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x3f8>
    27b6:	85 e6       	ldi	r24, 0x65	; 101
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <vfprintf+0x3fc>
    27bc:	85 e4       	ldi	r24, 0x45	; 69
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	b3 01       	movw	r22, r6
    27c2:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    27c6:	d7 fc       	sbrc	r13, 7
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <vfprintf+0x410>
    27ca:	c1 14       	cp	r12, r1
    27cc:	d1 04       	cpc	r13, r1
    27ce:	41 f4       	brne	.+16     	; 0x27e0 <vfprintf+0x41c>
    27d0:	04 ff       	sbrs	r16, 4
    27d2:	06 c0       	rjmp	.+12     	; 0x27e0 <vfprintf+0x41c>
    27d4:	d0 94       	com	r13
    27d6:	c1 94       	neg	r12
    27d8:	d1 08       	sbc	r13, r1
    27da:	d3 94       	inc	r13
    27dc:	8d e2       	ldi	r24, 0x2D	; 45
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <vfprintf+0x41e>
    27e0:	8b e2       	ldi	r24, 0x2B	; 43
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	b3 01       	movw	r22, r6
    27e6:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    27ea:	80 e3       	ldi	r24, 0x30	; 48
    27ec:	05 c0       	rjmp	.+10     	; 0x27f8 <vfprintf+0x434>
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	26 ef       	ldi	r18, 0xF6	; 246
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	c2 0e       	add	r12, r18
    27f6:	d3 1e       	adc	r13, r19
    27f8:	3a e0       	ldi	r19, 0x0A	; 10
    27fa:	c3 16       	cp	r12, r19
    27fc:	d1 04       	cpc	r13, r1
    27fe:	bc f7       	brge	.-18     	; 0x27ee <vfprintf+0x42a>
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	b3 01       	movw	r22, r6
    2804:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2808:	c6 01       	movw	r24, r12
    280a:	c0 96       	adiw	r24, 0x30	; 48
    280c:	b3 01       	movw	r22, r6
    280e:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2812:	cc 84       	ldd	r12, Y+12	; 0x0c
    2814:	dd 84       	ldd	r13, Y+13	; 0x0d
    2816:	52 c1       	rjmp	.+676    	; 0x2abc <vfprintf+0x6f8>
    2818:	93 36       	cpi	r25, 0x63	; 99
    281a:	31 f0       	breq	.+12     	; 0x2828 <vfprintf+0x464>
    281c:	93 37       	cpi	r25, 0x73	; 115
    281e:	99 f0       	breq	.+38     	; 0x2846 <vfprintf+0x482>
    2820:	93 35       	cpi	r25, 0x53	; 83
    2822:	09 f0       	breq	.+2      	; 0x2826 <vfprintf+0x462>
    2824:	59 c0       	rjmp	.+178    	; 0x28d8 <vfprintf+0x514>
    2826:	23 c0       	rjmp	.+70     	; 0x286e <vfprintf+0x4aa>
    2828:	f6 01       	movw	r30, r12
    282a:	80 81       	ld	r24, Z
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	5e 01       	movw	r10, r28
    2830:	08 94       	sec
    2832:	a1 1c       	adc	r10, r1
    2834:	b1 1c       	adc	r11, r1
    2836:	22 e0       	ldi	r18, 0x02	; 2
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	c2 0e       	add	r12, r18
    283c:	d3 1e       	adc	r13, r19
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	e2 2e       	mov	r14, r18
    2842:	f1 2c       	mov	r15, r1
    2844:	12 c0       	rjmp	.+36     	; 0x286a <vfprintf+0x4a6>
    2846:	f6 01       	movw	r30, r12
    2848:	a0 80       	ld	r10, Z
    284a:	b1 80       	ldd	r11, Z+1	; 0x01
    284c:	16 fd       	sbrc	r17, 6
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <vfprintf+0x492>
    2850:	6f ef       	ldi	r22, 0xFF	; 255
    2852:	7f ef       	ldi	r23, 0xFF	; 255
    2854:	02 c0       	rjmp	.+4      	; 0x285a <vfprintf+0x496>
    2856:	69 2d       	mov	r22, r9
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	22 e0       	ldi	r18, 0x02	; 2
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	c2 0e       	add	r12, r18
    2860:	d3 1e       	adc	r13, r19
    2862:	c5 01       	movw	r24, r10
    2864:	0e 94 c7 1b 	call	0x378e	; 0x378e <strnlen>
    2868:	7c 01       	movw	r14, r24
    286a:	1f 77       	andi	r17, 0x7F	; 127
    286c:	13 c0       	rjmp	.+38     	; 0x2894 <vfprintf+0x4d0>
    286e:	f6 01       	movw	r30, r12
    2870:	a0 80       	ld	r10, Z
    2872:	b1 80       	ldd	r11, Z+1	; 0x01
    2874:	16 fd       	sbrc	r17, 6
    2876:	03 c0       	rjmp	.+6      	; 0x287e <vfprintf+0x4ba>
    2878:	6f ef       	ldi	r22, 0xFF	; 255
    287a:	7f ef       	ldi	r23, 0xFF	; 255
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <vfprintf+0x4be>
    287e:	69 2d       	mov	r22, r9
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	22 e0       	ldi	r18, 0x02	; 2
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	c2 0e       	add	r12, r18
    2888:	d3 1e       	adc	r13, r19
    288a:	c5 01       	movw	r24, r10
    288c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strnlen_P>
    2890:	7c 01       	movw	r14, r24
    2892:	10 68       	ori	r17, 0x80	; 128
    2894:	13 ff       	sbrs	r17, 3
    2896:	07 c0       	rjmp	.+14     	; 0x28a6 <vfprintf+0x4e2>
    2898:	1b c0       	rjmp	.+54     	; 0x28d0 <vfprintf+0x50c>
    289a:	80 e2       	ldi	r24, 0x20	; 32
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	b3 01       	movw	r22, r6
    28a0:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    28a4:	8a 94       	dec	r8
    28a6:	88 2d       	mov	r24, r8
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	e8 16       	cp	r14, r24
    28ac:	f9 06       	cpc	r15, r25
    28ae:	a8 f3       	brcs	.-22     	; 0x289a <vfprintf+0x4d6>
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <vfprintf+0x50c>
    28b2:	f5 01       	movw	r30, r10
    28b4:	17 fd       	sbrc	r17, 7
    28b6:	85 91       	lpm	r24, Z+
    28b8:	17 ff       	sbrs	r17, 7
    28ba:	81 91       	ld	r24, Z+
    28bc:	5f 01       	movw	r10, r30
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	b3 01       	movw	r22, r6
    28c2:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    28c6:	81 10       	cpse	r8, r1
    28c8:	8a 94       	dec	r8
    28ca:	08 94       	sec
    28cc:	e1 08       	sbc	r14, r1
    28ce:	f1 08       	sbc	r15, r1
    28d0:	e1 14       	cp	r14, r1
    28d2:	f1 04       	cpc	r15, r1
    28d4:	71 f7       	brne	.-36     	; 0x28b2 <vfprintf+0x4ee>
    28d6:	f2 c0       	rjmp	.+484    	; 0x2abc <vfprintf+0x6f8>
    28d8:	94 36       	cpi	r25, 0x64	; 100
    28da:	11 f0       	breq	.+4      	; 0x28e0 <vfprintf+0x51c>
    28dc:	99 36       	cpi	r25, 0x69	; 105
    28de:	89 f5       	brne	.+98     	; 0x2942 <vfprintf+0x57e>
    28e0:	17 ff       	sbrs	r17, 7
    28e2:	08 c0       	rjmp	.+16     	; 0x28f4 <vfprintf+0x530>
    28e4:	f6 01       	movw	r30, r12
    28e6:	20 81       	ld	r18, Z
    28e8:	31 81       	ldd	r19, Z+1	; 0x01
    28ea:	42 81       	ldd	r20, Z+2	; 0x02
    28ec:	53 81       	ldd	r21, Z+3	; 0x03
    28ee:	84 e0       	ldi	r24, 0x04	; 4
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0a c0       	rjmp	.+20     	; 0x2908 <vfprintf+0x544>
    28f4:	f6 01       	movw	r30, r12
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	9c 01       	movw	r18, r24
    28fc:	44 27       	eor	r20, r20
    28fe:	37 fd       	sbrc	r19, 7
    2900:	40 95       	com	r20
    2902:	54 2f       	mov	r21, r20
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	c8 0e       	add	r12, r24
    290a:	d9 1e       	adc	r13, r25
    290c:	9f e6       	ldi	r25, 0x6F	; 111
    290e:	f9 2e       	mov	r15, r25
    2910:	f1 22       	and	r15, r17
    2912:	57 ff       	sbrs	r21, 7
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <vfprintf+0x564>
    2916:	50 95       	com	r21
    2918:	40 95       	com	r20
    291a:	30 95       	com	r19
    291c:	21 95       	neg	r18
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	4f 4f       	sbci	r20, 0xFF	; 255
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	90 e8       	ldi	r25, 0x80	; 128
    2926:	f9 2a       	or	r15, r25
    2928:	ca 01       	movw	r24, r20
    292a:	b9 01       	movw	r22, r18
    292c:	ae 01       	movw	r20, r28
    292e:	4f 5f       	subi	r20, 0xFF	; 255
    2930:	5f 4f       	sbci	r21, 0xFF	; 255
    2932:	2a e0       	ldi	r18, 0x0A	; 10
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	0e 94 cf 1c 	call	0x399e	; 0x399e <__ultoa_invert>
    293a:	e8 2e       	mov	r14, r24
    293c:	e8 89       	ldd	r30, Y+16	; 0x10
    293e:	ee 1a       	sub	r14, r30
    2940:	41 c0       	rjmp	.+130    	; 0x29c4 <vfprintf+0x600>
    2942:	95 37       	cpi	r25, 0x75	; 117
    2944:	21 f4       	brne	.+8      	; 0x294e <vfprintf+0x58a>
    2946:	1f 7e       	andi	r17, 0xEF	; 239
    2948:	2a e0       	ldi	r18, 0x0A	; 10
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	1c c0       	rjmp	.+56     	; 0x2986 <vfprintf+0x5c2>
    294e:	19 7f       	andi	r17, 0xF9	; 249
    2950:	9f 36       	cpi	r25, 0x6F	; 111
    2952:	61 f0       	breq	.+24     	; 0x296c <vfprintf+0x5a8>
    2954:	90 37       	cpi	r25, 0x70	; 112
    2956:	20 f4       	brcc	.+8      	; 0x2960 <vfprintf+0x59c>
    2958:	98 35       	cpi	r25, 0x58	; 88
    295a:	09 f0       	breq	.+2      	; 0x295e <vfprintf+0x59a>
    295c:	b2 c0       	rjmp	.+356    	; 0x2ac2 <vfprintf+0x6fe>
    295e:	0f c0       	rjmp	.+30     	; 0x297e <vfprintf+0x5ba>
    2960:	90 37       	cpi	r25, 0x70	; 112
    2962:	39 f0       	breq	.+14     	; 0x2972 <vfprintf+0x5ae>
    2964:	98 37       	cpi	r25, 0x78	; 120
    2966:	09 f0       	breq	.+2      	; 0x296a <vfprintf+0x5a6>
    2968:	ac c0       	rjmp	.+344    	; 0x2ac2 <vfprintf+0x6fe>
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <vfprintf+0x5b0>
    296c:	28 e0       	ldi	r18, 0x08	; 8
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <vfprintf+0x5c2>
    2972:	10 61       	ori	r17, 0x10	; 16
    2974:	14 fd       	sbrc	r17, 4
    2976:	14 60       	ori	r17, 0x04	; 4
    2978:	20 e1       	ldi	r18, 0x10	; 16
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <vfprintf+0x5c2>
    297e:	14 fd       	sbrc	r17, 4
    2980:	16 60       	ori	r17, 0x06	; 6
    2982:	20 e1       	ldi	r18, 0x10	; 16
    2984:	32 e0       	ldi	r19, 0x02	; 2
    2986:	17 ff       	sbrs	r17, 7
    2988:	08 c0       	rjmp	.+16     	; 0x299a <vfprintf+0x5d6>
    298a:	f6 01       	movw	r30, r12
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	44 e0       	ldi	r20, 0x04	; 4
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	08 c0       	rjmp	.+16     	; 0x29aa <vfprintf+0x5e6>
    299a:	f6 01       	movw	r30, r12
    299c:	80 81       	ld	r24, Z
    299e:	91 81       	ldd	r25, Z+1	; 0x01
    29a0:	bc 01       	movw	r22, r24
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	42 e0       	ldi	r20, 0x02	; 2
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	c4 0e       	add	r12, r20
    29ac:	d5 1e       	adc	r13, r21
    29ae:	ae 01       	movw	r20, r28
    29b0:	4f 5f       	subi	r20, 0xFF	; 255
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    29b4:	0e 94 cf 1c 	call	0x399e	; 0x399e <__ultoa_invert>
    29b8:	e8 2e       	mov	r14, r24
    29ba:	58 89       	ldd	r21, Y+16	; 0x10
    29bc:	e5 1a       	sub	r14, r21
    29be:	8f e7       	ldi	r24, 0x7F	; 127
    29c0:	f8 2e       	mov	r15, r24
    29c2:	f1 22       	and	r15, r17
    29c4:	f6 fe       	sbrs	r15, 6
    29c6:	0b c0       	rjmp	.+22     	; 0x29de <vfprintf+0x61a>
    29c8:	8e ef       	ldi	r24, 0xFE	; 254
    29ca:	f8 22       	and	r15, r24
    29cc:	e9 14       	cp	r14, r9
    29ce:	38 f4       	brcc	.+14     	; 0x29de <vfprintf+0x61a>
    29d0:	f4 fe       	sbrs	r15, 4
    29d2:	07 c0       	rjmp	.+14     	; 0x29e2 <vfprintf+0x61e>
    29d4:	f2 fc       	sbrc	r15, 2
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <vfprintf+0x61e>
    29d8:	9f ee       	ldi	r25, 0xEF	; 239
    29da:	f9 22       	and	r15, r25
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <vfprintf+0x61e>
    29de:	1e 2d       	mov	r17, r14
    29e0:	01 c0       	rjmp	.+2      	; 0x29e4 <vfprintf+0x620>
    29e2:	19 2d       	mov	r17, r9
    29e4:	f4 fe       	sbrs	r15, 4
    29e6:	0d c0       	rjmp	.+26     	; 0x2a02 <vfprintf+0x63e>
    29e8:	fe 01       	movw	r30, r28
    29ea:	ee 0d       	add	r30, r14
    29ec:	f1 1d       	adc	r31, r1
    29ee:	80 81       	ld	r24, Z
    29f0:	80 33       	cpi	r24, 0x30	; 48
    29f2:	19 f4       	brne	.+6      	; 0x29fa <vfprintf+0x636>
    29f4:	e9 ee       	ldi	r30, 0xE9	; 233
    29f6:	fe 22       	and	r15, r30
    29f8:	08 c0       	rjmp	.+16     	; 0x2a0a <vfprintf+0x646>
    29fa:	1f 5f       	subi	r17, 0xFF	; 255
    29fc:	f2 fe       	sbrs	r15, 2
    29fe:	05 c0       	rjmp	.+10     	; 0x2a0a <vfprintf+0x646>
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <vfprintf+0x644>
    2a02:	8f 2d       	mov	r24, r15
    2a04:	86 78       	andi	r24, 0x86	; 134
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <vfprintf+0x646>
    2a08:	1f 5f       	subi	r17, 0xFF	; 255
    2a0a:	0f 2d       	mov	r16, r15
    2a0c:	f3 fc       	sbrc	r15, 3
    2a0e:	14 c0       	rjmp	.+40     	; 0x2a38 <vfprintf+0x674>
    2a10:	f0 fe       	sbrs	r15, 0
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <vfprintf+0x66e>
    2a14:	18 15       	cp	r17, r8
    2a16:	10 f0       	brcs	.+4      	; 0x2a1c <vfprintf+0x658>
    2a18:	9e 2c       	mov	r9, r14
    2a1a:	0b c0       	rjmp	.+22     	; 0x2a32 <vfprintf+0x66e>
    2a1c:	9e 2c       	mov	r9, r14
    2a1e:	98 0c       	add	r9, r8
    2a20:	91 1a       	sub	r9, r17
    2a22:	18 2d       	mov	r17, r8
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <vfprintf+0x66e>
    2a26:	80 e2       	ldi	r24, 0x20	; 32
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	b3 01       	movw	r22, r6
    2a2c:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2a30:	1f 5f       	subi	r17, 0xFF	; 255
    2a32:	18 15       	cp	r17, r8
    2a34:	c0 f3       	brcs	.-16     	; 0x2a26 <vfprintf+0x662>
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <vfprintf+0x67c>
    2a38:	18 15       	cp	r17, r8
    2a3a:	10 f4       	brcc	.+4      	; 0x2a40 <vfprintf+0x67c>
    2a3c:	81 1a       	sub	r8, r17
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <vfprintf+0x67e>
    2a40:	88 24       	eor	r8, r8
    2a42:	04 ff       	sbrs	r16, 4
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <vfprintf+0x6a0>
    2a46:	80 e3       	ldi	r24, 0x30	; 48
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	b3 01       	movw	r22, r6
    2a4c:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2a50:	02 ff       	sbrs	r16, 2
    2a52:	1d c0       	rjmp	.+58     	; 0x2a8e <vfprintf+0x6ca>
    2a54:	01 fd       	sbrc	r16, 1
    2a56:	03 c0       	rjmp	.+6      	; 0x2a5e <vfprintf+0x69a>
    2a58:	88 e7       	ldi	r24, 0x78	; 120
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e c0       	rjmp	.+28     	; 0x2a7a <vfprintf+0x6b6>
    2a5e:	88 e5       	ldi	r24, 0x58	; 88
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0b c0       	rjmp	.+22     	; 0x2a7a <vfprintf+0x6b6>
    2a64:	80 2f       	mov	r24, r16
    2a66:	86 78       	andi	r24, 0x86	; 134
    2a68:	91 f0       	breq	.+36     	; 0x2a8e <vfprintf+0x6ca>
    2a6a:	01 ff       	sbrs	r16, 1
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <vfprintf+0x6ae>
    2a6e:	8b e2       	ldi	r24, 0x2B	; 43
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <vfprintf+0x6b0>
    2a72:	80 e2       	ldi	r24, 0x20	; 32
    2a74:	f7 fc       	sbrc	r15, 7
    2a76:	8d e2       	ldi	r24, 0x2D	; 45
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	b3 01       	movw	r22, r6
    2a7c:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2a80:	06 c0       	rjmp	.+12     	; 0x2a8e <vfprintf+0x6ca>
    2a82:	80 e3       	ldi	r24, 0x30	; 48
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	b3 01       	movw	r22, r6
    2a88:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2a8c:	9a 94       	dec	r9
    2a8e:	e9 14       	cp	r14, r9
    2a90:	c0 f3       	brcs	.-16     	; 0x2a82 <vfprintf+0x6be>
    2a92:	ea 94       	dec	r14
    2a94:	e1 e0       	ldi	r30, 0x01	; 1
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	ec 0f       	add	r30, r28
    2a9a:	fd 1f       	adc	r31, r29
    2a9c:	ee 0d       	add	r30, r14
    2a9e:	f1 1d       	adc	r31, r1
    2aa0:	80 81       	ld	r24, Z
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	b3 01       	movw	r22, r6
    2aa6:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2aaa:	ee 20       	and	r14, r14
    2aac:	91 f7       	brne	.-28     	; 0x2a92 <vfprintf+0x6ce>
    2aae:	06 c0       	rjmp	.+12     	; 0x2abc <vfprintf+0x6f8>
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	b3 01       	movw	r22, r6
    2ab6:	0e 94 28 1c 	call	0x3850	; 0x3850 <fputc>
    2aba:	8a 94       	dec	r8
    2abc:	88 20       	and	r8, r8
    2abe:	c1 f7       	brne	.-16     	; 0x2ab0 <vfprintf+0x6ec>
    2ac0:	99 cc       	rjmp	.-1742   	; 0x23f4 <vfprintf+0x30>
    2ac2:	f3 01       	movw	r30, r6
    2ac4:	66 81       	ldd	r22, Z+6	; 0x06
    2ac6:	77 81       	ldd	r23, Z+7	; 0x07
    2ac8:	cb 01       	movw	r24, r22
    2aca:	61 96       	adiw	r28, 0x11	; 17
    2acc:	e2 e1       	ldi	r30, 0x12	; 18
    2ace:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__epilogue_restores__>

00002ad2 <putval>:
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	20 fd       	sbrc	r18, 0
    2ad6:	08 c0       	rjmp	.+16     	; 0x2ae8 <putval+0x16>
    2ad8:	23 fd       	sbrc	r18, 3
    2ada:	05 c0       	rjmp	.+10     	; 0x2ae6 <putval+0x14>
    2adc:	22 ff       	sbrs	r18, 2
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <putval+0x12>
    2ae0:	73 83       	std	Z+3, r23	; 0x03
    2ae2:	62 83       	std	Z+2, r22	; 0x02
    2ae4:	51 83       	std	Z+1, r21	; 0x01
    2ae6:	40 83       	st	Z, r20
    2ae8:	08 95       	ret

00002aea <mulacc>:
    2aea:	ef 92       	push	r14
    2aec:	ff 92       	push	r15
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	44 ff       	sbrs	r20, 4
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <mulacc+0x10>
    2af6:	33 e0       	ldi	r19, 0x03	; 3
    2af8:	11 c0       	rjmp	.+34     	; 0x2b1c <mulacc+0x32>
    2afa:	46 ff       	sbrs	r20, 6
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <mulacc+0x18>
    2afe:	34 e0       	ldi	r19, 0x04	; 4
    2b00:	0d c0       	rjmp	.+26     	; 0x2b1c <mulacc+0x32>
    2b02:	db 01       	movw	r26, r22
    2b04:	fc 01       	movw	r30, r24
    2b06:	aa 0f       	add	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	ee 1f       	adc	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
    2b0e:	10 94       	com	r1
    2b10:	d1 f7       	brne	.-12     	; 0x2b06 <mulacc+0x1c>
    2b12:	6a 0f       	add	r22, r26
    2b14:	7b 1f       	adc	r23, r27
    2b16:	8e 1f       	adc	r24, r30
    2b18:	9f 1f       	adc	r25, r31
    2b1a:	31 e0       	ldi	r19, 0x01	; 1
    2b1c:	66 0f       	add	r22, r22
    2b1e:	77 1f       	adc	r23, r23
    2b20:	88 1f       	adc	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	31 50       	subi	r19, 0x01	; 1
    2b26:	d1 f7       	brne	.-12     	; 0x2b1c <mulacc+0x32>
    2b28:	7b 01       	movw	r14, r22
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	e2 0e       	add	r14, r18
    2b2e:	f1 1c       	adc	r15, r1
    2b30:	01 1d       	adc	r16, r1
    2b32:	11 1d       	adc	r17, r1
    2b34:	a8 01       	movw	r20, r16
    2b36:	97 01       	movw	r18, r14
    2b38:	b7 01       	movw	r22, r14
    2b3a:	ca 01       	movw	r24, r20
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	ef 90       	pop	r14
    2b44:	08 95       	ret

00002b46 <skip_spaces>:
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	8c 01       	movw	r16, r24
    2b50:	c8 01       	movw	r24, r16
    2b52:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2b56:	ec 01       	movw	r28, r24
    2b58:	97 fd       	sbrc	r25, 7
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <skip_spaces+0x26>
    2b5c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <isspace>
    2b60:	89 2b       	or	r24, r25
    2b62:	b1 f7       	brne	.-20     	; 0x2b50 <skip_spaces+0xa>
    2b64:	ce 01       	movw	r24, r28
    2b66:	b8 01       	movw	r22, r16
    2b68:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <conv_int>:
    2b78:	8f 92       	push	r8
    2b7a:	9f 92       	push	r9
    2b7c:	af 92       	push	r10
    2b7e:	bf 92       	push	r11
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	5c 01       	movw	r10, r24
    2b90:	eb 01       	movw	r28, r22
    2b92:	4a 01       	movw	r8, r20
    2b94:	12 2f       	mov	r17, r18
    2b96:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	8b 32       	cpi	r24, 0x2B	; 43
    2b9e:	19 f0       	breq	.+6      	; 0x2ba6 <conv_int+0x2e>
    2ba0:	8d 32       	cpi	r24, 0x2D	; 45
    2ba2:	51 f4       	brne	.+20     	; 0x2bb8 <conv_int+0x40>
    2ba4:	10 68       	ori	r17, 0x80	; 128
    2ba6:	21 97       	sbiw	r28, 0x01	; 1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <conv_int+0x34>
    2baa:	6d c0       	rjmp	.+218    	; 0x2c86 <conv_int+0x10e>
    2bac:	c5 01       	movw	r24, r10
    2bae:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2bb2:	ac 01       	movw	r20, r24
    2bb4:	97 fd       	sbrc	r25, 7
    2bb6:	67 c0       	rjmp	.+206    	; 0x2c86 <conv_int+0x10e>
    2bb8:	6d ef       	ldi	r22, 0xFD	; 253
    2bba:	d6 2e       	mov	r13, r22
    2bbc:	d1 22       	and	r13, r17
    2bbe:	8d 2d       	mov	r24, r13
    2bc0:	80 73       	andi	r24, 0x30	; 48
    2bc2:	01 f5       	brne	.+64     	; 0x2c04 <conv_int+0x8c>
    2bc4:	40 33       	cpi	r20, 0x30	; 48
    2bc6:	f1 f4       	brne	.+60     	; 0x2c04 <conv_int+0x8c>
    2bc8:	21 97       	sbiw	r28, 0x01	; 1
    2bca:	09 f4       	brne	.+2      	; 0x2bce <conv_int+0x56>
    2bcc:	47 c0       	rjmp	.+142    	; 0x2c5c <conv_int+0xe4>
    2bce:	c5 01       	movw	r24, r10
    2bd0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	97 fd       	sbrc	r25, 7
    2bd8:	41 c0       	rjmp	.+130    	; 0x2c5c <conv_int+0xe4>
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	d8 2a       	or	r13, r24
    2bde:	48 37       	cpi	r20, 0x78	; 120
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <conv_int+0x6e>
    2be2:	48 35       	cpi	r20, 0x58	; 88
    2be4:	59 f4       	brne	.+22     	; 0x2bfc <conv_int+0x84>
    2be6:	80 e4       	ldi	r24, 0x40	; 64
    2be8:	d8 2a       	or	r13, r24
    2bea:	21 97       	sbiw	r28, 0x01	; 1
    2bec:	b9 f1       	breq	.+110    	; 0x2c5c <conv_int+0xe4>
    2bee:	c5 01       	movw	r24, r10
    2bf0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2bf4:	ac 01       	movw	r20, r24
    2bf6:	99 23       	and	r25, r25
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <conv_int+0x8c>
    2bfa:	30 c0       	rjmp	.+96     	; 0x2c5c <conv_int+0xe4>
    2bfc:	d6 fc       	sbrc	r13, 6
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <conv_int+0x8c>
    2c00:	80 e1       	ldi	r24, 0x10	; 16
    2c02:	d8 2a       	or	r13, r24
    2c04:	ee 24       	eor	r14, r14
    2c06:	ff 24       	eor	r15, r15
    2c08:	87 01       	movw	r16, r14
    2c0a:	24 2f       	mov	r18, r20
    2c0c:	20 53       	subi	r18, 0x30	; 48
    2c0e:	28 30       	cpi	r18, 0x08	; 8
    2c10:	88 f0       	brcs	.+34     	; 0x2c34 <conv_int+0xbc>
    2c12:	d4 fc       	sbrc	r13, 4
    2c14:	09 c0       	rjmp	.+18     	; 0x2c28 <conv_int+0xb0>
    2c16:	2a 30       	cpi	r18, 0x0A	; 10
    2c18:	68 f0       	brcs	.+26     	; 0x2c34 <conv_int+0xbc>
    2c1a:	d6 fe       	sbrs	r13, 6
    2c1c:	05 c0       	rjmp	.+10     	; 0x2c28 <conv_int+0xb0>
    2c1e:	2f 7d       	andi	r18, 0xDF	; 223
    2c20:	82 2f       	mov	r24, r18
    2c22:	81 51       	subi	r24, 0x11	; 17
    2c24:	86 30       	cpi	r24, 0x06	; 6
    2c26:	28 f0       	brcs	.+10     	; 0x2c32 <conv_int+0xba>
    2c28:	ca 01       	movw	r24, r20
    2c2a:	b5 01       	movw	r22, r10
    2c2c:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    2c30:	12 c0       	rjmp	.+36     	; 0x2c56 <conv_int+0xde>
    2c32:	27 50       	subi	r18, 0x07	; 7
    2c34:	c8 01       	movw	r24, r16
    2c36:	b7 01       	movw	r22, r14
    2c38:	4d 2d       	mov	r20, r13
    2c3a:	0e 94 75 15 	call	0x2aea	; 0x2aea <mulacc>
    2c3e:	7b 01       	movw	r14, r22
    2c40:	8c 01       	movw	r16, r24
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	d8 2a       	or	r13, r24
    2c46:	21 97       	sbiw	r28, 0x01	; 1
    2c48:	61 f0       	breq	.+24     	; 0x2c62 <conv_int+0xea>
    2c4a:	c5 01       	movw	r24, r10
    2c4c:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2c50:	ac 01       	movw	r20, r24
    2c52:	97 ff       	sbrs	r25, 7
    2c54:	da cf       	rjmp	.-76     	; 0x2c0a <conv_int+0x92>
    2c56:	d1 fc       	sbrc	r13, 1
    2c58:	04 c0       	rjmp	.+8      	; 0x2c62 <conv_int+0xea>
    2c5a:	15 c0       	rjmp	.+42     	; 0x2c86 <conv_int+0x10e>
    2c5c:	ee 24       	eor	r14, r14
    2c5e:	ff 24       	eor	r15, r15
    2c60:	87 01       	movw	r16, r14
    2c62:	d7 fe       	sbrs	r13, 7
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <conv_int+0xfe>
    2c66:	10 95       	com	r17
    2c68:	00 95       	com	r16
    2c6a:	f0 94       	com	r15
    2c6c:	e0 94       	com	r14
    2c6e:	e1 1c       	adc	r14, r1
    2c70:	f1 1c       	adc	r15, r1
    2c72:	01 1d       	adc	r16, r1
    2c74:	11 1d       	adc	r17, r1
    2c76:	c4 01       	movw	r24, r8
    2c78:	b8 01       	movw	r22, r16
    2c7a:	a7 01       	movw	r20, r14
    2c7c:	2d 2d       	mov	r18, r13
    2c7e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <putval>
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <conv_int+0x110>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	ef 90       	pop	r14
    2c94:	df 90       	pop	r13
    2c96:	bf 90       	pop	r11
    2c98:	af 90       	pop	r10
    2c9a:	9f 90       	pop	r9
    2c9c:	8f 90       	pop	r8
    2c9e:	08 95       	ret

00002ca0 <conv_brk>:
    2ca0:	a0 e2       	ldi	r26, 0x20	; 32
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e6 e5       	ldi	r30, 0x56	; 86
    2ca6:	f6 e1       	ldi	r31, 0x16	; 22
    2ca8:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__prologue_saves__+0x8>
    2cac:	5c 01       	movw	r10, r24
    2cae:	6b 01       	movw	r12, r22
    2cb0:	8a 01       	movw	r16, r20
    2cb2:	79 01       	movw	r14, r18
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	31 96       	adiw	r30, 0x01	; 1
    2cb8:	80 e2       	ldi	r24, 0x20	; 32
    2cba:	df 01       	movw	r26, r30
    2cbc:	1d 92       	st	X+, r1
    2cbe:	8a 95       	dec	r24
    2cc0:	e9 f7       	brne	.-6      	; 0x2cbc <conv_brk+0x1c>
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	3f 01       	movw	r6, r30
    2cce:	a1 e0       	ldi	r26, 0x01	; 1
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	f5 01       	movw	r30, r10
    2cd4:	83 81       	ldd	r24, Z+3	; 0x03
    2cd6:	f7 01       	movw	r30, r14
    2cd8:	83 fd       	sbrc	r24, 3
    2cda:	25 91       	lpm	r18, Z+
    2cdc:	83 ff       	sbrs	r24, 3
    2cde:	21 91       	ld	r18, Z+
    2ce0:	7f 01       	movw	r14, r30
    2ce2:	22 23       	and	r18, r18
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <conv_brk+0x48>
    2ce6:	81 c0       	rjmp	.+258    	; 0x2dea <conv_brk+0x14a>
    2ce8:	2e 35       	cpi	r18, 0x5E	; 94
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <conv_brk+0x52>
    2cec:	41 15       	cp	r20, r1
    2cee:	51 05       	cpc	r21, r1
    2cf0:	69 f1       	breq	.+90     	; 0x2d4c <conv_brk+0xac>
    2cf2:	87 2f       	mov	r24, r23
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	84 17       	cp	r24, r20
    2cf8:	95 07       	cpc	r25, r21
    2cfa:	44 f4       	brge	.+16     	; 0x2d0c <conv_brk+0x6c>
    2cfc:	2d 35       	cpi	r18, 0x5D	; 93
    2cfe:	51 f1       	breq	.+84     	; 0x2d54 <conv_brk+0xb4>
    2d00:	2d 32       	cpi	r18, 0x2D	; 45
    2d02:	21 f4       	brne	.+8      	; 0x2d0c <conv_brk+0x6c>
    2d04:	33 23       	and	r19, r19
    2d06:	29 f4       	brne	.+10     	; 0x2d12 <conv_brk+0x72>
    2d08:	31 e0       	ldi	r19, 0x01	; 1
    2d0a:	21 c0       	rjmp	.+66     	; 0x2d4e <conv_brk+0xae>
    2d0c:	33 23       	and	r19, r19
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <conv_brk+0x72>
    2d10:	62 2f       	mov	r22, r18
    2d12:	32 2f       	mov	r19, r18
    2d14:	83 2f       	mov	r24, r19
    2d16:	86 95       	lsr	r24
    2d18:	86 95       	lsr	r24
    2d1a:	86 95       	lsr	r24
    2d1c:	f3 01       	movw	r30, r6
    2d1e:	e8 0f       	add	r30, r24
    2d20:	f1 1d       	adc	r31, r1
    2d22:	83 2f       	mov	r24, r19
    2d24:	87 70       	andi	r24, 0x07	; 7
    2d26:	4d 01       	movw	r8, r26
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <conv_brk+0x8e>
    2d2a:	88 0c       	add	r8, r8
    2d2c:	99 1c       	adc	r9, r9
    2d2e:	8a 95       	dec	r24
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <conv_brk+0x8a>
    2d32:	20 81       	ld	r18, Z
    2d34:	28 29       	or	r18, r8
    2d36:	20 83       	st	Z, r18
    2d38:	36 17       	cp	r19, r22
    2d3a:	11 f4       	brne	.+4      	; 0x2d40 <conv_brk+0xa0>
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	07 c0       	rjmp	.+14     	; 0x2d4e <conv_brk+0xae>
    2d40:	36 17       	cp	r19, r22
    2d42:	10 f4       	brcc	.+4      	; 0x2d48 <conv_brk+0xa8>
    2d44:	3f 5f       	subi	r19, 0xFF	; 255
    2d46:	e6 cf       	rjmp	.-52     	; 0x2d14 <conv_brk+0x74>
    2d48:	31 50       	subi	r19, 0x01	; 1
    2d4a:	e4 cf       	rjmp	.-56     	; 0x2d14 <conv_brk+0x74>
    2d4c:	71 e0       	ldi	r23, 0x01	; 1
    2d4e:	4f 5f       	subi	r20, 0xFF	; 255
    2d50:	5f 4f       	sbci	r21, 0xFF	; 255
    2d52:	bf cf       	rjmp	.-130    	; 0x2cd2 <conv_brk+0x32>
    2d54:	33 23       	and	r19, r19
    2d56:	19 f0       	breq	.+6      	; 0x2d5e <conv_brk+0xbe>
    2d58:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5a:	80 62       	ori	r24, 0x20	; 32
    2d5c:	8e 83       	std	Y+6, r24	; 0x06
    2d5e:	77 23       	and	r23, r23
    2d60:	59 f0       	breq	.+22     	; 0x2d78 <conv_brk+0xd8>
    2d62:	fe 01       	movw	r30, r28
    2d64:	31 96       	adiw	r30, 0x01	; 1
    2d66:	9e 01       	movw	r18, r28
    2d68:	2f 5d       	subi	r18, 0xDF	; 223
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	80 95       	com	r24
    2d70:	81 93       	st	Z+, r24
    2d72:	e2 17       	cp	r30, r18
    2d74:	f3 07       	cpc	r31, r19
    2d76:	d1 f7       	brne	.-12     	; 0x2d6c <conv_brk+0xcc>
    2d78:	99 24       	eor	r9, r9
    2d7a:	93 94       	inc	r9
    2d7c:	3e 01       	movw	r6, r28
    2d7e:	08 94       	sec
    2d80:	61 1c       	adc	r6, r1
    2d82:	71 1c       	adc	r7, r1
    2d84:	c5 01       	movw	r24, r10
    2d86:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	97 fd       	sbrc	r25, 7
    2d8e:	25 c0       	rjmp	.+74     	; 0x2dda <conv_brk+0x13a>
    2d90:	86 95       	lsr	r24
    2d92:	86 95       	lsr	r24
    2d94:	86 95       	lsr	r24
    2d96:	f3 01       	movw	r30, r6
    2d98:	e8 0f       	add	r30, r24
    2d9a:	f1 1d       	adc	r31, r1
    2d9c:	80 81       	ld	r24, Z
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9a 01       	movw	r18, r20
    2da2:	27 70       	andi	r18, 0x07	; 7
    2da4:	30 70       	andi	r19, 0x00	; 0
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <conv_brk+0x10c>
    2da8:	95 95       	asr	r25
    2daa:	87 95       	ror	r24
    2dac:	2a 95       	dec	r18
    2dae:	e2 f7       	brpl	.-8      	; 0x2da8 <conv_brk+0x108>
    2db0:	80 fd       	sbrc	r24, 0
    2db2:	05 c0       	rjmp	.+10     	; 0x2dbe <conv_brk+0x11e>
    2db4:	ca 01       	movw	r24, r20
    2db6:	b5 01       	movw	r22, r10
    2db8:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <conv_brk+0x13a>
    2dbe:	01 15       	cp	r16, r1
    2dc0:	11 05       	cpc	r17, r1
    2dc2:	19 f0       	breq	.+6      	; 0x2dca <conv_brk+0x12a>
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	4d 93       	st	X+, r20
    2dc8:	8d 01       	movw	r16, r26
    2dca:	08 94       	sec
    2dcc:	c1 08       	sbc	r12, r1
    2dce:	d1 08       	sbc	r13, r1
    2dd0:	99 24       	eor	r9, r9
    2dd2:	c1 14       	cp	r12, r1
    2dd4:	d1 04       	cpc	r13, r1
    2dd6:	b1 f6       	brne	.-84     	; 0x2d84 <conv_brk+0xe4>
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <conv_brk+0x13e>
    2dda:	99 20       	and	r9, r9
    2ddc:	31 f4       	brne	.+12     	; 0x2dea <conv_brk+0x14a>
    2dde:	01 15       	cp	r16, r1
    2de0:	11 05       	cpc	r17, r1
    2de2:	29 f0       	breq	.+10     	; 0x2dee <conv_brk+0x14e>
    2de4:	f8 01       	movw	r30, r16
    2de6:	10 82       	st	Z, r1
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <conv_brk+0x14e>
    2dea:	ee 24       	eor	r14, r14
    2dec:	ff 24       	eor	r15, r15
    2dee:	c7 01       	movw	r24, r14
    2df0:	a0 96       	adiw	r28, 0x20	; 32
    2df2:	ee e0       	ldi	r30, 0x0E	; 14
    2df4:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__epilogue_restores__+0x8>

00002df8 <conv_flt>:
    2df8:	2f 92       	push	r2
    2dfa:	3f 92       	push	r3
    2dfc:	5f 92       	push	r5
    2dfe:	6f 92       	push	r6
    2e00:	7f 92       	push	r7
    2e02:	8f 92       	push	r8
    2e04:	9f 92       	push	r9
    2e06:	af 92       	push	r10
    2e08:	bf 92       	push	r11
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	3c 01       	movw	r6, r24
    2e1c:	7b 01       	movw	r14, r22
    2e1e:	1a 01       	movw	r2, r20
    2e20:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2e24:	ec 01       	movw	r28, r24
    2e26:	8b 32       	cpi	r24, 0x2B	; 43
    2e28:	39 f0       	breq	.+14     	; 0x2e38 <conv_flt+0x40>
    2e2a:	8d 32       	cpi	r24, 0x2D	; 45
    2e2c:	11 f0       	breq	.+4      	; 0x2e32 <conv_flt+0x3a>
    2e2e:	55 24       	eor	r5, r5
    2e30:	11 c0       	rjmp	.+34     	; 0x2e54 <conv_flt+0x5c>
    2e32:	b0 e8       	ldi	r27, 0x80	; 128
    2e34:	5b 2e       	mov	r5, r27
    2e36:	01 c0       	rjmp	.+2      	; 0x2e3a <conv_flt+0x42>
    2e38:	55 24       	eor	r5, r5
    2e3a:	08 94       	sec
    2e3c:	e1 08       	sbc	r14, r1
    2e3e:	f1 08       	sbc	r15, r1
    2e40:	e1 14       	cp	r14, r1
    2e42:	f1 04       	cpc	r15, r1
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <conv_flt+0x50>
    2e46:	18 c1       	rjmp	.+560    	; 0x3078 <conv_flt+0x280>
    2e48:	c3 01       	movw	r24, r6
    2e4a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2e4e:	ec 01       	movw	r28, r24
    2e50:	97 fd       	sbrc	r25, 7
    2e52:	12 c1       	rjmp	.+548    	; 0x3078 <conv_flt+0x280>
    2e54:	ce 01       	movw	r24, r28
    2e56:	0e 94 a9 1b 	call	0x3752	; 0x3752 <tolower>
    2e5a:	89 36       	cpi	r24, 0x69	; 105
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	21 f0       	breq	.+8      	; 0x2e68 <conv_flt+0x70>
    2e60:	8e 36       	cpi	r24, 0x6E	; 110
    2e62:	91 05       	cpc	r25, r1
    2e64:	99 f5       	brne	.+102    	; 0x2ecc <conv_flt+0xd4>
    2e66:	1d c0       	rjmp	.+58     	; 0x2ea2 <conv_flt+0xaa>
    2e68:	0d e8       	ldi	r16, 0x8D	; 141
    2e6a:	10 e0       	ldi	r17, 0x00	; 0
    2e6c:	1c c0       	rjmp	.+56     	; 0x2ea6 <conv_flt+0xae>
    2e6e:	08 94       	sec
    2e70:	e1 08       	sbc	r14, r1
    2e72:	f1 08       	sbc	r15, r1
    2e74:	e1 14       	cp	r14, r1
    2e76:	f1 04       	cpc	r15, r1
    2e78:	71 f0       	breq	.+28     	; 0x2e96 <conv_flt+0x9e>
    2e7a:	c3 01       	movw	r24, r6
    2e7c:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2e80:	ec 01       	movw	r28, r24
    2e82:	97 fd       	sbrc	r25, 7
    2e84:	08 c0       	rjmp	.+16     	; 0x2e96 <conv_flt+0x9e>
    2e86:	0e 94 a9 1b 	call	0x3752	; 0x3752 <tolower>
    2e8a:	d8 16       	cp	r13, r24
    2e8c:	61 f0       	breq	.+24     	; 0x2ea6 <conv_flt+0xae>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	b3 01       	movw	r22, r6
    2e92:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	00 39       	cpi	r16, 0x90	; 144
    2e9a:	12 07       	cpc	r17, r18
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <conv_flt+0xa8>
    2e9e:	ec c0       	rjmp	.+472    	; 0x3078 <conv_flt+0x280>
    2ea0:	08 c0       	rjmp	.+16     	; 0x2eb2 <conv_flt+0xba>
    2ea2:	0a e8       	ldi	r16, 0x8A	; 138
    2ea4:	10 e0       	ldi	r17, 0x00	; 0
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	0f 5f       	subi	r16, 0xFF	; 255
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	d4 90       	lpm	r13, Z+
    2eae:	dd 20       	and	r13, r13
    2eb0:	f1 f6       	brne	.-68     	; 0x2e6e <conv_flt+0x76>
    2eb2:	0d 58       	subi	r16, 0x8D	; 141
    2eb4:	10 40       	sbci	r17, 0x00	; 0
    2eb6:	29 f0       	breq	.+10     	; 0x2ec2 <conv_flt+0xca>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a0 e8       	ldi	r26, 0x80	; 128
    2ebe:	bf e7       	ldi	r27, 0x7F	; 127
    2ec0:	cf c0       	rjmp	.+414    	; 0x3060 <conv_flt+0x268>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 ec       	ldi	r26, 0xC0	; 192
    2ec8:	bf e7       	ldi	r27, 0x7F	; 127
    2eca:	ca c0       	rjmp	.+404    	; 0x3060 <conv_flt+0x268>
    2ecc:	cc 24       	eor	r12, r12
    2ece:	dd 24       	eor	r13, r13
    2ed0:	88 24       	eor	r8, r8
    2ed2:	99 24       	eor	r9, r9
    2ed4:	54 01       	movw	r10, r8
    2ed6:	ae 01       	movw	r20, r28
    2ed8:	40 53       	subi	r20, 0x30	; 48
    2eda:	24 2f       	mov	r18, r20
    2edc:	4a 30       	cpi	r20, 0x0A	; 10
    2ede:	38 f5       	brcc	.+78     	; 0x2f2e <conv_flt+0x136>
    2ee0:	52 e0       	ldi	r21, 0x02	; 2
    2ee2:	55 2a       	or	r5, r21
    2ee4:	85 2d       	mov	r24, r5
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	ac 01       	movw	r20, r24
    2eea:	48 70       	andi	r20, 0x08	; 8
    2eec:	50 70       	andi	r21, 0x00	; 0
    2eee:	52 fe       	sbrs	r5, 2
    2ef0:	06 c0       	rjmp	.+12     	; 0x2efe <conv_flt+0x106>
    2ef2:	45 2b       	or	r20, r21
    2ef4:	11 f5       	brne	.+68     	; 0x2f3a <conv_flt+0x142>
    2ef6:	08 94       	sec
    2ef8:	c1 1c       	adc	r12, r1
    2efa:	d1 1c       	adc	r13, r1
    2efc:	1e c0       	rjmp	.+60     	; 0x2f3a <conv_flt+0x142>
    2efe:	45 2b       	or	r20, r21
    2f00:	19 f0       	breq	.+6      	; 0x2f08 <conv_flt+0x110>
    2f02:	08 94       	sec
    2f04:	c1 08       	sbc	r12, r1
    2f06:	d1 08       	sbc	r13, r1
    2f08:	c5 01       	movw	r24, r10
    2f0a:	b4 01       	movw	r22, r8
    2f0c:	40 e2       	ldi	r20, 0x20	; 32
    2f0e:	0e 94 75 15 	call	0x2aea	; 0x2aea <mulacc>
    2f12:	4b 01       	movw	r8, r22
    2f14:	5c 01       	movw	r10, r24
    2f16:	88 e9       	ldi	r24, 0x98	; 152
    2f18:	88 16       	cp	r8, r24
    2f1a:	89 e9       	ldi	r24, 0x99	; 153
    2f1c:	98 06       	cpc	r9, r24
    2f1e:	89 e9       	ldi	r24, 0x99	; 153
    2f20:	a8 06       	cpc	r10, r24
    2f22:	89 e1       	ldi	r24, 0x19	; 25
    2f24:	b8 06       	cpc	r11, r24
    2f26:	48 f0       	brcs	.+18     	; 0x2f3a <conv_flt+0x142>
    2f28:	94 e0       	ldi	r25, 0x04	; 4
    2f2a:	59 2a       	or	r5, r25
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <conv_flt+0x142>
    2f2e:	4e 3f       	cpi	r20, 0xFE	; 254
    2f30:	81 f4       	brne	.+32     	; 0x2f52 <conv_flt+0x15a>
    2f32:	53 fc       	sbrc	r5, 3
    2f34:	0e c0       	rjmp	.+28     	; 0x2f52 <conv_flt+0x15a>
    2f36:	e8 e0       	ldi	r30, 0x08	; 8
    2f38:	5e 2a       	or	r5, r30
    2f3a:	08 94       	sec
    2f3c:	e1 08       	sbc	r14, r1
    2f3e:	f1 08       	sbc	r15, r1
    2f40:	e1 14       	cp	r14, r1
    2f42:	f1 04       	cpc	r15, r1
    2f44:	31 f0       	breq	.+12     	; 0x2f52 <conv_flt+0x15a>
    2f46:	c3 01       	movw	r24, r6
    2f48:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2f4c:	ec 01       	movw	r28, r24
    2f4e:	97 ff       	sbrs	r25, 7
    2f50:	c2 cf       	rjmp	.-124    	; 0x2ed6 <conv_flt+0xde>
    2f52:	51 fe       	sbrs	r5, 1
    2f54:	91 c0       	rjmp	.+290    	; 0x3078 <conv_flt+0x280>
    2f56:	c5 36       	cpi	r28, 0x65	; 101
    2f58:	19 f0       	breq	.+6      	; 0x2f60 <conv_flt+0x168>
    2f5a:	c5 34       	cpi	r28, 0x45	; 69
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <conv_flt+0x168>
    2f5e:	46 c0       	rjmp	.+140    	; 0x2fec <conv_flt+0x1f4>
    2f60:	08 94       	sec
    2f62:	e1 08       	sbc	r14, r1
    2f64:	f1 08       	sbc	r15, r1
    2f66:	e1 14       	cp	r14, r1
    2f68:	f1 04       	cpc	r15, r1
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <conv_flt+0x176>
    2f6c:	85 c0       	rjmp	.+266    	; 0x3078 <conv_flt+0x280>
    2f6e:	c3 01       	movw	r24, r6
    2f70:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2f74:	ec 01       	movw	r28, r24
    2f76:	97 fd       	sbrc	r25, 7
    2f78:	7f c0       	rjmp	.+254    	; 0x3078 <conv_flt+0x280>
    2f7a:	8b 32       	cpi	r24, 0x2B	; 43
    2f7c:	21 f0       	breq	.+8      	; 0x2f86 <conv_flt+0x18e>
    2f7e:	8d 32       	cpi	r24, 0x2D	; 45
    2f80:	69 f4       	brne	.+26     	; 0x2f9c <conv_flt+0x1a4>
    2f82:	f0 e1       	ldi	r31, 0x10	; 16
    2f84:	5f 2a       	or	r5, r31
    2f86:	08 94       	sec
    2f88:	e1 08       	sbc	r14, r1
    2f8a:	f1 08       	sbc	r15, r1
    2f8c:	e1 14       	cp	r14, r1
    2f8e:	f1 04       	cpc	r15, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <conv_flt+0x19c>
    2f92:	72 c0       	rjmp	.+228    	; 0x3078 <conv_flt+0x280>
    2f94:	c3 01       	movw	r24, r6
    2f96:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2f9a:	ec 01       	movw	r28, r24
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	c0 97       	sbiw	r24, 0x30	; 48
    2fa0:	0a 97       	sbiw	r24, 0x0a	; 10
    2fa2:	08 f0       	brcs	.+2      	; 0x2fa6 <conv_flt+0x1ae>
    2fa4:	69 c0       	rjmp	.+210    	; 0x3078 <conv_flt+0x280>
    2fa6:	00 e0       	ldi	r16, 0x00	; 0
    2fa8:	10 e0       	ldi	r17, 0x00	; 0
    2faa:	b8 01       	movw	r22, r16
    2fac:	88 27       	eor	r24, r24
    2fae:	77 fd       	sbrc	r23, 7
    2fb0:	80 95       	com	r24
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	ae 01       	movw	r20, r28
    2fb6:	40 53       	subi	r20, 0x30	; 48
    2fb8:	24 2f       	mov	r18, r20
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	0e 94 75 15 	call	0x2aea	; 0x2aea <mulacc>
    2fc0:	8b 01       	movw	r16, r22
    2fc2:	08 94       	sec
    2fc4:	e1 08       	sbc	r14, r1
    2fc6:	f1 08       	sbc	r15, r1
    2fc8:	e1 14       	cp	r14, r1
    2fca:	f1 04       	cpc	r15, r1
    2fcc:	39 f0       	breq	.+14     	; 0x2fdc <conv_flt+0x1e4>
    2fce:	c3 01       	movw	r24, r6
    2fd0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    2fd4:	ec 01       	movw	r28, r24
    2fd6:	c0 97       	sbiw	r24, 0x30	; 48
    2fd8:	0a 97       	sbiw	r24, 0x0a	; 10
    2fda:	38 f3       	brcs	.-50     	; 0x2faa <conv_flt+0x1b2>
    2fdc:	b8 01       	movw	r22, r16
    2fde:	54 fe       	sbrs	r5, 4
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <conv_flt+0x1f0>
    2fe2:	70 95       	com	r23
    2fe4:	61 95       	neg	r22
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	c6 0e       	add	r12, r22
    2fea:	d7 1e       	adc	r13, r23
    2fec:	ef 28       	or	r14, r15
    2fee:	31 f0       	breq	.+12     	; 0x2ffc <conv_flt+0x204>
    2ff0:	d7 fd       	sbrc	r29, 7
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <conv_flt+0x204>
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	b3 01       	movw	r22, r6
    2ff8:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    2ffc:	c5 01       	movw	r24, r10
    2ffe:	b4 01       	movw	r22, r8
    3000:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__floatunsisf>
    3004:	d7 fe       	sbrs	r13, 7
    3006:	0d c0       	rjmp	.+26     	; 0x3022 <conv_flt+0x22a>
    3008:	a9 ea       	ldi	r26, 0xA9	; 169
    300a:	ea 2e       	mov	r14, r26
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	fa 2e       	mov	r15, r26
    3010:	d0 94       	com	r13
    3012:	c1 94       	neg	r12
    3014:	d1 08       	sbc	r13, r1
    3016:	d3 94       	inc	r13
    3018:	c0 e2       	ldi	r28, 0x20	; 32
    301a:	d0 e0       	ldi	r29, 0x00	; 0
    301c:	00 e0       	ldi	r16, 0x00	; 0
    301e:	10 e0       	ldi	r17, 0x00	; 0
    3020:	0e c0       	rjmp	.+28     	; 0x303e <conv_flt+0x246>
    3022:	f1 ec       	ldi	r31, 0xC1	; 193
    3024:	ef 2e       	mov	r14, r31
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	ff 2e       	mov	r15, r31
    302a:	f6 cf       	rjmp	.-20     	; 0x3018 <conv_flt+0x220>
    302c:	f7 01       	movw	r30, r14
    302e:	25 91       	lpm	r18, Z+
    3030:	35 91       	lpm	r19, Z+
    3032:	45 91       	lpm	r20, Z+
    3034:	54 91       	lpm	r21, Z+
    3036:	0e 94 b7 19 	call	0x336e	; 0x336e <__mulsf3>
    303a:	cc 1a       	sub	r12, r28
    303c:	dd 0a       	sbc	r13, r29
    303e:	cc 16       	cp	r12, r28
    3040:	dd 06       	cpc	r13, r29
    3042:	a0 f7       	brcc	.-24     	; 0x302c <conv_flt+0x234>
    3044:	d6 95       	lsr	r29
    3046:	c7 95       	ror	r28
    3048:	0f 5f       	subi	r16, 0xFF	; 255
    304a:	1f 4f       	sbci	r17, 0xFF	; 255
    304c:	06 30       	cpi	r16, 0x06	; 6
    304e:	11 05       	cpc	r17, r1
    3050:	29 f0       	breq	.+10     	; 0x305c <conv_flt+0x264>
    3052:	ec ef       	ldi	r30, 0xFC	; 252
    3054:	ff ef       	ldi	r31, 0xFF	; 255
    3056:	ee 0e       	add	r14, r30
    3058:	ff 1e       	adc	r15, r31
    305a:	f1 cf       	rjmp	.-30     	; 0x303e <conv_flt+0x246>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	57 fc       	sbrc	r5, 7
    3062:	b0 58       	subi	r27, 0x80	; 128
    3064:	21 14       	cp	r2, r1
    3066:	31 04       	cpc	r3, r1
    3068:	29 f0       	breq	.+10     	; 0x3074 <conv_flt+0x27c>
    306a:	f1 01       	movw	r30, r2
    306c:	80 83       	st	Z, r24
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	a2 83       	std	Z+2, r26	; 0x02
    3072:	b3 83       	std	Z+3, r27	; 0x03
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	01 c0       	rjmp	.+2      	; 0x307a <conv_flt+0x282>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	ff 90       	pop	r15
    3084:	ef 90       	pop	r14
    3086:	df 90       	pop	r13
    3088:	cf 90       	pop	r12
    308a:	bf 90       	pop	r11
    308c:	af 90       	pop	r10
    308e:	9f 90       	pop	r9
    3090:	8f 90       	pop	r8
    3092:	7f 90       	pop	r7
    3094:	6f 90       	pop	r6
    3096:	5f 90       	pop	r5
    3098:	3f 90       	pop	r3
    309a:	2f 90       	pop	r2
    309c:	08 95       	ret

0000309e <vfscanf>:
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e5 e5       	ldi	r30, 0x55	; 85
    30a4:	f8 e1       	ldi	r31, 0x18	; 24
    30a6:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__prologue_saves__+0x6>
    30aa:	4c 01       	movw	r8, r24
    30ac:	5b 01       	movw	r10, r22
    30ae:	3a 01       	movw	r6, r20
    30b0:	fc 01       	movw	r30, r24
    30b2:	17 82       	std	Z+7, r1	; 0x07
    30b4:	16 82       	std	Z+6, r1	; 0x06
    30b6:	55 24       	eor	r5, r5
    30b8:	04 c1       	rjmp	.+520    	; 0x32c2 <vfscanf+0x224>
    30ba:	81 2f       	mov	r24, r17
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 a1 1b 	call	0x3742	; 0x3742 <isspace>
    30c2:	89 2b       	or	r24, r25
    30c4:	21 f0       	breq	.+8      	; 0x30ce <vfscanf+0x30>
    30c6:	c4 01       	movw	r24, r8
    30c8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <skip_spaces>
    30cc:	fa c0       	rjmp	.+500    	; 0x32c2 <vfscanf+0x224>
    30ce:	15 32       	cpi	r17, 0x25	; 37
    30d0:	49 f4       	brne	.+18     	; 0x30e4 <vfscanf+0x46>
    30d2:	f5 01       	movw	r30, r10
    30d4:	f3 fc       	sbrc	r15, 3
    30d6:	65 91       	lpm	r22, Z+
    30d8:	f3 fe       	sbrs	r15, 3
    30da:	61 91       	ld	r22, Z+
    30dc:	5f 01       	movw	r10, r30
    30de:	65 32       	cpi	r22, 0x25	; 37
    30e0:	69 f4       	brne	.+26     	; 0x30fc <vfscanf+0x5e>
    30e2:	15 e2       	ldi	r17, 0x25	; 37
    30e4:	c4 01       	movw	r24, r8
    30e6:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    30ea:	97 fd       	sbrc	r25, 7
    30ec:	f6 c0       	rjmp	.+492    	; 0x32da <vfscanf+0x23c>
    30ee:	18 17       	cp	r17, r24
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <vfscanf+0x56>
    30f2:	e7 c0       	rjmp	.+462    	; 0x32c2 <vfscanf+0x224>
    30f4:	b4 01       	movw	r22, r8
    30f6:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    30fa:	f4 c0       	rjmp	.+488    	; 0x32e4 <vfscanf+0x246>
    30fc:	6a 32       	cpi	r22, 0x2A	; 42
    30fe:	19 f0       	breq	.+6      	; 0x3106 <vfscanf+0x68>
    3100:	16 2f       	mov	r17, r22
    3102:	00 e0       	ldi	r16, 0x00	; 0
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <vfscanf+0x74>
    3106:	f3 fc       	sbrc	r15, 3
    3108:	15 91       	lpm	r17, Z+
    310a:	f3 fe       	sbrs	r15, 3
    310c:	11 91       	ld	r17, Z+
    310e:	5f 01       	movw	r10, r30
    3110:	01 e0       	ldi	r16, 0x01	; 1
    3112:	cc 24       	eor	r12, r12
    3114:	dd 24       	eor	r13, r13
    3116:	0e c0       	rjmp	.+28     	; 0x3134 <vfscanf+0x96>
    3118:	02 60       	ori	r16, 0x02	; 2
    311a:	b6 01       	movw	r22, r12
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	40 e2       	ldi	r20, 0x20	; 32
    3122:	0e 94 75 15 	call	0x2aea	; 0x2aea <mulacc>
    3126:	6b 01       	movw	r12, r22
    3128:	f5 01       	movw	r30, r10
    312a:	f3 fc       	sbrc	r15, 3
    312c:	15 91       	lpm	r17, Z+
    312e:	f3 fe       	sbrs	r15, 3
    3130:	11 91       	ld	r17, Z+
    3132:	5f 01       	movw	r10, r30
    3134:	21 2f       	mov	r18, r17
    3136:	20 53       	subi	r18, 0x30	; 48
    3138:	2a 30       	cpi	r18, 0x0A	; 10
    313a:	70 f3       	brcs	.-36     	; 0x3118 <vfscanf+0x7a>
    313c:	01 fd       	sbrc	r16, 1
    313e:	04 c0       	rjmp	.+8      	; 0x3148 <vfscanf+0xaa>
    3140:	cc 24       	eor	r12, r12
    3142:	ca 94       	dec	r12
    3144:	dc 2c       	mov	r13, r12
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <vfscanf+0xb2>
    3148:	c1 14       	cp	r12, r1
    314a:	d1 04       	cpc	r13, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <vfscanf+0xb2>
    314e:	ca c0       	rjmp	.+404    	; 0x32e4 <vfscanf+0x246>
    3150:	18 36       	cpi	r17, 0x68	; 104
    3152:	21 f0       	breq	.+8      	; 0x315c <vfscanf+0xbe>
    3154:	1c 36       	cpi	r17, 0x6C	; 108
    3156:	99 f4       	brne	.+38     	; 0x317e <vfscanf+0xe0>
    3158:	f5 01       	movw	r30, r10
    315a:	0b c0       	rjmp	.+22     	; 0x3172 <vfscanf+0xd4>
    315c:	f5 01       	movw	r30, r10
    315e:	f3 fc       	sbrc	r15, 3
    3160:	65 91       	lpm	r22, Z+
    3162:	f3 fe       	sbrs	r15, 3
    3164:	61 91       	ld	r22, Z+
    3166:	68 36       	cpi	r22, 0x68	; 104
    3168:	19 f0       	breq	.+6      	; 0x3170 <vfscanf+0xd2>
    316a:	5f 01       	movw	r10, r30
    316c:	16 2f       	mov	r17, r22
    316e:	07 c0       	rjmp	.+14     	; 0x317e <vfscanf+0xe0>
    3170:	08 60       	ori	r16, 0x08	; 8
    3172:	04 60       	ori	r16, 0x04	; 4
    3174:	f3 fc       	sbrc	r15, 3
    3176:	15 91       	lpm	r17, Z+
    3178:	f3 fe       	sbrs	r15, 3
    317a:	11 91       	ld	r17, Z+
    317c:	5f 01       	movw	r10, r30
    317e:	11 23       	and	r17, r17
    3180:	09 f4       	brne	.+2      	; 0x3184 <vfscanf+0xe6>
    3182:	b0 c0       	rjmp	.+352    	; 0x32e4 <vfscanf+0x246>
    3184:	88 e7       	ldi	r24, 0x78	; 120
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	61 2f       	mov	r22, r17
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <strchr_P>
    3190:	89 2b       	or	r24, r25
    3192:	09 f4       	brne	.+2      	; 0x3196 <vfscanf+0xf8>
    3194:	a7 c0       	rjmp	.+334    	; 0x32e4 <vfscanf+0x246>
    3196:	80 2f       	mov	r24, r16
    3198:	00 ff       	sbrs	r16, 0
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <vfscanf+0x104>
    319c:	ee 24       	eor	r14, r14
    319e:	ff 24       	eor	r15, r15
    31a0:	07 c0       	rjmp	.+14     	; 0x31b0 <vfscanf+0x112>
    31a2:	f3 01       	movw	r30, r6
    31a4:	e0 80       	ld	r14, Z
    31a6:	f1 80       	ldd	r15, Z+1	; 0x01
    31a8:	22 e0       	ldi	r18, 0x02	; 2
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	62 0e       	add	r6, r18
    31ae:	73 1e       	adc	r7, r19
    31b0:	1e 36       	cpi	r17, 0x6E	; 110
    31b2:	51 f4       	brne	.+20     	; 0x31c8 <vfscanf+0x12a>
    31b4:	f4 01       	movw	r30, r8
    31b6:	46 81       	ldd	r20, Z+6	; 0x06
    31b8:	57 81       	ldd	r21, Z+7	; 0x07
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	c7 01       	movw	r24, r14
    31c0:	20 2f       	mov	r18, r16
    31c2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <putval>
    31c6:	7d c0       	rjmp	.+250    	; 0x32c2 <vfscanf+0x224>
    31c8:	13 36       	cpi	r17, 0x63	; 99
    31ca:	b9 f4       	brne	.+46     	; 0x31fa <vfscanf+0x15c>
    31cc:	81 fd       	sbrc	r24, 1
    31ce:	03 c0       	rjmp	.+6      	; 0x31d6 <vfscanf+0x138>
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	c8 2e       	mov	r12, r24
    31d4:	d1 2c       	mov	r13, r1
    31d6:	c4 01       	movw	r24, r8
    31d8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    31dc:	97 fd       	sbrc	r25, 7
    31de:	7d c0       	rjmp	.+250    	; 0x32da <vfscanf+0x23c>
    31e0:	e1 14       	cp	r14, r1
    31e2:	f1 04       	cpc	r15, r1
    31e4:	19 f0       	breq	.+6      	; 0x31ec <vfscanf+0x14e>
    31e6:	f7 01       	movw	r30, r14
    31e8:	81 93       	st	Z+, r24
    31ea:	7f 01       	movw	r14, r30
    31ec:	08 94       	sec
    31ee:	c1 08       	sbc	r12, r1
    31f0:	d1 08       	sbc	r13, r1
    31f2:	c1 14       	cp	r12, r1
    31f4:	d1 04       	cpc	r13, r1
    31f6:	79 f7       	brne	.-34     	; 0x31d6 <vfscanf+0x138>
    31f8:	62 c0       	rjmp	.+196    	; 0x32be <vfscanf+0x220>
    31fa:	1b 35       	cpi	r17, 0x5B	; 91
    31fc:	59 f4       	brne	.+22     	; 0x3214 <vfscanf+0x176>
    31fe:	c4 01       	movw	r24, r8
    3200:	b6 01       	movw	r22, r12
    3202:	a7 01       	movw	r20, r14
    3204:	95 01       	movw	r18, r10
    3206:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <conv_brk>
    320a:	5c 01       	movw	r10, r24
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	09 f0       	breq	.+2      	; 0x3212 <vfscanf+0x174>
    3210:	56 c0       	rjmp	.+172    	; 0x32be <vfscanf+0x220>
    3212:	50 c0       	rjmp	.+160    	; 0x32b4 <vfscanf+0x216>
    3214:	c4 01       	movw	r24, r8
    3216:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <skip_spaces>
    321a:	97 fd       	sbrc	r25, 7
    321c:	5e c0       	rjmp	.+188    	; 0x32da <vfscanf+0x23c>
    321e:	1f 36       	cpi	r17, 0x6F	; 111
    3220:	d1 f1       	breq	.+116    	; 0x3296 <vfscanf+0x1f8>
    3222:	10 37       	cpi	r17, 0x70	; 112
    3224:	38 f4       	brcc	.+14     	; 0x3234 <vfscanf+0x196>
    3226:	14 36       	cpi	r17, 0x64	; 100
    3228:	a1 f1       	breq	.+104    	; 0x3292 <vfscanf+0x1f4>
    322a:	19 36       	cpi	r17, 0x69	; 105
    322c:	a9 f1       	breq	.+106    	; 0x3298 <vfscanf+0x1fa>
    322e:	18 35       	cpi	r17, 0x58	; 88
    3230:	d1 f5       	brne	.+116    	; 0x32a6 <vfscanf+0x208>
    3232:	2d c0       	rjmp	.+90     	; 0x328e <vfscanf+0x1f0>
    3234:	13 37       	cpi	r17, 0x73	; 115
    3236:	51 f0       	breq	.+20     	; 0x324c <vfscanf+0x1ae>
    3238:	14 37       	cpi	r17, 0x74	; 116
    323a:	18 f4       	brcc	.+6      	; 0x3242 <vfscanf+0x1a4>
    323c:	10 37       	cpi	r17, 0x70	; 112
    323e:	99 f5       	brne	.+102    	; 0x32a6 <vfscanf+0x208>
    3240:	26 c0       	rjmp	.+76     	; 0x328e <vfscanf+0x1f0>
    3242:	15 37       	cpi	r17, 0x75	; 117
    3244:	31 f1       	breq	.+76     	; 0x3292 <vfscanf+0x1f4>
    3246:	18 37       	cpi	r17, 0x78	; 120
    3248:	71 f5       	brne	.+92     	; 0x32a6 <vfscanf+0x208>
    324a:	21 c0       	rjmp	.+66     	; 0x328e <vfscanf+0x1f0>
    324c:	c4 01       	movw	r24, r8
    324e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <fgetc>
    3252:	ec 01       	movw	r28, r24
    3254:	97 fd       	sbrc	r25, 7
    3256:	15 c0       	rjmp	.+42     	; 0x3282 <vfscanf+0x1e4>
    3258:	0e 94 a1 1b 	call	0x3742	; 0x3742 <isspace>
    325c:	89 2b       	or	r24, r25
    325e:	29 f0       	breq	.+10     	; 0x326a <vfscanf+0x1cc>
    3260:	ce 01       	movw	r24, r28
    3262:	b4 01       	movw	r22, r8
    3264:	0e 94 b5 1c 	call	0x396a	; 0x396a <ungetc>
    3268:	0c c0       	rjmp	.+24     	; 0x3282 <vfscanf+0x1e4>
    326a:	e1 14       	cp	r14, r1
    326c:	f1 04       	cpc	r15, r1
    326e:	19 f0       	breq	.+6      	; 0x3276 <vfscanf+0x1d8>
    3270:	f7 01       	movw	r30, r14
    3272:	c1 93       	st	Z+, r28
    3274:	7f 01       	movw	r14, r30
    3276:	08 94       	sec
    3278:	c1 08       	sbc	r12, r1
    327a:	d1 08       	sbc	r13, r1
    327c:	c1 14       	cp	r12, r1
    327e:	d1 04       	cpc	r13, r1
    3280:	29 f7       	brne	.-54     	; 0x324c <vfscanf+0x1ae>
    3282:	e1 14       	cp	r14, r1
    3284:	f1 04       	cpc	r15, r1
    3286:	d9 f0       	breq	.+54     	; 0x32be <vfscanf+0x220>
    3288:	f7 01       	movw	r30, r14
    328a:	10 82       	st	Z, r1
    328c:	18 c0       	rjmp	.+48     	; 0x32be <vfscanf+0x220>
    328e:	00 64       	ori	r16, 0x40	; 64
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <vfscanf+0x1fa>
    3292:	00 62       	ori	r16, 0x20	; 32
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <vfscanf+0x1fa>
    3296:	00 61       	ori	r16, 0x10	; 16
    3298:	c4 01       	movw	r24, r8
    329a:	b6 01       	movw	r22, r12
    329c:	a7 01       	movw	r20, r14
    329e:	20 2f       	mov	r18, r16
    32a0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <conv_int>
    32a4:	05 c0       	rjmp	.+10     	; 0x32b0 <vfscanf+0x212>
    32a6:	c4 01       	movw	r24, r8
    32a8:	b6 01       	movw	r22, r12
    32aa:	a7 01       	movw	r20, r14
    32ac:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <conv_flt>
    32b0:	88 23       	and	r24, r24
    32b2:	29 f4       	brne	.+10     	; 0x32be <vfscanf+0x220>
    32b4:	f4 01       	movw	r30, r8
    32b6:	83 81       	ldd	r24, Z+3	; 0x03
    32b8:	80 73       	andi	r24, 0x30	; 48
    32ba:	79 f4       	brne	.+30     	; 0x32da <vfscanf+0x23c>
    32bc:	13 c0       	rjmp	.+38     	; 0x32e4 <vfscanf+0x246>
    32be:	00 ff       	sbrs	r16, 0
    32c0:	53 94       	inc	r5
    32c2:	f4 01       	movw	r30, r8
    32c4:	f3 80       	ldd	r15, Z+3	; 0x03
    32c6:	f5 01       	movw	r30, r10
    32c8:	f3 fc       	sbrc	r15, 3
    32ca:	15 91       	lpm	r17, Z+
    32cc:	f3 fe       	sbrs	r15, 3
    32ce:	11 91       	ld	r17, Z+
    32d0:	5f 01       	movw	r10, r30
    32d2:	11 23       	and	r17, r17
    32d4:	09 f0       	breq	.+2      	; 0x32d8 <vfscanf+0x23a>
    32d6:	f1 ce       	rjmp	.-542    	; 0x30ba <vfscanf+0x1c>
    32d8:	05 c0       	rjmp	.+10     	; 0x32e4 <vfscanf+0x246>
    32da:	55 20       	and	r5, r5
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <vfscanf+0x246>
    32de:	2f ef       	ldi	r18, 0xFF	; 255
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <vfscanf+0x24a>
    32e4:	25 2d       	mov	r18, r5
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	c9 01       	movw	r24, r18
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	ef e0       	ldi	r30, 0x0F	; 15
    32f0:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__epilogue_restores__+0x6>

000032f4 <__floatunsisf>:
    32f4:	e8 94       	clt
    32f6:	09 c0       	rjmp	.+18     	; 0x330a <__floatsisf+0x12>

000032f8 <__floatsisf>:
    32f8:	97 fb       	bst	r25, 7
    32fa:	3e f4       	brtc	.+14     	; 0x330a <__floatsisf+0x12>
    32fc:	90 95       	com	r25
    32fe:	80 95       	com	r24
    3300:	70 95       	com	r23
    3302:	61 95       	neg	r22
    3304:	7f 4f       	sbci	r23, 0xFF	; 255
    3306:	8f 4f       	sbci	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	99 23       	and	r25, r25
    330c:	a9 f0       	breq	.+42     	; 0x3338 <__floatsisf+0x40>
    330e:	f9 2f       	mov	r31, r25
    3310:	96 e9       	ldi	r25, 0x96	; 150
    3312:	bb 27       	eor	r27, r27
    3314:	93 95       	inc	r25
    3316:	f6 95       	lsr	r31
    3318:	87 95       	ror	r24
    331a:	77 95       	ror	r23
    331c:	67 95       	ror	r22
    331e:	b7 95       	ror	r27
    3320:	f1 11       	cpse	r31, r1
    3322:	f8 cf       	rjmp	.-16     	; 0x3314 <__floatsisf+0x1c>
    3324:	fa f4       	brpl	.+62     	; 0x3364 <__floatsisf+0x6c>
    3326:	bb 0f       	add	r27, r27
    3328:	11 f4       	brne	.+4      	; 0x332e <__floatsisf+0x36>
    332a:	60 ff       	sbrs	r22, 0
    332c:	1b c0       	rjmp	.+54     	; 0x3364 <__floatsisf+0x6c>
    332e:	6f 5f       	subi	r22, 0xFF	; 255
    3330:	7f 4f       	sbci	r23, 0xFF	; 255
    3332:	8f 4f       	sbci	r24, 0xFF	; 255
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	16 c0       	rjmp	.+44     	; 0x3364 <__floatsisf+0x6c>
    3338:	88 23       	and	r24, r24
    333a:	11 f0       	breq	.+4      	; 0x3340 <__floatsisf+0x48>
    333c:	96 e9       	ldi	r25, 0x96	; 150
    333e:	11 c0       	rjmp	.+34     	; 0x3362 <__floatsisf+0x6a>
    3340:	77 23       	and	r23, r23
    3342:	21 f0       	breq	.+8      	; 0x334c <__floatsisf+0x54>
    3344:	9e e8       	ldi	r25, 0x8E	; 142
    3346:	87 2f       	mov	r24, r23
    3348:	76 2f       	mov	r23, r22
    334a:	05 c0       	rjmp	.+10     	; 0x3356 <__floatsisf+0x5e>
    334c:	66 23       	and	r22, r22
    334e:	71 f0       	breq	.+28     	; 0x336c <__floatsisf+0x74>
    3350:	96 e8       	ldi	r25, 0x86	; 134
    3352:	86 2f       	mov	r24, r22
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	2a f0       	brmi	.+10     	; 0x3364 <__floatsisf+0x6c>
    335a:	9a 95       	dec	r25
    335c:	66 0f       	add	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	88 1f       	adc	r24, r24
    3362:	da f7       	brpl	.-10     	; 0x335a <__floatsisf+0x62>
    3364:	88 0f       	add	r24, r24
    3366:	96 95       	lsr	r25
    3368:	87 95       	ror	r24
    336a:	97 f9       	bld	r25, 7
    336c:	08 95       	ret

0000336e <__mulsf3>:
    336e:	0b d0       	rcall	.+22     	; 0x3386 <__mulsf3x>
    3370:	78 c0       	rjmp	.+240    	; 0x3462 <__fp_round>
    3372:	69 d0       	rcall	.+210    	; 0x3446 <__fp_pscA>
    3374:	28 f0       	brcs	.+10     	; 0x3380 <__mulsf3+0x12>
    3376:	6e d0       	rcall	.+220    	; 0x3454 <__fp_pscB>
    3378:	18 f0       	brcs	.+6      	; 0x3380 <__mulsf3+0x12>
    337a:	95 23       	and	r25, r21
    337c:	09 f0       	breq	.+2      	; 0x3380 <__mulsf3+0x12>
    337e:	5a c0       	rjmp	.+180    	; 0x3434 <__fp_inf>
    3380:	5f c0       	rjmp	.+190    	; 0x3440 <__fp_nan>
    3382:	11 24       	eor	r1, r1
    3384:	a2 c0       	rjmp	.+324    	; 0x34ca <__fp_szero>

00003386 <__mulsf3x>:
    3386:	7e d0       	rcall	.+252    	; 0x3484 <__fp_split3>
    3388:	a0 f3       	brcs	.-24     	; 0x3372 <__mulsf3+0x4>

0000338a <__mulsf3_pse>:
    338a:	95 9f       	mul	r25, r21
    338c:	d1 f3       	breq	.-12     	; 0x3382 <__mulsf3+0x14>
    338e:	95 0f       	add	r25, r21
    3390:	50 e0       	ldi	r21, 0x00	; 0
    3392:	55 1f       	adc	r21, r21
    3394:	62 9f       	mul	r22, r18
    3396:	f0 01       	movw	r30, r0
    3398:	72 9f       	mul	r23, r18
    339a:	bb 27       	eor	r27, r27
    339c:	f0 0d       	add	r31, r0
    339e:	b1 1d       	adc	r27, r1
    33a0:	63 9f       	mul	r22, r19
    33a2:	aa 27       	eor	r26, r26
    33a4:	f0 0d       	add	r31, r0
    33a6:	b1 1d       	adc	r27, r1
    33a8:	aa 1f       	adc	r26, r26
    33aa:	64 9f       	mul	r22, r20
    33ac:	66 27       	eor	r22, r22
    33ae:	b0 0d       	add	r27, r0
    33b0:	a1 1d       	adc	r26, r1
    33b2:	66 1f       	adc	r22, r22
    33b4:	82 9f       	mul	r24, r18
    33b6:	22 27       	eor	r18, r18
    33b8:	b0 0d       	add	r27, r0
    33ba:	a1 1d       	adc	r26, r1
    33bc:	62 1f       	adc	r22, r18
    33be:	73 9f       	mul	r23, r19
    33c0:	b0 0d       	add	r27, r0
    33c2:	a1 1d       	adc	r26, r1
    33c4:	62 1f       	adc	r22, r18
    33c6:	83 9f       	mul	r24, r19
    33c8:	a0 0d       	add	r26, r0
    33ca:	61 1d       	adc	r22, r1
    33cc:	22 1f       	adc	r18, r18
    33ce:	74 9f       	mul	r23, r20
    33d0:	33 27       	eor	r19, r19
    33d2:	a0 0d       	add	r26, r0
    33d4:	61 1d       	adc	r22, r1
    33d6:	23 1f       	adc	r18, r19
    33d8:	84 9f       	mul	r24, r20
    33da:	60 0d       	add	r22, r0
    33dc:	21 1d       	adc	r18, r1
    33de:	82 2f       	mov	r24, r18
    33e0:	76 2f       	mov	r23, r22
    33e2:	6a 2f       	mov	r22, r26
    33e4:	11 24       	eor	r1, r1
    33e6:	9f 57       	subi	r25, 0x7F	; 127
    33e8:	50 40       	sbci	r21, 0x00	; 0
    33ea:	8a f0       	brmi	.+34     	; 0x340e <__mulsf3_pse+0x84>
    33ec:	e1 f0       	breq	.+56     	; 0x3426 <__mulsf3_pse+0x9c>
    33ee:	88 23       	and	r24, r24
    33f0:	4a f0       	brmi	.+18     	; 0x3404 <__mulsf3_pse+0x7a>
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	bb 1f       	adc	r27, r27
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	91 50       	subi	r25, 0x01	; 1
    3400:	50 40       	sbci	r21, 0x00	; 0
    3402:	a9 f7       	brne	.-22     	; 0x33ee <__mulsf3_pse+0x64>
    3404:	9e 3f       	cpi	r25, 0xFE	; 254
    3406:	51 05       	cpc	r21, r1
    3408:	70 f0       	brcs	.+28     	; 0x3426 <__mulsf3_pse+0x9c>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <__fp_inf>
    340c:	5e c0       	rjmp	.+188    	; 0x34ca <__fp_szero>
    340e:	5f 3f       	cpi	r21, 0xFF	; 255
    3410:	ec f3       	brlt	.-6      	; 0x340c <__mulsf3_pse+0x82>
    3412:	98 3e       	cpi	r25, 0xE8	; 232
    3414:	dc f3       	brlt	.-10     	; 0x340c <__mulsf3_pse+0x82>
    3416:	86 95       	lsr	r24
    3418:	77 95       	ror	r23
    341a:	67 95       	ror	r22
    341c:	b7 95       	ror	r27
    341e:	f7 95       	ror	r31
    3420:	e7 95       	ror	r30
    3422:	9f 5f       	subi	r25, 0xFF	; 255
    3424:	c1 f7       	brne	.-16     	; 0x3416 <__mulsf3_pse+0x8c>
    3426:	fe 2b       	or	r31, r30
    3428:	88 0f       	add	r24, r24
    342a:	91 1d       	adc	r25, r1
    342c:	96 95       	lsr	r25
    342e:	87 95       	ror	r24
    3430:	97 f9       	bld	r25, 7
    3432:	08 95       	ret

00003434 <__fp_inf>:
    3434:	97 f9       	bld	r25, 7
    3436:	9f 67       	ori	r25, 0x7F	; 127
    3438:	80 e8       	ldi	r24, 0x80	; 128
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	08 95       	ret

00003440 <__fp_nan>:
    3440:	9f ef       	ldi	r25, 0xFF	; 255
    3442:	80 ec       	ldi	r24, 0xC0	; 192
    3444:	08 95       	ret

00003446 <__fp_pscA>:
    3446:	00 24       	eor	r0, r0
    3448:	0a 94       	dec	r0
    344a:	16 16       	cp	r1, r22
    344c:	17 06       	cpc	r1, r23
    344e:	18 06       	cpc	r1, r24
    3450:	09 06       	cpc	r0, r25
    3452:	08 95       	ret

00003454 <__fp_pscB>:
    3454:	00 24       	eor	r0, r0
    3456:	0a 94       	dec	r0
    3458:	12 16       	cp	r1, r18
    345a:	13 06       	cpc	r1, r19
    345c:	14 06       	cpc	r1, r20
    345e:	05 06       	cpc	r0, r21
    3460:	08 95       	ret

00003462 <__fp_round>:
    3462:	09 2e       	mov	r0, r25
    3464:	03 94       	inc	r0
    3466:	00 0c       	add	r0, r0
    3468:	11 f4       	brne	.+4      	; 0x346e <__fp_round+0xc>
    346a:	88 23       	and	r24, r24
    346c:	52 f0       	brmi	.+20     	; 0x3482 <__fp_round+0x20>
    346e:	bb 0f       	add	r27, r27
    3470:	40 f4       	brcc	.+16     	; 0x3482 <__fp_round+0x20>
    3472:	bf 2b       	or	r27, r31
    3474:	11 f4       	brne	.+4      	; 0x347a <__fp_round+0x18>
    3476:	60 ff       	sbrs	r22, 0
    3478:	04 c0       	rjmp	.+8      	; 0x3482 <__fp_round+0x20>
    347a:	6f 5f       	subi	r22, 0xFF	; 255
    347c:	7f 4f       	sbci	r23, 0xFF	; 255
    347e:	8f 4f       	sbci	r24, 0xFF	; 255
    3480:	9f 4f       	sbci	r25, 0xFF	; 255
    3482:	08 95       	ret

00003484 <__fp_split3>:
    3484:	57 fd       	sbrc	r21, 7
    3486:	90 58       	subi	r25, 0x80	; 128
    3488:	44 0f       	add	r20, r20
    348a:	55 1f       	adc	r21, r21
    348c:	59 f0       	breq	.+22     	; 0x34a4 <__fp_splitA+0x10>
    348e:	5f 3f       	cpi	r21, 0xFF	; 255
    3490:	71 f0       	breq	.+28     	; 0x34ae <__fp_splitA+0x1a>
    3492:	47 95       	ror	r20

00003494 <__fp_splitA>:
    3494:	88 0f       	add	r24, r24
    3496:	97 fb       	bst	r25, 7
    3498:	99 1f       	adc	r25, r25
    349a:	61 f0       	breq	.+24     	; 0x34b4 <__fp_splitA+0x20>
    349c:	9f 3f       	cpi	r25, 0xFF	; 255
    349e:	79 f0       	breq	.+30     	; 0x34be <__fp_splitA+0x2a>
    34a0:	87 95       	ror	r24
    34a2:	08 95       	ret
    34a4:	12 16       	cp	r1, r18
    34a6:	13 06       	cpc	r1, r19
    34a8:	14 06       	cpc	r1, r20
    34aa:	55 1f       	adc	r21, r21
    34ac:	f2 cf       	rjmp	.-28     	; 0x3492 <__fp_split3+0xe>
    34ae:	46 95       	lsr	r20
    34b0:	f1 df       	rcall	.-30     	; 0x3494 <__fp_splitA>
    34b2:	08 c0       	rjmp	.+16     	; 0x34c4 <__fp_splitA+0x30>
    34b4:	16 16       	cp	r1, r22
    34b6:	17 06       	cpc	r1, r23
    34b8:	18 06       	cpc	r1, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	f1 cf       	rjmp	.-30     	; 0x34a0 <__fp_splitA+0xc>
    34be:	86 95       	lsr	r24
    34c0:	71 05       	cpc	r23, r1
    34c2:	61 05       	cpc	r22, r1
    34c4:	08 94       	sec
    34c6:	08 95       	ret

000034c8 <__fp_zero>:
    34c8:	e8 94       	clt

000034ca <__fp_szero>:
    34ca:	bb 27       	eor	r27, r27
    34cc:	66 27       	eor	r22, r22
    34ce:	77 27       	eor	r23, r23
    34d0:	cb 01       	movw	r24, r22
    34d2:	97 f9       	bld	r25, 7
    34d4:	08 95       	ret

000034d6 <__udivmodhi4>:
    34d6:	aa 1b       	sub	r26, r26
    34d8:	bb 1b       	sub	r27, r27
    34da:	51 e1       	ldi	r21, 0x11	; 17
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <__udivmodhi4_ep>

000034de <__udivmodhi4_loop>:
    34de:	aa 1f       	adc	r26, r26
    34e0:	bb 1f       	adc	r27, r27
    34e2:	a6 17       	cp	r26, r22
    34e4:	b7 07       	cpc	r27, r23
    34e6:	10 f0       	brcs	.+4      	; 0x34ec <__udivmodhi4_ep>
    34e8:	a6 1b       	sub	r26, r22
    34ea:	b7 0b       	sbc	r27, r23

000034ec <__udivmodhi4_ep>:
    34ec:	88 1f       	adc	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	5a 95       	dec	r21
    34f2:	a9 f7       	brne	.-22     	; 0x34de <__udivmodhi4_loop>
    34f4:	80 95       	com	r24
    34f6:	90 95       	com	r25
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	08 95       	ret

000034fe <__divmodhi4>:
    34fe:	97 fb       	bst	r25, 7
    3500:	09 2e       	mov	r0, r25
    3502:	07 26       	eor	r0, r23
    3504:	0a d0       	rcall	.+20     	; 0x351a <__divmodhi4_neg1>
    3506:	77 fd       	sbrc	r23, 7
    3508:	04 d0       	rcall	.+8      	; 0x3512 <__divmodhi4_neg2>
    350a:	e5 df       	rcall	.-54     	; 0x34d6 <__udivmodhi4>
    350c:	06 d0       	rcall	.+12     	; 0x351a <__divmodhi4_neg1>
    350e:	00 20       	and	r0, r0
    3510:	1a f4       	brpl	.+6      	; 0x3518 <__divmodhi4_exit>

00003512 <__divmodhi4_neg2>:
    3512:	70 95       	com	r23
    3514:	61 95       	neg	r22
    3516:	7f 4f       	sbci	r23, 0xFF	; 255

00003518 <__divmodhi4_exit>:
    3518:	08 95       	ret

0000351a <__divmodhi4_neg1>:
    351a:	f6 f7       	brtc	.-4      	; 0x3518 <__divmodhi4_exit>
    351c:	90 95       	com	r25
    351e:	81 95       	neg	r24
    3520:	9f 4f       	sbci	r25, 0xFF	; 255
    3522:	08 95       	ret

00003524 <__prologue_saves__>:
    3524:	2f 92       	push	r2
    3526:	3f 92       	push	r3
    3528:	4f 92       	push	r4
    352a:	5f 92       	push	r5
    352c:	6f 92       	push	r6
    352e:	7f 92       	push	r7
    3530:	8f 92       	push	r8
    3532:	9f 92       	push	r9
    3534:	af 92       	push	r10
    3536:	bf 92       	push	r11
    3538:	cf 92       	push	r12
    353a:	df 92       	push	r13
    353c:	ef 92       	push	r14
    353e:	ff 92       	push	r15
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	ca 1b       	sub	r28, r26
    354e:	db 0b       	sbc	r29, r27
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	09 94       	ijmp

0000355c <__epilogue_restores__>:
    355c:	2a 88       	ldd	r2, Y+18	; 0x12
    355e:	39 88       	ldd	r3, Y+17	; 0x11
    3560:	48 88       	ldd	r4, Y+16	; 0x10
    3562:	5f 84       	ldd	r5, Y+15	; 0x0f
    3564:	6e 84       	ldd	r6, Y+14	; 0x0e
    3566:	7d 84       	ldd	r7, Y+13	; 0x0d
    3568:	8c 84       	ldd	r8, Y+12	; 0x0c
    356a:	9b 84       	ldd	r9, Y+11	; 0x0b
    356c:	aa 84       	ldd	r10, Y+10	; 0x0a
    356e:	b9 84       	ldd	r11, Y+9	; 0x09
    3570:	c8 84       	ldd	r12, Y+8	; 0x08
    3572:	df 80       	ldd	r13, Y+7	; 0x07
    3574:	ee 80       	ldd	r14, Y+6	; 0x06
    3576:	fd 80       	ldd	r15, Y+5	; 0x05
    3578:	0c 81       	ldd	r16, Y+4	; 0x04
    357a:	1b 81       	ldd	r17, Y+3	; 0x03
    357c:	aa 81       	ldd	r26, Y+2	; 0x02
    357e:	b9 81       	ldd	r27, Y+1	; 0x01
    3580:	ce 0f       	add	r28, r30
    3582:	d1 1d       	adc	r29, r1
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	ed 01       	movw	r28, r26
    3590:	08 95       	ret

00003592 <__ftoa_engine>:
    3592:	28 30       	cpi	r18, 0x08	; 8
    3594:	08 f0       	brcs	.+2      	; 0x3598 <__ftoa_engine+0x6>
    3596:	27 e0       	ldi	r18, 0x07	; 7
    3598:	33 27       	eor	r19, r19
    359a:	da 01       	movw	r26, r20
    359c:	99 0f       	add	r25, r25
    359e:	31 1d       	adc	r19, r1
    35a0:	87 fd       	sbrc	r24, 7
    35a2:	91 60       	ori	r25, 0x01	; 1
    35a4:	00 96       	adiw	r24, 0x00	; 0
    35a6:	61 05       	cpc	r22, r1
    35a8:	71 05       	cpc	r23, r1
    35aa:	39 f4       	brne	.+14     	; 0x35ba <__ftoa_engine+0x28>
    35ac:	32 60       	ori	r19, 0x02	; 2
    35ae:	2e 5f       	subi	r18, 0xFE	; 254
    35b0:	3d 93       	st	X+, r19
    35b2:	30 e3       	ldi	r19, 0x30	; 48
    35b4:	2a 95       	dec	r18
    35b6:	e1 f7       	brne	.-8      	; 0x35b0 <__ftoa_engine+0x1e>
    35b8:	08 95       	ret
    35ba:	9f 3f       	cpi	r25, 0xFF	; 255
    35bc:	30 f0       	brcs	.+12     	; 0x35ca <__ftoa_engine+0x38>
    35be:	80 38       	cpi	r24, 0x80	; 128
    35c0:	71 05       	cpc	r23, r1
    35c2:	61 05       	cpc	r22, r1
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <__ftoa_engine+0x36>
    35c6:	3c 5f       	subi	r19, 0xFC	; 252
    35c8:	3c 5f       	subi	r19, 0xFC	; 252
    35ca:	3d 93       	st	X+, r19
    35cc:	91 30       	cpi	r25, 0x01	; 1
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <__ftoa_engine+0x40>
    35d0:	80 68       	ori	r24, 0x80	; 128
    35d2:	91 1d       	adc	r25, r1
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	1f 93       	push	r17
    35da:	0f 93       	push	r16
    35dc:	ff 92       	push	r15
    35de:	ef 92       	push	r14
    35e0:	19 2f       	mov	r17, r25
    35e2:	98 7f       	andi	r25, 0xF8	; 248
    35e4:	96 95       	lsr	r25
    35e6:	e9 2f       	mov	r30, r25
    35e8:	96 95       	lsr	r25
    35ea:	96 95       	lsr	r25
    35ec:	e9 0f       	add	r30, r25
    35ee:	ff 27       	eor	r31, r31
    35f0:	e1 5a       	subi	r30, 0xA1	; 161
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	99 27       	eor	r25, r25
    35f6:	33 27       	eor	r19, r19
    35f8:	ee 24       	eor	r14, r14
    35fa:	ff 24       	eor	r15, r15
    35fc:	a7 01       	movw	r20, r14
    35fe:	e7 01       	movw	r28, r14
    3600:	05 90       	lpm	r0, Z+
    3602:	08 94       	sec
    3604:	07 94       	ror	r0
    3606:	28 f4       	brcc	.+10     	; 0x3612 <__ftoa_engine+0x80>
    3608:	36 0f       	add	r19, r22
    360a:	e7 1e       	adc	r14, r23
    360c:	f8 1e       	adc	r15, r24
    360e:	49 1f       	adc	r20, r25
    3610:	51 1d       	adc	r21, r1
    3612:	66 0f       	add	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	88 1f       	adc	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	06 94       	lsr	r0
    361c:	a1 f7       	brne	.-24     	; 0x3606 <__ftoa_engine+0x74>
    361e:	05 90       	lpm	r0, Z+
    3620:	07 94       	ror	r0
    3622:	28 f4       	brcc	.+10     	; 0x362e <__ftoa_engine+0x9c>
    3624:	e7 0e       	add	r14, r23
    3626:	f8 1e       	adc	r15, r24
    3628:	49 1f       	adc	r20, r25
    362a:	56 1f       	adc	r21, r22
    362c:	c1 1d       	adc	r28, r1
    362e:	77 0f       	add	r23, r23
    3630:	88 1f       	adc	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	66 1f       	adc	r22, r22
    3636:	06 94       	lsr	r0
    3638:	a1 f7       	brne	.-24     	; 0x3622 <__ftoa_engine+0x90>
    363a:	05 90       	lpm	r0, Z+
    363c:	07 94       	ror	r0
    363e:	28 f4       	brcc	.+10     	; 0x364a <__ftoa_engine+0xb8>
    3640:	f8 0e       	add	r15, r24
    3642:	49 1f       	adc	r20, r25
    3644:	56 1f       	adc	r21, r22
    3646:	c7 1f       	adc	r28, r23
    3648:	d1 1d       	adc	r29, r1
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	66 1f       	adc	r22, r22
    3650:	77 1f       	adc	r23, r23
    3652:	06 94       	lsr	r0
    3654:	a1 f7       	brne	.-24     	; 0x363e <__ftoa_engine+0xac>
    3656:	05 90       	lpm	r0, Z+
    3658:	07 94       	ror	r0
    365a:	20 f4       	brcc	.+8      	; 0x3664 <__ftoa_engine+0xd2>
    365c:	49 0f       	add	r20, r25
    365e:	56 1f       	adc	r21, r22
    3660:	c7 1f       	adc	r28, r23
    3662:	d8 1f       	adc	r29, r24
    3664:	99 0f       	add	r25, r25
    3666:	66 1f       	adc	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	88 1f       	adc	r24, r24
    366c:	06 94       	lsr	r0
    366e:	a9 f7       	brne	.-22     	; 0x365a <__ftoa_engine+0xc8>
    3670:	84 91       	lpm	r24, Z+
    3672:	10 95       	com	r17
    3674:	17 70       	andi	r17, 0x07	; 7
    3676:	41 f0       	breq	.+16     	; 0x3688 <__ftoa_engine+0xf6>
    3678:	d6 95       	lsr	r29
    367a:	c7 95       	ror	r28
    367c:	57 95       	ror	r21
    367e:	47 95       	ror	r20
    3680:	f7 94       	ror	r15
    3682:	e7 94       	ror	r14
    3684:	1a 95       	dec	r17
    3686:	c1 f7       	brne	.-16     	; 0x3678 <__ftoa_engine+0xe6>
    3688:	e5 e0       	ldi	r30, 0x05	; 5
    368a:	f1 e0       	ldi	r31, 0x01	; 1
    368c:	68 94       	set
    368e:	15 90       	lpm	r1, Z+
    3690:	15 91       	lpm	r17, Z+
    3692:	35 91       	lpm	r19, Z+
    3694:	65 91       	lpm	r22, Z+
    3696:	95 91       	lpm	r25, Z+
    3698:	05 90       	lpm	r0, Z+
    369a:	7f e2       	ldi	r23, 0x2F	; 47
    369c:	73 95       	inc	r23
    369e:	e1 18       	sub	r14, r1
    36a0:	f1 0a       	sbc	r15, r17
    36a2:	43 0b       	sbc	r20, r19
    36a4:	56 0b       	sbc	r21, r22
    36a6:	c9 0b       	sbc	r28, r25
    36a8:	d0 09       	sbc	r29, r0
    36aa:	c0 f7       	brcc	.-16     	; 0x369c <__ftoa_engine+0x10a>
    36ac:	e1 0c       	add	r14, r1
    36ae:	f1 1e       	adc	r15, r17
    36b0:	43 1f       	adc	r20, r19
    36b2:	56 1f       	adc	r21, r22
    36b4:	c9 1f       	adc	r28, r25
    36b6:	d0 1d       	adc	r29, r0
    36b8:	7e f4       	brtc	.+30     	; 0x36d8 <__ftoa_engine+0x146>
    36ba:	70 33       	cpi	r23, 0x30	; 48
    36bc:	11 f4       	brne	.+4      	; 0x36c2 <__ftoa_engine+0x130>
    36be:	8a 95       	dec	r24
    36c0:	e6 cf       	rjmp	.-52     	; 0x368e <__ftoa_engine+0xfc>
    36c2:	e8 94       	clt
    36c4:	01 50       	subi	r16, 0x01	; 1
    36c6:	30 f0       	brcs	.+12     	; 0x36d4 <__ftoa_engine+0x142>
    36c8:	08 0f       	add	r16, r24
    36ca:	0a f4       	brpl	.+2      	; 0x36ce <__ftoa_engine+0x13c>
    36cc:	00 27       	eor	r16, r16
    36ce:	02 17       	cp	r16, r18
    36d0:	08 f4       	brcc	.+2      	; 0x36d4 <__ftoa_engine+0x142>
    36d2:	20 2f       	mov	r18, r16
    36d4:	23 95       	inc	r18
    36d6:	02 2f       	mov	r16, r18
    36d8:	7a 33       	cpi	r23, 0x3A	; 58
    36da:	28 f0       	brcs	.+10     	; 0x36e6 <__ftoa_engine+0x154>
    36dc:	79 e3       	ldi	r23, 0x39	; 57
    36de:	7d 93       	st	X+, r23
    36e0:	2a 95       	dec	r18
    36e2:	e9 f7       	brne	.-6      	; 0x36de <__ftoa_engine+0x14c>
    36e4:	10 c0       	rjmp	.+32     	; 0x3706 <__ftoa_engine+0x174>
    36e6:	7d 93       	st	X+, r23
    36e8:	2a 95       	dec	r18
    36ea:	89 f6       	brne	.-94     	; 0x368e <__ftoa_engine+0xfc>
    36ec:	06 94       	lsr	r0
    36ee:	97 95       	ror	r25
    36f0:	67 95       	ror	r22
    36f2:	37 95       	ror	r19
    36f4:	17 95       	ror	r17
    36f6:	17 94       	ror	r1
    36f8:	e1 18       	sub	r14, r1
    36fa:	f1 0a       	sbc	r15, r17
    36fc:	43 0b       	sbc	r20, r19
    36fe:	56 0b       	sbc	r21, r22
    3700:	c9 0b       	sbc	r28, r25
    3702:	d0 09       	sbc	r29, r0
    3704:	98 f0       	brcs	.+38     	; 0x372c <__ftoa_engine+0x19a>
    3706:	23 95       	inc	r18
    3708:	7e 91       	ld	r23, -X
    370a:	73 95       	inc	r23
    370c:	7a 33       	cpi	r23, 0x3A	; 58
    370e:	08 f0       	brcs	.+2      	; 0x3712 <__ftoa_engine+0x180>
    3710:	70 e3       	ldi	r23, 0x30	; 48
    3712:	7c 93       	st	X, r23
    3714:	20 13       	cpse	r18, r16
    3716:	b8 f7       	brcc	.-18     	; 0x3706 <__ftoa_engine+0x174>
    3718:	7e 91       	ld	r23, -X
    371a:	70 61       	ori	r23, 0x10	; 16
    371c:	7d 93       	st	X+, r23
    371e:	30 f0       	brcs	.+12     	; 0x372c <__ftoa_engine+0x19a>
    3720:	83 95       	inc	r24
    3722:	71 e3       	ldi	r23, 0x31	; 49
    3724:	7d 93       	st	X+, r23
    3726:	70 e3       	ldi	r23, 0x30	; 48
    3728:	2a 95       	dec	r18
    372a:	e1 f7       	brne	.-8      	; 0x3724 <__ftoa_engine+0x192>
    372c:	11 24       	eor	r1, r1
    372e:	ef 90       	pop	r14
    3730:	ff 90       	pop	r15
    3732:	0f 91       	pop	r16
    3734:	1f 91       	pop	r17
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	99 27       	eor	r25, r25
    373c:	87 fd       	sbrc	r24, 7
    373e:	90 95       	com	r25
    3740:	08 95       	ret

00003742 <isspace>:
    3742:	91 11       	cpse	r25, r1
    3744:	8a c1       	rjmp	.+788    	; 0x3a5a <__ctype_isfalse>
    3746:	80 32       	cpi	r24, 0x20	; 32
    3748:	19 f0       	breq	.+6      	; 0x3750 <isspace+0xe>
    374a:	89 50       	subi	r24, 0x09	; 9
    374c:	85 50       	subi	r24, 0x05	; 5
    374e:	d0 f7       	brcc	.-12     	; 0x3744 <isspace+0x2>
    3750:	08 95       	ret

00003752 <tolower>:
    3752:	91 11       	cpse	r25, r1
    3754:	08 95       	ret
    3756:	81 54       	subi	r24, 0x41	; 65
    3758:	8a 51       	subi	r24, 0x1A	; 26
    375a:	08 f4       	brcc	.+2      	; 0x375e <tolower+0xc>
    375c:	80 5e       	subi	r24, 0xE0	; 224
    375e:	85 5a       	subi	r24, 0xA5	; 165
    3760:	08 95       	ret

00003762 <strchr_P>:
    3762:	fc 01       	movw	r30, r24
    3764:	05 90       	lpm	r0, Z+
    3766:	06 16       	cp	r0, r22
    3768:	21 f0       	breq	.+8      	; 0x3772 <strchr_P+0x10>
    376a:	00 20       	and	r0, r0
    376c:	d9 f7       	brne	.-10     	; 0x3764 <strchr_P+0x2>
    376e:	c0 01       	movw	r24, r0
    3770:	08 95       	ret
    3772:	31 97       	sbiw	r30, 0x01	; 1
    3774:	cf 01       	movw	r24, r30
    3776:	08 95       	ret

00003778 <strnlen_P>:
    3778:	fc 01       	movw	r30, r24
    377a:	05 90       	lpm	r0, Z+
    377c:	61 50       	subi	r22, 0x01	; 1
    377e:	70 40       	sbci	r23, 0x00	; 0
    3780:	01 10       	cpse	r0, r1
    3782:	d8 f7       	brcc	.-10     	; 0x377a <strnlen_P+0x2>
    3784:	80 95       	com	r24
    3786:	90 95       	com	r25
    3788:	8e 0f       	add	r24, r30
    378a:	9f 1f       	adc	r25, r31
    378c:	08 95       	ret

0000378e <strnlen>:
    378e:	fc 01       	movw	r30, r24
    3790:	61 50       	subi	r22, 0x01	; 1
    3792:	70 40       	sbci	r23, 0x00	; 0
    3794:	01 90       	ld	r0, Z+
    3796:	01 10       	cpse	r0, r1
    3798:	d8 f7       	brcc	.-10     	; 0x3790 <strnlen+0x2>
    379a:	80 95       	com	r24
    379c:	90 95       	com	r25
    379e:	8e 0f       	add	r24, r30
    37a0:	9f 1f       	adc	r25, r31
    37a2:	08 95       	ret

000037a4 <fgetc>:
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	ec 01       	movw	r28, r24
    37aa:	4b 81       	ldd	r20, Y+3	; 0x03
    37ac:	40 ff       	sbrs	r20, 0
    37ae:	1a c0       	rjmp	.+52     	; 0x37e4 <fgetc+0x40>
    37b0:	46 ff       	sbrs	r20, 6
    37b2:	0a c0       	rjmp	.+20     	; 0x37c8 <fgetc+0x24>
    37b4:	4f 7b       	andi	r20, 0xBF	; 191
    37b6:	4b 83       	std	Y+3, r20	; 0x03
    37b8:	8e 81       	ldd	r24, Y+6	; 0x06
    37ba:	9f 81       	ldd	r25, Y+7	; 0x07
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	9f 83       	std	Y+7, r25	; 0x07
    37c0:	8e 83       	std	Y+6, r24	; 0x06
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	28 2f       	mov	r18, r24
    37c6:	2b c0       	rjmp	.+86     	; 0x381e <fgetc+0x7a>
    37c8:	42 ff       	sbrs	r20, 2
    37ca:	13 c0       	rjmp	.+38     	; 0x37f2 <fgetc+0x4e>
    37cc:	e8 81       	ld	r30, Y
    37ce:	f9 81       	ldd	r31, Y+1	; 0x01
    37d0:	80 81       	ld	r24, Z
    37d2:	28 2f       	mov	r18, r24
    37d4:	33 27       	eor	r19, r19
    37d6:	27 fd       	sbrc	r18, 7
    37d8:	30 95       	com	r19
    37da:	21 15       	cp	r18, r1
    37dc:	31 05       	cpc	r19, r1
    37de:	29 f4       	brne	.+10     	; 0x37ea <fgetc+0x46>
    37e0:	40 62       	ori	r20, 0x20	; 32
    37e2:	4b 83       	std	Y+3, r20	; 0x03
    37e4:	2f ef       	ldi	r18, 0xFF	; 255
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	1b c0       	rjmp	.+54     	; 0x3820 <fgetc+0x7c>
    37ea:	31 96       	adiw	r30, 0x01	; 1
    37ec:	f9 83       	std	Y+1, r31	; 0x01
    37ee:	e8 83       	st	Y, r30
    37f0:	11 c0       	rjmp	.+34     	; 0x3814 <fgetc+0x70>
    37f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    37f4:	fb 85       	ldd	r31, Y+11	; 0x0b
    37f6:	ce 01       	movw	r24, r28
    37f8:	09 95       	icall
    37fa:	9c 01       	movw	r18, r24
    37fc:	97 ff       	sbrs	r25, 7
    37fe:	0a c0       	rjmp	.+20     	; 0x3814 <fgetc+0x70>
    3800:	9b 81       	ldd	r25, Y+3	; 0x03
    3802:	2f 5f       	subi	r18, 0xFF	; 255
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    3806:	11 f0       	breq	.+4      	; 0x380c <fgetc+0x68>
    3808:	80 e2       	ldi	r24, 0x20	; 32
    380a:	01 c0       	rjmp	.+2      	; 0x380e <fgetc+0x6a>
    380c:	80 e1       	ldi	r24, 0x10	; 16
    380e:	89 2b       	or	r24, r25
    3810:	8b 83       	std	Y+3, r24	; 0x03
    3812:	e8 cf       	rjmp	.-48     	; 0x37e4 <fgetc+0x40>
    3814:	8e 81       	ldd	r24, Y+6	; 0x06
    3816:	9f 81       	ldd	r25, Y+7	; 0x07
    3818:	01 96       	adiw	r24, 0x01	; 1
    381a:	9f 83       	std	Y+7, r25	; 0x07
    381c:	8e 83       	std	Y+6, r24	; 0x06
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	c9 01       	movw	r24, r18
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	08 95       	ret

00003828 <fprintf>:
    3828:	a0 e0       	ldi	r26, 0x00	; 0
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	ea e1       	ldi	r30, 0x1A	; 26
    382e:	fc e1       	ldi	r31, 0x1C	; 28
    3830:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x20>
    3834:	9e 01       	movw	r18, r28
    3836:	27 5f       	subi	r18, 0xF7	; 247
    3838:	3f 4f       	sbci	r19, 0xFF	; 255
    383a:	8d 81       	ldd	r24, Y+5	; 0x05
    383c:	9e 81       	ldd	r25, Y+6	; 0x06
    383e:	6f 81       	ldd	r22, Y+7	; 0x07
    3840:	78 85       	ldd	r23, Y+8	; 0x08
    3842:	a9 01       	movw	r20, r18
    3844:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <vfprintf>
    3848:	20 96       	adiw	r28, 0x00	; 0
    384a:	e2 e0       	ldi	r30, 0x02	; 2
    384c:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x20>

00003850 <fputc>:
    3850:	0f 93       	push	r16
    3852:	1f 93       	push	r17
    3854:	cf 93       	push	r28
    3856:	df 93       	push	r29
    3858:	8c 01       	movw	r16, r24
    385a:	eb 01       	movw	r28, r22
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	81 ff       	sbrs	r24, 1
    3860:	1b c0       	rjmp	.+54     	; 0x3898 <fputc+0x48>
    3862:	82 ff       	sbrs	r24, 2
    3864:	0d c0       	rjmp	.+26     	; 0x3880 <fputc+0x30>
    3866:	2e 81       	ldd	r18, Y+6	; 0x06
    3868:	3f 81       	ldd	r19, Y+7	; 0x07
    386a:	8c 81       	ldd	r24, Y+4	; 0x04
    386c:	9d 81       	ldd	r25, Y+5	; 0x05
    386e:	28 17       	cp	r18, r24
    3870:	39 07       	cpc	r19, r25
    3872:	64 f4       	brge	.+24     	; 0x388c <fputc+0x3c>
    3874:	e8 81       	ld	r30, Y
    3876:	f9 81       	ldd	r31, Y+1	; 0x01
    3878:	01 93       	st	Z+, r16
    387a:	f9 83       	std	Y+1, r31	; 0x01
    387c:	e8 83       	st	Y, r30
    387e:	06 c0       	rjmp	.+12     	; 0x388c <fputc+0x3c>
    3880:	e8 85       	ldd	r30, Y+8	; 0x08
    3882:	f9 85       	ldd	r31, Y+9	; 0x09
    3884:	80 2f       	mov	r24, r16
    3886:	09 95       	icall
    3888:	89 2b       	or	r24, r25
    388a:	31 f4       	brne	.+12     	; 0x3898 <fputc+0x48>
    388c:	8e 81       	ldd	r24, Y+6	; 0x06
    388e:	9f 81       	ldd	r25, Y+7	; 0x07
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	9f 83       	std	Y+7, r25	; 0x07
    3894:	8e 83       	std	Y+6, r24	; 0x06
    3896:	02 c0       	rjmp	.+4      	; 0x389c <fputc+0x4c>
    3898:	0f ef       	ldi	r16, 0xFF	; 255
    389a:	1f ef       	ldi	r17, 0xFF	; 255
    389c:	c8 01       	movw	r24, r16
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	08 95       	ret

000038a8 <fputs>:
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	0f 93       	push	r16
    38ae:	1f 93       	push	r17
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	7c 01       	movw	r14, r24
    38b6:	8b 01       	movw	r16, r22
    38b8:	db 01       	movw	r26, r22
    38ba:	13 96       	adiw	r26, 0x03	; 3
    38bc:	8c 91       	ld	r24, X
    38be:	81 fd       	sbrc	r24, 1
    38c0:	03 c0       	rjmp	.+6      	; 0x38c8 <fputs+0x20>
    38c2:	cf ef       	ldi	r28, 0xFF	; 255
    38c4:	df ef       	ldi	r29, 0xFF	; 255
    38c6:	13 c0       	rjmp	.+38     	; 0x38ee <fputs+0x46>
    38c8:	c0 e0       	ldi	r28, 0x00	; 0
    38ca:	d0 e0       	ldi	r29, 0x00	; 0
    38cc:	0b c0       	rjmp	.+22     	; 0x38e4 <fputs+0x3c>
    38ce:	d8 01       	movw	r26, r16
    38d0:	18 96       	adiw	r26, 0x08	; 8
    38d2:	ed 91       	ld	r30, X+
    38d4:	fc 91       	ld	r31, X
    38d6:	19 97       	sbiw	r26, 0x09	; 9
    38d8:	b8 01       	movw	r22, r16
    38da:	09 95       	icall
    38dc:	89 2b       	or	r24, r25
    38de:	11 f0       	breq	.+4      	; 0x38e4 <fputs+0x3c>
    38e0:	cf ef       	ldi	r28, 0xFF	; 255
    38e2:	df ef       	ldi	r29, 0xFF	; 255
    38e4:	f7 01       	movw	r30, r14
    38e6:	81 91       	ld	r24, Z+
    38e8:	7f 01       	movw	r14, r30
    38ea:	88 23       	and	r24, r24
    38ec:	81 f7       	brne	.-32     	; 0x38ce <fputs+0x26>
    38ee:	ce 01       	movw	r24, r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	e6 e0       	ldi	r30, 0x06	; 6
    38f6:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__+0x18>

000038fa <fscanf>:
    38fa:	a0 e0       	ldi	r26, 0x00	; 0
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	e3 e8       	ldi	r30, 0x83	; 131
    3900:	fc e1       	ldi	r31, 0x1C	; 28
    3902:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__prologue_saves__+0x20>
    3906:	9e 01       	movw	r18, r28
    3908:	27 5f       	subi	r18, 0xF7	; 247
    390a:	3f 4f       	sbci	r19, 0xFF	; 255
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	9e 81       	ldd	r25, Y+6	; 0x06
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	a9 01       	movw	r20, r18
    3916:	0e 94 4f 18 	call	0x309e	; 0x309e <vfscanf>
    391a:	20 96       	adiw	r28, 0x00	; 0
    391c:	e2 e0       	ldi	r30, 0x02	; 2
    391e:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__epilogue_restores__+0x20>

00003922 <sprintf>:
    3922:	ae e0       	ldi	r26, 0x0E	; 14
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	e7 e9       	ldi	r30, 0x97	; 151
    3928:	fc e1       	ldi	r31, 0x1C	; 28
    392a:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__prologue_saves__+0x1c>
    392e:	0d 89       	ldd	r16, Y+21	; 0x15
    3930:	1e 89       	ldd	r17, Y+22	; 0x16
    3932:	86 e0       	ldi	r24, 0x06	; 6
    3934:	8c 83       	std	Y+4, r24	; 0x04
    3936:	1a 83       	std	Y+2, r17	; 0x02
    3938:	09 83       	std	Y+1, r16	; 0x01
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	9f e7       	ldi	r25, 0x7F	; 127
    393e:	9e 83       	std	Y+6, r25	; 0x06
    3940:	8d 83       	std	Y+5, r24	; 0x05
    3942:	9e 01       	movw	r18, r28
    3944:	27 5e       	subi	r18, 0xE7	; 231
    3946:	3f 4f       	sbci	r19, 0xFF	; 255
    3948:	ce 01       	movw	r24, r28
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	6f 89       	ldd	r22, Y+23	; 0x17
    394e:	78 8d       	ldd	r23, Y+24	; 0x18
    3950:	a9 01       	movw	r20, r18
    3952:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <vfprintf>
    3956:	2f 81       	ldd	r18, Y+7	; 0x07
    3958:	38 85       	ldd	r19, Y+8	; 0x08
    395a:	02 0f       	add	r16, r18
    395c:	13 1f       	adc	r17, r19
    395e:	f8 01       	movw	r30, r16
    3960:	10 82       	st	Z, r1
    3962:	2e 96       	adiw	r28, 0x0e	; 14
    3964:	e4 e0       	ldi	r30, 0x04	; 4
    3966:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__epilogue_restores__+0x1c>

0000396a <ungetc>:
    396a:	9c 01       	movw	r18, r24
    396c:	fb 01       	movw	r30, r22
    396e:	83 81       	ldd	r24, Z+3	; 0x03
    3970:	80 ff       	sbrs	r24, 0
    3972:	11 c0       	rjmp	.+34     	; 0x3996 <ungetc+0x2c>
    3974:	86 fd       	sbrc	r24, 6
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <ungetc+0x2c>
    3978:	9f ef       	ldi	r25, 0xFF	; 255
    397a:	2f 3f       	cpi	r18, 0xFF	; 255
    397c:	39 07       	cpc	r19, r25
    397e:	59 f0       	breq	.+22     	; 0x3996 <ungetc+0x2c>
    3980:	22 83       	std	Z+2, r18	; 0x02
    3982:	80 64       	ori	r24, 0x40	; 64
    3984:	8f 7d       	andi	r24, 0xDF	; 223
    3986:	83 83       	std	Z+3, r24	; 0x03
    3988:	86 81       	ldd	r24, Z+6	; 0x06
    398a:	97 81       	ldd	r25, Z+7	; 0x07
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	97 83       	std	Z+7, r25	; 0x07
    3990:	86 83       	std	Z+6, r24	; 0x06
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	02 c0       	rjmp	.+4      	; 0x399a <ungetc+0x30>
    3996:	2f ef       	ldi	r18, 0xFF	; 255
    3998:	3f ef       	ldi	r19, 0xFF	; 255
    399a:	c9 01       	movw	r24, r18
    399c:	08 95       	ret

0000399e <__ultoa_invert>:
    399e:	fa 01       	movw	r30, r20
    39a0:	aa 27       	eor	r26, r26
    39a2:	28 30       	cpi	r18, 0x08	; 8
    39a4:	51 f1       	breq	.+84     	; 0x39fa <__ultoa_invert+0x5c>
    39a6:	20 31       	cpi	r18, 0x10	; 16
    39a8:	81 f1       	breq	.+96     	; 0x3a0a <__ultoa_invert+0x6c>
    39aa:	e8 94       	clt
    39ac:	6f 93       	push	r22
    39ae:	6e 7f       	andi	r22, 0xFE	; 254
    39b0:	6e 5f       	subi	r22, 0xFE	; 254
    39b2:	7f 4f       	sbci	r23, 0xFF	; 255
    39b4:	8f 4f       	sbci	r24, 0xFF	; 255
    39b6:	9f 4f       	sbci	r25, 0xFF	; 255
    39b8:	af 4f       	sbci	r26, 0xFF	; 255
    39ba:	b1 e0       	ldi	r27, 0x01	; 1
    39bc:	3e d0       	rcall	.+124    	; 0x3a3a <__ultoa_invert+0x9c>
    39be:	b4 e0       	ldi	r27, 0x04	; 4
    39c0:	3c d0       	rcall	.+120    	; 0x3a3a <__ultoa_invert+0x9c>
    39c2:	67 0f       	add	r22, r23
    39c4:	78 1f       	adc	r23, r24
    39c6:	89 1f       	adc	r24, r25
    39c8:	9a 1f       	adc	r25, r26
    39ca:	a1 1d       	adc	r26, r1
    39cc:	68 0f       	add	r22, r24
    39ce:	79 1f       	adc	r23, r25
    39d0:	8a 1f       	adc	r24, r26
    39d2:	91 1d       	adc	r25, r1
    39d4:	a1 1d       	adc	r26, r1
    39d6:	6a 0f       	add	r22, r26
    39d8:	71 1d       	adc	r23, r1
    39da:	81 1d       	adc	r24, r1
    39dc:	91 1d       	adc	r25, r1
    39de:	a1 1d       	adc	r26, r1
    39e0:	20 d0       	rcall	.+64     	; 0x3a22 <__ultoa_invert+0x84>
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <__ultoa_invert+0x48>
    39e4:	68 94       	set
    39e6:	3f 91       	pop	r19
    39e8:	2a e0       	ldi	r18, 0x0A	; 10
    39ea:	26 9f       	mul	r18, r22
    39ec:	11 24       	eor	r1, r1
    39ee:	30 19       	sub	r19, r0
    39f0:	30 5d       	subi	r19, 0xD0	; 208
    39f2:	31 93       	st	Z+, r19
    39f4:	de f6       	brtc	.-74     	; 0x39ac <__ultoa_invert+0xe>
    39f6:	cf 01       	movw	r24, r30
    39f8:	08 95       	ret
    39fa:	46 2f       	mov	r20, r22
    39fc:	47 70       	andi	r20, 0x07	; 7
    39fe:	40 5d       	subi	r20, 0xD0	; 208
    3a00:	41 93       	st	Z+, r20
    3a02:	b3 e0       	ldi	r27, 0x03	; 3
    3a04:	0f d0       	rcall	.+30     	; 0x3a24 <__ultoa_invert+0x86>
    3a06:	c9 f7       	brne	.-14     	; 0x39fa <__ultoa_invert+0x5c>
    3a08:	f6 cf       	rjmp	.-20     	; 0x39f6 <__ultoa_invert+0x58>
    3a0a:	46 2f       	mov	r20, r22
    3a0c:	4f 70       	andi	r20, 0x0F	; 15
    3a0e:	40 5d       	subi	r20, 0xD0	; 208
    3a10:	4a 33       	cpi	r20, 0x3A	; 58
    3a12:	18 f0       	brcs	.+6      	; 0x3a1a <__ultoa_invert+0x7c>
    3a14:	49 5d       	subi	r20, 0xD9	; 217
    3a16:	31 fd       	sbrc	r19, 1
    3a18:	40 52       	subi	r20, 0x20	; 32
    3a1a:	41 93       	st	Z+, r20
    3a1c:	02 d0       	rcall	.+4      	; 0x3a22 <__ultoa_invert+0x84>
    3a1e:	a9 f7       	brne	.-22     	; 0x3a0a <__ultoa_invert+0x6c>
    3a20:	ea cf       	rjmp	.-44     	; 0x39f6 <__ultoa_invert+0x58>
    3a22:	b4 e0       	ldi	r27, 0x04	; 4
    3a24:	a6 95       	lsr	r26
    3a26:	97 95       	ror	r25
    3a28:	87 95       	ror	r24
    3a2a:	77 95       	ror	r23
    3a2c:	67 95       	ror	r22
    3a2e:	ba 95       	dec	r27
    3a30:	c9 f7       	brne	.-14     	; 0x3a24 <__ultoa_invert+0x86>
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	61 05       	cpc	r22, r1
    3a36:	71 05       	cpc	r23, r1
    3a38:	08 95       	ret
    3a3a:	9b 01       	movw	r18, r22
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	0a 2e       	mov	r0, r26
    3a40:	06 94       	lsr	r0
    3a42:	57 95       	ror	r21
    3a44:	47 95       	ror	r20
    3a46:	37 95       	ror	r19
    3a48:	27 95       	ror	r18
    3a4a:	ba 95       	dec	r27
    3a4c:	c9 f7       	brne	.-14     	; 0x3a40 <__ultoa_invert+0xa2>
    3a4e:	62 0f       	add	r22, r18
    3a50:	73 1f       	adc	r23, r19
    3a52:	84 1f       	adc	r24, r20
    3a54:	95 1f       	adc	r25, r21
    3a56:	a0 1d       	adc	r26, r0
    3a58:	08 95       	ret

00003a5a <__ctype_isfalse>:
    3a5a:	99 27       	eor	r25, r25
    3a5c:	88 27       	eor	r24, r24

00003a5e <__ctype_istrue>:
    3a5e:	08 95       	ret

00003a60 <_exit>:
    3a60:	f8 94       	cli

00003a62 <__stop_program>:
    3a62:	ff cf       	rjmp	.-2      	; 0x3a62 <__stop_program>
