
SousVide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00002b1c  00002bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800254  00800254  00002d04  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000609  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a83  00000000  00000000  000034ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000181e  00000000  00000000  00006f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000023f0  00000000  00000000  0000878e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  0000ab80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f1  00000000  00000000  0000aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000168b  00000000  00000000  0000b8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_13>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000070 <LcdCustomChar>:
      70:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      80:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      90:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      a0:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d0 e1       	ldi	r29, 0x10	; 16
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	12 e0       	ldi	r17, 0x02	; 2
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	ec e1       	ldi	r30, 0x1C	; 28
      c4:	fb e2       	ldi	r31, 0x2B	; 43
      c6:	02 c0       	rjmp	.+4      	; 0xcc <.do_copy_data_start>

000000c8 <.do_copy_data_loop>:
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0

000000cc <.do_copy_data_start>:
      cc:	a4 35       	cpi	r26, 0x54	; 84
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <.do_copy_data_loop>

000000d2 <__do_clear_bss>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a4 e5       	ldi	r26, 0x54	; 84
      d6:	b2 e0       	ldi	r27, 0x02	; 2
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a1 3d       	cpi	r26, 0xD1	; 209
      de:	b1 07       	cpc	r27, r17
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 0f 0a 	call	0x141e	; 0x141e <main>
      e6:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
      ee:	28 2f       	mov	r18, r24
      f0:	20 7f       	andi	r18, 0xF0	; 240
      f2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
      f4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
      f6:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f8:	2a ef       	ldi	r18, 0xFA	; 250
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     102:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     104:	40 98       	cbi	0x08, 0	; 8
     106:	f9 01       	movw	r30, r18
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	44 e0       	ldi	r20, 0x04	; 4
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	4a 95       	dec	r20
     116:	e1 f7       	brne	.-8      	; 0x110 <LCDsendChar+0x22>
     118:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     11a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     11c:	42 9a       	sbi	0x08, 2	; 8
     11e:	c9 01       	movw	r24, r18
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     124:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     126:	40 98       	cbi	0x08, 0	; 8
     128:	c9 01       	movw	r24, r18
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     12e:	08 95       	ret

00000130 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     130:	28 2f       	mov	r18, r24
     132:	20 7f       	andi	r18, 0xF0	; 240
     134:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     136:	42 9a       	sbi	0x08, 2	; 8
     138:	2a ef       	ldi	r18, 0xFA	; 250
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	31 97       	sbiw	r30, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     142:	42 98       	cbi	0x08, 2	; 8
     144:	f9 01       	movw	r30, r18
     146:	31 97       	sbiw	r30, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	54 e0       	ldi	r21, 0x04	; 4
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	5a 95       	dec	r21
     154:	e1 f7       	brne	.-8      	; 0x14e <LCDsendCommand+0x1e>
     156:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     158:	42 9a       	sbi	0x08, 2	; 8
     15a:	c9 01       	movw	r24, r18
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     160:	42 98       	cbi	0x08, 2	; 8
     162:	c9 01       	movw	r24, r18
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     168:	08 95       	ret

0000016a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     170:	08 95       	ret

00000172 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     178:	08 95       	ret

0000017a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	49 f0       	breq	.+18     	; 0x19a <LCDstring+0x20>
     188:	ec 01       	movw	r28, r24
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	04 c0       	rjmp	.+8      	; 0x196 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     18e:	89 91       	ld	r24, Y+
     190:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     194:	1f 5f       	subi	r17, 0xFF	; 255
     196:	10 17       	cp	r17, r16
     198:	d0 f3       	brcs	.-12     	; 0x18e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	08 95       	ret

000001a4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     1a4:	62 30       	cpi	r22, 0x02	; 2
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <LCDGotoXY+0x10>
     1a8:	63 30       	cpi	r22, 0x03	; 3
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <LCDGotoXY+0x14>
     1ac:	61 30       	cpi	r22, 0x01	; 1
     1ae:	29 f4       	brne	.+10     	; 0x1ba <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	03 c0       	rjmp	.+6      	; 0x1ba <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     1b4:	8c 5e       	subi	r24, 0xEC	; 236
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     1b8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
	
}
     1c0:	08 95       	ret

000001c2 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     1cc:	64 2f       	mov	r22, r20
     1ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     1d6:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     1da:	1f 5f       	subi	r17, 0xFF	; 255
     1dc:	fe 01       	movw	r30, r28
     1de:	e1 0f       	add	r30, r17
     1e0:	f1 1d       	adc	r31, r1
     1e2:	84 91       	lpm	r24, Z+
     1e4:	88 23       	and	r24, r24
     1e6:	b9 f7       	brne	.-18     	; 0x1d6 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
     1ee:	08 95       	ret

000001f0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	7c 01       	movw	r14, r24
     1fe:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     200:	11 0f       	add	r17, r17
     202:	11 0f       	add	r17, r17
     204:	11 0f       	add	r17, r17
     206:	10 64       	ori	r17, 0x40	; 64
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     20c:	f7 01       	movw	r30, r14
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     214:	81 2f       	mov	r24, r17
     216:	8c 0f       	add	r24, r28
     218:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendChar(pcc);
     21c:	80 2f       	mov	r24, r16
     21e:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     222:	21 96       	adiw	r28, 0x01	; 1
     224:	c8 30       	cpi	r28, 0x08	; 8
     226:	d1 05       	cpc	r29, r1
     228:	89 f7       	brne	.-30     	; 0x20c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	86 ea       	ldi	r24, 0xA6	; 166
     240:	9e e0       	ldi	r25, 0x0E	; 14
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     246:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     248:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     24a:	87 b1       	in	r24, 0x07	; 7
     24c:	80 6f       	ori	r24, 0xF0	; 240
     24e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     250:	87 b1       	in	r24, 0x07	; 7
     252:	87 60       	ori	r24, 0x07	; 7
     254:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     256:	80 e3       	ldi	r24, 0x30	; 48
     258:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     25a:	42 9a       	sbi	0x08, 2	; 8
     25c:	2a ef       	ldi	r18, 0xFA	; 250
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	f9 01       	movw	r30, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     266:	42 98       	cbi	0x08, 2	; 8
     268:	f9 01       	movw	r30, r18
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     26e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     270:	42 9a       	sbi	0x08, 2	; 8
     272:	c9 01       	movw	r24, r18
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     278:	42 98       	cbi	0x08, 2	; 8
     27a:	c9 01       	movw	r24, r18
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     280:	80 e2       	ldi	r24, 0x20	; 32
     282:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     284:	42 9a       	sbi	0x08, 2	; 8
     286:	c9 01       	movw	r24, r18
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     28c:	42 98       	cbi	0x08, 2	; 8
     28e:	c9 01       	movw	r24, r18
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     294:	88 e2       	ldi	r24, 0x28	; 40
     296:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
     2a0:	c0 e7       	ldi	r28, 0x70	; 112
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     2a6:	16 2f       	mov	r17, r22
     2a8:	1f 5f       	subi	r17, 0xFF	; 255
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDdefinechar>
     2b0:	28 96       	adiw	r28, 0x08	; 8
     2b2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     2b4:	18 30       	cpi	r17, 0x08	; 8
     2b6:	b9 f7       	brne	.-18     	; 0x2a6 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	08 95       	ret

000002c0 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	08 2f       	mov	r16, r24
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     2ca:	8e e1       	ldi	r24, 0x1E	; 30
     2cc:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	10 17       	cp	r17, r16
     2d4:	d0 f3       	brcs	.-12     	; 0x2ca <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	08 95       	ret

000002dc <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	08 2f       	mov	r16, r24
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     2e6:	88 e1       	ldi	r24, 0x18	; 24
     2e8:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     2ec:	1f 5f       	subi	r17, 0xFF	; 255
     2ee:	10 17       	cp	r17, r16
     2f0:	d0 f3       	brcs	.-12     	; 0x2e6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	08 95       	ret

000002f8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     2f8:	8e e0       	ldi	r24, 0x0E	; 14
     2fa:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     2fe:	08 95       	ret

00000300 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     306:	08 95       	ret

00000308 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     308:	8c e0       	ldi	r24, 0x0C	; 12
     30a:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     30e:	08 95       	ret

00000310 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     310:	88 e0       	ldi	r24, 0x08	; 8
     312:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     316:	08 95       	ret

00000318 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     318:	8c e0       	ldi	r24, 0x0C	; 12
     31a:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     31e:	08 95       	ret

00000320 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	08 2f       	mov	r16, r24
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	04 c0       	rjmp	.+8      	; 0x332 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     330:	1f 5f       	subi	r17, 0xFF	; 255
     332:	10 17       	cp	r17, r16
     334:	d0 f3       	brcs	.-12     	; 0x32a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret

0000033c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	08 2f       	mov	r16, r24
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	04 c0       	rjmp	.+8      	; 0x34e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     346:	84 e1       	ldi	r24, 0x14	; 20
     348:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     34c:	1f 5f       	subi	r17, 0xFF	; 255
     34e:	10 17       	cp	r17, r16
     350:	d0 f3       	brcs	.-12     	; 0x346 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     368:	96 e0       	ldi	r25, 0x06	; 6
     36a:	89 9f       	mul	r24, r25
     36c:	c0 01       	movw	r24, r0
     36e:	11 24       	eor	r1, r1
     370:	24 2f       	mov	r18, r20
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	ac 01       	movw	r20, r24
     376:	42 9f       	mul	r20, r18
     378:	c0 01       	movw	r24, r0
     37a:	43 9f       	mul	r20, r19
     37c:	90 0d       	add	r25, r0
     37e:	52 9f       	mul	r21, r18
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__divmodhi4>
     38a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     38c:	cb 01       	movw	r24, r22
     38e:	66 e0       	ldi	r22, 0x06	; 6
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__udivmodhi4>
     396:	e8 2e       	mov	r14, r24
     398:	ff 24       	eor	r15, r15
     39a:	00 e0       	ldi	r16, 0x00	; 0
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	12 c0       	rjmp	.+36     	; 0x3c4 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     3a0:	c8 01       	movw	r24, r16
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	c8 17       	cp	r28, r24
     3a6:	d9 07       	cpc	r29, r25
     3a8:	10 f0       	brcs	.+4      	; 0x3ae <LCDprogressBar+0x56>
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     3ae:	c0 17       	cp	r28, r16
     3b0:	d1 07       	cpc	r29, r17
     3b2:	10 f0       	brcs	.+4      	; 0x3b8 <LCDprogressBar+0x60>
     3b4:	8e 2d       	mov	r24, r14
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <LCDprogressBar+0x62>
     3b8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     3ba:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     3be:	f3 94       	inc	r15
     3c0:	0a 5f       	subi	r16, 0xFA	; 250
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	fd 14       	cp	r15, r13
     3c6:	60 f3       	brcs	.-40     	; 0x3a0 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	08 95       	ret

000003d8 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 92       	push	r2
     3e4:	3f 92       	push	r3
     3e6:	4f 92       	push	r4
     3e8:	5f 92       	push	r5
     3ea:	6f 92       	push	r6
     3ec:	7f 92       	push	r7
     3ee:	8f 92       	push	r8
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     41e:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     422:	50 90 82 02 	lds	r5, 0x0282
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     426:	b0 9b       	sbis	0x16, 0	; 22
     428:	14 c0       	rjmp	.+40     	; 0x452 <__vector_13+0x7a>
    ++kernel.cycles;
     42a:	80 91 c4 02 	lds	r24, 0x02C4
     42e:	90 91 c5 02 	lds	r25, 0x02C5
     432:	a0 91 c6 02 	lds	r26, 0x02C6
     436:	b0 91 c7 02 	lds	r27, 0x02C7
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
     440:	80 93 c4 02 	sts	0x02C4, r24
     444:	90 93 c5 02 	sts	0x02C5, r25
     448:	a0 93 c6 02 	sts	0x02C6, r26
     44c:	b0 93 c7 02 	sts	0x02C7, r27
    TIFR1 |= (1<<TOV1) ;
     450:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     452:	80 91 84 00 	lds	r24, 0x0084
     456:	90 91 85 00 	lds	r25, 0x0085
     45a:	3c 01       	movw	r6, r24
     45c:	88 24       	eor	r8, r8
     45e:	99 24       	eor	r9, r9
     460:	80 91 c4 02 	lds	r24, 0x02C4
     464:	90 91 c5 02 	lds	r25, 0x02C5
     468:	a0 91 c6 02 	lds	r26, 0x02C6
     46c:	b0 91 c7 02 	lds	r27, 0x02C7
     470:	dc 01       	movw	r26, r24
     472:	99 27       	eor	r25, r25
     474:	88 27       	eor	r24, r24
     476:	68 0e       	add	r6, r24
     478:	79 1e       	adc	r7, r25
     47a:	8a 1e       	adc	r8, r26
     47c:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     47e:	40 90 81 02 	lds	r4, 0x0281
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	ff ef       	ldi	r31, 0xFF	; 255
     488:	af 2e       	mov	r10, r31
     48a:	ff ef       	ldi	r31, 0xFF	; 255
     48c:	bf 2e       	mov	r11, r31
     48e:	ff ef       	ldi	r31, 0xFF	; 255
     490:	cf 2e       	mov	r12, r31
     492:	ff e7       	ldi	r31, 0x7F	; 127
     494:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     496:	eb e0       	ldi	r30, 0x0B	; 11
     498:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     49a:	33 24       	eor	r3, r3
     49c:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     49e:	cb e0       	ldi	r28, 0x0B	; 11
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
     4a2:	43 c0       	rjmp	.+134    	; 0x52a <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     4a4:	62 9d       	mul	r22, r2
     4a6:	d0 01       	movw	r26, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	ad 57       	subi	r26, 0x7D	; 125
     4ac:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     4ae:	1a 96       	adiw	r26, 0x0a	; 10
     4b0:	8c 91       	ld	r24, X
     4b2:	1a 97       	sbiw	r26, 0x0a	; 10
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	a1 f4       	brne	.+40     	; 0x4e0 <__vector_13+0x108>
      if (t->release <= now) {
     4b8:	12 96       	adiw	r26, 0x02	; 2
     4ba:	ed 90       	ld	r14, X+
     4bc:	fd 90       	ld	r15, X+
     4be:	0d 91       	ld	r16, X+
     4c0:	1c 91       	ld	r17, X
     4c2:	15 97       	sbiw	r26, 0x05	; 5
     4c4:	6e 14       	cp	r6, r14
     4c6:	7f 04       	cpc	r7, r15
     4c8:	80 06       	cpc	r8, r16
     4ca:	91 06       	cpc	r9, r17
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__vector_13+0xfe>
	t->state = READYQ;
     4ce:	1a 96       	adiw	r26, 0x0a	; 10
     4d0:	3c 92       	st	X, r3
     4d2:	1a 97       	sbiw	r26, 0x0a	; 10
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     4d6:	ea 14       	cp	r14, r10
     4d8:	fb 04       	cpc	r15, r11
     4da:	0c 05       	cpc	r16, r12
     4dc:	1d 05       	cpc	r17, r13
     4de:	10 f0       	brcs	.+4      	; 0x4e4 <__vector_13+0x10c>
     4e0:	86 01       	movw	r16, r12
     4e2:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     4e4:	1a 96       	adiw	r26, 0x0a	; 10
     4e6:	8c 91       	ld	r24, X
     4e8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	d9 f4       	brne	.+54     	; 0x524 <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     4ee:	87 2f       	mov	r24, r23
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	8c 9f       	mul	r24, r28
     4f4:	f0 01       	movw	r30, r0
     4f6:	8d 9f       	mul	r24, r29
     4f8:	f0 0d       	add	r31, r0
     4fa:	9c 9f       	mul	r25, r28
     4fc:	f0 0d       	add	r31, r0
     4fe:	11 24       	eor	r1, r1
     500:	ef 57       	subi	r30, 0x7F	; 127
     502:	fd 4f       	sbci	r31, 0xFD	; 253
     504:	16 96       	adiw	r26, 0x06	; 6
     506:	2d 91       	ld	r18, X+
     508:	3d 91       	ld	r19, X+
     50a:	4d 91       	ld	r20, X+
     50c:	5c 91       	ld	r21, X
     50e:	19 97       	sbiw	r26, 0x09	; 9
     510:	80 85       	ldd	r24, Z+8	; 0x08
     512:	91 85       	ldd	r25, Z+9	; 0x09
     514:	a2 85       	ldd	r26, Z+10	; 0x0a
     516:	b3 85       	ldd	r27, Z+11	; 0x0b
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	4a 07       	cpc	r20, r26
     51e:	5b 07       	cpc	r21, r27
     520:	08 f4       	brcc	.+2      	; 0x524 <__vector_13+0x14c>
     522:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	57 01       	movw	r10, r14
     528:	68 01       	movw	r12, r16
     52a:	46 16       	cp	r4, r22
     52c:	08 f0       	brcs	.+2      	; 0x530 <__vector_13+0x158>
     52e:	ba cf       	rjmp	.-140    	; 0x4a4 <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     530:	75 15       	cp	r23, r5
     532:	b1 f0       	breq	.+44     	; 0x560 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     534:	eb e0       	ldi	r30, 0x0B	; 11
     536:	5e 9e       	mul	r5, r30
     538:	d0 01       	movw	r26, r0
     53a:	11 24       	eor	r1, r1
     53c:	ad 57       	subi	r26, 0x7D	; 125
     53e:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     540:	8d b7       	in	r24, 0x3d	; 61
     542:	8c 93       	st	X, r24
    t->sph = SPH;
     544:	8e b7       	in	r24, 0x3e	; 62
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     54a:	7e 9f       	mul	r23, r30
     54c:	f0 01       	movw	r30, r0
     54e:	11 24       	eor	r1, r1
     550:	ed 57       	subi	r30, 0x7D	; 125
     552:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     558:	80 81       	ld	r24, Z
     55a:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     55c:	70 93 82 02 	sts	0x0282, r23

  }

  kernel.nextHit = nextHit;  
     560:	a0 92 c8 02 	sts	0x02C8, r10
     564:	b0 92 c9 02 	sts	0x02C9, r11
     568:	c0 92 ca 02 	sts	0x02CA, r12
     56c:	d0 92 cb 02 	sts	0x02CB, r13

  now = (kernel.cycles << 16) + TCNT1;
     570:	20 91 84 00 	lds	r18, 0x0084
     574:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	80 91 c4 02 	lds	r24, 0x02C4
     580:	90 91 c5 02 	lds	r25, 0x02C5
     584:	a0 91 c6 02 	lds	r26, 0x02C6
     588:	b0 91 c7 02 	lds	r27, 0x02C7
     58c:	dc 01       	movw	r26, r24
     58e:	99 27       	eor	r25, r25
     590:	88 27       	eor	r24, r24
     592:	28 0f       	add	r18, r24
     594:	39 1f       	adc	r19, r25
     596:	4a 1f       	adc	r20, r26
     598:	5b 1f       	adc	r21, r27
     59a:	d6 01       	movw	r26, r12
     59c:	c5 01       	movw	r24, r10
     59e:	82 1b       	sub	r24, r18
     5a0:	93 0b       	sbc	r25, r19
     5a2:	a4 0b       	sbc	r26, r20
     5a4:	b5 0b       	sbc	r27, r21
     5a6:	9c 01       	movw	r18, r24
     5a8:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     5aa:	84 30       	cpi	r24, 0x04	; 4
     5ac:	91 05       	cpc	r25, r1
     5ae:	a1 05       	cpc	r26, r1
     5b0:	b1 05       	cpc	r27, r1
     5b2:	24 f4       	brge	.+8      	; 0x5bc <__vector_13+0x1e4>
     5b4:	24 e0       	ldi	r18, 0x04	; 4
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     5bc:	80 91 84 00 	lds	r24, 0x0084
     5c0:	90 91 85 00 	lds	r25, 0x0085
     5c4:	a0 e0       	ldi	r26, 0x00	; 0
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	a4 1f       	adc	r26, r20
     5ce:	b5 1f       	adc	r27, r21
     5d0:	80 50       	subi	r24, 0x00	; 0
     5d2:	90 40       	sbci	r25, 0x00	; 0
     5d4:	a1 40       	sbci	r26, 0x01	; 1
     5d6:	b0 40       	sbci	r27, 0x00	; 0
     5d8:	38 f4       	brcc	.+14     	; 0x5e8 <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     5da:	80 91 84 00 	lds	r24, 0x0084
     5de:	90 91 85 00 	lds	r25, 0x0085
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
     5e6:	0e c0       	rjmp	.+28     	; 0x604 <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     5e8:	80 91 84 00 	lds	r24, 0x0084
     5ec:	90 91 85 00 	lds	r25, 0x0085
     5f0:	8c 5f       	subi	r24, 0xFC	; 252
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	28 f4       	brcc	.+10     	; 0x600 <__vector_13+0x228>
    OCR1A = 0x0000;
     5f6:	10 92 89 00 	sts	0x0089, r1
     5fa:	10 92 88 00 	sts	0x0088, r1
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <__vector_13+0x234>
  } else {
    OCR1A = 4;
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	90 93 89 00 	sts	0x0089, r25
     608:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	80 93 6f 00 	sts	0x006F, r24
}
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	5f 90       	pop	r5
     648:	4f 90       	pop	r4
     64a:	3f 90       	pop	r3
     64c:	2f 90       	pop	r2
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     658:	10 92 85 00 	sts	0x0085, r1
     65c:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     660:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     664:	25 e0       	ldi	r18, 0x05	; 5
     666:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     670:	2f ef       	ldi	r18, 0xFF	; 255
     672:	30 e1       	ldi	r19, 0x10	; 16
     674:	28 1b       	sub	r18, r24
     676:	39 0b       	sbc	r19, r25
     678:	30 93 c3 02 	sts	0x02C3, r19
     67c:	20 93 c2 02 	sts	0x02C2, r18
  kernel.nbrOfTasks = 0;
     680:	10 92 81 02 	sts	0x0281, r1
  kernel.running = 0;
     684:	10 92 82 02 	sts	0x0282, r1

  kernel.cycles = 0x0000;
     688:	10 92 c4 02 	sts	0x02C4, r1
     68c:	10 92 c5 02 	sts	0x02C5, r1
     690:	10 92 c6 02 	sts	0x02C6, r1
     694:	10 92 c7 02 	sts	0x02C7, r1
  kernel.nextHit = 0x7FFFFFFF;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f ef       	ldi	r25, 0xFF	; 255
     69c:	af ef       	ldi	r26, 0xFF	; 255
     69e:	bf e7       	ldi	r27, 0x7F	; 127
     6a0:	80 93 c8 02 	sts	0x02C8, r24
     6a4:	90 93 c9 02 	sts	0x02C9, r25
     6a8:	a0 93 ca 02 	sts	0x02CA, r26
     6ac:	b0 93 cb 02 	sts	0x02CB, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     6b0:	80 93 89 02 	sts	0x0289, r24
     6b4:	90 93 8a 02 	sts	0x028A, r25
     6b8:	a0 93 8b 02 	sts	0x028B, r26
     6bc:	b0 93 8c 02 	sts	0x028C, r27
  kernel.tasks[0].release = 0x00000000;
     6c0:	10 92 85 02 	sts	0x0285, r1
     6c4:	10 92 86 02 	sts	0x0286, r1
     6c8:	10 92 87 02 	sts	0x0287, r1
     6cc:	10 92 88 02 	sts	0x0288, r1

  sei(); /* set enabled interrupts */
     6d0:	78 94       	sei
}
     6d2:	08 95       	ret

000006d4 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	49 01       	movw	r8, r18
     6ee:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     6f0:	f8 94       	cli

  ++kernel.nbrOfTasks;
     6f2:	20 91 81 02 	lds	r18, 0x0281
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	20 93 81 02 	sts	0x0281, r18

  sp = kernel.memptr;
     6fc:	c0 91 c2 02 	lds	r28, 0x02C2
     700:	d0 91 c3 02 	lds	r29, 0x02C3
  kernel.memptr -= stacksize;  // decrease free mem ptr
     704:	9e 01       	movw	r18, r28
     706:	26 1b       	sub	r18, r22
     708:	37 0b       	sbc	r19, r23
     70a:	30 93 c3 02 	sts	0x02C3, r19
     70e:	20 93 c2 02 	sts	0x02C2, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     712:	88 83       	st	Y, r24
     714:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     716:	92 93       	st	-Z, r25
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     71c:	ce 01       	movw	r24, r28
     71e:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     720:	1c 92       	st	X, r1
     722:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     724:	a8 17       	cp	r26, r24
     726:	b9 07       	cpc	r27, r25
     728:	d9 f7       	brne	.-10     	; 0x720 <trtCreateTask+0x4c>
     72a:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     72c:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     72e:	d2 92       	st	-Z, r13
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     734:	9e 01       	movw	r18, r28
     736:	23 52       	subi	r18, 0x23	; 35
     738:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     73a:	1c 92       	st	X, r1
     73c:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     73e:	a2 17       	cp	r26, r18
     740:	b3 07       	cpc	r27, r19
     742:	d9 f7       	brne	.-10     	; 0x73a <trtCreateTask+0x66>
     744:	9f 01       	movw	r18, r30
     746:	26 50       	subi	r18, 0x06	; 6
     748:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     74a:	e0 91 81 02 	lds	r30, 0x0281
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	e8 9f       	mul	r30, r24
     752:	f0 01       	movw	r30, r0
     754:	11 24       	eor	r1, r1
     756:	ed 57       	subi	r30, 0x7D	; 125
     758:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     75a:	82 82       	std	Z+2, r8	; 0x02
     75c:	93 82       	std	Z+3, r9	; 0x03
     75e:	a4 82       	std	Z+4, r10	; 0x04
     760:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     762:	e6 82       	std	Z+6, r14	; 0x06
     764:	f7 82       	std	Z+7, r15	; 0x07
     766:	00 87       	std	Z+8, r16	; 0x08
     768:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     76e:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     770:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     772:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>

}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	08 95       	ret

00000790 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     790:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     792:	e1 e8       	ldi	r30, 0x81	; 129
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	e8 0f       	add	r30, r24
     798:	f1 1d       	adc	r31, r1
     79a:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     79c:	78 94       	sei
}
     79e:	08 95       	ret

000007a0 <trtWait>:

void trtWait(uint8_t semnbr) {
     7a0:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     7a2:	20 91 82 02 	lds	r18, 0x0282

  cli(); // disable interrupts
     7a6:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7a8:	e8 2f       	mov	r30, r24
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e7 54       	subi	r30, 0x47	; 71
     7ae:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     7b0:	80 81       	ld	r24, Z
     7b2:	88 23       	and	r24, r24
     7b4:	19 f0       	breq	.+6      	; 0x7bc <trtWait+0x1c>
    (*s)--;
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	80 83       	st	Z, r24
     7ba:	10 c0       	rjmp	.+32     	; 0x7dc <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	8b e0       	ldi	r24, 0x0B	; 11
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	28 9f       	mul	r18, r24
     7c4:	f0 01       	movw	r30, r0
     7c6:	29 9f       	mul	r18, r25
     7c8:	f0 0d       	add	r31, r0
     7ca:	38 9f       	mul	r19, r24
     7cc:	f0 0d       	add	r31, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	ed 57       	subi	r30, 0x7D	; 125
     7d2:	fd 4f       	sbci	r31, 0xFD	; 253
     7d4:	4e 5f       	subi	r20, 0xFE	; 254
     7d6:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     7d8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
  }

  sei(); // reenable interrupts
     7dc:	78 94       	sei
}
     7de:	08 95       	ret

000007e0 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     7e8:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     7ea:	00 91 81 02 	lds	r16, 0x0281
     7ee:	e1 e0       	ldi	r30, 0x01	; 1
     7f0:	4f ef       	ldi	r20, 0xFF	; 255
     7f2:	5f ef       	ldi	r21, 0xFF	; 255
     7f4:	6f ef       	ldi	r22, 0xFF	; 255
     7f6:	7f ef       	ldi	r23, 0xFF	; 255
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     7fa:	8b e0       	ldi	r24, 0x0B	; 11
     7fc:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     7fe:	21 2f       	mov	r18, r17
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	2e 5f       	subi	r18, 0xFE	; 254
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	1e c0       	rjmp	.+60     	; 0x844 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     808:	ef 9d       	mul	r30, r15
     80a:	d0 01       	movw	r26, r0
     80c:	11 24       	eor	r1, r1
     80e:	ad 57       	subi	r26, 0x7D	; 125
     810:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     812:	1a 96       	adiw	r26, 0x0a	; 10
     814:	8c 91       	ld	r24, X
     816:	1a 97       	sbiw	r26, 0x0a	; 10
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	82 17       	cp	r24, r18
     81c:	93 07       	cpc	r25, r19
     81e:	69 f4       	brne	.+26     	; 0x83a <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     820:	16 96       	adiw	r26, 0x06	; 6
     822:	8d 91       	ld	r24, X+
     824:	9d 91       	ld	r25, X+
     826:	0d 90       	ld	r0, X+
     828:	bc 91       	ld	r27, X
     82a:	a0 2d       	mov	r26, r0
     82c:	48 17       	cp	r20, r24
     82e:	59 07       	cpc	r21, r25
     830:	6a 07       	cpc	r22, r26
     832:	7b 07       	cpc	r23, r27
     834:	10 f0       	brcs	.+4      	; 0x83a <trtSignal+0x5a>
     836:	fe 2f       	mov	r31, r30
     838:	02 c0       	rjmp	.+4      	; 0x83e <trtSignal+0x5e>
     83a:	db 01       	movw	r26, r22
     83c:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     83e:	ef 5f       	subi	r30, 0xFF	; 255
     840:	ac 01       	movw	r20, r24
     842:	bd 01       	movw	r22, r26
     844:	0e 17       	cp	r16, r30
     846:	00 f7       	brcc	.-64     	; 0x808 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     848:	ff 23       	and	r31, r31
     84a:	41 f4       	brne	.+16     	; 0x85c <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     84c:	e1 2f       	mov	r30, r17
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	e0 58       	subi	r30, 0x80	; 128
     852:	fd 4f       	sbci	r31, 0xFD	; 253
     854:	81 ad       	ldd	r24, Z+57	; 0x39
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	81 af       	std	Z+57, r24	; 0x39
     85a:	11 c0       	rjmp	.+34     	; 0x87e <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     85c:	2f 2f       	mov	r18, r31
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	8b e0       	ldi	r24, 0x0B	; 11
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	28 9f       	mul	r18, r24
     866:	f0 01       	movw	r30, r0
     868:	29 9f       	mul	r18, r25
     86a:	f0 0d       	add	r31, r0
     86c:	38 9f       	mul	r19, r24
     86e:	f0 0d       	add	r31, r0
     870:	11 24       	eor	r1, r1
     872:	ef 57       	subi	r30, 0x7F	; 127
     874:	fd 4f       	sbci	r31, 0xFD	; 253
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     87a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
  }

  sei(); // reenable interrupts
     87e:	78 94       	sei
}
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	08 95       	ret

00000888 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     888:	20 91 84 00 	lds	r18, 0x0084
     88c:	30 91 85 00 	lds	r19, 0x0085
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	80 91 c4 02 	lds	r24, 0x02C4
     898:	90 91 c5 02 	lds	r25, 0x02C5
     89c:	a0 91 c6 02 	lds	r26, 0x02C6
     8a0:	b0 91 c7 02 	lds	r27, 0x02C7
     8a4:	dc 01       	movw	r26, r24
     8a6:	99 27       	eor	r25, r25
     8a8:	88 27       	eor	r24, r24
     8aa:	28 0f       	add	r18, r24
     8ac:	39 1f       	adc	r19, r25
     8ae:	4a 1f       	adc	r20, r26
     8b0:	5b 1f       	adc	r21, r27
}
     8b2:	b9 01       	movw	r22, r18
     8b4:	ca 01       	movw	r24, r20
     8b6:	08 95       	ret

000008b8 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     8b8:	e0 91 82 02 	lds	r30, 0x0282
     8bc:	ab e0       	ldi	r26, 0x0B	; 11
     8be:	ea 9f       	mul	r30, r26
     8c0:	f0 01       	movw	r30, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	ed 57       	subi	r30, 0x7D	; 125
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     8c8:	f8 94       	cli

  t->state = TIMEQ;
     8ca:	a2 e0       	ldi	r26, 0x02	; 2
     8cc:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     8ce:	62 83       	std	Z+2, r22	; 0x02
     8d0:	73 83       	std	Z+3, r23	; 0x03
     8d2:	84 83       	std	Z+4, r24	; 0x04
     8d4:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     8d6:	26 83       	std	Z+6, r18	; 0x06
     8d8:	37 83       	std	Z+7, r19	; 0x07
     8da:	40 87       	std	Z+8, r20	; 0x08
     8dc:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     8de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
}
     8e2:	08 95       	ret

000008e4 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     8e4:	80 91 82 02 	lds	r24, 0x0282
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2b e0       	ldi	r18, 0x0B	; 11
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	82 9f       	mul	r24, r18
     8f0:	f0 01       	movw	r30, r0
     8f2:	83 9f       	mul	r24, r19
     8f4:	f0 0d       	add	r31, r0
     8f6:	92 9f       	mul	r25, r18
     8f8:	f0 0d       	add	r31, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	ef 57       	subi	r30, 0x7F	; 127
     8fe:	fd 4f       	sbci	r31, 0xFD	; 253
     900:	df 01       	movw	r26, r30
     902:	14 96       	adiw	r26, 0x04	; 4
     904:	64 81       	ldd	r22, Z+4	; 0x04
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	7c 91       	ld	r23, X
     90a:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     90c:	12 96       	adiw	r26, 0x02	; 2
     90e:	8c 91       	ld	r24, X
     910:	12 97       	sbiw	r26, 0x02	; 2
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	9c 91       	ld	r25, X
     916:	08 95       	ret

00000918 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     918:	80 91 82 02 	lds	r24, 0x0282
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2b e0       	ldi	r18, 0x0B	; 11
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	82 9f       	mul	r24, r18
     924:	f0 01       	movw	r30, r0
     926:	83 9f       	mul	r24, r19
     928:	f0 0d       	add	r31, r0
     92a:	92 9f       	mul	r25, r18
     92c:	f0 0d       	add	r31, r0
     92e:	11 24       	eor	r1, r1
     930:	ef 57       	subi	r30, 0x7F	; 127
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	df 01       	movw	r26, r30
     936:	18 96       	adiw	r26, 0x08	; 8
     938:	60 85       	ldd	r22, Z+8	; 0x08
     93a:	11 96       	adiw	r26, 0x01	; 1
     93c:	7c 91       	ld	r23, X
     93e:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     940:	12 96       	adiw	r26, 0x02	; 2
     942:	8c 91       	ld	r24, X
     944:	12 97       	sbiw	r26, 0x02	; 2
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	9c 91       	ld	r25, X
     94a:	08 95       	ret

0000094c <trtTerminate>:

void trtTerminate(void) {

  cli();
     94c:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     94e:	80 91 82 02 	lds	r24, 0x0282
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2b e0       	ldi	r18, 0x0B	; 11
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	82 9f       	mul	r24, r18
     95a:	f0 01       	movw	r30, r0
     95c:	83 9f       	mul	r24, r19
     95e:	f0 0d       	add	r31, r0
     960:	92 9f       	mul	r25, r18
     962:	f0 0d       	add	r31, r0
     964:	11 24       	eor	r1, r1
     966:	ef 57       	subi	r30, 0x7F	; 127
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     96c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
}
     970:	08 95       	ret

00000972 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     972:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     974:	e8 2f       	mov	r30, r24
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e7 54       	subi	r30, 0x47	; 71
     97a:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     97c:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     97e:	88 23       	and	r24, r24
     980:	19 f0       	breq	.+6      	; 0x988 <trtAccept+0x16>
    (*s)--;
     982:	81 50       	subi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
     986:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     988:	78 94       	sei
  return temp ;
}
     98a:	08 95       	ret

0000098c <initLCD>:
	ADMUX = (1 << ADLAR) | (3 << REFS0); // Set Vref to 2.56v
	initLCD();
}

//Initialize the LCD
void initLCD(){
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	66 97       	sbiw	r28, 0x16	; 22
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
	LCDinit();	//initialize the display
     9a0:	0e 94 1c 01 	call	0x238	; 0x238 <LCDinit>
	LCDcursorOFF();
     9a4:	0e 94 84 01 	call	0x308	; 0x308 <LCDcursorOFF>
	LCDclr();				//clear the display
     9a8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDclr>
	LCDGotoXY(0,0);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
	const uint8_t LCDHelloTop[] PROGMEM = "Water Cooler v9000\0";
     9b4:	de 01       	movw	r26, r28
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	e0 e0       	ldi	r30, 0x00	; 0
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	84 e1       	ldi	r24, 0x14	; 20
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	e1 f7       	brne	.-8      	; 0x9be <initLCD+0x32>
	const uint8_t LCDHelloBot[] PROGMEM = "\0";
     9c6:	80 91 14 01 	lds	r24, 0x0114
     9ca:	90 91 15 01 	lds	r25, 0x0115
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     9d2:	ce 01       	movw	r24, r28
     9d4:	03 96       	adiw	r24, 0x03	; 3
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <CopyStringtoLCD>
}
     9ea:	66 96       	adiw	r28, 0x16	; 22
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	08 95       	ret

000009fc <initialize>:
//Initialize the MCU
void initialize() {
	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + (1<<ADSC) + 7;
     9fc:	87 ec       	ldi	r24, 0xC7	; 199
     9fe:	80 93 7a 00 	sts	0x007A, r24
	
	// Set A to input (high impedence)
	DDRA = 0b11111100;
     a02:	8c ef       	ldi	r24, 0xFC	; 252
     a04:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x10; 	//Turn on the pump
     a06:	80 e1       	ldi	r24, 0x10	; 16
     a08:	82 b9       	out	0x02, r24	; 2
	
	// PortB: Keypad
	DDRB=0x00;
     a0a:	14 b8       	out	0x04, r1	; 4
	// PortD: Bluetooth module
	
	
	// Set analog comp to connect to timer capture input 
	// and turn on the band gap reference on the positive input  
	ACSR =  (1<<ACIC) ; //0b01000100  ;
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	80 bf       	out	0x30, r24	; 48
	ADMUX = (1 << ADLAR) | (3 << REFS0); // Set Vref to 2.56v
     a10:	80 ee       	ldi	r24, 0xE0	; 224
     a12:	80 93 7c 00 	sts	0x007C, r24
	initLCD();
     a16:	0e 94 c6 04 	call	0x98c	; 0x98c <initLCD>
}
     a1a:	08 95       	ret

00000a1c <scanKeypad>:
//scan the keypad
uint8_t scanKeypad(void){
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRB = 0x0f;
     a1c:	2f e0       	ldi	r18, 0x0F	; 15
     a1e:	24 b9       	out	0x04, r18	; 4
	PORTB = 0xf0; 
     a20:	80 ef       	ldi	r24, 0xF0	; 240
     a22:	85 b9       	out	0x05, r24	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	39 2f       	mov	r19, r25
     a28:	3a 95       	dec	r19
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <scanKeypad+0xc>
	_delay_us(5);
	key = PINB;
     a2c:	33 b1       	in	r19, 0x03	; 3
	
	//get upper nibble
	DDRB = 0xf0;
     a2e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0f; 
     a30:	25 b9       	out	0x05, r18	; 5
     a32:	9a 95       	dec	r25
     a34:	f1 f7       	brne	.-4      	; 0xa32 <scanKeypad+0x16>
	_delay_us(5);
	key = key | PINB;
     a36:	23 b1       	in	r18, 0x03	; 3
     a38:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     a3a:	2f 3f       	cpi	r18, 0xFF	; 255
     a3c:	61 f0       	breq	.+24     	; 0xa56 <scanKeypad+0x3a>
     a3e:	e3 e2       	ldi	r30, 0x23	; 35
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<MAX_KEYS; butnum++){
			if (keytbl[butnum]==key) {
     a44:	80 81       	ld	r24, Z
     a46:	9f 5f       	subi	r25, 0xFF	; 255
     a48:	82 17       	cp	r24, r18
     a4a:	11 f4       	brne	.+4      	; 0xa50 <scanKeypad+0x34>
		
		if (butnum==MAX_KEYS) {
			butnum=0;
		}
		else {
			butnum++;	   //adjust by one to make range 1-16
     a4c:	89 2f       	mov	r24, r25
     a4e:	08 95       	ret
	_delay_us(5);
	key = key | PINB;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<MAX_KEYS; butnum++){
     a50:	31 96       	adiw	r30, 0x01	; 1
     a52:	90 31       	cpi	r25, 0x10	; 16
     a54:	b9 f7       	brne	.-18     	; 0xa44 <scanKeypad+0x28>
     a56:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else butnum=0;
	
	return butnum;
}
     a58:	08 95       	ret

00000a5a <debounce>:
	CopyStringtoLCD(LCDHelloBot, 0, 1);
}

//Debounce the button using a debounce state machine
void debounce(void){
	uint8_t key = scanKeypad(); //Scan the keypad
     a5a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <scanKeypad>
     a5e:	98 2f       	mov	r25, r24
	switch(keyState){
     a60:	20 91 67 02 	lds	r18, 0x0267
     a64:	21 30       	cpi	r18, 0x01	; 1
     a66:	89 f0       	breq	.+34     	; 0xa8a <debounce+0x30>
     a68:	21 30       	cpi	r18, 0x01	; 1
     a6a:	20 f0       	brcs	.+8      	; 0xa74 <debounce+0x1a>
     a6c:	22 30       	cpi	r18, 0x02	; 2
     a6e:	09 f0       	breq	.+2      	; 0xa72 <debounce+0x18>
     a70:	48 c0       	rjmp	.+144    	; 0xb02 <debounce+0xa8>
     a72:	2c c0       	rjmp	.+88     	; 0xacc <debounce+0x72>
		
		//in the RELEASED state: stay in this state if a key is not pressed
		//go to UNKNOWN if any key is pressed and reset the debounce countdown.
		case RELEASED:
		if (key){
     a74:	88 23       	and	r24, r24
     a76:	09 f4       	brne	.+2      	; 0xa7a <debounce+0x20>
     a78:	44 c0       	rjmp	.+136    	; 0xb02 <debounce+0xa8>
			keyState = UNKNOWN;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 67 02 	sts	0x0267, r24
			prevKeyState = RELEASED;
     a80:	10 92 6d 02 	sts	0x026D, r1
			debouncing = 1;
     a84:	80 93 80 02 	sts	0x0280, r24
     a88:	0e c0       	rjmp	.+28     	; 0xaa6 <debounce+0x4c>
		break;
		
		//in the UNKNOWN state: go to released if the button is not down
		//go to PUSHED if the button is down
		case UNKNOWN:
		if (key){
     a8a:	88 23       	and	r24, r24
     a8c:	79 f0       	breq	.+30     	; 0xaac <debounce+0x52>
			if (key == checkKey){
     a8e:	80 91 cc 02 	lds	r24, 0x02CC
     a92:	98 17       	cp	r25, r24
     a94:	31 f4       	brne	.+12     	; 0xaa2 <debounce+0x48>
				keyState = PUSHED;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	80 93 67 02 	sts	0x0267, r24
				prevKeyState = UNKNOWN;
     a9c:	20 93 6d 02 	sts	0x026D, r18
     aa0:	12 c0       	rjmp	.+36     	; 0xac6 <debounce+0x6c>
				debouncing = 0;
			}
			else {
				debouncing = 1;
     aa2:	20 93 80 02 	sts	0x0280, r18
				checkKey = key;
     aa6:	90 93 cc 02 	sts	0x02CC, r25
     aaa:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     aac:	10 92 67 02 	sts	0x0267, r1
			if (prevKeyState == PUSHED) {
     ab0:	80 91 6d 02 	lds	r24, 0x026D
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	21 f4       	brne	.+8      	; 0xac0 <debounce+0x66>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     ab8:	80 91 cc 02 	lds	r24, 0x02CC
     abc:	80 93 7e 02 	sts	0x027E, r24
			}
			prevKeyState = UNKNOWN;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 6d 02 	sts	0x026D, r24
			debouncing = 0;
     ac6:	10 92 80 02 	sts	0x0280, r1
     aca:	08 95       	ret
		break;
		
		//in the PUSHED state go to UnKnown if the button is not down.
		//stay in PUSHED if the button is down
		case PUSHED:
		if (!key){
     acc:	88 23       	and	r24, r24
     ace:	41 f4       	brne	.+16     	; 0xae0 <debounce+0x86>
			keyState = UNKNOWN;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 67 02 	sts	0x0267, r24
			prevKeyState = PUSHED;
     ad6:	20 93 6d 02 	sts	0x026D, r18
			debouncing = 1;
     ada:	80 93 80 02 	sts	0x0280, r24
     ade:	08 95       	ret
		}
		else if (key != checkKey){
     ae0:	80 91 cc 02 	lds	r24, 0x02CC
     ae4:	98 17       	cp	r25, r24
     ae6:	69 f0       	breq	.+26     	; 0xb02 <debounce+0xa8>
			keyState = UNKNOWN;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 67 02 	sts	0x0267, r24
			prevKeyState = RELEASED; //...???
     aee:	10 92 6d 02 	sts	0x026D, r1
			debouncing = 1;
     af2:	80 93 80 02 	sts	0x0280, r24
			curKey = checkKey;
     af6:	80 91 cc 02 	lds	r24, 0x02CC
     afa:	80 93 7e 02 	sts	0x027E, r24
			checkKey = key;
     afe:	90 93 cc 02 	sts	0x02CC, r25
     b02:	08 95       	ret

00000b04 <getCurKey>:
	return butnum;
}

//Get the currect key
uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     b04:	90 91 7e 02 	lds	r25, 0x027E
	if (curKey){
     b08:	80 91 7e 02 	lds	r24, 0x027E
     b0c:	88 23       	and	r24, r24
     b0e:	11 f0       	breq	.+4      	; 0xb14 <getCurKey+0x10>
		curKey = 0;
     b10:	10 92 7e 02 	sts	0x027E, r1
	}
	return tmpKey;
}
     b14:	89 2f       	mov	r24, r25
     b16:	08 95       	ret

00000b18 <pidControl>:

//Actual tasks to complete
//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void pidControl(void* args) 
{	
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	66 24       	eor	r6, r6
     b3c:	77 24       	eor	r7, r7
     b3e:	88 24       	eor	r8, r8
     b40:	99 24       	eor	r9, r9
     b42:	44 24       	eor	r4, r4
     b44:	55 24       	eor	r5, r5
     b46:	c0 e0       	ldi	r28, 0x00	; 0
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	33 24       	eor	r3, r3
     b4c:	33 94       	inc	r3
			prevSign = sign;
			prevError = error;
		}
		
		//poll the ADC and convert the voltage to a temperature
		Ain = ADCH;
     b4e:	80 91 79 00 	lds	r24, 0x0079
     b52:	80 93 ce 02 	sts	0x02CE, r24
		ADCSRA |= (1<<ADSC); //start another conversion
     b56:	80 91 7a 00 	lds	r24, 0x007A
     b5a:	80 64       	ori	r24, 0x40	; 64
     b5c:	80 93 7a 00 	sts	0x007A, r24
		voltage = (float)Ain;
     b60:	60 91 ce 02 	lds	r22, 0x02CE
		voltage = (voltage/256.0) * Vref;
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	5b e3       	ldi	r21, 0x3B	; 59
     b76:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     b7a:	2a e0       	ldi	r18, 0x0A	; 10
     b7c:	37 ed       	ldi	r19, 0xD7	; 215
     b7e:	43 e2       	ldi	r20, 0x23	; 35
     b80:	50 e4       	ldi	r21, 0x40	; 64
     b82:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     b86:	60 93 68 02 	sts	0x0268, r22
     b8a:	70 93 69 02 	sts	0x0269, r23
     b8e:	80 93 6a 02 	sts	0x026A, r24
     b92:	90 93 6b 02 	sts	0x026B, r25
		localWaterTemp = voltage * transductionConstant;
     b96:	2a e0       	ldi	r18, 0x0A	; 10
     b98:	37 ed       	ldi	r19, 0xD7	; 215
     b9a:	43 e2       	ldi	r20, 0x23	; 35
     b9c:	5c e3       	ldi	r21, 0x3C	; 60
     b9e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     ba2:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fixunssfsi>
     ba6:	5b 01       	movw	r10, r22
     ba8:	6c 01       	movw	r12, r24
		
		//copy to global waterTemp
		trtWait(SEM_T_WATER);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		waterTemp = localWaterTemp; 
     bb0:	b5 01       	movw	r22, r10
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
     bba:	60 93 43 01 	sts	0x0143, r22
     bbe:	70 93 44 01 	sts	0x0144, r23
     bc2:	80 93 45 01 	sts	0x0145, r24
     bc6:	90 93 46 01 	sts	0x0146, r25
		trtSignal(SEM_T_WATER);
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
		
		//make local copies of the system parameters
		trtWait(SEM_T_WATER_REF);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		localWaterTempRef = waterTempRef;
     bd6:	60 91 3b 01 	lds	r22, 0x013B
     bda:	70 91 3c 01 	lds	r23, 0x013C
     bde:	80 91 3d 01 	lds	r24, 0x013D
     be2:	90 91 3e 01 	lds	r25, 0x013E
     be6:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fixunssfsi>
     bea:	7b 01       	movw	r14, r22
     bec:	8c 01       	movw	r16, r24
		trtSignal(SEM_T_WATER_REF);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
		
		//Proportional Error
		error = localWaterTempRef - localWaterTemp;
     bf4:	ea 18       	sub	r14, r10
     bf6:	fb 08       	sbc	r15, r11
     bf8:	b7 01       	movw	r22, r14
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
     c02:	5b 01       	movw	r10, r22
     c04:	6c 01       	movw	r12, r24
		
		//Integral Error
		
		//Get the current sign of the error
		if (!first) {
     c06:	33 20       	and	r3, r3
     c08:	09 f0       	breq	.+2      	; 0xc0c <pidControl+0xf4>
     c0a:	63 c0       	rjmp	.+198    	; 0xcd2 <pidControl+0x1ba>
			if (error - prevError > 0){
     c0c:	93 01       	movw	r18, r6
     c0e:	a4 01       	movw	r20, r8
     c10:	0e 94 98 0c 	call	0x1930	; 0x1930 <__subsf3>
     c14:	3b 01       	movw	r6, r22
     c16:	4c 01       	movw	r8, r24
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	64 f0       	brlt	.+24     	; 0xc40 <pidControl+0x128>
				sign = 1;
			}
			else if (error - prevError < 0) {
     c28:	c4 01       	movw	r24, r8
     c2a:	b3 01       	movw	r22, r6
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__ltsf2>
     c38:	58 2e       	mov	r5, r24
     c3a:	55 0c       	add	r5, r5
     c3c:	55 08       	sbc	r5, r5
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <pidControl+0x12c>
     c40:	55 24       	eor	r5, r5
     c42:	53 94       	inc	r5
			}
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
     c44:	54 14       	cp	r5, r4
     c46:	61 f4       	brne	.+24     	; 0xc60 <pidControl+0x148>
				integral += error;
     c48:	be 01       	movw	r22, r28
     c4a:	88 27       	eor	r24, r24
     c4c:	77 fd       	sbrc	r23, 7
     c4e:	80 95       	com	r24
     c50:	98 2f       	mov	r25, r24
     c52:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__floatsisf>
     c56:	a6 01       	movw	r20, r12
     c58:	95 01       	movw	r18, r10
     c5a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3>
     c5e:	08 c0       	rjmp	.+16     	; 0xc70 <pidControl+0x158>
			}
			else{
				integral = 0.8 * error;
     c60:	c6 01       	movw	r24, r12
     c62:	b5 01       	movw	r22, r10
     c64:	2d ec       	ldi	r18, 0xCD	; 205
     c66:	3c ec       	ldi	r19, 0xCC	; 204
     c68:	4c e4       	ldi	r20, 0x4C	; 76
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     c70:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
     c74:	eb 01       	movw	r28, r22
			derivative = error - prevError;
		}
		
		//determine what the output should be
		if (!first){
			output = k_p * error + k_i * integral + k_d * derivative;
     c76:	be 01       	movw	r22, r28
     c78:	88 27       	eor	r24, r24
     c7a:	77 fd       	sbrc	r23, 7
     c7c:	80 95       	com	r24
     c7e:	98 2f       	mov	r25, r24
     c80:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__floatsisf>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c6 01       	movw	r24, r12
     c96:	b5 01       	movw	r22, r10
     c98:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3>
     c9c:	7b 01       	movw	r14, r22
     c9e:	8c 01       	movw	r16, r24
     ca0:	c4 01       	movw	r24, r8
     ca2:	b3 01       	movw	r22, r6
     ca4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
     ca8:	88 27       	eor	r24, r24
     caa:	77 fd       	sbrc	r23, 7
     cac:	80 95       	com	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__floatsisf>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulsf3>
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	c8 01       	movw	r24, r16
     cc6:	b7 01       	movw	r22, r14
     cc8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3>
     ccc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <pidControl+0x1c0>
		}
		else{
			output = k_p * error;
     cd2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
     cd6:	33 24       	eor	r3, r3
			first = 0;
		}
		
		//clamp the output between 0 and 255 so we can directly set OCR0A
		if (output < 0){
     cd8:	77 ff       	sbrs	r23, 7
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <pidControl+0x1c8>
			OCR0A = 0;
     cdc:	17 bc       	out	0x27, r1	; 39
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <pidControl+0x1dc>
		}
		else if (output > 255) {
     ce0:	6f 3f       	cpi	r22, 0xFF	; 255
     ce2:	71 05       	cpc	r23, r1
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <pidControl+0x1da>
     ce6:	2c f0       	brlt	.+10     	; 0xcf2 <pidControl+0x1da>
			OCR0A = 255; //saturated the controller, turn the integrator off
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	87 bd       	out	0x27, r24	; 39
     cec:	c0 e0       	ldi	r28, 0x00	; 0
     cee:	d0 e0       	ldi	r29, 0x00	; 0
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <pidControl+0x1dc>
			integral = 0;
		}
		else {
			OCR0A = output;
     cf2:	67 bd       	out	0x27, r22	; 39
		}
		
		if (error > 0){
     cf4:	c6 01       	movw	r24, r12
     cf6:	b5 01       	movw	r22, r10
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	14 f4       	brge	.+4      	; 0xd0c <pidControl+0x1f4>
			//Turn the heating thing on
			PORTA |= 0x08; //Pin 3...???
     d08:	13 9a       	sbi	0x02, 3	; 2
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <pidControl+0x1f6>
		}
		else{
			//Turn the heating thing off
			PORTA &= ~0x08;
     d0c:	13 98       	cbi	0x02, 3	; 2
		}
		
		ADCSRA |= (1<<ADSC);
     d0e:	80 91 7a 00 	lds	r24, 0x007A
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	80 93 7a 00 	sts	0x007A, r24
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     d18:	20 91 c4 02 	lds	r18, 0x02C4
     d1c:	30 91 c5 02 	lds	r19, 0x02C5
     d20:	40 91 c6 02 	lds	r20, 0x02C6
     d24:	50 91 c7 02 	lds	r21, 0x02C7
     d28:	a9 01       	movw	r20, r18
     d2a:	33 27       	eor	r19, r19
     d2c:	22 27       	eor	r18, r18
     d2e:	60 91 84 00 	lds	r22, 0x0084
     d32:	70 91 85 00 	lds	r23, 0x0085
		//Set the task to execute again in 0.02 seconds.
		rel = trtCurrentTime() + SECONDS2TICKS(0.19);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.21);
	    trtSleepUntil(rel, dead);
     d36:	e0 90 84 00 	lds	r14, 0x0084
     d3a:	f0 90 85 00 	lds	r15, 0x0085
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	62 0f       	add	r22, r18
     d44:	73 1f       	adc	r23, r19
     d46:	84 1f       	adc	r24, r20
     d48:	95 1f       	adc	r25, r21
     d4a:	68 56       	subi	r22, 0x68	; 104
     d4c:	74 4f       	sbci	r23, 0xF4	; 244
     d4e:	8f 4f       	sbci	r24, 0xFF	; 255
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	2e 0d       	add	r18, r14
     d58:	3f 1d       	adc	r19, r15
     d5a:	40 1f       	adc	r20, r16
     d5c:	51 1f       	adc	r21, r17
     d5e:	2f 52       	subi	r18, 0x2F	; 47
     d60:	33 4f       	sbci	r19, 0xF3	; 243
     d62:	4f 4f       	sbci	r20, 0xFF	; 255
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <trtSleepUntil>
	const float transductionConstant = 0.01; // V/degF	
	
	while(1)
	{
		//update the previous measuremtns
		if (!first){
     d6a:	d6 01       	movw	r26, r12
     d6c:	c5 01       	movw	r24, r10
     d6e:	35 01       	movw	r6, r10
     d70:	4d 01       	movw	r8, r26
     d72:	45 2c       	mov	r4, r5
     d74:	ec ce       	rjmp	.-552    	; 0xb4e <pidControl+0x36>

00000d76 <keypadComm>:
	    trtSleepUntil(rel, dead);
	}
}

//get input from the keypad
void keypadComm(void* args) {
     d76:	2f 92       	push	r2
     d78:	3f 92       	push	r3
     d7a:	4f 92       	push	r4
     d7c:	5f 92       	push	r5
     d7e:	6f 92       	push	r6
     d80:	7f 92       	push	r7
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	68 97       	sbiw	r28, 0x18	; 24
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
	return butnum;
}

//Get the currect key
uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     da8:	b0 90 7e 02 	lds	r11, 0x027E
	if (curKey){
     dac:	80 91 7e 02 	lds	r24, 0x027E
     db0:	88 23       	and	r24, r24
     db2:	11 f0       	breq	.+4      	; 0xdb8 <keypadComm+0x42>
		curKey = 0;
     db4:	10 92 7e 02 	sts	0x027E, r1
     db8:	aa 24       	eor	r10, r10
     dba:	cc 24       	eor	r12, r12
     dbc:	c3 94       	inc	r12
     dbe:	66 24       	eor	r6, r6
     dc0:	77 24       	eor	r7, r7
     dc2:	43 01       	movw	r8, r6
     dc4:	22 24       	eor	r2, r2
     dc6:	33 24       	eor	r3, r3
     dc8:	21 01       	movw	r4, r2
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	89 8b       	std	Y+17, r24	; 0x11
     dd4:	9a 8b       	std	Y+18, r25	; 0x12
     dd6:	ab 8b       	std	Y+19, r26	; 0x13
     dd8:	bc 8b       	std	Y+20, r27	; 0x14
	//key comes before or after the decimal point
	
	while(1)
	{
		//If we aren't debouncing, scan the keypad and begin debouncing the signal
		if (!debouncing){
     dda:	80 91 80 02 	lds	r24, 0x0280
			debounce();
		}
		
		//Otherwise, finish debouncing the signal
		else {
			debounce();
     dde:	0e 94 2d 05 	call	0xa5a	; 0xa5a <debounce>
		}
		
		if (waitingForInput) {
     de2:	80 91 54 02 	lds	r24, 0x0254
     de6:	88 23       	and	r24, r24
     de8:	c1 f3       	breq	.-16     	; 0xdda <keypadComm+0x64>
			switch (key){
     dea:	97 e0       	ldi	r25, 0x07	; 7
     dec:	b9 16       	cp	r11, r25
     dee:	09 f4       	brne	.+2      	; 0xdf2 <keypadComm+0x7c>
     df0:	8e c1       	rjmp	.+796    	; 0x110e <__stack+0xf>
     df2:	9b 15       	cp	r25, r11
     df4:	a8 f0       	brcs	.+42     	; 0xe20 <keypadComm+0xaa>
     df6:	a3 e0       	ldi	r26, 0x03	; 3
     df8:	ba 16       	cp	r11, r26
     dfa:	09 f4       	brne	.+2      	; 0xdfe <keypadComm+0x88>
     dfc:	a4 c0       	rjmp	.+328    	; 0xf46 <keypadComm+0x1d0>
     dfe:	ab 15       	cp	r26, r11
     e00:	38 f0       	brcs	.+14     	; 0xe10 <keypadComm+0x9a>
     e02:	b1 e0       	ldi	r27, 0x01	; 1
     e04:	bb 16       	cp	r11, r27
     e06:	29 f1       	breq	.+74     	; 0xe52 <keypadComm+0xdc>
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	b8 16       	cp	r11, r24
     e0c:	31 f7       	brne	.-52     	; 0xdda <keypadComm+0x64>
     e0e:	55 c0       	rjmp	.+170    	; 0xeba <keypadComm+0x144>
     e10:	95 e0       	ldi	r25, 0x05	; 5
     e12:	b9 16       	cp	r11, r25
     e14:	09 f4       	brne	.+2      	; 0xe18 <keypadComm+0xa2>
     e16:	09 c1       	rjmp	.+530    	; 0x102a <keypadComm+0x2b4>
     e18:	9b 15       	cp	r25, r11
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <keypadComm+0xa8>
     e1c:	3f c1       	rjmp	.+638    	; 0x109c <keypadComm+0x326>
     e1e:	cc c0       	rjmp	.+408    	; 0xfb8 <keypadComm+0x242>
     e20:	ad e0       	ldi	r26, 0x0D	; 13
     e22:	ba 16       	cp	r11, r26
     e24:	09 f4       	brne	.+2      	; 0xe28 <keypadComm+0xb2>
     e26:	9c c2       	rjmp	.+1336   	; 0x1360 <__stack+0x261>
     e28:	ab 15       	cp	r26, r11
     e2a:	40 f0       	brcs	.+16     	; 0xe3c <keypadComm+0xc6>
     e2c:	b8 e0       	ldi	r27, 0x08	; 8
     e2e:	bb 16       	cp	r11, r27
     e30:	09 f4       	brne	.+2      	; 0xe34 <keypadComm+0xbe>
     e32:	a6 c1       	rjmp	.+844    	; 0x1180 <__stack+0x81>
     e34:	89 e0       	ldi	r24, 0x09	; 9
     e36:	b8 16       	cp	r11, r24
     e38:	81 f6       	brne	.-96     	; 0xdda <keypadComm+0x64>
     e3a:	db c1       	rjmp	.+950    	; 0x11f2 <__stack+0xf3>
     e3c:	9f e0       	ldi	r25, 0x0F	; 15
     e3e:	b9 16       	cp	r11, r25
     e40:	09 f4       	brne	.+2      	; 0xe44 <keypadComm+0xce>
     e42:	46 c2       	rjmp	.+1164   	; 0x12d0 <__stack+0x1d1>
     e44:	b9 16       	cp	r11, r25
     e46:	08 f4       	brcc	.+2      	; 0xe4a <keypadComm+0xd4>
     e48:	39 c2       	rjmp	.+1138   	; 0x12bc <__stack+0x1bd>
     e4a:	a0 e1       	ldi	r26, 0x10	; 16
     e4c:	ba 16       	cp	r11, r26
     e4e:	29 f6       	brne	.-118    	; 0xdda <keypadComm+0x64>
     e50:	0a c2       	rjmp	.+1044   	; 0x1266 <__stack+0x167>
				case 0x01:
				valBuffer[valLoc] = '1';
				if (beforeDecimal){
     e52:	cc 20       	and	r12, r12
     e54:	81 f0       	breq	.+32     	; 0xe76 <keypadComm+0x100>
					valInt = valInt * 10 + 1;
     e56:	c4 01       	movw	r24, r8
     e58:	b3 01       	movw	r22, r6
     e5a:	2a e0       	ldi	r18, 0x0A	; 10
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     e66:	3b 01       	movw	r6, r22
     e68:	4c 01       	movw	r8, r24
     e6a:	08 94       	sec
     e6c:	61 1c       	adc	r6, r1
     e6e:	71 1c       	adc	r7, r1
     e70:	81 1c       	adc	r8, r1
     e72:	91 1c       	adc	r9, r1
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <keypadComm+0x132>
				}
				else {
					valDec = valDec * 10 + 1;
     e76:	c2 01       	movw	r24, r4
     e78:	b1 01       	movw	r22, r2
     e7a:	2a e0       	ldi	r18, 0x0A	; 10
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     e86:	1b 01       	movw	r2, r22
     e88:	2c 01       	movw	r4, r24
     e8a:	08 94       	sec
     e8c:	21 1c       	adc	r2, r1
     e8e:	31 1c       	adc	r3, r1
     e90:	41 1c       	adc	r4, r1
     e92:	51 1c       	adc	r5, r1
					numAfterDecimal *= 10;
     e94:	69 89       	ldd	r22, Y+17	; 0x11
     e96:	7a 89       	ldd	r23, Y+18	; 0x12
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     ea0:	69 8b       	std	Y+17, r22	; 0x11
     ea2:	7a 8b       	std	Y+18, r23	; 0x12
     ea4:	8b 8b       	std	Y+19, r24	; 0x13
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
		}
		
		if (waitingForInput) {
			switch (key){
				case 0x01:
				valBuffer[valLoc] = '1';
     ea8:	e1 e0       	ldi	r30, 0x01	; 1
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ec 0f       	add	r30, r28
     eae:	fd 1f       	adc	r31, r29
     eb0:	ea 0d       	add	r30, r10
     eb2:	f1 1d       	adc	r31, r1
     eb4:	b1 e3       	ldi	r27, 0x31	; 49
     eb6:	b0 83       	st	Z, r27
     eb8:	ff c1       	rjmp	.+1022   	; 0x12b8 <__stack+0x1b9>
				}
				valLoc++;
				break;
				case 0x02:
				valBuffer[valLoc] = '2';
				if (beforeDecimal) {
     eba:	cc 20       	and	r12, r12
     ebc:	b9 f0       	breq	.+46     	; 0xeec <keypadComm+0x176>
					valInt = valInt * 10 + 2;
     ebe:	d4 01       	movw	r26, r8
     ec0:	c3 01       	movw	r24, r6
     ec2:	12 e0       	ldi	r17, 0x02	; 2
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	aa 1f       	adc	r26, r26
     eca:	bb 1f       	adc	r27, r27
     ecc:	1a 95       	dec	r17
     ece:	d1 f7       	brne	.-12     	; 0xec4 <keypadComm+0x14e>
     ed0:	68 0e       	add	r6, r24
     ed2:	79 1e       	adc	r7, r25
     ed4:	8a 1e       	adc	r8, r26
     ed6:	9b 1e       	adc	r9, r27
     ed8:	08 94       	sec
     eda:	61 1c       	adc	r6, r1
     edc:	71 1c       	adc	r7, r1
     ede:	81 1c       	adc	r8, r1
     ee0:	91 1c       	adc	r9, r1
     ee2:	66 0c       	add	r6, r6
     ee4:	77 1c       	adc	r7, r7
     ee6:	88 1c       	adc	r8, r8
     ee8:	99 1c       	adc	r9, r9
     eea:	24 c0       	rjmp	.+72     	; 0xf34 <keypadComm+0x1be>
				}
				else {
					valDec = valDec * 10 + 2;
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	aa 1f       	adc	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	fa 95       	dec	r31
     efc:	d1 f7       	brne	.-12     	; 0xef2 <keypadComm+0x17c>
     efe:	28 0e       	add	r2, r24
     f00:	39 1e       	adc	r3, r25
     f02:	4a 1e       	adc	r4, r26
     f04:	5b 1e       	adc	r5, r27
     f06:	08 94       	sec
     f08:	21 1c       	adc	r2, r1
     f0a:	31 1c       	adc	r3, r1
     f0c:	41 1c       	adc	r4, r1
     f0e:	51 1c       	adc	r5, r1
     f10:	22 0c       	add	r2, r2
     f12:	33 1c       	adc	r3, r3
     f14:	44 1c       	adc	r4, r4
     f16:	55 1c       	adc	r5, r5
					numAfterDecimal *= 10;
     f18:	69 89       	ldd	r22, Y+17	; 0x11
     f1a:	7a 89       	ldd	r23, Y+18	; 0x12
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	9c 89       	ldd	r25, Y+20	; 0x14
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     f2c:	69 8b       	std	Y+17, r22	; 0x11
     f2e:	7a 8b       	std	Y+18, r23	; 0x12
     f30:	8b 8b       	std	Y+19, r24	; 0x13
     f32:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x02:
				valBuffer[valLoc] = '2';
     f34:	e1 e0       	ldi	r30, 0x01	; 1
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	ec 0f       	add	r30, r28
     f3a:	fd 1f       	adc	r31, r29
     f3c:	ea 0d       	add	r30, r10
     f3e:	f1 1d       	adc	r31, r1
     f40:	82 e3       	ldi	r24, 0x32	; 50
     f42:	80 83       	st	Z, r24
     f44:	b9 c1       	rjmp	.+882    	; 0x12b8 <__stack+0x1b9>
				}
				valLoc++;
				break;
				case 0x03:
				valBuffer[valLoc] = '3';
				if (beforeDecimal) {
     f46:	cc 20       	and	r12, r12
     f48:	99 f0       	breq	.+38     	; 0xf70 <keypadComm+0x1fa>
					valInt = valInt * 10 + 3;
     f4a:	c4 01       	movw	r24, r8
     f4c:	b3 01       	movw	r22, r6
     f4e:	2a e0       	ldi	r18, 0x0A	; 10
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     f5a:	3b 01       	movw	r6, r22
     f5c:	4c 01       	movw	r8, r24
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	68 0e       	add	r6, r24
     f68:	79 1e       	adc	r7, r25
     f6a:	8a 1e       	adc	r8, r26
     f6c:	9b 1e       	adc	r9, r27
     f6e:	1c c0       	rjmp	.+56     	; 0xfa8 <keypadComm+0x232>
				}
				else{
					valDec = valDec * 10 + 3;
     f70:	c2 01       	movw	r24, r4
     f72:	b1 01       	movw	r22, r2
     f74:	2a e0       	ldi	r18, 0x0A	; 10
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     f80:	1b 01       	movw	r2, r22
     f82:	2c 01       	movw	r4, r24
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	28 0e       	add	r2, r24
     f8e:	39 1e       	adc	r3, r25
     f90:	4a 1e       	adc	r4, r26
     f92:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
     f94:	69 89       	ldd	r22, Y+17	; 0x11
     f96:	7a 89       	ldd	r23, Y+18	; 0x12
     f98:	8b 89       	ldd	r24, Y+19	; 0x13
     f9a:	9c 89       	ldd	r25, Y+20	; 0x14
     f9c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     fa0:	69 8b       	std	Y+17, r22	; 0x11
     fa2:	7a 8b       	std	Y+18, r23	; 0x12
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x03:
				valBuffer[valLoc] = '3';
     fa8:	e1 e0       	ldi	r30, 0x01	; 1
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	ec 0f       	add	r30, r28
     fae:	fd 1f       	adc	r31, r29
     fb0:	ea 0d       	add	r30, r10
     fb2:	f1 1d       	adc	r31, r1
     fb4:	93 e3       	ldi	r25, 0x33	; 51
     fb6:	55 c1       	rjmp	.+682    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x04:
				valBuffer[valLoc] = '4';
				if (beforeDecimal) {
     fb8:	cc 20       	and	r12, r12
     fba:	99 f0       	breq	.+38     	; 0xfe2 <keypadComm+0x26c>
					valInt = valInt * 10 + 4;
     fbc:	c4 01       	movw	r24, r8
     fbe:	b3 01       	movw	r22, r6
     fc0:	2a e0       	ldi	r18, 0x0A	; 10
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     fcc:	3b 01       	movw	r6, r22
     fce:	4c 01       	movw	r8, r24
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	68 0e       	add	r6, r24
     fda:	79 1e       	adc	r7, r25
     fdc:	8a 1e       	adc	r8, r26
     fde:	9b 1e       	adc	r9, r27
     fe0:	1c c0       	rjmp	.+56     	; 0x101a <keypadComm+0x2a4>
				}
				else{
					valDec = valDec * 10 + 4;
     fe2:	c2 01       	movw	r24, r4
     fe4:	b1 01       	movw	r22, r2
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
     ff2:	1b 01       	movw	r2, r22
     ff4:	2c 01       	movw	r4, r24
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	28 0e       	add	r2, r24
    1000:	39 1e       	adc	r3, r25
    1002:	4a 1e       	adc	r4, r26
    1004:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    1006:	69 89       	ldd	r22, Y+17	; 0x11
    1008:	7a 89       	ldd	r23, Y+18	; 0x12
    100a:	8b 89       	ldd	r24, Y+19	; 0x13
    100c:	9c 89       	ldd	r25, Y+20	; 0x14
    100e:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1012:	69 8b       	std	Y+17, r22	; 0x11
    1014:	7a 8b       	std	Y+18, r23	; 0x12
    1016:	8b 8b       	std	Y+19, r24	; 0x13
    1018:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x04:
				valBuffer[valLoc] = '4';
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ec 0f       	add	r30, r28
    1020:	fd 1f       	adc	r31, r29
    1022:	ea 0d       	add	r30, r10
    1024:	f1 1d       	adc	r31, r1
    1026:	94 e3       	ldi	r25, 0x34	; 52
    1028:	1c c1       	rjmp	.+568    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x05:
				valBuffer[valLoc] = '5';
				if (beforeDecimal) {
    102a:	cc 20       	and	r12, r12
    102c:	99 f0       	breq	.+38     	; 0x1054 <keypadComm+0x2de>
					valInt = valInt * 10 + 5;
    102e:	c4 01       	movw	r24, r8
    1030:	b3 01       	movw	r22, r6
    1032:	2a e0       	ldi	r18, 0x0A	; 10
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    103e:	3b 01       	movw	r6, r22
    1040:	4c 01       	movw	r8, r24
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	68 0e       	add	r6, r24
    104c:	79 1e       	adc	r7, r25
    104e:	8a 1e       	adc	r8, r26
    1050:	9b 1e       	adc	r9, r27
    1052:	1c c0       	rjmp	.+56     	; 0x108c <keypadComm+0x316>
				}
				else{
					valDec = valDec * 10 + 5;
    1054:	c2 01       	movw	r24, r4
    1056:	b1 01       	movw	r22, r2
    1058:	2a e0       	ldi	r18, 0x0A	; 10
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1064:	1b 01       	movw	r2, r22
    1066:	2c 01       	movw	r4, r24
    1068:	85 e0       	ldi	r24, 0x05	; 5
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	28 0e       	add	r2, r24
    1072:	39 1e       	adc	r3, r25
    1074:	4a 1e       	adc	r4, r26
    1076:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    1078:	69 89       	ldd	r22, Y+17	; 0x11
    107a:	7a 89       	ldd	r23, Y+18	; 0x12
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1084:	69 8b       	std	Y+17, r22	; 0x11
    1086:	7a 8b       	std	Y+18, r23	; 0x12
    1088:	8b 8b       	std	Y+19, r24	; 0x13
    108a:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x05:
				valBuffer[valLoc] = '5';
    108c:	e1 e0       	ldi	r30, 0x01	; 1
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	ec 0f       	add	r30, r28
    1092:	fd 1f       	adc	r31, r29
    1094:	ea 0d       	add	r30, r10
    1096:	f1 1d       	adc	r31, r1
    1098:	95 e3       	ldi	r25, 0x35	; 53
    109a:	e3 c0       	rjmp	.+454    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x06:
				valBuffer[valLoc] = '6';
				if (beforeDecimal) {
    109c:	cc 20       	and	r12, r12
    109e:	99 f0       	breq	.+38     	; 0x10c6 <keypadComm+0x350>
					valInt = valInt * 10 + 6;
    10a0:	c4 01       	movw	r24, r8
    10a2:	b3 01       	movw	r22, r6
    10a4:	2a e0       	ldi	r18, 0x0A	; 10
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    10b0:	3b 01       	movw	r6, r22
    10b2:	4c 01       	movw	r8, r24
    10b4:	86 e0       	ldi	r24, 0x06	; 6
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 e0       	ldi	r26, 0x00	; 0
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	68 0e       	add	r6, r24
    10be:	79 1e       	adc	r7, r25
    10c0:	8a 1e       	adc	r8, r26
    10c2:	9b 1e       	adc	r9, r27
    10c4:	1c c0       	rjmp	.+56     	; 0x10fe <keypadComm+0x388>
				}
				else{
					valDec = valDec * 10 + 6;
    10c6:	c2 01       	movw	r24, r4
    10c8:	b1 01       	movw	r22, r2
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    10d6:	1b 01       	movw	r2, r22
    10d8:	2c 01       	movw	r4, r24
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	28 0e       	add	r2, r24
    10e4:	39 1e       	adc	r3, r25
    10e6:	4a 1e       	adc	r4, r26
    10e8:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    10ea:	69 89       	ldd	r22, Y+17	; 0x11
    10ec:	7a 89       	ldd	r23, Y+18	; 0x12
    10ee:	8b 89       	ldd	r24, Y+19	; 0x13
    10f0:	9c 89       	ldd	r25, Y+20	; 0x14
    10f2:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    10f6:	69 8b       	std	Y+17, r22	; 0x11
    10f8:	7a 8b       	std	Y+18, r23	; 0x12
    10fa:	8b 8b       	std	Y+19, r24	; 0x13
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x06:
				valBuffer[valLoc] = '6';
    10fe:	e1 e0       	ldi	r30, 0x01	; 1
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	ec 0f       	add	r30, r28
    1104:	fd 1f       	adc	r31, r29
    1106:	ea 0d       	add	r30, r10
    1108:	f1 1d       	adc	r31, r1
    110a:	96 e3       	ldi	r25, 0x36	; 54
    110c:	aa c0       	rjmp	.+340    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x07:
				valBuffer[valLoc] = '7';
				if (beforeDecimal) {
    110e:	cc 20       	and	r12, r12
    1110:	99 f0       	breq	.+38     	; 0x1138 <__stack+0x39>
					valInt = valInt * 10 + 7;
    1112:	c4 01       	movw	r24, r8
    1114:	b3 01       	movw	r22, r6
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1122:	3b 01       	movw	r6, r22
    1124:	4c 01       	movw	r8, r24
    1126:	87 e0       	ldi	r24, 0x07	; 7
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	68 0e       	add	r6, r24
    1130:	79 1e       	adc	r7, r25
    1132:	8a 1e       	adc	r8, r26
    1134:	9b 1e       	adc	r9, r27
    1136:	1c c0       	rjmp	.+56     	; 0x1170 <__stack+0x71>
				}
				else{
					valDec = valDec * 10 + 7;
    1138:	c2 01       	movw	r24, r4
    113a:	b1 01       	movw	r22, r2
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1148:	1b 01       	movw	r2, r22
    114a:	2c 01       	movw	r4, r24
    114c:	87 e0       	ldi	r24, 0x07	; 7
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	28 0e       	add	r2, r24
    1156:	39 1e       	adc	r3, r25
    1158:	4a 1e       	adc	r4, r26
    115a:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    115c:	69 89       	ldd	r22, Y+17	; 0x11
    115e:	7a 89       	ldd	r23, Y+18	; 0x12
    1160:	8b 89       	ldd	r24, Y+19	; 0x13
    1162:	9c 89       	ldd	r25, Y+20	; 0x14
    1164:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1168:	69 8b       	std	Y+17, r22	; 0x11
    116a:	7a 8b       	std	Y+18, r23	; 0x12
    116c:	8b 8b       	std	Y+19, r24	; 0x13
    116e:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x07:
				valBuffer[valLoc] = '7';
    1170:	e1 e0       	ldi	r30, 0x01	; 1
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ec 0f       	add	r30, r28
    1176:	fd 1f       	adc	r31, r29
    1178:	ea 0d       	add	r30, r10
    117a:	f1 1d       	adc	r31, r1
    117c:	97 e3       	ldi	r25, 0x37	; 55
    117e:	71 c0       	rjmp	.+226    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x08:
				valBuffer[valLoc] = '8';
				if (beforeDecimal) {
    1180:	cc 20       	and	r12, r12
    1182:	99 f0       	breq	.+38     	; 0x11aa <__stack+0xab>
					valInt = valInt * 10 + 8;
    1184:	c4 01       	movw	r24, r8
    1186:	b3 01       	movw	r22, r6
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1194:	3b 01       	movw	r6, r22
    1196:	4c 01       	movw	r8, r24
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	68 0e       	add	r6, r24
    11a2:	79 1e       	adc	r7, r25
    11a4:	8a 1e       	adc	r8, r26
    11a6:	9b 1e       	adc	r9, r27
    11a8:	1c c0       	rjmp	.+56     	; 0x11e2 <__stack+0xe3>
				}
				else{
					valDec = valDec * 10 + 8;
    11aa:	c2 01       	movw	r24, r4
    11ac:	b1 01       	movw	r22, r2
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    11ba:	1b 01       	movw	r2, r22
    11bc:	2c 01       	movw	r4, r24
    11be:	88 e0       	ldi	r24, 0x08	; 8
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	28 0e       	add	r2, r24
    11c8:	39 1e       	adc	r3, r25
    11ca:	4a 1e       	adc	r4, r26
    11cc:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    11ce:	69 89       	ldd	r22, Y+17	; 0x11
    11d0:	7a 89       	ldd	r23, Y+18	; 0x12
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	9c 89       	ldd	r25, Y+20	; 0x14
    11d6:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    11da:	69 8b       	std	Y+17, r22	; 0x11
    11dc:	7a 8b       	std	Y+18, r23	; 0x12
    11de:	8b 8b       	std	Y+19, r24	; 0x13
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x08:
				valBuffer[valLoc] = '8';
    11e2:	e1 e0       	ldi	r30, 0x01	; 1
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ec 0f       	add	r30, r28
    11e8:	fd 1f       	adc	r31, r29
    11ea:	ea 0d       	add	r30, r10
    11ec:	f1 1d       	adc	r31, r1
    11ee:	98 e3       	ldi	r25, 0x38	; 56
    11f0:	38 c0       	rjmp	.+112    	; 0x1262 <__stack+0x163>
				}
				valLoc++;
				break;
				case 0x09:
				valBuffer[valLoc] = '9';
				if (beforeDecimal) {
    11f2:	cc 20       	and	r12, r12
    11f4:	99 f0       	breq	.+38     	; 0x121c <__stack+0x11d>
					valInt = valInt * 10 + 9;
    11f6:	c4 01       	movw	r24, r8
    11f8:	b3 01       	movw	r22, r6
    11fa:	2a e0       	ldi	r18, 0x0A	; 10
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1206:	3b 01       	movw	r6, r22
    1208:	4c 01       	movw	r8, r24
    120a:	89 e0       	ldi	r24, 0x09	; 9
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	68 0e       	add	r6, r24
    1214:	79 1e       	adc	r7, r25
    1216:	8a 1e       	adc	r8, r26
    1218:	9b 1e       	adc	r9, r27
    121a:	1c c0       	rjmp	.+56     	; 0x1254 <__stack+0x155>
				}
				else{
					valDec = valDec * 10 + 9;
    121c:	c2 01       	movw	r24, r4
    121e:	b1 01       	movw	r22, r2
    1220:	2a e0       	ldi	r18, 0x0A	; 10
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    122c:	1b 01       	movw	r2, r22
    122e:	2c 01       	movw	r4, r24
    1230:	89 e0       	ldi	r24, 0x09	; 9
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	28 0e       	add	r2, r24
    123a:	39 1e       	adc	r3, r25
    123c:	4a 1e       	adc	r4, r26
    123e:	5b 1e       	adc	r5, r27
					numAfterDecimal *= 10;
    1240:	69 89       	ldd	r22, Y+17	; 0x11
    1242:	7a 89       	ldd	r23, Y+18	; 0x12
    1244:	8b 89       	ldd	r24, Y+19	; 0x13
    1246:	9c 89       	ldd	r25, Y+20	; 0x14
    1248:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    124c:	69 8b       	std	Y+17, r22	; 0x11
    124e:	7a 8b       	std	Y+18, r23	; 0x12
    1250:	8b 8b       	std	Y+19, r24	; 0x13
    1252:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x09:
				valBuffer[valLoc] = '9';
    1254:	e1 e0       	ldi	r30, 0x01	; 1
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	ec 0f       	add	r30, r28
    125a:	fd 1f       	adc	r31, r29
    125c:	ea 0d       	add	r30, r10
    125e:	f1 1d       	adc	r31, r1
    1260:	99 e3       	ldi	r25, 0x39	; 57
    1262:	90 83       	st	Z, r25
    1264:	29 c0       	rjmp	.+82     	; 0x12b8 <__stack+0x1b9>
				}
				valLoc++;
				break;
				case 0x10:
				valBuffer[valLoc] = '0';
				if (beforeDecimal) {
    1266:	cc 20       	and	r12, r12
    1268:	59 f0       	breq	.+22     	; 0x1280 <__stack+0x181>
					valInt = valInt * 10;
    126a:	c4 01       	movw	r24, r8
    126c:	b3 01       	movw	r22, r6
    126e:	2a e0       	ldi	r18, 0x0A	; 10
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    127a:	3b 01       	movw	r6, r22
    127c:	4c 01       	movw	r8, r24
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <__stack+0x1a9>
				}
				else{
					valDec = valDec * 10;
    1280:	c2 01       	movw	r24, r4
    1282:	b1 01       	movw	r22, r2
    1284:	2a e0       	ldi	r18, 0x0A	; 10
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    1290:	1b 01       	movw	r2, r22
    1292:	2c 01       	movw	r4, r24
					numAfterDecimal *= 10;
    1294:	69 89       	ldd	r22, Y+17	; 0x11
    1296:	7a 89       	ldd	r23, Y+18	; 0x12
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsi3>
    12a0:	69 8b       	std	Y+17, r22	; 0x11
    12a2:	7a 8b       	std	Y+18, r23	; 0x12
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	9c 8b       	std	Y+20, r25	; 0x14
					numAfterDecimal *= 10;
				}
				valLoc++;
				break;
				case 0x10:
				valBuffer[valLoc] = '0';
    12a8:	e1 e0       	ldi	r30, 0x01	; 1
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	ec 0f       	add	r30, r28
    12ae:	fd 1f       	adc	r31, r29
    12b0:	ea 0d       	add	r30, r10
    12b2:	f1 1d       	adc	r31, r1
    12b4:	a0 e3       	ldi	r26, 0x30	; 48
    12b6:	a0 83       	st	Z, r26
				}
				else{
					valDec = valDec * 10;
					numAfterDecimal *= 10;
				}
				valLoc++;
    12b8:	a3 94       	inc	r10
    12ba:	8f cd       	rjmp	.-1250   	; 0xdda <keypadComm+0x64>
				break;
				case 0x0E:		//E ==> decimal
				valBuffer[valLoc] = '.';
    12bc:	e1 e0       	ldi	r30, 0x01	; 1
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	ec 0f       	add	r30, r28
    12c2:	fd 1f       	adc	r31, r29
    12c4:	ea 0d       	add	r30, r10
    12c6:	f1 1d       	adc	r31, r1
    12c8:	be e2       	ldi	r27, 0x2E	; 46
    12ca:	b0 83       	st	Z, r27
				valLoc++;
    12cc:	a3 94       	inc	r10
    12ce:	cc 24       	eor	r12, r12
				beforeDecimal = 0;
				case 0x0F:		//F ==> backspace
				valLoc--;
    12d0:	aa 94       	dec	r10
				if (beforeDecimal){
    12d2:	cc 20       	and	r12, r12
    12d4:	69 f0       	breq	.+26     	; 0x12f0 <__stack+0x1f1>
					valInt = valInt / 10;
    12d6:	c4 01       	movw	r24, r8
    12d8:	b3 01       	movw	r22, r6
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    12e6:	c9 01       	movw	r24, r18
    12e8:	da 01       	movw	r26, r20
    12ea:	3c 01       	movw	r6, r24
    12ec:	4d 01       	movw	r8, r26
    12ee:	38 c0       	rjmp	.+112    	; 0x1360 <__stack+0x261>
				}
				else {
					if (valBuffer[valLoc] == '.'){
    12f0:	e1 e0       	ldi	r30, 0x01	; 1
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	ec 0f       	add	r30, r28
    12f6:	fd 1f       	adc	r31, r29
    12f8:	ea 0d       	add	r30, r10
    12fa:	f1 1d       	adc	r31, r1
    12fc:	80 81       	ld	r24, Z
    12fe:	8e 32       	cpi	r24, 0x2E	; 46
    1300:	99 f4       	brne	.+38     	; 0x1328 <__stack+0x229>
						valInt = valInt / 10;
    1302:	c4 01       	movw	r24, r8
    1304:	b3 01       	movw	r22, r6
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    1312:	c9 01       	movw	r24, r18
    1314:	da 01       	movw	r26, r20
    1316:	3c 01       	movw	r6, r24
    1318:	4d 01       	movw	r8, r26
    131a:	cc 24       	eor	r12, r12
    131c:	c3 94       	inc	r12
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	18 c0       	rjmp	.+48     	; 0x1358 <__stack+0x259>
						beforeDecimal = 1;
						numAfterDecimal = 1;
					}
					else {
						valDec = valDec / 10;
    1328:	c2 01       	movw	r24, r4
    132a:	b1 01       	movw	r22, r2
    132c:	2a e0       	ldi	r18, 0x0A	; 10
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    1338:	c9 01       	movw	r24, r18
    133a:	da 01       	movw	r26, r20
    133c:	1c 01       	movw	r2, r24
    133e:	2d 01       	movw	r4, r26
						numAfterDecimal /= 10;
    1340:	69 89       	ldd	r22, Y+17	; 0x11
    1342:	7a 89       	ldd	r23, Y+18	; 0x12
    1344:	8b 89       	ldd	r24, Y+19	; 0x13
    1346:	9c 89       	ldd	r25, Y+20	; 0x14
    1348:	2a e0       	ldi	r18, 0x0A	; 10
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    1354:	c9 01       	movw	r24, r18
    1356:	da 01       	movw	r26, r20
    1358:	89 8b       	std	Y+17, r24	; 0x11
    135a:	9a 8b       	std	Y+18, r25	; 0x12
    135c:	ab 8b       	std	Y+19, r26	; 0x13
    135e:	bc 8b       	std	Y+20, r27	; 0x14
					}
				}
				case 0x0D:		//D ==> enter
				waitingForInput = 0;
    1360:	10 92 54 02 	sts	0x0254, r1
				val = valInt + (float)valDec / (float)numAfterDecimal;
    1364:	c4 01       	movw	r24, r8
    1366:	b3 01       	movw	r22, r6
    1368:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
    136c:	6d 8b       	std	Y+21, r22	; 0x15
    136e:	7e 8b       	std	Y+22, r23	; 0x16
    1370:	8f 8b       	std	Y+23, r24	; 0x17
    1372:	98 8f       	std	Y+24, r25	; 0x18
    1374:	c2 01       	movw	r24, r4
    1376:	b1 01       	movw	r22, r2
    1378:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
    137c:	7b 01       	movw	r14, r22
    137e:	8c 01       	movw	r16, r24
    1380:	69 89       	ldd	r22, Y+17	; 0x11
    1382:	7a 89       	ldd	r23, Y+18	; 0x12
    1384:	8b 89       	ldd	r24, Y+19	; 0x13
    1386:	9c 89       	ldd	r25, Y+20	; 0x14
    1388:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__floatunsisf>
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	c8 01       	movw	r24, r16
    1392:	b7 01       	movw	r22, r14
    1394:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__divsf3>
    1398:	9b 01       	movw	r18, r22
    139a:	ac 01       	movw	r20, r24
    139c:	6d 89       	ldd	r22, Y+21	; 0x15
    139e:	7e 89       	ldd	r23, Y+22	; 0x16
    13a0:	8f 89       	ldd	r24, Y+23	; 0x17
    13a2:	98 8d       	ldd	r25, Y+24	; 0x18
    13a4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__addsf3>
    13a8:	7b 01       	movw	r14, r22
    13aa:	8c 01       	movw	r16, r24
				
				switch (mode){
    13ac:	80 91 6c 02 	lds	r24, 0x026C
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a9 f0       	breq	.+42     	; 0x13de <__stack+0x2df>
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__stack+0x2c1>
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	09 f0       	breq	.+2      	; 0x13be <__stack+0x2bf>
    13bc:	0e cd       	rjmp	.-1508   	; 0xdda <keypadComm+0x64>
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <__stack+0x2fd>
					case INPUT_T_REF:
					trtWait(SEM_T_WATER_REF);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
					waterTempRef = val;
    13c6:	c7 01       	movw	r24, r14
    13c8:	d8 01       	movw	r26, r16
    13ca:	80 93 3b 01 	sts	0x013B, r24
    13ce:	90 93 3c 01 	sts	0x013C, r25
    13d2:	a0 93 3d 01 	sts	0x013D, r26
    13d6:	b0 93 3e 01 	sts	0x013E, r27
					trtSignal(SEM_T_WATER_REF);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	1d c0       	rjmp	.+58     	; 0x1418 <__stack+0x319>
					break;
					
					case INPUT_THICKNESS:
					trtWait(SEM_THICKNESS);
    13de:	85 e0       	ldi	r24, 0x05	; 5
    13e0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
					thickness = val;
    13e4:	c7 01       	movw	r24, r14
    13e6:	d8 01       	movw	r26, r16
    13e8:	80 93 37 01 	sts	0x0137, r24
    13ec:	90 93 38 01 	sts	0x0138, r25
    13f0:	a0 93 39 01 	sts	0x0139, r26
    13f4:	b0 93 3a 01 	sts	0x013A, r27
					trtSignal(SEM_THICKNESS);
    13f8:	85 e0       	ldi	r24, 0x05	; 5
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <__stack+0x319>
					break;
					
					case INPUT_MAT_PROP:
					trtWait(SEM_MAT_PROP);
    13fc:	86 e0       	ldi	r24, 0x06	; 6
    13fe:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
					k = val;
    1402:	c7 01       	movw	r24, r14
    1404:	d8 01       	movw	r26, r16
    1406:	80 93 33 01 	sts	0x0133, r24
    140a:	90 93 34 01 	sts	0x0134, r25
    140e:	a0 93 35 01 	sts	0x0135, r26
    1412:	b0 93 36 01 	sts	0x0136, r27
					trtSignal(SEM_MAT_PROP);
    1416:	86 e0       	ldi	r24, 0x06	; 6
    1418:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
    141c:	de cc       	rjmp	.-1604   	; 0xdda <keypadComm+0x64>

0000141e <main>:
		trtSleepUntil(rel, dead);
	}
}

// --- Main Program ----------------------------------
int main(void) {
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <main+0x16>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <main+0x18>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	int args[2]; 
	DDRD = 0b11111011;
    143a:	8b ef       	ldi	r24, 0xFB	; 251
    143c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
    143e:	1b b8       	out	0x0b, r1	; 11
	
	//Initialize the MCU  
	initialize();
    1440:	0e 94 fe 04 	call	0x9fc	; 0x9fc <initialize>
	
	// start TRT
	trtInitKernel(128); // 80 bytes for the idle task stack
    1444:	80 e8       	ldi	r24, 0x80	; 128
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 2c 03 	call	0x658	; 0x658 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    144c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 bd 02 	sts	0x02BD, r24
  
  sei(); // set enabled interrupts;
    1454:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1456:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1458:	80 93 bc 02 	sts	0x02BC, r24
  
  sei(); // set enabled interrupts;
    145c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    145e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1460:	80 93 ba 02 	sts	0x02BA, r24
  
  sei(); // set enabled interrupts;
    1464:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1466:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1468:	80 93 bb 02 	sts	0x02BB, r24
  
  sei(); // set enabled interrupts;
    146c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    146e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1470:	80 93 bf 02 	sts	0x02BF, r24
  
  sei(); // set enabled interrupts;
    1474:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1476:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1478:	80 93 be 02 	sts	0x02BE, r24
  
  sei(); // set enabled interrupts;
    147c:	78 94       	sei
	trtCreateSemaphore(SEM_T_WATER_REF, 1) ; // protect shared variables
	trtCreateSemaphore(SEM_T_WATER, 1) ; // protect shared variables
	trtCreateSemaphore(SEM_MAT_PROP, 1) ; // protect shared variables
	trtCreateSemaphore(SEM_THICKNESS, 1);
	// --- creat tasks  ----------------
	trtCreateTask(pidControl, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
    147e:	8c e8       	ldi	r24, 0x8C	; 140
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	2d e0       	ldi	r18, 0x0D	; 13
    1488:	33 e0       	ldi	r19, 0x03	; 3
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	ad e0       	ldi	r26, 0x0D	; 13
    1490:	ea 2e       	mov	r14, r26
    1492:	a3 e0       	ldi	r26, 0x03	; 3
    1494:	fa 2e       	mov	r15, r26
    1496:	01 2d       	mov	r16, r1
    1498:	11 2d       	mov	r17, r1
    149a:	6e 01       	movw	r12, r28
    149c:	08 94       	sec
    149e:	c1 1c       	adc	r12, r1
    14a0:	d1 1c       	adc	r13, r1
    14a2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
	trtCreateTask(keypadComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
    14a6:	f3 e0       	ldi	r31, 0x03	; 3
    14a8:	af 2e       	mov	r10, r31
    14aa:	b1 2c       	mov	r11, r1
    14ac:	ac 0e       	add	r10, r28
    14ae:	bd 1e       	adc	r11, r29
    14b0:	8b eb       	ldi	r24, 0xBB	; 187
    14b2:	96 e0       	ldi	r25, 0x06	; 6
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	71 e0       	ldi	r23, 0x01	; 1
    14b8:	2a e1       	ldi	r18, 0x1A	; 26
    14ba:	36 e0       	ldi	r19, 0x06	; 6
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	ea e1       	ldi	r30, 0x1A	; 26
    14c2:	ee 2e       	mov	r14, r30
    14c4:	e6 e0       	ldi	r30, 0x06	; 6
    14c6:	fe 2e       	mov	r15, r30
    14c8:	01 2d       	mov	r16, r1
    14ca:	11 2d       	mov	r17, r1
    14cc:	65 01       	movw	r12, r10
    14ce:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
	trtCreateTask(displayTemp, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
    14d2:	8c e7       	ldi	r24, 0x7C	; 124
    14d4:	9a e0       	ldi	r25, 0x0A	; 10
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	2a e1       	ldi	r18, 0x1A	; 26
    14dc:	36 e0       	ldi	r19, 0x06	; 6
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
	
	sei();
    14e6:	78 94       	sei
	// --- Idle task --------------------------------------
	// just sleeps the cpu to save power 
	// every time it executes
	set_sleep_mode(SLEEP_MODE_IDLE);
    14e8:	83 b7       	in	r24, 0x33	; 51
    14ea:	81 7f       	andi	r24, 0xF1	; 241
    14ec:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    14ee:	83 b7       	in	r24, 0x33	; 51
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	83 bf       	out	0x33, r24	; 51
	while (1) 
	{
		sleep_cpu();
    14f4:	88 95       	sleep
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <main+0xd6>

000014f8 <displayTemp>:
	}
}

//Display the Temperature on the LCD
void displayTemp(void* args) 
{	
    14f8:	6f 92       	push	r6
    14fa:	7f 92       	push	r7
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	2a 97       	sbiw	r28, 0x0a	; 10
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	//String constants
	const uint8_t LCDTemp[5] = "TEMP\0";
    1524:	de 01       	movw	r26, r28
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	e9 e1       	ldi	r30, 0x19	; 25
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	85 e0       	ldi	r24, 0x05	; 5
    152e:	01 90       	ld	r0, Z+
    1530:	0d 92       	st	X+, r0
    1532:	81 50       	subi	r24, 0x01	; 1
    1534:	e1 f7       	brne	.-8      	; 0x152e <displayTemp+0x36>
	
	//flags indicating whether a variable needs to be updated
	uint8_t updateTempRefRef;
	
	//make local copies of the system parametes
	trtWait(SEM_T_REF);
    1536:	84 e0       	ldi	r24, 0x04	; 4
    1538:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	localTempRef = waterTempRef;
	trtSignal(SEM_T_REF);
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
	
	trtWait(SEM_T);
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	localTemp = waterTemp;
    1548:	a0 90 43 01 	lds	r10, 0x0143
    154c:	b0 90 44 01 	lds	r11, 0x0144
    1550:	c0 90 45 01 	lds	r12, 0x0145
    1554:	d0 90 46 01 	lds	r13, 0x0146
	trtSignal(SEM_T);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
	
	trtWait(SEM_THICKNESS);
    155e:	85 e0       	ldi	r24, 0x05	; 5
    1560:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	float localThickness = thickness;
	trtSignal(SEM_THICKNESS);
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
	
	trtWait(SEM_MAT_PROP);
    156a:	86 e0       	ldi	r24, 0x06	; 6
    156c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	float localK = k;
	trtSignal(SEM_MAT_PROP);
    1570:	86 e0       	ldi	r24, 0x06	; 6
    1572:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
	
	LCDGotoXY(0,0);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
	LCDstring(LCDTemp, 4);
    157e:	ce 01       	movw	r24, r28
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	0e 94 bd 00 	call	0x17a	; 0x17a <LCDstring>
	while(1){
		//trtWait(SEM_T_WATER);
		//trtSignal(SEM_T_WATER);

		
		sprintf(LCDTempMeas, "%f", localTemp);
    1588:	06 e0       	ldi	r16, 0x06	; 6
    158a:	80 2e       	mov	r8, r16
    158c:	91 2c       	mov	r9, r1
    158e:	8c 0e       	add	r8, r28
    1590:	9d 1e       	adc	r9, r29
    1592:	16 e1       	ldi	r17, 0x16	; 22
    1594:	61 2e       	mov	r6, r17
    1596:	11 e0       	ldi	r17, 0x01	; 1
    1598:	71 2e       	mov	r7, r17
    159a:	8d b7       	in	r24, 0x3d	; 61
    159c:	9e b7       	in	r25, 0x3e	; 62
    159e:	08 97       	sbiw	r24, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	9e bf       	out	0x3e, r25	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	8d bf       	out	0x3d, r24	; 61
    15aa:	ed b7       	in	r30, 0x3d	; 61
    15ac:	fe b7       	in	r31, 0x3e	; 62
    15ae:	31 96       	adiw	r30, 0x01	; 1
    15b0:	ad b7       	in	r26, 0x3d	; 61
    15b2:	be b7       	in	r27, 0x3e	; 62
    15b4:	12 96       	adiw	r26, 0x02	; 2
    15b6:	9c 92       	st	X, r9
    15b8:	8e 92       	st	-X, r8
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	73 82       	std	Z+3, r7	; 0x03
    15be:	62 82       	std	Z+2, r6	; 0x02
    15c0:	a4 82       	std	Z+4, r10	; 0x04
    15c2:	b5 82       	std	Z+5, r11	; 0x05
    15c4:	c6 82       	std	Z+6, r12	; 0x06
    15c6:	d7 82       	std	Z+7, r13	; 0x07
    15c8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <sprintf>
		LCDGotoXY(0, 0);
    15cc:	8d b7       	in	r24, 0x3d	; 61
    15ce:	9e b7       	in	r25, 0x3e	; 62
    15d0:	08 96       	adiw	r24, 0x08	; 8
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	9e bf       	out	0x3e, r25	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	8d bf       	out	0x3d, r24	; 61
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
		LCDstring(LCDTempMeas, 5);
    15e4:	c4 01       	movw	r24, r8
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	0e 94 bd 00 	call	0x17a	; 0x17a <LCDstring>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    15ec:	20 91 c4 02 	lds	r18, 0x02C4
    15f0:	30 91 c5 02 	lds	r19, 0x02C5
    15f4:	40 91 c6 02 	lds	r20, 0x02C6
    15f8:	50 91 c7 02 	lds	r21, 0x02C7
    15fc:	a9 01       	movw	r20, r18
    15fe:	33 27       	eor	r19, r19
    1600:	22 27       	eor	r18, r18
    1602:	60 91 84 00 	lds	r22, 0x0084
    1606:	70 91 85 00 	lds	r23, 0x0085
		
		rel = trtCurrentTime() + SECONDS2TICKS(0.2);
		dead = trtCurrentTime() + SECONDS2TICKS(0.225);
		trtSleepUntil(rel, dead);
    160a:	e0 90 84 00 	lds	r14, 0x0084
    160e:	f0 90 85 00 	lds	r15, 0x0085
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	62 0f       	add	r22, r18
    1618:	73 1f       	adc	r23, r19
    161a:	84 1f       	adc	r24, r20
    161c:	95 1f       	adc	r25, r21
    161e:	6b 5c       	subi	r22, 0xCB	; 203
    1620:	73 4f       	sbci	r23, 0xF3	; 243
    1622:	8f 4f       	sbci	r24, 0xFF	; 255
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	2e 0d       	add	r18, r14
    162c:	3f 1d       	adc	r19, r15
    162e:	40 1f       	adc	r20, r16
    1630:	51 1f       	adc	r21, r17
    1632:	25 54       	subi	r18, 0x45	; 69
    1634:	32 4f       	sbci	r19, 0xF2	; 242
    1636:	4f 4f       	sbci	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <trtSleepUntil>
    163e:	ad cf       	rjmp	.-166    	; 0x159a <displayTemp+0xa2>

00001640 <__fixunssfsi>:
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	7b 01       	movw	r14, r22
    164a:	8c 01       	movw	r16, r24
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	5f e4       	ldi	r21, 0x4F	; 79
    1654:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__gesf2>
    1658:	88 23       	and	r24, r24
    165a:	8c f0       	brlt	.+34     	; 0x167e <__fixunssfsi+0x3e>
    165c:	c8 01       	movw	r24, r16
    165e:	b7 01       	movw	r22, r14
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	5f e4       	ldi	r21, 0x4F	; 79
    1668:	0e 94 98 0c 	call	0x1930	; 0x1930 <__subsf3>
    166c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	20 50       	subi	r18, 0x00	; 0
    1676:	30 40       	sbci	r19, 0x00	; 0
    1678:	40 40       	sbci	r20, 0x00	; 0
    167a:	50 48       	sbci	r21, 0x80	; 128
    167c:	06 c0       	rjmp	.+12     	; 0x168a <__fixunssfsi+0x4a>
    167e:	c8 01       	movw	r24, r16
    1680:	b7 01       	movw	r22, r14
    1682:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixsfsi>
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	b9 01       	movw	r22, r18
    168c:	ca 01       	movw	r24, r20
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	08 95       	ret

00001698 <_fpadd_parts>:
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e2 e5       	ldi	r30, 0x52	; 82
    169e:	fb e0       	ldi	r31, 0x0B	; 11
    16a0:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__>
    16a4:	dc 01       	movw	r26, r24
    16a6:	2b 01       	movw	r4, r22
    16a8:	fa 01       	movw	r30, r20
    16aa:	9c 91       	ld	r25, X
    16ac:	92 30       	cpi	r25, 0x02	; 2
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <_fpadd_parts+0x1a>
    16b0:	39 c1       	rjmp	.+626    	; 0x1924 <_fpadd_parts+0x28c>
    16b2:	eb 01       	movw	r28, r22
    16b4:	88 81       	ld	r24, Y
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <_fpadd_parts+0x24>
    16ba:	33 c1       	rjmp	.+614    	; 0x1922 <_fpadd_parts+0x28a>
    16bc:	94 30       	cpi	r25, 0x04	; 4
    16be:	69 f4       	brne	.+26     	; 0x16da <_fpadd_parts+0x42>
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <_fpadd_parts+0x2e>
    16c4:	2f c1       	rjmp	.+606    	; 0x1924 <_fpadd_parts+0x28c>
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	9c 91       	ld	r25, X
    16ca:	11 97       	sbiw	r26, 0x01	; 1
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	98 17       	cp	r25, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <_fpadd_parts+0x3c>
    16d2:	28 c1       	rjmp	.+592    	; 0x1924 <_fpadd_parts+0x28c>
    16d4:	ab e4       	ldi	r26, 0x4B	; 75
    16d6:	b1 e0       	ldi	r27, 0x01	; 1
    16d8:	25 c1       	rjmp	.+586    	; 0x1924 <_fpadd_parts+0x28c>
    16da:	84 30       	cpi	r24, 0x04	; 4
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <_fpadd_parts+0x48>
    16de:	21 c1       	rjmp	.+578    	; 0x1922 <_fpadd_parts+0x28a>
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	a9 f4       	brne	.+42     	; 0x170e <_fpadd_parts+0x76>
    16e4:	92 30       	cpi	r25, 0x02	; 2
    16e6:	09 f0       	breq	.+2      	; 0x16ea <_fpadd_parts+0x52>
    16e8:	1d c1       	rjmp	.+570    	; 0x1924 <_fpadd_parts+0x28c>
    16ea:	9a 01       	movw	r18, r20
    16ec:	ad 01       	movw	r20, r26
    16ee:	88 e0       	ldi	r24, 0x08	; 8
    16f0:	ea 01       	movw	r28, r20
    16f2:	09 90       	ld	r0, Y+
    16f4:	ae 01       	movw	r20, r28
    16f6:	e9 01       	movw	r28, r18
    16f8:	09 92       	st	Y+, r0
    16fa:	9e 01       	movw	r18, r28
    16fc:	81 50       	subi	r24, 0x01	; 1
    16fe:	c1 f7       	brne	.-16     	; 0x16f0 <_fpadd_parts+0x58>
    1700:	e2 01       	movw	r28, r4
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	9c 91       	ld	r25, X
    1708:	89 23       	and	r24, r25
    170a:	81 83       	std	Z+1, r24	; 0x01
    170c:	08 c1       	rjmp	.+528    	; 0x191e <_fpadd_parts+0x286>
    170e:	92 30       	cpi	r25, 0x02	; 2
    1710:	09 f4       	brne	.+2      	; 0x1714 <_fpadd_parts+0x7c>
    1712:	07 c1       	rjmp	.+526    	; 0x1922 <_fpadd_parts+0x28a>
    1714:	12 96       	adiw	r26, 0x02	; 2
    1716:	2d 90       	ld	r2, X+
    1718:	3c 90       	ld	r3, X
    171a:	13 97       	sbiw	r26, 0x03	; 3
    171c:	eb 01       	movw	r28, r22
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	14 96       	adiw	r26, 0x04	; 4
    1724:	ad 90       	ld	r10, X+
    1726:	bd 90       	ld	r11, X+
    1728:	cd 90       	ld	r12, X+
    172a:	dc 90       	ld	r13, X
    172c:	17 97       	sbiw	r26, 0x07	; 7
    172e:	ec 80       	ldd	r14, Y+4	; 0x04
    1730:	fd 80       	ldd	r15, Y+5	; 0x05
    1732:	0e 81       	ldd	r16, Y+6	; 0x06
    1734:	1f 81       	ldd	r17, Y+7	; 0x07
    1736:	91 01       	movw	r18, r2
    1738:	28 1b       	sub	r18, r24
    173a:	39 0b       	sbc	r19, r25
    173c:	b9 01       	movw	r22, r18
    173e:	37 ff       	sbrs	r19, 7
    1740:	04 c0       	rjmp	.+8      	; 0x174a <_fpadd_parts+0xb2>
    1742:	66 27       	eor	r22, r22
    1744:	77 27       	eor	r23, r23
    1746:	62 1b       	sub	r22, r18
    1748:	73 0b       	sbc	r23, r19
    174a:	60 32       	cpi	r22, 0x20	; 32
    174c:	71 05       	cpc	r23, r1
    174e:	0c f0       	brlt	.+2      	; 0x1752 <_fpadd_parts+0xba>
    1750:	61 c0       	rjmp	.+194    	; 0x1814 <_fpadd_parts+0x17c>
    1752:	12 16       	cp	r1, r18
    1754:	13 06       	cpc	r1, r19
    1756:	6c f5       	brge	.+90     	; 0x17b2 <_fpadd_parts+0x11a>
    1758:	37 01       	movw	r6, r14
    175a:	48 01       	movw	r8, r16
    175c:	06 2e       	mov	r0, r22
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <_fpadd_parts+0xd0>
    1760:	96 94       	lsr	r9
    1762:	87 94       	ror	r8
    1764:	77 94       	ror	r7
    1766:	67 94       	ror	r6
    1768:	0a 94       	dec	r0
    176a:	d2 f7       	brpl	.-12     	; 0x1760 <_fpadd_parts+0xc8>
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	04 c0       	rjmp	.+8      	; 0x177e <_fpadd_parts+0xe6>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	44 1f       	adc	r20, r20
    177c:	55 1f       	adc	r21, r21
    177e:	6a 95       	dec	r22
    1780:	d2 f7       	brpl	.-12     	; 0x1776 <_fpadd_parts+0xde>
    1782:	21 50       	subi	r18, 0x01	; 1
    1784:	30 40       	sbci	r19, 0x00	; 0
    1786:	40 40       	sbci	r20, 0x00	; 0
    1788:	50 40       	sbci	r21, 0x00	; 0
    178a:	2e 21       	and	r18, r14
    178c:	3f 21       	and	r19, r15
    178e:	40 23       	and	r20, r16
    1790:	51 23       	and	r21, r17
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	41 05       	cpc	r20, r1
    1798:	51 05       	cpc	r21, r1
    179a:	21 f0       	breq	.+8      	; 0x17a4 <_fpadd_parts+0x10c>
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	79 01       	movw	r14, r18
    17a6:	8a 01       	movw	r16, r20
    17a8:	e6 28       	or	r14, r6
    17aa:	f7 28       	or	r15, r7
    17ac:	08 29       	or	r16, r8
    17ae:	19 29       	or	r17, r9
    17b0:	3c c0       	rjmp	.+120    	; 0x182a <_fpadd_parts+0x192>
    17b2:	23 2b       	or	r18, r19
    17b4:	d1 f1       	breq	.+116    	; 0x182a <_fpadd_parts+0x192>
    17b6:	26 0e       	add	r2, r22
    17b8:	37 1e       	adc	r3, r23
    17ba:	35 01       	movw	r6, r10
    17bc:	46 01       	movw	r8, r12
    17be:	06 2e       	mov	r0, r22
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <_fpadd_parts+0x132>
    17c2:	96 94       	lsr	r9
    17c4:	87 94       	ror	r8
    17c6:	77 94       	ror	r7
    17c8:	67 94       	ror	r6
    17ca:	0a 94       	dec	r0
    17cc:	d2 f7       	brpl	.-12     	; 0x17c2 <_fpadd_parts+0x12a>
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <_fpadd_parts+0x148>
    17d8:	22 0f       	add	r18, r18
    17da:	33 1f       	adc	r19, r19
    17dc:	44 1f       	adc	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	6a 95       	dec	r22
    17e2:	d2 f7       	brpl	.-12     	; 0x17d8 <_fpadd_parts+0x140>
    17e4:	21 50       	subi	r18, 0x01	; 1
    17e6:	30 40       	sbci	r19, 0x00	; 0
    17e8:	40 40       	sbci	r20, 0x00	; 0
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	2a 21       	and	r18, r10
    17ee:	3b 21       	and	r19, r11
    17f0:	4c 21       	and	r20, r12
    17f2:	5d 21       	and	r21, r13
    17f4:	21 15       	cp	r18, r1
    17f6:	31 05       	cpc	r19, r1
    17f8:	41 05       	cpc	r20, r1
    17fa:	51 05       	cpc	r21, r1
    17fc:	21 f0       	breq	.+8      	; 0x1806 <_fpadd_parts+0x16e>
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	59 01       	movw	r10, r18
    1808:	6a 01       	movw	r12, r20
    180a:	a6 28       	or	r10, r6
    180c:	b7 28       	or	r11, r7
    180e:	c8 28       	or	r12, r8
    1810:	d9 28       	or	r13, r9
    1812:	0b c0       	rjmp	.+22     	; 0x182a <_fpadd_parts+0x192>
    1814:	82 15       	cp	r24, r2
    1816:	93 05       	cpc	r25, r3
    1818:	2c f0       	brlt	.+10     	; 0x1824 <_fpadd_parts+0x18c>
    181a:	1c 01       	movw	r2, r24
    181c:	aa 24       	eor	r10, r10
    181e:	bb 24       	eor	r11, r11
    1820:	65 01       	movw	r12, r10
    1822:	03 c0       	rjmp	.+6      	; 0x182a <_fpadd_parts+0x192>
    1824:	ee 24       	eor	r14, r14
    1826:	ff 24       	eor	r15, r15
    1828:	87 01       	movw	r16, r14
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	9c 91       	ld	r25, X
    182e:	d2 01       	movw	r26, r4
    1830:	11 96       	adiw	r26, 0x01	; 1
    1832:	8c 91       	ld	r24, X
    1834:	98 17       	cp	r25, r24
    1836:	09 f4       	brne	.+2      	; 0x183a <_fpadd_parts+0x1a2>
    1838:	45 c0       	rjmp	.+138    	; 0x18c4 <_fpadd_parts+0x22c>
    183a:	99 23       	and	r25, r25
    183c:	39 f0       	breq	.+14     	; 0x184c <_fpadd_parts+0x1b4>
    183e:	a8 01       	movw	r20, r16
    1840:	97 01       	movw	r18, r14
    1842:	2a 19       	sub	r18, r10
    1844:	3b 09       	sbc	r19, r11
    1846:	4c 09       	sbc	r20, r12
    1848:	5d 09       	sbc	r21, r13
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <_fpadd_parts+0x1c0>
    184c:	a6 01       	movw	r20, r12
    184e:	95 01       	movw	r18, r10
    1850:	2e 19       	sub	r18, r14
    1852:	3f 09       	sbc	r19, r15
    1854:	40 0b       	sbc	r20, r16
    1856:	51 0b       	sbc	r21, r17
    1858:	57 fd       	sbrc	r21, 7
    185a:	08 c0       	rjmp	.+16     	; 0x186c <_fpadd_parts+0x1d4>
    185c:	11 82       	std	Z+1, r1	; 0x01
    185e:	33 82       	std	Z+3, r3	; 0x03
    1860:	22 82       	std	Z+2, r2	; 0x02
    1862:	24 83       	std	Z+4, r18	; 0x04
    1864:	35 83       	std	Z+5, r19	; 0x05
    1866:	46 83       	std	Z+6, r20	; 0x06
    1868:	57 83       	std	Z+7, r21	; 0x07
    186a:	1d c0       	rjmp	.+58     	; 0x18a6 <_fpadd_parts+0x20e>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	81 83       	std	Z+1, r24	; 0x01
    1870:	33 82       	std	Z+3, r3	; 0x03
    1872:	22 82       	std	Z+2, r2	; 0x02
    1874:	88 27       	eor	r24, r24
    1876:	99 27       	eor	r25, r25
    1878:	dc 01       	movw	r26, r24
    187a:	82 1b       	sub	r24, r18
    187c:	93 0b       	sbc	r25, r19
    187e:	a4 0b       	sbc	r26, r20
    1880:	b5 0b       	sbc	r27, r21
    1882:	84 83       	std	Z+4, r24	; 0x04
    1884:	95 83       	std	Z+5, r25	; 0x05
    1886:	a6 83       	std	Z+6, r26	; 0x06
    1888:	b7 83       	std	Z+7, r27	; 0x07
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <_fpadd_parts+0x20e>
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	44 1f       	adc	r20, r20
    1892:	55 1f       	adc	r21, r21
    1894:	24 83       	std	Z+4, r18	; 0x04
    1896:	35 83       	std	Z+5, r19	; 0x05
    1898:	46 83       	std	Z+6, r20	; 0x06
    189a:	57 83       	std	Z+7, r21	; 0x07
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	93 83       	std	Z+3, r25	; 0x03
    18a4:	82 83       	std	Z+2, r24	; 0x02
    18a6:	24 81       	ldd	r18, Z+4	; 0x04
    18a8:	35 81       	ldd	r19, Z+5	; 0x05
    18aa:	46 81       	ldd	r20, Z+6	; 0x06
    18ac:	57 81       	ldd	r21, Z+7	; 0x07
    18ae:	da 01       	movw	r26, r20
    18b0:	c9 01       	movw	r24, r18
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	af 4f       	sbci	r26, 0xFF	; 255
    18be:	bf 43       	sbci	r27, 0x3F	; 63
    18c0:	28 f3       	brcs	.-54     	; 0x188c <_fpadd_parts+0x1f4>
    18c2:	0b c0       	rjmp	.+22     	; 0x18da <_fpadd_parts+0x242>
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	33 82       	std	Z+3, r3	; 0x03
    18c8:	22 82       	std	Z+2, r2	; 0x02
    18ca:	ea 0c       	add	r14, r10
    18cc:	fb 1c       	adc	r15, r11
    18ce:	0c 1d       	adc	r16, r12
    18d0:	1d 1d       	adc	r17, r13
    18d2:	e4 82       	std	Z+4, r14	; 0x04
    18d4:	f5 82       	std	Z+5, r15	; 0x05
    18d6:	06 83       	std	Z+6, r16	; 0x06
    18d8:	17 83       	std	Z+7, r17	; 0x07
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	80 83       	st	Z, r24
    18de:	24 81       	ldd	r18, Z+4	; 0x04
    18e0:	35 81       	ldd	r19, Z+5	; 0x05
    18e2:	46 81       	ldd	r20, Z+6	; 0x06
    18e4:	57 81       	ldd	r21, Z+7	; 0x07
    18e6:	57 ff       	sbrs	r21, 7
    18e8:	1a c0       	rjmp	.+52     	; 0x191e <_fpadd_parts+0x286>
    18ea:	c9 01       	movw	r24, r18
    18ec:	aa 27       	eor	r26, r26
    18ee:	97 fd       	sbrc	r25, 7
    18f0:	a0 95       	com	r26
    18f2:	ba 2f       	mov	r27, r26
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	a0 70       	andi	r26, 0x00	; 0
    18fa:	b0 70       	andi	r27, 0x00	; 0
    18fc:	56 95       	lsr	r21
    18fe:	47 95       	ror	r20
    1900:	37 95       	ror	r19
    1902:	27 95       	ror	r18
    1904:	82 2b       	or	r24, r18
    1906:	93 2b       	or	r25, r19
    1908:	a4 2b       	or	r26, r20
    190a:	b5 2b       	or	r27, r21
    190c:	84 83       	std	Z+4, r24	; 0x04
    190e:	95 83       	std	Z+5, r25	; 0x05
    1910:	a6 83       	std	Z+6, r26	; 0x06
    1912:	b7 83       	std	Z+7, r27	; 0x07
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	93 83       	std	Z+3, r25	; 0x03
    191c:	82 83       	std	Z+2, r24	; 0x02
    191e:	df 01       	movw	r26, r30
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <_fpadd_parts+0x28c>
    1922:	d2 01       	movw	r26, r4
    1924:	cd 01       	movw	r24, r26
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	e2 e1       	ldi	r30, 0x12	; 18
    192c:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__>

00001930 <__subsf3>:
    1930:	a0 e2       	ldi	r26, 0x20	; 32
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e9       	ldi	r30, 0x9E	; 158
    1936:	fc e0       	ldi	r31, 0x0C	; 12
    1938:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
    193c:	69 83       	std	Y+1, r22	; 0x01
    193e:	7a 83       	std	Y+2, r23	; 0x02
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	2d 83       	std	Y+5, r18	; 0x05
    1946:	3e 83       	std	Y+6, r19	; 0x06
    1948:	4f 83       	std	Y+7, r20	; 0x07
    194a:	58 87       	std	Y+8, r21	; 0x08
    194c:	e9 e0       	ldi	r30, 0x09	; 9
    194e:	ee 2e       	mov	r14, r30
    1950:	f1 2c       	mov	r15, r1
    1952:	ec 0e       	add	r14, r28
    1954:	fd 1e       	adc	r15, r29
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	b7 01       	movw	r22, r14
    195c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1960:	8e 01       	movw	r16, r28
    1962:	0f 5e       	subi	r16, 0xEF	; 239
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	ce 01       	movw	r24, r28
    1968:	05 96       	adiw	r24, 0x05	; 5
    196a:	b8 01       	movw	r22, r16
    196c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	89 27       	eor	r24, r25
    1976:	8a 8b       	std	Y+18, r24	; 0x12
    1978:	c7 01       	movw	r24, r14
    197a:	b8 01       	movw	r22, r16
    197c:	ae 01       	movw	r20, r28
    197e:	47 5e       	subi	r20, 0xE7	; 231
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_fpadd_parts>
    1986:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    198a:	a0 96       	adiw	r28, 0x20	; 32
    198c:	e6 e0       	ldi	r30, 0x06	; 6
    198e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00001992 <__addsf3>:
    1992:	a0 e2       	ldi	r26, 0x20	; 32
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef ec       	ldi	r30, 0xCF	; 207
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	3e 83       	std	Y+6, r19	; 0x06
    19aa:	4f 83       	std	Y+7, r20	; 0x07
    19ac:	58 87       	std	Y+8, r21	; 0x08
    19ae:	f9 e0       	ldi	r31, 0x09	; 9
    19b0:	ef 2e       	mov	r14, r31
    19b2:	f1 2c       	mov	r15, r1
    19b4:	ec 0e       	add	r14, r28
    19b6:	fd 1e       	adc	r15, r29
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	b7 01       	movw	r22, r14
    19be:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    19c2:	8e 01       	movw	r16, r28
    19c4:	0f 5e       	subi	r16, 0xEF	; 239
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	ce 01       	movw	r24, r28
    19ca:	05 96       	adiw	r24, 0x05	; 5
    19cc:	b8 01       	movw	r22, r16
    19ce:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    19d2:	c7 01       	movw	r24, r14
    19d4:	b8 01       	movw	r22, r16
    19d6:	ae 01       	movw	r20, r28
    19d8:	47 5e       	subi	r20, 0xE7	; 231
    19da:	5f 4f       	sbci	r21, 0xFF	; 255
    19dc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_fpadd_parts>
    19e0:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    19e4:	a0 96       	adiw	r28, 0x20	; 32
    19e6:	e6 e0       	ldi	r30, 0x06	; 6
    19e8:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

000019ec <__mulsf3>:
    19ec:	a0 e2       	ldi	r26, 0x20	; 32
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ec ef       	ldi	r30, 0xFC	; 252
    19f2:	fc e0       	ldi	r31, 0x0C	; 12
    19f4:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__>
    19f8:	69 83       	std	Y+1, r22	; 0x01
    19fa:	7a 83       	std	Y+2, r23	; 0x02
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	2d 83       	std	Y+5, r18	; 0x05
    1a02:	3e 83       	std	Y+6, r19	; 0x06
    1a04:	4f 83       	std	Y+7, r20	; 0x07
    1a06:	58 87       	std	Y+8, r21	; 0x08
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	be 01       	movw	r22, r28
    1a0e:	67 5f       	subi	r22, 0xF7	; 247
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1a16:	ce 01       	movw	r24, r28
    1a18:	05 96       	adiw	r24, 0x05	; 5
    1a1a:	be 01       	movw	r22, r28
    1a1c:	6f 5e       	subi	r22, 0xEF	; 239
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1a24:	99 85       	ldd	r25, Y+9	; 0x09
    1a26:	92 30       	cpi	r25, 0x02	; 2
    1a28:	88 f0       	brcs	.+34     	; 0x1a4c <__mulsf3+0x60>
    1a2a:	89 89       	ldd	r24, Y+17	; 0x11
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	c8 f0       	brcs	.+50     	; 0x1a62 <__mulsf3+0x76>
    1a30:	94 30       	cpi	r25, 0x04	; 4
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <__mulsf3+0x4e>
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	51 f4       	brne	.+20     	; 0x1a4c <__mulsf3+0x60>
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__mulsf3+0x56>
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	29 f4       	brne	.+10     	; 0x1a48 <__mulsf3+0x5c>
    1a3e:	92 30       	cpi	r25, 0x02	; 2
    1a40:	81 f4       	brne	.+32     	; 0x1a62 <__mulsf3+0x76>
    1a42:	8b e4       	ldi	r24, 0x4B	; 75
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	c6 c0       	rjmp	.+396    	; 0x1bd4 <__mulsf3+0x1e8>
    1a48:	92 30       	cpi	r25, 0x02	; 2
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <__mulsf3+0x72>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	8a 89       	ldd	r24, Y+18	; 0x12
    1a52:	98 13       	cpse	r25, r24
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	2a 87       	std	Y+10, r18	; 0x0a
    1a58:	ce 01       	movw	r24, r28
    1a5a:	09 96       	adiw	r24, 0x09	; 9
    1a5c:	bb c0       	rjmp	.+374    	; 0x1bd4 <__mulsf3+0x1e8>
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	49 f4       	brne	.+18     	; 0x1a74 <__mulsf3+0x88>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	8a 89       	ldd	r24, Y+18	; 0x12
    1a68:	98 13       	cpse	r25, r24
    1a6a:	21 e0       	ldi	r18, 0x01	; 1
    1a6c:	2a 8b       	std	Y+18, r18	; 0x12
    1a6e:	ce 01       	movw	r24, r28
    1a70:	41 96       	adiw	r24, 0x11	; 17
    1a72:	b0 c0       	rjmp	.+352    	; 0x1bd4 <__mulsf3+0x1e8>
    1a74:	2d 84       	ldd	r2, Y+13	; 0x0d
    1a76:	3e 84       	ldd	r3, Y+14	; 0x0e
    1a78:	4f 84       	ldd	r4, Y+15	; 0x0f
    1a7a:	58 88       	ldd	r5, Y+16	; 0x10
    1a7c:	6d 88       	ldd	r6, Y+21	; 0x15
    1a7e:	7e 88       	ldd	r7, Y+22	; 0x16
    1a80:	8f 88       	ldd	r8, Y+23	; 0x17
    1a82:	98 8c       	ldd	r9, Y+24	; 0x18
    1a84:	ee 24       	eor	r14, r14
    1a86:	ff 24       	eor	r15, r15
    1a88:	87 01       	movw	r16, r14
    1a8a:	aa 24       	eor	r10, r10
    1a8c:	bb 24       	eor	r11, r11
    1a8e:	65 01       	movw	r12, r10
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	e0 e0       	ldi	r30, 0x00	; 0
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	c1 01       	movw	r24, r2
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	89 2b       	or	r24, r25
    1aa4:	e9 f0       	breq	.+58     	; 0x1ae0 <__mulsf3+0xf4>
    1aa6:	e6 0c       	add	r14, r6
    1aa8:	f7 1c       	adc	r15, r7
    1aaa:	08 1d       	adc	r16, r8
    1aac:	19 1d       	adc	r17, r9
    1aae:	9a 01       	movw	r18, r20
    1ab0:	ab 01       	movw	r20, r22
    1ab2:	2a 0d       	add	r18, r10
    1ab4:	3b 1d       	adc	r19, r11
    1ab6:	4c 1d       	adc	r20, r12
    1ab8:	5d 1d       	adc	r21, r13
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e6 14       	cp	r14, r6
    1ac4:	f7 04       	cpc	r15, r7
    1ac6:	08 05       	cpc	r16, r8
    1ac8:	19 05       	cpc	r17, r9
    1aca:	20 f4       	brcc	.+8      	; 0x1ad4 <__mulsf3+0xe8>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ba 01       	movw	r22, r20
    1ad6:	a9 01       	movw	r20, r18
    1ad8:	48 0f       	add	r20, r24
    1ada:	59 1f       	adc	r21, r25
    1adc:	6a 1f       	adc	r22, r26
    1ade:	7b 1f       	adc	r23, r27
    1ae0:	aa 0c       	add	r10, r10
    1ae2:	bb 1c       	adc	r11, r11
    1ae4:	cc 1c       	adc	r12, r12
    1ae6:	dd 1c       	adc	r13, r13
    1ae8:	97 fe       	sbrs	r9, 7
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <__mulsf3+0x110>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e0       	ldi	r26, 0x00	; 0
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	a8 2a       	or	r10, r24
    1af6:	b9 2a       	or	r11, r25
    1af8:	ca 2a       	or	r12, r26
    1afa:	db 2a       	or	r13, r27
    1afc:	31 96       	adiw	r30, 0x01	; 1
    1afe:	e0 32       	cpi	r30, 0x20	; 32
    1b00:	f1 05       	cpc	r31, r1
    1b02:	49 f0       	breq	.+18     	; 0x1b16 <__mulsf3+0x12a>
    1b04:	66 0c       	add	r6, r6
    1b06:	77 1c       	adc	r7, r7
    1b08:	88 1c       	adc	r8, r8
    1b0a:	99 1c       	adc	r9, r9
    1b0c:	56 94       	lsr	r5
    1b0e:	47 94       	ror	r4
    1b10:	37 94       	ror	r3
    1b12:	27 94       	ror	r2
    1b14:	c3 cf       	rjmp	.-122    	; 0x1a9c <__mulsf3+0xb0>
    1b16:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b18:	ea 89       	ldd	r30, Y+18	; 0x12
    1b1a:	2b 89       	ldd	r18, Y+19	; 0x13
    1b1c:	3c 89       	ldd	r19, Y+20	; 0x14
    1b1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b20:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b22:	28 0f       	add	r18, r24
    1b24:	39 1f       	adc	r19, r25
    1b26:	2e 5f       	subi	r18, 0xFE	; 254
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	17 c0       	rjmp	.+46     	; 0x1b5a <__mulsf3+0x16e>
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	81 70       	andi	r24, 0x01	; 1
    1b30:	90 70       	andi	r25, 0x00	; 0
    1b32:	89 2b       	or	r24, r25
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <__mulsf3+0x162>
    1b36:	16 95       	lsr	r17
    1b38:	07 95       	ror	r16
    1b3a:	f7 94       	ror	r15
    1b3c:	e7 94       	ror	r14
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e0       	ldi	r26, 0x00	; 0
    1b44:	b0 e8       	ldi	r27, 0x80	; 128
    1b46:	e8 2a       	or	r14, r24
    1b48:	f9 2a       	or	r15, r25
    1b4a:	0a 2b       	or	r16, r26
    1b4c:	1b 2b       	or	r17, r27
    1b4e:	76 95       	lsr	r23
    1b50:	67 95       	ror	r22
    1b52:	57 95       	ror	r21
    1b54:	47 95       	ror	r20
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	77 fd       	sbrc	r23, 7
    1b5c:	e7 cf       	rjmp	.-50     	; 0x1b2c <__mulsf3+0x140>
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <__mulsf3+0x18c>
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	66 1f       	adc	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	17 fd       	sbrc	r17, 7
    1b6a:	41 60       	ori	r20, 0x01	; 1
    1b6c:	ee 0c       	add	r14, r14
    1b6e:	ff 1c       	adc	r15, r15
    1b70:	00 1f       	adc	r16, r16
    1b72:	11 1f       	adc	r17, r17
    1b74:	21 50       	subi	r18, 0x01	; 1
    1b76:	30 40       	sbci	r19, 0x00	; 0
    1b78:	40 30       	cpi	r20, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	59 07       	cpc	r21, r25
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	69 07       	cpc	r22, r25
    1b82:	90 e4       	ldi	r25, 0x40	; 64
    1b84:	79 07       	cpc	r23, r25
    1b86:	60 f3       	brcs	.-40     	; 0x1b60 <__mulsf3+0x174>
    1b88:	2b 8f       	std	Y+27, r18	; 0x1b
    1b8a:	3c 8f       	std	Y+28, r19	; 0x1c
    1b8c:	db 01       	movw	r26, r22
    1b8e:	ca 01       	movw	r24, r20
    1b90:	8f 77       	andi	r24, 0x7F	; 127
    1b92:	90 70       	andi	r25, 0x00	; 0
    1b94:	a0 70       	andi	r26, 0x00	; 0
    1b96:	b0 70       	andi	r27, 0x00	; 0
    1b98:	80 34       	cpi	r24, 0x40	; 64
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	a1 05       	cpc	r26, r1
    1b9e:	b1 05       	cpc	r27, r1
    1ba0:	61 f4       	brne	.+24     	; 0x1bba <__mulsf3+0x1ce>
    1ba2:	47 fd       	sbrc	r20, 7
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <__mulsf3+0x1ce>
    1ba6:	e1 14       	cp	r14, r1
    1ba8:	f1 04       	cpc	r15, r1
    1baa:	01 05       	cpc	r16, r1
    1bac:	11 05       	cpc	r17, r1
    1bae:	29 f0       	breq	.+10     	; 0x1bba <__mulsf3+0x1ce>
    1bb0:	40 5c       	subi	r20, 0xC0	; 192
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	6f 4f       	sbci	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	40 78       	andi	r20, 0x80	; 128
    1bba:	1a 8e       	std	Y+26, r1	; 0x1a
    1bbc:	fe 17       	cp	r31, r30
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <__mulsf3+0x1d8>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc4:	4d 8f       	std	Y+29, r20	; 0x1d
    1bc6:	5e 8f       	std	Y+30, r21	; 0x1e
    1bc8:	6f 8f       	std	Y+31, r22	; 0x1f
    1bca:	78 a3       	std	Y+32, r23	; 0x20
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	89 8f       	std	Y+25, r24	; 0x19
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	49 96       	adiw	r24, 0x19	; 25
    1bd4:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    1bd8:	a0 96       	adiw	r28, 0x20	; 32
    1bda:	e2 e1       	ldi	r30, 0x12	; 18
    1bdc:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__>

00001be0 <__divsf3>:
    1be0:	a8 e1       	ldi	r26, 0x18	; 24
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e6 ef       	ldi	r30, 0xF6	; 246
    1be6:	fd e0       	ldi	r31, 0x0D	; 13
    1be8:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x10>
    1bec:	69 83       	std	Y+1, r22	; 0x01
    1bee:	7a 83       	std	Y+2, r23	; 0x02
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	2d 83       	std	Y+5, r18	; 0x05
    1bf6:	3e 83       	std	Y+6, r19	; 0x06
    1bf8:	4f 83       	std	Y+7, r20	; 0x07
    1bfa:	58 87       	std	Y+8, r21	; 0x08
    1bfc:	b9 e0       	ldi	r27, 0x09	; 9
    1bfe:	eb 2e       	mov	r14, r27
    1c00:	f1 2c       	mov	r15, r1
    1c02:	ec 0e       	add	r14, r28
    1c04:	fd 1e       	adc	r15, r29
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	b7 01       	movw	r22, r14
    1c0c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1c10:	8e 01       	movw	r16, r28
    1c12:	0f 5e       	subi	r16, 0xEF	; 239
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	ce 01       	movw	r24, r28
    1c18:	05 96       	adiw	r24, 0x05	; 5
    1c1a:	b8 01       	movw	r22, r16
    1c1c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1c20:	29 85       	ldd	r18, Y+9	; 0x09
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <__divsf3+0x48>
    1c26:	7e c0       	rjmp	.+252    	; 0x1d24 <__divsf3+0x144>
    1c28:	39 89       	ldd	r19, Y+17	; 0x11
    1c2a:	32 30       	cpi	r19, 0x02	; 2
    1c2c:	10 f4       	brcc	.+4      	; 0x1c32 <__divsf3+0x52>
    1c2e:	b8 01       	movw	r22, r16
    1c30:	7c c0       	rjmp	.+248    	; 0x1d2a <__divsf3+0x14a>
    1c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c34:	9a 89       	ldd	r25, Y+18	; 0x12
    1c36:	89 27       	eor	r24, r25
    1c38:	8a 87       	std	Y+10, r24	; 0x0a
    1c3a:	24 30       	cpi	r18, 0x04	; 4
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <__divsf3+0x62>
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 f4       	brne	.+12     	; 0x1c4e <__divsf3+0x6e>
    1c42:	23 17       	cp	r18, r19
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <__divsf3+0x68>
    1c46:	6e c0       	rjmp	.+220    	; 0x1d24 <__divsf3+0x144>
    1c48:	6b e4       	ldi	r22, 0x4B	; 75
    1c4a:	71 e0       	ldi	r23, 0x01	; 1
    1c4c:	6e c0       	rjmp	.+220    	; 0x1d2a <__divsf3+0x14a>
    1c4e:	34 30       	cpi	r19, 0x04	; 4
    1c50:	39 f4       	brne	.+14     	; 0x1c60 <__divsf3+0x80>
    1c52:	1d 86       	std	Y+13, r1	; 0x0d
    1c54:	1e 86       	std	Y+14, r1	; 0x0e
    1c56:	1f 86       	std	Y+15, r1	; 0x0f
    1c58:	18 8a       	std	Y+16, r1	; 0x10
    1c5a:	1c 86       	std	Y+12, r1	; 0x0c
    1c5c:	1b 86       	std	Y+11, r1	; 0x0b
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__divsf3+0x88>
    1c60:	32 30       	cpi	r19, 0x02	; 2
    1c62:	21 f4       	brne	.+8      	; 0x1c6c <__divsf3+0x8c>
    1c64:	84 e0       	ldi	r24, 0x04	; 4
    1c66:	89 87       	std	Y+9, r24	; 0x09
    1c68:	b7 01       	movw	r22, r14
    1c6a:	5f c0       	rjmp	.+190    	; 0x1d2a <__divsf3+0x14a>
    1c6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	28 1b       	sub	r18, r24
    1c76:	39 0b       	sbc	r19, r25
    1c78:	3c 87       	std	Y+12, r19	; 0x0c
    1c7a:	2b 87       	std	Y+11, r18	; 0x0b
    1c7c:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c7e:	fe 84       	ldd	r15, Y+14	; 0x0e
    1c80:	0f 85       	ldd	r16, Y+15	; 0x0f
    1c82:	18 89       	ldd	r17, Y+16	; 0x10
    1c84:	ad 88       	ldd	r10, Y+21	; 0x15
    1c86:	be 88       	ldd	r11, Y+22	; 0x16
    1c88:	cf 88       	ldd	r12, Y+23	; 0x17
    1c8a:	d8 8c       	ldd	r13, Y+24	; 0x18
    1c8c:	ea 14       	cp	r14, r10
    1c8e:	fb 04       	cpc	r15, r11
    1c90:	0c 05       	cpc	r16, r12
    1c92:	1d 05       	cpc	r17, r13
    1c94:	40 f4       	brcc	.+16     	; 0x1ca6 <__divsf3+0xc6>
    1c96:	ee 0c       	add	r14, r14
    1c98:	ff 1c       	adc	r15, r15
    1c9a:	00 1f       	adc	r16, r16
    1c9c:	11 1f       	adc	r17, r17
    1c9e:	21 50       	subi	r18, 0x01	; 1
    1ca0:	30 40       	sbci	r19, 0x00	; 0
    1ca2:	3c 87       	std	Y+12, r19	; 0x0c
    1ca4:	2b 87       	std	Y+11, r18	; 0x0b
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e4       	ldi	r27, 0x40	; 64
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	ea 14       	cp	r14, r10
    1cbc:	fb 04       	cpc	r15, r11
    1cbe:	0c 05       	cpc	r16, r12
    1cc0:	1d 05       	cpc	r17, r13
    1cc2:	40 f0       	brcs	.+16     	; 0x1cd4 <__divsf3+0xf4>
    1cc4:	28 2b       	or	r18, r24
    1cc6:	39 2b       	or	r19, r25
    1cc8:	4a 2b       	or	r20, r26
    1cca:	5b 2b       	or	r21, r27
    1ccc:	ea 18       	sub	r14, r10
    1cce:	fb 08       	sbc	r15, r11
    1cd0:	0c 09       	sbc	r16, r12
    1cd2:	1d 09       	sbc	r17, r13
    1cd4:	b6 95       	lsr	r27
    1cd6:	a7 95       	ror	r26
    1cd8:	97 95       	ror	r25
    1cda:	87 95       	ror	r24
    1cdc:	ee 0c       	add	r14, r14
    1cde:	ff 1c       	adc	r15, r15
    1ce0:	00 1f       	adc	r16, r16
    1ce2:	11 1f       	adc	r17, r17
    1ce4:	6f 5f       	subi	r22, 0xFF	; 255
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	6f 31       	cpi	r22, 0x1F	; 31
    1cea:	71 05       	cpc	r23, r1
    1cec:	31 f7       	brne	.-52     	; 0x1cba <__divsf3+0xda>
    1cee:	da 01       	movw	r26, r20
    1cf0:	c9 01       	movw	r24, r18
    1cf2:	8f 77       	andi	r24, 0x7F	; 127
    1cf4:	90 70       	andi	r25, 0x00	; 0
    1cf6:	a0 70       	andi	r26, 0x00	; 0
    1cf8:	b0 70       	andi	r27, 0x00	; 0
    1cfa:	80 34       	cpi	r24, 0x40	; 64
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	a1 05       	cpc	r26, r1
    1d00:	b1 05       	cpc	r27, r1
    1d02:	61 f4       	brne	.+24     	; 0x1d1c <__divsf3+0x13c>
    1d04:	27 fd       	sbrc	r18, 7
    1d06:	0a c0       	rjmp	.+20     	; 0x1d1c <__divsf3+0x13c>
    1d08:	e1 14       	cp	r14, r1
    1d0a:	f1 04       	cpc	r15, r1
    1d0c:	01 05       	cpc	r16, r1
    1d0e:	11 05       	cpc	r17, r1
    1d10:	29 f0       	breq	.+10     	; 0x1d1c <__divsf3+0x13c>
    1d12:	20 5c       	subi	r18, 0xC0	; 192
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	4f 4f       	sbci	r20, 0xFF	; 255
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	20 78       	andi	r18, 0x80	; 128
    1d1c:	2d 87       	std	Y+13, r18	; 0x0d
    1d1e:	3e 87       	std	Y+14, r19	; 0x0e
    1d20:	4f 87       	std	Y+15, r20	; 0x0f
    1d22:	58 8b       	std	Y+16, r21	; 0x10
    1d24:	be 01       	movw	r22, r28
    1d26:	67 5f       	subi	r22, 0xF7	; 247
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    1d30:	68 96       	adiw	r28, 0x18	; 24
    1d32:	ea e0       	ldi	r30, 0x0A	; 10
    1d34:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x10>

00001d38 <__gtsf2>:
    1d38:	a8 e1       	ldi	r26, 0x18	; 24
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    1d3e:	fe e0       	ldi	r31, 0x0E	; 14
    1d40:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
    1d44:	69 83       	std	Y+1, r22	; 0x01
    1d46:	7a 83       	std	Y+2, r23	; 0x02
    1d48:	8b 83       	std	Y+3, r24	; 0x03
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	2d 83       	std	Y+5, r18	; 0x05
    1d4e:	3e 83       	std	Y+6, r19	; 0x06
    1d50:	4f 83       	std	Y+7, r20	; 0x07
    1d52:	58 87       	std	Y+8, r21	; 0x08
    1d54:	89 e0       	ldi	r24, 0x09	; 9
    1d56:	e8 2e       	mov	r14, r24
    1d58:	f1 2c       	mov	r15, r1
    1d5a:	ec 0e       	add	r14, r28
    1d5c:	fd 1e       	adc	r15, r29
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	b7 01       	movw	r22, r14
    1d64:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0f 5e       	subi	r16, 0xEF	; 239
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	ce 01       	movw	r24, r28
    1d70:	05 96       	adiw	r24, 0x05	; 5
    1d72:	b8 01       	movw	r22, r16
    1d74:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	40 f0       	brcs	.+16     	; 0x1d8e <__gtsf2+0x56>
    1d7e:	89 89       	ldd	r24, Y+17	; 0x11
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	28 f0       	brcs	.+10     	; 0x1d8e <__gtsf2+0x56>
    1d84:	c7 01       	movw	r24, r14
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fpcmp_parts_f>
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <__gtsf2+0x58>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	68 96       	adiw	r28, 0x18	; 24
    1d92:	e6 e0       	ldi	r30, 0x06	; 6
    1d94:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00001d98 <__gesf2>:
    1d98:	a8 e1       	ldi	r26, 0x18	; 24
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1d9e:	fe e0       	ldi	r31, 0x0E	; 14
    1da0:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
    1da4:	69 83       	std	Y+1, r22	; 0x01
    1da6:	7a 83       	std	Y+2, r23	; 0x02
    1da8:	8b 83       	std	Y+3, r24	; 0x03
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	2d 83       	std	Y+5, r18	; 0x05
    1dae:	3e 83       	std	Y+6, r19	; 0x06
    1db0:	4f 83       	std	Y+7, r20	; 0x07
    1db2:	58 87       	std	Y+8, r21	; 0x08
    1db4:	89 e0       	ldi	r24, 0x09	; 9
    1db6:	e8 2e       	mov	r14, r24
    1db8:	f1 2c       	mov	r15, r1
    1dba:	ec 0e       	add	r14, r28
    1dbc:	fd 1e       	adc	r15, r29
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1dc8:	8e 01       	movw	r16, r28
    1dca:	0f 5e       	subi	r16, 0xEF	; 239
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	ce 01       	movw	r24, r28
    1dd0:	05 96       	adiw	r24, 0x05	; 5
    1dd2:	b8 01       	movw	r22, r16
    1dd4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	82 30       	cpi	r24, 0x02	; 2
    1ddc:	40 f0       	brcs	.+16     	; 0x1dee <__gesf2+0x56>
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	28 f0       	brcs	.+10     	; 0x1dee <__gesf2+0x56>
    1de4:	c7 01       	movw	r24, r14
    1de6:	b8 01       	movw	r22, r16
    1de8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fpcmp_parts_f>
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <__gesf2+0x58>
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	68 96       	adiw	r28, 0x18	; 24
    1df2:	e6 e0       	ldi	r30, 0x06	; 6
    1df4:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00001df8 <__ltsf2>:
    1df8:	a8 e1       	ldi	r26, 0x18	; 24
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e2 e0       	ldi	r30, 0x02	; 2
    1dfe:	ff e0       	ldi	r31, 0x0F	; 15
    1e00:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
    1e04:	69 83       	std	Y+1, r22	; 0x01
    1e06:	7a 83       	std	Y+2, r23	; 0x02
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	2d 83       	std	Y+5, r18	; 0x05
    1e0e:	3e 83       	std	Y+6, r19	; 0x06
    1e10:	4f 83       	std	Y+7, r20	; 0x07
    1e12:	58 87       	std	Y+8, r21	; 0x08
    1e14:	89 e0       	ldi	r24, 0x09	; 9
    1e16:	e8 2e       	mov	r14, r24
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	ec 0e       	add	r14, r28
    1e1c:	fd 1e       	adc	r15, r29
    1e1e:	ce 01       	movw	r24, r28
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	b7 01       	movw	r22, r14
    1e24:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1e28:	8e 01       	movw	r16, r28
    1e2a:	0f 5e       	subi	r16, 0xEF	; 239
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	ce 01       	movw	r24, r28
    1e30:	05 96       	adiw	r24, 0x05	; 5
    1e32:	b8 01       	movw	r22, r16
    1e34:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	40 f0       	brcs	.+16     	; 0x1e4e <__ltsf2+0x56>
    1e3e:	89 89       	ldd	r24, Y+17	; 0x11
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	28 f0       	brcs	.+10     	; 0x1e4e <__ltsf2+0x56>
    1e44:	c7 01       	movw	r24, r14
    1e46:	b8 01       	movw	r22, r16
    1e48:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fpcmp_parts_f>
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <__ltsf2+0x58>
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	68 96       	adiw	r28, 0x18	; 24
    1e52:	e6 e0       	ldi	r30, 0x06	; 6
    1e54:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00001e58 <__floatsisf>:
    1e58:	a8 e0       	ldi	r26, 0x08	; 8
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e2 e3       	ldi	r30, 0x32	; 50
    1e5e:	ff e0       	ldi	r31, 0x0F	; 15
    1e60:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__prologue_saves__+0x12>
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	da 01       	movw	r26, r20
    1e6e:	c9 01       	movw	r24, r18
    1e70:	88 27       	eor	r24, r24
    1e72:	b7 fd       	sbrc	r27, 7
    1e74:	83 95       	inc	r24
    1e76:	99 27       	eor	r25, r25
    1e78:	aa 27       	eor	r26, r26
    1e7a:	bb 27       	eor	r27, r27
    1e7c:	b8 2e       	mov	r11, r24
    1e7e:	21 15       	cp	r18, r1
    1e80:	31 05       	cpc	r19, r1
    1e82:	41 05       	cpc	r20, r1
    1e84:	51 05       	cpc	r21, r1
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <__floatsisf+0x36>
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	3a c0       	rjmp	.+116    	; 0x1f02 <__floatsisf+0xaa>
    1e8e:	88 23       	and	r24, r24
    1e90:	a9 f0       	breq	.+42     	; 0x1ebc <__floatsisf+0x64>
    1e92:	20 30       	cpi	r18, 0x00	; 0
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	38 07       	cpc	r19, r24
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	48 07       	cpc	r20, r24
    1e9c:	80 e8       	ldi	r24, 0x80	; 128
    1e9e:	58 07       	cpc	r21, r24
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <__floatsisf+0x54>
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	9f ec       	ldi	r25, 0xCF	; 207
    1eaa:	30 c0       	rjmp	.+96     	; 0x1f0c <__floatsisf+0xb4>
    1eac:	ee 24       	eor	r14, r14
    1eae:	ff 24       	eor	r15, r15
    1eb0:	87 01       	movw	r16, r14
    1eb2:	e2 1a       	sub	r14, r18
    1eb4:	f3 0a       	sbc	r15, r19
    1eb6:	04 0b       	sbc	r16, r20
    1eb8:	15 0b       	sbc	r17, r21
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <__floatsisf+0x68>
    1ebc:	79 01       	movw	r14, r18
    1ebe:	8a 01       	movw	r16, r20
    1ec0:	8e e1       	ldi	r24, 0x1E	; 30
    1ec2:	c8 2e       	mov	r12, r24
    1ec4:	d1 2c       	mov	r13, r1
    1ec6:	dc 82       	std	Y+4, r13	; 0x04
    1ec8:	cb 82       	std	Y+3, r12	; 0x03
    1eca:	ed 82       	std	Y+5, r14	; 0x05
    1ecc:	fe 82       	std	Y+6, r15	; 0x06
    1ece:	0f 83       	std	Y+7, r16	; 0x07
    1ed0:	18 87       	std	Y+8, r17	; 0x08
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	0e 94 57 10 	call	0x20ae	; 0x20ae <__clzsi2>
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	18 16       	cp	r1, r24
    1ede:	19 06       	cpc	r1, r25
    1ee0:	84 f4       	brge	.+32     	; 0x1f02 <__floatsisf+0xaa>
    1ee2:	08 2e       	mov	r0, r24
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <__floatsisf+0x96>
    1ee6:	ee 0c       	add	r14, r14
    1ee8:	ff 1c       	adc	r15, r15
    1eea:	00 1f       	adc	r16, r16
    1eec:	11 1f       	adc	r17, r17
    1eee:	0a 94       	dec	r0
    1ef0:	d2 f7       	brpl	.-12     	; 0x1ee6 <__floatsisf+0x8e>
    1ef2:	ed 82       	std	Y+5, r14	; 0x05
    1ef4:	fe 82       	std	Y+6, r15	; 0x06
    1ef6:	0f 83       	std	Y+7, r16	; 0x07
    1ef8:	18 87       	std	Y+8, r17	; 0x08
    1efa:	c8 1a       	sub	r12, r24
    1efc:	d9 0a       	sbc	r13, r25
    1efe:	dc 82       	std	Y+4, r13	; 0x04
    1f00:	cb 82       	std	Y+3, r12	; 0x03
    1f02:	ba 82       	std	Y+2, r11	; 0x02
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    1f0c:	28 96       	adiw	r28, 0x08	; 8
    1f0e:	e9 e0       	ldi	r30, 0x09	; 9
    1f10:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__epilogue_restores__+0x12>

00001f14 <__fixsfsi>:
    1f14:	ac e0       	ldi	r26, 0x0C	; 12
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e0 e9       	ldi	r30, 0x90	; 144
    1f1a:	ff e0       	ldi	r31, 0x0F	; 15
    1f1c:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x20>
    1f20:	69 83       	std	Y+1, r22	; 0x01
    1f22:	7a 83       	std	Y+2, r23	; 0x02
    1f24:	8b 83       	std	Y+3, r24	; 0x03
    1f26:	9c 83       	std	Y+4, r25	; 0x04
    1f28:	ce 01       	movw	r24, r28
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	be 01       	movw	r22, r28
    1f2e:	6b 5f       	subi	r22, 0xFB	; 251
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__unpack_f>
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	61 f1       	breq	.+88     	; 0x1f94 <__fixsfsi+0x80>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	50 f1       	brcs	.+84     	; 0x1f94 <__fixsfsi+0x80>
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	21 f4       	brne	.+8      	; 0x1f4c <__fixsfsi+0x38>
    1f44:	8e 81       	ldd	r24, Y+6	; 0x06
    1f46:	88 23       	and	r24, r24
    1f48:	51 f1       	breq	.+84     	; 0x1f9e <__fixsfsi+0x8a>
    1f4a:	2e c0       	rjmp	.+92     	; 0x1fa8 <__fixsfsi+0x94>
    1f4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f4e:	38 85       	ldd	r19, Y+8	; 0x08
    1f50:	37 fd       	sbrc	r19, 7
    1f52:	20 c0       	rjmp	.+64     	; 0x1f94 <__fixsfsi+0x80>
    1f54:	6e 81       	ldd	r22, Y+6	; 0x06
    1f56:	2f 31       	cpi	r18, 0x1F	; 31
    1f58:	31 05       	cpc	r19, r1
    1f5a:	1c f0       	brlt	.+6      	; 0x1f62 <__fixsfsi+0x4e>
    1f5c:	66 23       	and	r22, r22
    1f5e:	f9 f0       	breq	.+62     	; 0x1f9e <__fixsfsi+0x8a>
    1f60:	23 c0       	rjmp	.+70     	; 0x1fa8 <__fixsfsi+0x94>
    1f62:	8e e1       	ldi	r24, 0x1E	; 30
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	82 1b       	sub	r24, r18
    1f68:	93 0b       	sbc	r25, r19
    1f6a:	29 85       	ldd	r18, Y+9	; 0x09
    1f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f70:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__fixsfsi+0x68>
    1f74:	56 95       	lsr	r21
    1f76:	47 95       	ror	r20
    1f78:	37 95       	ror	r19
    1f7a:	27 95       	ror	r18
    1f7c:	8a 95       	dec	r24
    1f7e:	d2 f7       	brpl	.-12     	; 0x1f74 <__fixsfsi+0x60>
    1f80:	66 23       	and	r22, r22
    1f82:	b1 f0       	breq	.+44     	; 0x1fb0 <__fixsfsi+0x9c>
    1f84:	50 95       	com	r21
    1f86:	40 95       	com	r20
    1f88:	30 95       	com	r19
    1f8a:	21 95       	neg	r18
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f90:	5f 4f       	sbci	r21, 0xFF	; 255
    1f92:	0e c0       	rjmp	.+28     	; 0x1fb0 <__fixsfsi+0x9c>
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	09 c0       	rjmp	.+18     	; 0x1fb0 <__fixsfsi+0x9c>
    1f9e:	2f ef       	ldi	r18, 0xFF	; 255
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f ef       	ldi	r20, 0xFF	; 255
    1fa4:	5f e7       	ldi	r21, 0x7F	; 127
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <__fixsfsi+0x9c>
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e8       	ldi	r21, 0x80	; 128
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	2c 96       	adiw	r28, 0x0c	; 12
    1fb6:	e2 e0       	ldi	r30, 0x02	; 2
    1fb8:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x20>

00001fbc <__floatunsisf>:
    1fbc:	a8 e0       	ldi	r26, 0x08	; 8
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    1fc2:	ff e0       	ldi	r31, 0x0F	; 15
    1fc4:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x10>
    1fc8:	7b 01       	movw	r14, r22
    1fca:	8c 01       	movw	r16, r24
    1fcc:	61 15       	cp	r22, r1
    1fce:	71 05       	cpc	r23, r1
    1fd0:	81 05       	cpc	r24, r1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	19 f4       	brne	.+6      	; 0x1fdc <__floatunsisf+0x20>
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	60 c0       	rjmp	.+192    	; 0x209c <__floatunsisf+0xe0>
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	8e e1       	ldi	r24, 0x1E	; 30
    1fe2:	c8 2e       	mov	r12, r24
    1fe4:	d1 2c       	mov	r13, r1
    1fe6:	dc 82       	std	Y+4, r13	; 0x04
    1fe8:	cb 82       	std	Y+3, r12	; 0x03
    1fea:	ed 82       	std	Y+5, r14	; 0x05
    1fec:	fe 82       	std	Y+6, r15	; 0x06
    1fee:	0f 83       	std	Y+7, r16	; 0x07
    1ff0:	18 87       	std	Y+8, r17	; 0x08
    1ff2:	c8 01       	movw	r24, r16
    1ff4:	b7 01       	movw	r22, r14
    1ff6:	0e 94 57 10 	call	0x20ae	; 0x20ae <__clzsi2>
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	31 97       	sbiw	r30, 0x01	; 1
    1ffe:	f7 ff       	sbrs	r31, 7
    2000:	3b c0       	rjmp	.+118    	; 0x2078 <__floatunsisf+0xbc>
    2002:	22 27       	eor	r18, r18
    2004:	33 27       	eor	r19, r19
    2006:	2e 1b       	sub	r18, r30
    2008:	3f 0b       	sbc	r19, r31
    200a:	57 01       	movw	r10, r14
    200c:	68 01       	movw	r12, r16
    200e:	02 2e       	mov	r0, r18
    2010:	04 c0       	rjmp	.+8      	; 0x201a <__floatunsisf+0x5e>
    2012:	d6 94       	lsr	r13
    2014:	c7 94       	ror	r12
    2016:	b7 94       	ror	r11
    2018:	a7 94       	ror	r10
    201a:	0a 94       	dec	r0
    201c:	d2 f7       	brpl	.-12     	; 0x2012 <__floatunsisf+0x56>
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <__floatunsisf+0x7c>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	aa 1f       	adc	r26, r26
    2036:	bb 1f       	adc	r27, r27
    2038:	2a 95       	dec	r18
    203a:	d2 f7       	brpl	.-12     	; 0x2030 <__floatunsisf+0x74>
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	a1 09       	sbc	r26, r1
    2040:	b1 09       	sbc	r27, r1
    2042:	8e 21       	and	r24, r14
    2044:	9f 21       	and	r25, r15
    2046:	a0 23       	and	r26, r16
    2048:	b1 23       	and	r27, r17
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	a1 05       	cpc	r26, r1
    204e:	b1 05       	cpc	r27, r1
    2050:	21 f0       	breq	.+8      	; 0x205a <__floatunsisf+0x9e>
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	4a 29       	or	r20, r10
    205c:	5b 29       	or	r21, r11
    205e:	6c 29       	or	r22, r12
    2060:	7d 29       	or	r23, r13
    2062:	4d 83       	std	Y+5, r20	; 0x05
    2064:	5e 83       	std	Y+6, r21	; 0x06
    2066:	6f 83       	std	Y+7, r22	; 0x07
    2068:	78 87       	std	Y+8, r23	; 0x08
    206a:	8e e1       	ldi	r24, 0x1E	; 30
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	8e 1b       	sub	r24, r30
    2070:	9f 0b       	sbc	r25, r31
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	12 c0       	rjmp	.+36     	; 0x209c <__floatunsisf+0xe0>
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	81 f0       	breq	.+32     	; 0x209c <__floatunsisf+0xe0>
    207c:	0e 2e       	mov	r0, r30
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <__floatunsisf+0xcc>
    2080:	ee 0c       	add	r14, r14
    2082:	ff 1c       	adc	r15, r15
    2084:	00 1f       	adc	r16, r16
    2086:	11 1f       	adc	r17, r17
    2088:	0a 94       	dec	r0
    208a:	d2 f7       	brpl	.-12     	; 0x2080 <__floatunsisf+0xc4>
    208c:	ed 82       	std	Y+5, r14	; 0x05
    208e:	fe 82       	std	Y+6, r15	; 0x06
    2090:	0f 83       	std	Y+7, r16	; 0x07
    2092:	18 87       	std	Y+8, r17	; 0x08
    2094:	ce 1a       	sub	r12, r30
    2096:	df 0a       	sbc	r13, r31
    2098:	dc 82       	std	Y+4, r13	; 0x04
    209a:	cb 82       	std	Y+3, r12	; 0x03
    209c:	1a 82       	std	Y+2, r1	; 0x02
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 a6 10 	call	0x214c	; 0x214c <__pack_f>
    20a6:	28 96       	adiw	r28, 0x08	; 8
    20a8:	ea e0       	ldi	r30, 0x0A	; 10
    20aa:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x10>

000020ae <__clzsi2>:
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	7b 01       	movw	r14, r22
    20b8:	8c 01       	movw	r16, r24
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	e8 16       	cp	r14, r24
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	f8 06       	cpc	r15, r24
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	08 07       	cpc	r16, r24
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	18 07       	cpc	r17, r24
    20ca:	88 f4       	brcc	.+34     	; 0x20ee <__clzsi2+0x40>
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	e8 16       	cp	r14, r24
    20d0:	f1 04       	cpc	r15, r1
    20d2:	01 05       	cpc	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	31 f0       	breq	.+12     	; 0x20e4 <__clzsi2+0x36>
    20d8:	28 f0       	brcs	.+10     	; 0x20e4 <__clzsi2+0x36>
    20da:	88 e0       	ldi	r24, 0x08	; 8
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e0       	ldi	r26, 0x00	; 0
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	17 c0       	rjmp	.+46     	; 0x2112 <__clzsi2+0x64>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e0       	ldi	r26, 0x00	; 0
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	12 c0       	rjmp	.+36     	; 0x2112 <__clzsi2+0x64>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	e8 16       	cp	r14, r24
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	f8 06       	cpc	r15, r24
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	08 07       	cpc	r16, r24
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	18 07       	cpc	r17, r24
    20fe:	28 f0       	brcs	.+10     	; 0x210a <__clzsi2+0x5c>
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a0 e0       	ldi	r26, 0x00	; 0
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <__clzsi2+0x64>
    210a:	80 e1       	ldi	r24, 0x10	; 16
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e0       	ldi	r26, 0x00	; 0
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	20 e2       	ldi	r18, 0x20	; 32
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	28 1b       	sub	r18, r24
    211c:	39 0b       	sbc	r19, r25
    211e:	4a 0b       	sbc	r20, r26
    2120:	5b 0b       	sbc	r21, r27
    2122:	04 c0       	rjmp	.+8      	; 0x212c <__clzsi2+0x7e>
    2124:	16 95       	lsr	r17
    2126:	07 95       	ror	r16
    2128:	f7 94       	ror	r15
    212a:	e7 94       	ror	r14
    212c:	8a 95       	dec	r24
    212e:	d2 f7       	brpl	.-12     	; 0x2124 <__clzsi2+0x76>
    2130:	f7 01       	movw	r30, r14
    2132:	ed 5a       	subi	r30, 0xAD	; 173
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	80 81       	ld	r24, Z
    2138:	28 1b       	sub	r18, r24
    213a:	31 09       	sbc	r19, r1
    213c:	41 09       	sbc	r20, r1
    213e:	51 09       	sbc	r21, r1
    2140:	c9 01       	movw	r24, r18
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	08 95       	ret

0000214c <__pack_f>:
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	fc 01       	movw	r30, r24
    2158:	e4 80       	ldd	r14, Z+4	; 0x04
    215a:	f5 80       	ldd	r15, Z+5	; 0x05
    215c:	06 81       	ldd	r16, Z+6	; 0x06
    215e:	17 81       	ldd	r17, Z+7	; 0x07
    2160:	d1 80       	ldd	r13, Z+1	; 0x01
    2162:	80 81       	ld	r24, Z
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	48 f4       	brcc	.+18     	; 0x217a <__pack_f+0x2e>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e1       	ldi	r26, 0x10	; 16
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e8 2a       	or	r14, r24
    2172:	f9 2a       	or	r15, r25
    2174:	0a 2b       	or	r16, r26
    2176:	1b 2b       	or	r17, r27
    2178:	a5 c0       	rjmp	.+330    	; 0x22c4 <__pack_f+0x178>
    217a:	84 30       	cpi	r24, 0x04	; 4
    217c:	09 f4       	brne	.+2      	; 0x2180 <__pack_f+0x34>
    217e:	9f c0       	rjmp	.+318    	; 0x22be <__pack_f+0x172>
    2180:	82 30       	cpi	r24, 0x02	; 2
    2182:	21 f4       	brne	.+8      	; 0x218c <__pack_f+0x40>
    2184:	ee 24       	eor	r14, r14
    2186:	ff 24       	eor	r15, r15
    2188:	87 01       	movw	r16, r14
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <__pack_f+0x4a>
    218c:	e1 14       	cp	r14, r1
    218e:	f1 04       	cpc	r15, r1
    2190:	01 05       	cpc	r16, r1
    2192:	11 05       	cpc	r17, r1
    2194:	19 f4       	brne	.+6      	; 0x219c <__pack_f+0x50>
    2196:	e0 e0       	ldi	r30, 0x00	; 0
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	96 c0       	rjmp	.+300    	; 0x22c8 <__pack_f+0x17c>
    219c:	62 81       	ldd	r22, Z+2	; 0x02
    219e:	73 81       	ldd	r23, Z+3	; 0x03
    21a0:	9f ef       	ldi	r25, 0xFF	; 255
    21a2:	62 38       	cpi	r22, 0x82	; 130
    21a4:	79 07       	cpc	r23, r25
    21a6:	0c f0       	brlt	.+2      	; 0x21aa <__pack_f+0x5e>
    21a8:	5b c0       	rjmp	.+182    	; 0x2260 <__pack_f+0x114>
    21aa:	22 e8       	ldi	r18, 0x82	; 130
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	26 1b       	sub	r18, r22
    21b0:	37 0b       	sbc	r19, r23
    21b2:	2a 31       	cpi	r18, 0x1A	; 26
    21b4:	31 05       	cpc	r19, r1
    21b6:	2c f0       	brlt	.+10     	; 0x21c2 <__pack_f+0x76>
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	2a c0       	rjmp	.+84     	; 0x2216 <__pack_f+0xca>
    21c2:	b8 01       	movw	r22, r16
    21c4:	a7 01       	movw	r20, r14
    21c6:	02 2e       	mov	r0, r18
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <__pack_f+0x86>
    21ca:	76 95       	lsr	r23
    21cc:	67 95       	ror	r22
    21ce:	57 95       	ror	r21
    21d0:	47 95       	ror	r20
    21d2:	0a 94       	dec	r0
    21d4:	d2 f7       	brpl	.-12     	; 0x21ca <__pack_f+0x7e>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <__pack_f+0x9c>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	aa 1f       	adc	r26, r26
    21e6:	bb 1f       	adc	r27, r27
    21e8:	2a 95       	dec	r18
    21ea:	d2 f7       	brpl	.-12     	; 0x21e0 <__pack_f+0x94>
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	a1 09       	sbc	r26, r1
    21f0:	b1 09       	sbc	r27, r1
    21f2:	8e 21       	and	r24, r14
    21f4:	9f 21       	and	r25, r15
    21f6:	a0 23       	and	r26, r16
    21f8:	b1 23       	and	r27, r17
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	a1 05       	cpc	r26, r1
    21fe:	b1 05       	cpc	r27, r1
    2200:	21 f0       	breq	.+8      	; 0x220a <__pack_f+0xbe>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	9a 01       	movw	r18, r20
    220c:	ab 01       	movw	r20, r22
    220e:	28 2b       	or	r18, r24
    2210:	39 2b       	or	r19, r25
    2212:	4a 2b       	or	r20, r26
    2214:	5b 2b       	or	r21, r27
    2216:	da 01       	movw	r26, r20
    2218:	c9 01       	movw	r24, r18
    221a:	8f 77       	andi	r24, 0x7F	; 127
    221c:	90 70       	andi	r25, 0x00	; 0
    221e:	a0 70       	andi	r26, 0x00	; 0
    2220:	b0 70       	andi	r27, 0x00	; 0
    2222:	80 34       	cpi	r24, 0x40	; 64
    2224:	91 05       	cpc	r25, r1
    2226:	a1 05       	cpc	r26, r1
    2228:	b1 05       	cpc	r27, r1
    222a:	39 f4       	brne	.+14     	; 0x223a <__pack_f+0xee>
    222c:	27 ff       	sbrs	r18, 7
    222e:	09 c0       	rjmp	.+18     	; 0x2242 <__pack_f+0xf6>
    2230:	20 5c       	subi	r18, 0xC0	; 192
    2232:	3f 4f       	sbci	r19, 0xFF	; 255
    2234:	4f 4f       	sbci	r20, 0xFF	; 255
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	04 c0       	rjmp	.+8      	; 0x2242 <__pack_f+0xf6>
    223a:	21 5c       	subi	r18, 0xC1	; 193
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	4f 4f       	sbci	r20, 0xFF	; 255
    2240:	5f 4f       	sbci	r21, 0xFF	; 255
    2242:	e0 e0       	ldi	r30, 0x00	; 0
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	20 30       	cpi	r18, 0x00	; 0
    2248:	a0 e0       	ldi	r26, 0x00	; 0
    224a:	3a 07       	cpc	r19, r26
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	4a 07       	cpc	r20, r26
    2250:	a0 e4       	ldi	r26, 0x40	; 64
    2252:	5a 07       	cpc	r21, r26
    2254:	10 f0       	brcs	.+4      	; 0x225a <__pack_f+0x10e>
    2256:	e1 e0       	ldi	r30, 0x01	; 1
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	79 01       	movw	r14, r18
    225c:	8a 01       	movw	r16, r20
    225e:	27 c0       	rjmp	.+78     	; 0x22ae <__pack_f+0x162>
    2260:	60 38       	cpi	r22, 0x80	; 128
    2262:	71 05       	cpc	r23, r1
    2264:	64 f5       	brge	.+88     	; 0x22be <__pack_f+0x172>
    2266:	fb 01       	movw	r30, r22
    2268:	e1 58       	subi	r30, 0x81	; 129
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	d8 01       	movw	r26, r16
    226e:	c7 01       	movw	r24, r14
    2270:	8f 77       	andi	r24, 0x7F	; 127
    2272:	90 70       	andi	r25, 0x00	; 0
    2274:	a0 70       	andi	r26, 0x00	; 0
    2276:	b0 70       	andi	r27, 0x00	; 0
    2278:	80 34       	cpi	r24, 0x40	; 64
    227a:	91 05       	cpc	r25, r1
    227c:	a1 05       	cpc	r26, r1
    227e:	b1 05       	cpc	r27, r1
    2280:	39 f4       	brne	.+14     	; 0x2290 <__pack_f+0x144>
    2282:	e7 fe       	sbrs	r14, 7
    2284:	0d c0       	rjmp	.+26     	; 0x22a0 <__pack_f+0x154>
    2286:	80 e4       	ldi	r24, 0x40	; 64
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <__pack_f+0x14c>
    2290:	8f e3       	ldi	r24, 0x3F	; 63
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e8 0e       	add	r14, r24
    229a:	f9 1e       	adc	r15, r25
    229c:	0a 1f       	adc	r16, r26
    229e:	1b 1f       	adc	r17, r27
    22a0:	17 ff       	sbrs	r17, 7
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <__pack_f+0x162>
    22a4:	16 95       	lsr	r17
    22a6:	07 95       	ror	r16
    22a8:	f7 94       	ror	r15
    22aa:	e7 94       	ror	r14
    22ac:	31 96       	adiw	r30, 0x01	; 1
    22ae:	87 e0       	ldi	r24, 0x07	; 7
    22b0:	16 95       	lsr	r17
    22b2:	07 95       	ror	r16
    22b4:	f7 94       	ror	r15
    22b6:	e7 94       	ror	r14
    22b8:	8a 95       	dec	r24
    22ba:	d1 f7       	brne	.-12     	; 0x22b0 <__pack_f+0x164>
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__pack_f+0x17c>
    22be:	ee 24       	eor	r14, r14
    22c0:	ff 24       	eor	r15, r15
    22c2:	87 01       	movw	r16, r14
    22c4:	ef ef       	ldi	r30, 0xFF	; 255
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	6e 2f       	mov	r22, r30
    22ca:	67 95       	ror	r22
    22cc:	66 27       	eor	r22, r22
    22ce:	67 95       	ror	r22
    22d0:	90 2f       	mov	r25, r16
    22d2:	9f 77       	andi	r25, 0x7F	; 127
    22d4:	d7 94       	ror	r13
    22d6:	dd 24       	eor	r13, r13
    22d8:	d7 94       	ror	r13
    22da:	8e 2f       	mov	r24, r30
    22dc:	86 95       	lsr	r24
    22de:	49 2f       	mov	r20, r25
    22e0:	46 2b       	or	r20, r22
    22e2:	58 2f       	mov	r21, r24
    22e4:	5d 29       	or	r21, r13
    22e6:	b7 01       	movw	r22, r14
    22e8:	ca 01       	movw	r24, r20
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	08 95       	ret

000022f6 <__unpack_f>:
    22f6:	fc 01       	movw	r30, r24
    22f8:	db 01       	movw	r26, r22
    22fa:	40 81       	ld	r20, Z
    22fc:	51 81       	ldd	r21, Z+1	; 0x01
    22fe:	22 81       	ldd	r18, Z+2	; 0x02
    2300:	62 2f       	mov	r22, r18
    2302:	6f 77       	andi	r22, 0x7F	; 127
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	22 1f       	adc	r18, r18
    2308:	22 27       	eor	r18, r18
    230a:	22 1f       	adc	r18, r18
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	89 2f       	mov	r24, r25
    2310:	88 0f       	add	r24, r24
    2312:	82 2b       	or	r24, r18
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	99 1f       	adc	r25, r25
    231a:	99 27       	eor	r25, r25
    231c:	99 1f       	adc	r25, r25
    231e:	11 96       	adiw	r26, 0x01	; 1
    2320:	9c 93       	st	X, r25
    2322:	11 97       	sbiw	r26, 0x01	; 1
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	a9 f5       	brne	.+106    	; 0x2394 <__unpack_f+0x9e>
    232a:	41 15       	cp	r20, r1
    232c:	51 05       	cpc	r21, r1
    232e:	61 05       	cpc	r22, r1
    2330:	71 05       	cpc	r23, r1
    2332:	11 f4       	brne	.+4      	; 0x2338 <__unpack_f+0x42>
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	37 c0       	rjmp	.+110    	; 0x23a6 <__unpack_f+0xb0>
    2338:	82 e8       	ldi	r24, 0x82	; 130
    233a:	9f ef       	ldi	r25, 0xFF	; 255
    233c:	13 96       	adiw	r26, 0x03	; 3
    233e:	9c 93       	st	X, r25
    2340:	8e 93       	st	-X, r24
    2342:	12 97       	sbiw	r26, 0x02	; 2
    2344:	9a 01       	movw	r18, r20
    2346:	ab 01       	movw	r20, r22
    2348:	67 e0       	ldi	r22, 0x07	; 7
    234a:	22 0f       	add	r18, r18
    234c:	33 1f       	adc	r19, r19
    234e:	44 1f       	adc	r20, r20
    2350:	55 1f       	adc	r21, r21
    2352:	6a 95       	dec	r22
    2354:	d1 f7       	brne	.-12     	; 0x234a <__unpack_f+0x54>
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	8c 93       	st	X, r24
    235a:	0d c0       	rjmp	.+26     	; 0x2376 <__unpack_f+0x80>
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	44 1f       	adc	r20, r20
    2362:	55 1f       	adc	r21, r21
    2364:	12 96       	adiw	r26, 0x02	; 2
    2366:	8d 91       	ld	r24, X+
    2368:	9c 91       	ld	r25, X
    236a:	13 97       	sbiw	r26, 0x03	; 3
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	13 96       	adiw	r26, 0x03	; 3
    2370:	9c 93       	st	X, r25
    2372:	8e 93       	st	-X, r24
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	20 30       	cpi	r18, 0x00	; 0
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	38 07       	cpc	r19, r24
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	48 07       	cpc	r20, r24
    2380:	80 e4       	ldi	r24, 0x40	; 64
    2382:	58 07       	cpc	r21, r24
    2384:	58 f3       	brcs	.-42     	; 0x235c <__unpack_f+0x66>
    2386:	14 96       	adiw	r26, 0x04	; 4
    2388:	2d 93       	st	X+, r18
    238a:	3d 93       	st	X+, r19
    238c:	4d 93       	st	X+, r20
    238e:	5c 93       	st	X, r21
    2390:	17 97       	sbiw	r26, 0x07	; 7
    2392:	08 95       	ret
    2394:	2f 3f       	cpi	r18, 0xFF	; 255
    2396:	31 05       	cpc	r19, r1
    2398:	79 f4       	brne	.+30     	; 0x23b8 <__unpack_f+0xc2>
    239a:	41 15       	cp	r20, r1
    239c:	51 05       	cpc	r21, r1
    239e:	61 05       	cpc	r22, r1
    23a0:	71 05       	cpc	r23, r1
    23a2:	19 f4       	brne	.+6      	; 0x23aa <__unpack_f+0xb4>
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	8c 93       	st	X, r24
    23a8:	08 95       	ret
    23aa:	64 ff       	sbrs	r22, 4
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <__unpack_f+0xbe>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	8c 93       	st	X, r24
    23b2:	12 c0       	rjmp	.+36     	; 0x23d8 <__unpack_f+0xe2>
    23b4:	1c 92       	st	X, r1
    23b6:	10 c0       	rjmp	.+32     	; 0x23d8 <__unpack_f+0xe2>
    23b8:	2f 57       	subi	r18, 0x7F	; 127
    23ba:	30 40       	sbci	r19, 0x00	; 0
    23bc:	13 96       	adiw	r26, 0x03	; 3
    23be:	3c 93       	st	X, r19
    23c0:	2e 93       	st	-X, r18
    23c2:	12 97       	sbiw	r26, 0x02	; 2
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	8c 93       	st	X, r24
    23c8:	87 e0       	ldi	r24, 0x07	; 7
    23ca:	44 0f       	add	r20, r20
    23cc:	55 1f       	adc	r21, r21
    23ce:	66 1f       	adc	r22, r22
    23d0:	77 1f       	adc	r23, r23
    23d2:	8a 95       	dec	r24
    23d4:	d1 f7       	brne	.-12     	; 0x23ca <__unpack_f+0xd4>
    23d6:	70 64       	ori	r23, 0x40	; 64
    23d8:	14 96       	adiw	r26, 0x04	; 4
    23da:	4d 93       	st	X+, r20
    23dc:	5d 93       	st	X+, r21
    23de:	6d 93       	st	X+, r22
    23e0:	7c 93       	st	X, r23
    23e2:	17 97       	sbiw	r26, 0x07	; 7
    23e4:	08 95       	ret

000023e6 <__fpcmp_parts_f>:
    23e6:	1f 93       	push	r17
    23e8:	dc 01       	movw	r26, r24
    23ea:	fb 01       	movw	r30, r22
    23ec:	9c 91       	ld	r25, X
    23ee:	92 30       	cpi	r25, 0x02	; 2
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <__fpcmp_parts_f+0xe>
    23f2:	47 c0       	rjmp	.+142    	; 0x2482 <__fpcmp_parts_f+0x9c>
    23f4:	80 81       	ld	r24, Z
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <__fpcmp_parts_f+0x16>
    23fa:	43 c0       	rjmp	.+134    	; 0x2482 <__fpcmp_parts_f+0x9c>
    23fc:	94 30       	cpi	r25, 0x04	; 4
    23fe:	51 f4       	brne	.+20     	; 0x2414 <__fpcmp_parts_f+0x2e>
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	1c 91       	ld	r17, X
    2404:	84 30       	cpi	r24, 0x04	; 4
    2406:	99 f5       	brne	.+102    	; 0x246e <__fpcmp_parts_f+0x88>
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	68 2f       	mov	r22, r24
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	61 1b       	sub	r22, r17
    2410:	71 09       	sbc	r23, r1
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <__fpcmp_parts_f+0xac>
    2414:	84 30       	cpi	r24, 0x04	; 4
    2416:	21 f0       	breq	.+8      	; 0x2420 <__fpcmp_parts_f+0x3a>
    2418:	92 30       	cpi	r25, 0x02	; 2
    241a:	31 f4       	brne	.+12     	; 0x2428 <__fpcmp_parts_f+0x42>
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	b9 f1       	breq	.+110    	; 0x248e <__fpcmp_parts_f+0xa8>
    2420:	81 81       	ldd	r24, Z+1	; 0x01
    2422:	88 23       	and	r24, r24
    2424:	89 f1       	breq	.+98     	; 0x2488 <__fpcmp_parts_f+0xa2>
    2426:	2d c0       	rjmp	.+90     	; 0x2482 <__fpcmp_parts_f+0x9c>
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	1c 91       	ld	r17, X
    242c:	11 97       	sbiw	r26, 0x01	; 1
    242e:	82 30       	cpi	r24, 0x02	; 2
    2430:	f1 f0       	breq	.+60     	; 0x246e <__fpcmp_parts_f+0x88>
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	18 17       	cp	r17, r24
    2436:	d9 f4       	brne	.+54     	; 0x246e <__fpcmp_parts_f+0x88>
    2438:	12 96       	adiw	r26, 0x02	; 2
    243a:	2d 91       	ld	r18, X+
    243c:	3c 91       	ld	r19, X
    243e:	13 97       	sbiw	r26, 0x03	; 3
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	82 17       	cp	r24, r18
    2446:	93 07       	cpc	r25, r19
    2448:	94 f0       	brlt	.+36     	; 0x246e <__fpcmp_parts_f+0x88>
    244a:	28 17       	cp	r18, r24
    244c:	39 07       	cpc	r19, r25
    244e:	bc f0       	brlt	.+46     	; 0x247e <__fpcmp_parts_f+0x98>
    2450:	14 96       	adiw	r26, 0x04	; 4
    2452:	8d 91       	ld	r24, X+
    2454:	9d 91       	ld	r25, X+
    2456:	0d 90       	ld	r0, X+
    2458:	bc 91       	ld	r27, X
    245a:	a0 2d       	mov	r26, r0
    245c:	24 81       	ldd	r18, Z+4	; 0x04
    245e:	35 81       	ldd	r19, Z+5	; 0x05
    2460:	46 81       	ldd	r20, Z+6	; 0x06
    2462:	57 81       	ldd	r21, Z+7	; 0x07
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	4a 07       	cpc	r20, r26
    246a:	5b 07       	cpc	r21, r27
    246c:	18 f4       	brcc	.+6      	; 0x2474 <__fpcmp_parts_f+0x8e>
    246e:	11 23       	and	r17, r17
    2470:	41 f0       	breq	.+16     	; 0x2482 <__fpcmp_parts_f+0x9c>
    2472:	0a c0       	rjmp	.+20     	; 0x2488 <__fpcmp_parts_f+0xa2>
    2474:	82 17       	cp	r24, r18
    2476:	93 07       	cpc	r25, r19
    2478:	a4 07       	cpc	r26, r20
    247a:	b5 07       	cpc	r27, r21
    247c:	40 f4       	brcc	.+16     	; 0x248e <__fpcmp_parts_f+0xa8>
    247e:	11 23       	and	r17, r17
    2480:	19 f0       	breq	.+6      	; 0x2488 <__fpcmp_parts_f+0xa2>
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <__fpcmp_parts_f+0xac>
    2488:	6f ef       	ldi	r22, 0xFF	; 255
    248a:	7f ef       	ldi	r23, 0xFF	; 255
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <__fpcmp_parts_f+0xac>
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	cb 01       	movw	r24, r22
    2494:	1f 91       	pop	r17
    2496:	08 95       	ret

00002498 <__mulsi3>:
    2498:	62 9f       	mul	r22, r18
    249a:	d0 01       	movw	r26, r0
    249c:	73 9f       	mul	r23, r19
    249e:	f0 01       	movw	r30, r0
    24a0:	82 9f       	mul	r24, r18
    24a2:	e0 0d       	add	r30, r0
    24a4:	f1 1d       	adc	r31, r1
    24a6:	64 9f       	mul	r22, r20
    24a8:	e0 0d       	add	r30, r0
    24aa:	f1 1d       	adc	r31, r1
    24ac:	92 9f       	mul	r25, r18
    24ae:	f0 0d       	add	r31, r0
    24b0:	83 9f       	mul	r24, r19
    24b2:	f0 0d       	add	r31, r0
    24b4:	74 9f       	mul	r23, r20
    24b6:	f0 0d       	add	r31, r0
    24b8:	65 9f       	mul	r22, r21
    24ba:	f0 0d       	add	r31, r0
    24bc:	99 27       	eor	r25, r25
    24be:	72 9f       	mul	r23, r18
    24c0:	b0 0d       	add	r27, r0
    24c2:	e1 1d       	adc	r30, r1
    24c4:	f9 1f       	adc	r31, r25
    24c6:	63 9f       	mul	r22, r19
    24c8:	b0 0d       	add	r27, r0
    24ca:	e1 1d       	adc	r30, r1
    24cc:	f9 1f       	adc	r31, r25
    24ce:	bd 01       	movw	r22, r26
    24d0:	cf 01       	movw	r24, r30
    24d2:	11 24       	eor	r1, r1
    24d4:	08 95       	ret

000024d6 <__udivmodhi4>:
    24d6:	aa 1b       	sub	r26, r26
    24d8:	bb 1b       	sub	r27, r27
    24da:	51 e1       	ldi	r21, 0x11	; 17
    24dc:	07 c0       	rjmp	.+14     	; 0x24ec <__udivmodhi4_ep>

000024de <__udivmodhi4_loop>:
    24de:	aa 1f       	adc	r26, r26
    24e0:	bb 1f       	adc	r27, r27
    24e2:	a6 17       	cp	r26, r22
    24e4:	b7 07       	cpc	r27, r23
    24e6:	10 f0       	brcs	.+4      	; 0x24ec <__udivmodhi4_ep>
    24e8:	a6 1b       	sub	r26, r22
    24ea:	b7 0b       	sbc	r27, r23

000024ec <__udivmodhi4_ep>:
    24ec:	88 1f       	adc	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	5a 95       	dec	r21
    24f2:	a9 f7       	brne	.-22     	; 0x24de <__udivmodhi4_loop>
    24f4:	80 95       	com	r24
    24f6:	90 95       	com	r25
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	08 95       	ret

000024fe <__divmodhi4>:
    24fe:	97 fb       	bst	r25, 7
    2500:	09 2e       	mov	r0, r25
    2502:	07 26       	eor	r0, r23
    2504:	0a d0       	rcall	.+20     	; 0x251a <__divmodhi4_neg1>
    2506:	77 fd       	sbrc	r23, 7
    2508:	04 d0       	rcall	.+8      	; 0x2512 <__divmodhi4_neg2>
    250a:	e5 df       	rcall	.-54     	; 0x24d6 <__udivmodhi4>
    250c:	06 d0       	rcall	.+12     	; 0x251a <__divmodhi4_neg1>
    250e:	00 20       	and	r0, r0
    2510:	1a f4       	brpl	.+6      	; 0x2518 <__divmodhi4_exit>

00002512 <__divmodhi4_neg2>:
    2512:	70 95       	com	r23
    2514:	61 95       	neg	r22
    2516:	7f 4f       	sbci	r23, 0xFF	; 255

00002518 <__divmodhi4_exit>:
    2518:	08 95       	ret

0000251a <__divmodhi4_neg1>:
    251a:	f6 f7       	brtc	.-4      	; 0x2518 <__divmodhi4_exit>
    251c:	90 95       	com	r25
    251e:	81 95       	neg	r24
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	08 95       	ret

00002524 <__udivmodsi4>:
    2524:	a1 e2       	ldi	r26, 0x21	; 33
    2526:	1a 2e       	mov	r1, r26
    2528:	aa 1b       	sub	r26, r26
    252a:	bb 1b       	sub	r27, r27
    252c:	fd 01       	movw	r30, r26
    252e:	0d c0       	rjmp	.+26     	; 0x254a <__udivmodsi4_ep>

00002530 <__udivmodsi4_loop>:
    2530:	aa 1f       	adc	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	ee 1f       	adc	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	a2 17       	cp	r26, r18
    253a:	b3 07       	cpc	r27, r19
    253c:	e4 07       	cpc	r30, r20
    253e:	f5 07       	cpc	r31, r21
    2540:	20 f0       	brcs	.+8      	; 0x254a <__udivmodsi4_ep>
    2542:	a2 1b       	sub	r26, r18
    2544:	b3 0b       	sbc	r27, r19
    2546:	e4 0b       	sbc	r30, r20
    2548:	f5 0b       	sbc	r31, r21

0000254a <__udivmodsi4_ep>:
    254a:	66 1f       	adc	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	88 1f       	adc	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	1a 94       	dec	r1
    2554:	69 f7       	brne	.-38     	; 0x2530 <__udivmodsi4_loop>
    2556:	60 95       	com	r22
    2558:	70 95       	com	r23
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	9b 01       	movw	r18, r22
    2560:	ac 01       	movw	r20, r24
    2562:	bd 01       	movw	r22, r26
    2564:	cf 01       	movw	r24, r30
    2566:	08 95       	ret

00002568 <__prologue_saves__>:
    2568:	2f 92       	push	r2
    256a:	3f 92       	push	r3
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	ca 1b       	sub	r28, r26
    2592:	db 0b       	sbc	r29, r27
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	09 94       	ijmp

000025a0 <__epilogue_restores__>:
    25a0:	2a 88       	ldd	r2, Y+18	; 0x12
    25a2:	39 88       	ldd	r3, Y+17	; 0x11
    25a4:	48 88       	ldd	r4, Y+16	; 0x10
    25a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    25a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    25aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b2:	b9 84       	ldd	r11, Y+9	; 0x09
    25b4:	c8 84       	ldd	r12, Y+8	; 0x08
    25b6:	df 80       	ldd	r13, Y+7	; 0x07
    25b8:	ee 80       	ldd	r14, Y+6	; 0x06
    25ba:	fd 80       	ldd	r15, Y+5	; 0x05
    25bc:	0c 81       	ldd	r16, Y+4	; 0x04
    25be:	1b 81       	ldd	r17, Y+3	; 0x03
    25c0:	aa 81       	ldd	r26, Y+2	; 0x02
    25c2:	b9 81       	ldd	r27, Y+1	; 0x01
    25c4:	ce 0f       	add	r28, r30
    25c6:	d1 1d       	adc	r29, r1
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	ed 01       	movw	r28, r26
    25d4:	08 95       	ret

000025d6 <sprintf>:
    25d6:	ae e0       	ldi	r26, 0x0E	; 14
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e1 ef       	ldi	r30, 0xF1	; 241
    25dc:	f2 e1       	ldi	r31, 0x12	; 18
    25de:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x1c>
    25e2:	0d 89       	ldd	r16, Y+21	; 0x15
    25e4:	1e 89       	ldd	r17, Y+22	; 0x16
    25e6:	86 e0       	ldi	r24, 0x06	; 6
    25e8:	8c 83       	std	Y+4, r24	; 0x04
    25ea:	1a 83       	std	Y+2, r17	; 0x02
    25ec:	09 83       	std	Y+1, r16	; 0x01
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	9f e7       	ldi	r25, 0x7F	; 127
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	9e 01       	movw	r18, r28
    25f8:	27 5e       	subi	r18, 0xE7	; 231
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	ce 01       	movw	r24, r28
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	6f 89       	ldd	r22, Y+23	; 0x17
    2602:	78 8d       	ldd	r23, Y+24	; 0x18
    2604:	a9 01       	movw	r20, r18
    2606:	0e 94 0f 13 	call	0x261e	; 0x261e <vfprintf>
    260a:	2f 81       	ldd	r18, Y+7	; 0x07
    260c:	38 85       	ldd	r19, Y+8	; 0x08
    260e:	02 0f       	add	r16, r18
    2610:	13 1f       	adc	r17, r19
    2612:	f8 01       	movw	r30, r16
    2614:	10 82       	st	Z, r1
    2616:	2e 96       	adiw	r28, 0x0e	; 14
    2618:	e4 e0       	ldi	r30, 0x04	; 4
    261a:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x1c>

0000261e <vfprintf>:
    261e:	ab e0       	ldi	r26, 0x0B	; 11
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e1       	ldi	r30, 0x15	; 21
    2624:	f3 e1       	ldi	r31, 0x13	; 19
    2626:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__>
    262a:	3c 01       	movw	r6, r24
    262c:	2b 01       	movw	r4, r22
    262e:	5a 01       	movw	r10, r20
    2630:	fc 01       	movw	r30, r24
    2632:	17 82       	std	Z+7, r1	; 0x07
    2634:	16 82       	std	Z+6, r1	; 0x06
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	81 fd       	sbrc	r24, 1
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <vfprintf+0x24>
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	7f ef       	ldi	r23, 0xFF	; 255
    2640:	c6 c1       	rjmp	.+908    	; 0x29ce <vfprintf+0x3b0>
    2642:	9a e0       	ldi	r25, 0x0A	; 10
    2644:	89 2e       	mov	r8, r25
    2646:	1e 01       	movw	r2, r28
    2648:	08 94       	sec
    264a:	21 1c       	adc	r2, r1
    264c:	31 1c       	adc	r3, r1
    264e:	f3 01       	movw	r30, r6
    2650:	23 81       	ldd	r18, Z+3	; 0x03
    2652:	f2 01       	movw	r30, r4
    2654:	23 fd       	sbrc	r18, 3
    2656:	85 91       	lpm	r24, Z+
    2658:	23 ff       	sbrs	r18, 3
    265a:	81 91       	ld	r24, Z+
    265c:	2f 01       	movw	r4, r30
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <vfprintf+0x46>
    2662:	b2 c1       	rjmp	.+868    	; 0x29c8 <vfprintf+0x3aa>
    2664:	85 32       	cpi	r24, 0x25	; 37
    2666:	39 f4       	brne	.+14     	; 0x2676 <vfprintf+0x58>
    2668:	23 fd       	sbrc	r18, 3
    266a:	85 91       	lpm	r24, Z+
    266c:	23 ff       	sbrs	r18, 3
    266e:	81 91       	ld	r24, Z+
    2670:	2f 01       	movw	r4, r30
    2672:	85 32       	cpi	r24, 0x25	; 37
    2674:	29 f4       	brne	.+10     	; 0x2680 <vfprintf+0x62>
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	b3 01       	movw	r22, r6
    267a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    267e:	e7 cf       	rjmp	.-50     	; 0x264e <vfprintf+0x30>
    2680:	98 2f       	mov	r25, r24
    2682:	ff 24       	eor	r15, r15
    2684:	ee 24       	eor	r14, r14
    2686:	99 24       	eor	r9, r9
    2688:	ff e1       	ldi	r31, 0x1F	; 31
    268a:	ff 15       	cp	r31, r15
    268c:	d0 f0       	brcs	.+52     	; 0x26c2 <vfprintf+0xa4>
    268e:	9b 32       	cpi	r25, 0x2B	; 43
    2690:	69 f0       	breq	.+26     	; 0x26ac <vfprintf+0x8e>
    2692:	9c 32       	cpi	r25, 0x2C	; 44
    2694:	28 f4       	brcc	.+10     	; 0x26a0 <vfprintf+0x82>
    2696:	90 32       	cpi	r25, 0x20	; 32
    2698:	59 f0       	breq	.+22     	; 0x26b0 <vfprintf+0x92>
    269a:	93 32       	cpi	r25, 0x23	; 35
    269c:	91 f4       	brne	.+36     	; 0x26c2 <vfprintf+0xa4>
    269e:	0e c0       	rjmp	.+28     	; 0x26bc <vfprintf+0x9e>
    26a0:	9d 32       	cpi	r25, 0x2D	; 45
    26a2:	49 f0       	breq	.+18     	; 0x26b6 <vfprintf+0x98>
    26a4:	90 33       	cpi	r25, 0x30	; 48
    26a6:	69 f4       	brne	.+26     	; 0x26c2 <vfprintf+0xa4>
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	24 c0       	rjmp	.+72     	; 0x26f4 <vfprintf+0xd6>
    26ac:	52 e0       	ldi	r21, 0x02	; 2
    26ae:	f5 2a       	or	r15, r21
    26b0:	84 e0       	ldi	r24, 0x04	; 4
    26b2:	f8 2a       	or	r15, r24
    26b4:	28 c0       	rjmp	.+80     	; 0x2706 <vfprintf+0xe8>
    26b6:	98 e0       	ldi	r25, 0x08	; 8
    26b8:	f9 2a       	or	r15, r25
    26ba:	25 c0       	rjmp	.+74     	; 0x2706 <vfprintf+0xe8>
    26bc:	e0 e1       	ldi	r30, 0x10	; 16
    26be:	fe 2a       	or	r15, r30
    26c0:	22 c0       	rjmp	.+68     	; 0x2706 <vfprintf+0xe8>
    26c2:	f7 fc       	sbrc	r15, 7
    26c4:	29 c0       	rjmp	.+82     	; 0x2718 <vfprintf+0xfa>
    26c6:	89 2f       	mov	r24, r25
    26c8:	80 53       	subi	r24, 0x30	; 48
    26ca:	8a 30       	cpi	r24, 0x0A	; 10
    26cc:	70 f4       	brcc	.+28     	; 0x26ea <vfprintf+0xcc>
    26ce:	f6 fe       	sbrs	r15, 6
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <vfprintf+0xbe>
    26d2:	98 9c       	mul	r9, r8
    26d4:	90 2c       	mov	r9, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	98 0e       	add	r9, r24
    26da:	15 c0       	rjmp	.+42     	; 0x2706 <vfprintf+0xe8>
    26dc:	e8 9c       	mul	r14, r8
    26de:	e0 2c       	mov	r14, r0
    26e0:	11 24       	eor	r1, r1
    26e2:	e8 0e       	add	r14, r24
    26e4:	f0 e2       	ldi	r31, 0x20	; 32
    26e6:	ff 2a       	or	r15, r31
    26e8:	0e c0       	rjmp	.+28     	; 0x2706 <vfprintf+0xe8>
    26ea:	9e 32       	cpi	r25, 0x2E	; 46
    26ec:	29 f4       	brne	.+10     	; 0x26f8 <vfprintf+0xda>
    26ee:	f6 fc       	sbrc	r15, 6
    26f0:	6b c1       	rjmp	.+726    	; 0x29c8 <vfprintf+0x3aa>
    26f2:	40 e4       	ldi	r20, 0x40	; 64
    26f4:	f4 2a       	or	r15, r20
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <vfprintf+0xe8>
    26f8:	9c 36       	cpi	r25, 0x6C	; 108
    26fa:	19 f4       	brne	.+6      	; 0x2702 <vfprintf+0xe4>
    26fc:	50 e8       	ldi	r21, 0x80	; 128
    26fe:	f5 2a       	or	r15, r21
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <vfprintf+0xe8>
    2702:	98 36       	cpi	r25, 0x68	; 104
    2704:	49 f4       	brne	.+18     	; 0x2718 <vfprintf+0xfa>
    2706:	f2 01       	movw	r30, r4
    2708:	23 fd       	sbrc	r18, 3
    270a:	95 91       	lpm	r25, Z+
    270c:	23 ff       	sbrs	r18, 3
    270e:	91 91       	ld	r25, Z+
    2710:	2f 01       	movw	r4, r30
    2712:	99 23       	and	r25, r25
    2714:	09 f0       	breq	.+2      	; 0x2718 <vfprintf+0xfa>
    2716:	b8 cf       	rjmp	.-144    	; 0x2688 <vfprintf+0x6a>
    2718:	89 2f       	mov	r24, r25
    271a:	85 54       	subi	r24, 0x45	; 69
    271c:	83 30       	cpi	r24, 0x03	; 3
    271e:	18 f0       	brcs	.+6      	; 0x2726 <vfprintf+0x108>
    2720:	80 52       	subi	r24, 0x20	; 32
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	38 f4       	brcc	.+14     	; 0x2734 <vfprintf+0x116>
    2726:	44 e0       	ldi	r20, 0x04	; 4
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	a4 0e       	add	r10, r20
    272c:	b5 1e       	adc	r11, r21
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	59 83       	std	Y+1, r21	; 0x01
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <vfprintf+0x134>
    2734:	93 36       	cpi	r25, 0x63	; 99
    2736:	31 f0       	breq	.+12     	; 0x2744 <vfprintf+0x126>
    2738:	93 37       	cpi	r25, 0x73	; 115
    273a:	79 f0       	breq	.+30     	; 0x275a <vfprintf+0x13c>
    273c:	93 35       	cpi	r25, 0x53	; 83
    273e:	09 f0       	breq	.+2      	; 0x2742 <vfprintf+0x124>
    2740:	56 c0       	rjmp	.+172    	; 0x27ee <vfprintf+0x1d0>
    2742:	20 c0       	rjmp	.+64     	; 0x2784 <vfprintf+0x166>
    2744:	f5 01       	movw	r30, r10
    2746:	80 81       	ld	r24, Z
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	42 e0       	ldi	r20, 0x02	; 2
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	a4 0e       	add	r10, r20
    2750:	b5 1e       	adc	r11, r21
    2752:	61 01       	movw	r12, r2
    2754:	01 e0       	ldi	r16, 0x01	; 1
    2756:	10 e0       	ldi	r17, 0x00	; 0
    2758:	12 c0       	rjmp	.+36     	; 0x277e <vfprintf+0x160>
    275a:	f5 01       	movw	r30, r10
    275c:	c0 80       	ld	r12, Z
    275e:	d1 80       	ldd	r13, Z+1	; 0x01
    2760:	f6 fc       	sbrc	r15, 6
    2762:	03 c0       	rjmp	.+6      	; 0x276a <vfprintf+0x14c>
    2764:	6f ef       	ldi	r22, 0xFF	; 255
    2766:	7f ef       	ldi	r23, 0xFF	; 255
    2768:	02 c0       	rjmp	.+4      	; 0x276e <vfprintf+0x150>
    276a:	69 2d       	mov	r22, r9
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	42 e0       	ldi	r20, 0x02	; 2
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	a4 0e       	add	r10, r20
    2774:	b5 1e       	adc	r11, r21
    2776:	c6 01       	movw	r24, r12
    2778:	0e 94 f7 14 	call	0x29ee	; 0x29ee <strnlen>
    277c:	8c 01       	movw	r16, r24
    277e:	5f e7       	ldi	r21, 0x7F	; 127
    2780:	f5 22       	and	r15, r21
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <vfprintf+0x18e>
    2784:	f5 01       	movw	r30, r10
    2786:	c0 80       	ld	r12, Z
    2788:	d1 80       	ldd	r13, Z+1	; 0x01
    278a:	f6 fc       	sbrc	r15, 6
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <vfprintf+0x176>
    278e:	6f ef       	ldi	r22, 0xFF	; 255
    2790:	7f ef       	ldi	r23, 0xFF	; 255
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <vfprintf+0x17a>
    2794:	69 2d       	mov	r22, r9
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	42 e0       	ldi	r20, 0x02	; 2
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	a4 0e       	add	r10, r20
    279e:	b5 1e       	adc	r11, r21
    27a0:	c6 01       	movw	r24, r12
    27a2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <strnlen_P>
    27a6:	8c 01       	movw	r16, r24
    27a8:	50 e8       	ldi	r21, 0x80	; 128
    27aa:	f5 2a       	or	r15, r21
    27ac:	f3 fe       	sbrs	r15, 3
    27ae:	07 c0       	rjmp	.+14     	; 0x27be <vfprintf+0x1a0>
    27b0:	1a c0       	rjmp	.+52     	; 0x27e6 <vfprintf+0x1c8>
    27b2:	80 e2       	ldi	r24, 0x20	; 32
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	b3 01       	movw	r22, r6
    27b8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    27bc:	ea 94       	dec	r14
    27be:	8e 2d       	mov	r24, r14
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	08 17       	cp	r16, r24
    27c4:	19 07       	cpc	r17, r25
    27c6:	a8 f3       	brcs	.-22     	; 0x27b2 <vfprintf+0x194>
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <vfprintf+0x1c8>
    27ca:	f6 01       	movw	r30, r12
    27cc:	f7 fc       	sbrc	r15, 7
    27ce:	85 91       	lpm	r24, Z+
    27d0:	f7 fe       	sbrs	r15, 7
    27d2:	81 91       	ld	r24, Z+
    27d4:	6f 01       	movw	r12, r30
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	b3 01       	movw	r22, r6
    27da:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    27de:	e1 10       	cpse	r14, r1
    27e0:	ea 94       	dec	r14
    27e2:	01 50       	subi	r16, 0x01	; 1
    27e4:	10 40       	sbci	r17, 0x00	; 0
    27e6:	01 15       	cp	r16, r1
    27e8:	11 05       	cpc	r17, r1
    27ea:	79 f7       	brne	.-34     	; 0x27ca <vfprintf+0x1ac>
    27ec:	ea c0       	rjmp	.+468    	; 0x29c2 <vfprintf+0x3a4>
    27ee:	94 36       	cpi	r25, 0x64	; 100
    27f0:	11 f0       	breq	.+4      	; 0x27f6 <vfprintf+0x1d8>
    27f2:	99 36       	cpi	r25, 0x69	; 105
    27f4:	69 f5       	brne	.+90     	; 0x2850 <vfprintf+0x232>
    27f6:	f7 fe       	sbrs	r15, 7
    27f8:	08 c0       	rjmp	.+16     	; 0x280a <vfprintf+0x1ec>
    27fa:	f5 01       	movw	r30, r10
    27fc:	20 81       	ld	r18, Z
    27fe:	31 81       	ldd	r19, Z+1	; 0x01
    2800:	42 81       	ldd	r20, Z+2	; 0x02
    2802:	53 81       	ldd	r21, Z+3	; 0x03
    2804:	84 e0       	ldi	r24, 0x04	; 4
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0a c0       	rjmp	.+20     	; 0x281e <vfprintf+0x200>
    280a:	f5 01       	movw	r30, r10
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	9c 01       	movw	r18, r24
    2812:	44 27       	eor	r20, r20
    2814:	37 fd       	sbrc	r19, 7
    2816:	40 95       	com	r20
    2818:	54 2f       	mov	r21, r20
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a8 0e       	add	r10, r24
    2820:	b9 1e       	adc	r11, r25
    2822:	9f e6       	ldi	r25, 0x6F	; 111
    2824:	f9 22       	and	r15, r25
    2826:	57 ff       	sbrs	r21, 7
    2828:	09 c0       	rjmp	.+18     	; 0x283c <vfprintf+0x21e>
    282a:	50 95       	com	r21
    282c:	40 95       	com	r20
    282e:	30 95       	com	r19
    2830:	21 95       	neg	r18
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	4f 4f       	sbci	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	e0 e8       	ldi	r30, 0x80	; 128
    283a:	fe 2a       	or	r15, r30
    283c:	ca 01       	movw	r24, r20
    283e:	b9 01       	movw	r22, r18
    2840:	a1 01       	movw	r20, r2
    2842:	2a e0       	ldi	r18, 0x0A	; 10
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__ultoa_invert>
    284a:	d8 2e       	mov	r13, r24
    284c:	d2 18       	sub	r13, r2
    284e:	40 c0       	rjmp	.+128    	; 0x28d0 <vfprintf+0x2b2>
    2850:	95 37       	cpi	r25, 0x75	; 117
    2852:	29 f4       	brne	.+10     	; 0x285e <vfprintf+0x240>
    2854:	1f 2d       	mov	r17, r15
    2856:	1f 7e       	andi	r17, 0xEF	; 239
    2858:	2a e0       	ldi	r18, 0x0A	; 10
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	1d c0       	rjmp	.+58     	; 0x2898 <vfprintf+0x27a>
    285e:	1f 2d       	mov	r17, r15
    2860:	19 7f       	andi	r17, 0xF9	; 249
    2862:	9f 36       	cpi	r25, 0x6F	; 111
    2864:	61 f0       	breq	.+24     	; 0x287e <vfprintf+0x260>
    2866:	90 37       	cpi	r25, 0x70	; 112
    2868:	20 f4       	brcc	.+8      	; 0x2872 <vfprintf+0x254>
    286a:	98 35       	cpi	r25, 0x58	; 88
    286c:	09 f0       	breq	.+2      	; 0x2870 <vfprintf+0x252>
    286e:	ac c0       	rjmp	.+344    	; 0x29c8 <vfprintf+0x3aa>
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <vfprintf+0x272>
    2872:	90 37       	cpi	r25, 0x70	; 112
    2874:	39 f0       	breq	.+14     	; 0x2884 <vfprintf+0x266>
    2876:	98 37       	cpi	r25, 0x78	; 120
    2878:	09 f0       	breq	.+2      	; 0x287c <vfprintf+0x25e>
    287a:	a6 c0       	rjmp	.+332    	; 0x29c8 <vfprintf+0x3aa>
    287c:	04 c0       	rjmp	.+8      	; 0x2886 <vfprintf+0x268>
    287e:	28 e0       	ldi	r18, 0x08	; 8
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	0a c0       	rjmp	.+20     	; 0x2898 <vfprintf+0x27a>
    2884:	10 61       	ori	r17, 0x10	; 16
    2886:	14 fd       	sbrc	r17, 4
    2888:	14 60       	ori	r17, 0x04	; 4
    288a:	20 e1       	ldi	r18, 0x10	; 16
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <vfprintf+0x27a>
    2890:	14 fd       	sbrc	r17, 4
    2892:	16 60       	ori	r17, 0x06	; 6
    2894:	20 e1       	ldi	r18, 0x10	; 16
    2896:	32 e0       	ldi	r19, 0x02	; 2
    2898:	17 ff       	sbrs	r17, 7
    289a:	08 c0       	rjmp	.+16     	; 0x28ac <vfprintf+0x28e>
    289c:	f5 01       	movw	r30, r10
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	44 e0       	ldi	r20, 0x04	; 4
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <vfprintf+0x29e>
    28ac:	f5 01       	movw	r30, r10
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	bc 01       	movw	r22, r24
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	42 e0       	ldi	r20, 0x02	; 2
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	a4 0e       	add	r10, r20
    28be:	b5 1e       	adc	r11, r21
    28c0:	a1 01       	movw	r20, r2
    28c2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__ultoa_invert>
    28c6:	d8 2e       	mov	r13, r24
    28c8:	d2 18       	sub	r13, r2
    28ca:	8f e7       	ldi	r24, 0x7F	; 127
    28cc:	f8 2e       	mov	r15, r24
    28ce:	f1 22       	and	r15, r17
    28d0:	f6 fe       	sbrs	r15, 6
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <vfprintf+0x2cc>
    28d4:	5e ef       	ldi	r21, 0xFE	; 254
    28d6:	f5 22       	and	r15, r21
    28d8:	d9 14       	cp	r13, r9
    28da:	38 f4       	brcc	.+14     	; 0x28ea <vfprintf+0x2cc>
    28dc:	f4 fe       	sbrs	r15, 4
    28de:	07 c0       	rjmp	.+14     	; 0x28ee <vfprintf+0x2d0>
    28e0:	f2 fc       	sbrc	r15, 2
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <vfprintf+0x2d0>
    28e4:	8f ee       	ldi	r24, 0xEF	; 239
    28e6:	f8 22       	and	r15, r24
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <vfprintf+0x2d0>
    28ea:	1d 2d       	mov	r17, r13
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <vfprintf+0x2d2>
    28ee:	19 2d       	mov	r17, r9
    28f0:	f4 fe       	sbrs	r15, 4
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <vfprintf+0x2f0>
    28f4:	fe 01       	movw	r30, r28
    28f6:	ed 0d       	add	r30, r13
    28f8:	f1 1d       	adc	r31, r1
    28fa:	80 81       	ld	r24, Z
    28fc:	80 33       	cpi	r24, 0x30	; 48
    28fe:	19 f4       	brne	.+6      	; 0x2906 <vfprintf+0x2e8>
    2900:	99 ee       	ldi	r25, 0xE9	; 233
    2902:	f9 22       	and	r15, r25
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <vfprintf+0x2f8>
    2906:	1f 5f       	subi	r17, 0xFF	; 255
    2908:	f2 fe       	sbrs	r15, 2
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <vfprintf+0x2f8>
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfprintf+0x2f6>
    290e:	8f 2d       	mov	r24, r15
    2910:	86 78       	andi	r24, 0x86	; 134
    2912:	09 f0       	breq	.+2      	; 0x2916 <vfprintf+0x2f8>
    2914:	1f 5f       	subi	r17, 0xFF	; 255
    2916:	0f 2d       	mov	r16, r15
    2918:	f3 fc       	sbrc	r15, 3
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <vfprintf+0x326>
    291c:	f0 fe       	sbrs	r15, 0
    291e:	0f c0       	rjmp	.+30     	; 0x293e <vfprintf+0x320>
    2920:	1e 15       	cp	r17, r14
    2922:	10 f0       	brcs	.+4      	; 0x2928 <vfprintf+0x30a>
    2924:	9d 2c       	mov	r9, r13
    2926:	0b c0       	rjmp	.+22     	; 0x293e <vfprintf+0x320>
    2928:	9d 2c       	mov	r9, r13
    292a:	9e 0c       	add	r9, r14
    292c:	91 1a       	sub	r9, r17
    292e:	1e 2d       	mov	r17, r14
    2930:	06 c0       	rjmp	.+12     	; 0x293e <vfprintf+0x320>
    2932:	80 e2       	ldi	r24, 0x20	; 32
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	b3 01       	movw	r22, r6
    2938:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    293c:	1f 5f       	subi	r17, 0xFF	; 255
    293e:	1e 15       	cp	r17, r14
    2940:	c0 f3       	brcs	.-16     	; 0x2932 <vfprintf+0x314>
    2942:	04 c0       	rjmp	.+8      	; 0x294c <vfprintf+0x32e>
    2944:	1e 15       	cp	r17, r14
    2946:	10 f4       	brcc	.+4      	; 0x294c <vfprintf+0x32e>
    2948:	e1 1a       	sub	r14, r17
    294a:	01 c0       	rjmp	.+2      	; 0x294e <vfprintf+0x330>
    294c:	ee 24       	eor	r14, r14
    294e:	04 ff       	sbrs	r16, 4
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <vfprintf+0x352>
    2952:	80 e3       	ldi	r24, 0x30	; 48
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	b3 01       	movw	r22, r6
    2958:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    295c:	02 ff       	sbrs	r16, 2
    295e:	1d c0       	rjmp	.+58     	; 0x299a <vfprintf+0x37c>
    2960:	01 fd       	sbrc	r16, 1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <vfprintf+0x34c>
    2964:	88 e7       	ldi	r24, 0x78	; 120
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e c0       	rjmp	.+28     	; 0x2986 <vfprintf+0x368>
    296a:	88 e5       	ldi	r24, 0x58	; 88
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0b c0       	rjmp	.+22     	; 0x2986 <vfprintf+0x368>
    2970:	80 2f       	mov	r24, r16
    2972:	86 78       	andi	r24, 0x86	; 134
    2974:	91 f0       	breq	.+36     	; 0x299a <vfprintf+0x37c>
    2976:	01 ff       	sbrs	r16, 1
    2978:	02 c0       	rjmp	.+4      	; 0x297e <vfprintf+0x360>
    297a:	8b e2       	ldi	r24, 0x2B	; 43
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <vfprintf+0x362>
    297e:	80 e2       	ldi	r24, 0x20	; 32
    2980:	f7 fc       	sbrc	r15, 7
    2982:	8d e2       	ldi	r24, 0x2D	; 45
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	b3 01       	movw	r22, r6
    2988:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    298c:	06 c0       	rjmp	.+12     	; 0x299a <vfprintf+0x37c>
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	b3 01       	movw	r22, r6
    2994:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    2998:	9a 94       	dec	r9
    299a:	d9 14       	cp	r13, r9
    299c:	c0 f3       	brcs	.-16     	; 0x298e <vfprintf+0x370>
    299e:	da 94       	dec	r13
    29a0:	f1 01       	movw	r30, r2
    29a2:	ed 0d       	add	r30, r13
    29a4:	f1 1d       	adc	r31, r1
    29a6:	80 81       	ld	r24, Z
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	b3 01       	movw	r22, r6
    29ac:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    29b0:	dd 20       	and	r13, r13
    29b2:	a9 f7       	brne	.-22     	; 0x299e <vfprintf+0x380>
    29b4:	06 c0       	rjmp	.+12     	; 0x29c2 <vfprintf+0x3a4>
    29b6:	80 e2       	ldi	r24, 0x20	; 32
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	b3 01       	movw	r22, r6
    29bc:	0e 94 02 15 	call	0x2a04	; 0x2a04 <fputc>
    29c0:	ea 94       	dec	r14
    29c2:	ee 20       	and	r14, r14
    29c4:	c1 f7       	brne	.-16     	; 0x29b6 <vfprintf+0x398>
    29c6:	43 ce       	rjmp	.-890    	; 0x264e <vfprintf+0x30>
    29c8:	f3 01       	movw	r30, r6
    29ca:	66 81       	ldd	r22, Z+6	; 0x06
    29cc:	77 81       	ldd	r23, Z+7	; 0x07
    29ce:	cb 01       	movw	r24, r22
    29d0:	2b 96       	adiw	r28, 0x0b	; 11
    29d2:	e2 e1       	ldi	r30, 0x12	; 18
    29d4:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__>

000029d8 <strnlen_P>:
    29d8:	fc 01       	movw	r30, r24
    29da:	05 90       	lpm	r0, Z+
    29dc:	61 50       	subi	r22, 0x01	; 1
    29de:	70 40       	sbci	r23, 0x00	; 0
    29e0:	01 10       	cpse	r0, r1
    29e2:	d8 f7       	brcc	.-10     	; 0x29da <strnlen_P+0x2>
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	8e 0f       	add	r24, r30
    29ea:	9f 1f       	adc	r25, r31
    29ec:	08 95       	ret

000029ee <strnlen>:
    29ee:	fc 01       	movw	r30, r24
    29f0:	61 50       	subi	r22, 0x01	; 1
    29f2:	70 40       	sbci	r23, 0x00	; 0
    29f4:	01 90       	ld	r0, Z+
    29f6:	01 10       	cpse	r0, r1
    29f8:	d8 f7       	brcc	.-10     	; 0x29f0 <strnlen+0x2>
    29fa:	80 95       	com	r24
    29fc:	90 95       	com	r25
    29fe:	8e 0f       	add	r24, r30
    2a00:	9f 1f       	adc	r25, r31
    2a02:	08 95       	ret

00002a04 <fputc>:
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	8c 01       	movw	r16, r24
    2a0e:	eb 01       	movw	r28, r22
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	81 ff       	sbrs	r24, 1
    2a14:	1b c0       	rjmp	.+54     	; 0x2a4c <fputc+0x48>
    2a16:	82 ff       	sbrs	r24, 2
    2a18:	0d c0       	rjmp	.+26     	; 0x2a34 <fputc+0x30>
    2a1a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a1c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	9d 81       	ldd	r25, Y+5	; 0x05
    2a22:	28 17       	cp	r18, r24
    2a24:	39 07       	cpc	r19, r25
    2a26:	64 f4       	brge	.+24     	; 0x2a40 <fputc+0x3c>
    2a28:	e8 81       	ld	r30, Y
    2a2a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a2c:	01 93       	st	Z+, r16
    2a2e:	f9 83       	std	Y+1, r31	; 0x01
    2a30:	e8 83       	st	Y, r30
    2a32:	06 c0       	rjmp	.+12     	; 0x2a40 <fputc+0x3c>
    2a34:	e8 85       	ldd	r30, Y+8	; 0x08
    2a36:	f9 85       	ldd	r31, Y+9	; 0x09
    2a38:	80 2f       	mov	r24, r16
    2a3a:	09 95       	icall
    2a3c:	89 2b       	or	r24, r25
    2a3e:	31 f4       	brne	.+12     	; 0x2a4c <fputc+0x48>
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	9f 83       	std	Y+7, r25	; 0x07
    2a48:	8e 83       	std	Y+6, r24	; 0x06
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <fputc+0x4c>
    2a4c:	0f ef       	ldi	r16, 0xFF	; 255
    2a4e:	1f ef       	ldi	r17, 0xFF	; 255
    2a50:	c8 01       	movw	r24, r16
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	08 95       	ret

00002a5c <__ultoa_invert>:
    2a5c:	fa 01       	movw	r30, r20
    2a5e:	aa 27       	eor	r26, r26
    2a60:	28 30       	cpi	r18, 0x08	; 8
    2a62:	51 f1       	breq	.+84     	; 0x2ab8 <__ultoa_invert+0x5c>
    2a64:	20 31       	cpi	r18, 0x10	; 16
    2a66:	81 f1       	breq	.+96     	; 0x2ac8 <__ultoa_invert+0x6c>
    2a68:	e8 94       	clt
    2a6a:	6f 93       	push	r22
    2a6c:	6e 7f       	andi	r22, 0xFE	; 254
    2a6e:	6e 5f       	subi	r22, 0xFE	; 254
    2a70:	7f 4f       	sbci	r23, 0xFF	; 255
    2a72:	8f 4f       	sbci	r24, 0xFF	; 255
    2a74:	9f 4f       	sbci	r25, 0xFF	; 255
    2a76:	af 4f       	sbci	r26, 0xFF	; 255
    2a78:	b1 e0       	ldi	r27, 0x01	; 1
    2a7a:	3e d0       	rcall	.+124    	; 0x2af8 <__ultoa_invert+0x9c>
    2a7c:	b4 e0       	ldi	r27, 0x04	; 4
    2a7e:	3c d0       	rcall	.+120    	; 0x2af8 <__ultoa_invert+0x9c>
    2a80:	67 0f       	add	r22, r23
    2a82:	78 1f       	adc	r23, r24
    2a84:	89 1f       	adc	r24, r25
    2a86:	9a 1f       	adc	r25, r26
    2a88:	a1 1d       	adc	r26, r1
    2a8a:	68 0f       	add	r22, r24
    2a8c:	79 1f       	adc	r23, r25
    2a8e:	8a 1f       	adc	r24, r26
    2a90:	91 1d       	adc	r25, r1
    2a92:	a1 1d       	adc	r26, r1
    2a94:	6a 0f       	add	r22, r26
    2a96:	71 1d       	adc	r23, r1
    2a98:	81 1d       	adc	r24, r1
    2a9a:	91 1d       	adc	r25, r1
    2a9c:	a1 1d       	adc	r26, r1
    2a9e:	20 d0       	rcall	.+64     	; 0x2ae0 <__ultoa_invert+0x84>
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <__ultoa_invert+0x48>
    2aa2:	68 94       	set
    2aa4:	3f 91       	pop	r19
    2aa6:	2a e0       	ldi	r18, 0x0A	; 10
    2aa8:	26 9f       	mul	r18, r22
    2aaa:	11 24       	eor	r1, r1
    2aac:	30 19       	sub	r19, r0
    2aae:	30 5d       	subi	r19, 0xD0	; 208
    2ab0:	31 93       	st	Z+, r19
    2ab2:	de f6       	brtc	.-74     	; 0x2a6a <__ultoa_invert+0xe>
    2ab4:	cf 01       	movw	r24, r30
    2ab6:	08 95       	ret
    2ab8:	46 2f       	mov	r20, r22
    2aba:	47 70       	andi	r20, 0x07	; 7
    2abc:	40 5d       	subi	r20, 0xD0	; 208
    2abe:	41 93       	st	Z+, r20
    2ac0:	b3 e0       	ldi	r27, 0x03	; 3
    2ac2:	0f d0       	rcall	.+30     	; 0x2ae2 <__ultoa_invert+0x86>
    2ac4:	c9 f7       	brne	.-14     	; 0x2ab8 <__ultoa_invert+0x5c>
    2ac6:	f6 cf       	rjmp	.-20     	; 0x2ab4 <__ultoa_invert+0x58>
    2ac8:	46 2f       	mov	r20, r22
    2aca:	4f 70       	andi	r20, 0x0F	; 15
    2acc:	40 5d       	subi	r20, 0xD0	; 208
    2ace:	4a 33       	cpi	r20, 0x3A	; 58
    2ad0:	18 f0       	brcs	.+6      	; 0x2ad8 <__ultoa_invert+0x7c>
    2ad2:	49 5d       	subi	r20, 0xD9	; 217
    2ad4:	31 fd       	sbrc	r19, 1
    2ad6:	40 52       	subi	r20, 0x20	; 32
    2ad8:	41 93       	st	Z+, r20
    2ada:	02 d0       	rcall	.+4      	; 0x2ae0 <__ultoa_invert+0x84>
    2adc:	a9 f7       	brne	.-22     	; 0x2ac8 <__ultoa_invert+0x6c>
    2ade:	ea cf       	rjmp	.-44     	; 0x2ab4 <__ultoa_invert+0x58>
    2ae0:	b4 e0       	ldi	r27, 0x04	; 4
    2ae2:	a6 95       	lsr	r26
    2ae4:	97 95       	ror	r25
    2ae6:	87 95       	ror	r24
    2ae8:	77 95       	ror	r23
    2aea:	67 95       	ror	r22
    2aec:	ba 95       	dec	r27
    2aee:	c9 f7       	brne	.-14     	; 0x2ae2 <__ultoa_invert+0x86>
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	61 05       	cpc	r22, r1
    2af4:	71 05       	cpc	r23, r1
    2af6:	08 95       	ret
    2af8:	9b 01       	movw	r18, r22
    2afa:	ac 01       	movw	r20, r24
    2afc:	0a 2e       	mov	r0, r26
    2afe:	06 94       	lsr	r0
    2b00:	57 95       	ror	r21
    2b02:	47 95       	ror	r20
    2b04:	37 95       	ror	r19
    2b06:	27 95       	ror	r18
    2b08:	ba 95       	dec	r27
    2b0a:	c9 f7       	brne	.-14     	; 0x2afe <__ultoa_invert+0xa2>
    2b0c:	62 0f       	add	r22, r18
    2b0e:	73 1f       	adc	r23, r19
    2b10:	84 1f       	adc	r24, r20
    2b12:	95 1f       	adc	r25, r21
    2b14:	a0 1d       	adc	r26, r0
    2b16:	08 95       	ret

00002b18 <_exit>:
    2b18:	f8 94       	cli

00002b1a <__stop_program>:
    2b1a:	ff cf       	rjmp	.-2      	; 0x2b1a <__stop_program>
