
SousVide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00002bf6  00002c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800246  00800246  00002dd0  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  00002dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000065d  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003de5  00000000  00000000  0000362d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001969  00000000  00000000  00007412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002521  00000000  00000000  00008d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000b29c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000097e  00000000  00000000  0000b74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000173f  00000000  00000000  0000c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000d809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_13>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000070 <LcdCustomChar>:
      70:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      80:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      90:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      a0:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d0 e1       	ldi	r29, 0x10	; 16
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	12 e0       	ldi	r17, 0x02	; 2
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e6 ef       	ldi	r30, 0xF6	; 246
      c4:	fb e2       	ldi	r31, 0x2B	; 43
      c6:	02 c0       	rjmp	.+4      	; 0xcc <.do_copy_data_start>

000000c8 <.do_copy_data_loop>:
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0

000000cc <.do_copy_data_start>:
      cc:	a6 34       	cpi	r26, 0x46	; 70
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <.do_copy_data_loop>

000000d2 <__do_clear_bss>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a6 e4       	ldi	r26, 0x46	; 70
      d6:	b2 e0       	ldi	r27, 0x02	; 2
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a8 3c       	cpi	r26, 0xC8	; 200
      de:	b1 07       	cpc	r27, r17
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <main>
      e6:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
      ee:	28 2f       	mov	r18, r24
      f0:	20 7f       	andi	r18, 0xF0	; 240
      f2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
      f4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
      f6:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f8:	20 ea       	ldi	r18, 0xA0	; 160
      fa:	3f e0       	ldi	r19, 0x0F	; 15
      fc:	f9 01       	movw	r30, r18
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     102:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     104:	40 98       	cbi	0x08, 0	; 8
     106:	f9 01       	movw	r30, r18
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	44 e0       	ldi	r20, 0x04	; 4
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	4a 95       	dec	r20
     116:	e1 f7       	brne	.-8      	; 0x110 <LCDsendChar+0x22>
     118:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     11a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     11c:	42 9a       	sbi	0x08, 2	; 8
     11e:	c9 01       	movw	r24, r18
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     124:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     126:	40 98       	cbi	0x08, 0	; 8
     128:	c9 01       	movw	r24, r18
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     12e:	08 95       	ret

00000130 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     130:	28 2f       	mov	r18, r24
     132:	20 7f       	andi	r18, 0xF0	; 240
     134:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     136:	42 9a       	sbi	0x08, 2	; 8
     138:	20 ea       	ldi	r18, 0xA0	; 160
     13a:	3f e0       	ldi	r19, 0x0F	; 15
     13c:	f9 01       	movw	r30, r18
     13e:	31 97       	sbiw	r30, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     142:	42 98       	cbi	0x08, 2	; 8
     144:	f9 01       	movw	r30, r18
     146:	31 97       	sbiw	r30, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	54 e0       	ldi	r21, 0x04	; 4
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	5a 95       	dec	r21
     154:	e1 f7       	brne	.-8      	; 0x14e <LCDsendCommand+0x1e>
     156:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     158:	42 9a       	sbi	0x08, 2	; 8
     15a:	c9 01       	movw	r24, r18
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     160:	42 98       	cbi	0x08, 2	; 8
     162:	c9 01       	movw	r24, r18
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     168:	08 95       	ret

0000016a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     170:	08 95       	ret

00000172 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     178:	08 95       	ret

0000017a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	49 f0       	breq	.+18     	; 0x19a <LCDstring+0x20>
     188:	ec 01       	movw	r28, r24
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	04 c0       	rjmp	.+8      	; 0x196 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     18e:	89 91       	ld	r24, Y+
     190:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     194:	1f 5f       	subi	r17, 0xFF	; 255
     196:	10 17       	cp	r17, r16
     198:	d0 f3       	brcs	.-12     	; 0x18e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	08 95       	ret

000001a4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     1a4:	62 30       	cpi	r22, 0x02	; 2
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <LCDGotoXY+0x10>
     1a8:	63 30       	cpi	r22, 0x03	; 3
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <LCDGotoXY+0x14>
     1ac:	61 30       	cpi	r22, 0x01	; 1
     1ae:	29 f4       	brne	.+10     	; 0x1ba <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	03 c0       	rjmp	.+6      	; 0x1ba <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     1b4:	8c 5e       	subi	r24, 0xEC	; 236
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     1b8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
	
}
     1c0:	08 95       	ret

000001c2 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     1cc:	64 2f       	mov	r22, r20
     1ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     1d6:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     1da:	1f 5f       	subi	r17, 0xFF	; 255
     1dc:	fe 01       	movw	r30, r28
     1de:	e1 0f       	add	r30, r17
     1e0:	f1 1d       	adc	r31, r1
     1e2:	84 91       	lpm	r24, Z+
     1e4:	88 23       	and	r24, r24
     1e6:	b9 f7       	brne	.-18     	; 0x1d6 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
     1ee:	08 95       	ret

000001f0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	7c 01       	movw	r14, r24
     1fe:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     200:	11 0f       	add	r17, r17
     202:	11 0f       	add	r17, r17
     204:	11 0f       	add	r17, r17
     206:	10 64       	ori	r17, 0x40	; 64
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     20c:	f7 01       	movw	r30, r14
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     214:	81 2f       	mov	r24, r17
     216:	8c 0f       	add	r24, r28
     218:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendChar(pcc);
     21c:	80 2f       	mov	r24, r16
     21e:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     222:	21 96       	adiw	r28, 0x01	; 1
     224:	c8 30       	cpi	r28, 0x08	; 8
     226:	d1 05       	cpc	r29, r1
     228:	89 f7       	brne	.-30     	; 0x20c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	08 95       	ret

00000238 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	80 e6       	ldi	r24, 0x60	; 96
     240:	9a ee       	ldi	r25, 0xEA	; 234
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     246:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     248:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     24a:	87 b1       	in	r24, 0x07	; 7
     24c:	80 6f       	ori	r24, 0xF0	; 240
     24e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     250:	87 b1       	in	r24, 0x07	; 7
     252:	87 60       	ori	r24, 0x07	; 7
     254:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     256:	80 e3       	ldi	r24, 0x30	; 48
     258:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     25a:	42 9a       	sbi	0x08, 2	; 8
     25c:	20 ea       	ldi	r18, 0xA0	; 160
     25e:	3f e0       	ldi	r19, 0x0F	; 15
     260:	f9 01       	movw	r30, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     266:	42 98       	cbi	0x08, 2	; 8
     268:	f9 01       	movw	r30, r18
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     26e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     270:	42 9a       	sbi	0x08, 2	; 8
     272:	c9 01       	movw	r24, r18
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     278:	42 98       	cbi	0x08, 2	; 8
     27a:	c9 01       	movw	r24, r18
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     280:	80 e2       	ldi	r24, 0x20	; 32
     282:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     284:	42 9a       	sbi	0x08, 2	; 8
     286:	c9 01       	movw	r24, r18
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     28c:	42 98       	cbi	0x08, 2	; 8
     28e:	c9 01       	movw	r24, r18
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     294:	88 e2       	ldi	r24, 0x28	; 40
     296:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
     2a0:	c0 e7       	ldi	r28, 0x70	; 112
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     2a6:	16 2f       	mov	r17, r22
     2a8:	1f 5f       	subi	r17, 0xFF	; 255
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCDdefinechar>
     2b0:	28 96       	adiw	r28, 0x08	; 8
     2b2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     2b4:	18 30       	cpi	r17, 0x08	; 8
     2b6:	b9 f7       	brne	.-18     	; 0x2a6 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	08 95       	ret

000002c0 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	08 2f       	mov	r16, r24
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     2ca:	8e e1       	ldi	r24, 0x1E	; 30
     2cc:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	10 17       	cp	r17, r16
     2d4:	d0 f3       	brcs	.-12     	; 0x2ca <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	08 95       	ret

000002dc <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	08 2f       	mov	r16, r24
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     2e6:	88 e1       	ldi	r24, 0x18	; 24
     2e8:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     2ec:	1f 5f       	subi	r17, 0xFF	; 255
     2ee:	10 17       	cp	r17, r16
     2f0:	d0 f3       	brcs	.-12     	; 0x2e6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	08 95       	ret

000002f8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     2f8:	8e e0       	ldi	r24, 0x0E	; 14
     2fa:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     2fe:	08 95       	ret

00000300 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     306:	08 95       	ret

00000308 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     308:	8c e0       	ldi	r24, 0x0C	; 12
     30a:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     30e:	08 95       	ret

00000310 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     310:	88 e0       	ldi	r24, 0x08	; 8
     312:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     316:	08 95       	ret

00000318 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     318:	8c e0       	ldi	r24, 0x0C	; 12
     31a:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
     31e:	08 95       	ret

00000320 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	08 2f       	mov	r16, r24
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	04 c0       	rjmp	.+8      	; 0x332 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     330:	1f 5f       	subi	r17, 0xFF	; 255
     332:	10 17       	cp	r17, r16
     334:	d0 f3       	brcs	.-12     	; 0x32a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret

0000033c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	08 2f       	mov	r16, r24
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	04 c0       	rjmp	.+8      	; 0x34e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     346:	84 e1       	ldi	r24, 0x14	; 20
     348:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     34c:	1f 5f       	subi	r17, 0xFF	; 255
     34e:	10 17       	cp	r17, r16
     350:	d0 f3       	brcs	.-12     	; 0x346 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     368:	96 e0       	ldi	r25, 0x06	; 6
     36a:	89 9f       	mul	r24, r25
     36c:	c0 01       	movw	r24, r0
     36e:	11 24       	eor	r1, r1
     370:	24 2f       	mov	r18, r20
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	ac 01       	movw	r20, r24
     376:	42 9f       	mul	r20, r18
     378:	c0 01       	movw	r24, r0
     37a:	43 9f       	mul	r20, r19
     37c:	90 0d       	add	r25, r0
     37e:	52 9f       	mul	r21, r18
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__divmodhi4>
     38a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     38c:	cb 01       	movw	r24, r22
     38e:	66 e0       	ldi	r22, 0x06	; 6
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__udivmodhi4>
     396:	e8 2e       	mov	r14, r24
     398:	ff 24       	eor	r15, r15
     39a:	00 e0       	ldi	r16, 0x00	; 0
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	12 c0       	rjmp	.+36     	; 0x3c4 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     3a0:	c8 01       	movw	r24, r16
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	c8 17       	cp	r28, r24
     3a6:	d9 07       	cpc	r29, r25
     3a8:	10 f0       	brcs	.+4      	; 0x3ae <LCDprogressBar+0x56>
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     3ae:	c0 17       	cp	r28, r16
     3b0:	d1 07       	cpc	r29, r17
     3b2:	10 f0       	brcs	.+4      	; 0x3b8 <LCDprogressBar+0x60>
     3b4:	8e 2d       	mov	r24, r14
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <LCDprogressBar+0x62>
     3b8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     3ba:	0e 94 77 00 	call	0xee	; 0xee <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     3be:	f3 94       	inc	r15
     3c0:	0a 5f       	subi	r16, 0xFA	; 250
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	fd 14       	cp	r15, r13
     3c6:	60 f3       	brcs	.-40     	; 0x3a0 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	08 95       	ret

000003d8 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	2f 92       	push	r2
     3e4:	3f 92       	push	r3
     3e6:	4f 92       	push	r4
     3e8:	5f 92       	push	r5
     3ea:	6f 92       	push	r6
     3ec:	7f 92       	push	r7
     3ee:	8f 92       	push	r8
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     41e:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     422:	50 90 78 02 	lds	r5, 0x0278
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     426:	b0 9b       	sbis	0x16, 0	; 22
     428:	14 c0       	rjmp	.+40     	; 0x452 <__vector_13+0x7a>
    ++kernel.cycles;
     42a:	80 91 ba 02 	lds	r24, 0x02BA
     42e:	90 91 bb 02 	lds	r25, 0x02BB
     432:	a0 91 bc 02 	lds	r26, 0x02BC
     436:	b0 91 bd 02 	lds	r27, 0x02BD
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
     440:	80 93 ba 02 	sts	0x02BA, r24
     444:	90 93 bb 02 	sts	0x02BB, r25
     448:	a0 93 bc 02 	sts	0x02BC, r26
     44c:	b0 93 bd 02 	sts	0x02BD, r27
    TIFR1 |= (1<<TOV1) ;
     450:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     452:	80 91 84 00 	lds	r24, 0x0084
     456:	90 91 85 00 	lds	r25, 0x0085
     45a:	3c 01       	movw	r6, r24
     45c:	88 24       	eor	r8, r8
     45e:	99 24       	eor	r9, r9
     460:	80 91 ba 02 	lds	r24, 0x02BA
     464:	90 91 bb 02 	lds	r25, 0x02BB
     468:	a0 91 bc 02 	lds	r26, 0x02BC
     46c:	b0 91 bd 02 	lds	r27, 0x02BD
     470:	dc 01       	movw	r26, r24
     472:	99 27       	eor	r25, r25
     474:	88 27       	eor	r24, r24
     476:	68 0e       	add	r6, r24
     478:	79 1e       	adc	r7, r25
     47a:	8a 1e       	adc	r8, r26
     47c:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     47e:	40 90 77 02 	lds	r4, 0x0277
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	ff ef       	ldi	r31, 0xFF	; 255
     488:	af 2e       	mov	r10, r31
     48a:	ff ef       	ldi	r31, 0xFF	; 255
     48c:	bf 2e       	mov	r11, r31
     48e:	ff ef       	ldi	r31, 0xFF	; 255
     490:	cf 2e       	mov	r12, r31
     492:	ff e7       	ldi	r31, 0x7F	; 127
     494:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     496:	eb e0       	ldi	r30, 0x0B	; 11
     498:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     49a:	33 24       	eor	r3, r3
     49c:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     49e:	cb e0       	ldi	r28, 0x0B	; 11
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
     4a2:	43 c0       	rjmp	.+134    	; 0x52a <__vector_13+0x152>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     4a4:	62 9d       	mul	r22, r2
     4a6:	d0 01       	movw	r26, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	a7 58       	subi	r26, 0x87	; 135
     4ac:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     4ae:	1a 96       	adiw	r26, 0x0a	; 10
     4b0:	8c 91       	ld	r24, X
     4b2:	1a 97       	sbiw	r26, 0x0a	; 10
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	a1 f4       	brne	.+40     	; 0x4e0 <__vector_13+0x108>
      if (t->release <= now) {
     4b8:	12 96       	adiw	r26, 0x02	; 2
     4ba:	ed 90       	ld	r14, X+
     4bc:	fd 90       	ld	r15, X+
     4be:	0d 91       	ld	r16, X+
     4c0:	1c 91       	ld	r17, X
     4c2:	15 97       	sbiw	r26, 0x05	; 5
     4c4:	6e 14       	cp	r6, r14
     4c6:	7f 04       	cpc	r7, r15
     4c8:	80 06       	cpc	r8, r16
     4ca:	91 06       	cpc	r9, r17
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__vector_13+0xfe>
	t->state = READYQ;
     4ce:	1a 96       	adiw	r26, 0x0a	; 10
     4d0:	3c 92       	st	X, r3
     4d2:	1a 97       	sbiw	r26, 0x0a	; 10
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__vector_13+0x108>
      } else if (t->release < nextHit) {
     4d6:	ea 14       	cp	r14, r10
     4d8:	fb 04       	cpc	r15, r11
     4da:	0c 05       	cpc	r16, r12
     4dc:	1d 05       	cpc	r17, r13
     4de:	10 f0       	brcs	.+4      	; 0x4e4 <__vector_13+0x10c>
     4e0:	86 01       	movw	r16, r12
     4e2:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     4e4:	1a 96       	adiw	r26, 0x0a	; 10
     4e6:	8c 91       	ld	r24, X
     4e8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	d9 f4       	brne	.+54     	; 0x524 <__vector_13+0x14c>
      if (t->deadline < kernel.tasks[running].deadline) {
     4ee:	87 2f       	mov	r24, r23
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	8c 9f       	mul	r24, r28
     4f4:	f0 01       	movw	r30, r0
     4f6:	8d 9f       	mul	r24, r29
     4f8:	f0 0d       	add	r31, r0
     4fa:	9c 9f       	mul	r25, r28
     4fc:	f0 0d       	add	r31, r0
     4fe:	11 24       	eor	r1, r1
     500:	e9 58       	subi	r30, 0x89	; 137
     502:	fd 4f       	sbci	r31, 0xFD	; 253
     504:	16 96       	adiw	r26, 0x06	; 6
     506:	2d 91       	ld	r18, X+
     508:	3d 91       	ld	r19, X+
     50a:	4d 91       	ld	r20, X+
     50c:	5c 91       	ld	r21, X
     50e:	19 97       	sbiw	r26, 0x09	; 9
     510:	80 85       	ldd	r24, Z+8	; 0x08
     512:	91 85       	ldd	r25, Z+9	; 0x09
     514:	a2 85       	ldd	r26, Z+10	; 0x0a
     516:	b3 85       	ldd	r27, Z+11	; 0x0b
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	4a 07       	cpc	r20, r26
     51e:	5b 07       	cpc	r21, r27
     520:	08 f4       	brcc	.+2      	; 0x524 <__vector_13+0x14c>
     522:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	57 01       	movw	r10, r14
     528:	68 01       	movw	r12, r16
     52a:	46 16       	cp	r4, r22
     52c:	08 f0       	brcs	.+2      	; 0x530 <__vector_13+0x158>
     52e:	ba cf       	rjmp	.-140    	; 0x4a4 <__vector_13+0xcc>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     530:	75 15       	cp	r23, r5
     532:	b1 f0       	breq	.+44     	; 0x560 <__vector_13+0x188>

    // store old context
    t = &kernel.tasks[oldrunning];
     534:	eb e0       	ldi	r30, 0x0B	; 11
     536:	5e 9e       	mul	r5, r30
     538:	d0 01       	movw	r26, r0
     53a:	11 24       	eor	r1, r1
     53c:	a7 58       	subi	r26, 0x87	; 135
     53e:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     540:	8d b7       	in	r24, 0x3d	; 61
     542:	8c 93       	st	X, r24
    t->sph = SPH;
     544:	8e b7       	in	r24, 0x3e	; 62
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     54a:	7e 9f       	mul	r23, r30
     54c:	f0 01       	movw	r30, r0
     54e:	11 24       	eor	r1, r1
     550:	e7 58       	subi	r30, 0x87	; 135
     552:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     558:	80 81       	ld	r24, Z
     55a:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     55c:	70 93 78 02 	sts	0x0278, r23

  }

  kernel.nextHit = nextHit;  
     560:	a0 92 be 02 	sts	0x02BE, r10
     564:	b0 92 bf 02 	sts	0x02BF, r11
     568:	c0 92 c0 02 	sts	0x02C0, r12
     56c:	d0 92 c1 02 	sts	0x02C1, r13

  now = (kernel.cycles << 16) + TCNT1;
     570:	20 91 84 00 	lds	r18, 0x0084
     574:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	80 91 ba 02 	lds	r24, 0x02BA
     580:	90 91 bb 02 	lds	r25, 0x02BB
     584:	a0 91 bc 02 	lds	r26, 0x02BC
     588:	b0 91 bd 02 	lds	r27, 0x02BD
     58c:	dc 01       	movw	r26, r24
     58e:	99 27       	eor	r25, r25
     590:	88 27       	eor	r24, r24
     592:	28 0f       	add	r18, r24
     594:	39 1f       	adc	r19, r25
     596:	4a 1f       	adc	r20, r26
     598:	5b 1f       	adc	r21, r27
     59a:	d6 01       	movw	r26, r12
     59c:	c5 01       	movw	r24, r10
     59e:	82 1b       	sub	r24, r18
     5a0:	93 0b       	sbc	r25, r19
     5a2:	a4 0b       	sbc	r26, r20
     5a4:	b5 0b       	sbc	r27, r21
     5a6:	9c 01       	movw	r18, r24
     5a8:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     5aa:	84 30       	cpi	r24, 0x04	; 4
     5ac:	91 05       	cpc	r25, r1
     5ae:	a1 05       	cpc	r26, r1
     5b0:	b1 05       	cpc	r27, r1
     5b2:	24 f4       	brge	.+8      	; 0x5bc <__vector_13+0x1e4>
     5b4:	24 e0       	ldi	r18, 0x04	; 4
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     5bc:	80 91 84 00 	lds	r24, 0x0084
     5c0:	90 91 85 00 	lds	r25, 0x0085
     5c4:	a0 e0       	ldi	r26, 0x00	; 0
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	a4 1f       	adc	r26, r20
     5ce:	b5 1f       	adc	r27, r21
     5d0:	80 50       	subi	r24, 0x00	; 0
     5d2:	90 40       	sbci	r25, 0x00	; 0
     5d4:	a1 40       	sbci	r26, 0x01	; 1
     5d6:	b0 40       	sbci	r27, 0x00	; 0
     5d8:	38 f4       	brcc	.+14     	; 0x5e8 <__vector_13+0x210>
    OCR1A = TCNT1 + timeleft;
     5da:	80 91 84 00 	lds	r24, 0x0084
     5de:	90 91 85 00 	lds	r25, 0x0085
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
     5e6:	0e c0       	rjmp	.+28     	; 0x604 <__vector_13+0x22c>
  } else if (TCNT1 < 65536 - 4) {
     5e8:	80 91 84 00 	lds	r24, 0x0084
     5ec:	90 91 85 00 	lds	r25, 0x0085
     5f0:	8c 5f       	subi	r24, 0xFC	; 252
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	28 f4       	brcc	.+10     	; 0x600 <__vector_13+0x228>
    OCR1A = 0x0000;
     5f6:	10 92 89 00 	sts	0x0089, r1
     5fa:	10 92 88 00 	sts	0x0088, r1
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <__vector_13+0x234>
  } else {
    OCR1A = 4;
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	90 93 89 00 	sts	0x0089, r25
     608:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	80 93 6f 00 	sts	0x006F, r24
}
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	5f 90       	pop	r5
     648:	4f 90       	pop	r4
     64a:	3f 90       	pop	r3
     64c:	2f 90       	pop	r2
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     658:	10 92 85 00 	sts	0x0085, r1
     65c:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     660:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     664:	25 e0       	ldi	r18, 0x05	; 5
     666:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     670:	2f ef       	ldi	r18, 0xFF	; 255
     672:	30 e1       	ldi	r19, 0x10	; 16
     674:	28 1b       	sub	r18, r24
     676:	39 0b       	sbc	r19, r25
     678:	30 93 b9 02 	sts	0x02B9, r19
     67c:	20 93 b8 02 	sts	0x02B8, r18
  kernel.nbrOfTasks = 0;
     680:	10 92 77 02 	sts	0x0277, r1
  kernel.running = 0;
     684:	10 92 78 02 	sts	0x0278, r1

  kernel.cycles = 0x0000;
     688:	10 92 ba 02 	sts	0x02BA, r1
     68c:	10 92 bb 02 	sts	0x02BB, r1
     690:	10 92 bc 02 	sts	0x02BC, r1
     694:	10 92 bd 02 	sts	0x02BD, r1
  kernel.nextHit = 0x7FFFFFFF;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f ef       	ldi	r25, 0xFF	; 255
     69c:	af ef       	ldi	r26, 0xFF	; 255
     69e:	bf e7       	ldi	r27, 0x7F	; 127
     6a0:	80 93 be 02 	sts	0x02BE, r24
     6a4:	90 93 bf 02 	sts	0x02BF, r25
     6a8:	a0 93 c0 02 	sts	0x02C0, r26
     6ac:	b0 93 c1 02 	sts	0x02C1, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     6b0:	80 93 7f 02 	sts	0x027F, r24
     6b4:	90 93 80 02 	sts	0x0280, r25
     6b8:	a0 93 81 02 	sts	0x0281, r26
     6bc:	b0 93 82 02 	sts	0x0282, r27
  kernel.tasks[0].release = 0x00000000;
     6c0:	10 92 7b 02 	sts	0x027B, r1
     6c4:	10 92 7c 02 	sts	0x027C, r1
     6c8:	10 92 7d 02 	sts	0x027D, r1
     6cc:	10 92 7e 02 	sts	0x027E, r1

  sei(); /* set enabled interrupts */
     6d0:	78 94       	sei
}
     6d2:	08 95       	ret

000006d4 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	49 01       	movw	r8, r18
     6ee:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     6f0:	f8 94       	cli

  ++kernel.nbrOfTasks;
     6f2:	20 91 77 02 	lds	r18, 0x0277
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	20 93 77 02 	sts	0x0277, r18

  sp = kernel.memptr;
     6fc:	c0 91 b8 02 	lds	r28, 0x02B8
     700:	d0 91 b9 02 	lds	r29, 0x02B9
  kernel.memptr -= stacksize;  // decrease free mem ptr
     704:	9e 01       	movw	r18, r28
     706:	26 1b       	sub	r18, r22
     708:	37 0b       	sbc	r19, r23
     70a:	30 93 b9 02 	sts	0x02B9, r19
     70e:	20 93 b8 02 	sts	0x02B8, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     712:	88 83       	st	Y, r24
     714:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     716:	92 93       	st	-Z, r25
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	df 01       	movw	r26, r30
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     71c:	ce 01       	movw	r24, r28
     71e:	4b 97       	sbiw	r24, 0x1b	; 27
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     720:	1c 92       	st	X, r1
     722:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<25; i++)    //WAS -- for (i=0; i<24; i++)
     724:	a8 17       	cp	r26, r24
     726:	b9 07       	cpc	r27, r25
     728:	d9 f7       	brne	.-10     	; 0x720 <trtCreateTask+0x4c>
     72a:	79 97       	sbiw	r30, 0x19	; 25
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     72c:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     72e:	d2 92       	st	-Z, r13
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     734:	9e 01       	movw	r18, r28
     736:	23 52       	subi	r18, 0x23	; 35
     738:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     73a:	1c 92       	st	X, r1
     73c:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     73e:	a2 17       	cp	r26, r18
     740:	b3 07       	cpc	r27, r19
     742:	d9 f7       	brne	.-10     	; 0x73a <trtCreateTask+0x66>
     744:	9f 01       	movw	r18, r30
     746:	26 50       	subi	r18, 0x06	; 6
     748:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     74a:	e0 91 77 02 	lds	r30, 0x0277
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	e8 9f       	mul	r30, r24
     752:	f0 01       	movw	r30, r0
     754:	11 24       	eor	r1, r1
     756:	e7 58       	subi	r30, 0x87	; 135
     758:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     75a:	82 82       	std	Z+2, r8	; 0x02
     75c:	93 82       	std	Z+3, r9	; 0x03
     75e:	a4 82       	std	Z+4, r10	; 0x04
     760:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     762:	e6 82       	std	Z+6, r14	; 0x06
     764:	f7 82       	std	Z+7, r15	; 0x07
     766:	00 87       	std	Z+8, r16	; 0x08
     768:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     76e:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     770:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     772:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>

}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	08 95       	ret

00000790 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     790:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     792:	e7 e7       	ldi	r30, 0x77	; 119
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	e8 0f       	add	r30, r24
     798:	f1 1d       	adc	r31, r1
     79a:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     79c:	78 94       	sei
}
     79e:	08 95       	ret

000007a0 <trtWait>:

void trtWait(uint8_t semnbr) {
     7a0:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     7a2:	20 91 78 02 	lds	r18, 0x0278

  cli(); // disable interrupts
     7a6:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     7a8:	e8 2f       	mov	r30, r24
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e1 55       	subi	r30, 0x51	; 81
     7ae:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     7b0:	80 81       	ld	r24, Z
     7b2:	88 23       	and	r24, r24
     7b4:	19 f0       	breq	.+6      	; 0x7bc <trtWait+0x1c>
    (*s)--;
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	80 83       	st	Z, r24
     7ba:	10 c0       	rjmp	.+32     	; 0x7dc <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	8b e0       	ldi	r24, 0x0B	; 11
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	28 9f       	mul	r18, r24
     7c4:	f0 01       	movw	r30, r0
     7c6:	29 9f       	mul	r18, r25
     7c8:	f0 0d       	add	r31, r0
     7ca:	38 9f       	mul	r19, r24
     7cc:	f0 0d       	add	r31, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	e7 58       	subi	r30, 0x87	; 135
     7d2:	fd 4f       	sbci	r31, 0xFD	; 253
     7d4:	4e 5f       	subi	r20, 0xFE	; 254
     7d6:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     7d8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
  }

  sei(); // reenable interrupts
     7dc:	78 94       	sei
}
     7de:	08 95       	ret

000007e0 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     7e8:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     7ea:	00 91 77 02 	lds	r16, 0x0277
     7ee:	4f ef       	ldi	r20, 0xFF	; 255
     7f0:	5f ef       	ldi	r21, 0xFF	; 255
     7f2:	6f ef       	ldi	r22, 0xFF	; 255
     7f4:	7f ef       	ldi	r23, 0xFF	; 255
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	e1 e0       	ldi	r30, 0x01	; 1
    t = &kernel.tasks[i];
     7fa:	8b e0       	ldi	r24, 0x0B	; 11
     7fc:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     7fe:	21 2f       	mov	r18, r17
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	2e 5f       	subi	r18, 0xFE	; 254
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	1e c0       	rjmp	.+60     	; 0x844 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     808:	ef 9d       	mul	r30, r15
     80a:	d0 01       	movw	r26, r0
     80c:	11 24       	eor	r1, r1
     80e:	a7 58       	subi	r26, 0x87	; 135
     810:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     812:	1a 96       	adiw	r26, 0x0a	; 10
     814:	8c 91       	ld	r24, X
     816:	1a 97       	sbiw	r26, 0x0a	; 10
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	82 17       	cp	r24, r18
     81c:	93 07       	cpc	r25, r19
     81e:	69 f4       	brne	.+26     	; 0x83a <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     820:	16 96       	adiw	r26, 0x06	; 6
     822:	8d 91       	ld	r24, X+
     824:	9d 91       	ld	r25, X+
     826:	0d 90       	ld	r0, X+
     828:	bc 91       	ld	r27, X
     82a:	a0 2d       	mov	r26, r0
     82c:	48 17       	cp	r20, r24
     82e:	59 07       	cpc	r21, r25
     830:	6a 07       	cpc	r22, r26
     832:	7b 07       	cpc	r23, r27
     834:	10 f0       	brcs	.+4      	; 0x83a <trtSignal+0x5a>
     836:	fe 2f       	mov	r31, r30
     838:	02 c0       	rjmp	.+4      	; 0x83e <trtSignal+0x5e>
     83a:	db 01       	movw	r26, r22
     83c:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     83e:	ef 5f       	subi	r30, 0xFF	; 255
     840:	ac 01       	movw	r20, r24
     842:	bd 01       	movw	r22, r26
     844:	0e 17       	cp	r16, r30
     846:	00 f7       	brcc	.-64     	; 0x808 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     848:	ff 23       	and	r31, r31
     84a:	41 f4       	brne	.+16     	; 0x85c <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     84c:	e1 2f       	mov	r30, r17
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ea 58       	subi	r30, 0x8A	; 138
     852:	fd 4f       	sbci	r31, 0xFD	; 253
     854:	81 ad       	ldd	r24, Z+57	; 0x39
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	81 af       	std	Z+57, r24	; 0x39
     85a:	11 c0       	rjmp	.+34     	; 0x87e <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     85c:	2f 2f       	mov	r18, r31
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	8b e0       	ldi	r24, 0x0B	; 11
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	28 9f       	mul	r18, r24
     866:	f0 01       	movw	r30, r0
     868:	29 9f       	mul	r18, r25
     86a:	f0 0d       	add	r31, r0
     86c:	38 9f       	mul	r19, r24
     86e:	f0 0d       	add	r31, r0
     870:	11 24       	eor	r1, r1
     872:	e9 58       	subi	r30, 0x89	; 137
     874:	fd 4f       	sbci	r31, 0xFD	; 253
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     87a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
  }

  sei(); // reenable interrupts
     87e:	78 94       	sei
}
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	08 95       	ret

00000888 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     888:	20 91 84 00 	lds	r18, 0x0084
     88c:	30 91 85 00 	lds	r19, 0x0085
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	80 91 ba 02 	lds	r24, 0x02BA
     898:	90 91 bb 02 	lds	r25, 0x02BB
     89c:	a0 91 bc 02 	lds	r26, 0x02BC
     8a0:	b0 91 bd 02 	lds	r27, 0x02BD
     8a4:	dc 01       	movw	r26, r24
     8a6:	99 27       	eor	r25, r25
     8a8:	88 27       	eor	r24, r24
     8aa:	28 0f       	add	r18, r24
     8ac:	39 1f       	adc	r19, r25
     8ae:	4a 1f       	adc	r20, r26
     8b0:	5b 1f       	adc	r21, r27
}
     8b2:	b9 01       	movw	r22, r18
     8b4:	ca 01       	movw	r24, r20
     8b6:	08 95       	ret

000008b8 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     8b8:	e0 91 78 02 	lds	r30, 0x0278
     8bc:	ab e0       	ldi	r26, 0x0B	; 11
     8be:	ea 9f       	mul	r30, r26
     8c0:	f0 01       	movw	r30, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e7 58       	subi	r30, 0x87	; 135
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     8c8:	f8 94       	cli

  t->state = TIMEQ;
     8ca:	a2 e0       	ldi	r26, 0x02	; 2
     8cc:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     8ce:	62 83       	std	Z+2, r22	; 0x02
     8d0:	73 83       	std	Z+3, r23	; 0x03
     8d2:	84 83       	std	Z+4, r24	; 0x04
     8d4:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     8d6:	26 83       	std	Z+6, r18	; 0x06
     8d8:	37 83       	std	Z+7, r19	; 0x07
     8da:	40 87       	std	Z+8, r20	; 0x08
     8dc:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     8de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
}
     8e2:	08 95       	ret

000008e4 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     8e4:	80 91 78 02 	lds	r24, 0x0278
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2b e0       	ldi	r18, 0x0B	; 11
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	82 9f       	mul	r24, r18
     8f0:	f0 01       	movw	r30, r0
     8f2:	83 9f       	mul	r24, r19
     8f4:	f0 0d       	add	r31, r0
     8f6:	92 9f       	mul	r25, r18
     8f8:	f0 0d       	add	r31, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	e9 58       	subi	r30, 0x89	; 137
     8fe:	fd 4f       	sbci	r31, 0xFD	; 253
     900:	df 01       	movw	r26, r30
     902:	14 96       	adiw	r26, 0x04	; 4
     904:	64 81       	ldd	r22, Z+4	; 0x04
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	7c 91       	ld	r23, X
     90a:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     90c:	12 96       	adiw	r26, 0x02	; 2
     90e:	8c 91       	ld	r24, X
     910:	12 97       	sbiw	r26, 0x02	; 2
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	9c 91       	ld	r25, X
     916:	08 95       	ret

00000918 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     918:	80 91 78 02 	lds	r24, 0x0278
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2b e0       	ldi	r18, 0x0B	; 11
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	82 9f       	mul	r24, r18
     924:	f0 01       	movw	r30, r0
     926:	83 9f       	mul	r24, r19
     928:	f0 0d       	add	r31, r0
     92a:	92 9f       	mul	r25, r18
     92c:	f0 0d       	add	r31, r0
     92e:	11 24       	eor	r1, r1
     930:	e9 58       	subi	r30, 0x89	; 137
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	df 01       	movw	r26, r30
     936:	18 96       	adiw	r26, 0x08	; 8
     938:	60 85       	ldd	r22, Z+8	; 0x08
     93a:	11 96       	adiw	r26, 0x01	; 1
     93c:	7c 91       	ld	r23, X
     93e:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     940:	12 96       	adiw	r26, 0x02	; 2
     942:	8c 91       	ld	r24, X
     944:	12 97       	sbiw	r26, 0x02	; 2
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	9c 91       	ld	r25, X
     94a:	08 95       	ret

0000094c <trtTerminate>:

void trtTerminate(void) {

  cli();
     94c:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     94e:	80 91 78 02 	lds	r24, 0x0278
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2b e0       	ldi	r18, 0x0B	; 11
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	82 9f       	mul	r24, r18
     95a:	f0 01       	movw	r30, r0
     95c:	83 9f       	mul	r24, r19
     95e:	f0 0d       	add	r31, r0
     960:	92 9f       	mul	r25, r18
     962:	f0 0d       	add	r31, r0
     964:	11 24       	eor	r1, r1
     966:	e9 58       	subi	r30, 0x89	; 137
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     96c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__vector_13>
}
     970:	08 95       	ret

00000972 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     972:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     974:	e8 2f       	mov	r30, r24
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e1 55       	subi	r30, 0x51	; 81
     97a:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     97c:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     97e:	88 23       	and	r24, r24
     980:	19 f0       	breq	.+6      	; 0x988 <trtAccept+0x16>
    (*s)--;
     982:	81 50       	subi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
     986:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     988:	78 94       	sei
  return temp ;
}
     98a:	08 95       	ret

0000098c <initLCD>:
	initLCD();
}

//Initialize the LCD
void initLCD(){
	LCDinit();	//initialize the display
     98c:	0e 94 1c 01 	call	0x238	; 0x238 <LCDinit>
	LCDcursorOFF();
     990:	0e 94 84 01 	call	0x308	; 0x308 <LCDcursorOFF>
	LCDclr();				//clear the display
     994:	0e 94 b5 00 	call	0x16a	; 0x16a <LCDclr>
	LCDGotoXY(0,0);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
	//CopyStringtoLCD(LCDHelloTop, 0, 0);
	//CopyStringtoLCD(LCDHelloBot, 0, 1);
}
     9a0:	08 95       	ret

000009a2 <setVref>:

//set the reference voltage
void setVref(uint8_t idx) {
     9a2:	e8 2f       	mov	r30, r24
	switch(idx) {
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <setVref+0x14>
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	18 f0       	brcs	.+6      	; 0x9b2 <setVref+0x10>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	41 f4       	brne	.+16     	; 0x9c0 <setVref+0x1e>
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <setVref+0x18>
		case 0:
			ADMUX = (1 << ADLAR) | (1 << REFS0); //5v
     9b2:	80 e6       	ldi	r24, 0x60	; 96
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <setVref+0x1a>
			break;
		case 1:
			ADMUX = (1 << ADLAR) | (3 << REFS0); //2.56v
     9b6:	80 ee       	ldi	r24, 0xE0	; 224
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <setVref+0x1a>
			break;
		case 2:
			ADMUX = (1 << ADLAR) | (2 << REFS0); //1.1v
     9ba:	80 ea       	ldi	r24, 0xA0	; 160
     9bc:	80 93 7c 00 	sts	0x007C, r24
			break;
	}
	Vref = VrefRanges[idx];
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e7 5f       	subi	r30, 0xF7	; 247
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	a2 81       	ldd	r26, Z+2	; 0x02
     9d4:	b3 81       	ldd	r27, Z+3	; 0x03
     9d6:	80 93 70 02 	sts	0x0270, r24
     9da:	90 93 71 02 	sts	0x0271, r25
     9de:	a0 93 72 02 	sts	0x0272, r26
     9e2:	b0 93 73 02 	sts	0x0273, r27
}
     9e6:	08 95       	ret

000009e8 <initialize>:
//Initialize the MCU
void initialize() {
	//enable ADC and set prescaler to 1/128*16MHz=125,000
	//and clear interupt enable
	//and start a conversion
	ADCSRA = (1<<ADEN) + 7;
     9e8:	87 e8       	ldi	r24, 0x87	; 135
     9ea:	80 93 7a 00 	sts	0x007A, r24
	
	// Set A to input (high impedence)
	DDRA = 0b11111100;
     9ee:	8c ef       	ldi	r24, 0xFC	; 252
     9f0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x10; 	//Turn on the pump
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	82 b9       	out	0x02, r24	; 2

	// PortB: Keypad
	DDRB=0x00;
     9f6:	14 b8       	out	0x04, r1	; 4
	// PortD: Bluetooth module


	// Set analog comp to connect to timer capture input 
	// and turn on the band gap reference on the positive input  
	ACSR =  (1<<ACIC) ; //0b01000100  ;
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	80 bf       	out	0x30, r24	; 48

	ADMUX = (1 << ADLAR) | (1 << REFS0); //set Vref to 5v
     9fc:	80 e6       	ldi	r24, 0x60	; 96
     9fe:	80 93 7c 00 	sts	0x007C, r24
	setVref(0); //Set to 5v Vref
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <setVref>
	initLCD();
     a08:	0e 94 c6 04 	call	0x98c	; 0x98c <initLCD>
}
     a0c:	08 95       	ret

00000a0e <autorange>:
	Vref = VrefRanges[idx];
}

//autorange the reference voltage for best accuracy
// Set rangeIdx if autoRange
void autorange(void){
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
	switch (rangeIdx){
     a16:	80 91 c4 02 	lds	r24, 0x02C4
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	b9 f0       	breq	.+46     	; 0xa4c <autorange+0x3e>
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	20 f0       	brcs	.+8      	; 0xa2a <autorange+0x1c>
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	09 f0       	breq	.+2      	; 0xa28 <autorange+0x1a>
     a26:	44 c0       	rjmp	.+136    	; 0xab0 <autorange+0xa2>
     a28:	2e c0       	rjmp	.+92     	; 0xa86 <autorange+0x78>
		//In the 5 Volt range, move to a smaller scale if the voltage is less than 0.525 of Vref
		case 0:
			if (voltage <= 2.0){
     a2a:	60 91 5a 02 	lds	r22, 0x025A
     a2e:	70 91 5b 02 	lds	r23, 0x025B
     a32:	80 91 5c 02 	lds	r24, 0x025C
     a36:	90 91 5d 02 	lds	r25, 0x025D
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e4       	ldi	r21, 0x40	; 64
     a42:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__lesf2>
     a46:	18 16       	cp	r1, r24
     a48:	9c f1       	brlt	.+102    	; 0xab0 <autorange+0xa2>
     a4a:	12 c0       	rjmp	.+36     	; 0xa70 <autorange+0x62>
			break;
		
		//In the 2.56 Volt range, move to a smaller scale if the voltage is less than 0.4 of Vref
		//or move to a larger scale if the voltage is close to Vref
		case 1:
			if (voltage < 0.9){
     a4c:	e0 90 5a 02 	lds	r14, 0x025A
     a50:	f0 90 5b 02 	lds	r15, 0x025B
     a54:	00 91 5c 02 	lds	r16, 0x025C
     a58:	10 91 5d 02 	lds	r17, 0x025D
     a5c:	c8 01       	movw	r24, r16
     a5e:	b7 01       	movw	r22, r14
     a60:	26 e6       	ldi	r18, 0x66	; 102
     a62:	36 e6       	ldi	r19, 0x66	; 102
     a64:	46 e6       	ldi	r20, 0x66	; 102
     a66:	5f e3       	ldi	r21, 0x3F	; 63
     a68:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__ltsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	24 f4       	brge	.+8      	; 0xa78 <autorange+0x6a>
				rangeIdx++;
     a70:	80 91 c4 02 	lds	r24, 0x02C4
     a74:	8f 5f       	subi	r24, 0xFF	; 255
     a76:	1a c0       	rjmp	.+52     	; 0xaac <autorange+0x9e>
			}
			else if (voltage > 2.0){
     a78:	c8 01       	movw	r24, r16
     a7a:	b7 01       	movw	r22, r14
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e4       	ldi	r21, 0x40	; 64
     a84:	0c c0       	rjmp	.+24     	; 0xa9e <autorange+0x90>
			}
			break;
		
		//In the 1.1 Volt range, move to a larger scale if the voltage is close to Vref
		case 2:
			if (voltage > 0.9){
     a86:	60 91 5a 02 	lds	r22, 0x025A
     a8a:	70 91 5b 02 	lds	r23, 0x025B
     a8e:	80 91 5c 02 	lds	r24, 0x025C
     a92:	90 91 5d 02 	lds	r25, 0x025D
     a96:	26 e6       	ldi	r18, 0x66	; 102
     a98:	36 e6       	ldi	r19, 0x66	; 102
     a9a:	46 e6       	ldi	r20, 0x66	; 102
     a9c:	5f e3       	ldi	r21, 0x3F	; 63
     a9e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__gtsf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	2c f4       	brge	.+10     	; 0xab0 <autorange+0xa2>
				rangeIdx--;
     aa6:	80 91 c4 02 	lds	r24, 0x02C4
     aaa:	81 50       	subi	r24, 0x01	; 1
     aac:	80 93 c4 02 	sts	0x02C4, r24
			}
			break;
	}
	setVref(rangeIdx);	
     ab0:	80 91 c4 02 	lds	r24, 0x02C4
     ab4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <setVref>
}
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <scanKeypad>:
//scan the keypad
uint8_t scanKeypad(void){
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRB = 0x0f;
     ac2:	2f e0       	ldi	r18, 0x0F	; 15
     ac4:	24 b9       	out	0x04, r18	; 4
	PORTB = 0xf0; 
     ac6:	80 ef       	ldi	r24, 0xF0	; 240
     ac8:	85 b9       	out	0x05, r24	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aca:	9a e1       	ldi	r25, 0x1A	; 26
     acc:	39 2f       	mov	r19, r25
     ace:	3a 95       	dec	r19
     ad0:	f1 f7       	brne	.-4      	; 0xace <scanKeypad+0xc>
	_delay_us(5);
	key = PINB;
     ad2:	33 b1       	in	r19, 0x03	; 3
	
	//get upper nibble
	DDRB = 0xf0;
     ad4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0f; 
     ad6:	25 b9       	out	0x05, r18	; 5
     ad8:	9a 95       	dec	r25
     ada:	f1 f7       	brne	.-4      	; 0xad8 <scanKeypad+0x16>
	_delay_us(5);
	key = key | PINB;
     adc:	23 b1       	in	r18, 0x03	; 3
     ade:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     ae0:	2f 3f       	cpi	r18, 0xFF	; 255
     ae2:	61 f0       	breq	.+24     	; 0xafc <scanKeypad+0x3a>
     ae4:	e5 e1       	ldi	r30, 0x15	; 21
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<MAX_KEYS; butnum++){
			if (keytbl[butnum]==key) {
     aea:	80 81       	ld	r24, Z
     aec:	9f 5f       	subi	r25, 0xFF	; 255
     aee:	82 17       	cp	r24, r18
     af0:	11 f4       	brne	.+4      	; 0xaf6 <scanKeypad+0x34>

		if (butnum==MAX_KEYS) {
			butnum=0;
		}
		else {
			butnum++;	   //adjust by one to make range 1-16
     af2:	89 2f       	mov	r24, r25
     af4:	08 95       	ret
	_delay_us(5);
	key = key | PINB;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<MAX_KEYS; butnum++){
     af6:	31 96       	adiw	r30, 0x01	; 1
     af8:	90 31       	cpi	r25, 0x10	; 16
     afa:	b9 f7       	brne	.-18     	; 0xaea <scanKeypad+0x28>
     afc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else butnum=0;
	
	return butnum;
}
     afe:	08 95       	ret

00000b00 <debounce>:
	setVref(rangeIdx);	
}

//Debounce the button using a debounce state machine
void debounce(void){
	uint8_t key = scanKeypad(); //Scan the keypad
     b00:	0e 94 61 05 	call	0xac2	; 0xac2 <scanKeypad>
     b04:	98 2f       	mov	r25, r24
	switch(keyState){
     b06:	20 91 59 02 	lds	r18, 0x0259
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	89 f0       	breq	.+34     	; 0xb30 <debounce+0x30>
     b0e:	21 30       	cpi	r18, 0x01	; 1
     b10:	20 f0       	brcs	.+8      	; 0xb1a <debounce+0x1a>
     b12:	22 30       	cpi	r18, 0x02	; 2
     b14:	09 f0       	breq	.+2      	; 0xb18 <debounce+0x18>
     b16:	48 c0       	rjmp	.+144    	; 0xba8 <debounce+0xa8>
     b18:	2c c0       	rjmp	.+88     	; 0xb72 <debounce+0x72>
	
	//in the RELEASED state: stay in this state if a key is not pressed
	//go to UNKNOWN if any key is pressed and reset the debounce countdown.
	case RELEASED:
		if (key){
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <debounce+0x20>
     b1e:	44 c0       	rjmp	.+136    	; 0xba8 <debounce+0xa8>
			keyState = UNKNOWN;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 59 02 	sts	0x0259, r24
			prevKeyState = RELEASED;
     b26:	10 92 5f 02 	sts	0x025F, r1
			debouncing = 1;
     b2a:	80 93 76 02 	sts	0x0276, r24
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <debounce+0x4c>
		break;

	//in the UNKNOWN state: go to released if the button is not down
	//go to PUSHED if the button is down
	case UNKNOWN:
		if (key){
     b30:	88 23       	and	r24, r24
     b32:	79 f0       	breq	.+30     	; 0xb52 <debounce+0x52>
			if (key == checkKey){
     b34:	80 91 c2 02 	lds	r24, 0x02C2
     b38:	98 17       	cp	r25, r24
     b3a:	31 f4       	brne	.+12     	; 0xb48 <debounce+0x48>
				keyState = PUSHED;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	80 93 59 02 	sts	0x0259, r24
				prevKeyState = UNKNOWN;
     b42:	20 93 5f 02 	sts	0x025F, r18
     b46:	12 c0       	rjmp	.+36     	; 0xb6c <debounce+0x6c>
				debouncing = 0;
			}
			else {
				debouncing = 1;
     b48:	20 93 76 02 	sts	0x0276, r18
				checkKey = key;
     b4c:	90 93 c2 02 	sts	0x02C2, r25
     b50:	08 95       	ret
			}
		}
		else{
			keyState = RELEASED;
     b52:	10 92 59 02 	sts	0x0259, r1
			if (prevKeyState == PUSHED) {
     b56:	80 91 5f 02 	lds	r24, 0x025F
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	21 f4       	brne	.+8      	; 0xb66 <debounce+0x66>
				curKey = checkKey; //The key to be checked has been pressed and debounced
     b5e:	80 91 c2 02 	lds	r24, 0x02C2
     b62:	80 93 74 02 	sts	0x0274, r24
			}
			prevKeyState = UNKNOWN;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 5f 02 	sts	0x025F, r24
			debouncing = 0;
     b6c:	10 92 76 02 	sts	0x0276, r1
     b70:	08 95       	ret
		break;

	//in the PUSHED state go to UnKnown if the button is not down.
	//stay in PUSHED if the button is down
	case PUSHED:
		if (!key){
     b72:	88 23       	and	r24, r24
     b74:	41 f4       	brne	.+16     	; 0xb86 <debounce+0x86>
			keyState = UNKNOWN;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 59 02 	sts	0x0259, r24
			prevKeyState = PUSHED;
     b7c:	20 93 5f 02 	sts	0x025F, r18
			debouncing = 1;
     b80:	80 93 76 02 	sts	0x0276, r24
     b84:	08 95       	ret
		}
		else if (key != checkKey){
     b86:	80 91 c2 02 	lds	r24, 0x02C2
     b8a:	98 17       	cp	r25, r24
     b8c:	69 f0       	breq	.+26     	; 0xba8 <debounce+0xa8>
			keyState = UNKNOWN;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 59 02 	sts	0x0259, r24
			prevKeyState = RELEASED; //...???
     b94:	10 92 5f 02 	sts	0x025F, r1
			debouncing = 1;
     b98:	80 93 76 02 	sts	0x0276, r24
			curKey = checkKey;
     b9c:	80 91 c2 02 	lds	r24, 0x02C2
     ba0:	80 93 74 02 	sts	0x0274, r24
			checkKey = key;
     ba4:	90 93 c2 02 	sts	0x02C2, r25
     ba8:	08 95       	ret

00000baa <getCurKey>:
	return butnum;
}

//Get the currect key
uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     baa:	90 91 74 02 	lds	r25, 0x0274
	if (curKey){
     bae:	80 91 74 02 	lds	r24, 0x0274
     bb2:	88 23       	and	r24, r24
     bb4:	11 f0       	breq	.+4      	; 0xbba <getCurKey+0x10>
		curKey = 0;
     bb6:	10 92 74 02 	sts	0x0274, r1
	}
	return tmpKey;
}
     bba:	89 2f       	mov	r24, r25
     bbc:	08 95       	ret

00000bbe <pidControl>:

//Actual tasks to complete
//PID Control Stuff...worry about this silt later
// --- define task 1  ----------------------------------------
void pidControl(void* args) 
  {	
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	66 24       	eor	r6, r6
     be2:	77 24       	eor	r7, r7
     be4:	88 24       	eor	r8, r8
     be6:	99 24       	eor	r9, r9
     be8:	44 24       	eor	r4, r4
     bea:	55 24       	eor	r5, r5
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e0       	ldi	r29, 0x00	; 0
     bf0:	33 24       	eor	r3, r3
     bf2:	33 94       	inc	r3
			prevSign = sign;
			prevError = error;
		}

		//poll the ADC and convert the voltage to a temperature
		Ain = ADCH;
     bf4:	80 91 79 00 	lds	r24, 0x0079
     bf8:	80 93 c5 02 	sts	0x02C5, r24
		voltage = (float)Ain;
     bfc:	60 91 c5 02 	lds	r22, 0x02C5
		voltage = (voltage/256.0) * Vref;
     c00:	e0 90 70 02 	lds	r14, 0x0270
     c04:	f0 90 71 02 	lds	r15, 0x0271
     c08:	00 91 72 02 	lds	r16, 0x0272
     c0c:	10 91 73 02 	lds	r17, 0x0273
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5b e3       	ldi	r21, 0x3B	; 59
     c22:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     c26:	a8 01       	movw	r20, r16
     c28:	97 01       	movw	r18, r14
     c2a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     c2e:	60 93 5a 02 	sts	0x025A, r22
     c32:	70 93 5b 02 	sts	0x025B, r23
     c36:	80 93 5c 02 	sts	0x025C, r24
     c3a:	90 93 5d 02 	sts	0x025D, r25
		autorange();
     c3e:	0e 94 07 05 	call	0xa0e	; 0xa0e <autorange>
		localWaterTemp = voltage * transductionConstant;
     c42:	60 91 5a 02 	lds	r22, 0x025A
     c46:	70 91 5b 02 	lds	r23, 0x025B
     c4a:	80 91 5c 02 	lds	r24, 0x025C
     c4e:	90 91 5d 02 	lds	r25, 0x025D
     c52:	2a e0       	ldi	r18, 0x0A	; 10
     c54:	37 ed       	ldi	r19, 0xD7	; 215
     c56:	43 e2       	ldi	r20, 0x23	; 35
     c58:	5c e3       	ldi	r21, 0x3C	; 60
     c5a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     c5e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fixunssfsi>
     c62:	5b 01       	movw	r10, r22
     c64:	6c 01       	movw	r12, r24

		//make local copies of the system parameters
		trtWait(SEM_T_WATER);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		waterTemp = localWaterTemp; 
     c6c:	b5 01       	movw	r22, r10
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
     c76:	60 93 35 01 	sts	0x0135, r22
     c7a:	70 93 36 01 	sts	0x0136, r23
     c7e:	80 93 37 01 	sts	0x0137, r24
     c82:	90 93 38 01 	sts	0x0138, r25
		trtSignal(SEM_T_WATER);
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

		trtWait(SEM_T_WATER_REF);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		localWaterTempRef = waterTempRef;
     c92:	60 91 2d 01 	lds	r22, 0x012D
     c96:	70 91 2e 01 	lds	r23, 0x012E
     c9a:	80 91 2f 01 	lds	r24, 0x012F
     c9e:	90 91 30 01 	lds	r25, 0x0130
     ca2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fixunssfsi>
     ca6:	7b 01       	movw	r14, r22
     ca8:	8c 01       	movw	r16, r24
		trtSignal(SEM_T_WATER_REF);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

		//Proportional Error
		error = localWaterTempRef - localWaterTemp;
     cb0:	ea 18       	sub	r14, r10
     cb2:	fb 08       	sbc	r15, r11
     cb4:	b7 01       	movw	r22, r14
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
     cbe:	5b 01       	movw	r10, r22
     cc0:	6c 01       	movw	r12, r24

		//Integral Error

		//Get the current sign of the error
		if (!first) {
     cc2:	33 20       	and	r3, r3
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <pidControl+0x10a>
     cc6:	63 c0       	rjmp	.+198    	; 0xd8e <pidControl+0x1d0>
			if (error - prevError > 0){
     cc8:	93 01       	movw	r18, r6
     cca:	a4 01       	movw	r20, r8
     ccc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__subsf3>
     cd0:	3b 01       	movw	r6, r22
     cd2:	4c 01       	movw	r8, r24
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__gtsf2>
     ce0:	18 16       	cp	r1, r24
     ce2:	64 f0       	brlt	.+24     	; 0xcfc <pidControl+0x13e>
				sign = 1;
			}
			else if (error - prevError < 0) {
     ce4:	c4 01       	movw	r24, r8
     ce6:	b3 01       	movw	r22, r6
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__ltsf2>
     cf4:	58 2e       	mov	r5, r24
     cf6:	55 0c       	add	r5, r5
     cf8:	55 08       	sbc	r5, r5
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <pidControl+0x142>
     cfc:	55 24       	eor	r5, r5
     cfe:	53 94       	inc	r5
			}
		}
		
		//Update the integral of the error
		if (!first){
			if (sign == prevSign){
     d00:	54 14       	cp	r5, r4
     d02:	61 f4       	brne	.+24     	; 0xd1c <pidControl+0x15e>
				integral += error;
     d04:	be 01       	movw	r22, r28
     d06:	88 27       	eor	r24, r24
     d08:	77 fd       	sbrc	r23, 7
     d0a:	80 95       	com	r24
     d0c:	98 2f       	mov	r25, r24
     d0e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__floatsisf>
     d12:	a6 01       	movw	r20, r12
     d14:	95 01       	movw	r18, r10
     d16:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__addsf3>
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <pidControl+0x16e>
			}
			else{
				integral = 0.8 * error;
     d1c:	c6 01       	movw	r24, r12
     d1e:	b5 01       	movw	r22, r10
     d20:	2d ec       	ldi	r18, 0xCD	; 205
     d22:	3c ec       	ldi	r19, 0xCC	; 204
     d24:	4c e4       	ldi	r20, 0x4C	; 76
     d26:	5f e3       	ldi	r21, 0x3F	; 63
     d28:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     d2c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
     d30:	eb 01       	movw	r28, r22
			derivative = error - prevError;
		}

		//determine what the output should be
		if (!first){
			output = k_p * error + k_i * integral + k_d * derivative;
     d32:	be 01       	movw	r22, r28
     d34:	88 27       	eor	r24, r24
     d36:	77 fd       	sbrc	r23, 7
     d38:	80 95       	com	r24
     d3a:	98 2f       	mov	r25, r24
     d3c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__floatsisf>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     d4c:	9b 01       	movw	r18, r22
     d4e:	ac 01       	movw	r20, r24
     d50:	c6 01       	movw	r24, r12
     d52:	b5 01       	movw	r22, r10
     d54:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__addsf3>
     d58:	7b 01       	movw	r14, r22
     d5a:	8c 01       	movw	r16, r24
     d5c:	c4 01       	movw	r24, r8
     d5e:	b3 01       	movw	r22, r6
     d60:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
     d64:	88 27       	eor	r24, r24
     d66:	77 fd       	sbrc	r23, 7
     d68:	80 95       	com	r24
     d6a:	98 2f       	mov	r25, r24
     d6c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__floatsisf>
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsf3>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	c8 01       	movw	r24, r16
     d82:	b7 01       	movw	r22, r14
     d84:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__addsf3>
     d88:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <pidControl+0x1d6>
		}
		else{
			output = k_p * error;
     d8e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
     d92:	33 24       	eor	r3, r3
			first = 0;
		}

		//clamp the output between 0 and 255 so we can directly set OCR0A
		if (output < 0){
     d94:	77 ff       	sbrs	r23, 7
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <pidControl+0x1de>
			OCR0A = 0;
     d98:	17 bc       	out	0x27, r1	; 39
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <pidControl+0x1f2>
		}
		else if (output > 255) {
     d9c:	6f 3f       	cpi	r22, 0xFF	; 255
     d9e:	71 05       	cpc	r23, r1
     da0:	31 f0       	breq	.+12     	; 0xdae <pidControl+0x1f0>
     da2:	2c f0       	brlt	.+10     	; 0xdae <pidControl+0x1f0>
			OCR0A = 255; //saturated the controller, turn the integrator off
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	87 bd       	out	0x27, r24	; 39
     da8:	c0 e0       	ldi	r28, 0x00	; 0
     daa:	d0 e0       	ldi	r29, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <pidControl+0x1f2>
			integral = 0;
		}
		else {
			OCR0A = output;
     dae:	67 bd       	out	0x27, r22	; 39
		}
		
		if (error > 0){
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__gtsf2>
     dc0:	18 16       	cp	r1, r24
     dc2:	14 f4       	brge	.+4      	; 0xdc8 <pidControl+0x20a>
			//Turn the heating thing on
			PORTA |= 0x08; //Pin 3...???
     dc4:	13 9a       	sbi	0x02, 3	; 2
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <pidControl+0x20c>
		}
		else{
			//Turn the heating thing off
			PORTA &= ~0x08;
     dc8:	13 98       	cbi	0x02, 3	; 2
		}

		ADCSRA |= (1<<ADSC);
     dca:	80 91 7a 00 	lds	r24, 0x007A
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	80 93 7a 00 	sts	0x007A, r24
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     dd4:	20 91 ba 02 	lds	r18, 0x02BA
     dd8:	30 91 bb 02 	lds	r19, 0x02BB
     ddc:	40 91 bc 02 	lds	r20, 0x02BC
     de0:	50 91 bd 02 	lds	r21, 0x02BD
     de4:	a9 01       	movw	r20, r18
     de6:	33 27       	eor	r19, r19
     de8:	22 27       	eor	r18, r18
     dea:	60 91 84 00 	lds	r22, 0x0084
     dee:	70 91 85 00 	lds	r23, 0x0085
		//Set the task to execute again in 0.02 seconds.
		rel = trtCurrentTime() + SECONDS2TICKS(0.19);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.21);
	    trtSleepUntil(rel, dead);
     df2:	e0 90 84 00 	lds	r14, 0x0084
     df6:	f0 90 85 00 	lds	r15, 0x0085
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	62 0f       	add	r22, r18
     e00:	73 1f       	adc	r23, r19
     e02:	84 1f       	adc	r24, r20
     e04:	95 1f       	adc	r25, r21
     e06:	68 56       	subi	r22, 0x68	; 104
     e08:	74 4f       	sbci	r23, 0xF4	; 244
     e0a:	8f 4f       	sbci	r24, 0xFF	; 255
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	2e 0d       	add	r18, r14
     e14:	3f 1d       	adc	r19, r15
     e16:	40 1f       	adc	r20, r16
     e18:	51 1f       	adc	r21, r17
     e1a:	2f 52       	subi	r18, 0x2F	; 47
     e1c:	33 4f       	sbci	r19, 0xF3	; 243
     e1e:	4f 4f       	sbci	r20, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <trtSleepUntil>
	const float transductionConstant = 0.01; // V/degF	

	while(1)
	{
		//update the previous measuremtns
		if (!first){
     e26:	d6 01       	movw	r26, r12
     e28:	c5 01       	movw	r24, r10
     e2a:	35 01       	movw	r6, r10
     e2c:	4d 01       	movw	r8, r26
     e2e:	45 2c       	mov	r4, r5
     e30:	e1 ce       	rjmp	.-574    	; 0xbf4 <pidControl+0x36>

00000e32 <keypadComm>:
	    trtSleepUntil(rel, dead);
	}
 }

 //get input from the keypad
 void keypadComm(void* args) {
     e32:	2f 92       	push	r2
     e34:	3f 92       	push	r3
     e36:	4f 92       	push	r4
     e38:	5f 92       	push	r5
     e3a:	6f 92       	push	r6
     e3c:	7f 92       	push	r7
     e3e:	8f 92       	push	r8
     e40:	9f 92       	push	r9
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	68 97       	sbiw	r28, 0x18	; 24
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
	return butnum;
}

//Get the currect key
uint8_t getCurKey(void){
	uint8_t tmpKey = curKey;
     e64:	b0 90 74 02 	lds	r11, 0x0274
	if (curKey){
     e68:	80 91 74 02 	lds	r24, 0x0274
     e6c:	88 23       	and	r24, r24
     e6e:	11 f0       	breq	.+4      	; 0xe74 <keypadComm+0x42>
		curKey = 0;
     e70:	10 92 74 02 	sts	0x0274, r1
     e74:	66 24       	eor	r6, r6
     e76:	77 24       	eor	r7, r7
     e78:	43 01       	movw	r8, r6
     e7a:	22 24       	eor	r2, r2
     e7c:	33 24       	eor	r3, r3
     e7e:	21 01       	movw	r4, r2
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	89 8b       	std	Y+17, r24	; 0x11
     e8a:	9a 8b       	std	Y+18, r25	; 0x12
     e8c:	ab 8b       	std	Y+19, r26	; 0x13
     e8e:	bc 8b       	std	Y+20, r27	; 0x14
     e90:	aa 24       	eor	r10, r10
     e92:	cc 24       	eor	r12, r12
     e94:	c3 94       	inc	r12
									//key comes before or after the decimal point

	while(1)
	{
		//If we aren't debouncing, scan the keypad and begin debouncing the signal
		if (!debouncing){
     e96:	80 91 76 02 	lds	r24, 0x0276
			debounce();
		}

		//Otherwise, finish debouncing the signal
		else {
			debounce();
     e9a:	0e 94 80 05 	call	0xb00	; 0xb00 <debounce>
		}

		if (waitingForInput) {
     e9e:	80 91 46 02 	lds	r24, 0x0246
     ea2:	88 23       	and	r24, r24
     ea4:	c1 f3       	breq	.-16     	; 0xe96 <keypadComm+0x64>
			switch (key){
     ea6:	97 e0       	ldi	r25, 0x07	; 7
     ea8:	b9 16       	cp	r11, r25
     eaa:	09 f4       	brne	.+2      	; 0xeae <keypadComm+0x7c>
     eac:	8e c1       	rjmp	.+796    	; 0x11ca <__stack+0xcb>
     eae:	9b 15       	cp	r25, r11
     eb0:	a8 f0       	brcs	.+42     	; 0xedc <keypadComm+0xaa>
     eb2:	a3 e0       	ldi	r26, 0x03	; 3
     eb4:	ba 16       	cp	r11, r26
     eb6:	09 f4       	brne	.+2      	; 0xeba <keypadComm+0x88>
     eb8:	a4 c0       	rjmp	.+328    	; 0x1002 <keypadComm+0x1d0>
     eba:	ab 15       	cp	r26, r11
     ebc:	38 f0       	brcs	.+14     	; 0xecc <keypadComm+0x9a>
     ebe:	b1 e0       	ldi	r27, 0x01	; 1
     ec0:	bb 16       	cp	r11, r27
     ec2:	29 f1       	breq	.+74     	; 0xf0e <keypadComm+0xdc>
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	b8 16       	cp	r11, r24
     ec8:	31 f7       	brne	.-52     	; 0xe96 <keypadComm+0x64>
     eca:	55 c0       	rjmp	.+170    	; 0xf76 <keypadComm+0x144>
     ecc:	95 e0       	ldi	r25, 0x05	; 5
     ece:	b9 16       	cp	r11, r25
     ed0:	09 f4       	brne	.+2      	; 0xed4 <keypadComm+0xa2>
     ed2:	09 c1       	rjmp	.+530    	; 0x10e6 <keypadComm+0x2b4>
     ed4:	9b 15       	cp	r25, r11
     ed6:	08 f4       	brcc	.+2      	; 0xeda <keypadComm+0xa8>
     ed8:	3f c1       	rjmp	.+638    	; 0x1158 <__stack+0x59>
     eda:	cc c0       	rjmp	.+408    	; 0x1074 <keypadComm+0x242>
     edc:	ad e0       	ldi	r26, 0x0D	; 13
     ede:	ba 16       	cp	r11, r26
     ee0:	09 f4       	brne	.+2      	; 0xee4 <keypadComm+0xb2>
     ee2:	a0 c2       	rjmp	.+1344   	; 0x1424 <__stack+0x325>
     ee4:	ab 15       	cp	r26, r11
     ee6:	40 f0       	brcs	.+16     	; 0xef8 <keypadComm+0xc6>
     ee8:	b8 e0       	ldi	r27, 0x08	; 8
     eea:	bb 16       	cp	r11, r27
     eec:	09 f4       	brne	.+2      	; 0xef0 <keypadComm+0xbe>
     eee:	a6 c1       	rjmp	.+844    	; 0x123c <__stack+0x13d>
     ef0:	89 e0       	ldi	r24, 0x09	; 9
     ef2:	b8 16       	cp	r11, r24
     ef4:	81 f6       	brne	.-96     	; 0xe96 <keypadComm+0x64>
     ef6:	db c1       	rjmp	.+950    	; 0x12ae <__stack+0x1af>
     ef8:	9f e0       	ldi	r25, 0x0F	; 15
     efa:	b9 16       	cp	r11, r25
     efc:	09 f4       	brne	.+2      	; 0xf00 <keypadComm+0xce>
     efe:	46 c2       	rjmp	.+1164   	; 0x138c <__stack+0x28d>
     f00:	b9 16       	cp	r11, r25
     f02:	08 f4       	brcc	.+2      	; 0xf06 <keypadComm+0xd4>
     f04:	39 c2       	rjmp	.+1138   	; 0x1378 <__stack+0x279>
     f06:	a0 e1       	ldi	r26, 0x10	; 16
     f08:	ba 16       	cp	r11, r26
     f0a:	29 f6       	brne	.-118    	; 0xe96 <keypadComm+0x64>
     f0c:	0a c2       	rjmp	.+1044   	; 0x1322 <__stack+0x223>
				case 0x01:
					valBuffer[valLoc] = '1';
					if (beforeDecimal){
     f0e:	cc 20       	and	r12, r12
     f10:	81 f0       	breq	.+32     	; 0xf32 <keypadComm+0x100>
						valInt = valInt * 10 + 1;
     f12:	c4 01       	movw	r24, r8
     f14:	b3 01       	movw	r22, r6
     f16:	2a e0       	ldi	r18, 0x0A	; 10
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
     f22:	3b 01       	movw	r6, r22
     f24:	4c 01       	movw	r8, r24
     f26:	08 94       	sec
     f28:	61 1c       	adc	r6, r1
     f2a:	71 1c       	adc	r7, r1
     f2c:	81 1c       	adc	r8, r1
     f2e:	91 1c       	adc	r9, r1
     f30:	19 c0       	rjmp	.+50     	; 0xf64 <keypadComm+0x132>
					}
					else {
						valDec = valDec * 10 + 1;
     f32:	c2 01       	movw	r24, r4
     f34:	b1 01       	movw	r22, r2
     f36:	2a e0       	ldi	r18, 0x0A	; 10
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
     f42:	1b 01       	movw	r2, r22
     f44:	2c 01       	movw	r4, r24
     f46:	08 94       	sec
     f48:	21 1c       	adc	r2, r1
     f4a:	31 1c       	adc	r3, r1
     f4c:	41 1c       	adc	r4, r1
     f4e:	51 1c       	adc	r5, r1
						numAfterDecimal *= 10;
     f50:	69 89       	ldd	r22, Y+17	; 0x11
     f52:	7a 89       	ldd	r23, Y+18	; 0x12
     f54:	8b 89       	ldd	r24, Y+19	; 0x13
     f56:	9c 89       	ldd	r25, Y+20	; 0x14
     f58:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
     f5c:	69 8b       	std	Y+17, r22	; 0x11
     f5e:	7a 8b       	std	Y+18, r23	; 0x12
     f60:	8b 8b       	std	Y+19, r24	; 0x13
     f62:	9c 8b       	std	Y+20, r25	; 0x14
		}

		if (waitingForInput) {
			switch (key){
				case 0x01:
					valBuffer[valLoc] = '1';
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	ec 0f       	add	r30, r28
     f6a:	fd 1f       	adc	r31, r29
     f6c:	ea 0d       	add	r30, r10
     f6e:	f1 1d       	adc	r31, r1
     f70:	b1 e3       	ldi	r27, 0x31	; 49
     f72:	b0 83       	st	Z, r27
     f74:	ff c1       	rjmp	.+1022   	; 0x1374 <__stack+0x275>
					}
					valLoc++;
					break;
				case 0x02:
					valBuffer[valLoc] = '2';
					if (beforeDecimal) {
     f76:	cc 20       	and	r12, r12
     f78:	b9 f0       	breq	.+46     	; 0xfa8 <keypadComm+0x176>
						valInt = valInt * 10 + 2;
     f7a:	d4 01       	movw	r26, r8
     f7c:	c3 01       	movw	r24, r6
     f7e:	22 e0       	ldi	r18, 0x02	; 2
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	aa 1f       	adc	r26, r26
     f86:	bb 1f       	adc	r27, r27
     f88:	2a 95       	dec	r18
     f8a:	d1 f7       	brne	.-12     	; 0xf80 <keypadComm+0x14e>
     f8c:	68 0e       	add	r6, r24
     f8e:	79 1e       	adc	r7, r25
     f90:	8a 1e       	adc	r8, r26
     f92:	9b 1e       	adc	r9, r27
     f94:	08 94       	sec
     f96:	61 1c       	adc	r6, r1
     f98:	71 1c       	adc	r7, r1
     f9a:	81 1c       	adc	r8, r1
     f9c:	91 1c       	adc	r9, r1
     f9e:	66 0c       	add	r6, r6
     fa0:	77 1c       	adc	r7, r7
     fa2:	88 1c       	adc	r8, r8
     fa4:	99 1c       	adc	r9, r9
     fa6:	24 c0       	rjmp	.+72     	; 0xff0 <keypadComm+0x1be>
					}
					else {
						valDec = valDec * 10 + 2;
     fa8:	d2 01       	movw	r26, r4
     faa:	c1 01       	movw	r24, r2
     fac:	12 e0       	ldi	r17, 0x02	; 2
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	1a 95       	dec	r17
     fb8:	d1 f7       	brne	.-12     	; 0xfae <keypadComm+0x17c>
     fba:	28 0e       	add	r2, r24
     fbc:	39 1e       	adc	r3, r25
     fbe:	4a 1e       	adc	r4, r26
     fc0:	5b 1e       	adc	r5, r27
     fc2:	08 94       	sec
     fc4:	21 1c       	adc	r2, r1
     fc6:	31 1c       	adc	r3, r1
     fc8:	41 1c       	adc	r4, r1
     fca:	51 1c       	adc	r5, r1
     fcc:	22 0c       	add	r2, r2
     fce:	33 1c       	adc	r3, r3
     fd0:	44 1c       	adc	r4, r4
     fd2:	55 1c       	adc	r5, r5
						numAfterDecimal *= 10;
     fd4:	69 89       	ldd	r22, Y+17	; 0x11
     fd6:	7a 89       	ldd	r23, Y+18	; 0x12
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	9c 89       	ldd	r25, Y+20	; 0x14
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
     fe8:	69 8b       	std	Y+17, r22	; 0x11
     fea:	7a 8b       	std	Y+18, r23	; 0x12
     fec:	8b 8b       	std	Y+19, r24	; 0x13
     fee:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x02:
					valBuffer[valLoc] = '2';
     ff0:	e1 e0       	ldi	r30, 0x01	; 1
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	ec 0f       	add	r30, r28
     ff6:	fd 1f       	adc	r31, r29
     ff8:	ea 0d       	add	r30, r10
     ffa:	f1 1d       	adc	r31, r1
     ffc:	82 e3       	ldi	r24, 0x32	; 50
     ffe:	80 83       	st	Z, r24
    1000:	b9 c1       	rjmp	.+882    	; 0x1374 <__stack+0x275>
					}
					valLoc++;
					break;
				case 0x03:
					valBuffer[valLoc] = '3';
					if (beforeDecimal) {
    1002:	cc 20       	and	r12, r12
    1004:	99 f0       	breq	.+38     	; 0x102c <keypadComm+0x1fa>
						valInt = valInt * 10 + 3;
    1006:	c4 01       	movw	r24, r8
    1008:	b3 01       	movw	r22, r6
    100a:	2a e0       	ldi	r18, 0x0A	; 10
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1016:	3b 01       	movw	r6, r22
    1018:	4c 01       	movw	r8, r24
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	68 0e       	add	r6, r24
    1024:	79 1e       	adc	r7, r25
    1026:	8a 1e       	adc	r8, r26
    1028:	9b 1e       	adc	r9, r27
    102a:	1c c0       	rjmp	.+56     	; 0x1064 <keypadComm+0x232>
					}
					else{
						valDec = valDec * 10 + 3;
    102c:	c2 01       	movw	r24, r4
    102e:	b1 01       	movw	r22, r2
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    103c:	1b 01       	movw	r2, r22
    103e:	2c 01       	movw	r4, r24
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	28 0e       	add	r2, r24
    104a:	39 1e       	adc	r3, r25
    104c:	4a 1e       	adc	r4, r26
    104e:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    1050:	69 89       	ldd	r22, Y+17	; 0x11
    1052:	7a 89       	ldd	r23, Y+18	; 0x12
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	9c 89       	ldd	r25, Y+20	; 0x14
    1058:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    105c:	69 8b       	std	Y+17, r22	; 0x11
    105e:	7a 8b       	std	Y+18, r23	; 0x12
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x03:
					valBuffer[valLoc] = '3';
    1064:	e1 e0       	ldi	r30, 0x01	; 1
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ec 0f       	add	r30, r28
    106a:	fd 1f       	adc	r31, r29
    106c:	ea 0d       	add	r30, r10
    106e:	f1 1d       	adc	r31, r1
    1070:	93 e3       	ldi	r25, 0x33	; 51
    1072:	55 c1       	rjmp	.+682    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x04:
					valBuffer[valLoc] = '4';
					if (beforeDecimal) {
    1074:	cc 20       	and	r12, r12
    1076:	99 f0       	breq	.+38     	; 0x109e <keypadComm+0x26c>
						valInt = valInt * 10 + 4;
    1078:	c4 01       	movw	r24, r8
    107a:	b3 01       	movw	r22, r6
    107c:	2a e0       	ldi	r18, 0x0A	; 10
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1088:	3b 01       	movw	r6, r22
    108a:	4c 01       	movw	r8, r24
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	68 0e       	add	r6, r24
    1096:	79 1e       	adc	r7, r25
    1098:	8a 1e       	adc	r8, r26
    109a:	9b 1e       	adc	r9, r27
    109c:	1c c0       	rjmp	.+56     	; 0x10d6 <keypadComm+0x2a4>
					}
					else{
						valDec = valDec * 10 + 4;
    109e:	c2 01       	movw	r24, r4
    10a0:	b1 01       	movw	r22, r2
    10a2:	2a e0       	ldi	r18, 0x0A	; 10
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    10ae:	1b 01       	movw	r2, r22
    10b0:	2c 01       	movw	r4, r24
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	28 0e       	add	r2, r24
    10bc:	39 1e       	adc	r3, r25
    10be:	4a 1e       	adc	r4, r26
    10c0:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    10c2:	69 89       	ldd	r22, Y+17	; 0x11
    10c4:	7a 89       	ldd	r23, Y+18	; 0x12
    10c6:	8b 89       	ldd	r24, Y+19	; 0x13
    10c8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ca:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    10ce:	69 8b       	std	Y+17, r22	; 0x11
    10d0:	7a 8b       	std	Y+18, r23	; 0x12
    10d2:	8b 8b       	std	Y+19, r24	; 0x13
    10d4:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x04:
					valBuffer[valLoc] = '4';
    10d6:	e1 e0       	ldi	r30, 0x01	; 1
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	ec 0f       	add	r30, r28
    10dc:	fd 1f       	adc	r31, r29
    10de:	ea 0d       	add	r30, r10
    10e0:	f1 1d       	adc	r31, r1
    10e2:	94 e3       	ldi	r25, 0x34	; 52
    10e4:	1c c1       	rjmp	.+568    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x05:
					valBuffer[valLoc] = '5';
					if (beforeDecimal) {
    10e6:	cc 20       	and	r12, r12
    10e8:	99 f0       	breq	.+38     	; 0x1110 <__stack+0x11>
						valInt = valInt * 10 + 5;
    10ea:	c4 01       	movw	r24, r8
    10ec:	b3 01       	movw	r22, r6
    10ee:	2a e0       	ldi	r18, 0x0A	; 10
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    10fa:	3b 01       	movw	r6, r22
    10fc:	4c 01       	movw	r8, r24
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	68 0e       	add	r6, r24
    1108:	79 1e       	adc	r7, r25
    110a:	8a 1e       	adc	r8, r26
    110c:	9b 1e       	adc	r9, r27
    110e:	1c c0       	rjmp	.+56     	; 0x1148 <__stack+0x49>
					}
					else{
						valDec = valDec * 10 + 5;
    1110:	c2 01       	movw	r24, r4
    1112:	b1 01       	movw	r22, r2
    1114:	2a e0       	ldi	r18, 0x0A	; 10
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1120:	1b 01       	movw	r2, r22
    1122:	2c 01       	movw	r4, r24
    1124:	85 e0       	ldi	r24, 0x05	; 5
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	28 0e       	add	r2, r24
    112e:	39 1e       	adc	r3, r25
    1130:	4a 1e       	adc	r4, r26
    1132:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    1134:	69 89       	ldd	r22, Y+17	; 0x11
    1136:	7a 89       	ldd	r23, Y+18	; 0x12
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	9c 89       	ldd	r25, Y+20	; 0x14
    113c:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1140:	69 8b       	std	Y+17, r22	; 0x11
    1142:	7a 8b       	std	Y+18, r23	; 0x12
    1144:	8b 8b       	std	Y+19, r24	; 0x13
    1146:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x05:
					valBuffer[valLoc] = '5';
    1148:	e1 e0       	ldi	r30, 0x01	; 1
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ec 0f       	add	r30, r28
    114e:	fd 1f       	adc	r31, r29
    1150:	ea 0d       	add	r30, r10
    1152:	f1 1d       	adc	r31, r1
    1154:	95 e3       	ldi	r25, 0x35	; 53
    1156:	e3 c0       	rjmp	.+454    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x06:
					valBuffer[valLoc] = '6';
					if (beforeDecimal) {
    1158:	cc 20       	and	r12, r12
    115a:	99 f0       	breq	.+38     	; 0x1182 <__stack+0x83>
						valInt = valInt * 10 + 6;
    115c:	c4 01       	movw	r24, r8
    115e:	b3 01       	movw	r22, r6
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    116c:	3b 01       	movw	r6, r22
    116e:	4c 01       	movw	r8, r24
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	68 0e       	add	r6, r24
    117a:	79 1e       	adc	r7, r25
    117c:	8a 1e       	adc	r8, r26
    117e:	9b 1e       	adc	r9, r27
    1180:	1c c0       	rjmp	.+56     	; 0x11ba <__stack+0xbb>
					}
					else{
						valDec = valDec * 10 + 6;
    1182:	c2 01       	movw	r24, r4
    1184:	b1 01       	movw	r22, r2
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1192:	1b 01       	movw	r2, r22
    1194:	2c 01       	movw	r4, r24
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	28 0e       	add	r2, r24
    11a0:	39 1e       	adc	r3, r25
    11a2:	4a 1e       	adc	r4, r26
    11a4:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    11a6:	69 89       	ldd	r22, Y+17	; 0x11
    11a8:	7a 89       	ldd	r23, Y+18	; 0x12
    11aa:	8b 89       	ldd	r24, Y+19	; 0x13
    11ac:	9c 89       	ldd	r25, Y+20	; 0x14
    11ae:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    11b2:	69 8b       	std	Y+17, r22	; 0x11
    11b4:	7a 8b       	std	Y+18, r23	; 0x12
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
    11b8:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x06:
					valBuffer[valLoc] = '6';
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	ec 0f       	add	r30, r28
    11c0:	fd 1f       	adc	r31, r29
    11c2:	ea 0d       	add	r30, r10
    11c4:	f1 1d       	adc	r31, r1
    11c6:	96 e3       	ldi	r25, 0x36	; 54
    11c8:	aa c0       	rjmp	.+340    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x07:
					valBuffer[valLoc] = '7';
					if (beforeDecimal) {
    11ca:	cc 20       	and	r12, r12
    11cc:	99 f0       	breq	.+38     	; 0x11f4 <__stack+0xf5>
						valInt = valInt * 10 + 7;
    11ce:	c4 01       	movw	r24, r8
    11d0:	b3 01       	movw	r22, r6
    11d2:	2a e0       	ldi	r18, 0x0A	; 10
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    11de:	3b 01       	movw	r6, r22
    11e0:	4c 01       	movw	r8, r24
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	68 0e       	add	r6, r24
    11ec:	79 1e       	adc	r7, r25
    11ee:	8a 1e       	adc	r8, r26
    11f0:	9b 1e       	adc	r9, r27
    11f2:	1c c0       	rjmp	.+56     	; 0x122c <__stack+0x12d>
					}
					else{
						valDec = valDec * 10 + 7;
    11f4:	c2 01       	movw	r24, r4
    11f6:	b1 01       	movw	r22, r2
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1204:	1b 01       	movw	r2, r22
    1206:	2c 01       	movw	r4, r24
    1208:	87 e0       	ldi	r24, 0x07	; 7
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	28 0e       	add	r2, r24
    1212:	39 1e       	adc	r3, r25
    1214:	4a 1e       	adc	r4, r26
    1216:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    1218:	69 89       	ldd	r22, Y+17	; 0x11
    121a:	7a 89       	ldd	r23, Y+18	; 0x12
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1224:	69 8b       	std	Y+17, r22	; 0x11
    1226:	7a 8b       	std	Y+18, r23	; 0x12
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x07:
					valBuffer[valLoc] = '7';
    122c:	e1 e0       	ldi	r30, 0x01	; 1
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ec 0f       	add	r30, r28
    1232:	fd 1f       	adc	r31, r29
    1234:	ea 0d       	add	r30, r10
    1236:	f1 1d       	adc	r31, r1
    1238:	97 e3       	ldi	r25, 0x37	; 55
    123a:	71 c0       	rjmp	.+226    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x08:
					valBuffer[valLoc] = '8';
					if (beforeDecimal) {
    123c:	cc 20       	and	r12, r12
    123e:	99 f0       	breq	.+38     	; 0x1266 <__stack+0x167>
						valInt = valInt * 10 + 8;
    1240:	c4 01       	movw	r24, r8
    1242:	b3 01       	movw	r22, r6
    1244:	2a e0       	ldi	r18, 0x0A	; 10
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1250:	3b 01       	movw	r6, r22
    1252:	4c 01       	movw	r8, r24
    1254:	88 e0       	ldi	r24, 0x08	; 8
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	68 0e       	add	r6, r24
    125e:	79 1e       	adc	r7, r25
    1260:	8a 1e       	adc	r8, r26
    1262:	9b 1e       	adc	r9, r27
    1264:	1c c0       	rjmp	.+56     	; 0x129e <__stack+0x19f>
					}
					else{
						valDec = valDec * 10 + 8;
    1266:	c2 01       	movw	r24, r4
    1268:	b1 01       	movw	r22, r2
    126a:	2a e0       	ldi	r18, 0x0A	; 10
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1276:	1b 01       	movw	r2, r22
    1278:	2c 01       	movw	r4, r24
    127a:	88 e0       	ldi	r24, 0x08	; 8
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	28 0e       	add	r2, r24
    1284:	39 1e       	adc	r3, r25
    1286:	4a 1e       	adc	r4, r26
    1288:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    128a:	69 89       	ldd	r22, Y+17	; 0x11
    128c:	7a 89       	ldd	r23, Y+18	; 0x12
    128e:	8b 89       	ldd	r24, Y+19	; 0x13
    1290:	9c 89       	ldd	r25, Y+20	; 0x14
    1292:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1296:	69 8b       	std	Y+17, r22	; 0x11
    1298:	7a 8b       	std	Y+18, r23	; 0x12
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x08:
					valBuffer[valLoc] = '8';
    129e:	e1 e0       	ldi	r30, 0x01	; 1
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	ec 0f       	add	r30, r28
    12a4:	fd 1f       	adc	r31, r29
    12a6:	ea 0d       	add	r30, r10
    12a8:	f1 1d       	adc	r31, r1
    12aa:	98 e3       	ldi	r25, 0x38	; 56
    12ac:	38 c0       	rjmp	.+112    	; 0x131e <__stack+0x21f>
					}
					valLoc++;
					break;
				case 0x09:
					valBuffer[valLoc] = '9';
					if (beforeDecimal) {
    12ae:	cc 20       	and	r12, r12
    12b0:	99 f0       	breq	.+38     	; 0x12d8 <__stack+0x1d9>
						valInt = valInt * 10 + 9;
    12b2:	c4 01       	movw	r24, r8
    12b4:	b3 01       	movw	r22, r6
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    12c2:	3b 01       	movw	r6, r22
    12c4:	4c 01       	movw	r8, r24
    12c6:	89 e0       	ldi	r24, 0x09	; 9
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	68 0e       	add	r6, r24
    12d0:	79 1e       	adc	r7, r25
    12d2:	8a 1e       	adc	r8, r26
    12d4:	9b 1e       	adc	r9, r27
    12d6:	1c c0       	rjmp	.+56     	; 0x1310 <__stack+0x211>
					}
					else{
						valDec = valDec * 10 + 9;
    12d8:	c2 01       	movw	r24, r4
    12da:	b1 01       	movw	r22, r2
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    12e8:	1b 01       	movw	r2, r22
    12ea:	2c 01       	movw	r4, r24
    12ec:	89 e0       	ldi	r24, 0x09	; 9
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	28 0e       	add	r2, r24
    12f6:	39 1e       	adc	r3, r25
    12f8:	4a 1e       	adc	r4, r26
    12fa:	5b 1e       	adc	r5, r27
						numAfterDecimal *= 10;
    12fc:	69 89       	ldd	r22, Y+17	; 0x11
    12fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1300:	8b 89       	ldd	r24, Y+19	; 0x13
    1302:	9c 89       	ldd	r25, Y+20	; 0x14
    1304:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1308:	69 8b       	std	Y+17, r22	; 0x11
    130a:	7a 8b       	std	Y+18, r23	; 0x12
    130c:	8b 8b       	std	Y+19, r24	; 0x13
    130e:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x09:
					valBuffer[valLoc] = '9';
    1310:	e1 e0       	ldi	r30, 0x01	; 1
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	ec 0f       	add	r30, r28
    1316:	fd 1f       	adc	r31, r29
    1318:	ea 0d       	add	r30, r10
    131a:	f1 1d       	adc	r31, r1
    131c:	99 e3       	ldi	r25, 0x39	; 57
    131e:	90 83       	st	Z, r25
    1320:	29 c0       	rjmp	.+82     	; 0x1374 <__stack+0x275>
					}
					valLoc++;
					break;
				case 0x10:
					valBuffer[valLoc] = '0';
					if (beforeDecimal) {
    1322:	cc 20       	and	r12, r12
    1324:	59 f0       	breq	.+22     	; 0x133c <__stack+0x23d>
						valInt = valInt * 10;
    1326:	c4 01       	movw	r24, r8
    1328:	b3 01       	movw	r22, r6
    132a:	2a e0       	ldi	r18, 0x0A	; 10
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    1336:	3b 01       	movw	r6, r22
    1338:	4c 01       	movw	r8, r24
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <__stack+0x265>
					}
					else{
						valDec = valDec * 10;
    133c:	c2 01       	movw	r24, r4
    133e:	b1 01       	movw	r22, r2
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    134c:	1b 01       	movw	r2, r22
    134e:	2c 01       	movw	r4, r24
						numAfterDecimal *= 10;
    1350:	69 89       	ldd	r22, Y+17	; 0x11
    1352:	7a 89       	ldd	r23, Y+18	; 0x12
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	0e 94 b9 12 	call	0x2572	; 0x2572 <__mulsi3>
    135c:	69 8b       	std	Y+17, r22	; 0x11
    135e:	7a 8b       	std	Y+18, r23	; 0x12
    1360:	8b 8b       	std	Y+19, r24	; 0x13
    1362:	9c 8b       	std	Y+20, r25	; 0x14
						numAfterDecimal *= 10;
					}
					valLoc++;
					break;
				case 0x10:
					valBuffer[valLoc] = '0';
    1364:	e1 e0       	ldi	r30, 0x01	; 1
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	ec 0f       	add	r30, r28
    136a:	fd 1f       	adc	r31, r29
    136c:	ea 0d       	add	r30, r10
    136e:	f1 1d       	adc	r31, r1
    1370:	a0 e3       	ldi	r26, 0x30	; 48
    1372:	a0 83       	st	Z, r26
					}
					else{
						valDec = valDec * 10;
						numAfterDecimal *= 10;
					}
					valLoc++;
    1374:	a3 94       	inc	r10
    1376:	8f cd       	rjmp	.-1250   	; 0xe96 <keypadComm+0x64>
					break;
				case 0x0E:		//E ==> decimal
					valBuffer[valLoc] = '.';
    1378:	e1 e0       	ldi	r30, 0x01	; 1
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ec 0f       	add	r30, r28
    137e:	fd 1f       	adc	r31, r29
    1380:	ea 0d       	add	r30, r10
    1382:	f1 1d       	adc	r31, r1
    1384:	be e2       	ldi	r27, 0x2E	; 46
    1386:	b0 83       	st	Z, r27
					valLoc++;
    1388:	a3 94       	inc	r10
    138a:	cc 24       	eor	r12, r12
					beforeDecimal = 0;
				case 0x0F:		//F ==> backspace
					valLoc--;
    138c:	aa 94       	dec	r10
					if (beforeDecimal){
    138e:	cc 20       	and	r12, r12
    1390:	69 f0       	breq	.+26     	; 0x13ac <__stack+0x2ad>
						valInt = valInt / 10;
    1392:	c4 01       	movw	r24, r8
    1394:	b3 01       	movw	r22, r6
    1396:	2a e0       	ldi	r18, 0x0A	; 10
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodsi4>
    13a2:	c9 01       	movw	r24, r18
    13a4:	da 01       	movw	r26, r20
    13a6:	3c 01       	movw	r6, r24
    13a8:	4d 01       	movw	r8, r26
    13aa:	3c c0       	rjmp	.+120    	; 0x1424 <__stack+0x325>
					}
					else {
						if (valBuffer[valLoc] == '.'){
    13ac:	e1 e0       	ldi	r30, 0x01	; 1
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	ec 0f       	add	r30, r28
    13b2:	fd 1f       	adc	r31, r29
    13b4:	ea 0d       	add	r30, r10
    13b6:	f1 1d       	adc	r31, r1
    13b8:	80 81       	ld	r24, Z
    13ba:	8e 32       	cpi	r24, 0x2E	; 46
    13bc:	b9 f4       	brne	.+46     	; 0x13ec <__stack+0x2ed>
							valInt = valInt / 10;
    13be:	c4 01       	movw	r24, r8
    13c0:	b3 01       	movw	r22, r6
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodsi4>
    13ce:	c9 01       	movw	r24, r18
    13d0:	da 01       	movw	r26, r20
    13d2:	3c 01       	movw	r6, r24
    13d4:	4d 01       	movw	r8, r26
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	89 8b       	std	Y+17, r24	; 0x11
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	ab 8b       	std	Y+19, r26	; 0x13
    13e4:	bc 8b       	std	Y+20, r27	; 0x14
    13e6:	cc 24       	eor	r12, r12
    13e8:	c3 94       	inc	r12
    13ea:	1c c0       	rjmp	.+56     	; 0x1424 <__stack+0x325>
							beforeDecimal = 1;
							numAfterDecimal = 1;
						}
						else {
							valDec = valDec / 10;
    13ec:	c2 01       	movw	r24, r4
    13ee:	b1 01       	movw	r22, r2
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodsi4>
    13fc:	c9 01       	movw	r24, r18
    13fe:	da 01       	movw	r26, r20
    1400:	1c 01       	movw	r2, r24
    1402:	2d 01       	movw	r4, r26
							numAfterDecimal /= 10;
    1404:	69 89       	ldd	r22, Y+17	; 0x11
    1406:	7a 89       	ldd	r23, Y+18	; 0x12
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodsi4>
    1418:	c9 01       	movw	r24, r18
    141a:	da 01       	movw	r26, r20
    141c:	89 8b       	std	Y+17, r24	; 0x11
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	ab 8b       	std	Y+19, r26	; 0x13
    1422:	bc 8b       	std	Y+20, r27	; 0x14
						}
					}
				case 0x0D:		//D ==> enter
					waitingForInput = 0;
    1424:	10 92 46 02 	sts	0x0246, r1
					val = valInt + (float)valDec / (float)numAfterDecimal;
    1428:	c4 01       	movw	r24, r8
    142a:	b3 01       	movw	r22, r6
    142c:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
    1430:	6d 8b       	std	Y+21, r22	; 0x15
    1432:	7e 8b       	std	Y+22, r23	; 0x16
    1434:	8f 8b       	std	Y+23, r24	; 0x17
    1436:	98 8f       	std	Y+24, r25	; 0x18
    1438:	c2 01       	movw	r24, r4
    143a:	b1 01       	movw	r22, r2
    143c:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
    1440:	7b 01       	movw	r14, r22
    1442:	8c 01       	movw	r16, r24
    1444:	69 89       	ldd	r22, Y+17	; 0x11
    1446:	7a 89       	ldd	r23, Y+18	; 0x12
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	0e 94 4b 10 	call	0x2096	; 0x2096 <__floatunsisf>
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24
    1454:	c8 01       	movw	r24, r16
    1456:	b7 01       	movw	r22, r14
    1458:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__divsf3>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__addsf3>
    146c:	7b 01       	movw	r14, r22
    146e:	8c 01       	movw	r16, r24
					
					switch (mode){
    1470:	80 91 5e 02 	lds	r24, 0x025E
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	a9 f0       	breq	.+42     	; 0x14a2 <__stack+0x3a3>
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	20 f0       	brcs	.+8      	; 0x1484 <__stack+0x385>
    147c:	82 30       	cpi	r24, 0x02	; 2
    147e:	09 f0       	breq	.+2      	; 0x1482 <__stack+0x383>
    1480:	0a cd       	rjmp	.-1516   	; 0xe96 <keypadComm+0x64>
    1482:	1e c0       	rjmp	.+60     	; 0x14c0 <__stack+0x3c1>
						case INPUT_T_REF:
							trtWait(SEM_T_WATER_REF);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
							waterTempRef = val;
    148a:	c7 01       	movw	r24, r14
    148c:	d8 01       	movw	r26, r16
    148e:	80 93 2d 01 	sts	0x012D, r24
    1492:	90 93 2e 01 	sts	0x012E, r25
    1496:	a0 93 2f 01 	sts	0x012F, r26
    149a:	b0 93 30 01 	sts	0x0130, r27
							trtSignal(SEM_T_WATER_REF);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <__stack+0x3dd>
							break;

						case INPUT_THICKNESS:
							trtWait(SEM_THICKNESS);
    14a2:	85 e0       	ldi	r24, 0x05	; 5
    14a4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
							thickness = val;
    14a8:	c7 01       	movw	r24, r14
    14aa:	d8 01       	movw	r26, r16
    14ac:	80 93 29 01 	sts	0x0129, r24
    14b0:	90 93 2a 01 	sts	0x012A, r25
    14b4:	a0 93 2b 01 	sts	0x012B, r26
    14b8:	b0 93 2c 01 	sts	0x012C, r27
							trtSignal(SEM_THICKNESS);
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <__stack+0x3dd>
							break;

						case INPUT_MAT_PROP:
							trtWait(SEM_MAT_PROP);
    14c0:	86 e0       	ldi	r24, 0x06	; 6
    14c2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
							k = val;
    14c6:	c7 01       	movw	r24, r14
    14c8:	d8 01       	movw	r26, r16
    14ca:	80 93 25 01 	sts	0x0125, r24
    14ce:	90 93 26 01 	sts	0x0126, r25
    14d2:	a0 93 27 01 	sts	0x0127, r26
    14d6:	b0 93 28 01 	sts	0x0128, r27
							trtSignal(SEM_MAT_PROP);
    14da:	86 e0       	ldi	r24, 0x06	; 6
    14dc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>
    14e0:	da cc       	rjmp	.-1612   	; 0xe96 <keypadComm+0x64>

000014e2 <main>:
		trtSleepUntil(rel, dead);
	}*/
}

// --- Main Program ----------------------------------
int main(void) {
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <main+0x16>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <main+0x18>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
  int args[2]; 
  DDRD = 0b11111011;
    14fe:	8b ef       	ldi	r24, 0xFB	; 251
    1500:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0;
    1502:	1b b8       	out	0x0b, r1	; 11

  //Initialize the MCU  
  initialize();
    1504:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <initialize>

  // start TRT
  trtInitKernel(128); // 80 bytes for the idle task stack
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 2c 03 	call	0x658	; 0x658 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1510:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 b3 02 	sts	0x02B3, r24
  
  sei(); // set enabled interrupts;
    1518:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    151a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    151c:	80 93 b2 02 	sts	0x02B2, r24
  
  sei(); // set enabled interrupts;
    1520:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1522:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1524:	80 93 b0 02 	sts	0x02B0, r24
  
  sei(); // set enabled interrupts;
    1528:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    152a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    152c:	80 93 b1 02 	sts	0x02B1, r24
  
  sei(); // set enabled interrupts;
    1530:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1532:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1534:	80 93 b5 02 	sts	0x02B5, r24
  
  sei(); // set enabled interrupts;
    1538:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    153a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    153c:	80 93 b4 02 	sts	0x02B4, r24
  
  sei(); // set enabled interrupts;
    1540:	78 94       	sei
  trtCreateSemaphore(SEM_T_WATER_REF, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_T_WATER, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_MAT_PROP, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_THICKNESS, 1);
 // --- creat tasks  ----------------
  trtCreateTask(pidControl, 256, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
    1542:	8f ed       	ldi	r24, 0xDF	; 223
    1544:	95 e0       	ldi	r25, 0x05	; 5
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	2d e0       	ldi	r18, 0x0D	; 13
    154c:	33 e0       	ldi	r19, 0x03	; 3
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ad e0       	ldi	r26, 0x0D	; 13
    1554:	ea 2e       	mov	r14, r26
    1556:	a3 e0       	ldi	r26, 0x03	; 3
    1558:	fa 2e       	mov	r15, r26
    155a:	01 2d       	mov	r16, r1
    155c:	11 2d       	mov	r17, r1
    155e:	6e 01       	movw	r12, r28
    1560:	08 94       	sec
    1562:	c1 1c       	adc	r12, r1
    1564:	d1 1c       	adc	r13, r1
    1566:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
  trtCreateTask(keypadComm, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
    156a:	f3 e0       	ldi	r31, 0x03	; 3
    156c:	af 2e       	mov	r10, r31
    156e:	b1 2c       	mov	r11, r1
    1570:	ac 0e       	add	r10, r28
    1572:	bd 1e       	adc	r11, r29
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	97 e0       	ldi	r25, 0x07	; 7
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	71 e0       	ldi	r23, 0x01	; 1
    157c:	2a e1       	ldi	r18, 0x1A	; 26
    157e:	36 e0       	ldi	r19, 0x06	; 6
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	ea e1       	ldi	r30, 0x1A	; 26
    1586:	ee 2e       	mov	r14, r30
    1588:	e6 e0       	ldi	r30, 0x06	; 6
    158a:	fe 2e       	mov	r15, r30
    158c:	01 2d       	mov	r16, r1
    158e:	11 2d       	mov	r17, r1
    1590:	65 01       	movw	r12, r10
    1592:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
  trtCreateTask(displayTemp, 256, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
    1596:	8e ed       	ldi	r24, 0xDE	; 222
    1598:	9a e0       	ldi	r25, 0x0A	; 10
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	2a e1       	ldi	r18, 0x1A	; 26
    15a0:	36 e0       	ldi	r19, 0x06	; 6
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <trtCreateTask>
  
  sei();
    15aa:	78 94       	sei
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
    15ac:	83 b7       	in	r24, 0x33	; 51
    15ae:	81 7f       	andi	r24, 0xF1	; 241
    15b0:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    15b2:	83 b7       	in	r24, 0x33	; 51
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	83 bf       	out	0x33, r24	; 51
  while (1) 
  {
  	sleep_cpu();
    15b8:	88 95       	sleep
    15ba:	fe cf       	rjmp	.-4      	; 0x15b8 <main+0xd6>

000015bc <displayTemp>:
	}
}

//Display the Temperature on the LCD
void displayTemp(void* args) 
{
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2a 97       	sbiw	r28, 0x0a	; 10
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
	float localTemp;
	float localTempRef;

	//String buffers
	uint8_t LCDTempRef[4];
	const uint8_t LCDTemp[5] = "TEMP\0";
    15dc:	de 01       	movw	r26, r28
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	e3 e0       	ldi	r30, 0x03	; 3
    15e2:	f1 e0       	ldi	r31, 0x01	; 1
    15e4:	85 e0       	ldi	r24, 0x05	; 5
    15e6:	01 90       	ld	r0, Z+
    15e8:	0d 92       	st	X+, r0
    15ea:	81 50       	subi	r24, 0x01	; 1
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <displayTemp+0x2a>
	uint8_t updatek_p;
	uint8_t updatek_i;
	uint8_t updatek_d;

	//make local copies of the system parametes
	trtWait(SEM_T_REF);
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		localTempRef = waterTempRef;
	trtSignal(SEM_T_REF);
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

	trtWait(SEM_T);
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
		localTemp = waterTemp;
    1600:	c0 90 35 01 	lds	r12, 0x0135
    1604:	d0 90 36 01 	lds	r13, 0x0136
    1608:	e0 90 37 01 	lds	r14, 0x0137
    160c:	f0 90 38 01 	lds	r15, 0x0138
	trtSignal(SEM_T);
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

	trtWait(SEM_THICKNESS);
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	float localThickness = thickness;
	trtSignal(SEM_THICKNESS);
    161c:	85 e0       	ldi	r24, 0x05	; 5
    161e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

	trtWait(SEM_MAT_PROP);
    1622:	86 e0       	ldi	r24, 0x06	; 6
    1624:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <trtWait>
	float localK = k;
	trtSignal(SEM_MAT_PROP);
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <trtSignal>

	LCDGotoXY(0, 0);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
	LCDstring(LCDTemp, 4);
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	64 e0       	ldi	r22, 0x04	; 4
    163c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCDstring>

	uint8_t LCDTempMeas[5];
	sprintf(LCDTempMeas, "%f", localTemp);
    1640:	8d b7       	in	r24, 0x3d	; 61
    1642:	9e b7       	in	r25, 0x3e	; 62
    1644:	08 97       	sbiw	r24, 0x08	; 8
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	9e bf       	out	0x3e, r25	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	8d bf       	out	0x3d, r24	; 61
    1650:	ed b7       	in	r30, 0x3d	; 61
    1652:	fe b7       	in	r31, 0x3e	; 62
    1654:	31 96       	adiw	r30, 0x01	; 1
    1656:	8e 01       	movw	r16, r28
    1658:	0a 5f       	subi	r16, 0xFA	; 250
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	ad b7       	in	r26, 0x3d	; 61
    165e:	be b7       	in	r27, 0x3e	; 62
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	1c 93       	st	X, r17
    1664:	0e 93       	st	-X, r16
    1666:	11 97       	sbiw	r26, 0x01	; 1
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	93 83       	std	Z+3, r25	; 0x03
    166e:	82 83       	std	Z+2, r24	; 0x02
    1670:	c4 82       	std	Z+4, r12	; 0x04
    1672:	d5 82       	std	Z+5, r13	; 0x05
    1674:	e6 82       	std	Z+6, r14	; 0x06
    1676:	f7 82       	std	Z+7, r15	; 0x07
    1678:	0e 94 58 13 	call	0x26b0	; 0x26b0 <sprintf>
	LCDGotoXY(6, 0);
    167c:	8d b7       	in	r24, 0x3d	; 61
    167e:	9e b7       	in	r25, 0x3e	; 62
    1680:	08 96       	adiw	r24, 0x08	; 8
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	9e bf       	out	0x3e, r25	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	8d bf       	out	0x3d, r24	; 61
    168c:	86 e0       	ldi	r24, 0x06	; 6
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDGotoXY>
	LCDstring(LCDTempMeas, 5);
    1694:	c8 01       	movw	r24, r16
    1696:	65 e0       	ldi	r22, 0x05	; 5
    1698:	0e 94 bd 00 	call	0x17a	; 0x17a <LCDstring>
		//Set the task to run again in 0.2 seconds.
		rel = trtCurrentTime() + SECONDS2TICKS(0.2);
		dead = trtCurrentTime() + SECONDS2TICKS(0.225);
		trtSleepUntil(rel, dead);
	}*/
}
    169c:	2a 96       	adiw	r28, 0x0a	; 10
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	08 95       	ret

000016ba <__fixunssfsi>:
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	7b 01       	movw	r14, r22
    16c4:	8c 01       	movw	r16, r24
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	5f e4       	ldi	r21, 0x4F	; 79
    16ce:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__gesf2>
    16d2:	88 23       	and	r24, r24
    16d4:	8c f0       	brlt	.+34     	; 0x16f8 <__fixunssfsi+0x3e>
    16d6:	c8 01       	movw	r24, r16
    16d8:	b7 01       	movw	r22, r14
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	5f e4       	ldi	r21, 0x4F	; 79
    16e2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__subsf3>
    16e6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	20 50       	subi	r18, 0x00	; 0
    16f0:	30 40       	sbci	r19, 0x00	; 0
    16f2:	40 40       	sbci	r20, 0x00	; 0
    16f4:	50 48       	sbci	r21, 0x80	; 128
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <__fixunssfsi+0x4a>
    16f8:	c8 01       	movw	r24, r16
    16fa:	b7 01       	movw	r22, r14
    16fc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
    1700:	9b 01       	movw	r18, r22
    1702:	ac 01       	movw	r20, r24
    1704:	b9 01       	movw	r22, r18
    1706:	ca 01       	movw	r24, r20
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <_fpadd_parts>:
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ef e8       	ldi	r30, 0x8F	; 143
    1718:	fb e0       	ldi	r31, 0x0B	; 11
    171a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__>
    171e:	dc 01       	movw	r26, r24
    1720:	2b 01       	movw	r4, r22
    1722:	fa 01       	movw	r30, r20
    1724:	9c 91       	ld	r25, X
    1726:	92 30       	cpi	r25, 0x02	; 2
    1728:	08 f4       	brcc	.+2      	; 0x172c <_fpadd_parts+0x1a>
    172a:	39 c1       	rjmp	.+626    	; 0x199e <_fpadd_parts+0x28c>
    172c:	eb 01       	movw	r28, r22
    172e:	88 81       	ld	r24, Y
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	08 f4       	brcc	.+2      	; 0x1736 <_fpadd_parts+0x24>
    1734:	33 c1       	rjmp	.+614    	; 0x199c <_fpadd_parts+0x28a>
    1736:	94 30       	cpi	r25, 0x04	; 4
    1738:	69 f4       	brne	.+26     	; 0x1754 <_fpadd_parts+0x42>
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	09 f0       	breq	.+2      	; 0x1740 <_fpadd_parts+0x2e>
    173e:	2f c1       	rjmp	.+606    	; 0x199e <_fpadd_parts+0x28c>
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	9c 91       	ld	r25, X
    1744:	11 97       	sbiw	r26, 0x01	; 1
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	98 17       	cp	r25, r24
    174a:	09 f4       	brne	.+2      	; 0x174e <_fpadd_parts+0x3c>
    174c:	28 c1       	rjmp	.+592    	; 0x199e <_fpadd_parts+0x28c>
    174e:	ad e3       	ldi	r26, 0x3D	; 61
    1750:	b1 e0       	ldi	r27, 0x01	; 1
    1752:	25 c1       	rjmp	.+586    	; 0x199e <_fpadd_parts+0x28c>
    1754:	84 30       	cpi	r24, 0x04	; 4
    1756:	09 f4       	brne	.+2      	; 0x175a <_fpadd_parts+0x48>
    1758:	21 c1       	rjmp	.+578    	; 0x199c <_fpadd_parts+0x28a>
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	a9 f4       	brne	.+42     	; 0x1788 <_fpadd_parts+0x76>
    175e:	92 30       	cpi	r25, 0x02	; 2
    1760:	09 f0       	breq	.+2      	; 0x1764 <_fpadd_parts+0x52>
    1762:	1d c1       	rjmp	.+570    	; 0x199e <_fpadd_parts+0x28c>
    1764:	9a 01       	movw	r18, r20
    1766:	ad 01       	movw	r20, r26
    1768:	88 e0       	ldi	r24, 0x08	; 8
    176a:	ea 01       	movw	r28, r20
    176c:	09 90       	ld	r0, Y+
    176e:	ae 01       	movw	r20, r28
    1770:	e9 01       	movw	r28, r18
    1772:	09 92       	st	Y+, r0
    1774:	9e 01       	movw	r18, r28
    1776:	81 50       	subi	r24, 0x01	; 1
    1778:	c1 f7       	brne	.-16     	; 0x176a <_fpadd_parts+0x58>
    177a:	e2 01       	movw	r28, r4
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	9c 91       	ld	r25, X
    1782:	89 23       	and	r24, r25
    1784:	81 83       	std	Z+1, r24	; 0x01
    1786:	08 c1       	rjmp	.+528    	; 0x1998 <_fpadd_parts+0x286>
    1788:	92 30       	cpi	r25, 0x02	; 2
    178a:	09 f4       	brne	.+2      	; 0x178e <_fpadd_parts+0x7c>
    178c:	07 c1       	rjmp	.+526    	; 0x199c <_fpadd_parts+0x28a>
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	2d 90       	ld	r2, X+
    1792:	3c 90       	ld	r3, X
    1794:	13 97       	sbiw	r26, 0x03	; 3
    1796:	eb 01       	movw	r28, r22
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	9b 81       	ldd	r25, Y+3	; 0x03
    179c:	14 96       	adiw	r26, 0x04	; 4
    179e:	ad 90       	ld	r10, X+
    17a0:	bd 90       	ld	r11, X+
    17a2:	cd 90       	ld	r12, X+
    17a4:	dc 90       	ld	r13, X
    17a6:	17 97       	sbiw	r26, 0x07	; 7
    17a8:	ec 80       	ldd	r14, Y+4	; 0x04
    17aa:	fd 80       	ldd	r15, Y+5	; 0x05
    17ac:	0e 81       	ldd	r16, Y+6	; 0x06
    17ae:	1f 81       	ldd	r17, Y+7	; 0x07
    17b0:	91 01       	movw	r18, r2
    17b2:	28 1b       	sub	r18, r24
    17b4:	39 0b       	sbc	r19, r25
    17b6:	b9 01       	movw	r22, r18
    17b8:	37 ff       	sbrs	r19, 7
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <_fpadd_parts+0xb2>
    17bc:	66 27       	eor	r22, r22
    17be:	77 27       	eor	r23, r23
    17c0:	62 1b       	sub	r22, r18
    17c2:	73 0b       	sbc	r23, r19
    17c4:	60 32       	cpi	r22, 0x20	; 32
    17c6:	71 05       	cpc	r23, r1
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <_fpadd_parts+0xba>
    17ca:	61 c0       	rjmp	.+194    	; 0x188e <_fpadd_parts+0x17c>
    17cc:	12 16       	cp	r1, r18
    17ce:	13 06       	cpc	r1, r19
    17d0:	6c f5       	brge	.+90     	; 0x182c <_fpadd_parts+0x11a>
    17d2:	37 01       	movw	r6, r14
    17d4:	48 01       	movw	r8, r16
    17d6:	06 2e       	mov	r0, r22
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <_fpadd_parts+0xd0>
    17da:	96 94       	lsr	r9
    17dc:	87 94       	ror	r8
    17de:	77 94       	ror	r7
    17e0:	67 94       	ror	r6
    17e2:	0a 94       	dec	r0
    17e4:	d2 f7       	brpl	.-12     	; 0x17da <_fpadd_parts+0xc8>
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <_fpadd_parts+0xe6>
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	44 1f       	adc	r20, r20
    17f6:	55 1f       	adc	r21, r21
    17f8:	6a 95       	dec	r22
    17fa:	d2 f7       	brpl	.-12     	; 0x17f0 <_fpadd_parts+0xde>
    17fc:	21 50       	subi	r18, 0x01	; 1
    17fe:	30 40       	sbci	r19, 0x00	; 0
    1800:	40 40       	sbci	r20, 0x00	; 0
    1802:	50 40       	sbci	r21, 0x00	; 0
    1804:	2e 21       	and	r18, r14
    1806:	3f 21       	and	r19, r15
    1808:	40 23       	and	r20, r16
    180a:	51 23       	and	r21, r17
    180c:	21 15       	cp	r18, r1
    180e:	31 05       	cpc	r19, r1
    1810:	41 05       	cpc	r20, r1
    1812:	51 05       	cpc	r21, r1
    1814:	21 f0       	breq	.+8      	; 0x181e <_fpadd_parts+0x10c>
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	79 01       	movw	r14, r18
    1820:	8a 01       	movw	r16, r20
    1822:	e6 28       	or	r14, r6
    1824:	f7 28       	or	r15, r7
    1826:	08 29       	or	r16, r8
    1828:	19 29       	or	r17, r9
    182a:	3c c0       	rjmp	.+120    	; 0x18a4 <_fpadd_parts+0x192>
    182c:	23 2b       	or	r18, r19
    182e:	d1 f1       	breq	.+116    	; 0x18a4 <_fpadd_parts+0x192>
    1830:	26 0e       	add	r2, r22
    1832:	37 1e       	adc	r3, r23
    1834:	35 01       	movw	r6, r10
    1836:	46 01       	movw	r8, r12
    1838:	06 2e       	mov	r0, r22
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <_fpadd_parts+0x132>
    183c:	96 94       	lsr	r9
    183e:	87 94       	ror	r8
    1840:	77 94       	ror	r7
    1842:	67 94       	ror	r6
    1844:	0a 94       	dec	r0
    1846:	d2 f7       	brpl	.-12     	; 0x183c <_fpadd_parts+0x12a>
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	04 c0       	rjmp	.+8      	; 0x185a <_fpadd_parts+0x148>
    1852:	22 0f       	add	r18, r18
    1854:	33 1f       	adc	r19, r19
    1856:	44 1f       	adc	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	6a 95       	dec	r22
    185c:	d2 f7       	brpl	.-12     	; 0x1852 <_fpadd_parts+0x140>
    185e:	21 50       	subi	r18, 0x01	; 1
    1860:	30 40       	sbci	r19, 0x00	; 0
    1862:	40 40       	sbci	r20, 0x00	; 0
    1864:	50 40       	sbci	r21, 0x00	; 0
    1866:	2a 21       	and	r18, r10
    1868:	3b 21       	and	r19, r11
    186a:	4c 21       	and	r20, r12
    186c:	5d 21       	and	r21, r13
    186e:	21 15       	cp	r18, r1
    1870:	31 05       	cpc	r19, r1
    1872:	41 05       	cpc	r20, r1
    1874:	51 05       	cpc	r21, r1
    1876:	21 f0       	breq	.+8      	; 0x1880 <_fpadd_parts+0x16e>
    1878:	21 e0       	ldi	r18, 0x01	; 1
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	59 01       	movw	r10, r18
    1882:	6a 01       	movw	r12, r20
    1884:	a6 28       	or	r10, r6
    1886:	b7 28       	or	r11, r7
    1888:	c8 28       	or	r12, r8
    188a:	d9 28       	or	r13, r9
    188c:	0b c0       	rjmp	.+22     	; 0x18a4 <_fpadd_parts+0x192>
    188e:	82 15       	cp	r24, r2
    1890:	93 05       	cpc	r25, r3
    1892:	2c f0       	brlt	.+10     	; 0x189e <_fpadd_parts+0x18c>
    1894:	1c 01       	movw	r2, r24
    1896:	aa 24       	eor	r10, r10
    1898:	bb 24       	eor	r11, r11
    189a:	65 01       	movw	r12, r10
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <_fpadd_parts+0x192>
    189e:	ee 24       	eor	r14, r14
    18a0:	ff 24       	eor	r15, r15
    18a2:	87 01       	movw	r16, r14
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	9c 91       	ld	r25, X
    18a8:	d2 01       	movw	r26, r4
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	8c 91       	ld	r24, X
    18ae:	98 17       	cp	r25, r24
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <_fpadd_parts+0x1a2>
    18b2:	45 c0       	rjmp	.+138    	; 0x193e <_fpadd_parts+0x22c>
    18b4:	99 23       	and	r25, r25
    18b6:	39 f0       	breq	.+14     	; 0x18c6 <_fpadd_parts+0x1b4>
    18b8:	a8 01       	movw	r20, r16
    18ba:	97 01       	movw	r18, r14
    18bc:	2a 19       	sub	r18, r10
    18be:	3b 09       	sbc	r19, r11
    18c0:	4c 09       	sbc	r20, r12
    18c2:	5d 09       	sbc	r21, r13
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <_fpadd_parts+0x1c0>
    18c6:	a6 01       	movw	r20, r12
    18c8:	95 01       	movw	r18, r10
    18ca:	2e 19       	sub	r18, r14
    18cc:	3f 09       	sbc	r19, r15
    18ce:	40 0b       	sbc	r20, r16
    18d0:	51 0b       	sbc	r21, r17
    18d2:	57 fd       	sbrc	r21, 7
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <_fpadd_parts+0x1d4>
    18d6:	11 82       	std	Z+1, r1	; 0x01
    18d8:	33 82       	std	Z+3, r3	; 0x03
    18da:	22 82       	std	Z+2, r2	; 0x02
    18dc:	24 83       	std	Z+4, r18	; 0x04
    18de:	35 83       	std	Z+5, r19	; 0x05
    18e0:	46 83       	std	Z+6, r20	; 0x06
    18e2:	57 83       	std	Z+7, r21	; 0x07
    18e4:	1d c0       	rjmp	.+58     	; 0x1920 <_fpadd_parts+0x20e>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	81 83       	std	Z+1, r24	; 0x01
    18ea:	33 82       	std	Z+3, r3	; 0x03
    18ec:	22 82       	std	Z+2, r2	; 0x02
    18ee:	88 27       	eor	r24, r24
    18f0:	99 27       	eor	r25, r25
    18f2:	dc 01       	movw	r26, r24
    18f4:	82 1b       	sub	r24, r18
    18f6:	93 0b       	sbc	r25, r19
    18f8:	a4 0b       	sbc	r26, r20
    18fa:	b5 0b       	sbc	r27, r21
    18fc:	84 83       	std	Z+4, r24	; 0x04
    18fe:	95 83       	std	Z+5, r25	; 0x05
    1900:	a6 83       	std	Z+6, r26	; 0x06
    1902:	b7 83       	std	Z+7, r27	; 0x07
    1904:	0d c0       	rjmp	.+26     	; 0x1920 <_fpadd_parts+0x20e>
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	44 1f       	adc	r20, r20
    190c:	55 1f       	adc	r21, r21
    190e:	24 83       	std	Z+4, r18	; 0x04
    1910:	35 83       	std	Z+5, r19	; 0x05
    1912:	46 83       	std	Z+6, r20	; 0x06
    1914:	57 83       	std	Z+7, r21	; 0x07
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	93 83       	std	Z+3, r25	; 0x03
    191e:	82 83       	std	Z+2, r24	; 0x02
    1920:	24 81       	ldd	r18, Z+4	; 0x04
    1922:	35 81       	ldd	r19, Z+5	; 0x05
    1924:	46 81       	ldd	r20, Z+6	; 0x06
    1926:	57 81       	ldd	r21, Z+7	; 0x07
    1928:	da 01       	movw	r26, r20
    192a:	c9 01       	movw	r24, r18
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	a1 09       	sbc	r26, r1
    1930:	b1 09       	sbc	r27, r1
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	af 4f       	sbci	r26, 0xFF	; 255
    1938:	bf 43       	sbci	r27, 0x3F	; 63
    193a:	28 f3       	brcs	.-54     	; 0x1906 <_fpadd_parts+0x1f4>
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <_fpadd_parts+0x242>
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	33 82       	std	Z+3, r3	; 0x03
    1942:	22 82       	std	Z+2, r2	; 0x02
    1944:	ea 0c       	add	r14, r10
    1946:	fb 1c       	adc	r15, r11
    1948:	0c 1d       	adc	r16, r12
    194a:	1d 1d       	adc	r17, r13
    194c:	e4 82       	std	Z+4, r14	; 0x04
    194e:	f5 82       	std	Z+5, r15	; 0x05
    1950:	06 83       	std	Z+6, r16	; 0x06
    1952:	17 83       	std	Z+7, r17	; 0x07
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	80 83       	st	Z, r24
    1958:	24 81       	ldd	r18, Z+4	; 0x04
    195a:	35 81       	ldd	r19, Z+5	; 0x05
    195c:	46 81       	ldd	r20, Z+6	; 0x06
    195e:	57 81       	ldd	r21, Z+7	; 0x07
    1960:	57 ff       	sbrs	r21, 7
    1962:	1a c0       	rjmp	.+52     	; 0x1998 <_fpadd_parts+0x286>
    1964:	c9 01       	movw	r24, r18
    1966:	aa 27       	eor	r26, r26
    1968:	97 fd       	sbrc	r25, 7
    196a:	a0 95       	com	r26
    196c:	ba 2f       	mov	r27, r26
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	a0 70       	andi	r26, 0x00	; 0
    1974:	b0 70       	andi	r27, 0x00	; 0
    1976:	56 95       	lsr	r21
    1978:	47 95       	ror	r20
    197a:	37 95       	ror	r19
    197c:	27 95       	ror	r18
    197e:	82 2b       	or	r24, r18
    1980:	93 2b       	or	r25, r19
    1982:	a4 2b       	or	r26, r20
    1984:	b5 2b       	or	r27, r21
    1986:	84 83       	std	Z+4, r24	; 0x04
    1988:	95 83       	std	Z+5, r25	; 0x05
    198a:	a6 83       	std	Z+6, r26	; 0x06
    198c:	b7 83       	std	Z+7, r27	; 0x07
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	93 83       	std	Z+3, r25	; 0x03
    1996:	82 83       	std	Z+2, r24	; 0x02
    1998:	df 01       	movw	r26, r30
    199a:	01 c0       	rjmp	.+2      	; 0x199e <_fpadd_parts+0x28c>
    199c:	d2 01       	movw	r26, r4
    199e:	cd 01       	movw	r24, r26
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	e2 e1       	ldi	r30, 0x12	; 18
    19a6:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__>

000019aa <__subsf3>:
    19aa:	a0 e2       	ldi	r26, 0x20	; 32
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb ed       	ldi	r30, 0xDB	; 219
    19b0:	fc e0       	ldi	r31, 0x0C	; 12
    19b2:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    19b6:	69 83       	std	Y+1, r22	; 0x01
    19b8:	7a 83       	std	Y+2, r23	; 0x02
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	2d 83       	std	Y+5, r18	; 0x05
    19c0:	3e 83       	std	Y+6, r19	; 0x06
    19c2:	4f 83       	std	Y+7, r20	; 0x07
    19c4:	58 87       	std	Y+8, r21	; 0x08
    19c6:	e9 e0       	ldi	r30, 0x09	; 9
    19c8:	ee 2e       	mov	r14, r30
    19ca:	f1 2c       	mov	r15, r1
    19cc:	ec 0e       	add	r14, r28
    19ce:	fd 1e       	adc	r15, r29
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	b7 01       	movw	r22, r14
    19d6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    19da:	8e 01       	movw	r16, r28
    19dc:	0f 5e       	subi	r16, 0xEF	; 239
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	ce 01       	movw	r24, r28
    19e2:	05 96       	adiw	r24, 0x05	; 5
    19e4:	b8 01       	movw	r22, r16
    19e6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    19ea:	8a 89       	ldd	r24, Y+18	; 0x12
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	89 27       	eor	r24, r25
    19f0:	8a 8b       	std	Y+18, r24	; 0x12
    19f2:	c7 01       	movw	r24, r14
    19f4:	b8 01       	movw	r22, r16
    19f6:	ae 01       	movw	r20, r28
    19f8:	47 5e       	subi	r20, 0xE7	; 231
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	0e 94 89 0b 	call	0x1712	; 0x1712 <_fpadd_parts>
    1a00:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    1a04:	a0 96       	adiw	r28, 0x20	; 32
    1a06:	e6 e0       	ldi	r30, 0x06	; 6
    1a08:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001a0c <__addsf3>:
    1a0c:	a0 e2       	ldi	r26, 0x20	; 32
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ec e0       	ldi	r30, 0x0C	; 12
    1a12:	fd e0       	ldi	r31, 0x0D	; 13
    1a14:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    1a18:	69 83       	std	Y+1, r22	; 0x01
    1a1a:	7a 83       	std	Y+2, r23	; 0x02
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	2d 83       	std	Y+5, r18	; 0x05
    1a22:	3e 83       	std	Y+6, r19	; 0x06
    1a24:	4f 83       	std	Y+7, r20	; 0x07
    1a26:	58 87       	std	Y+8, r21	; 0x08
    1a28:	f9 e0       	ldi	r31, 0x09	; 9
    1a2a:	ef 2e       	mov	r14, r31
    1a2c:	f1 2c       	mov	r15, r1
    1a2e:	ec 0e       	add	r14, r28
    1a30:	fd 1e       	adc	r15, r29
    1a32:	ce 01       	movw	r24, r28
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	b7 01       	movw	r22, r14
    1a38:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	0f 5e       	subi	r16, 0xEF	; 239
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	ce 01       	movw	r24, r28
    1a44:	05 96       	adiw	r24, 0x05	; 5
    1a46:	b8 01       	movw	r22, r16
    1a48:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	b8 01       	movw	r22, r16
    1a50:	ae 01       	movw	r20, r28
    1a52:	47 5e       	subi	r20, 0xE7	; 231
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	0e 94 89 0b 	call	0x1712	; 0x1712 <_fpadd_parts>
    1a5a:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    1a5e:	a0 96       	adiw	r28, 0x20	; 32
    1a60:	e6 e0       	ldi	r30, 0x06	; 6
    1a62:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001a66 <__mulsf3>:
    1a66:	a0 e2       	ldi	r26, 0x20	; 32
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e3       	ldi	r30, 0x39	; 57
    1a6c:	fd e0       	ldi	r31, 0x0D	; 13
    1a6e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__>
    1a72:	69 83       	std	Y+1, r22	; 0x01
    1a74:	7a 83       	std	Y+2, r23	; 0x02
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	2d 83       	std	Y+5, r18	; 0x05
    1a7c:	3e 83       	std	Y+6, r19	; 0x06
    1a7e:	4f 83       	std	Y+7, r20	; 0x07
    1a80:	58 87       	std	Y+8, r21	; 0x08
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	be 01       	movw	r22, r28
    1a88:	67 5f       	subi	r22, 0xF7	; 247
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	be 01       	movw	r22, r28
    1a96:	6f 5e       	subi	r22, 0xEF	; 239
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1a9e:	99 85       	ldd	r25, Y+9	; 0x09
    1aa0:	92 30       	cpi	r25, 0x02	; 2
    1aa2:	88 f0       	brcs	.+34     	; 0x1ac6 <__mulsf3+0x60>
    1aa4:	89 89       	ldd	r24, Y+17	; 0x11
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	c8 f0       	brcs	.+50     	; 0x1adc <__mulsf3+0x76>
    1aaa:	94 30       	cpi	r25, 0x04	; 4
    1aac:	19 f4       	brne	.+6      	; 0x1ab4 <__mulsf3+0x4e>
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	51 f4       	brne	.+20     	; 0x1ac6 <__mulsf3+0x60>
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <__mulsf3+0x56>
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	29 f4       	brne	.+10     	; 0x1ac2 <__mulsf3+0x5c>
    1ab8:	92 30       	cpi	r25, 0x02	; 2
    1aba:	81 f4       	brne	.+32     	; 0x1adc <__mulsf3+0x76>
    1abc:	8d e3       	ldi	r24, 0x3D	; 61
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	c6 c0       	rjmp	.+396    	; 0x1c4e <__mulsf3+0x1e8>
    1ac2:	92 30       	cpi	r25, 0x02	; 2
    1ac4:	49 f4       	brne	.+18     	; 0x1ad8 <__mulsf3+0x72>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	8a 89       	ldd	r24, Y+18	; 0x12
    1acc:	98 13       	cpse	r25, r24
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	2a 87       	std	Y+10, r18	; 0x0a
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	09 96       	adiw	r24, 0x09	; 9
    1ad6:	bb c0       	rjmp	.+374    	; 0x1c4e <__mulsf3+0x1e8>
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	49 f4       	brne	.+18     	; 0x1aee <__mulsf3+0x88>
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae2:	98 13       	cpse	r25, r24
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	2a 8b       	std	Y+18, r18	; 0x12
    1ae8:	ce 01       	movw	r24, r28
    1aea:	41 96       	adiw	r24, 0x11	; 17
    1aec:	b0 c0       	rjmp	.+352    	; 0x1c4e <__mulsf3+0x1e8>
    1aee:	2d 84       	ldd	r2, Y+13	; 0x0d
    1af0:	3e 84       	ldd	r3, Y+14	; 0x0e
    1af2:	4f 84       	ldd	r4, Y+15	; 0x0f
    1af4:	58 88       	ldd	r5, Y+16	; 0x10
    1af6:	6d 88       	ldd	r6, Y+21	; 0x15
    1af8:	7e 88       	ldd	r7, Y+22	; 0x16
    1afa:	8f 88       	ldd	r8, Y+23	; 0x17
    1afc:	98 8c       	ldd	r9, Y+24	; 0x18
    1afe:	ee 24       	eor	r14, r14
    1b00:	ff 24       	eor	r15, r15
    1b02:	87 01       	movw	r16, r14
    1b04:	aa 24       	eor	r10, r10
    1b06:	bb 24       	eor	r11, r11
    1b08:	65 01       	movw	r12, r10
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	e0 e0       	ldi	r30, 0x00	; 0
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	c1 01       	movw	r24, r2
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	89 2b       	or	r24, r25
    1b1e:	e9 f0       	breq	.+58     	; 0x1b5a <__mulsf3+0xf4>
    1b20:	e6 0c       	add	r14, r6
    1b22:	f7 1c       	adc	r15, r7
    1b24:	08 1d       	adc	r16, r8
    1b26:	19 1d       	adc	r17, r9
    1b28:	9a 01       	movw	r18, r20
    1b2a:	ab 01       	movw	r20, r22
    1b2c:	2a 0d       	add	r18, r10
    1b2e:	3b 1d       	adc	r19, r11
    1b30:	4c 1d       	adc	r20, r12
    1b32:	5d 1d       	adc	r21, r13
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e6 14       	cp	r14, r6
    1b3e:	f7 04       	cpc	r15, r7
    1b40:	08 05       	cpc	r16, r8
    1b42:	19 05       	cpc	r17, r9
    1b44:	20 f4       	brcc	.+8      	; 0x1b4e <__mulsf3+0xe8>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e0       	ldi	r26, 0x00	; 0
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ba 01       	movw	r22, r20
    1b50:	a9 01       	movw	r20, r18
    1b52:	48 0f       	add	r20, r24
    1b54:	59 1f       	adc	r21, r25
    1b56:	6a 1f       	adc	r22, r26
    1b58:	7b 1f       	adc	r23, r27
    1b5a:	aa 0c       	add	r10, r10
    1b5c:	bb 1c       	adc	r11, r11
    1b5e:	cc 1c       	adc	r12, r12
    1b60:	dd 1c       	adc	r13, r13
    1b62:	97 fe       	sbrs	r9, 7
    1b64:	08 c0       	rjmp	.+16     	; 0x1b76 <__mulsf3+0x110>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	a8 2a       	or	r10, r24
    1b70:	b9 2a       	or	r11, r25
    1b72:	ca 2a       	or	r12, r26
    1b74:	db 2a       	or	r13, r27
    1b76:	31 96       	adiw	r30, 0x01	; 1
    1b78:	e0 32       	cpi	r30, 0x20	; 32
    1b7a:	f1 05       	cpc	r31, r1
    1b7c:	49 f0       	breq	.+18     	; 0x1b90 <__mulsf3+0x12a>
    1b7e:	66 0c       	add	r6, r6
    1b80:	77 1c       	adc	r7, r7
    1b82:	88 1c       	adc	r8, r8
    1b84:	99 1c       	adc	r9, r9
    1b86:	56 94       	lsr	r5
    1b88:	47 94       	ror	r4
    1b8a:	37 94       	ror	r3
    1b8c:	27 94       	ror	r2
    1b8e:	c3 cf       	rjmp	.-122    	; 0x1b16 <__mulsf3+0xb0>
    1b90:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b92:	ea 89       	ldd	r30, Y+18	; 0x12
    1b94:	2b 89       	ldd	r18, Y+19	; 0x13
    1b96:	3c 89       	ldd	r19, Y+20	; 0x14
    1b98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b9c:	28 0f       	add	r18, r24
    1b9e:	39 1f       	adc	r19, r25
    1ba0:	2e 5f       	subi	r18, 0xFE	; 254
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	17 c0       	rjmp	.+46     	; 0x1bd4 <__mulsf3+0x16e>
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	81 70       	andi	r24, 0x01	; 1
    1baa:	90 70       	andi	r25, 0x00	; 0
    1bac:	89 2b       	or	r24, r25
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <__mulsf3+0x162>
    1bb0:	16 95       	lsr	r17
    1bb2:	07 95       	ror	r16
    1bb4:	f7 94       	ror	r15
    1bb6:	e7 94       	ror	r14
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e8       	ldi	r27, 0x80	; 128
    1bc0:	e8 2a       	or	r14, r24
    1bc2:	f9 2a       	or	r15, r25
    1bc4:	0a 2b       	or	r16, r26
    1bc6:	1b 2b       	or	r17, r27
    1bc8:	76 95       	lsr	r23
    1bca:	67 95       	ror	r22
    1bcc:	57 95       	ror	r21
    1bce:	47 95       	ror	r20
    1bd0:	2f 5f       	subi	r18, 0xFF	; 255
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	77 fd       	sbrc	r23, 7
    1bd6:	e7 cf       	rjmp	.-50     	; 0x1ba6 <__mulsf3+0x140>
    1bd8:	0c c0       	rjmp	.+24     	; 0x1bf2 <__mulsf3+0x18c>
    1bda:	44 0f       	add	r20, r20
    1bdc:	55 1f       	adc	r21, r21
    1bde:	66 1f       	adc	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	17 fd       	sbrc	r17, 7
    1be4:	41 60       	ori	r20, 0x01	; 1
    1be6:	ee 0c       	add	r14, r14
    1be8:	ff 1c       	adc	r15, r15
    1bea:	00 1f       	adc	r16, r16
    1bec:	11 1f       	adc	r17, r17
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	30 40       	sbci	r19, 0x00	; 0
    1bf2:	40 30       	cpi	r20, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	59 07       	cpc	r21, r25
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	69 07       	cpc	r22, r25
    1bfc:	90 e4       	ldi	r25, 0x40	; 64
    1bfe:	79 07       	cpc	r23, r25
    1c00:	60 f3       	brcs	.-40     	; 0x1bda <__mulsf3+0x174>
    1c02:	2b 8f       	std	Y+27, r18	; 0x1b
    1c04:	3c 8f       	std	Y+28, r19	; 0x1c
    1c06:	db 01       	movw	r26, r22
    1c08:	ca 01       	movw	r24, r20
    1c0a:	8f 77       	andi	r24, 0x7F	; 127
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	a0 70       	andi	r26, 0x00	; 0
    1c10:	b0 70       	andi	r27, 0x00	; 0
    1c12:	80 34       	cpi	r24, 0x40	; 64
    1c14:	91 05       	cpc	r25, r1
    1c16:	a1 05       	cpc	r26, r1
    1c18:	b1 05       	cpc	r27, r1
    1c1a:	61 f4       	brne	.+24     	; 0x1c34 <__mulsf3+0x1ce>
    1c1c:	47 fd       	sbrc	r20, 7
    1c1e:	0a c0       	rjmp	.+20     	; 0x1c34 <__mulsf3+0x1ce>
    1c20:	e1 14       	cp	r14, r1
    1c22:	f1 04       	cpc	r15, r1
    1c24:	01 05       	cpc	r16, r1
    1c26:	11 05       	cpc	r17, r1
    1c28:	29 f0       	breq	.+10     	; 0x1c34 <__mulsf3+0x1ce>
    1c2a:	40 5c       	subi	r20, 0xC0	; 192
    1c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2e:	6f 4f       	sbci	r22, 0xFF	; 255
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	40 78       	andi	r20, 0x80	; 128
    1c34:	1a 8e       	std	Y+26, r1	; 0x1a
    1c36:	fe 17       	cp	r31, r30
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <__mulsf3+0x1d8>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c3e:	4d 8f       	std	Y+29, r20	; 0x1d
    1c40:	5e 8f       	std	Y+30, r21	; 0x1e
    1c42:	6f 8f       	std	Y+31, r22	; 0x1f
    1c44:	78 a3       	std	Y+32, r23	; 0x20
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	89 8f       	std	Y+25, r24	; 0x19
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	49 96       	adiw	r24, 0x19	; 25
    1c4e:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    1c52:	a0 96       	adiw	r28, 0x20	; 32
    1c54:	e2 e1       	ldi	r30, 0x12	; 18
    1c56:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__>

00001c5a <__divsf3>:
    1c5a:	a8 e1       	ldi	r26, 0x18	; 24
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e3 e3       	ldi	r30, 0x33	; 51
    1c60:	fe e0       	ldi	r31, 0x0E	; 14
    1c62:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__+0x10>
    1c66:	69 83       	std	Y+1, r22	; 0x01
    1c68:	7a 83       	std	Y+2, r23	; 0x02
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	2d 83       	std	Y+5, r18	; 0x05
    1c70:	3e 83       	std	Y+6, r19	; 0x06
    1c72:	4f 83       	std	Y+7, r20	; 0x07
    1c74:	58 87       	std	Y+8, r21	; 0x08
    1c76:	b9 e0       	ldi	r27, 0x09	; 9
    1c78:	eb 2e       	mov	r14, r27
    1c7a:	f1 2c       	mov	r15, r1
    1c7c:	ec 0e       	add	r14, r28
    1c7e:	fd 1e       	adc	r15, r29
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	b7 01       	movw	r22, r14
    1c86:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1c8a:	8e 01       	movw	r16, r28
    1c8c:	0f 5e       	subi	r16, 0xEF	; 239
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	ce 01       	movw	r24, r28
    1c92:	05 96       	adiw	r24, 0x05	; 5
    1c94:	b8 01       	movw	r22, r16
    1c96:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1c9a:	29 85       	ldd	r18, Y+9	; 0x09
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	08 f4       	brcc	.+2      	; 0x1ca2 <__divsf3+0x48>
    1ca0:	7e c0       	rjmp	.+252    	; 0x1d9e <__divsf3+0x144>
    1ca2:	39 89       	ldd	r19, Y+17	; 0x11
    1ca4:	32 30       	cpi	r19, 0x02	; 2
    1ca6:	10 f4       	brcc	.+4      	; 0x1cac <__divsf3+0x52>
    1ca8:	b8 01       	movw	r22, r16
    1caa:	7c c0       	rjmp	.+248    	; 0x1da4 <__divsf3+0x14a>
    1cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	89 27       	eor	r24, r25
    1cb2:	8a 87       	std	Y+10, r24	; 0x0a
    1cb4:	24 30       	cpi	r18, 0x04	; 4
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <__divsf3+0x62>
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 f4       	brne	.+12     	; 0x1cc8 <__divsf3+0x6e>
    1cbc:	23 17       	cp	r18, r19
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <__divsf3+0x68>
    1cc0:	6e c0       	rjmp	.+220    	; 0x1d9e <__divsf3+0x144>
    1cc2:	6d e3       	ldi	r22, 0x3D	; 61
    1cc4:	71 e0       	ldi	r23, 0x01	; 1
    1cc6:	6e c0       	rjmp	.+220    	; 0x1da4 <__divsf3+0x14a>
    1cc8:	34 30       	cpi	r19, 0x04	; 4
    1cca:	39 f4       	brne	.+14     	; 0x1cda <__divsf3+0x80>
    1ccc:	1d 86       	std	Y+13, r1	; 0x0d
    1cce:	1e 86       	std	Y+14, r1	; 0x0e
    1cd0:	1f 86       	std	Y+15, r1	; 0x0f
    1cd2:	18 8a       	std	Y+16, r1	; 0x10
    1cd4:	1c 86       	std	Y+12, r1	; 0x0c
    1cd6:	1b 86       	std	Y+11, r1	; 0x0b
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__divsf3+0x88>
    1cda:	32 30       	cpi	r19, 0x02	; 2
    1cdc:	21 f4       	brne	.+8      	; 0x1ce6 <__divsf3+0x8c>
    1cde:	84 e0       	ldi	r24, 0x04	; 4
    1ce0:	89 87       	std	Y+9, r24	; 0x09
    1ce2:	b7 01       	movw	r22, r14
    1ce4:	5f c0       	rjmp	.+190    	; 0x1da4 <__divsf3+0x14a>
    1ce6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ce8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	28 1b       	sub	r18, r24
    1cf0:	39 0b       	sbc	r19, r25
    1cf2:	3c 87       	std	Y+12, r19	; 0x0c
    1cf4:	2b 87       	std	Y+11, r18	; 0x0b
    1cf6:	ed 84       	ldd	r14, Y+13	; 0x0d
    1cf8:	fe 84       	ldd	r15, Y+14	; 0x0e
    1cfa:	0f 85       	ldd	r16, Y+15	; 0x0f
    1cfc:	18 89       	ldd	r17, Y+16	; 0x10
    1cfe:	ad 88       	ldd	r10, Y+21	; 0x15
    1d00:	be 88       	ldd	r11, Y+22	; 0x16
    1d02:	cf 88       	ldd	r12, Y+23	; 0x17
    1d04:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d06:	ea 14       	cp	r14, r10
    1d08:	fb 04       	cpc	r15, r11
    1d0a:	0c 05       	cpc	r16, r12
    1d0c:	1d 05       	cpc	r17, r13
    1d0e:	40 f4       	brcc	.+16     	; 0x1d20 <__divsf3+0xc6>
    1d10:	ee 0c       	add	r14, r14
    1d12:	ff 1c       	adc	r15, r15
    1d14:	00 1f       	adc	r16, r16
    1d16:	11 1f       	adc	r17, r17
    1d18:	21 50       	subi	r18, 0x01	; 1
    1d1a:	30 40       	sbci	r19, 0x00	; 0
    1d1c:	3c 87       	std	Y+12, r19	; 0x0c
    1d1e:	2b 87       	std	Y+11, r18	; 0x0b
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e4       	ldi	r27, 0x40	; 64
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	ea 14       	cp	r14, r10
    1d36:	fb 04       	cpc	r15, r11
    1d38:	0c 05       	cpc	r16, r12
    1d3a:	1d 05       	cpc	r17, r13
    1d3c:	40 f0       	brcs	.+16     	; 0x1d4e <__divsf3+0xf4>
    1d3e:	28 2b       	or	r18, r24
    1d40:	39 2b       	or	r19, r25
    1d42:	4a 2b       	or	r20, r26
    1d44:	5b 2b       	or	r21, r27
    1d46:	ea 18       	sub	r14, r10
    1d48:	fb 08       	sbc	r15, r11
    1d4a:	0c 09       	sbc	r16, r12
    1d4c:	1d 09       	sbc	r17, r13
    1d4e:	b6 95       	lsr	r27
    1d50:	a7 95       	ror	r26
    1d52:	97 95       	ror	r25
    1d54:	87 95       	ror	r24
    1d56:	ee 0c       	add	r14, r14
    1d58:	ff 1c       	adc	r15, r15
    1d5a:	00 1f       	adc	r16, r16
    1d5c:	11 1f       	adc	r17, r17
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	6f 31       	cpi	r22, 0x1F	; 31
    1d64:	71 05       	cpc	r23, r1
    1d66:	31 f7       	brne	.-52     	; 0x1d34 <__divsf3+0xda>
    1d68:	da 01       	movw	r26, r20
    1d6a:	c9 01       	movw	r24, r18
    1d6c:	8f 77       	andi	r24, 0x7F	; 127
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	a0 70       	andi	r26, 0x00	; 0
    1d72:	b0 70       	andi	r27, 0x00	; 0
    1d74:	80 34       	cpi	r24, 0x40	; 64
    1d76:	91 05       	cpc	r25, r1
    1d78:	a1 05       	cpc	r26, r1
    1d7a:	b1 05       	cpc	r27, r1
    1d7c:	61 f4       	brne	.+24     	; 0x1d96 <__divsf3+0x13c>
    1d7e:	27 fd       	sbrc	r18, 7
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <__divsf3+0x13c>
    1d82:	e1 14       	cp	r14, r1
    1d84:	f1 04       	cpc	r15, r1
    1d86:	01 05       	cpc	r16, r1
    1d88:	11 05       	cpc	r17, r1
    1d8a:	29 f0       	breq	.+10     	; 0x1d96 <__divsf3+0x13c>
    1d8c:	20 5c       	subi	r18, 0xC0	; 192
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	4f 4f       	sbci	r20, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	20 78       	andi	r18, 0x80	; 128
    1d96:	2d 87       	std	Y+13, r18	; 0x0d
    1d98:	3e 87       	std	Y+14, r19	; 0x0e
    1d9a:	4f 87       	std	Y+15, r20	; 0x0f
    1d9c:	58 8b       	std	Y+16, r21	; 0x10
    1d9e:	be 01       	movw	r22, r28
    1da0:	67 5f       	subi	r22, 0xF7	; 247
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	cb 01       	movw	r24, r22
    1da6:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    1daa:	68 96       	adiw	r28, 0x18	; 24
    1dac:	ea e0       	ldi	r30, 0x0A	; 10
    1dae:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__+0x10>

00001db2 <__gtsf2>:
    1db2:	a8 e1       	ldi	r26, 0x18	; 24
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef ed       	ldi	r30, 0xDF	; 223
    1db8:	fe e0       	ldi	r31, 0x0E	; 14
    1dba:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    1dbe:	69 83       	std	Y+1, r22	; 0x01
    1dc0:	7a 83       	std	Y+2, r23	; 0x02
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	2d 83       	std	Y+5, r18	; 0x05
    1dc8:	3e 83       	std	Y+6, r19	; 0x06
    1dca:	4f 83       	std	Y+7, r20	; 0x07
    1dcc:	58 87       	std	Y+8, r21	; 0x08
    1dce:	89 e0       	ldi	r24, 0x09	; 9
    1dd0:	e8 2e       	mov	r14, r24
    1dd2:	f1 2c       	mov	r15, r1
    1dd4:	ec 0e       	add	r14, r28
    1dd6:	fd 1e       	adc	r15, r29
    1dd8:	ce 01       	movw	r24, r28
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	b7 01       	movw	r22, r14
    1dde:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1de2:	8e 01       	movw	r16, r28
    1de4:	0f 5e       	subi	r16, 0xEF	; 239
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	ce 01       	movw	r24, r28
    1dea:	05 96       	adiw	r24, 0x05	; 5
    1dec:	b8 01       	movw	r22, r16
    1dee:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	40 f0       	brcs	.+16     	; 0x1e08 <__gtsf2+0x56>
    1df8:	89 89       	ldd	r24, Y+17	; 0x11
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	28 f0       	brcs	.+10     	; 0x1e08 <__gtsf2+0x56>
    1dfe:	c7 01       	movw	r24, r14
    1e00:	b8 01       	movw	r22, r16
    1e02:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fpcmp_parts_f>
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <__gtsf2+0x58>
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	68 96       	adiw	r28, 0x18	; 24
    1e0c:	e6 e0       	ldi	r30, 0x06	; 6
    1e0e:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001e12 <__gesf2>:
    1e12:	a8 e1       	ldi	r26, 0x18	; 24
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e0       	ldi	r30, 0x0F	; 15
    1e18:	ff e0       	ldi	r31, 0x0F	; 15
    1e1a:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    1e1e:	69 83       	std	Y+1, r22	; 0x01
    1e20:	7a 83       	std	Y+2, r23	; 0x02
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	2d 83       	std	Y+5, r18	; 0x05
    1e28:	3e 83       	std	Y+6, r19	; 0x06
    1e2a:	4f 83       	std	Y+7, r20	; 0x07
    1e2c:	58 87       	std	Y+8, r21	; 0x08
    1e2e:	89 e0       	ldi	r24, 0x09	; 9
    1e30:	e8 2e       	mov	r14, r24
    1e32:	f1 2c       	mov	r15, r1
    1e34:	ec 0e       	add	r14, r28
    1e36:	fd 1e       	adc	r15, r29
    1e38:	ce 01       	movw	r24, r28
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	b7 01       	movw	r22, r14
    1e3e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1e42:	8e 01       	movw	r16, r28
    1e44:	0f 5e       	subi	r16, 0xEF	; 239
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	ce 01       	movw	r24, r28
    1e4a:	05 96       	adiw	r24, 0x05	; 5
    1e4c:	b8 01       	movw	r22, r16
    1e4e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	40 f0       	brcs	.+16     	; 0x1e68 <__gesf2+0x56>
    1e58:	89 89       	ldd	r24, Y+17	; 0x11
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	28 f0       	brcs	.+10     	; 0x1e68 <__gesf2+0x56>
    1e5e:	c7 01       	movw	r24, r14
    1e60:	b8 01       	movw	r22, r16
    1e62:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fpcmp_parts_f>
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <__gesf2+0x58>
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	68 96       	adiw	r28, 0x18	; 24
    1e6c:	e6 e0       	ldi	r30, 0x06	; 6
    1e6e:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001e72 <__ltsf2>:
    1e72:	a8 e1       	ldi	r26, 0x18	; 24
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ef e3       	ldi	r30, 0x3F	; 63
    1e78:	ff e0       	ldi	r31, 0x0F	; 15
    1e7a:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    1e7e:	69 83       	std	Y+1, r22	; 0x01
    1e80:	7a 83       	std	Y+2, r23	; 0x02
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	2d 83       	std	Y+5, r18	; 0x05
    1e88:	3e 83       	std	Y+6, r19	; 0x06
    1e8a:	4f 83       	std	Y+7, r20	; 0x07
    1e8c:	58 87       	std	Y+8, r21	; 0x08
    1e8e:	89 e0       	ldi	r24, 0x09	; 9
    1e90:	e8 2e       	mov	r14, r24
    1e92:	f1 2c       	mov	r15, r1
    1e94:	ec 0e       	add	r14, r28
    1e96:	fd 1e       	adc	r15, r29
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	0f 5e       	subi	r16, 0xEF	; 239
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	05 96       	adiw	r24, 0x05	; 5
    1eac:	b8 01       	movw	r22, r16
    1eae:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	40 f0       	brcs	.+16     	; 0x1ec8 <__ltsf2+0x56>
    1eb8:	89 89       	ldd	r24, Y+17	; 0x11
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	28 f0       	brcs	.+10     	; 0x1ec8 <__ltsf2+0x56>
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	b8 01       	movw	r22, r16
    1ec2:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fpcmp_parts_f>
    1ec6:	01 c0       	rjmp	.+2      	; 0x1eca <__ltsf2+0x58>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	68 96       	adiw	r28, 0x18	; 24
    1ecc:	e6 e0       	ldi	r30, 0x06	; 6
    1ece:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001ed2 <__lesf2>:
    1ed2:	a8 e1       	ldi	r26, 0x18	; 24
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e6       	ldi	r30, 0x6F	; 111
    1ed8:	ff e0       	ldi	r31, 0x0F	; 15
    1eda:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__prologue_saves__+0x18>
    1ede:	69 83       	std	Y+1, r22	; 0x01
    1ee0:	7a 83       	std	Y+2, r23	; 0x02
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	2d 83       	std	Y+5, r18	; 0x05
    1ee8:	3e 83       	std	Y+6, r19	; 0x06
    1eea:	4f 83       	std	Y+7, r20	; 0x07
    1eec:	58 87       	std	Y+8, r21	; 0x08
    1eee:	89 e0       	ldi	r24, 0x09	; 9
    1ef0:	e8 2e       	mov	r14, r24
    1ef2:	f1 2c       	mov	r15, r1
    1ef4:	ec 0e       	add	r14, r28
    1ef6:	fd 1e       	adc	r15, r29
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	b7 01       	movw	r22, r14
    1efe:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1f02:	8e 01       	movw	r16, r28
    1f04:	0f 5e       	subi	r16, 0xEF	; 239
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	ce 01       	movw	r24, r28
    1f0a:	05 96       	adiw	r24, 0x05	; 5
    1f0c:	b8 01       	movw	r22, r16
    1f0e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	40 f0       	brcs	.+16     	; 0x1f28 <__lesf2+0x56>
    1f18:	89 89       	ldd	r24, Y+17	; 0x11
    1f1a:	82 30       	cpi	r24, 0x02	; 2
    1f1c:	28 f0       	brcs	.+10     	; 0x1f28 <__lesf2+0x56>
    1f1e:	c7 01       	movw	r24, r14
    1f20:	b8 01       	movw	r22, r16
    1f22:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fpcmp_parts_f>
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <__lesf2+0x58>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	68 96       	adiw	r28, 0x18	; 24
    1f2c:	e6 e0       	ldi	r30, 0x06	; 6
    1f2e:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__epilogue_restores__+0x18>

00001f32 <__floatsisf>:
    1f32:	a8 e0       	ldi	r26, 0x08	; 8
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e9       	ldi	r30, 0x9F	; 159
    1f38:	ff e0       	ldi	r31, 0x0F	; 15
    1f3a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x12>
    1f3e:	9b 01       	movw	r18, r22
    1f40:	ac 01       	movw	r20, r24
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	da 01       	movw	r26, r20
    1f48:	c9 01       	movw	r24, r18
    1f4a:	88 27       	eor	r24, r24
    1f4c:	b7 fd       	sbrc	r27, 7
    1f4e:	83 95       	inc	r24
    1f50:	99 27       	eor	r25, r25
    1f52:	aa 27       	eor	r26, r26
    1f54:	bb 27       	eor	r27, r27
    1f56:	b8 2e       	mov	r11, r24
    1f58:	21 15       	cp	r18, r1
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	41 05       	cpc	r20, r1
    1f5e:	51 05       	cpc	r21, r1
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <__floatsisf+0x36>
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	3a c0       	rjmp	.+116    	; 0x1fdc <__floatsisf+0xaa>
    1f68:	88 23       	and	r24, r24
    1f6a:	a9 f0       	breq	.+42     	; 0x1f96 <__floatsisf+0x64>
    1f6c:	20 30       	cpi	r18, 0x00	; 0
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	38 07       	cpc	r19, r24
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	48 07       	cpc	r20, r24
    1f76:	80 e8       	ldi	r24, 0x80	; 128
    1f78:	58 07       	cpc	r21, r24
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <__floatsisf+0x54>
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	9f ec       	ldi	r25, 0xCF	; 207
    1f84:	30 c0       	rjmp	.+96     	; 0x1fe6 <__floatsisf+0xb4>
    1f86:	ee 24       	eor	r14, r14
    1f88:	ff 24       	eor	r15, r15
    1f8a:	87 01       	movw	r16, r14
    1f8c:	e2 1a       	sub	r14, r18
    1f8e:	f3 0a       	sbc	r15, r19
    1f90:	04 0b       	sbc	r16, r20
    1f92:	15 0b       	sbc	r17, r21
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <__floatsisf+0x68>
    1f96:	79 01       	movw	r14, r18
    1f98:	8a 01       	movw	r16, r20
    1f9a:	8e e1       	ldi	r24, 0x1E	; 30
    1f9c:	c8 2e       	mov	r12, r24
    1f9e:	d1 2c       	mov	r13, r1
    1fa0:	dc 82       	std	Y+4, r13	; 0x04
    1fa2:	cb 82       	std	Y+3, r12	; 0x03
    1fa4:	ed 82       	std	Y+5, r14	; 0x05
    1fa6:	fe 82       	std	Y+6, r15	; 0x06
    1fa8:	0f 83       	std	Y+7, r16	; 0x07
    1faa:	18 87       	std	Y+8, r17	; 0x08
    1fac:	c8 01       	movw	r24, r16
    1fae:	b7 01       	movw	r22, r14
    1fb0:	0e 94 c4 10 	call	0x2188	; 0x2188 <__clzsi2>
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	18 16       	cp	r1, r24
    1fb8:	19 06       	cpc	r1, r25
    1fba:	84 f4       	brge	.+32     	; 0x1fdc <__floatsisf+0xaa>
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <__floatsisf+0x96>
    1fc0:	ee 0c       	add	r14, r14
    1fc2:	ff 1c       	adc	r15, r15
    1fc4:	00 1f       	adc	r16, r16
    1fc6:	11 1f       	adc	r17, r17
    1fc8:	0a 94       	dec	r0
    1fca:	d2 f7       	brpl	.-12     	; 0x1fc0 <__floatsisf+0x8e>
    1fcc:	ed 82       	std	Y+5, r14	; 0x05
    1fce:	fe 82       	std	Y+6, r15	; 0x06
    1fd0:	0f 83       	std	Y+7, r16	; 0x07
    1fd2:	18 87       	std	Y+8, r17	; 0x08
    1fd4:	c8 1a       	sub	r12, r24
    1fd6:	d9 0a       	sbc	r13, r25
    1fd8:	dc 82       	std	Y+4, r13	; 0x04
    1fda:	cb 82       	std	Y+3, r12	; 0x03
    1fdc:	ba 82       	std	Y+2, r11	; 0x02
    1fde:	ce 01       	movw	r24, r28
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    1fe6:	28 96       	adiw	r28, 0x08	; 8
    1fe8:	e9 e0       	ldi	r30, 0x09	; 9
    1fea:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x12>

00001fee <__fixsfsi>:
    1fee:	ac e0       	ldi	r26, 0x0C	; 12
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	ed ef       	ldi	r30, 0xFD	; 253
    1ff4:	ff e0       	ldi	r31, 0x0F	; 15
    1ff6:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__+0x20>
    1ffa:	69 83       	std	Y+1, r22	; 0x01
    1ffc:	7a 83       	std	Y+2, r23	; 0x02
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	be 01       	movw	r22, r28
    2008:	6b 5f       	subi	r22, 0xFB	; 251
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__unpack_f>
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	61 f1       	breq	.+88     	; 0x206e <__fixsfsi+0x80>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	50 f1       	brcs	.+84     	; 0x206e <__fixsfsi+0x80>
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	21 f4       	brne	.+8      	; 0x2026 <__fixsfsi+0x38>
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
    2020:	88 23       	and	r24, r24
    2022:	51 f1       	breq	.+84     	; 0x2078 <__fixsfsi+0x8a>
    2024:	2e c0       	rjmp	.+92     	; 0x2082 <__fixsfsi+0x94>
    2026:	2f 81       	ldd	r18, Y+7	; 0x07
    2028:	38 85       	ldd	r19, Y+8	; 0x08
    202a:	37 fd       	sbrc	r19, 7
    202c:	20 c0       	rjmp	.+64     	; 0x206e <__fixsfsi+0x80>
    202e:	6e 81       	ldd	r22, Y+6	; 0x06
    2030:	2f 31       	cpi	r18, 0x1F	; 31
    2032:	31 05       	cpc	r19, r1
    2034:	1c f0       	brlt	.+6      	; 0x203c <__fixsfsi+0x4e>
    2036:	66 23       	and	r22, r22
    2038:	f9 f0       	breq	.+62     	; 0x2078 <__fixsfsi+0x8a>
    203a:	23 c0       	rjmp	.+70     	; 0x2082 <__fixsfsi+0x94>
    203c:	8e e1       	ldi	r24, 0x1E	; 30
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	82 1b       	sub	r24, r18
    2042:	93 0b       	sbc	r25, r19
    2044:	29 85       	ldd	r18, Y+9	; 0x09
    2046:	3a 85       	ldd	r19, Y+10	; 0x0a
    2048:	4b 85       	ldd	r20, Y+11	; 0x0b
    204a:	5c 85       	ldd	r21, Y+12	; 0x0c
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <__fixsfsi+0x68>
    204e:	56 95       	lsr	r21
    2050:	47 95       	ror	r20
    2052:	37 95       	ror	r19
    2054:	27 95       	ror	r18
    2056:	8a 95       	dec	r24
    2058:	d2 f7       	brpl	.-12     	; 0x204e <__fixsfsi+0x60>
    205a:	66 23       	and	r22, r22
    205c:	b1 f0       	breq	.+44     	; 0x208a <__fixsfsi+0x9c>
    205e:	50 95       	com	r21
    2060:	40 95       	com	r20
    2062:	30 95       	com	r19
    2064:	21 95       	neg	r18
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	4f 4f       	sbci	r20, 0xFF	; 255
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	0e c0       	rjmp	.+28     	; 0x208a <__fixsfsi+0x9c>
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	09 c0       	rjmp	.+18     	; 0x208a <__fixsfsi+0x9c>
    2078:	2f ef       	ldi	r18, 0xFF	; 255
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f ef       	ldi	r20, 0xFF	; 255
    207e:	5f e7       	ldi	r21, 0x7F	; 127
    2080:	04 c0       	rjmp	.+8      	; 0x208a <__fixsfsi+0x9c>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e8       	ldi	r21, 0x80	; 128
    208a:	b9 01       	movw	r22, r18
    208c:	ca 01       	movw	r24, r20
    208e:	2c 96       	adiw	r28, 0x0c	; 12
    2090:	e2 e0       	ldi	r30, 0x02	; 2
    2092:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__+0x20>

00002096 <__floatunsisf>:
    2096:	a8 e0       	ldi	r26, 0x08	; 8
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e1 e5       	ldi	r30, 0x51	; 81
    209c:	f0 e1       	ldi	r31, 0x10	; 16
    209e:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__+0x10>
    20a2:	7b 01       	movw	r14, r22
    20a4:	8c 01       	movw	r16, r24
    20a6:	61 15       	cp	r22, r1
    20a8:	71 05       	cpc	r23, r1
    20aa:	81 05       	cpc	r24, r1
    20ac:	91 05       	cpc	r25, r1
    20ae:	19 f4       	brne	.+6      	; 0x20b6 <__floatunsisf+0x20>
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	60 c0       	rjmp	.+192    	; 0x2176 <__floatunsisf+0xe0>
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	8e e1       	ldi	r24, 0x1E	; 30
    20bc:	c8 2e       	mov	r12, r24
    20be:	d1 2c       	mov	r13, r1
    20c0:	dc 82       	std	Y+4, r13	; 0x04
    20c2:	cb 82       	std	Y+3, r12	; 0x03
    20c4:	ed 82       	std	Y+5, r14	; 0x05
    20c6:	fe 82       	std	Y+6, r15	; 0x06
    20c8:	0f 83       	std	Y+7, r16	; 0x07
    20ca:	18 87       	std	Y+8, r17	; 0x08
    20cc:	c8 01       	movw	r24, r16
    20ce:	b7 01       	movw	r22, r14
    20d0:	0e 94 c4 10 	call	0x2188	; 0x2188 <__clzsi2>
    20d4:	fc 01       	movw	r30, r24
    20d6:	31 97       	sbiw	r30, 0x01	; 1
    20d8:	f7 ff       	sbrs	r31, 7
    20da:	3b c0       	rjmp	.+118    	; 0x2152 <__floatunsisf+0xbc>
    20dc:	22 27       	eor	r18, r18
    20de:	33 27       	eor	r19, r19
    20e0:	2e 1b       	sub	r18, r30
    20e2:	3f 0b       	sbc	r19, r31
    20e4:	57 01       	movw	r10, r14
    20e6:	68 01       	movw	r12, r16
    20e8:	02 2e       	mov	r0, r18
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <__floatunsisf+0x5e>
    20ec:	d6 94       	lsr	r13
    20ee:	c7 94       	ror	r12
    20f0:	b7 94       	ror	r11
    20f2:	a7 94       	ror	r10
    20f4:	0a 94       	dec	r0
    20f6:	d2 f7       	brpl	.-12     	; 0x20ec <__floatunsisf+0x56>
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a0 e0       	ldi	r26, 0x00	; 0
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <__floatunsisf+0x7c>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	aa 1f       	adc	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	2a 95       	dec	r18
    2114:	d2 f7       	brpl	.-12     	; 0x210a <__floatunsisf+0x74>
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	a1 09       	sbc	r26, r1
    211a:	b1 09       	sbc	r27, r1
    211c:	8e 21       	and	r24, r14
    211e:	9f 21       	and	r25, r15
    2120:	a0 23       	and	r26, r16
    2122:	b1 23       	and	r27, r17
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	a1 05       	cpc	r26, r1
    2128:	b1 05       	cpc	r27, r1
    212a:	21 f0       	breq	.+8      	; 0x2134 <__floatunsisf+0x9e>
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	4a 29       	or	r20, r10
    2136:	5b 29       	or	r21, r11
    2138:	6c 29       	or	r22, r12
    213a:	7d 29       	or	r23, r13
    213c:	4d 83       	std	Y+5, r20	; 0x05
    213e:	5e 83       	std	Y+6, r21	; 0x06
    2140:	6f 83       	std	Y+7, r22	; 0x07
    2142:	78 87       	std	Y+8, r23	; 0x08
    2144:	8e e1       	ldi	r24, 0x1E	; 30
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	8e 1b       	sub	r24, r30
    214a:	9f 0b       	sbc	r25, r31
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	12 c0       	rjmp	.+36     	; 0x2176 <__floatunsisf+0xe0>
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	81 f0       	breq	.+32     	; 0x2176 <__floatunsisf+0xe0>
    2156:	0e 2e       	mov	r0, r30
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <__floatunsisf+0xcc>
    215a:	ee 0c       	add	r14, r14
    215c:	ff 1c       	adc	r15, r15
    215e:	00 1f       	adc	r16, r16
    2160:	11 1f       	adc	r17, r17
    2162:	0a 94       	dec	r0
    2164:	d2 f7       	brpl	.-12     	; 0x215a <__floatunsisf+0xc4>
    2166:	ed 82       	std	Y+5, r14	; 0x05
    2168:	fe 82       	std	Y+6, r15	; 0x06
    216a:	0f 83       	std	Y+7, r16	; 0x07
    216c:	18 87       	std	Y+8, r17	; 0x08
    216e:	ce 1a       	sub	r12, r30
    2170:	df 0a       	sbc	r13, r31
    2172:	dc 82       	std	Y+4, r13	; 0x04
    2174:	cb 82       	std	Y+3, r12	; 0x03
    2176:	1a 82       	std	Y+2, r1	; 0x02
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	0e 94 13 11 	call	0x2226	; 0x2226 <__pack_f>
    2180:	28 96       	adiw	r28, 0x08	; 8
    2182:	ea e0       	ldi	r30, 0x0A	; 10
    2184:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__+0x10>

00002188 <__clzsi2>:
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	7b 01       	movw	r14, r22
    2192:	8c 01       	movw	r16, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	e8 16       	cp	r14, r24
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	f8 06       	cpc	r15, r24
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	08 07       	cpc	r16, r24
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	18 07       	cpc	r17, r24
    21a4:	88 f4       	brcc	.+34     	; 0x21c8 <__clzsi2+0x40>
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	e8 16       	cp	r14, r24
    21aa:	f1 04       	cpc	r15, r1
    21ac:	01 05       	cpc	r16, r1
    21ae:	11 05       	cpc	r17, r1
    21b0:	31 f0       	breq	.+12     	; 0x21be <__clzsi2+0x36>
    21b2:	28 f0       	brcs	.+10     	; 0x21be <__clzsi2+0x36>
    21b4:	88 e0       	ldi	r24, 0x08	; 8
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	17 c0       	rjmp	.+46     	; 0x21ec <__clzsi2+0x64>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	12 c0       	rjmp	.+36     	; 0x21ec <__clzsi2+0x64>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	e8 16       	cp	r14, r24
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	f8 06       	cpc	r15, r24
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	08 07       	cpc	r16, r24
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	18 07       	cpc	r17, r24
    21d8:	28 f0       	brcs	.+10     	; 0x21e4 <__clzsi2+0x5c>
    21da:	88 e1       	ldi	r24, 0x18	; 24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <__clzsi2+0x64>
    21e4:	80 e1       	ldi	r24, 0x10	; 16
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e0       	ldi	r26, 0x00	; 0
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	20 e2       	ldi	r18, 0x20	; 32
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	28 1b       	sub	r18, r24
    21f6:	39 0b       	sbc	r19, r25
    21f8:	4a 0b       	sbc	r20, r26
    21fa:	5b 0b       	sbc	r21, r27
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <__clzsi2+0x7e>
    21fe:	16 95       	lsr	r17
    2200:	07 95       	ror	r16
    2202:	f7 94       	ror	r15
    2204:	e7 94       	ror	r14
    2206:	8a 95       	dec	r24
    2208:	d2 f7       	brpl	.-12     	; 0x21fe <__clzsi2+0x76>
    220a:	f7 01       	movw	r30, r14
    220c:	eb 5b       	subi	r30, 0xBB	; 187
    220e:	fe 4f       	sbci	r31, 0xFE	; 254
    2210:	80 81       	ld	r24, Z
    2212:	28 1b       	sub	r18, r24
    2214:	31 09       	sbc	r19, r1
    2216:	41 09       	sbc	r20, r1
    2218:	51 09       	sbc	r21, r1
    221a:	c9 01       	movw	r24, r18
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	08 95       	ret

00002226 <__pack_f>:
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	fc 01       	movw	r30, r24
    2232:	e4 80       	ldd	r14, Z+4	; 0x04
    2234:	f5 80       	ldd	r15, Z+5	; 0x05
    2236:	06 81       	ldd	r16, Z+6	; 0x06
    2238:	17 81       	ldd	r17, Z+7	; 0x07
    223a:	d1 80       	ldd	r13, Z+1	; 0x01
    223c:	80 81       	ld	r24, Z
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	48 f4       	brcc	.+18     	; 0x2254 <__pack_f+0x2e>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e1       	ldi	r26, 0x10	; 16
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e8 2a       	or	r14, r24
    224c:	f9 2a       	or	r15, r25
    224e:	0a 2b       	or	r16, r26
    2250:	1b 2b       	or	r17, r27
    2252:	a5 c0       	rjmp	.+330    	; 0x239e <__pack_f+0x178>
    2254:	84 30       	cpi	r24, 0x04	; 4
    2256:	09 f4       	brne	.+2      	; 0x225a <__pack_f+0x34>
    2258:	9f c0       	rjmp	.+318    	; 0x2398 <__pack_f+0x172>
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	21 f4       	brne	.+8      	; 0x2266 <__pack_f+0x40>
    225e:	ee 24       	eor	r14, r14
    2260:	ff 24       	eor	r15, r15
    2262:	87 01       	movw	r16, r14
    2264:	05 c0       	rjmp	.+10     	; 0x2270 <__pack_f+0x4a>
    2266:	e1 14       	cp	r14, r1
    2268:	f1 04       	cpc	r15, r1
    226a:	01 05       	cpc	r16, r1
    226c:	11 05       	cpc	r17, r1
    226e:	19 f4       	brne	.+6      	; 0x2276 <__pack_f+0x50>
    2270:	e0 e0       	ldi	r30, 0x00	; 0
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	96 c0       	rjmp	.+300    	; 0x23a2 <__pack_f+0x17c>
    2276:	62 81       	ldd	r22, Z+2	; 0x02
    2278:	73 81       	ldd	r23, Z+3	; 0x03
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	62 38       	cpi	r22, 0x82	; 130
    227e:	79 07       	cpc	r23, r25
    2280:	0c f0       	brlt	.+2      	; 0x2284 <__pack_f+0x5e>
    2282:	5b c0       	rjmp	.+182    	; 0x233a <__pack_f+0x114>
    2284:	22 e8       	ldi	r18, 0x82	; 130
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	26 1b       	sub	r18, r22
    228a:	37 0b       	sbc	r19, r23
    228c:	2a 31       	cpi	r18, 0x1A	; 26
    228e:	31 05       	cpc	r19, r1
    2290:	2c f0       	brlt	.+10     	; 0x229c <__pack_f+0x76>
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	2a c0       	rjmp	.+84     	; 0x22f0 <__pack_f+0xca>
    229c:	b8 01       	movw	r22, r16
    229e:	a7 01       	movw	r20, r14
    22a0:	02 2e       	mov	r0, r18
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <__pack_f+0x86>
    22a4:	76 95       	lsr	r23
    22a6:	67 95       	ror	r22
    22a8:	57 95       	ror	r21
    22aa:	47 95       	ror	r20
    22ac:	0a 94       	dec	r0
    22ae:	d2 f7       	brpl	.-12     	; 0x22a4 <__pack_f+0x7e>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e0       	ldi	r26, 0x00	; 0
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <__pack_f+0x9c>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	2a 95       	dec	r18
    22c4:	d2 f7       	brpl	.-12     	; 0x22ba <__pack_f+0x94>
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	a1 09       	sbc	r26, r1
    22ca:	b1 09       	sbc	r27, r1
    22cc:	8e 21       	and	r24, r14
    22ce:	9f 21       	and	r25, r15
    22d0:	a0 23       	and	r26, r16
    22d2:	b1 23       	and	r27, r17
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	a1 05       	cpc	r26, r1
    22d8:	b1 05       	cpc	r27, r1
    22da:	21 f0       	breq	.+8      	; 0x22e4 <__pack_f+0xbe>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	9a 01       	movw	r18, r20
    22e6:	ab 01       	movw	r20, r22
    22e8:	28 2b       	or	r18, r24
    22ea:	39 2b       	or	r19, r25
    22ec:	4a 2b       	or	r20, r26
    22ee:	5b 2b       	or	r21, r27
    22f0:	da 01       	movw	r26, r20
    22f2:	c9 01       	movw	r24, r18
    22f4:	8f 77       	andi	r24, 0x7F	; 127
    22f6:	90 70       	andi	r25, 0x00	; 0
    22f8:	a0 70       	andi	r26, 0x00	; 0
    22fa:	b0 70       	andi	r27, 0x00	; 0
    22fc:	80 34       	cpi	r24, 0x40	; 64
    22fe:	91 05       	cpc	r25, r1
    2300:	a1 05       	cpc	r26, r1
    2302:	b1 05       	cpc	r27, r1
    2304:	39 f4       	brne	.+14     	; 0x2314 <__pack_f+0xee>
    2306:	27 ff       	sbrs	r18, 7
    2308:	09 c0       	rjmp	.+18     	; 0x231c <__pack_f+0xf6>
    230a:	20 5c       	subi	r18, 0xC0	; 192
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	4f 4f       	sbci	r20, 0xFF	; 255
    2310:	5f 4f       	sbci	r21, 0xFF	; 255
    2312:	04 c0       	rjmp	.+8      	; 0x231c <__pack_f+0xf6>
    2314:	21 5c       	subi	r18, 0xC1	; 193
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	4f 4f       	sbci	r20, 0xFF	; 255
    231a:	5f 4f       	sbci	r21, 0xFF	; 255
    231c:	e0 e0       	ldi	r30, 0x00	; 0
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	20 30       	cpi	r18, 0x00	; 0
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	3a 07       	cpc	r19, r26
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	4a 07       	cpc	r20, r26
    232a:	a0 e4       	ldi	r26, 0x40	; 64
    232c:	5a 07       	cpc	r21, r26
    232e:	10 f0       	brcs	.+4      	; 0x2334 <__pack_f+0x10e>
    2330:	e1 e0       	ldi	r30, 0x01	; 1
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	79 01       	movw	r14, r18
    2336:	8a 01       	movw	r16, r20
    2338:	27 c0       	rjmp	.+78     	; 0x2388 <__pack_f+0x162>
    233a:	60 38       	cpi	r22, 0x80	; 128
    233c:	71 05       	cpc	r23, r1
    233e:	64 f5       	brge	.+88     	; 0x2398 <__pack_f+0x172>
    2340:	fb 01       	movw	r30, r22
    2342:	e1 58       	subi	r30, 0x81	; 129
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	d8 01       	movw	r26, r16
    2348:	c7 01       	movw	r24, r14
    234a:	8f 77       	andi	r24, 0x7F	; 127
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	a0 70       	andi	r26, 0x00	; 0
    2350:	b0 70       	andi	r27, 0x00	; 0
    2352:	80 34       	cpi	r24, 0x40	; 64
    2354:	91 05       	cpc	r25, r1
    2356:	a1 05       	cpc	r26, r1
    2358:	b1 05       	cpc	r27, r1
    235a:	39 f4       	brne	.+14     	; 0x236a <__pack_f+0x144>
    235c:	e7 fe       	sbrs	r14, 7
    235e:	0d c0       	rjmp	.+26     	; 0x237a <__pack_f+0x154>
    2360:	80 e4       	ldi	r24, 0x40	; 64
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e0       	ldi	r26, 0x00	; 0
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <__pack_f+0x14c>
    236a:	8f e3       	ldi	r24, 0x3F	; 63
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e0       	ldi	r26, 0x00	; 0
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e8 0e       	add	r14, r24
    2374:	f9 1e       	adc	r15, r25
    2376:	0a 1f       	adc	r16, r26
    2378:	1b 1f       	adc	r17, r27
    237a:	17 ff       	sbrs	r17, 7
    237c:	05 c0       	rjmp	.+10     	; 0x2388 <__pack_f+0x162>
    237e:	16 95       	lsr	r17
    2380:	07 95       	ror	r16
    2382:	f7 94       	ror	r15
    2384:	e7 94       	ror	r14
    2386:	31 96       	adiw	r30, 0x01	; 1
    2388:	87 e0       	ldi	r24, 0x07	; 7
    238a:	16 95       	lsr	r17
    238c:	07 95       	ror	r16
    238e:	f7 94       	ror	r15
    2390:	e7 94       	ror	r14
    2392:	8a 95       	dec	r24
    2394:	d1 f7       	brne	.-12     	; 0x238a <__pack_f+0x164>
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <__pack_f+0x17c>
    2398:	ee 24       	eor	r14, r14
    239a:	ff 24       	eor	r15, r15
    239c:	87 01       	movw	r16, r14
    239e:	ef ef       	ldi	r30, 0xFF	; 255
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	6e 2f       	mov	r22, r30
    23a4:	67 95       	ror	r22
    23a6:	66 27       	eor	r22, r22
    23a8:	67 95       	ror	r22
    23aa:	90 2f       	mov	r25, r16
    23ac:	9f 77       	andi	r25, 0x7F	; 127
    23ae:	d7 94       	ror	r13
    23b0:	dd 24       	eor	r13, r13
    23b2:	d7 94       	ror	r13
    23b4:	8e 2f       	mov	r24, r30
    23b6:	86 95       	lsr	r24
    23b8:	49 2f       	mov	r20, r25
    23ba:	46 2b       	or	r20, r22
    23bc:	58 2f       	mov	r21, r24
    23be:	5d 29       	or	r21, r13
    23c0:	b7 01       	movw	r22, r14
    23c2:	ca 01       	movw	r24, r20
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	df 90       	pop	r13
    23ce:	08 95       	ret

000023d0 <__unpack_f>:
    23d0:	fc 01       	movw	r30, r24
    23d2:	db 01       	movw	r26, r22
    23d4:	40 81       	ld	r20, Z
    23d6:	51 81       	ldd	r21, Z+1	; 0x01
    23d8:	22 81       	ldd	r18, Z+2	; 0x02
    23da:	62 2f       	mov	r22, r18
    23dc:	6f 77       	andi	r22, 0x7F	; 127
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	22 1f       	adc	r18, r18
    23e2:	22 27       	eor	r18, r18
    23e4:	22 1f       	adc	r18, r18
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	89 2f       	mov	r24, r25
    23ea:	88 0f       	add	r24, r24
    23ec:	82 2b       	or	r24, r18
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	99 1f       	adc	r25, r25
    23f4:	99 27       	eor	r25, r25
    23f6:	99 1f       	adc	r25, r25
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	9c 93       	st	X, r25
    23fc:	11 97       	sbiw	r26, 0x01	; 1
    23fe:	21 15       	cp	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	a9 f5       	brne	.+106    	; 0x246e <__unpack_f+0x9e>
    2404:	41 15       	cp	r20, r1
    2406:	51 05       	cpc	r21, r1
    2408:	61 05       	cpc	r22, r1
    240a:	71 05       	cpc	r23, r1
    240c:	11 f4       	brne	.+4      	; 0x2412 <__unpack_f+0x42>
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	37 c0       	rjmp	.+110    	; 0x2480 <__unpack_f+0xb0>
    2412:	82 e8       	ldi	r24, 0x82	; 130
    2414:	9f ef       	ldi	r25, 0xFF	; 255
    2416:	13 96       	adiw	r26, 0x03	; 3
    2418:	9c 93       	st	X, r25
    241a:	8e 93       	st	-X, r24
    241c:	12 97       	sbiw	r26, 0x02	; 2
    241e:	9a 01       	movw	r18, r20
    2420:	ab 01       	movw	r20, r22
    2422:	67 e0       	ldi	r22, 0x07	; 7
    2424:	22 0f       	add	r18, r18
    2426:	33 1f       	adc	r19, r19
    2428:	44 1f       	adc	r20, r20
    242a:	55 1f       	adc	r21, r21
    242c:	6a 95       	dec	r22
    242e:	d1 f7       	brne	.-12     	; 0x2424 <__unpack_f+0x54>
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	8c 93       	st	X, r24
    2434:	0d c0       	rjmp	.+26     	; 0x2450 <__unpack_f+0x80>
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	44 1f       	adc	r20, r20
    243c:	55 1f       	adc	r21, r21
    243e:	12 96       	adiw	r26, 0x02	; 2
    2440:	8d 91       	ld	r24, X+
    2442:	9c 91       	ld	r25, X
    2444:	13 97       	sbiw	r26, 0x03	; 3
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	13 96       	adiw	r26, 0x03	; 3
    244a:	9c 93       	st	X, r25
    244c:	8e 93       	st	-X, r24
    244e:	12 97       	sbiw	r26, 0x02	; 2
    2450:	20 30       	cpi	r18, 0x00	; 0
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	38 07       	cpc	r19, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	48 07       	cpc	r20, r24
    245a:	80 e4       	ldi	r24, 0x40	; 64
    245c:	58 07       	cpc	r21, r24
    245e:	58 f3       	brcs	.-42     	; 0x2436 <__unpack_f+0x66>
    2460:	14 96       	adiw	r26, 0x04	; 4
    2462:	2d 93       	st	X+, r18
    2464:	3d 93       	st	X+, r19
    2466:	4d 93       	st	X+, r20
    2468:	5c 93       	st	X, r21
    246a:	17 97       	sbiw	r26, 0x07	; 7
    246c:	08 95       	ret
    246e:	2f 3f       	cpi	r18, 0xFF	; 255
    2470:	31 05       	cpc	r19, r1
    2472:	79 f4       	brne	.+30     	; 0x2492 <__unpack_f+0xc2>
    2474:	41 15       	cp	r20, r1
    2476:	51 05       	cpc	r21, r1
    2478:	61 05       	cpc	r22, r1
    247a:	71 05       	cpc	r23, r1
    247c:	19 f4       	brne	.+6      	; 0x2484 <__unpack_f+0xb4>
    247e:	84 e0       	ldi	r24, 0x04	; 4
    2480:	8c 93       	st	X, r24
    2482:	08 95       	ret
    2484:	64 ff       	sbrs	r22, 4
    2486:	03 c0       	rjmp	.+6      	; 0x248e <__unpack_f+0xbe>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8c 93       	st	X, r24
    248c:	12 c0       	rjmp	.+36     	; 0x24b2 <__unpack_f+0xe2>
    248e:	1c 92       	st	X, r1
    2490:	10 c0       	rjmp	.+32     	; 0x24b2 <__unpack_f+0xe2>
    2492:	2f 57       	subi	r18, 0x7F	; 127
    2494:	30 40       	sbci	r19, 0x00	; 0
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	3c 93       	st	X, r19
    249a:	2e 93       	st	-X, r18
    249c:	12 97       	sbiw	r26, 0x02	; 2
    249e:	83 e0       	ldi	r24, 0x03	; 3
    24a0:	8c 93       	st	X, r24
    24a2:	87 e0       	ldi	r24, 0x07	; 7
    24a4:	44 0f       	add	r20, r20
    24a6:	55 1f       	adc	r21, r21
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	8a 95       	dec	r24
    24ae:	d1 f7       	brne	.-12     	; 0x24a4 <__unpack_f+0xd4>
    24b0:	70 64       	ori	r23, 0x40	; 64
    24b2:	14 96       	adiw	r26, 0x04	; 4
    24b4:	4d 93       	st	X+, r20
    24b6:	5d 93       	st	X+, r21
    24b8:	6d 93       	st	X+, r22
    24ba:	7c 93       	st	X, r23
    24bc:	17 97       	sbiw	r26, 0x07	; 7
    24be:	08 95       	ret

000024c0 <__fpcmp_parts_f>:
    24c0:	1f 93       	push	r17
    24c2:	dc 01       	movw	r26, r24
    24c4:	fb 01       	movw	r30, r22
    24c6:	9c 91       	ld	r25, X
    24c8:	92 30       	cpi	r25, 0x02	; 2
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <__fpcmp_parts_f+0xe>
    24cc:	47 c0       	rjmp	.+142    	; 0x255c <__fpcmp_parts_f+0x9c>
    24ce:	80 81       	ld	r24, Z
    24d0:	82 30       	cpi	r24, 0x02	; 2
    24d2:	08 f4       	brcc	.+2      	; 0x24d6 <__fpcmp_parts_f+0x16>
    24d4:	43 c0       	rjmp	.+134    	; 0x255c <__fpcmp_parts_f+0x9c>
    24d6:	94 30       	cpi	r25, 0x04	; 4
    24d8:	51 f4       	brne	.+20     	; 0x24ee <__fpcmp_parts_f+0x2e>
    24da:	11 96       	adiw	r26, 0x01	; 1
    24dc:	1c 91       	ld	r17, X
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	99 f5       	brne	.+102    	; 0x2548 <__fpcmp_parts_f+0x88>
    24e2:	81 81       	ldd	r24, Z+1	; 0x01
    24e4:	68 2f       	mov	r22, r24
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	61 1b       	sub	r22, r17
    24ea:	71 09       	sbc	r23, r1
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <__fpcmp_parts_f+0xac>
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	21 f0       	breq	.+8      	; 0x24fa <__fpcmp_parts_f+0x3a>
    24f2:	92 30       	cpi	r25, 0x02	; 2
    24f4:	31 f4       	brne	.+12     	; 0x2502 <__fpcmp_parts_f+0x42>
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	b9 f1       	breq	.+110    	; 0x2568 <__fpcmp_parts_f+0xa8>
    24fa:	81 81       	ldd	r24, Z+1	; 0x01
    24fc:	88 23       	and	r24, r24
    24fe:	89 f1       	breq	.+98     	; 0x2562 <__fpcmp_parts_f+0xa2>
    2500:	2d c0       	rjmp	.+90     	; 0x255c <__fpcmp_parts_f+0x9c>
    2502:	11 96       	adiw	r26, 0x01	; 1
    2504:	1c 91       	ld	r17, X
    2506:	11 97       	sbiw	r26, 0x01	; 1
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	f1 f0       	breq	.+60     	; 0x2548 <__fpcmp_parts_f+0x88>
    250c:	81 81       	ldd	r24, Z+1	; 0x01
    250e:	18 17       	cp	r17, r24
    2510:	d9 f4       	brne	.+54     	; 0x2548 <__fpcmp_parts_f+0x88>
    2512:	12 96       	adiw	r26, 0x02	; 2
    2514:	2d 91       	ld	r18, X+
    2516:	3c 91       	ld	r19, X
    2518:	13 97       	sbiw	r26, 0x03	; 3
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	82 17       	cp	r24, r18
    2520:	93 07       	cpc	r25, r19
    2522:	94 f0       	brlt	.+36     	; 0x2548 <__fpcmp_parts_f+0x88>
    2524:	28 17       	cp	r18, r24
    2526:	39 07       	cpc	r19, r25
    2528:	bc f0       	brlt	.+46     	; 0x2558 <__fpcmp_parts_f+0x98>
    252a:	14 96       	adiw	r26, 0x04	; 4
    252c:	8d 91       	ld	r24, X+
    252e:	9d 91       	ld	r25, X+
    2530:	0d 90       	ld	r0, X+
    2532:	bc 91       	ld	r27, X
    2534:	a0 2d       	mov	r26, r0
    2536:	24 81       	ldd	r18, Z+4	; 0x04
    2538:	35 81       	ldd	r19, Z+5	; 0x05
    253a:	46 81       	ldd	r20, Z+6	; 0x06
    253c:	57 81       	ldd	r21, Z+7	; 0x07
    253e:	28 17       	cp	r18, r24
    2540:	39 07       	cpc	r19, r25
    2542:	4a 07       	cpc	r20, r26
    2544:	5b 07       	cpc	r21, r27
    2546:	18 f4       	brcc	.+6      	; 0x254e <__fpcmp_parts_f+0x8e>
    2548:	11 23       	and	r17, r17
    254a:	41 f0       	breq	.+16     	; 0x255c <__fpcmp_parts_f+0x9c>
    254c:	0a c0       	rjmp	.+20     	; 0x2562 <__fpcmp_parts_f+0xa2>
    254e:	82 17       	cp	r24, r18
    2550:	93 07       	cpc	r25, r19
    2552:	a4 07       	cpc	r26, r20
    2554:	b5 07       	cpc	r27, r21
    2556:	40 f4       	brcc	.+16     	; 0x2568 <__fpcmp_parts_f+0xa8>
    2558:	11 23       	and	r17, r17
    255a:	19 f0       	breq	.+6      	; 0x2562 <__fpcmp_parts_f+0xa2>
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	05 c0       	rjmp	.+10     	; 0x256c <__fpcmp_parts_f+0xac>
    2562:	6f ef       	ldi	r22, 0xFF	; 255
    2564:	7f ef       	ldi	r23, 0xFF	; 255
    2566:	02 c0       	rjmp	.+4      	; 0x256c <__fpcmp_parts_f+0xac>
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	cb 01       	movw	r24, r22
    256e:	1f 91       	pop	r17
    2570:	08 95       	ret

00002572 <__mulsi3>:
    2572:	62 9f       	mul	r22, r18
    2574:	d0 01       	movw	r26, r0
    2576:	73 9f       	mul	r23, r19
    2578:	f0 01       	movw	r30, r0
    257a:	82 9f       	mul	r24, r18
    257c:	e0 0d       	add	r30, r0
    257e:	f1 1d       	adc	r31, r1
    2580:	64 9f       	mul	r22, r20
    2582:	e0 0d       	add	r30, r0
    2584:	f1 1d       	adc	r31, r1
    2586:	92 9f       	mul	r25, r18
    2588:	f0 0d       	add	r31, r0
    258a:	83 9f       	mul	r24, r19
    258c:	f0 0d       	add	r31, r0
    258e:	74 9f       	mul	r23, r20
    2590:	f0 0d       	add	r31, r0
    2592:	65 9f       	mul	r22, r21
    2594:	f0 0d       	add	r31, r0
    2596:	99 27       	eor	r25, r25
    2598:	72 9f       	mul	r23, r18
    259a:	b0 0d       	add	r27, r0
    259c:	e1 1d       	adc	r30, r1
    259e:	f9 1f       	adc	r31, r25
    25a0:	63 9f       	mul	r22, r19
    25a2:	b0 0d       	add	r27, r0
    25a4:	e1 1d       	adc	r30, r1
    25a6:	f9 1f       	adc	r31, r25
    25a8:	bd 01       	movw	r22, r26
    25aa:	cf 01       	movw	r24, r30
    25ac:	11 24       	eor	r1, r1
    25ae:	08 95       	ret

000025b0 <__udivmodhi4>:
    25b0:	aa 1b       	sub	r26, r26
    25b2:	bb 1b       	sub	r27, r27
    25b4:	51 e1       	ldi	r21, 0x11	; 17
    25b6:	07 c0       	rjmp	.+14     	; 0x25c6 <__udivmodhi4_ep>

000025b8 <__udivmodhi4_loop>:
    25b8:	aa 1f       	adc	r26, r26
    25ba:	bb 1f       	adc	r27, r27
    25bc:	a6 17       	cp	r26, r22
    25be:	b7 07       	cpc	r27, r23
    25c0:	10 f0       	brcs	.+4      	; 0x25c6 <__udivmodhi4_ep>
    25c2:	a6 1b       	sub	r26, r22
    25c4:	b7 0b       	sbc	r27, r23

000025c6 <__udivmodhi4_ep>:
    25c6:	88 1f       	adc	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	5a 95       	dec	r21
    25cc:	a9 f7       	brne	.-22     	; 0x25b8 <__udivmodhi4_loop>
    25ce:	80 95       	com	r24
    25d0:	90 95       	com	r25
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	08 95       	ret

000025d8 <__divmodhi4>:
    25d8:	97 fb       	bst	r25, 7
    25da:	09 2e       	mov	r0, r25
    25dc:	07 26       	eor	r0, r23
    25de:	0a d0       	rcall	.+20     	; 0x25f4 <__divmodhi4_neg1>
    25e0:	77 fd       	sbrc	r23, 7
    25e2:	04 d0       	rcall	.+8      	; 0x25ec <__divmodhi4_neg2>
    25e4:	e5 df       	rcall	.-54     	; 0x25b0 <__udivmodhi4>
    25e6:	06 d0       	rcall	.+12     	; 0x25f4 <__divmodhi4_neg1>
    25e8:	00 20       	and	r0, r0
    25ea:	1a f4       	brpl	.+6      	; 0x25f2 <__divmodhi4_exit>

000025ec <__divmodhi4_neg2>:
    25ec:	70 95       	com	r23
    25ee:	61 95       	neg	r22
    25f0:	7f 4f       	sbci	r23, 0xFF	; 255

000025f2 <__divmodhi4_exit>:
    25f2:	08 95       	ret

000025f4 <__divmodhi4_neg1>:
    25f4:	f6 f7       	brtc	.-4      	; 0x25f2 <__divmodhi4_exit>
    25f6:	90 95       	com	r25
    25f8:	81 95       	neg	r24
    25fa:	9f 4f       	sbci	r25, 0xFF	; 255
    25fc:	08 95       	ret

000025fe <__udivmodsi4>:
    25fe:	a1 e2       	ldi	r26, 0x21	; 33
    2600:	1a 2e       	mov	r1, r26
    2602:	aa 1b       	sub	r26, r26
    2604:	bb 1b       	sub	r27, r27
    2606:	fd 01       	movw	r30, r26
    2608:	0d c0       	rjmp	.+26     	; 0x2624 <__udivmodsi4_ep>

0000260a <__udivmodsi4_loop>:
    260a:	aa 1f       	adc	r26, r26
    260c:	bb 1f       	adc	r27, r27
    260e:	ee 1f       	adc	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	a2 17       	cp	r26, r18
    2614:	b3 07       	cpc	r27, r19
    2616:	e4 07       	cpc	r30, r20
    2618:	f5 07       	cpc	r31, r21
    261a:	20 f0       	brcs	.+8      	; 0x2624 <__udivmodsi4_ep>
    261c:	a2 1b       	sub	r26, r18
    261e:	b3 0b       	sbc	r27, r19
    2620:	e4 0b       	sbc	r30, r20
    2622:	f5 0b       	sbc	r31, r21

00002624 <__udivmodsi4_ep>:
    2624:	66 1f       	adc	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	1a 94       	dec	r1
    262e:	69 f7       	brne	.-38     	; 0x260a <__udivmodsi4_loop>
    2630:	60 95       	com	r22
    2632:	70 95       	com	r23
    2634:	80 95       	com	r24
    2636:	90 95       	com	r25
    2638:	9b 01       	movw	r18, r22
    263a:	ac 01       	movw	r20, r24
    263c:	bd 01       	movw	r22, r26
    263e:	cf 01       	movw	r24, r30
    2640:	08 95       	ret

00002642 <__prologue_saves__>:
    2642:	2f 92       	push	r2
    2644:	3f 92       	push	r3
    2646:	4f 92       	push	r4
    2648:	5f 92       	push	r5
    264a:	6f 92       	push	r6
    264c:	7f 92       	push	r7
    264e:	8f 92       	push	r8
    2650:	9f 92       	push	r9
    2652:	af 92       	push	r10
    2654:	bf 92       	push	r11
    2656:	cf 92       	push	r12
    2658:	df 92       	push	r13
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	ca 1b       	sub	r28, r26
    266c:	db 0b       	sbc	r29, r27
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	09 94       	ijmp

0000267a <__epilogue_restores__>:
    267a:	2a 88       	ldd	r2, Y+18	; 0x12
    267c:	39 88       	ldd	r3, Y+17	; 0x11
    267e:	48 88       	ldd	r4, Y+16	; 0x10
    2680:	5f 84       	ldd	r5, Y+15	; 0x0f
    2682:	6e 84       	ldd	r6, Y+14	; 0x0e
    2684:	7d 84       	ldd	r7, Y+13	; 0x0d
    2686:	8c 84       	ldd	r8, Y+12	; 0x0c
    2688:	9b 84       	ldd	r9, Y+11	; 0x0b
    268a:	aa 84       	ldd	r10, Y+10	; 0x0a
    268c:	b9 84       	ldd	r11, Y+9	; 0x09
    268e:	c8 84       	ldd	r12, Y+8	; 0x08
    2690:	df 80       	ldd	r13, Y+7	; 0x07
    2692:	ee 80       	ldd	r14, Y+6	; 0x06
    2694:	fd 80       	ldd	r15, Y+5	; 0x05
    2696:	0c 81       	ldd	r16, Y+4	; 0x04
    2698:	1b 81       	ldd	r17, Y+3	; 0x03
    269a:	aa 81       	ldd	r26, Y+2	; 0x02
    269c:	b9 81       	ldd	r27, Y+1	; 0x01
    269e:	ce 0f       	add	r28, r30
    26a0:	d1 1d       	adc	r29, r1
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	ed 01       	movw	r28, r26
    26ae:	08 95       	ret

000026b0 <sprintf>:
    26b0:	ae e0       	ldi	r26, 0x0E	; 14
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ee e5       	ldi	r30, 0x5E	; 94
    26b6:	f3 e1       	ldi	r31, 0x13	; 19
    26b8:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__prologue_saves__+0x1c>
    26bc:	0d 89       	ldd	r16, Y+21	; 0x15
    26be:	1e 89       	ldd	r17, Y+22	; 0x16
    26c0:	86 e0       	ldi	r24, 0x06	; 6
    26c2:	8c 83       	std	Y+4, r24	; 0x04
    26c4:	1a 83       	std	Y+2, r17	; 0x02
    26c6:	09 83       	std	Y+1, r16	; 0x01
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	9f e7       	ldi	r25, 0x7F	; 127
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	9e 01       	movw	r18, r28
    26d2:	27 5e       	subi	r18, 0xE7	; 231
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	6f 89       	ldd	r22, Y+23	; 0x17
    26dc:	78 8d       	ldd	r23, Y+24	; 0x18
    26de:	a9 01       	movw	r20, r18
    26e0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <vfprintf>
    26e4:	2f 81       	ldd	r18, Y+7	; 0x07
    26e6:	38 85       	ldd	r19, Y+8	; 0x08
    26e8:	02 0f       	add	r16, r18
    26ea:	13 1f       	adc	r17, r19
    26ec:	f8 01       	movw	r30, r16
    26ee:	10 82       	st	Z, r1
    26f0:	2e 96       	adiw	r28, 0x0e	; 14
    26f2:	e4 e0       	ldi	r30, 0x04	; 4
    26f4:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__epilogue_restores__+0x1c>

000026f8 <vfprintf>:
    26f8:	ab e0       	ldi	r26, 0x0B	; 11
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e2 e8       	ldi	r30, 0x82	; 130
    26fe:	f3 e1       	ldi	r31, 0x13	; 19
    2700:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__>
    2704:	3c 01       	movw	r6, r24
    2706:	2b 01       	movw	r4, r22
    2708:	5a 01       	movw	r10, r20
    270a:	fc 01       	movw	r30, r24
    270c:	17 82       	std	Z+7, r1	; 0x07
    270e:	16 82       	std	Z+6, r1	; 0x06
    2710:	83 81       	ldd	r24, Z+3	; 0x03
    2712:	81 fd       	sbrc	r24, 1
    2714:	03 c0       	rjmp	.+6      	; 0x271c <vfprintf+0x24>
    2716:	6f ef       	ldi	r22, 0xFF	; 255
    2718:	7f ef       	ldi	r23, 0xFF	; 255
    271a:	c6 c1       	rjmp	.+908    	; 0x2aa8 <vfprintf+0x3b0>
    271c:	9a e0       	ldi	r25, 0x0A	; 10
    271e:	89 2e       	mov	r8, r25
    2720:	1e 01       	movw	r2, r28
    2722:	08 94       	sec
    2724:	21 1c       	adc	r2, r1
    2726:	31 1c       	adc	r3, r1
    2728:	f3 01       	movw	r30, r6
    272a:	23 81       	ldd	r18, Z+3	; 0x03
    272c:	f2 01       	movw	r30, r4
    272e:	23 fd       	sbrc	r18, 3
    2730:	85 91       	lpm	r24, Z+
    2732:	23 ff       	sbrs	r18, 3
    2734:	81 91       	ld	r24, Z+
    2736:	2f 01       	movw	r4, r30
    2738:	88 23       	and	r24, r24
    273a:	09 f4       	brne	.+2      	; 0x273e <vfprintf+0x46>
    273c:	b2 c1       	rjmp	.+868    	; 0x2aa2 <vfprintf+0x3aa>
    273e:	85 32       	cpi	r24, 0x25	; 37
    2740:	39 f4       	brne	.+14     	; 0x2750 <vfprintf+0x58>
    2742:	23 fd       	sbrc	r18, 3
    2744:	85 91       	lpm	r24, Z+
    2746:	23 ff       	sbrs	r18, 3
    2748:	81 91       	ld	r24, Z+
    274a:	2f 01       	movw	r4, r30
    274c:	85 32       	cpi	r24, 0x25	; 37
    274e:	29 f4       	brne	.+10     	; 0x275a <vfprintf+0x62>
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	b3 01       	movw	r22, r6
    2754:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2758:	e7 cf       	rjmp	.-50     	; 0x2728 <vfprintf+0x30>
    275a:	98 2f       	mov	r25, r24
    275c:	ff 24       	eor	r15, r15
    275e:	ee 24       	eor	r14, r14
    2760:	99 24       	eor	r9, r9
    2762:	ff e1       	ldi	r31, 0x1F	; 31
    2764:	ff 15       	cp	r31, r15
    2766:	d0 f0       	brcs	.+52     	; 0x279c <vfprintf+0xa4>
    2768:	9b 32       	cpi	r25, 0x2B	; 43
    276a:	69 f0       	breq	.+26     	; 0x2786 <vfprintf+0x8e>
    276c:	9c 32       	cpi	r25, 0x2C	; 44
    276e:	28 f4       	brcc	.+10     	; 0x277a <vfprintf+0x82>
    2770:	90 32       	cpi	r25, 0x20	; 32
    2772:	59 f0       	breq	.+22     	; 0x278a <vfprintf+0x92>
    2774:	93 32       	cpi	r25, 0x23	; 35
    2776:	91 f4       	brne	.+36     	; 0x279c <vfprintf+0xa4>
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <vfprintf+0x9e>
    277a:	9d 32       	cpi	r25, 0x2D	; 45
    277c:	49 f0       	breq	.+18     	; 0x2790 <vfprintf+0x98>
    277e:	90 33       	cpi	r25, 0x30	; 48
    2780:	69 f4       	brne	.+26     	; 0x279c <vfprintf+0xa4>
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	24 c0       	rjmp	.+72     	; 0x27ce <vfprintf+0xd6>
    2786:	52 e0       	ldi	r21, 0x02	; 2
    2788:	f5 2a       	or	r15, r21
    278a:	84 e0       	ldi	r24, 0x04	; 4
    278c:	f8 2a       	or	r15, r24
    278e:	28 c0       	rjmp	.+80     	; 0x27e0 <vfprintf+0xe8>
    2790:	98 e0       	ldi	r25, 0x08	; 8
    2792:	f9 2a       	or	r15, r25
    2794:	25 c0       	rjmp	.+74     	; 0x27e0 <vfprintf+0xe8>
    2796:	e0 e1       	ldi	r30, 0x10	; 16
    2798:	fe 2a       	or	r15, r30
    279a:	22 c0       	rjmp	.+68     	; 0x27e0 <vfprintf+0xe8>
    279c:	f7 fc       	sbrc	r15, 7
    279e:	29 c0       	rjmp	.+82     	; 0x27f2 <vfprintf+0xfa>
    27a0:	89 2f       	mov	r24, r25
    27a2:	80 53       	subi	r24, 0x30	; 48
    27a4:	8a 30       	cpi	r24, 0x0A	; 10
    27a6:	70 f4       	brcc	.+28     	; 0x27c4 <vfprintf+0xcc>
    27a8:	f6 fe       	sbrs	r15, 6
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <vfprintf+0xbe>
    27ac:	98 9c       	mul	r9, r8
    27ae:	90 2c       	mov	r9, r0
    27b0:	11 24       	eor	r1, r1
    27b2:	98 0e       	add	r9, r24
    27b4:	15 c0       	rjmp	.+42     	; 0x27e0 <vfprintf+0xe8>
    27b6:	e8 9c       	mul	r14, r8
    27b8:	e0 2c       	mov	r14, r0
    27ba:	11 24       	eor	r1, r1
    27bc:	e8 0e       	add	r14, r24
    27be:	f0 e2       	ldi	r31, 0x20	; 32
    27c0:	ff 2a       	or	r15, r31
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <vfprintf+0xe8>
    27c4:	9e 32       	cpi	r25, 0x2E	; 46
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <vfprintf+0xda>
    27c8:	f6 fc       	sbrc	r15, 6
    27ca:	6b c1       	rjmp	.+726    	; 0x2aa2 <vfprintf+0x3aa>
    27cc:	40 e4       	ldi	r20, 0x40	; 64
    27ce:	f4 2a       	or	r15, r20
    27d0:	07 c0       	rjmp	.+14     	; 0x27e0 <vfprintf+0xe8>
    27d2:	9c 36       	cpi	r25, 0x6C	; 108
    27d4:	19 f4       	brne	.+6      	; 0x27dc <vfprintf+0xe4>
    27d6:	50 e8       	ldi	r21, 0x80	; 128
    27d8:	f5 2a       	or	r15, r21
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <vfprintf+0xe8>
    27dc:	98 36       	cpi	r25, 0x68	; 104
    27de:	49 f4       	brne	.+18     	; 0x27f2 <vfprintf+0xfa>
    27e0:	f2 01       	movw	r30, r4
    27e2:	23 fd       	sbrc	r18, 3
    27e4:	95 91       	lpm	r25, Z+
    27e6:	23 ff       	sbrs	r18, 3
    27e8:	91 91       	ld	r25, Z+
    27ea:	2f 01       	movw	r4, r30
    27ec:	99 23       	and	r25, r25
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <vfprintf+0xfa>
    27f0:	b8 cf       	rjmp	.-144    	; 0x2762 <vfprintf+0x6a>
    27f2:	89 2f       	mov	r24, r25
    27f4:	85 54       	subi	r24, 0x45	; 69
    27f6:	83 30       	cpi	r24, 0x03	; 3
    27f8:	18 f0       	brcs	.+6      	; 0x2800 <vfprintf+0x108>
    27fa:	80 52       	subi	r24, 0x20	; 32
    27fc:	83 30       	cpi	r24, 0x03	; 3
    27fe:	38 f4       	brcc	.+14     	; 0x280e <vfprintf+0x116>
    2800:	44 e0       	ldi	r20, 0x04	; 4
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	a4 0e       	add	r10, r20
    2806:	b5 1e       	adc	r11, r21
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	59 83       	std	Y+1, r21	; 0x01
    280c:	0f c0       	rjmp	.+30     	; 0x282c <vfprintf+0x134>
    280e:	93 36       	cpi	r25, 0x63	; 99
    2810:	31 f0       	breq	.+12     	; 0x281e <vfprintf+0x126>
    2812:	93 37       	cpi	r25, 0x73	; 115
    2814:	79 f0       	breq	.+30     	; 0x2834 <vfprintf+0x13c>
    2816:	93 35       	cpi	r25, 0x53	; 83
    2818:	09 f0       	breq	.+2      	; 0x281c <vfprintf+0x124>
    281a:	56 c0       	rjmp	.+172    	; 0x28c8 <vfprintf+0x1d0>
    281c:	20 c0       	rjmp	.+64     	; 0x285e <vfprintf+0x166>
    281e:	f5 01       	movw	r30, r10
    2820:	80 81       	ld	r24, Z
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	42 e0       	ldi	r20, 0x02	; 2
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	a4 0e       	add	r10, r20
    282a:	b5 1e       	adc	r11, r21
    282c:	61 01       	movw	r12, r2
    282e:	01 e0       	ldi	r16, 0x01	; 1
    2830:	10 e0       	ldi	r17, 0x00	; 0
    2832:	12 c0       	rjmp	.+36     	; 0x2858 <vfprintf+0x160>
    2834:	f5 01       	movw	r30, r10
    2836:	c0 80       	ld	r12, Z
    2838:	d1 80       	ldd	r13, Z+1	; 0x01
    283a:	f6 fc       	sbrc	r15, 6
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <vfprintf+0x14c>
    283e:	6f ef       	ldi	r22, 0xFF	; 255
    2840:	7f ef       	ldi	r23, 0xFF	; 255
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <vfprintf+0x150>
    2844:	69 2d       	mov	r22, r9
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	42 e0       	ldi	r20, 0x02	; 2
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	a4 0e       	add	r10, r20
    284e:	b5 1e       	adc	r11, r21
    2850:	c6 01       	movw	r24, r12
    2852:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <strnlen>
    2856:	8c 01       	movw	r16, r24
    2858:	5f e7       	ldi	r21, 0x7F	; 127
    285a:	f5 22       	and	r15, r21
    285c:	14 c0       	rjmp	.+40     	; 0x2886 <vfprintf+0x18e>
    285e:	f5 01       	movw	r30, r10
    2860:	c0 80       	ld	r12, Z
    2862:	d1 80       	ldd	r13, Z+1	; 0x01
    2864:	f6 fc       	sbrc	r15, 6
    2866:	03 c0       	rjmp	.+6      	; 0x286e <vfprintf+0x176>
    2868:	6f ef       	ldi	r22, 0xFF	; 255
    286a:	7f ef       	ldi	r23, 0xFF	; 255
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <vfprintf+0x17a>
    286e:	69 2d       	mov	r22, r9
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	42 e0       	ldi	r20, 0x02	; 2
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	a4 0e       	add	r10, r20
    2878:	b5 1e       	adc	r11, r21
    287a:	c6 01       	movw	r24, r12
    287c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <strnlen_P>
    2880:	8c 01       	movw	r16, r24
    2882:	50 e8       	ldi	r21, 0x80	; 128
    2884:	f5 2a       	or	r15, r21
    2886:	f3 fe       	sbrs	r15, 3
    2888:	07 c0       	rjmp	.+14     	; 0x2898 <vfprintf+0x1a0>
    288a:	1a c0       	rjmp	.+52     	; 0x28c0 <vfprintf+0x1c8>
    288c:	80 e2       	ldi	r24, 0x20	; 32
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	b3 01       	movw	r22, r6
    2892:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2896:	ea 94       	dec	r14
    2898:	8e 2d       	mov	r24, r14
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	08 17       	cp	r16, r24
    289e:	19 07       	cpc	r17, r25
    28a0:	a8 f3       	brcs	.-22     	; 0x288c <vfprintf+0x194>
    28a2:	0e c0       	rjmp	.+28     	; 0x28c0 <vfprintf+0x1c8>
    28a4:	f6 01       	movw	r30, r12
    28a6:	f7 fc       	sbrc	r15, 7
    28a8:	85 91       	lpm	r24, Z+
    28aa:	f7 fe       	sbrs	r15, 7
    28ac:	81 91       	ld	r24, Z+
    28ae:	6f 01       	movw	r12, r30
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	b3 01       	movw	r22, r6
    28b4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    28b8:	e1 10       	cpse	r14, r1
    28ba:	ea 94       	dec	r14
    28bc:	01 50       	subi	r16, 0x01	; 1
    28be:	10 40       	sbci	r17, 0x00	; 0
    28c0:	01 15       	cp	r16, r1
    28c2:	11 05       	cpc	r17, r1
    28c4:	79 f7       	brne	.-34     	; 0x28a4 <vfprintf+0x1ac>
    28c6:	ea c0       	rjmp	.+468    	; 0x2a9c <vfprintf+0x3a4>
    28c8:	94 36       	cpi	r25, 0x64	; 100
    28ca:	11 f0       	breq	.+4      	; 0x28d0 <vfprintf+0x1d8>
    28cc:	99 36       	cpi	r25, 0x69	; 105
    28ce:	69 f5       	brne	.+90     	; 0x292a <vfprintf+0x232>
    28d0:	f7 fe       	sbrs	r15, 7
    28d2:	08 c0       	rjmp	.+16     	; 0x28e4 <vfprintf+0x1ec>
    28d4:	f5 01       	movw	r30, r10
    28d6:	20 81       	ld	r18, Z
    28d8:	31 81       	ldd	r19, Z+1	; 0x01
    28da:	42 81       	ldd	r20, Z+2	; 0x02
    28dc:	53 81       	ldd	r21, Z+3	; 0x03
    28de:	84 e0       	ldi	r24, 0x04	; 4
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0a c0       	rjmp	.+20     	; 0x28f8 <vfprintf+0x200>
    28e4:	f5 01       	movw	r30, r10
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	9c 01       	movw	r18, r24
    28ec:	44 27       	eor	r20, r20
    28ee:	37 fd       	sbrc	r19, 7
    28f0:	40 95       	com	r20
    28f2:	54 2f       	mov	r21, r20
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a8 0e       	add	r10, r24
    28fa:	b9 1e       	adc	r11, r25
    28fc:	9f e6       	ldi	r25, 0x6F	; 111
    28fe:	f9 22       	and	r15, r25
    2900:	57 ff       	sbrs	r21, 7
    2902:	09 c0       	rjmp	.+18     	; 0x2916 <vfprintf+0x21e>
    2904:	50 95       	com	r21
    2906:	40 95       	com	r20
    2908:	30 95       	com	r19
    290a:	21 95       	neg	r18
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	4f 4f       	sbci	r20, 0xFF	; 255
    2910:	5f 4f       	sbci	r21, 0xFF	; 255
    2912:	e0 e8       	ldi	r30, 0x80	; 128
    2914:	fe 2a       	or	r15, r30
    2916:	ca 01       	movw	r24, r20
    2918:	b9 01       	movw	r22, r18
    291a:	a1 01       	movw	r20, r2
    291c:	2a e0       	ldi	r18, 0x0A	; 10
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__ultoa_invert>
    2924:	d8 2e       	mov	r13, r24
    2926:	d2 18       	sub	r13, r2
    2928:	40 c0       	rjmp	.+128    	; 0x29aa <vfprintf+0x2b2>
    292a:	95 37       	cpi	r25, 0x75	; 117
    292c:	29 f4       	brne	.+10     	; 0x2938 <vfprintf+0x240>
    292e:	1f 2d       	mov	r17, r15
    2930:	1f 7e       	andi	r17, 0xEF	; 239
    2932:	2a e0       	ldi	r18, 0x0A	; 10
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	1d c0       	rjmp	.+58     	; 0x2972 <vfprintf+0x27a>
    2938:	1f 2d       	mov	r17, r15
    293a:	19 7f       	andi	r17, 0xF9	; 249
    293c:	9f 36       	cpi	r25, 0x6F	; 111
    293e:	61 f0       	breq	.+24     	; 0x2958 <vfprintf+0x260>
    2940:	90 37       	cpi	r25, 0x70	; 112
    2942:	20 f4       	brcc	.+8      	; 0x294c <vfprintf+0x254>
    2944:	98 35       	cpi	r25, 0x58	; 88
    2946:	09 f0       	breq	.+2      	; 0x294a <vfprintf+0x252>
    2948:	ac c0       	rjmp	.+344    	; 0x2aa2 <vfprintf+0x3aa>
    294a:	0f c0       	rjmp	.+30     	; 0x296a <vfprintf+0x272>
    294c:	90 37       	cpi	r25, 0x70	; 112
    294e:	39 f0       	breq	.+14     	; 0x295e <vfprintf+0x266>
    2950:	98 37       	cpi	r25, 0x78	; 120
    2952:	09 f0       	breq	.+2      	; 0x2956 <vfprintf+0x25e>
    2954:	a6 c0       	rjmp	.+332    	; 0x2aa2 <vfprintf+0x3aa>
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <vfprintf+0x268>
    2958:	28 e0       	ldi	r18, 0x08	; 8
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	0a c0       	rjmp	.+20     	; 0x2972 <vfprintf+0x27a>
    295e:	10 61       	ori	r17, 0x10	; 16
    2960:	14 fd       	sbrc	r17, 4
    2962:	14 60       	ori	r17, 0x04	; 4
    2964:	20 e1       	ldi	r18, 0x10	; 16
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	04 c0       	rjmp	.+8      	; 0x2972 <vfprintf+0x27a>
    296a:	14 fd       	sbrc	r17, 4
    296c:	16 60       	ori	r17, 0x06	; 6
    296e:	20 e1       	ldi	r18, 0x10	; 16
    2970:	32 e0       	ldi	r19, 0x02	; 2
    2972:	17 ff       	sbrs	r17, 7
    2974:	08 c0       	rjmp	.+16     	; 0x2986 <vfprintf+0x28e>
    2976:	f5 01       	movw	r30, r10
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	44 e0       	ldi	r20, 0x04	; 4
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	08 c0       	rjmp	.+16     	; 0x2996 <vfprintf+0x29e>
    2986:	f5 01       	movw	r30, r10
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	bc 01       	movw	r22, r24
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	42 e0       	ldi	r20, 0x02	; 2
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	a4 0e       	add	r10, r20
    2998:	b5 1e       	adc	r11, r21
    299a:	a1 01       	movw	r20, r2
    299c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__ultoa_invert>
    29a0:	d8 2e       	mov	r13, r24
    29a2:	d2 18       	sub	r13, r2
    29a4:	8f e7       	ldi	r24, 0x7F	; 127
    29a6:	f8 2e       	mov	r15, r24
    29a8:	f1 22       	and	r15, r17
    29aa:	f6 fe       	sbrs	r15, 6
    29ac:	0b c0       	rjmp	.+22     	; 0x29c4 <vfprintf+0x2cc>
    29ae:	5e ef       	ldi	r21, 0xFE	; 254
    29b0:	f5 22       	and	r15, r21
    29b2:	d9 14       	cp	r13, r9
    29b4:	38 f4       	brcc	.+14     	; 0x29c4 <vfprintf+0x2cc>
    29b6:	f4 fe       	sbrs	r15, 4
    29b8:	07 c0       	rjmp	.+14     	; 0x29c8 <vfprintf+0x2d0>
    29ba:	f2 fc       	sbrc	r15, 2
    29bc:	05 c0       	rjmp	.+10     	; 0x29c8 <vfprintf+0x2d0>
    29be:	8f ee       	ldi	r24, 0xEF	; 239
    29c0:	f8 22       	and	r15, r24
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <vfprintf+0x2d0>
    29c4:	1d 2d       	mov	r17, r13
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <vfprintf+0x2d2>
    29c8:	19 2d       	mov	r17, r9
    29ca:	f4 fe       	sbrs	r15, 4
    29cc:	0d c0       	rjmp	.+26     	; 0x29e8 <vfprintf+0x2f0>
    29ce:	fe 01       	movw	r30, r28
    29d0:	ed 0d       	add	r30, r13
    29d2:	f1 1d       	adc	r31, r1
    29d4:	80 81       	ld	r24, Z
    29d6:	80 33       	cpi	r24, 0x30	; 48
    29d8:	19 f4       	brne	.+6      	; 0x29e0 <vfprintf+0x2e8>
    29da:	99 ee       	ldi	r25, 0xE9	; 233
    29dc:	f9 22       	and	r15, r25
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <vfprintf+0x2f8>
    29e0:	1f 5f       	subi	r17, 0xFF	; 255
    29e2:	f2 fe       	sbrs	r15, 2
    29e4:	05 c0       	rjmp	.+10     	; 0x29f0 <vfprintf+0x2f8>
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <vfprintf+0x2f6>
    29e8:	8f 2d       	mov	r24, r15
    29ea:	86 78       	andi	r24, 0x86	; 134
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <vfprintf+0x2f8>
    29ee:	1f 5f       	subi	r17, 0xFF	; 255
    29f0:	0f 2d       	mov	r16, r15
    29f2:	f3 fc       	sbrc	r15, 3
    29f4:	14 c0       	rjmp	.+40     	; 0x2a1e <vfprintf+0x326>
    29f6:	f0 fe       	sbrs	r15, 0
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <vfprintf+0x320>
    29fa:	1e 15       	cp	r17, r14
    29fc:	10 f0       	brcs	.+4      	; 0x2a02 <vfprintf+0x30a>
    29fe:	9d 2c       	mov	r9, r13
    2a00:	0b c0       	rjmp	.+22     	; 0x2a18 <vfprintf+0x320>
    2a02:	9d 2c       	mov	r9, r13
    2a04:	9e 0c       	add	r9, r14
    2a06:	91 1a       	sub	r9, r17
    2a08:	1e 2d       	mov	r17, r14
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <vfprintf+0x320>
    2a0c:	80 e2       	ldi	r24, 0x20	; 32
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	b3 01       	movw	r22, r6
    2a12:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a16:	1f 5f       	subi	r17, 0xFF	; 255
    2a18:	1e 15       	cp	r17, r14
    2a1a:	c0 f3       	brcs	.-16     	; 0x2a0c <vfprintf+0x314>
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <vfprintf+0x32e>
    2a1e:	1e 15       	cp	r17, r14
    2a20:	10 f4       	brcc	.+4      	; 0x2a26 <vfprintf+0x32e>
    2a22:	e1 1a       	sub	r14, r17
    2a24:	01 c0       	rjmp	.+2      	; 0x2a28 <vfprintf+0x330>
    2a26:	ee 24       	eor	r14, r14
    2a28:	04 ff       	sbrs	r16, 4
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <vfprintf+0x352>
    2a2c:	80 e3       	ldi	r24, 0x30	; 48
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	b3 01       	movw	r22, r6
    2a32:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a36:	02 ff       	sbrs	r16, 2
    2a38:	1d c0       	rjmp	.+58     	; 0x2a74 <vfprintf+0x37c>
    2a3a:	01 fd       	sbrc	r16, 1
    2a3c:	03 c0       	rjmp	.+6      	; 0x2a44 <vfprintf+0x34c>
    2a3e:	88 e7       	ldi	r24, 0x78	; 120
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e c0       	rjmp	.+28     	; 0x2a60 <vfprintf+0x368>
    2a44:	88 e5       	ldi	r24, 0x58	; 88
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	0b c0       	rjmp	.+22     	; 0x2a60 <vfprintf+0x368>
    2a4a:	80 2f       	mov	r24, r16
    2a4c:	86 78       	andi	r24, 0x86	; 134
    2a4e:	91 f0       	breq	.+36     	; 0x2a74 <vfprintf+0x37c>
    2a50:	01 ff       	sbrs	r16, 1
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <vfprintf+0x360>
    2a54:	8b e2       	ldi	r24, 0x2B	; 43
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <vfprintf+0x362>
    2a58:	80 e2       	ldi	r24, 0x20	; 32
    2a5a:	f7 fc       	sbrc	r15, 7
    2a5c:	8d e2       	ldi	r24, 0x2D	; 45
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	b3 01       	movw	r22, r6
    2a62:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a66:	06 c0       	rjmp	.+12     	; 0x2a74 <vfprintf+0x37c>
    2a68:	80 e3       	ldi	r24, 0x30	; 48
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	b3 01       	movw	r22, r6
    2a6e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a72:	9a 94       	dec	r9
    2a74:	d9 14       	cp	r13, r9
    2a76:	c0 f3       	brcs	.-16     	; 0x2a68 <vfprintf+0x370>
    2a78:	da 94       	dec	r13
    2a7a:	f1 01       	movw	r30, r2
    2a7c:	ed 0d       	add	r30, r13
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	80 81       	ld	r24, Z
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	b3 01       	movw	r22, r6
    2a86:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a8a:	dd 20       	and	r13, r13
    2a8c:	a9 f7       	brne	.-22     	; 0x2a78 <vfprintf+0x380>
    2a8e:	06 c0       	rjmp	.+12     	; 0x2a9c <vfprintf+0x3a4>
    2a90:	80 e2       	ldi	r24, 0x20	; 32
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	b3 01       	movw	r22, r6
    2a96:	0e 94 6f 15 	call	0x2ade	; 0x2ade <fputc>
    2a9a:	ea 94       	dec	r14
    2a9c:	ee 20       	and	r14, r14
    2a9e:	c1 f7       	brne	.-16     	; 0x2a90 <vfprintf+0x398>
    2aa0:	43 ce       	rjmp	.-890    	; 0x2728 <vfprintf+0x30>
    2aa2:	f3 01       	movw	r30, r6
    2aa4:	66 81       	ldd	r22, Z+6	; 0x06
    2aa6:	77 81       	ldd	r23, Z+7	; 0x07
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	2b 96       	adiw	r28, 0x0b	; 11
    2aac:	e2 e1       	ldi	r30, 0x12	; 18
    2aae:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__>

00002ab2 <strnlen_P>:
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	05 90       	lpm	r0, Z+
    2ab6:	61 50       	subi	r22, 0x01	; 1
    2ab8:	70 40       	sbci	r23, 0x00	; 0
    2aba:	01 10       	cpse	r0, r1
    2abc:	d8 f7       	brcc	.-10     	; 0x2ab4 <strnlen_P+0x2>
    2abe:	80 95       	com	r24
    2ac0:	90 95       	com	r25
    2ac2:	8e 0f       	add	r24, r30
    2ac4:	9f 1f       	adc	r25, r31
    2ac6:	08 95       	ret

00002ac8 <strnlen>:
    2ac8:	fc 01       	movw	r30, r24
    2aca:	61 50       	subi	r22, 0x01	; 1
    2acc:	70 40       	sbci	r23, 0x00	; 0
    2ace:	01 90       	ld	r0, Z+
    2ad0:	01 10       	cpse	r0, r1
    2ad2:	d8 f7       	brcc	.-10     	; 0x2aca <strnlen+0x2>
    2ad4:	80 95       	com	r24
    2ad6:	90 95       	com	r25
    2ad8:	8e 0f       	add	r24, r30
    2ada:	9f 1f       	adc	r25, r31
    2adc:	08 95       	ret

00002ade <fputc>:
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	8c 01       	movw	r16, r24
    2ae8:	eb 01       	movw	r28, r22
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	81 ff       	sbrs	r24, 1
    2aee:	1b c0       	rjmp	.+54     	; 0x2b26 <fputc+0x48>
    2af0:	82 ff       	sbrs	r24, 2
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <fputc+0x30>
    2af4:	2e 81       	ldd	r18, Y+6	; 0x06
    2af6:	3f 81       	ldd	r19, Y+7	; 0x07
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9d 81       	ldd	r25, Y+5	; 0x05
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	64 f4       	brge	.+24     	; 0x2b1a <fputc+0x3c>
    2b02:	e8 81       	ld	r30, Y
    2b04:	f9 81       	ldd	r31, Y+1	; 0x01
    2b06:	01 93       	st	Z+, r16
    2b08:	f9 83       	std	Y+1, r31	; 0x01
    2b0a:	e8 83       	st	Y, r30
    2b0c:	06 c0       	rjmp	.+12     	; 0x2b1a <fputc+0x3c>
    2b0e:	e8 85       	ldd	r30, Y+8	; 0x08
    2b10:	f9 85       	ldd	r31, Y+9	; 0x09
    2b12:	80 2f       	mov	r24, r16
    2b14:	09 95       	icall
    2b16:	89 2b       	or	r24, r25
    2b18:	31 f4       	brne	.+12     	; 0x2b26 <fputc+0x48>
    2b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	9f 83       	std	Y+7, r25	; 0x07
    2b22:	8e 83       	std	Y+6, r24	; 0x06
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <fputc+0x4c>
    2b26:	0f ef       	ldi	r16, 0xFF	; 255
    2b28:	1f ef       	ldi	r17, 0xFF	; 255
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	08 95       	ret

00002b36 <__ultoa_invert>:
    2b36:	fa 01       	movw	r30, r20
    2b38:	aa 27       	eor	r26, r26
    2b3a:	28 30       	cpi	r18, 0x08	; 8
    2b3c:	51 f1       	breq	.+84     	; 0x2b92 <__ultoa_invert+0x5c>
    2b3e:	20 31       	cpi	r18, 0x10	; 16
    2b40:	81 f1       	breq	.+96     	; 0x2ba2 <__ultoa_invert+0x6c>
    2b42:	e8 94       	clt
    2b44:	6f 93       	push	r22
    2b46:	6e 7f       	andi	r22, 0xFE	; 254
    2b48:	6e 5f       	subi	r22, 0xFE	; 254
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	af 4f       	sbci	r26, 0xFF	; 255
    2b52:	b1 e0       	ldi	r27, 0x01	; 1
    2b54:	3e d0       	rcall	.+124    	; 0x2bd2 <__ultoa_invert+0x9c>
    2b56:	b4 e0       	ldi	r27, 0x04	; 4
    2b58:	3c d0       	rcall	.+120    	; 0x2bd2 <__ultoa_invert+0x9c>
    2b5a:	67 0f       	add	r22, r23
    2b5c:	78 1f       	adc	r23, r24
    2b5e:	89 1f       	adc	r24, r25
    2b60:	9a 1f       	adc	r25, r26
    2b62:	a1 1d       	adc	r26, r1
    2b64:	68 0f       	add	r22, r24
    2b66:	79 1f       	adc	r23, r25
    2b68:	8a 1f       	adc	r24, r26
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	6a 0f       	add	r22, r26
    2b70:	71 1d       	adc	r23, r1
    2b72:	81 1d       	adc	r24, r1
    2b74:	91 1d       	adc	r25, r1
    2b76:	a1 1d       	adc	r26, r1
    2b78:	20 d0       	rcall	.+64     	; 0x2bba <__ultoa_invert+0x84>
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__ultoa_invert+0x48>
    2b7c:	68 94       	set
    2b7e:	3f 91       	pop	r19
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	26 9f       	mul	r18, r22
    2b84:	11 24       	eor	r1, r1
    2b86:	30 19       	sub	r19, r0
    2b88:	30 5d       	subi	r19, 0xD0	; 208
    2b8a:	31 93       	st	Z+, r19
    2b8c:	de f6       	brtc	.-74     	; 0x2b44 <__ultoa_invert+0xe>
    2b8e:	cf 01       	movw	r24, r30
    2b90:	08 95       	ret
    2b92:	46 2f       	mov	r20, r22
    2b94:	47 70       	andi	r20, 0x07	; 7
    2b96:	40 5d       	subi	r20, 0xD0	; 208
    2b98:	41 93       	st	Z+, r20
    2b9a:	b3 e0       	ldi	r27, 0x03	; 3
    2b9c:	0f d0       	rcall	.+30     	; 0x2bbc <__ultoa_invert+0x86>
    2b9e:	c9 f7       	brne	.-14     	; 0x2b92 <__ultoa_invert+0x5c>
    2ba0:	f6 cf       	rjmp	.-20     	; 0x2b8e <__ultoa_invert+0x58>
    2ba2:	46 2f       	mov	r20, r22
    2ba4:	4f 70       	andi	r20, 0x0F	; 15
    2ba6:	40 5d       	subi	r20, 0xD0	; 208
    2ba8:	4a 33       	cpi	r20, 0x3A	; 58
    2baa:	18 f0       	brcs	.+6      	; 0x2bb2 <__ultoa_invert+0x7c>
    2bac:	49 5d       	subi	r20, 0xD9	; 217
    2bae:	31 fd       	sbrc	r19, 1
    2bb0:	40 52       	subi	r20, 0x20	; 32
    2bb2:	41 93       	st	Z+, r20
    2bb4:	02 d0       	rcall	.+4      	; 0x2bba <__ultoa_invert+0x84>
    2bb6:	a9 f7       	brne	.-22     	; 0x2ba2 <__ultoa_invert+0x6c>
    2bb8:	ea cf       	rjmp	.-44     	; 0x2b8e <__ultoa_invert+0x58>
    2bba:	b4 e0       	ldi	r27, 0x04	; 4
    2bbc:	a6 95       	lsr	r26
    2bbe:	97 95       	ror	r25
    2bc0:	87 95       	ror	r24
    2bc2:	77 95       	ror	r23
    2bc4:	67 95       	ror	r22
    2bc6:	ba 95       	dec	r27
    2bc8:	c9 f7       	brne	.-14     	; 0x2bbc <__ultoa_invert+0x86>
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	61 05       	cpc	r22, r1
    2bce:	71 05       	cpc	r23, r1
    2bd0:	08 95       	ret
    2bd2:	9b 01       	movw	r18, r22
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	0a 2e       	mov	r0, r26
    2bd8:	06 94       	lsr	r0
    2bda:	57 95       	ror	r21
    2bdc:	47 95       	ror	r20
    2bde:	37 95       	ror	r19
    2be0:	27 95       	ror	r18
    2be2:	ba 95       	dec	r27
    2be4:	c9 f7       	brne	.-14     	; 0x2bd8 <__ultoa_invert+0xa2>
    2be6:	62 0f       	add	r22, r18
    2be8:	73 1f       	adc	r23, r19
    2bea:	84 1f       	adc	r24, r20
    2bec:	95 1f       	adc	r25, r21
    2bee:	a0 1d       	adc	r26, r0
    2bf0:	08 95       	ret

00002bf2 <_exit>:
    2bf2:	f8 94       	cli

00002bf4 <__stop_program>:
    2bf4:	ff cf       	rjmp	.-2      	; 0x2bf4 <__stop_program>
