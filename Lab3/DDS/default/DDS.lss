
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  000023a0  00002434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  0080022e  0080022e  00002562  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000739  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e79  00000000  00000000  00002e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014ad  00000000  00000000  00005cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d45  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00008ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d7  00000000  00000000  000092c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010a5  00000000  00000000  00009a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000ab44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_9>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <KeypadFin+0x4>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDMainFrequency>:
      bb:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000c7 <LCDMainDecay>:
      c7:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000d4 <LCDMainRise>:
      d4:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000e0 <LCDFMFreq>:
      e0:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000ea <LCDFMDepth>:
      ea:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

000000f5 <LCDFMDecay>:
      f5:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

00000100 <LCDVoice>:
     100:	56 4f 49 43 45 20 00 00                             VOICE ..

00000108 <LcdCustomChar>:
     108:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     118:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     128:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     138:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e0 ea       	ldi	r30, 0xA0	; 160
     15c:	f3 e2       	ldi	r31, 0x23	; 35
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	ae 32       	cpi	r26, 0x2E	; 46
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	13 e0       	ldi	r17, 0x03	; 3
     16c:	ae e2       	ldi	r26, 0x2E	; 46
     16e:	b2 e0       	ldi	r27, 0x02	; 2
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a3 3c       	cpi	r26, 0xC3	; 195
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 4b 03 	call	0x696	; 0x696 <main>
     17e:	0c 94 ce 11 	jmp	0x239c	; 0x239c <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <sample>:

//returns OCR0A
uint8_t sample(void) {
	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if ((time & 0x0ff) == 0) {
     186:	80 91 b3 03 	lds	r24, 0x03B3
     18a:	90 91 b4 03 	lds	r25, 0x03B4
     18e:	88 23       	and	r24, r24
     190:	09 f0       	breq	.+2      	; 0x194 <sample+0xe>
     192:	3f c0       	rjmp	.+126    	; 0x212 <sample+0x8c>
		amp_fall_main = amp_fall_main - (amp_fall_main>>decay_main) ;
     194:	20 91 94 02 	lds	r18, 0x0294
     198:	30 91 95 02 	lds	r19, 0x0295
     19c:	80 91 94 02 	lds	r24, 0x0294
     1a0:	90 91 95 02 	lds	r25, 0x0295
     1a4:	40 91 88 02 	lds	r20, 0x0288
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <sample+0x28>
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	4a 95       	dec	r20
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <sample+0x24>
     1b2:	28 1b       	sub	r18, r24
     1b4:	39 0b       	sbc	r19, r25
     1b6:	30 93 95 02 	sts	0x0295, r19
     1ba:	20 93 94 02 	sts	0x0294, r18
		rise_phase_main = rise_phase_main - (rise_phase_main>>rise_main);
     1be:	20 91 98 03 	lds	r18, 0x0398
     1c2:	30 91 99 03 	lds	r19, 0x0399
     1c6:	80 91 98 03 	lds	r24, 0x0398
     1ca:	90 91 99 03 	lds	r25, 0x0399
     1ce:	40 91 85 02 	lds	r20, 0x0285
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <sample+0x52>
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	4a 95       	dec	r20
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <sample+0x4e>
     1dc:	28 1b       	sub	r18, r24
     1de:	39 0b       	sbc	r19, r25
     1e0:	30 93 99 03 	sts	0x0399, r19
     1e4:	20 93 98 03 	sts	0x0398, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1 = amp_fm1 - (amp_fm1>>decay_fm1) ;
     1e8:	20 91 8b 02 	lds	r18, 0x028B
     1ec:	30 91 8c 02 	lds	r19, 0x028C
     1f0:	80 91 8b 02 	lds	r24, 0x028B
     1f4:	90 91 8c 02 	lds	r25, 0x028C
     1f8:	40 91 b8 03 	lds	r20, 0x03B8
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <sample+0x7c>
     1fe:	96 95       	lsr	r25
     200:	87 95       	ror	r24
     202:	4a 95       	dec	r20
     204:	e2 f7       	brpl	.-8      	; 0x1fe <sample+0x78>
     206:	28 1b       	sub	r18, r24
     208:	39 0b       	sbc	r19, r25
     20a:	30 93 8c 02 	sts	0x028C, r19
     20e:	20 93 8b 02 	sts	0x028B, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main =  max_amp - rise_phase_main;
     212:	80 91 98 03 	lds	r24, 0x0398
     216:	90 91 99 03 	lds	r25, 0x0399
     21a:	4f ef       	ldi	r20, 0xFF	; 255
     21c:	5f e7       	ldi	r21, 0x7F	; 127
     21e:	9a 01       	movw	r18, r20
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	30 93 b7 03 	sts	0x03B7, r19
     228:	20 93 b6 03 	sts	0x03B6, r18
	// product of rise and fall exponentials is the amplitude envelope
	amp_main = (amp_rise_main>>8) * (amp_fall_main>>8) ;
     22c:	20 91 b6 03 	lds	r18, 0x03B6
     230:	30 91 b7 03 	lds	r19, 0x03B7
     234:	80 91 94 02 	lds	r24, 0x0294
     238:	90 91 95 02 	lds	r25, 0x0295
     23c:	89 2f       	mov	r24, r25
     23e:	99 27       	eor	r25, r25
     240:	23 2f       	mov	r18, r19
     242:	33 27       	eor	r19, r19
     244:	bc 01       	movw	r22, r24
     246:	62 9f       	mul	r22, r18
     248:	c0 01       	movw	r24, r0
     24a:	63 9f       	mul	r22, r19
     24c:	90 0d       	add	r25, r0
     24e:	72 9f       	mul	r23, r18
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	90 93 b1 03 	sts	0x03B1, r25
     258:	80 93 b0 03 	sts	0x03B0, r24

	// Init the synth
	if (pluck==1) {
     25c:	80 91 8a 02 	lds	r24, 0x028A
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	d1 f4       	brne	.+52     	; 0x298 <sample+0x112>
		amp_fall_main = max_amp; 
     264:	50 93 95 02 	sts	0x0295, r21
     268:	40 93 94 02 	sts	0x0294, r20
		rise_phase_main = max_amp ;
     26c:	50 93 99 03 	sts	0x0399, r21
     270:	40 93 98 03 	sts	0x0398, r20
		amp_rise_main = 0 ;
     274:	10 92 b7 03 	sts	0x03B7, r1
     278:	10 92 b6 03 	sts	0x03B6, r1
		amp_fm1 = max_amp ;
     27c:	50 93 8c 02 	sts	0x028C, r21
     280:	40 93 8b 02 	sts	0x028B, r20
		// phase lock the synth
		acc_fm1 = 0 ;
     284:	10 92 91 02 	sts	0x0291, r1
     288:	10 92 90 02 	sts	0x0290, r1
		acc_main = 0;
     28c:	10 92 87 02 	sts	0x0287, r1
     290:	10 92 86 02 	sts	0x0286, r1
		pluck = 0;
     294:	10 92 8a 02 	sts	0x028A, r1
	}

	//the FM DDR -- feeds into final DDR
	acc_fm1 = acc_fm1 + inc_fm1 ;
     298:	20 91 90 02 	lds	r18, 0x0290
     29c:	30 91 91 02 	lds	r19, 0x0291
     2a0:	80 91 ad 03 	lds	r24, 0x03AD
     2a4:	90 91 ae 03 	lds	r25, 0x03AE
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	90 93 91 02 	sts	0x0291, r25
     2b0:	80 93 90 02 	sts	0x0290, r24
	high_fm1 = (char)(acc_fm1 >> 8) ;
     2b4:	80 91 90 02 	lds	r24, 0x0290
     2b8:	90 91 91 02 	lds	r25, 0x0291
     2bc:	90 93 b9 03 	sts	0x03B9, r25
	fm1 = sineTable[high_fm1] ;
     2c0:	e0 91 b9 03 	lds	r30, 0x03B9
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	e8 56       	subi	r30, 0x68	; 104
     2c8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ca:	40 81       	ld	r20, Z
     2cc:	40 93 92 02 	sts	0x0292, r20

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main = acc_main + (inc_main + (fm1*(amp_fm1>>depth_fm1))) ;
     2d0:	60 91 86 02 	lds	r22, 0x0286
     2d4:	70 91 87 02 	lds	r23, 0x0287
     2d8:	20 91 8e 02 	lds	r18, 0x028E
     2dc:	30 91 8f 02 	lds	r19, 0x028F
     2e0:	80 91 8b 02 	lds	r24, 0x028B
     2e4:	90 91 8c 02 	lds	r25, 0x028C
     2e8:	e0 91 8d 02 	lds	r30, 0x028D
     2ec:	26 0f       	add	r18, r22
     2ee:	37 1f       	adc	r19, r23
     2f0:	55 27       	eor	r21, r21
     2f2:	47 fd       	sbrc	r20, 7
     2f4:	50 95       	com	r21
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <sample+0x176>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	ea 95       	dec	r30
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <sample+0x172>
     300:	bc 01       	movw	r22, r24
     302:	46 9f       	mul	r20, r22
     304:	c0 01       	movw	r24, r0
     306:	47 9f       	mul	r20, r23
     308:	90 0d       	add	r25, r0
     30a:	56 9f       	mul	r21, r22
     30c:	90 0d       	add	r25, r0
     30e:	11 24       	eor	r1, r1
     310:	28 0f       	add	r18, r24
     312:	39 1f       	adc	r19, r25
     314:	30 93 87 02 	sts	0x0287, r19
     318:	20 93 86 02 	sts	0x0286, r18
	high_main = (char)(acc_main >> 8) ;
     31c:	80 91 86 02 	lds	r24, 0x0286
     320:	90 91 87 02 	lds	r25, 0x0287
     324:	90 93 b2 03 	sts	0x03B2, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main>>8) * (int)sineTable[high_main])>>7) ;
     328:	20 91 b0 03 	lds	r18, 0x03B0
     32c:	30 91 b1 03 	lds	r19, 0x03B1
     330:	e0 91 b2 03 	lds	r30, 0x03B2
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e8 56       	subi	r30, 0x68	; 104
     338:	fd 4f       	sbci	r31, 0xFD	; 253
     33a:	80 81       	ld	r24, Z
     33c:	99 27       	eor	r25, r25
     33e:	87 fd       	sbrc	r24, 7
     340:	90 95       	com	r25
     342:	23 2f       	mov	r18, r19
     344:	33 27       	eor	r19, r19
     346:	ac 01       	movw	r20, r24
     348:	42 9f       	mul	r20, r18
     34a:	c0 01       	movw	r24, r0
     34c:	43 9f       	mul	r20, r19
     34e:	90 0d       	add	r25, r0
     350:	52 9f       	mul	r21, r18
     352:	90 0d       	add	r25, r0
     354:	11 24       	eor	r1, r1
     356:	88 0f       	add	r24, r24
     358:	89 2f       	mov	r24, r25
     35a:	88 1f       	adc	r24, r24
     35c:	99 0b       	sbc	r25, r25
     35e:	91 95       	neg	r25
}
     360:	80 58       	subi	r24, 0x80	; 128
     362:	08 95       	ret

00000364 <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 8000
{ 
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	ef 93       	push	r30
     384:	ff 93       	push	r31
	// turn on timer for profiling
	//TCNT2 = 0; TCCR2B = 1;

	// Set Sample
	OCR0A = sample();
     386:	0e 94 c3 00 	call	0x186	; 0x186 <sample>
     38a:	87 bd       	out	0x27, r24	; 39
	
	time++;     //ticks at 8 KHz 
     38c:	80 91 b3 03 	lds	r24, 0x03B3
     390:	90 91 b4 03 	lds	r25, 0x03B4
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	90 93 b4 03 	sts	0x03B4, r25
     39a:	80 93 b3 03 	sts	0x03B3, r24
	// profiling 
	//TCCR2B = 0;
} 
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <updateManual>:
	LCDstring(LCDBuffer, 1);
}

void updateManual(void){

}
     3c0:	08 95       	ret

000003c2 <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
	LCDclr();
     3c6:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCDclr>
	switch (state) {
     3ca:	80 91 93 02 	lds	r24, 0x0293
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <updateLCD+0x12>
     3d2:	3f c0       	rjmp	.+126    	; 0x452 <updateLCD+0x90>
     3d4:	86 30       	cpi	r24, 0x06	; 6
     3d6:	40 f4       	brcc	.+16     	; 0x3e8 <updateLCD+0x26>
     3d8:	83 30       	cpi	r24, 0x03	; 3
     3da:	f9 f0       	breq	.+62     	; 0x41a <updateLCD+0x58>
     3dc:	84 30       	cpi	r24, 0x04	; 4
     3de:	50 f5       	brcc	.+84     	; 0x434 <updateLCD+0x72>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <updateLCD+0x24>
     3e4:	b5 c0       	rjmp	.+362    	; 0x550 <updateLCD+0x18e>
     3e6:	0c c0       	rjmp	.+24     	; 0x400 <updateLCD+0x3e>
     3e8:	87 30       	cpi	r24, 0x07	; 7
     3ea:	09 f4       	brne	.+2      	; 0x3ee <updateLCD+0x2c>
     3ec:	4c c0       	rjmp	.+152    	; 0x486 <updateLCD+0xc4>
     3ee:	87 30       	cpi	r24, 0x07	; 7
     3f0:	e8 f1       	brcs	.+122    	; 0x46c <updateLCD+0xaa>
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <updateLCD+0x36>
     3f6:	6a c0       	rjmp	.+212    	; 0x4cc <updateLCD+0x10a>
     3f8:	89 30       	cpi	r24, 0x09	; 9
     3fa:	09 f0       	breq	.+2      	; 0x3fe <updateLCD+0x3c>
     3fc:	a9 c0       	rjmp	.+338    	; 0x550 <updateLCD+0x18e>
     3fe:	73 c0       	rjmp	.+230    	; 0x4e6 <updateLCD+0x124>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     400:	8e e8       	ldi	r24, 0x8E	; 142
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     40c:	8b e9       	ldi	r24, 0x9B	; 155
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
     418:	9b c0       	rjmp	.+310    	; 0x550 <updateLCD+0x18e>
			break;
		case MAN:
			updateManual();
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     41a:	8d ea       	ldi	r24, 0xAD	; 173
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     426:	8c e0       	ldi	r24, 0x0C	; 12
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     42e:	20 91 ab 03 	lds	r18, 0x03AB
     432:	65 c0       	rjmp	.+202    	; 0x4fe <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     434:	8b eb       	ldi	r24, 0xBB	; 187
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     448:	20 91 8e 02 	lds	r18, 0x028E
     44c:	30 91 8f 02 	lds	r19, 0x028F
     450:	28 c0       	rjmp	.+80     	; 0x4a2 <updateLCD+0xe0>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     452:	87 ec       	ldi	r24, 0xC7	; 199
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     45e:	8b e0       	ldi	r24, 0x0B	; 11
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     466:	20 91 88 02 	lds	r18, 0x0288
     46a:	49 c0       	rjmp	.+146    	; 0x4fe <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     46c:	84 ed       	ldi	r24, 0xD4	; 212
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     480:	20 91 85 02 	lds	r18, 0x0285
     484:	3c c0       	rjmp	.+120    	; 0x4fe <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     486:	80 ee       	ldi	r24, 0xE0	; 224
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     49a:	20 91 ad 03 	lds	r18, 0x03AD
     49e:	30 91 ae 03 	lds	r19, 0x03AE
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <updateLCD+0xe2>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <updateLCD+0xe4>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <updateLCD+0xe6>
     4a8:	ed b7       	in	r30, 0x3d	; 61
     4aa:	fe b7       	in	r31, 0x3e	; 62
     4ac:	31 96       	adiw	r30, 0x01	; 1
     4ae:	0a e9       	ldi	r16, 0x9A	; 154
     4b0:	13 e0       	ldi	r17, 0x03	; 3
     4b2:	ad b7       	in	r26, 0x3d	; 61
     4b4:	be b7       	in	r27, 0x3e	; 62
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	1c 93       	st	X, r17
     4ba:	0e 93       	st	-X, r16
     4bc:	11 97       	sbiw	r26, 0x01	; 1
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	93 83       	std	Z+3, r25	; 0x03
     4c4:	82 83       	std	Z+2, r24	; 0x02
     4c6:	35 83       	std	Z+5, r19	; 0x05
     4c8:	24 83       	std	Z+4, r18	; 0x04
     4ca:	2d c0       	rjmp	.+90     	; 0x526 <updateLCD+0x164>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     4cc:	8a ee       	ldi	r24, 0xEA	; 234
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	41 e0       	ldi	r20, 0x01	; 1
     4d4:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     4d8:	89 e0       	ldi	r24, 0x09	; 9
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     4e0:	20 91 8d 02 	lds	r18, 0x028D
     4e4:	0c c0       	rjmp	.+24     	; 0x4fe <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     4e6:	85 ef       	ldi	r24, 0xF5	; 245
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     4f2:	89 e0       	ldi	r24, 0x09	; 9
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     4fa:	20 91 b8 03 	lds	r18, 0x03B8
     4fe:	00 d0       	rcall	.+0      	; 0x500 <updateLCD+0x13e>
     500:	00 d0       	rcall	.+0      	; 0x502 <updateLCD+0x140>
     502:	00 d0       	rcall	.+0      	; 0x504 <updateLCD+0x142>
     504:	ed b7       	in	r30, 0x3d	; 61
     506:	fe b7       	in	r31, 0x3e	; 62
     508:	31 96       	adiw	r30, 0x01	; 1
     50a:	0a e9       	ldi	r16, 0x9A	; 154
     50c:	13 e0       	ldi	r17, 0x03	; 3
     50e:	ad b7       	in	r26, 0x3d	; 61
     510:	be b7       	in	r27, 0x3e	; 62
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	1c 93       	st	X, r17
     516:	0e 93       	st	-X, r16
     518:	11 97       	sbiw	r26, 0x01	; 1
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	93 83       	std	Z+3, r25	; 0x03
     520:	82 83       	std	Z+2, r24	; 0x02
     522:	24 83       	std	Z+4, r18	; 0x04
     524:	15 82       	std	Z+5, r1	; 0x05
     526:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     52a:	f8 01       	movw	r30, r16
     52c:	01 90       	ld	r0, Z+
     52e:	00 20       	and	r0, r0
     530:	e9 f7       	brne	.-6      	; 0x52c <updateLCD+0x16a>
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	e0 1b       	sub	r30, r16
     536:	f1 0b       	sbc	r31, r17
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	06 96       	adiw	r24, 0x06	; 6
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	9e bf       	out	0x3e, r25	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	8d bf       	out	0x3d, r24	; 61
     548:	c8 01       	movw	r24, r16
     54a:	6e 2f       	mov	r22, r30
     54c:	0e 94 34 05 	call	0xa68	; 0xa68 <LCDstring>
			break;
	}

	CopyStringtoLCD(LCDVoice, 0, 0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
	LCDGotoXY(voiceStrLen, 0);
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
	sprintf(LCDBuffer, "d", voice);
     564:	20 91 89 02 	lds	r18, 0x0289
     568:	00 d0       	rcall	.+0      	; 0x56a <updateLCD+0x1a8>
     56a:	00 d0       	rcall	.+0      	; 0x56c <updateLCD+0x1aa>
     56c:	00 d0       	rcall	.+0      	; 0x56e <updateLCD+0x1ac>
     56e:	ed b7       	in	r30, 0x3d	; 61
     570:	fe b7       	in	r31, 0x3e	; 62
     572:	31 96       	adiw	r30, 0x01	; 1
     574:	0a e9       	ldi	r16, 0x9A	; 154
     576:	13 e0       	ldi	r17, 0x03	; 3
     578:	ad b7       	in	r26, 0x3d	; 61
     57a:	be b7       	in	r27, 0x3e	; 62
     57c:	12 96       	adiw	r26, 0x02	; 2
     57e:	1c 93       	st	X, r17
     580:	0e 93       	st	-X, r16
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	93 83       	std	Z+3, r25	; 0x03
     58a:	82 83       	std	Z+2, r24	; 0x02
     58c:	24 83       	std	Z+4, r18	; 0x04
     58e:	15 82       	std	Z+5, r1	; 0x05
     590:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <sprintf>
	LCDstring(LCDBuffer, 1);
     594:	8d b7       	in	r24, 0x3d	; 61
     596:	9e b7       	in	r25, 0x3e	; 62
     598:	06 96       	adiw	r24, 0x06	; 6
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	9e bf       	out	0x3e, r25	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	8d bf       	out	0x3d, r24	; 61
     5a4:	c8 01       	movw	r24, r16
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	0e 94 34 05 	call	0xa68	; 0xa68 <LCDstring>
}
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <setState>:
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     5b2:	80 93 93 02 	sts	0x0293, r24
	updateLCD();
     5b6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <updateLCD>
}
     5ba:	08 95       	ret

000005bc <nextState>:

// update to next state if key is pressed
uint8_t waitingForInput = 0;
void nextState(void){
     5bc:	1f 93       	push	r17
	if(waitingForInput) {
		// output input to screen
	}
	uint8_t key = KeypadKey();
     5be:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <KeypadKey>
     5c2:	18 2f       	mov	r17, r24
	switch(key) {
     5c4:	8b 37       	cpi	r24, 0x7B	; 123
     5c6:	19 f0       	breq	.+6      	; 0x5ce <nextState+0x12>
     5c8:	87 3e       	cpi	r24, 0xE7	; 231
     5ca:	79 f4       	brne	.+30     	; 0x5ea <nextState+0x2e>
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <nextState+0x16>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <nextState+0x26>
	switch(key) {
		case KEY_P:
			setState(MAN);
			break;
		case KEY_A:
			setState((state + 1) % 10);
     5d2:	80 91 93 02 	lds	r24, 0x0293
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	6a e0       	ldi	r22, 0x0A	; 10
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__divmodhi4>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     5e2:	80 93 93 02 	sts	0x0293, r24
	updateLCD();
     5e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <updateLCD>
			break;
		case KEY_A:
			setState((state + 1) % 10);
			break;
	}
	switch (state) {
     5ea:	80 91 93 02 	lds	r24, 0x0293
     5ee:	86 30       	cpi	r24, 0x06	; 6
     5f0:	49 f1       	breq	.+82     	; 0x644 <nextState+0x88>
     5f2:	87 30       	cpi	r24, 0x07	; 7
     5f4:	40 f4       	brcc	.+16     	; 0x606 <nextState+0x4a>
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	a9 f0       	breq	.+42     	; 0x624 <nextState+0x68>
     5fa:	85 30       	cpi	r24, 0x05	; 5
     5fc:	e0 f4       	brcc	.+56     	; 0x636 <nextState+0x7a>
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	09 f0       	breq	.+2      	; 0x604 <nextState+0x48>
     602:	47 c0       	rjmp	.+142    	; 0x692 <nextState+0xd6>
     604:	08 c0       	rjmp	.+16     	; 0x616 <nextState+0x5a>
     606:	88 30       	cpi	r24, 0x08	; 8
     608:	69 f1       	breq	.+90     	; 0x664 <nextState+0xa8>
     60a:	88 30       	cpi	r24, 0x08	; 8
     60c:	10 f1       	brcs	.+68     	; 0x652 <nextState+0x96>
     60e:	89 30       	cpi	r24, 0x09	; 9
     610:	09 f0       	breq	.+2      	; 0x614 <nextState+0x58>
     612:	3f c0       	rjmp	.+126    	; 0x692 <nextState+0xd6>
     614:	2e c0       	rjmp	.+92     	; 0x672 <nextState+0xb6>
		case SET_SEQUENCE:
			if(key == KEY_D) {
     616:	17 37       	cpi	r17, 0x77	; 119
     618:	a9 f5       	brne	.+106    	; 0x684 <nextState+0xc8>
				seqId = KeypadInt();
     61a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     61e:	80 93 ab 03 	sts	0x03AB, r24
     622:	2d c0       	rjmp	.+90     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_MAIN:
			if(key == KEY_D) {
     624:	17 37       	cpi	r17, 0x77	; 119
     626:	71 f5       	brne	.+92     	; 0x684 <nextState+0xc8>
				inc_main = KeypadInt();
     628:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     62c:	90 93 8f 02 	sts	0x028F, r25
     630:	80 93 8e 02 	sts	0x028E, r24
     634:	24 c0       	rjmp	.+72     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_MAIN:
			if(key == KEY_D) {
     636:	17 37       	cpi	r17, 0x77	; 119
     638:	29 f5       	brne	.+74     	; 0x684 <nextState+0xc8>
				decay_main = KeypadInt();
     63a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     63e:	80 93 88 02 	sts	0x0288, r24
     642:	1d c0       	rjmp	.+58     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_RISE_MAIN:
			if(key == KEY_D) {
     644:	17 37       	cpi	r17, 0x77	; 119
     646:	f1 f4       	brne	.+60     	; 0x684 <nextState+0xc8>
				rise_main = KeypadInt();
     648:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     64c:	80 93 85 02 	sts	0x0285, r24
     650:	16 c0       	rjmp	.+44     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_FM:
			if(key == KEY_D) {
     652:	17 37       	cpi	r17, 0x77	; 119
     654:	b9 f4       	brne	.+46     	; 0x684 <nextState+0xc8>
				inc_fm1 = KeypadInt();
     656:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     65a:	90 93 ae 03 	sts	0x03AE, r25
     65e:	80 93 ad 03 	sts	0x03AD, r24
     662:	0d c0       	rjmp	.+26     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DEPTH_FM:
			if(key == KEY_D) {
     664:	17 37       	cpi	r17, 0x77	; 119
     666:	71 f4       	brne	.+28     	; 0x684 <nextState+0xc8>
				depth_fm1 = KeypadInt();
     668:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     66c:	80 93 8d 02 	sts	0x028D, r24
     670:	06 c0       	rjmp	.+12     	; 0x67e <nextState+0xc2>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_FM:
			if(key == KEY_D) {
     672:	17 37       	cpi	r17, 0x77	; 119
     674:	39 f4       	brne	.+14     	; 0x684 <nextState+0xc8>
				decay_fm1 = KeypadInt();
     676:	0e 94 e6 04 	call	0x9cc	; 0x9cc <KeypadInt>
     67a:	80 93 b8 03 	sts	0x03B8, r24
				waitingForInput = 0;
     67e:	10 92 2e 02 	sts	0x022E, r1
     682:	07 c0       	rjmp	.+14     	; 0x692 <nextState+0xd6>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     684:	11 e0       	ldi	r17, 0x01	; 1
     686:	10 93 93 02 	sts	0x0293, r17
	updateLCD();
     68a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <updateLCD>
			if(key == KEY_D) {
				decay_fm1 = KeypadInt();
				waitingForInput = 0;
			} else {
				setState(MAIN_SCREEN);
				waitingForInput = 1;
     68e:	10 93 2e 02 	sts	0x022E, r17
			}
			break;
		
	}
}
     692:	1f 91       	pop	r17
     694:	08 95       	ret

00000696 <main>:
/////////////////////////////////////////////////////
int main(void)
{ 
     696:	1f 93       	push	r17
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
			if ((~PINC & 0x01) && !pushed) {
				 pluck = 1;
     698:	11 e0       	ldi	r17, 0x01	; 1

   while(1) {  
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
     69a:	80 91 b3 03 	lds	r24, 0x03B3
     69e:	90 91 b4 03 	lds	r25, 0x03B4
     6a2:	88 23       	and	r24, r24
     6a4:	91 f4       	brne	.+36     	; 0x6ca <main+0x34>
			if ((~PINC & 0x01) && !pushed) {
     6a6:	30 99       	sbic	0x06, 0	; 6
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <main+0x24>
     6aa:	80 91 af 03 	lds	r24, 0x03AF
     6ae:	88 23       	and	r24, r24
     6b0:	21 f4       	brne	.+8      	; 0x6ba <main+0x24>
				 pluck = 1;
     6b2:	10 93 8a 02 	sts	0x028A, r17
				 pushed = 1;
     6b6:	10 93 af 03 	sts	0x03AF, r17
 			}
			if (!(~PINC & 0x01)  && pushed) {
     6ba:	30 9b       	sbis	0x06, 0	; 6
     6bc:	06 c0       	rjmp	.+12     	; 0x6ca <main+0x34>
     6be:	80 91 af 03 	lds	r24, 0x03AF
     6c2:	88 23       	and	r24, r24
     6c4:	11 f0       	breq	.+4      	; 0x6ca <main+0x34>
				pushed = 0;
     6c6:	10 92 af 03 	sts	0x03AF, r1
			}
		//	printf("%d\n\r", TCNT2);
		}
		nextState();
     6ca:	0e 94 de 02 	call	0x5bc	; 0x5bc <nextState>
     6ce:	e5 cf       	rjmp	.-54     	; 0x69a <main+0x4>

000006d0 <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     6d0:	0e 94 93 05 	call	0xb26	; 0xb26 <LCDinit>
	LCDcursorOFF();
     6d4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <LCDcursorOFF>
	LCDclr();				//clear the display
     6d8:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCDclr>
	LCDGotoXY(0,0);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     6e4:	8e e8       	ldi	r24, 0x8E	; 142
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     6f0:	8b e9       	ldi	r24, 0x9B	; 155
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	0e 94 58 05 	call	0xab0	; 0xab0 <CopyStringtoLCD>
}
     6fc:	08 95       	ret

000006fe <Initialize>:
	KeypadDebounce();
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
   // make B.3 an output
   DDRB = (1<<PINB3) ;
     706:	88 e0       	ldi	r24, 0x08	; 8
     708:	84 b9       	out	0x04, r24	; 4
     70a:	08 e9       	ldi	r16, 0x98	; 152
     70c:	12 e0       	ldi	r17, 0x02	; 2
     70e:	c0 e0       	ldi	r28, 0x00	; 0
     710:	d0 e0       	ldi	r29, 0x00	; 0
     712:	1f c0       	rjmp	.+62     	; 0x752 <Initialize+0x54>
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     714:	be 01       	movw	r22, r28
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     71e:	26 e5       	ldi	r18, 0x56	; 86
     720:	3e e0       	ldi	r19, 0x0E	; 14
     722:	49 ec       	ldi	r20, 0xC9	; 201
     724:	50 e4       	ldi	r21, 0x40	; 64
     726:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e8       	ldi	r20, 0x80	; 128
     730:	5b e3       	ldi	r21, 0x3B	; 59
     732:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     736:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <sin>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4e ef       	ldi	r20, 0xFE	; 254
     740:	52 e4       	ldi	r21, 0x42	; 66
     742:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     746:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__fixunssfsi>
     74a:	f8 01       	movw	r30, r16
     74c:	61 93       	st	Z+, r22
     74e:	8f 01       	movw	r16, r30
     750:	21 96       	adiw	r28, 0x01	; 1
  //	uart_init();
  //	stdout = stdin = stderr = &uart_str;
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
     752:	cf 3f       	cpi	r28, 0xFF	; 255
     754:	d1 05       	cpc	r29, r1
     756:	f1 f2       	breq	.-68     	; 0x714 <Initialize+0x16>
     758:	e8 f2       	brcs	.-70     	; 0x714 <Initialize+0x16>
     75a:	d0 93 97 02 	sts	0x0297, r29
     75e:	c0 93 96 02 	sts	0x0296, r28
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
   }  

   // init the time counter
   time=0;
     762:	10 92 b4 03 	sts	0x03B4, r1
     766:	10 92 b3 03 	sts	0x03B3, r1

   // timer 0 runs at full rate
   TCCR0B = 1 ;  
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	85 bd       	out	0x25, r24	; 37
   //turn off timer 0 overflow ISR
   TIMSK0 = 0 ;
     76e:	10 92 6e 00 	sts	0x006E, r1
   // turn on PWM
   // turn on fast PWM and OC0A output
   // at full clock rate, toggle OC0A (pin B3) 
   // 16 microsec per PWM cycle sample time
   TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     772:	83 ec       	ldi	r24, 0xC3	; 195
     774:	84 bd       	out	0x24, r24	; 36
   OCR0A = 128 ; // set PWM to half full scale
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	87 bd       	out	0x27, r24	; 39
	
	// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	OCR1A = 1999 ; // 2000 ticks
     77a:	8f ec       	ldi	r24, 0xCF	; 207
     77c:	97 e0       	ldi	r25, 0x07	; 7
     77e:	90 93 89 00 	sts	0x0089, r25
     782:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	80 93 81 00 	sts	0x0081, r24
  	TCCR1A = 0x00;	//turn off pwm and oc lines
     792:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 0 cmp match ISR
     796:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     79a:	89 ef       	ldi	r24, 0xF9	; 249
     79c:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     7a0:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	80 93 b1 00 	sts	0x00B1, r24

	initLCD();
     7aa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <initLCD>
	
   // turn on all ISRs
   sei() ;
     7ae:	78 94       	sei
   ///////////////////////////////////////////////////
   // Sound parameters
   ///////////////////////////////////////////////////
   // Base frequency
   // 2^16/8000*freq = 8.192*freq
   inc_main = (int)(8.192 * 261) ; 
     7b0:	8a e5       	ldi	r24, 0x5A	; 90
     7b2:	98 e0       	ldi	r25, 0x08	; 8
     7b4:	90 93 8f 02 	sts	0x028F, r25
     7b8:	80 93 8e 02 	sts	0x028E, r24
   // rise and decay SHIFT factor  -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_main = 4 ;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	80 93 88 02 	sts	0x0288, r24
   rise_main = 0 ;
     7c2:	10 92 85 02 	sts	0x0285, r1
   //
   // FM modulation rate -- also a frequency
   inc_fm1 = (int)(8.192 * 65) ;
     7c6:	84 e1       	ldi	r24, 0x14	; 20
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	90 93 ae 03 	sts	0x03AE, r25
     7ce:	80 93 ad 03 	sts	0x03AD, r24
   // FM modulation depth SHIFT factor 
   // bigger factor implies smaller FM!
   // useful range is 4 to 15
   depth_fm1 = 7 ;
     7d2:	87 e0       	ldi	r24, 0x07	; 7
     7d4:	80 93 8d 02 	sts	0x028D, r24
   // decay SHIFT factor -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_fm1 = 6 ;
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	80 93 b8 03 	sts	0x03B8, r24
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <__vector_9>:
	// profiling 
	//TCCR2B = 0;
} 

// Every 1ms
ISR (TIMER2_COMPA_vect){
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
	KeypadDebounce();
     80a:	0e 94 95 04 	call	0x92a	; 0x92a <KeypadDebounce>
}
     80e:	ff 91       	pop	r31
     810:	ef 91       	pop	r30
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRD = 0x0f;
     830:	2f e0       	ldi	r18, 0x0F	; 15
     832:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     834:	80 ef       	ldi	r24, 0xF0	; 240
     836:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	39 2f       	mov	r19, r25
     83c:	3a 95       	dec	r19
     83e:	f1 f7       	brne	.-4      	; 0x83c <KeypadScan+0xc>
	_delay_us(5);
	key = PIND;
     840:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     842:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     844:	2b b9       	out	0x0b, r18	; 11
     846:	9a 95       	dec	r25
     848:	f1 f7       	brne	.-4      	; 0x846 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PIND;
     84a:	29 b1       	in	r18, 0x09	; 9
     84c:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     84e:	2f 3f       	cpi	r18, 0xFF	; 255
     850:	61 f0       	breq	.+24     	; 0x86a <KeypadScan+0x3a>
     852:	ed e0       	ldi	r30, 0x0D	; 13
     854:	f1 e0       	ldi	r31, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     858:	80 81       	ld	r24, Z
     85a:	9f 5f       	subi	r25, 0xFF	; 255
     85c:	82 17       	cp	r24, r18
     85e:	11 f4       	brne	.+4      	; 0x864 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     860:	89 2f       	mov	r24, r25
     862:	08 95       	ret
	_delay_us(5);
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     864:	31 96       	adiw	r30, 0x01	; 1
     866:	90 31       	cpi	r25, 0x10	; 16
     868:	b9 f7       	brne	.-18     	; 0x858 <KeypadScan+0x28>
     86a:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     86c:	08 95       	ret

0000086e <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     86e:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     870:	80 91 31 02 	lds	r24, 0x0231
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	31 f4       	brne	.+12     	; 0x884 <KeypadAppend+0x16>
		KeypadFinished = 0;
     878:	10 92 31 02 	sts	0x0231, r1
		KeypadInput = 0;
     87c:	10 92 30 02 	sts	0x0230, r1
     880:	10 92 2f 02 	sts	0x022F, r1
	}
	switch(key) {
     884:	97 3d       	cpi	r25, 0xD7	; 215
     886:	b9 f1       	breq	.+110    	; 0x8f6 <KeypadAppend+0x88>
     888:	98 3d       	cpi	r25, 0xD8	; 216
     88a:	98 f4       	brcc	.+38     	; 0x8b2 <KeypadAppend+0x44>
     88c:	97 3b       	cpi	r25, 0xB7	; 183
     88e:	99 f1       	breq	.+102    	; 0x8f6 <KeypadAppend+0x88>
     890:	98 3b       	cpi	r25, 0xB8	; 184
     892:	40 f4       	brcc	.+16     	; 0x8a4 <KeypadAppend+0x36>
     894:	9b 37       	cpi	r25, 0x7B	; 123
     896:	79 f1       	breq	.+94     	; 0x8f6 <KeypadAppend+0x88>
     898:	9e 37       	cpi	r25, 0x7E	; 126
     89a:	69 f1       	breq	.+90     	; 0x8f6 <KeypadAppend+0x88>
     89c:	97 37       	cpi	r25, 0x77	; 119
     89e:	09 f0       	breq	.+2      	; 0x8a2 <KeypadAppend+0x34>
     8a0:	43 c0       	rjmp	.+134    	; 0x928 <KeypadAppend+0xba>
     8a2:	29 c0       	rjmp	.+82     	; 0x8f6 <KeypadAppend+0x88>
     8a4:	9d 3b       	cpi	r25, 0xBD	; 189
     8a6:	19 f1       	breq	.+70     	; 0x8ee <KeypadAppend+0x80>
     8a8:	9e 3b       	cpi	r25, 0xBE	; 190
     8aa:	f9 f0       	breq	.+62     	; 0x8ea <KeypadAppend+0x7c>
     8ac:	9b 3b       	cpi	r25, 0xBB	; 187
     8ae:	e1 f5       	brne	.+120    	; 0x928 <KeypadAppend+0xba>
     8b0:	20 c0       	rjmp	.+64     	; 0x8f2 <KeypadAppend+0x84>
     8b2:	97 3e       	cpi	r25, 0xE7	; 231
     8b4:	01 f1       	breq	.+64     	; 0x8f6 <KeypadAppend+0x88>
     8b6:	98 3e       	cpi	r25, 0xE8	; 232
     8b8:	38 f4       	brcc	.+14     	; 0x8c8 <KeypadAppend+0x5a>
     8ba:	9d 3d       	cpi	r25, 0xDD	; 221
     8bc:	91 f0       	breq	.+36     	; 0x8e2 <KeypadAppend+0x74>
     8be:	9e 3d       	cpi	r25, 0xDE	; 222
     8c0:	71 f0       	breq	.+28     	; 0x8de <KeypadAppend+0x70>
     8c2:	9b 3d       	cpi	r25, 0xDB	; 219
     8c4:	89 f5       	brne	.+98     	; 0x928 <KeypadAppend+0xba>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <KeypadAppend+0x78>
     8c8:	9d 3e       	cpi	r25, 0xED	; 237
     8ca:	29 f0       	breq	.+10     	; 0x8d6 <KeypadAppend+0x68>
     8cc:	9e 3e       	cpi	r25, 0xEE	; 238
     8ce:	b9 f0       	breq	.+46     	; 0x8fe <KeypadAppend+0x90>
     8d0:	9b 3e       	cpi	r25, 0xEB	; 235
     8d2:	51 f5       	brne	.+84     	; 0x928 <KeypadAppend+0xba>
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <KeypadAppend+0x6c>
     8d6:	42 e0       	ldi	r20, 0x02	; 2
     8d8:	13 c0       	rjmp	.+38     	; 0x900 <KeypadAppend+0x92>
     8da:	43 e0       	ldi	r20, 0x03	; 3
     8dc:	11 c0       	rjmp	.+34     	; 0x900 <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     8de:	44 e0       	ldi	r20, 0x04	; 4
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     8e2:	45 e0       	ldi	r20, 0x05	; 5
     8e4:	0d c0       	rjmp	.+26     	; 0x900 <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     8e6:	46 e0       	ldi	r20, 0x06	; 6
     8e8:	0b c0       	rjmp	.+22     	; 0x900 <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     8ea:	47 e0       	ldi	r20, 0x07	; 7
     8ec:	09 c0       	rjmp	.+18     	; 0x900 <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     8ee:	48 e0       	ldi	r20, 0x08	; 8
     8f0:	07 c0       	rjmp	.+14     	; 0x900 <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     8f2:	49 e0       	ldi	r20, 0x09	; 9
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 31 02 	sts	0x0231, r24
     8fc:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     8fe:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     900:	80 91 2f 02 	lds	r24, 0x022F
     904:	90 91 30 02 	lds	r25, 0x0230
     908:	9c 01       	movw	r18, r24
     90a:	63 e0       	ldi	r22, 0x03	; 3
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	6a 95       	dec	r22
     912:	e1 f7       	brne	.-8      	; 0x90c <KeypadAppend+0x9e>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	28 0f       	add	r18, r24
     91a:	39 1f       	adc	r19, r25
     91c:	24 0f       	add	r18, r20
     91e:	31 1d       	adc	r19, r1
     920:	30 93 30 02 	sts	0x0230, r19
     924:	20 93 2f 02 	sts	0x022F, r18
     928:	08 95       	ret

0000092a <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	debounceTime--;
     92a:	80 91 bb 03 	lds	r24, 0x03BB
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	80 93 bb 03 	sts	0x03BB, r24
	uint8_t key = KeypadScan(); //Scan the keypad
     934:	0e 94 18 04 	call	0x830	; 0x830 <KeypadScan>
     938:	98 2f       	mov	r25, r24
	switch(keyState){
     93a:	80 91 32 02 	lds	r24, 0x0232
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	91 f0       	breq	.+36     	; 0x966 <KeypadDebounce+0x3c>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	28 f0       	brcs	.+10     	; 0x950 <KeypadDebounce+0x26>
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	09 f1       	breq	.+66     	; 0x98c <KeypadDebounce+0x62>
     94a:	83 30       	cpi	r24, 0x03	; 3
     94c:	a1 f5       	brne	.+104    	; 0x9b6 <KeypadDebounce+0x8c>
     94e:	27 c0       	rjmp	.+78     	; 0x99e <KeypadDebounce+0x74>
	
		case RELEASED:
			if (key){
     950:	99 23       	and	r25, r25
     952:	89 f1       	breq	.+98     	; 0x9b6 <KeypadDebounce+0x8c>
				keyState = MAYBEPUSHED;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 32 02 	sts	0x0232, r24
				debounceTime = DEBOUNCE_TIME;
     95a:	8e e1       	ldi	r24, 0x1E	; 30
     95c:	80 93 bb 03 	sts	0x03BB, r24
				checkKey = key;
     960:	90 93 bc 03 	sts	0x03BC, r25
     964:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     966:	80 91 bb 03 	lds	r24, 0x03BB
     96a:	88 23       	and	r24, r24
     96c:	21 f5       	brne	.+72     	; 0x9b6 <KeypadDebounce+0x8c>
				if (key && key == checkKey) {
     96e:	99 23       	and	r25, r25
     970:	e1 f0       	breq	.+56     	; 0x9aa <KeypadDebounce+0x80>
     972:	80 91 bc 03 	lds	r24, 0x03BC
     976:	98 17       	cp	r25, r24
     978:	c1 f4       	brne	.+48     	; 0x9aa <KeypadDebounce+0x80>
					keyState = PUSHED;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	80 93 32 02 	sts	0x0232, r24
					curKey = key;
     980:	90 93 ba 03 	sts	0x03BA, r25
					KeypadAppend(key);
     984:	89 2f       	mov	r24, r25
     986:	0e 94 37 04 	call	0x86e	; 0x86e <KeypadAppend>
     98a:	08 95       	ret
					keyState = RELEASED;
				}
			}
			break;
		case PUSHED:
			if (!key){
     98c:	99 23       	and	r25, r25
     98e:	99 f4       	brne	.+38     	; 0x9b6 <KeypadDebounce+0x8c>
				keyState = MAYBERELEASED;
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	80 93 32 02 	sts	0x0232, r24
				debounceTime = DEBOUNCE_TIME;
     996:	8e e1       	ldi	r24, 0x1E	; 30
     998:	80 93 bb 03 	sts	0x03BB, r24
     99c:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     99e:	80 91 bb 03 	lds	r24, 0x03BB
     9a2:	88 23       	and	r24, r24
     9a4:	41 f4       	brne	.+16     	; 0x9b6 <KeypadDebounce+0x8c>
				if (!key) {
     9a6:	99 23       	and	r25, r25
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <KeypadDebounce+0x86>
					keyState = RELEASED;
     9aa:	10 92 32 02 	sts	0x0232, r1
     9ae:	08 95       	ret
				} else {
					keyState = PUSHED;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	80 93 32 02 	sts	0x0232, r24
     9b6:	08 95       	ret

000009b8 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     9b8:	90 91 ba 03 	lds	r25, 0x03BA
	if (curKey){
     9bc:	80 91 ba 03 	lds	r24, 0x03BA
     9c0:	88 23       	and	r24, r24
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <KeypadKey+0x10>
		curKey = 0;
     9c4:	10 92 ba 03 	sts	0x03BA, r1
	}
	return tmpKey;
}
     9c8:	89 2f       	mov	r24, r25
     9ca:	08 95       	ret

000009cc <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	return KeypadInput;
}
     9cc:	80 91 2f 02 	lds	r24, 0x022F
     9d0:	90 91 30 02 	lds	r25, 0x0230
     9d4:	08 95       	ret

000009d6 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     9d6:	80 91 31 02 	lds	r24, 0x0231
     9da:	08 95       	ret

000009dc <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     9dc:	28 2f       	mov	r18, r24
     9de:	20 7f       	andi	r18, 0xF0	; 240
     9e0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     9e2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     9e4:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9e6:	2a ef       	ldi	r18, 0xFA	; 250
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     9f0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     9f2:	40 98       	cbi	0x08, 0	; 8
     9f4:	f9 01       	movw	r30, r18
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	44 e0       	ldi	r20, 0x04	; 4
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	4a 95       	dec	r20
     a04:	e1 f7       	brne	.-8      	; 0x9fe <LCDsendChar+0x22>
     a06:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     a08:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     a0a:	42 9a       	sbi	0x08, 2	; 8
     a0c:	c9 01       	movw	r24, r18
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     a12:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     a14:	40 98       	cbi	0x08, 0	; 8
     a16:	c9 01       	movw	r24, r18
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     a1c:	08 95       	ret

00000a1e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     a1e:	28 2f       	mov	r18, r24
     a20:	20 7f       	andi	r18, 0xF0	; 240
     a22:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     a24:	42 9a       	sbi	0x08, 2	; 8
     a26:	2a ef       	ldi	r18, 0xFA	; 250
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	f9 01       	movw	r30, r18
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a30:	42 98       	cbi	0x08, 2	; 8
     a32:	f9 01       	movw	r30, r18
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	54 e0       	ldi	r21, 0x04	; 4
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	5a 95       	dec	r21
     a42:	e1 f7       	brne	.-8      	; 0xa3c <LCDsendCommand+0x1e>
     a44:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     a46:	42 9a       	sbi	0x08, 2	; 8
     a48:	c9 01       	movw	r24, r18
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a4e:	42 98       	cbi	0x08, 2	; 8
     a50:	c9 01       	movw	r24, r18
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     a56:	08 95       	ret

00000a58 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     a5e:	08 95       	ret

00000a60 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     a66:	08 95       	ret

00000a68 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	49 f0       	breq	.+18     	; 0xa88 <LCDstring+0x20>
     a76:	ec 01       	movw	r28, r24
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     a7c:	89 91       	ld	r24, Y+
     a7e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     a82:	1f 5f       	subi	r17, 0xFF	; 255
     a84:	10 17       	cp	r17, r16
     a86:	d0 f3       	brcs	.-12     	; 0xa7c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     a92:	62 30       	cpi	r22, 0x02	; 2
     a94:	31 f0       	breq	.+12     	; 0xaa2 <LCDGotoXY+0x10>
     a96:	63 30       	cpi	r22, 0x03	; 3
     a98:	31 f0       	breq	.+12     	; 0xaa6 <LCDGotoXY+0x14>
     a9a:	61 30       	cpi	r22, 0x01	; 1
     a9c:	29 f4       	brne	.+10     	; 0xaa8 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     a9e:	80 5c       	subi	r24, 0xC0	; 192
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     aa2:	8c 5e       	subi	r24, 0xEC	; 236
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     aa6:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     aa8:	80 68       	ori	r24, 0x80	; 128
     aaa:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
	
}
     aae:	08 95       	ret

00000ab0 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
     ab8:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     aba:	64 2f       	mov	r22, r20
     abc:	0e 94 49 05 	call	0xa92	; 0xa92 <LCDGotoXY>
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     ac4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     ac8:	1f 5f       	subi	r17, 0xFF	; 255
     aca:	fe 01       	movw	r30, r28
     acc:	e1 0f       	add	r30, r17
     ace:	f1 1d       	adc	r31, r1
     ad0:	84 91       	lpm	r24, Z+
     ad2:	88 23       	and	r24, r24
     ad4:	b9 f7       	brne	.-18     	; 0xac4 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	08 95       	ret

00000ade <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	7c 01       	movw	r14, r24
     aec:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     aee:	11 0f       	add	r17, r17
     af0:	11 0f       	add	r17, r17
     af2:	11 0f       	add	r17, r17
     af4:	10 64       	ori	r17, 0x40	; 64
     af6:	c0 e0       	ldi	r28, 0x00	; 0
     af8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     afa:	f7 01       	movw	r30, r14
     afc:	ec 0f       	add	r30, r28
     afe:	fd 1f       	adc	r31, r29
     b00:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     b02:	81 2f       	mov	r24, r17
     b04:	8c 0f       	add	r24, r28
     b06:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
		LCDsendChar(pcc);
     b0a:	80 2f       	mov	r24, r16
     b0c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b10:	21 96       	adiw	r28, 0x01	; 1
     b12:	c8 30       	cpi	r28, 0x08	; 8
     b14:	d1 05       	cpc	r29, r1
     b16:	89 f7       	brne	.-30     	; 0xafa <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	86 ea       	ldi	r24, 0xA6	; 166
     b2e:	9e e0       	ldi	r25, 0x0E	; 14
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     b34:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     b36:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     b38:	87 b1       	in	r24, 0x07	; 7
     b3a:	80 6f       	ori	r24, 0xF0	; 240
     b3c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b3e:	87 b1       	in	r24, 0x07	; 7
     b40:	87 60       	ori	r24, 0x07	; 7
     b42:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b44:	80 e3       	ldi	r24, 0x30	; 48
     b46:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b48:	42 9a       	sbi	0x08, 2	; 8
     b4a:	2a ef       	ldi	r18, 0xFA	; 250
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b54:	42 98       	cbi	0x08, 2	; 8
     b56:	f9 01       	movw	r30, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     b5c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b5e:	42 9a       	sbi	0x08, 2	; 8
     b60:	c9 01       	movw	r24, r18
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b66:	42 98       	cbi	0x08, 2	; 8
     b68:	c9 01       	movw	r24, r18
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     b6e:	80 e2       	ldi	r24, 0x20	; 32
     b70:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     b72:	42 9a       	sbi	0x08, 2	; 8
     b74:	c9 01       	movw	r24, r18
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b7a:	42 98       	cbi	0x08, 2	; 8
     b7c:	c9 01       	movw	r24, r18
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     b82:	88 e2       	ldi	r24, 0x28	; 40
     b84:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b88:	8c e0       	ldi	r24, 0x0C	; 12
     b8a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
     b8e:	c8 e0       	ldi	r28, 0x08	; 8
     b90:	d1 e0       	ldi	r29, 0x01	; 1
     b92:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     b94:	16 2f       	mov	r17, r22
     b96:	1f 5f       	subi	r17, 0xFF	; 255
     b98:	ce 01       	movw	r24, r28
     b9a:	0e 94 6f 05 	call	0xade	; 0xade <LCDdefinechar>
     b9e:	28 96       	adiw	r28, 0x08	; 8
     ba0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     ba2:	18 30       	cpi	r17, 0x08	; 8
     ba4:	b9 f7       	brne	.-18     	; 0xb94 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	08 95       	ret

00000bae <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	08 2f       	mov	r16, r24
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     bb8:	8e e1       	ldi	r24, 0x1E	; 30
     bba:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     bbe:	1f 5f       	subi	r17, 0xFF	; 255
     bc0:	10 17       	cp	r17, r16
     bc2:	d0 f3       	brcs	.-12     	; 0xbb8 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	08 2f       	mov	r16, r24
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     bd4:	88 e1       	ldi	r24, 0x18	; 24
     bd6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     bda:	1f 5f       	subi	r17, 0xFF	; 255
     bdc:	10 17       	cp	r17, r16
     bde:	d0 f3       	brcs	.-12     	; 0xbd4 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     be6:	8e e0       	ldi	r24, 0x0E	; 14
     be8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     bec:	08 95       	ret

00000bee <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     bee:	8f e0       	ldi	r24, 0x0F	; 15
     bf0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     bf4:	08 95       	ret

00000bf6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     bf6:	8c e0       	ldi	r24, 0x0C	; 12
     bf8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     bfc:	08 95       	ret

00000bfe <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     c04:	08 95       	ret

00000c06 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     c06:	8c e0       	ldi	r24, 0x0C	; 12
     c08:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
}
     c0c:	08 95       	ret

00000c0e <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	08 2f       	mov	r16, r24
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c1e:	1f 5f       	subi	r17, 0xFF	; 255
     c20:	10 17       	cp	r17, r16
     c22:	d0 f3       	brcs	.-12     	; 0xc18 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	08 2f       	mov	r16, r24
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     c34:	84 e1       	ldi	r24, 0x14	; 20
     c36:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     c3a:	1f 5f       	subi	r17, 0xFF	; 255
     c3c:	10 17       	cp	r17, r16
     c3e:	d0 f3       	brcs	.-12     	; 0xc34 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c56:	96 e0       	ldi	r25, 0x06	; 6
     c58:	89 9f       	mul	r24, r25
     c5a:	c0 01       	movw	r24, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	24 2f       	mov	r18, r20
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	ac 01       	movw	r20, r24
     c64:	42 9f       	mul	r20, r18
     c66:	c0 01       	movw	r24, r0
     c68:	43 9f       	mul	r20, r19
     c6a:	90 0d       	add	r25, r0
     c6c:	52 9f       	mul	r21, r18
     c6e:	90 0d       	add	r25, r0
     c70:	11 24       	eor	r1, r1
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__divmodhi4>
     c78:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c7a:	cb 01       	movw	r24, r22
     c7c:	66 e0       	ldi	r22, 0x06	; 6
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodhi4>
     c84:	e8 2e       	mov	r14, r24
     c86:	ff 24       	eor	r15, r15
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c8e:	c8 01       	movw	r24, r16
     c90:	05 96       	adiw	r24, 0x05	; 5
     c92:	c8 17       	cp	r28, r24
     c94:	d9 07       	cpc	r29, r25
     c96:	10 f0       	brcs	.+4      	; 0xc9c <LCDprogressBar+0x56>
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     c9c:	c0 17       	cp	r28, r16
     c9e:	d1 07       	cpc	r29, r17
     ca0:	10 f0       	brcs	.+4      	; 0xca6 <LCDprogressBar+0x60>
     ca2:	8e 2d       	mov	r24, r14
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <LCDprogressBar+0x62>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     ca8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     cac:	f3 94       	inc	r15
     cae:	0a 5f       	subi	r16, 0xFA	; 250
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	fd 14       	cp	r15, r13
     cb4:	60 f3       	brcs	.-40     	; 0xc8e <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	08 95       	ret

00000cc6 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     cc6:	87 e6       	ldi	r24, 0x67	; 103
     cc8:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     ccc:	88 e1       	ldi	r24, 0x18	; 24
     cce:	80 93 c1 00 	sts	0x00C1, r24
}
     cd2:	08 95       	ret

00000cd4 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     cd4:	1f 93       	push	r17
     cd6:	18 2f       	mov	r17, r24

  if (c == '\a')
     cd8:	87 30       	cpi	r24, 0x07	; 7
     cda:	49 f4       	brne	.+18     	; 0xcee <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     cdc:	60 91 c1 03 	lds	r22, 0x03C1
     ce0:	70 91 c2 03 	lds	r23, 0x03C2
     ce4:	8d e1       	ldi	r24, 0x1D	; 29
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <fputs>
     cec:	0b c0       	rjmp	.+22     	; 0xd04 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     cee:	8a 30       	cpi	r24, 0x0A	; 10
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     cf2:	8d e0       	ldi	r24, 0x0D	; 13
     cf4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     cf8:	80 91 c0 00 	lds	r24, 0x00C0
     cfc:	85 ff       	sbrs	r24, 5
     cfe:	fc cf       	rjmp	.-8      	; 0xcf8 <uart_putchar+0x24>
  UDR0 = c;
     d00:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	1f 91       	pop	r17
     d0a:	08 95       	ret

00000d0c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     d1a:	80 91 33 02 	lds	r24, 0x0233
     d1e:	90 91 34 02 	lds	r25, 0x0234
     d22:	89 2b       	or	r24, r25
     d24:	09 f0       	breq	.+2      	; 0xd28 <uart_getchar+0x1c>
     d26:	9f c0       	rjmp	.+318    	; 0xe66 <uart_getchar+0x15a>
     d28:	05 e3       	ldi	r16, 0x35	; 53
     d2a:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     d2c:	80 91 c0 00 	lds	r24, 0x00C0
     d30:	87 ff       	sbrs	r24, 7
     d32:	fc cf       	rjmp	.-8      	; 0xd2c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     d34:	80 91 c0 00 	lds	r24, 0x00C0
     d38:	84 ff       	sbrs	r24, 4
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <uart_getchar+0x36>
     d3c:	2e ef       	ldi	r18, 0xFE	; 254
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	a6 c0       	rjmp	.+332    	; 0xe8e <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     d42:	80 91 c0 00 	lds	r24, 0x00C0
     d46:	83 fd       	sbrc	r24, 3
     d48:	a0 c0       	rjmp	.+320    	; 0xe8a <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     d4a:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     d4e:	9d 30       	cpi	r25, 0x0D	; 13
     d50:	11 f0       	breq	.+4      	; 0xd56 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     d52:	9a 30       	cpi	r25, 0x0A	; 10
     d54:	69 f4       	brne	.+26     	; 0xd70 <uart_getchar+0x64>
	  {
	    *cp = c;
     d56:	8a e0       	ldi	r24, 0x0A	; 10
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     d5c:	b7 01       	movw	r22, r14
     d5e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
	    rxp = b;
     d62:	85 e3       	ldi	r24, 0x35	; 53
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	90 93 34 02 	sts	0x0234, r25
     d6a:	80 93 33 02 	sts	0x0233, r24
     d6e:	7b c0       	rjmp	.+246    	; 0xe66 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     d70:	99 30       	cpi	r25, 0x09	; 9
     d72:	09 f4       	brne	.+2      	; 0xd76 <uart_getchar+0x6a>
     d74:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     d76:	89 2f       	mov	r24, r25
     d78:	80 52       	subi	r24, 0x20	; 32
     d7a:	8f 35       	cpi	r24, 0x5F	; 95
     d7c:	10 f0       	brcs	.+4      	; 0xd82 <uart_getchar+0x76>
     d7e:	90 3a       	cpi	r25, 0xA0	; 160
     d80:	70 f0       	brcs	.+28     	; 0xd9e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	04 38       	cpi	r16, 0x84	; 132
     d86:	1f 07       	cpc	r17, r31
     d88:	11 f4       	brne	.+4      	; 0xd8e <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     d8a:	87 e0       	ldi	r24, 0x07	; 7
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     d8e:	f8 01       	movw	r30, r16
     d90:	91 93       	st	Z+, r25
     d92:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     d94:	89 2f       	mov	r24, r25
     d96:	b7 01       	movw	r22, r14
     d98:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
     d9c:	c7 cf       	rjmp	.-114    	; 0xd2c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     d9e:	92 31       	cpi	r25, 0x12	; 18
     da0:	39 f1       	breq	.+78     	; 0xdf0 <uart_getchar+0xe4>
     da2:	93 31       	cpi	r25, 0x13	; 19
     da4:	38 f4       	brcc	.+14     	; 0xdb4 <uart_getchar+0xa8>
     da6:	93 30       	cpi	r25, 0x03	; 3
     da8:	09 f4       	brne	.+2      	; 0xdac <uart_getchar+0xa0>
     daa:	6f c0       	rjmp	.+222    	; 0xe8a <uart_getchar+0x17e>
     dac:	98 30       	cpi	r25, 0x08	; 8
     dae:	09 f0       	breq	.+2      	; 0xdb2 <uart_getchar+0xa6>
     db0:	bd cf       	rjmp	.-134    	; 0xd2c <uart_getchar+0x20>
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <uart_getchar+0xba>
     db4:	97 31       	cpi	r25, 0x17	; 23
     db6:	09 f4       	brne	.+2      	; 0xdba <uart_getchar+0xae>
     db8:	4b c0       	rjmp	.+150    	; 0xe50 <uart_getchar+0x144>
     dba:	9f 37       	cpi	r25, 0x7F	; 127
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <uart_getchar+0xba>
     dbe:	95 31       	cpi	r25, 0x15	; 21
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <uart_getchar+0xb8>
     dc2:	b4 cf       	rjmp	.-152    	; 0xd2c <uart_getchar+0x20>
     dc4:	32 c0       	rjmp	.+100    	; 0xe2a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     dc6:	f2 e0       	ldi	r31, 0x02	; 2
     dc8:	05 33       	cpi	r16, 0x35	; 53
     dca:	1f 07       	cpc	r17, r31
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <uart_getchar+0xc4>
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <uart_getchar+0xc6>
     dd0:	ad cf       	rjmp	.-166    	; 0xd2c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	b7 01       	movw	r22, r14
     dd6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar(' ', stream);
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	b7 01       	movw	r22, r14
     dde:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar('\b', stream);
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	b7 01       	movw	r22, r14
     de6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		cp--;
     dea:	01 50       	subi	r16, 0x01	; 1
     dec:	10 40       	sbci	r17, 0x00	; 0
     dee:	9e cf       	rjmp	.-196    	; 0xd2c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     df0:	8d e0       	ldi	r24, 0x0D	; 13
     df2:	b7 01       	movw	r22, r14
     df4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
     df8:	c5 e3       	ldi	r28, 0x35	; 53
     dfa:	d2 e0       	ldi	r29, 0x02	; 2
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     dfe:	89 91       	ld	r24, Y+
     e00:	b7 01       	movw	r22, r14
     e02:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     e06:	c0 17       	cp	r28, r16
     e08:	d1 07       	cpc	r29, r17
     e0a:	c8 f3       	brcs	.-14     	; 0xdfe <uart_getchar+0xf2>
     e0c:	8f cf       	rjmp	.-226    	; 0xd2c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	b7 01       	movw	r22, r14
     e12:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar(' ', stream);
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	b7 01       	movw	r22, r14
     e1a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar('\b', stream);
     e1e:	88 e0       	ldi	r24, 0x08	; 8
     e20:	b7 01       	movw	r22, r14
     e22:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		cp--;
     e26:	01 50       	subi	r16, 0x01	; 1
     e28:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	05 33       	cpi	r16, 0x35	; 53
     e2e:	18 07       	cpc	r17, r24
     e30:	09 f0       	breq	.+2      	; 0xe34 <uart_getchar+0x128>
     e32:	68 f7       	brcc	.-38     	; 0xe0e <uart_getchar+0x102>
     e34:	7b cf       	rjmp	.-266    	; 0xd2c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	b7 01       	movw	r22, r14
     e3a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar(' ', stream);
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	b7 01       	movw	r22, r14
     e42:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
		uart_putchar('\b', stream);
     e46:	88 e0       	ldi	r24, 0x08	; 8
     e48:	b7 01       	movw	r22, r14
     e4a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <uart_putchar>
     e4e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     e50:	e2 e0       	ldi	r30, 0x02	; 2
     e52:	05 33       	cpi	r16, 0x35	; 53
     e54:	1e 07       	cpc	r17, r30
     e56:	09 f0       	breq	.+2      	; 0xe5a <uart_getchar+0x14e>
     e58:	08 f4       	brcc	.+2      	; 0xe5c <uart_getchar+0x150>
     e5a:	68 cf       	rjmp	.-304    	; 0xd2c <uart_getchar+0x20>
     e5c:	e8 01       	movw	r28, r16
     e5e:	8a 91       	ld	r24, -Y
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	49 f7       	brne	.-46     	; 0xe36 <uart_getchar+0x12a>
     e64:	63 cf       	rjmp	.-314    	; 0xd2c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     e66:	e0 91 33 02 	lds	r30, 0x0233
     e6a:	f0 91 34 02 	lds	r31, 0x0234
     e6e:	81 91       	ld	r24, Z+
     e70:	f0 93 34 02 	sts	0x0234, r31
     e74:	e0 93 33 02 	sts	0x0233, r30
  if (c == '\n')
     e78:	8a 30       	cpi	r24, 0x0A	; 10
     e7a:	21 f4       	brne	.+8      	; 0xe84 <uart_getchar+0x178>
    rxp = 0;
     e7c:	10 92 34 02 	sts	0x0234, r1
     e80:	10 92 33 02 	sts	0x0233, r1

  return c;
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <uart_getchar+0x182>
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
}
     e8e:	c9 01       	movw	r24, r18
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <__fixunssfsi>:
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	7b 01       	movw	r14, r22
     ea8:	8c 01       	movw	r16, r24
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	5f e4       	ldi	r21, 0x4F	; 79
     eb2:	0e 94 1f 0a 	call	0x143e	; 0x143e <__gesf2>
     eb6:	88 23       	and	r24, r24
     eb8:	8c f0       	brlt	.+34     	; 0xedc <__fixunssfsi+0x3e>
     eba:	c8 01       	movw	r24, r16
     ebc:	b7 01       	movw	r22, r14
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	5f e4       	ldi	r21, 0x4F	; 79
     ec6:	0e 94 c7 08 	call	0x118e	; 0x118e <__subsf3>
     eca:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fixsfsi>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	20 50       	subi	r18, 0x00	; 0
     ed4:	30 40       	sbci	r19, 0x00	; 0
     ed6:	40 40       	sbci	r20, 0x00	; 0
     ed8:	50 48       	sbci	r21, 0x80	; 128
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <__fixunssfsi+0x4a>
     edc:	c8 01       	movw	r24, r16
     ede:	b7 01       	movw	r22, r14
     ee0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fixsfsi>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	b9 01       	movw	r22, r18
     eea:	ca 01       	movw	r24, r20
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <_fpadd_parts>:
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e8       	ldi	r30, 0x81	; 129
     efc:	f7 e0       	ldi	r31, 0x07	; 7
     efe:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__prologue_saves__>
     f02:	dc 01       	movw	r26, r24
     f04:	2b 01       	movw	r4, r22
     f06:	fa 01       	movw	r30, r20
     f08:	9c 91       	ld	r25, X
     f0a:	92 30       	cpi	r25, 0x02	; 2
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <_fpadd_parts+0x1a>
     f0e:	39 c1       	rjmp	.+626    	; 0x1182 <__stack+0x83>
     f10:	eb 01       	movw	r28, r22
     f12:	88 81       	ld	r24, Y
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	08 f4       	brcc	.+2      	; 0xf1a <_fpadd_parts+0x24>
     f18:	33 c1       	rjmp	.+614    	; 0x1180 <__stack+0x81>
     f1a:	94 30       	cpi	r25, 0x04	; 4
     f1c:	69 f4       	brne	.+26     	; 0xf38 <_fpadd_parts+0x42>
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x2e>
     f22:	2f c1       	rjmp	.+606    	; 0x1182 <__stack+0x83>
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	9c 91       	ld	r25, X
     f28:	11 97       	sbiw	r26, 0x01	; 1
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	98 17       	cp	r25, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <_fpadd_parts+0x3c>
     f30:	28 c1       	rjmp	.+592    	; 0x1182 <__stack+0x83>
     f32:	a5 e2       	ldi	r26, 0x25	; 37
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	25 c1       	rjmp	.+586    	; 0x1182 <__stack+0x83>
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	09 f4       	brne	.+2      	; 0xf3e <_fpadd_parts+0x48>
     f3c:	21 c1       	rjmp	.+578    	; 0x1180 <__stack+0x81>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	a9 f4       	brne	.+42     	; 0xf6c <_fpadd_parts+0x76>
     f42:	92 30       	cpi	r25, 0x02	; 2
     f44:	09 f0       	breq	.+2      	; 0xf48 <_fpadd_parts+0x52>
     f46:	1d c1       	rjmp	.+570    	; 0x1182 <__stack+0x83>
     f48:	9a 01       	movw	r18, r20
     f4a:	ad 01       	movw	r20, r26
     f4c:	88 e0       	ldi	r24, 0x08	; 8
     f4e:	ea 01       	movw	r28, r20
     f50:	09 90       	ld	r0, Y+
     f52:	ae 01       	movw	r20, r28
     f54:	e9 01       	movw	r28, r18
     f56:	09 92       	st	Y+, r0
     f58:	9e 01       	movw	r18, r28
     f5a:	81 50       	subi	r24, 0x01	; 1
     f5c:	c1 f7       	brne	.-16     	; 0xf4e <_fpadd_parts+0x58>
     f5e:	e2 01       	movw	r28, r4
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	9c 91       	ld	r25, X
     f66:	89 23       	and	r24, r25
     f68:	81 83       	std	Z+1, r24	; 0x01
     f6a:	08 c1       	rjmp	.+528    	; 0x117c <__stack+0x7d>
     f6c:	92 30       	cpi	r25, 0x02	; 2
     f6e:	09 f4       	brne	.+2      	; 0xf72 <_fpadd_parts+0x7c>
     f70:	07 c1       	rjmp	.+526    	; 0x1180 <__stack+0x81>
     f72:	12 96       	adiw	r26, 0x02	; 2
     f74:	2d 90       	ld	r2, X+
     f76:	3c 90       	ld	r3, X
     f78:	13 97       	sbiw	r26, 0x03	; 3
     f7a:	eb 01       	movw	r28, r22
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	14 96       	adiw	r26, 0x04	; 4
     f82:	ad 90       	ld	r10, X+
     f84:	bd 90       	ld	r11, X+
     f86:	cd 90       	ld	r12, X+
     f88:	dc 90       	ld	r13, X
     f8a:	17 97       	sbiw	r26, 0x07	; 7
     f8c:	ec 80       	ldd	r14, Y+4	; 0x04
     f8e:	fd 80       	ldd	r15, Y+5	; 0x05
     f90:	0e 81       	ldd	r16, Y+6	; 0x06
     f92:	1f 81       	ldd	r17, Y+7	; 0x07
     f94:	91 01       	movw	r18, r2
     f96:	28 1b       	sub	r18, r24
     f98:	39 0b       	sbc	r19, r25
     f9a:	b9 01       	movw	r22, r18
     f9c:	37 ff       	sbrs	r19, 7
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <_fpadd_parts+0xb2>
     fa0:	66 27       	eor	r22, r22
     fa2:	77 27       	eor	r23, r23
     fa4:	62 1b       	sub	r22, r18
     fa6:	73 0b       	sbc	r23, r19
     fa8:	60 32       	cpi	r22, 0x20	; 32
     faa:	71 05       	cpc	r23, r1
     fac:	0c f0       	brlt	.+2      	; 0xfb0 <_fpadd_parts+0xba>
     fae:	61 c0       	rjmp	.+194    	; 0x1072 <_fpadd_parts+0x17c>
     fb0:	12 16       	cp	r1, r18
     fb2:	13 06       	cpc	r1, r19
     fb4:	6c f5       	brge	.+90     	; 0x1010 <_fpadd_parts+0x11a>
     fb6:	37 01       	movw	r6, r14
     fb8:	48 01       	movw	r8, r16
     fba:	06 2e       	mov	r0, r22
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <_fpadd_parts+0xd0>
     fbe:	96 94       	lsr	r9
     fc0:	87 94       	ror	r8
     fc2:	77 94       	ror	r7
     fc4:	67 94       	ror	r6
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <_fpadd_parts+0xc8>
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <_fpadd_parts+0xe6>
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	44 1f       	adc	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	6a 95       	dec	r22
     fde:	d2 f7       	brpl	.-12     	; 0xfd4 <_fpadd_parts+0xde>
     fe0:	21 50       	subi	r18, 0x01	; 1
     fe2:	30 40       	sbci	r19, 0x00	; 0
     fe4:	40 40       	sbci	r20, 0x00	; 0
     fe6:	50 40       	sbci	r21, 0x00	; 0
     fe8:	2e 21       	and	r18, r14
     fea:	3f 21       	and	r19, r15
     fec:	40 23       	and	r20, r16
     fee:	51 23       	and	r21, r17
     ff0:	21 15       	cp	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	41 05       	cpc	r20, r1
     ff6:	51 05       	cpc	r21, r1
     ff8:	21 f0       	breq	.+8      	; 0x1002 <_fpadd_parts+0x10c>
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	79 01       	movw	r14, r18
    1004:	8a 01       	movw	r16, r20
    1006:	e6 28       	or	r14, r6
    1008:	f7 28       	or	r15, r7
    100a:	08 29       	or	r16, r8
    100c:	19 29       	or	r17, r9
    100e:	3c c0       	rjmp	.+120    	; 0x1088 <_fpadd_parts+0x192>
    1010:	23 2b       	or	r18, r19
    1012:	d1 f1       	breq	.+116    	; 0x1088 <_fpadd_parts+0x192>
    1014:	26 0e       	add	r2, r22
    1016:	37 1e       	adc	r3, r23
    1018:	35 01       	movw	r6, r10
    101a:	46 01       	movw	r8, r12
    101c:	06 2e       	mov	r0, r22
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <_fpadd_parts+0x132>
    1020:	96 94       	lsr	r9
    1022:	87 94       	ror	r8
    1024:	77 94       	ror	r7
    1026:	67 94       	ror	r6
    1028:	0a 94       	dec	r0
    102a:	d2 f7       	brpl	.-12     	; 0x1020 <_fpadd_parts+0x12a>
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	04 c0       	rjmp	.+8      	; 0x103e <_fpadd_parts+0x148>
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	44 1f       	adc	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	6a 95       	dec	r22
    1040:	d2 f7       	brpl	.-12     	; 0x1036 <_fpadd_parts+0x140>
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	30 40       	sbci	r19, 0x00	; 0
    1046:	40 40       	sbci	r20, 0x00	; 0
    1048:	50 40       	sbci	r21, 0x00	; 0
    104a:	2a 21       	and	r18, r10
    104c:	3b 21       	and	r19, r11
    104e:	4c 21       	and	r20, r12
    1050:	5d 21       	and	r21, r13
    1052:	21 15       	cp	r18, r1
    1054:	31 05       	cpc	r19, r1
    1056:	41 05       	cpc	r20, r1
    1058:	51 05       	cpc	r21, r1
    105a:	21 f0       	breq	.+8      	; 0x1064 <_fpadd_parts+0x16e>
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	59 01       	movw	r10, r18
    1066:	6a 01       	movw	r12, r20
    1068:	a6 28       	or	r10, r6
    106a:	b7 28       	or	r11, r7
    106c:	c8 28       	or	r12, r8
    106e:	d9 28       	or	r13, r9
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <_fpadd_parts+0x192>
    1072:	82 15       	cp	r24, r2
    1074:	93 05       	cpc	r25, r3
    1076:	2c f0       	brlt	.+10     	; 0x1082 <_fpadd_parts+0x18c>
    1078:	1c 01       	movw	r2, r24
    107a:	aa 24       	eor	r10, r10
    107c:	bb 24       	eor	r11, r11
    107e:	65 01       	movw	r12, r10
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <_fpadd_parts+0x192>
    1082:	ee 24       	eor	r14, r14
    1084:	ff 24       	eor	r15, r15
    1086:	87 01       	movw	r16, r14
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	9c 91       	ld	r25, X
    108c:	d2 01       	movw	r26, r4
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	8c 91       	ld	r24, X
    1092:	98 17       	cp	r25, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <_fpadd_parts+0x1a2>
    1096:	45 c0       	rjmp	.+138    	; 0x1122 <__stack+0x23>
    1098:	99 23       	and	r25, r25
    109a:	39 f0       	breq	.+14     	; 0x10aa <_fpadd_parts+0x1b4>
    109c:	a8 01       	movw	r20, r16
    109e:	97 01       	movw	r18, r14
    10a0:	2a 19       	sub	r18, r10
    10a2:	3b 09       	sbc	r19, r11
    10a4:	4c 09       	sbc	r20, r12
    10a6:	5d 09       	sbc	r21, r13
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <_fpadd_parts+0x1c0>
    10aa:	a6 01       	movw	r20, r12
    10ac:	95 01       	movw	r18, r10
    10ae:	2e 19       	sub	r18, r14
    10b0:	3f 09       	sbc	r19, r15
    10b2:	40 0b       	sbc	r20, r16
    10b4:	51 0b       	sbc	r21, r17
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <_fpadd_parts+0x1d4>
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	33 82       	std	Z+3, r3	; 0x03
    10be:	22 82       	std	Z+2, r2	; 0x02
    10c0:	24 83       	std	Z+4, r18	; 0x04
    10c2:	35 83       	std	Z+5, r19	; 0x05
    10c4:	46 83       	std	Z+6, r20	; 0x06
    10c6:	57 83       	std	Z+7, r21	; 0x07
    10c8:	1d c0       	rjmp	.+58     	; 0x1104 <__stack+0x5>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	81 83       	std	Z+1, r24	; 0x01
    10ce:	33 82       	std	Z+3, r3	; 0x03
    10d0:	22 82       	std	Z+2, r2	; 0x02
    10d2:	88 27       	eor	r24, r24
    10d4:	99 27       	eor	r25, r25
    10d6:	dc 01       	movw	r26, r24
    10d8:	82 1b       	sub	r24, r18
    10da:	93 0b       	sbc	r25, r19
    10dc:	a4 0b       	sbc	r26, r20
    10de:	b5 0b       	sbc	r27, r21
    10e0:	84 83       	std	Z+4, r24	; 0x04
    10e2:	95 83       	std	Z+5, r25	; 0x05
    10e4:	a6 83       	std	Z+6, r26	; 0x06
    10e6:	b7 83       	std	Z+7, r27	; 0x07
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <__stack+0x5>
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	44 1f       	adc	r20, r20
    10f0:	55 1f       	adc	r21, r21
    10f2:	24 83       	std	Z+4, r18	; 0x04
    10f4:	35 83       	std	Z+5, r19	; 0x05
    10f6:	46 83       	std	Z+6, r20	; 0x06
    10f8:	57 83       	std	Z+7, r21	; 0x07
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
    1104:	24 81       	ldd	r18, Z+4	; 0x04
    1106:	35 81       	ldd	r19, Z+5	; 0x05
    1108:	46 81       	ldd	r20, Z+6	; 0x06
    110a:	57 81       	ldd	r21, Z+7	; 0x07
    110c:	da 01       	movw	r26, r20
    110e:	c9 01       	movw	r24, r18
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	a1 09       	sbc	r26, r1
    1114:	b1 09       	sbc	r27, r1
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	af 4f       	sbci	r26, 0xFF	; 255
    111c:	bf 43       	sbci	r27, 0x3F	; 63
    111e:	28 f3       	brcs	.-54     	; 0x10ea <_fpadd_parts+0x1f4>
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <__stack+0x39>
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	33 82       	std	Z+3, r3	; 0x03
    1126:	22 82       	std	Z+2, r2	; 0x02
    1128:	ea 0c       	add	r14, r10
    112a:	fb 1c       	adc	r15, r11
    112c:	0c 1d       	adc	r16, r12
    112e:	1d 1d       	adc	r17, r13
    1130:	e4 82       	std	Z+4, r14	; 0x04
    1132:	f5 82       	std	Z+5, r15	; 0x05
    1134:	06 83       	std	Z+6, r16	; 0x06
    1136:	17 83       	std	Z+7, r17	; 0x07
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	80 83       	st	Z, r24
    113c:	24 81       	ldd	r18, Z+4	; 0x04
    113e:	35 81       	ldd	r19, Z+5	; 0x05
    1140:	46 81       	ldd	r20, Z+6	; 0x06
    1142:	57 81       	ldd	r21, Z+7	; 0x07
    1144:	57 ff       	sbrs	r21, 7
    1146:	1a c0       	rjmp	.+52     	; 0x117c <__stack+0x7d>
    1148:	c9 01       	movw	r24, r18
    114a:	aa 27       	eor	r26, r26
    114c:	97 fd       	sbrc	r25, 7
    114e:	a0 95       	com	r26
    1150:	ba 2f       	mov	r27, r26
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	90 70       	andi	r25, 0x00	; 0
    1156:	a0 70       	andi	r26, 0x00	; 0
    1158:	b0 70       	andi	r27, 0x00	; 0
    115a:	56 95       	lsr	r21
    115c:	47 95       	ror	r20
    115e:	37 95       	ror	r19
    1160:	27 95       	ror	r18
    1162:	82 2b       	or	r24, r18
    1164:	93 2b       	or	r25, r19
    1166:	a4 2b       	or	r26, r20
    1168:	b5 2b       	or	r27, r21
    116a:	84 83       	std	Z+4, r24	; 0x04
    116c:	95 83       	std	Z+5, r25	; 0x05
    116e:	a6 83       	std	Z+6, r26	; 0x06
    1170:	b7 83       	std	Z+7, r27	; 0x07
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	93 83       	std	Z+3, r25	; 0x03
    117a:	82 83       	std	Z+2, r24	; 0x02
    117c:	df 01       	movw	r26, r30
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <__stack+0x83>
    1180:	d2 01       	movw	r26, r4
    1182:	cd 01       	movw	r24, r26
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	e2 e1       	ldi	r30, 0x12	; 18
    118a:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__epilogue_restores__>

0000118e <__subsf3>:
    118e:	a0 e2       	ldi	r26, 0x20	; 32
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ed ec       	ldi	r30, 0xCD	; 205
    1194:	f8 e0       	ldi	r31, 0x08	; 8
    1196:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__prologue_saves__+0x18>
    119a:	69 83       	std	Y+1, r22	; 0x01
    119c:	7a 83       	std	Y+2, r23	; 0x02
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	2d 83       	std	Y+5, r18	; 0x05
    11a4:	3e 83       	std	Y+6, r19	; 0x06
    11a6:	4f 83       	std	Y+7, r20	; 0x07
    11a8:	58 87       	std	Y+8, r21	; 0x08
    11aa:	e9 e0       	ldi	r30, 0x09	; 9
    11ac:	ee 2e       	mov	r14, r30
    11ae:	f1 2c       	mov	r15, r1
    11b0:	ec 0e       	add	r14, r28
    11b2:	fd 1e       	adc	r15, r29
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	b7 01       	movw	r22, r14
    11ba:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    11be:	8e 01       	movw	r16, r28
    11c0:	0f 5e       	subi	r16, 0xEF	; 239
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	ce 01       	movw	r24, r28
    11c6:	05 96       	adiw	r24, 0x05	; 5
    11c8:	b8 01       	movw	r22, r16
    11ca:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    11ce:	8a 89       	ldd	r24, Y+18	; 0x12
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	89 27       	eor	r24, r25
    11d4:	8a 8b       	std	Y+18, r24	; 0x12
    11d6:	c7 01       	movw	r24, r14
    11d8:	b8 01       	movw	r22, r16
    11da:	ae 01       	movw	r20, r28
    11dc:	47 5e       	subi	r20, 0xE7	; 231
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	0e 94 7b 07 	call	0xef6	; 0xef6 <_fpadd_parts>
    11e4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__pack_f>
    11e8:	a0 96       	adiw	r28, 0x20	; 32
    11ea:	e6 e0       	ldi	r30, 0x06	; 6
    11ec:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__epilogue_restores__+0x18>

000011f0 <__addsf3>:
    11f0:	a0 e2       	ldi	r26, 0x20	; 32
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee ef       	ldi	r30, 0xFE	; 254
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__prologue_saves__+0x18>
    11fc:	69 83       	std	Y+1, r22	; 0x01
    11fe:	7a 83       	std	Y+2, r23	; 0x02
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	2d 83       	std	Y+5, r18	; 0x05
    1206:	3e 83       	std	Y+6, r19	; 0x06
    1208:	4f 83       	std	Y+7, r20	; 0x07
    120a:	58 87       	std	Y+8, r21	; 0x08
    120c:	f9 e0       	ldi	r31, 0x09	; 9
    120e:	ef 2e       	mov	r14, r31
    1210:	f1 2c       	mov	r15, r1
    1212:	ec 0e       	add	r14, r28
    1214:	fd 1e       	adc	r15, r29
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	b7 01       	movw	r22, r14
    121c:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    1220:	8e 01       	movw	r16, r28
    1222:	0f 5e       	subi	r16, 0xEF	; 239
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	ce 01       	movw	r24, r28
    1228:	05 96       	adiw	r24, 0x05	; 5
    122a:	b8 01       	movw	r22, r16
    122c:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    1230:	c7 01       	movw	r24, r14
    1232:	b8 01       	movw	r22, r16
    1234:	ae 01       	movw	r20, r28
    1236:	47 5e       	subi	r20, 0xE7	; 231
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	0e 94 7b 07 	call	0xef6	; 0xef6 <_fpadd_parts>
    123e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__pack_f>
    1242:	a0 96       	adiw	r28, 0x20	; 32
    1244:	e6 e0       	ldi	r30, 0x06	; 6
    1246:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__epilogue_restores__+0x18>

0000124a <__mulsf3>:
    124a:	a0 e2       	ldi	r26, 0x20	; 32
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e2       	ldi	r30, 0x2B	; 43
    1250:	f9 e0       	ldi	r31, 0x09	; 9
    1252:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__prologue_saves__>
    1256:	69 83       	std	Y+1, r22	; 0x01
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	2d 83       	std	Y+5, r18	; 0x05
    1260:	3e 83       	std	Y+6, r19	; 0x06
    1262:	4f 83       	std	Y+7, r20	; 0x07
    1264:	58 87       	std	Y+8, r21	; 0x08
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	be 01       	movw	r22, r28
    126c:	67 5f       	subi	r22, 0xF7	; 247
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    1274:	ce 01       	movw	r24, r28
    1276:	05 96       	adiw	r24, 0x05	; 5
    1278:	be 01       	movw	r22, r28
    127a:	6f 5e       	subi	r22, 0xEF	; 239
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	92 30       	cpi	r25, 0x02	; 2
    1286:	88 f0       	brcs	.+34     	; 0x12aa <__mulsf3+0x60>
    1288:	89 89       	ldd	r24, Y+17	; 0x11
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	c8 f0       	brcs	.+50     	; 0x12c0 <__mulsf3+0x76>
    128e:	94 30       	cpi	r25, 0x04	; 4
    1290:	19 f4       	brne	.+6      	; 0x1298 <__mulsf3+0x4e>
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	51 f4       	brne	.+20     	; 0x12aa <__mulsf3+0x60>
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <__mulsf3+0x56>
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	29 f4       	brne	.+10     	; 0x12a6 <__mulsf3+0x5c>
    129c:	92 30       	cpi	r25, 0x02	; 2
    129e:	81 f4       	brne	.+32     	; 0x12c0 <__mulsf3+0x76>
    12a0:	85 e2       	ldi	r24, 0x25	; 37
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	c6 c0       	rjmp	.+396    	; 0x1432 <__mulsf3+0x1e8>
    12a6:	92 30       	cpi	r25, 0x02	; 2
    12a8:	49 f4       	brne	.+18     	; 0x12bc <__mulsf3+0x72>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	8a 89       	ldd	r24, Y+18	; 0x12
    12b0:	98 13       	cpse	r25, r24
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	2a 87       	std	Y+10, r18	; 0x0a
    12b6:	ce 01       	movw	r24, r28
    12b8:	09 96       	adiw	r24, 0x09	; 9
    12ba:	bb c0       	rjmp	.+374    	; 0x1432 <__mulsf3+0x1e8>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	49 f4       	brne	.+18     	; 0x12d2 <__mulsf3+0x88>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	8a 89       	ldd	r24, Y+18	; 0x12
    12c6:	98 13       	cpse	r25, r24
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	2a 8b       	std	Y+18, r18	; 0x12
    12cc:	ce 01       	movw	r24, r28
    12ce:	41 96       	adiw	r24, 0x11	; 17
    12d0:	b0 c0       	rjmp	.+352    	; 0x1432 <__mulsf3+0x1e8>
    12d2:	2d 84       	ldd	r2, Y+13	; 0x0d
    12d4:	3e 84       	ldd	r3, Y+14	; 0x0e
    12d6:	4f 84       	ldd	r4, Y+15	; 0x0f
    12d8:	58 88       	ldd	r5, Y+16	; 0x10
    12da:	6d 88       	ldd	r6, Y+21	; 0x15
    12dc:	7e 88       	ldd	r7, Y+22	; 0x16
    12de:	8f 88       	ldd	r8, Y+23	; 0x17
    12e0:	98 8c       	ldd	r9, Y+24	; 0x18
    12e2:	ee 24       	eor	r14, r14
    12e4:	ff 24       	eor	r15, r15
    12e6:	87 01       	movw	r16, r14
    12e8:	aa 24       	eor	r10, r10
    12ea:	bb 24       	eor	r11, r11
    12ec:	65 01       	movw	r12, r10
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	e0 e0       	ldi	r30, 0x00	; 0
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	c1 01       	movw	r24, r2
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	89 2b       	or	r24, r25
    1302:	e9 f0       	breq	.+58     	; 0x133e <__mulsf3+0xf4>
    1304:	e6 0c       	add	r14, r6
    1306:	f7 1c       	adc	r15, r7
    1308:	08 1d       	adc	r16, r8
    130a:	19 1d       	adc	r17, r9
    130c:	9a 01       	movw	r18, r20
    130e:	ab 01       	movw	r20, r22
    1310:	2a 0d       	add	r18, r10
    1312:	3b 1d       	adc	r19, r11
    1314:	4c 1d       	adc	r20, r12
    1316:	5d 1d       	adc	r21, r13
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e6 14       	cp	r14, r6
    1322:	f7 04       	cpc	r15, r7
    1324:	08 05       	cpc	r16, r8
    1326:	19 05       	cpc	r17, r9
    1328:	20 f4       	brcc	.+8      	; 0x1332 <__mulsf3+0xe8>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ba 01       	movw	r22, r20
    1334:	a9 01       	movw	r20, r18
    1336:	48 0f       	add	r20, r24
    1338:	59 1f       	adc	r21, r25
    133a:	6a 1f       	adc	r22, r26
    133c:	7b 1f       	adc	r23, r27
    133e:	aa 0c       	add	r10, r10
    1340:	bb 1c       	adc	r11, r11
    1342:	cc 1c       	adc	r12, r12
    1344:	dd 1c       	adc	r13, r13
    1346:	97 fe       	sbrs	r9, 7
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__mulsf3+0x110>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	a8 2a       	or	r10, r24
    1354:	b9 2a       	or	r11, r25
    1356:	ca 2a       	or	r12, r26
    1358:	db 2a       	or	r13, r27
    135a:	31 96       	adiw	r30, 0x01	; 1
    135c:	e0 32       	cpi	r30, 0x20	; 32
    135e:	f1 05       	cpc	r31, r1
    1360:	49 f0       	breq	.+18     	; 0x1374 <__mulsf3+0x12a>
    1362:	66 0c       	add	r6, r6
    1364:	77 1c       	adc	r7, r7
    1366:	88 1c       	adc	r8, r8
    1368:	99 1c       	adc	r9, r9
    136a:	56 94       	lsr	r5
    136c:	47 94       	ror	r4
    136e:	37 94       	ror	r3
    1370:	27 94       	ror	r2
    1372:	c3 cf       	rjmp	.-122    	; 0x12fa <__mulsf3+0xb0>
    1374:	fa 85       	ldd	r31, Y+10	; 0x0a
    1376:	ea 89       	ldd	r30, Y+18	; 0x12
    1378:	2b 89       	ldd	r18, Y+19	; 0x13
    137a:	3c 89       	ldd	r19, Y+20	; 0x14
    137c:	8b 85       	ldd	r24, Y+11	; 0x0b
    137e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1380:	28 0f       	add	r18, r24
    1382:	39 1f       	adc	r19, r25
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	17 c0       	rjmp	.+46     	; 0x13b8 <__mulsf3+0x16e>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	90 70       	andi	r25, 0x00	; 0
    1390:	89 2b       	or	r24, r25
    1392:	61 f0       	breq	.+24     	; 0x13ac <__mulsf3+0x162>
    1394:	16 95       	lsr	r17
    1396:	07 95       	ror	r16
    1398:	f7 94       	ror	r15
    139a:	e7 94       	ror	r14
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	b0 e8       	ldi	r27, 0x80	; 128
    13a4:	e8 2a       	or	r14, r24
    13a6:	f9 2a       	or	r15, r25
    13a8:	0a 2b       	or	r16, r26
    13aa:	1b 2b       	or	r17, r27
    13ac:	76 95       	lsr	r23
    13ae:	67 95       	ror	r22
    13b0:	57 95       	ror	r21
    13b2:	47 95       	ror	r20
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	e7 cf       	rjmp	.-50     	; 0x138a <__mulsf3+0x140>
    13bc:	0c c0       	rjmp	.+24     	; 0x13d6 <__mulsf3+0x18c>
    13be:	44 0f       	add	r20, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	66 1f       	adc	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	17 fd       	sbrc	r17, 7
    13c8:	41 60       	ori	r20, 0x01	; 1
    13ca:	ee 0c       	add	r14, r14
    13cc:	ff 1c       	adc	r15, r15
    13ce:	00 1f       	adc	r16, r16
    13d0:	11 1f       	adc	r17, r17
    13d2:	21 50       	subi	r18, 0x01	; 1
    13d4:	30 40       	sbci	r19, 0x00	; 0
    13d6:	40 30       	cpi	r20, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	59 07       	cpc	r21, r25
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	69 07       	cpc	r22, r25
    13e0:	90 e4       	ldi	r25, 0x40	; 64
    13e2:	79 07       	cpc	r23, r25
    13e4:	60 f3       	brcs	.-40     	; 0x13be <__mulsf3+0x174>
    13e6:	2b 8f       	std	Y+27, r18	; 0x1b
    13e8:	3c 8f       	std	Y+28, r19	; 0x1c
    13ea:	db 01       	movw	r26, r22
    13ec:	ca 01       	movw	r24, r20
    13ee:	8f 77       	andi	r24, 0x7F	; 127
    13f0:	90 70       	andi	r25, 0x00	; 0
    13f2:	a0 70       	andi	r26, 0x00	; 0
    13f4:	b0 70       	andi	r27, 0x00	; 0
    13f6:	80 34       	cpi	r24, 0x40	; 64
    13f8:	91 05       	cpc	r25, r1
    13fa:	a1 05       	cpc	r26, r1
    13fc:	b1 05       	cpc	r27, r1
    13fe:	61 f4       	brne	.+24     	; 0x1418 <__mulsf3+0x1ce>
    1400:	47 fd       	sbrc	r20, 7
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <__mulsf3+0x1ce>
    1404:	e1 14       	cp	r14, r1
    1406:	f1 04       	cpc	r15, r1
    1408:	01 05       	cpc	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	29 f0       	breq	.+10     	; 0x1418 <__mulsf3+0x1ce>
    140e:	40 5c       	subi	r20, 0xC0	; 192
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	6f 4f       	sbci	r22, 0xFF	; 255
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	40 78       	andi	r20, 0x80	; 128
    1418:	1a 8e       	std	Y+26, r1	; 0x1a
    141a:	fe 17       	cp	r31, r30
    141c:	11 f0       	breq	.+4      	; 0x1422 <__mulsf3+0x1d8>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	8a 8f       	std	Y+26, r24	; 0x1a
    1422:	4d 8f       	std	Y+29, r20	; 0x1d
    1424:	5e 8f       	std	Y+30, r21	; 0x1e
    1426:	6f 8f       	std	Y+31, r22	; 0x1f
    1428:	78 a3       	std	Y+32, r23	; 0x20
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	89 8f       	std	Y+25, r24	; 0x19
    142e:	ce 01       	movw	r24, r28
    1430:	49 96       	adiw	r24, 0x19	; 25
    1432:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__pack_f>
    1436:	a0 96       	adiw	r28, 0x20	; 32
    1438:	e2 e1       	ldi	r30, 0x12	; 18
    143a:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__epilogue_restores__>

0000143e <__gesf2>:
    143e:	a8 e1       	ldi	r26, 0x18	; 24
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e2       	ldi	r30, 0x25	; 37
    1444:	fa e0       	ldi	r31, 0x0A	; 10
    1446:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__prologue_saves__+0x18>
    144a:	69 83       	std	Y+1, r22	; 0x01
    144c:	7a 83       	std	Y+2, r23	; 0x02
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	2d 83       	std	Y+5, r18	; 0x05
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	4f 83       	std	Y+7, r20	; 0x07
    1458:	58 87       	std	Y+8, r21	; 0x08
    145a:	89 e0       	ldi	r24, 0x09	; 9
    145c:	e8 2e       	mov	r14, r24
    145e:	f1 2c       	mov	r15, r1
    1460:	ec 0e       	add	r14, r28
    1462:	fd 1e       	adc	r15, r29
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	b7 01       	movw	r22, r14
    146a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    146e:	8e 01       	movw	r16, r28
    1470:	0f 5e       	subi	r16, 0xEF	; 239
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	05 96       	adiw	r24, 0x05	; 5
    1478:	b8 01       	movw	r22, r16
    147a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	40 f0       	brcs	.+16     	; 0x1494 <__gesf2+0x56>
    1484:	89 89       	ldd	r24, Y+17	; 0x11
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	28 f0       	brcs	.+10     	; 0x1494 <__gesf2+0x56>
    148a:	c7 01       	movw	r24, r14
    148c:	b8 01       	movw	r22, r16
    148e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__fpcmp_parts_f>
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <__gesf2+0x58>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	68 96       	adiw	r28, 0x18	; 24
    1498:	e6 e0       	ldi	r30, 0x06	; 6
    149a:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__epilogue_restores__+0x18>

0000149e <__fixsfsi>:
    149e:	ac e0       	ldi	r26, 0x0C	; 12
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	fa e0       	ldi	r31, 0x0A	; 10
    14a6:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__prologue_saves__+0x20>
    14aa:	69 83       	std	Y+1, r22	; 0x01
    14ac:	7a 83       	std	Y+2, r23	; 0x02
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	be 01       	movw	r22, r28
    14b8:	6b 5f       	subi	r22, 0xFB	; 251
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	0e 94 40 0c 	call	0x1880	; 0x1880 <__unpack_f>
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	61 f1       	breq	.+88     	; 0x151e <__fixsfsi+0x80>
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	50 f1       	brcs	.+84     	; 0x151e <__fixsfsi+0x80>
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <__fixsfsi+0x38>
    14ce:	8e 81       	ldd	r24, Y+6	; 0x06
    14d0:	88 23       	and	r24, r24
    14d2:	51 f1       	breq	.+84     	; 0x1528 <__fixsfsi+0x8a>
    14d4:	2e c0       	rjmp	.+92     	; 0x1532 <__fixsfsi+0x94>
    14d6:	2f 81       	ldd	r18, Y+7	; 0x07
    14d8:	38 85       	ldd	r19, Y+8	; 0x08
    14da:	37 fd       	sbrc	r19, 7
    14dc:	20 c0       	rjmp	.+64     	; 0x151e <__fixsfsi+0x80>
    14de:	6e 81       	ldd	r22, Y+6	; 0x06
    14e0:	2f 31       	cpi	r18, 0x1F	; 31
    14e2:	31 05       	cpc	r19, r1
    14e4:	1c f0       	brlt	.+6      	; 0x14ec <__fixsfsi+0x4e>
    14e6:	66 23       	and	r22, r22
    14e8:	f9 f0       	breq	.+62     	; 0x1528 <__fixsfsi+0x8a>
    14ea:	23 c0       	rjmp	.+70     	; 0x1532 <__fixsfsi+0x94>
    14ec:	8e e1       	ldi	r24, 0x1E	; 30
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	82 1b       	sub	r24, r18
    14f2:	93 0b       	sbc	r25, r19
    14f4:	29 85       	ldd	r18, Y+9	; 0x09
    14f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    14fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__fixsfsi+0x68>
    14fe:	56 95       	lsr	r21
    1500:	47 95       	ror	r20
    1502:	37 95       	ror	r19
    1504:	27 95       	ror	r18
    1506:	8a 95       	dec	r24
    1508:	d2 f7       	brpl	.-12     	; 0x14fe <__fixsfsi+0x60>
    150a:	66 23       	and	r22, r22
    150c:	b1 f0       	breq	.+44     	; 0x153a <__fixsfsi+0x9c>
    150e:	50 95       	com	r21
    1510:	40 95       	com	r20
    1512:	30 95       	com	r19
    1514:	21 95       	neg	r18
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	4f 4f       	sbci	r20, 0xFF	; 255
    151a:	5f 4f       	sbci	r21, 0xFF	; 255
    151c:	0e c0       	rjmp	.+28     	; 0x153a <__fixsfsi+0x9c>
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	09 c0       	rjmp	.+18     	; 0x153a <__fixsfsi+0x9c>
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f ef       	ldi	r20, 0xFF	; 255
    152e:	5f e7       	ldi	r21, 0x7F	; 127
    1530:	04 c0       	rjmp	.+8      	; 0x153a <__fixsfsi+0x9c>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	50 e8       	ldi	r21, 0x80	; 128
    153a:	b9 01       	movw	r22, r18
    153c:	ca 01       	movw	r24, r20
    153e:	2c 96       	adiw	r28, 0x0c	; 12
    1540:	e2 e0       	ldi	r30, 0x02	; 2
    1542:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__epilogue_restores__+0x20>

00001546 <__floatunsisf>:
    1546:	a8 e0       	ldi	r26, 0x08	; 8
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e9 ea       	ldi	r30, 0xA9	; 169
    154c:	fa e0       	ldi	r31, 0x0A	; 10
    154e:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__prologue_saves__+0x10>
    1552:	7b 01       	movw	r14, r22
    1554:	8c 01       	movw	r16, r24
    1556:	61 15       	cp	r22, r1
    1558:	71 05       	cpc	r23, r1
    155a:	81 05       	cpc	r24, r1
    155c:	91 05       	cpc	r25, r1
    155e:	19 f4       	brne	.+6      	; 0x1566 <__floatunsisf+0x20>
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	60 c0       	rjmp	.+192    	; 0x1626 <__floatunsisf+0xe0>
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	8e e1       	ldi	r24, 0x1E	; 30
    156c:	c8 2e       	mov	r12, r24
    156e:	d1 2c       	mov	r13, r1
    1570:	dc 82       	std	Y+4, r13	; 0x04
    1572:	cb 82       	std	Y+3, r12	; 0x03
    1574:	ed 82       	std	Y+5, r14	; 0x05
    1576:	fe 82       	std	Y+6, r15	; 0x06
    1578:	0f 83       	std	Y+7, r16	; 0x07
    157a:	18 87       	std	Y+8, r17	; 0x08
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__clzsi2>
    1584:	fc 01       	movw	r30, r24
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	f7 ff       	sbrs	r31, 7
    158a:	3b c0       	rjmp	.+118    	; 0x1602 <__floatunsisf+0xbc>
    158c:	22 27       	eor	r18, r18
    158e:	33 27       	eor	r19, r19
    1590:	2e 1b       	sub	r18, r30
    1592:	3f 0b       	sbc	r19, r31
    1594:	57 01       	movw	r10, r14
    1596:	68 01       	movw	r12, r16
    1598:	02 2e       	mov	r0, r18
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <__floatunsisf+0x5e>
    159c:	d6 94       	lsr	r13
    159e:	c7 94       	ror	r12
    15a0:	b7 94       	ror	r11
    15a2:	a7 94       	ror	r10
    15a4:	0a 94       	dec	r0
    15a6:	d2 f7       	brpl	.-12     	; 0x159c <__floatunsisf+0x56>
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <__floatunsisf+0x7c>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	2a 95       	dec	r18
    15c4:	d2 f7       	brpl	.-12     	; 0x15ba <__floatunsisf+0x74>
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	a1 09       	sbc	r26, r1
    15ca:	b1 09       	sbc	r27, r1
    15cc:	8e 21       	and	r24, r14
    15ce:	9f 21       	and	r25, r15
    15d0:	a0 23       	and	r26, r16
    15d2:	b1 23       	and	r27, r17
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
    15da:	21 f0       	breq	.+8      	; 0x15e4 <__floatunsisf+0x9e>
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	4a 29       	or	r20, r10
    15e6:	5b 29       	or	r21, r11
    15e8:	6c 29       	or	r22, r12
    15ea:	7d 29       	or	r23, r13
    15ec:	4d 83       	std	Y+5, r20	; 0x05
    15ee:	5e 83       	std	Y+6, r21	; 0x06
    15f0:	6f 83       	std	Y+7, r22	; 0x07
    15f2:	78 87       	std	Y+8, r23	; 0x08
    15f4:	8e e1       	ldi	r24, 0x1E	; 30
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	8e 1b       	sub	r24, r30
    15fa:	9f 0b       	sbc	r25, r31
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <__floatunsisf+0xe0>
    1602:	30 97       	sbiw	r30, 0x00	; 0
    1604:	81 f0       	breq	.+32     	; 0x1626 <__floatunsisf+0xe0>
    1606:	0e 2e       	mov	r0, r30
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <__floatunsisf+0xcc>
    160a:	ee 0c       	add	r14, r14
    160c:	ff 1c       	adc	r15, r15
    160e:	00 1f       	adc	r16, r16
    1610:	11 1f       	adc	r17, r17
    1612:	0a 94       	dec	r0
    1614:	d2 f7       	brpl	.-12     	; 0x160a <__floatunsisf+0xc4>
    1616:	ed 82       	std	Y+5, r14	; 0x05
    1618:	fe 82       	std	Y+6, r15	; 0x06
    161a:	0f 83       	std	Y+7, r16	; 0x07
    161c:	18 87       	std	Y+8, r17	; 0x08
    161e:	ce 1a       	sub	r12, r30
    1620:	df 0a       	sbc	r13, r31
    1622:	dc 82       	std	Y+4, r13	; 0x04
    1624:	cb 82       	std	Y+3, r12	; 0x03
    1626:	1a 82       	std	Y+2, r1	; 0x02
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__pack_f>
    1630:	28 96       	adiw	r28, 0x08	; 8
    1632:	ea e0       	ldi	r30, 0x0A	; 10
    1634:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__epilogue_restores__+0x10>

00001638 <__clzsi2>:
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	7b 01       	movw	r14, r22
    1642:	8c 01       	movw	r16, r24
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	e8 16       	cp	r14, r24
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	f8 06       	cpc	r15, r24
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	08 07       	cpc	r16, r24
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	18 07       	cpc	r17, r24
    1654:	88 f4       	brcc	.+34     	; 0x1678 <__clzsi2+0x40>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	e8 16       	cp	r14, r24
    165a:	f1 04       	cpc	r15, r1
    165c:	01 05       	cpc	r16, r1
    165e:	11 05       	cpc	r17, r1
    1660:	31 f0       	breq	.+12     	; 0x166e <__clzsi2+0x36>
    1662:	28 f0       	brcs	.+10     	; 0x166e <__clzsi2+0x36>
    1664:	88 e0       	ldi	r24, 0x08	; 8
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	17 c0       	rjmp	.+46     	; 0x169c <__clzsi2+0x64>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	12 c0       	rjmp	.+36     	; 0x169c <__clzsi2+0x64>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	e8 16       	cp	r14, r24
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	f8 06       	cpc	r15, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	08 07       	cpc	r16, r24
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	18 07       	cpc	r17, r24
    1688:	28 f0       	brcs	.+10     	; 0x1694 <__clzsi2+0x5c>
    168a:	88 e1       	ldi	r24, 0x18	; 24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__clzsi2+0x64>
    1694:	80 e1       	ldi	r24, 0x10	; 16
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	20 e2       	ldi	r18, 0x20	; 32
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	4a 0b       	sbc	r20, r26
    16aa:	5b 0b       	sbc	r21, r27
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <__clzsi2+0x7e>
    16ae:	16 95       	lsr	r17
    16b0:	07 95       	ror	r16
    16b2:	f7 94       	ror	r15
    16b4:	e7 94       	ror	r14
    16b6:	8a 95       	dec	r24
    16b8:	d2 f7       	brpl	.-12     	; 0x16ae <__clzsi2+0x76>
    16ba:	f7 01       	movw	r30, r14
    16bc:	e3 5d       	subi	r30, 0xD3	; 211
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	80 81       	ld	r24, Z
    16c2:	28 1b       	sub	r18, r24
    16c4:	31 09       	sbc	r19, r1
    16c6:	41 09       	sbc	r20, r1
    16c8:	51 09       	sbc	r21, r1
    16ca:	c9 01       	movw	r24, r18
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	08 95       	ret

000016d6 <__pack_f>:
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	fc 01       	movw	r30, r24
    16e2:	e4 80       	ldd	r14, Z+4	; 0x04
    16e4:	f5 80       	ldd	r15, Z+5	; 0x05
    16e6:	06 81       	ldd	r16, Z+6	; 0x06
    16e8:	17 81       	ldd	r17, Z+7	; 0x07
    16ea:	d1 80       	ldd	r13, Z+1	; 0x01
    16ec:	80 81       	ld	r24, Z
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	48 f4       	brcc	.+18     	; 0x1704 <__pack_f+0x2e>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e1       	ldi	r26, 0x10	; 16
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e8 2a       	or	r14, r24
    16fc:	f9 2a       	or	r15, r25
    16fe:	0a 2b       	or	r16, r26
    1700:	1b 2b       	or	r17, r27
    1702:	a5 c0       	rjmp	.+330    	; 0x184e <__pack_f+0x178>
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	09 f4       	brne	.+2      	; 0x170a <__pack_f+0x34>
    1708:	9f c0       	rjmp	.+318    	; 0x1848 <__pack_f+0x172>
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	21 f4       	brne	.+8      	; 0x1716 <__pack_f+0x40>
    170e:	ee 24       	eor	r14, r14
    1710:	ff 24       	eor	r15, r15
    1712:	87 01       	movw	r16, r14
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <__pack_f+0x4a>
    1716:	e1 14       	cp	r14, r1
    1718:	f1 04       	cpc	r15, r1
    171a:	01 05       	cpc	r16, r1
    171c:	11 05       	cpc	r17, r1
    171e:	19 f4       	brne	.+6      	; 0x1726 <__pack_f+0x50>
    1720:	e0 e0       	ldi	r30, 0x00	; 0
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	96 c0       	rjmp	.+300    	; 0x1852 <__pack_f+0x17c>
    1726:	62 81       	ldd	r22, Z+2	; 0x02
    1728:	73 81       	ldd	r23, Z+3	; 0x03
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	62 38       	cpi	r22, 0x82	; 130
    172e:	79 07       	cpc	r23, r25
    1730:	0c f0       	brlt	.+2      	; 0x1734 <__pack_f+0x5e>
    1732:	5b c0       	rjmp	.+182    	; 0x17ea <__pack_f+0x114>
    1734:	22 e8       	ldi	r18, 0x82	; 130
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	26 1b       	sub	r18, r22
    173a:	37 0b       	sbc	r19, r23
    173c:	2a 31       	cpi	r18, 0x1A	; 26
    173e:	31 05       	cpc	r19, r1
    1740:	2c f0       	brlt	.+10     	; 0x174c <__pack_f+0x76>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	2a c0       	rjmp	.+84     	; 0x17a0 <__pack_f+0xca>
    174c:	b8 01       	movw	r22, r16
    174e:	a7 01       	movw	r20, r14
    1750:	02 2e       	mov	r0, r18
    1752:	04 c0       	rjmp	.+8      	; 0x175c <__pack_f+0x86>
    1754:	76 95       	lsr	r23
    1756:	67 95       	ror	r22
    1758:	57 95       	ror	r21
    175a:	47 95       	ror	r20
    175c:	0a 94       	dec	r0
    175e:	d2 f7       	brpl	.-12     	; 0x1754 <__pack_f+0x7e>
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__pack_f+0x9c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	aa 1f       	adc	r26, r26
    1770:	bb 1f       	adc	r27, r27
    1772:	2a 95       	dec	r18
    1774:	d2 f7       	brpl	.-12     	; 0x176a <__pack_f+0x94>
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	a1 09       	sbc	r26, r1
    177a:	b1 09       	sbc	r27, r1
    177c:	8e 21       	and	r24, r14
    177e:	9f 21       	and	r25, r15
    1780:	a0 23       	and	r26, r16
    1782:	b1 23       	and	r27, r17
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	21 f0       	breq	.+8      	; 0x1794 <__pack_f+0xbe>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	9a 01       	movw	r18, r20
    1796:	ab 01       	movw	r20, r22
    1798:	28 2b       	or	r18, r24
    179a:	39 2b       	or	r19, r25
    179c:	4a 2b       	or	r20, r26
    179e:	5b 2b       	or	r21, r27
    17a0:	da 01       	movw	r26, r20
    17a2:	c9 01       	movw	r24, r18
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	a0 70       	andi	r26, 0x00	; 0
    17aa:	b0 70       	andi	r27, 0x00	; 0
    17ac:	80 34       	cpi	r24, 0x40	; 64
    17ae:	91 05       	cpc	r25, r1
    17b0:	a1 05       	cpc	r26, r1
    17b2:	b1 05       	cpc	r27, r1
    17b4:	39 f4       	brne	.+14     	; 0x17c4 <__pack_f+0xee>
    17b6:	27 ff       	sbrs	r18, 7
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <__pack_f+0xf6>
    17ba:	20 5c       	subi	r18, 0xC0	; 192
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	4f 4f       	sbci	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <__pack_f+0xf6>
    17c4:	21 5c       	subi	r18, 0xC1	; 193
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	e0 e0       	ldi	r30, 0x00	; 0
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	20 30       	cpi	r18, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	3a 07       	cpc	r19, r26
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	4a 07       	cpc	r20, r26
    17da:	a0 e4       	ldi	r26, 0x40	; 64
    17dc:	5a 07       	cpc	r21, r26
    17de:	10 f0       	brcs	.+4      	; 0x17e4 <__pack_f+0x10e>
    17e0:	e1 e0       	ldi	r30, 0x01	; 1
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	79 01       	movw	r14, r18
    17e6:	8a 01       	movw	r16, r20
    17e8:	27 c0       	rjmp	.+78     	; 0x1838 <__pack_f+0x162>
    17ea:	60 38       	cpi	r22, 0x80	; 128
    17ec:	71 05       	cpc	r23, r1
    17ee:	64 f5       	brge	.+88     	; 0x1848 <__pack_f+0x172>
    17f0:	fb 01       	movw	r30, r22
    17f2:	e1 58       	subi	r30, 0x81	; 129
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	d8 01       	movw	r26, r16
    17f8:	c7 01       	movw	r24, r14
    17fa:	8f 77       	andi	r24, 0x7F	; 127
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	a0 70       	andi	r26, 0x00	; 0
    1800:	b0 70       	andi	r27, 0x00	; 0
    1802:	80 34       	cpi	r24, 0x40	; 64
    1804:	91 05       	cpc	r25, r1
    1806:	a1 05       	cpc	r26, r1
    1808:	b1 05       	cpc	r27, r1
    180a:	39 f4       	brne	.+14     	; 0x181a <__pack_f+0x144>
    180c:	e7 fe       	sbrs	r14, 7
    180e:	0d c0       	rjmp	.+26     	; 0x182a <__pack_f+0x154>
    1810:	80 e4       	ldi	r24, 0x40	; 64
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <__pack_f+0x14c>
    181a:	8f e3       	ldi	r24, 0x3F	; 63
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e0       	ldi	r26, 0x00	; 0
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e8 0e       	add	r14, r24
    1824:	f9 1e       	adc	r15, r25
    1826:	0a 1f       	adc	r16, r26
    1828:	1b 1f       	adc	r17, r27
    182a:	17 ff       	sbrs	r17, 7
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <__pack_f+0x162>
    182e:	16 95       	lsr	r17
    1830:	07 95       	ror	r16
    1832:	f7 94       	ror	r15
    1834:	e7 94       	ror	r14
    1836:	31 96       	adiw	r30, 0x01	; 1
    1838:	87 e0       	ldi	r24, 0x07	; 7
    183a:	16 95       	lsr	r17
    183c:	07 95       	ror	r16
    183e:	f7 94       	ror	r15
    1840:	e7 94       	ror	r14
    1842:	8a 95       	dec	r24
    1844:	d1 f7       	brne	.-12     	; 0x183a <__pack_f+0x164>
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <__pack_f+0x17c>
    1848:	ee 24       	eor	r14, r14
    184a:	ff 24       	eor	r15, r15
    184c:	87 01       	movw	r16, r14
    184e:	ef ef       	ldi	r30, 0xFF	; 255
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	6e 2f       	mov	r22, r30
    1854:	67 95       	ror	r22
    1856:	66 27       	eor	r22, r22
    1858:	67 95       	ror	r22
    185a:	90 2f       	mov	r25, r16
    185c:	9f 77       	andi	r25, 0x7F	; 127
    185e:	d7 94       	ror	r13
    1860:	dd 24       	eor	r13, r13
    1862:	d7 94       	ror	r13
    1864:	8e 2f       	mov	r24, r30
    1866:	86 95       	lsr	r24
    1868:	49 2f       	mov	r20, r25
    186a:	46 2b       	or	r20, r22
    186c:	58 2f       	mov	r21, r24
    186e:	5d 29       	or	r21, r13
    1870:	b7 01       	movw	r22, r14
    1872:	ca 01       	movw	r24, r20
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	08 95       	ret

00001880 <__unpack_f>:
    1880:	fc 01       	movw	r30, r24
    1882:	db 01       	movw	r26, r22
    1884:	40 81       	ld	r20, Z
    1886:	51 81       	ldd	r21, Z+1	; 0x01
    1888:	22 81       	ldd	r18, Z+2	; 0x02
    188a:	62 2f       	mov	r22, r18
    188c:	6f 77       	andi	r22, 0x7F	; 127
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	22 1f       	adc	r18, r18
    1892:	22 27       	eor	r18, r18
    1894:	22 1f       	adc	r18, r18
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	89 2f       	mov	r24, r25
    189a:	88 0f       	add	r24, r24
    189c:	82 2b       	or	r24, r18
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	99 1f       	adc	r25, r25
    18a4:	99 27       	eor	r25, r25
    18a6:	99 1f       	adc	r25, r25
    18a8:	11 96       	adiw	r26, 0x01	; 1
    18aa:	9c 93       	st	X, r25
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	21 15       	cp	r18, r1
    18b0:	31 05       	cpc	r19, r1
    18b2:	a9 f5       	brne	.+106    	; 0x191e <__unpack_f+0x9e>
    18b4:	41 15       	cp	r20, r1
    18b6:	51 05       	cpc	r21, r1
    18b8:	61 05       	cpc	r22, r1
    18ba:	71 05       	cpc	r23, r1
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__unpack_f+0x42>
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	37 c0       	rjmp	.+110    	; 0x1930 <__unpack_f+0xb0>
    18c2:	82 e8       	ldi	r24, 0x82	; 130
    18c4:	9f ef       	ldi	r25, 0xFF	; 255
    18c6:	13 96       	adiw	r26, 0x03	; 3
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
    18cc:	12 97       	sbiw	r26, 0x02	; 2
    18ce:	9a 01       	movw	r18, r20
    18d0:	ab 01       	movw	r20, r22
    18d2:	67 e0       	ldi	r22, 0x07	; 7
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	44 1f       	adc	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	6a 95       	dec	r22
    18de:	d1 f7       	brne	.-12     	; 0x18d4 <__unpack_f+0x54>
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	8c 93       	st	X, r24
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <__unpack_f+0x80>
    18e6:	22 0f       	add	r18, r18
    18e8:	33 1f       	adc	r19, r19
    18ea:	44 1f       	adc	r20, r20
    18ec:	55 1f       	adc	r21, r21
    18ee:	12 96       	adiw	r26, 0x02	; 2
    18f0:	8d 91       	ld	r24, X+
    18f2:	9c 91       	ld	r25, X
    18f4:	13 97       	sbiw	r26, 0x03	; 3
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	13 96       	adiw	r26, 0x03	; 3
    18fa:	9c 93       	st	X, r25
    18fc:	8e 93       	st	-X, r24
    18fe:	12 97       	sbiw	r26, 0x02	; 2
    1900:	20 30       	cpi	r18, 0x00	; 0
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	38 07       	cpc	r19, r24
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	48 07       	cpc	r20, r24
    190a:	80 e4       	ldi	r24, 0x40	; 64
    190c:	58 07       	cpc	r21, r24
    190e:	58 f3       	brcs	.-42     	; 0x18e6 <__unpack_f+0x66>
    1910:	14 96       	adiw	r26, 0x04	; 4
    1912:	2d 93       	st	X+, r18
    1914:	3d 93       	st	X+, r19
    1916:	4d 93       	st	X+, r20
    1918:	5c 93       	st	X, r21
    191a:	17 97       	sbiw	r26, 0x07	; 7
    191c:	08 95       	ret
    191e:	2f 3f       	cpi	r18, 0xFF	; 255
    1920:	31 05       	cpc	r19, r1
    1922:	79 f4       	brne	.+30     	; 0x1942 <__unpack_f+0xc2>
    1924:	41 15       	cp	r20, r1
    1926:	51 05       	cpc	r21, r1
    1928:	61 05       	cpc	r22, r1
    192a:	71 05       	cpc	r23, r1
    192c:	19 f4       	brne	.+6      	; 0x1934 <__unpack_f+0xb4>
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	8c 93       	st	X, r24
    1932:	08 95       	ret
    1934:	64 ff       	sbrs	r22, 4
    1936:	03 c0       	rjmp	.+6      	; 0x193e <__unpack_f+0xbe>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8c 93       	st	X, r24
    193c:	12 c0       	rjmp	.+36     	; 0x1962 <__unpack_f+0xe2>
    193e:	1c 92       	st	X, r1
    1940:	10 c0       	rjmp	.+32     	; 0x1962 <__unpack_f+0xe2>
    1942:	2f 57       	subi	r18, 0x7F	; 127
    1944:	30 40       	sbci	r19, 0x00	; 0
    1946:	13 96       	adiw	r26, 0x03	; 3
    1948:	3c 93       	st	X, r19
    194a:	2e 93       	st	-X, r18
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	8c 93       	st	X, r24
    1952:	87 e0       	ldi	r24, 0x07	; 7
    1954:	44 0f       	add	r20, r20
    1956:	55 1f       	adc	r21, r21
    1958:	66 1f       	adc	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	8a 95       	dec	r24
    195e:	d1 f7       	brne	.-12     	; 0x1954 <__unpack_f+0xd4>
    1960:	70 64       	ori	r23, 0x40	; 64
    1962:	14 96       	adiw	r26, 0x04	; 4
    1964:	4d 93       	st	X+, r20
    1966:	5d 93       	st	X+, r21
    1968:	6d 93       	st	X+, r22
    196a:	7c 93       	st	X, r23
    196c:	17 97       	sbiw	r26, 0x07	; 7
    196e:	08 95       	ret

00001970 <__fpcmp_parts_f>:
    1970:	1f 93       	push	r17
    1972:	dc 01       	movw	r26, r24
    1974:	fb 01       	movw	r30, r22
    1976:	9c 91       	ld	r25, X
    1978:	92 30       	cpi	r25, 0x02	; 2
    197a:	08 f4       	brcc	.+2      	; 0x197e <__fpcmp_parts_f+0xe>
    197c:	47 c0       	rjmp	.+142    	; 0x1a0c <__fpcmp_parts_f+0x9c>
    197e:	80 81       	ld	r24, Z
    1980:	82 30       	cpi	r24, 0x02	; 2
    1982:	08 f4       	brcc	.+2      	; 0x1986 <__fpcmp_parts_f+0x16>
    1984:	43 c0       	rjmp	.+134    	; 0x1a0c <__fpcmp_parts_f+0x9c>
    1986:	94 30       	cpi	r25, 0x04	; 4
    1988:	51 f4       	brne	.+20     	; 0x199e <__fpcmp_parts_f+0x2e>
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	1c 91       	ld	r17, X
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	99 f5       	brne	.+102    	; 0x19f8 <__fpcmp_parts_f+0x88>
    1992:	81 81       	ldd	r24, Z+1	; 0x01
    1994:	68 2f       	mov	r22, r24
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	61 1b       	sub	r22, r17
    199a:	71 09       	sbc	r23, r1
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <__fpcmp_parts_f+0xac>
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	21 f0       	breq	.+8      	; 0x19aa <__fpcmp_parts_f+0x3a>
    19a2:	92 30       	cpi	r25, 0x02	; 2
    19a4:	31 f4       	brne	.+12     	; 0x19b2 <__fpcmp_parts_f+0x42>
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	b9 f1       	breq	.+110    	; 0x1a18 <__fpcmp_parts_f+0xa8>
    19aa:	81 81       	ldd	r24, Z+1	; 0x01
    19ac:	88 23       	and	r24, r24
    19ae:	89 f1       	breq	.+98     	; 0x1a12 <__fpcmp_parts_f+0xa2>
    19b0:	2d c0       	rjmp	.+90     	; 0x1a0c <__fpcmp_parts_f+0x9c>
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	1c 91       	ld	r17, X
    19b6:	11 97       	sbiw	r26, 0x01	; 1
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	f1 f0       	breq	.+60     	; 0x19f8 <__fpcmp_parts_f+0x88>
    19bc:	81 81       	ldd	r24, Z+1	; 0x01
    19be:	18 17       	cp	r17, r24
    19c0:	d9 f4       	brne	.+54     	; 0x19f8 <__fpcmp_parts_f+0x88>
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	2d 91       	ld	r18, X+
    19c6:	3c 91       	ld	r19, X
    19c8:	13 97       	sbiw	r26, 0x03	; 3
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	82 17       	cp	r24, r18
    19d0:	93 07       	cpc	r25, r19
    19d2:	94 f0       	brlt	.+36     	; 0x19f8 <__fpcmp_parts_f+0x88>
    19d4:	28 17       	cp	r18, r24
    19d6:	39 07       	cpc	r19, r25
    19d8:	bc f0       	brlt	.+46     	; 0x1a08 <__fpcmp_parts_f+0x98>
    19da:	14 96       	adiw	r26, 0x04	; 4
    19dc:	8d 91       	ld	r24, X+
    19de:	9d 91       	ld	r25, X+
    19e0:	0d 90       	ld	r0, X+
    19e2:	bc 91       	ld	r27, X
    19e4:	a0 2d       	mov	r26, r0
    19e6:	24 81       	ldd	r18, Z+4	; 0x04
    19e8:	35 81       	ldd	r19, Z+5	; 0x05
    19ea:	46 81       	ldd	r20, Z+6	; 0x06
    19ec:	57 81       	ldd	r21, Z+7	; 0x07
    19ee:	28 17       	cp	r18, r24
    19f0:	39 07       	cpc	r19, r25
    19f2:	4a 07       	cpc	r20, r26
    19f4:	5b 07       	cpc	r21, r27
    19f6:	18 f4       	brcc	.+6      	; 0x19fe <__fpcmp_parts_f+0x8e>
    19f8:	11 23       	and	r17, r17
    19fa:	41 f0       	breq	.+16     	; 0x1a0c <__fpcmp_parts_f+0x9c>
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <__fpcmp_parts_f+0xa2>
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	a4 07       	cpc	r26, r20
    1a04:	b5 07       	cpc	r27, r21
    1a06:	40 f4       	brcc	.+16     	; 0x1a18 <__fpcmp_parts_f+0xa8>
    1a08:	11 23       	and	r17, r17
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <__fpcmp_parts_f+0xa2>
    1a0c:	61 e0       	ldi	r22, 0x01	; 1
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <__fpcmp_parts_f+0xac>
    1a12:	6f ef       	ldi	r22, 0xFF	; 255
    1a14:	7f ef       	ldi	r23, 0xFF	; 255
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <__fpcmp_parts_f+0xac>
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	1f 91       	pop	r17
    1a20:	08 95       	ret

00001a22 <__udivmodhi4>:
    1a22:	aa 1b       	sub	r26, r26
    1a24:	bb 1b       	sub	r27, r27
    1a26:	51 e1       	ldi	r21, 0x11	; 17
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <__udivmodhi4_ep>

00001a2a <__udivmodhi4_loop>:
    1a2a:	aa 1f       	adc	r26, r26
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	a6 17       	cp	r26, r22
    1a30:	b7 07       	cpc	r27, r23
    1a32:	10 f0       	brcs	.+4      	; 0x1a38 <__udivmodhi4_ep>
    1a34:	a6 1b       	sub	r26, r22
    1a36:	b7 0b       	sbc	r27, r23

00001a38 <__udivmodhi4_ep>:
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	5a 95       	dec	r21
    1a3e:	a9 f7       	brne	.-22     	; 0x1a2a <__udivmodhi4_loop>
    1a40:	80 95       	com	r24
    1a42:	90 95       	com	r25
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	08 95       	ret

00001a4a <__divmodhi4>:
    1a4a:	97 fb       	bst	r25, 7
    1a4c:	09 2e       	mov	r0, r25
    1a4e:	07 26       	eor	r0, r23
    1a50:	0a d0       	rcall	.+20     	; 0x1a66 <__divmodhi4_neg1>
    1a52:	77 fd       	sbrc	r23, 7
    1a54:	04 d0       	rcall	.+8      	; 0x1a5e <__divmodhi4_neg2>
    1a56:	e5 df       	rcall	.-54     	; 0x1a22 <__udivmodhi4>
    1a58:	06 d0       	rcall	.+12     	; 0x1a66 <__divmodhi4_neg1>
    1a5a:	00 20       	and	r0, r0
    1a5c:	1a f4       	brpl	.+6      	; 0x1a64 <__divmodhi4_exit>

00001a5e <__divmodhi4_neg2>:
    1a5e:	70 95       	com	r23
    1a60:	61 95       	neg	r22
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255

00001a64 <__divmodhi4_exit>:
    1a64:	08 95       	ret

00001a66 <__divmodhi4_neg1>:
    1a66:	f6 f7       	brtc	.-4      	; 0x1a64 <__divmodhi4_exit>
    1a68:	90 95       	com	r25
    1a6a:	81 95       	neg	r24
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__prologue_saves__>:
    1a70:	2f 92       	push	r2
    1a72:	3f 92       	push	r3
    1a74:	4f 92       	push	r4
    1a76:	5f 92       	push	r5
    1a78:	6f 92       	push	r6
    1a7a:	7f 92       	push	r7
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	ca 1b       	sub	r28, r26
    1a9a:	db 0b       	sbc	r29, r27
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	09 94       	ijmp

00001aa8 <__epilogue_restores__>:
    1aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aaa:	39 88       	ldd	r3, Y+17	; 0x11
    1aac:	48 88       	ldd	r4, Y+16	; 0x10
    1aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aba:	b9 84       	ldd	r11, Y+9	; 0x09
    1abc:	c8 84       	ldd	r12, Y+8	; 0x08
    1abe:	df 80       	ldd	r13, Y+7	; 0x07
    1ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    1aca:	b9 81       	ldd	r27, Y+1	; 0x01
    1acc:	ce 0f       	add	r28, r30
    1ace:	d1 1d       	adc	r29, r1
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	ed 01       	movw	r28, r26
    1adc:	08 95       	ret

00001ade <fputs>:
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	7c 01       	movw	r14, r24
    1aec:	8b 01       	movw	r16, r22
    1aee:	db 01       	movw	r26, r22
    1af0:	13 96       	adiw	r26, 0x03	; 3
    1af2:	8c 91       	ld	r24, X
    1af4:	81 fd       	sbrc	r24, 1
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <fputs+0x20>
    1af8:	cf ef       	ldi	r28, 0xFF	; 255
    1afa:	df ef       	ldi	r29, 0xFF	; 255
    1afc:	13 c0       	rjmp	.+38     	; 0x1b24 <fputs+0x46>
    1afe:	c0 e0       	ldi	r28, 0x00	; 0
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	0b c0       	rjmp	.+22     	; 0x1b1a <fputs+0x3c>
    1b04:	d8 01       	movw	r26, r16
    1b06:	18 96       	adiw	r26, 0x08	; 8
    1b08:	ed 91       	ld	r30, X+
    1b0a:	fc 91       	ld	r31, X
    1b0c:	19 97       	sbiw	r26, 0x09	; 9
    1b0e:	b8 01       	movw	r22, r16
    1b10:	09 95       	icall
    1b12:	89 2b       	or	r24, r25
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <fputs+0x3c>
    1b16:	cf ef       	ldi	r28, 0xFF	; 255
    1b18:	df ef       	ldi	r29, 0xFF	; 255
    1b1a:	f7 01       	movw	r30, r14
    1b1c:	81 91       	ld	r24, Z+
    1b1e:	7f 01       	movw	r14, r30
    1b20:	88 23       	and	r24, r24
    1b22:	81 f7       	brne	.-32     	; 0x1b04 <fputs+0x26>
    1b24:	ce 01       	movw	r24, r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	e6 e0       	ldi	r30, 0x06	; 6
    1b2c:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__epilogue_restores__+0x18>

00001b30 <sprintf>:
    1b30:	ae e0       	ldi	r26, 0x0E	; 14
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ee e9       	ldi	r30, 0x9E	; 158
    1b36:	fd e0       	ldi	r31, 0x0D	; 13
    1b38:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__prologue_saves__+0x1c>
    1b3c:	0d 89       	ldd	r16, Y+21	; 0x15
    1b3e:	1e 89       	ldd	r17, Y+22	; 0x16
    1b40:	86 e0       	ldi	r24, 0x06	; 6
    1b42:	8c 83       	std	Y+4, r24	; 0x04
    1b44:	1a 83       	std	Y+2, r17	; 0x02
    1b46:	09 83       	std	Y+1, r16	; 0x01
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	9f e7       	ldi	r25, 0x7F	; 127
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	9e 01       	movw	r18, r28
    1b52:	27 5e       	subi	r18, 0xE7	; 231
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	6f 89       	ldd	r22, Y+23	; 0x17
    1b5c:	78 8d       	ldd	r23, Y+24	; 0x18
    1b5e:	a9 01       	movw	r20, r18
    1b60:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <vfprintf>
    1b64:	2f 81       	ldd	r18, Y+7	; 0x07
    1b66:	38 85       	ldd	r19, Y+8	; 0x08
    1b68:	02 0f       	add	r16, r18
    1b6a:	13 1f       	adc	r17, r19
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	10 82       	st	Z, r1
    1b70:	2e 96       	adiw	r28, 0x0e	; 14
    1b72:	e4 e0       	ldi	r30, 0x04	; 4
    1b74:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__epilogue_restores__+0x1c>

00001b78 <sin>:
    1b78:	9f 93       	push	r25
    1b7a:	82 d2       	rcall	.+1284   	; 0x2080 <__fp_rempio2>
    1b7c:	0f 90       	pop	r0
    1b7e:	07 fc       	sbrc	r0, 7
    1b80:	ee 5f       	subi	r30, 0xFE	; 254
    1b82:	a5 c2       	rjmp	.+1354   	; 0x20ce <__fp_sinus>

00001b84 <vfprintf>:
    1b84:	ab e0       	ldi	r26, 0x0B	; 11
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e8 ec       	ldi	r30, 0xC8	; 200
    1b8a:	fd e0       	ldi	r31, 0x0D	; 13
    1b8c:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__prologue_saves__>
    1b90:	3c 01       	movw	r6, r24
    1b92:	2b 01       	movw	r4, r22
    1b94:	5a 01       	movw	r10, r20
    1b96:	fc 01       	movw	r30, r24
    1b98:	17 82       	std	Z+7, r1	; 0x07
    1b9a:	16 82       	std	Z+6, r1	; 0x06
    1b9c:	83 81       	ldd	r24, Z+3	; 0x03
    1b9e:	81 fd       	sbrc	r24, 1
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <vfprintf+0x24>
    1ba2:	6f ef       	ldi	r22, 0xFF	; 255
    1ba4:	7f ef       	ldi	r23, 0xFF	; 255
    1ba6:	c6 c1       	rjmp	.+908    	; 0x1f34 <vfprintf+0x3b0>
    1ba8:	9a e0       	ldi	r25, 0x0A	; 10
    1baa:	89 2e       	mov	r8, r25
    1bac:	1e 01       	movw	r2, r28
    1bae:	08 94       	sec
    1bb0:	21 1c       	adc	r2, r1
    1bb2:	31 1c       	adc	r3, r1
    1bb4:	f3 01       	movw	r30, r6
    1bb6:	23 81       	ldd	r18, Z+3	; 0x03
    1bb8:	f2 01       	movw	r30, r4
    1bba:	23 fd       	sbrc	r18, 3
    1bbc:	85 91       	lpm	r24, Z+
    1bbe:	23 ff       	sbrs	r18, 3
    1bc0:	81 91       	ld	r24, Z+
    1bc2:	2f 01       	movw	r4, r30
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <vfprintf+0x46>
    1bc8:	b2 c1       	rjmp	.+868    	; 0x1f2e <vfprintf+0x3aa>
    1bca:	85 32       	cpi	r24, 0x25	; 37
    1bcc:	39 f4       	brne	.+14     	; 0x1bdc <vfprintf+0x58>
    1bce:	23 fd       	sbrc	r18, 3
    1bd0:	85 91       	lpm	r24, Z+
    1bd2:	23 ff       	sbrs	r18, 3
    1bd4:	81 91       	ld	r24, Z+
    1bd6:	2f 01       	movw	r4, r30
    1bd8:	85 32       	cpi	r24, 0x25	; 37
    1bda:	29 f4       	brne	.+10     	; 0x1be6 <vfprintf+0x62>
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	b3 01       	movw	r22, r6
    1be0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1be4:	e7 cf       	rjmp	.-50     	; 0x1bb4 <vfprintf+0x30>
    1be6:	98 2f       	mov	r25, r24
    1be8:	ff 24       	eor	r15, r15
    1bea:	ee 24       	eor	r14, r14
    1bec:	99 24       	eor	r9, r9
    1bee:	ff e1       	ldi	r31, 0x1F	; 31
    1bf0:	ff 15       	cp	r31, r15
    1bf2:	d0 f0       	brcs	.+52     	; 0x1c28 <vfprintf+0xa4>
    1bf4:	9b 32       	cpi	r25, 0x2B	; 43
    1bf6:	69 f0       	breq	.+26     	; 0x1c12 <vfprintf+0x8e>
    1bf8:	9c 32       	cpi	r25, 0x2C	; 44
    1bfa:	28 f4       	brcc	.+10     	; 0x1c06 <vfprintf+0x82>
    1bfc:	90 32       	cpi	r25, 0x20	; 32
    1bfe:	59 f0       	breq	.+22     	; 0x1c16 <vfprintf+0x92>
    1c00:	93 32       	cpi	r25, 0x23	; 35
    1c02:	91 f4       	brne	.+36     	; 0x1c28 <vfprintf+0xa4>
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <vfprintf+0x9e>
    1c06:	9d 32       	cpi	r25, 0x2D	; 45
    1c08:	49 f0       	breq	.+18     	; 0x1c1c <vfprintf+0x98>
    1c0a:	90 33       	cpi	r25, 0x30	; 48
    1c0c:	69 f4       	brne	.+26     	; 0x1c28 <vfprintf+0xa4>
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	24 c0       	rjmp	.+72     	; 0x1c5a <vfprintf+0xd6>
    1c12:	52 e0       	ldi	r21, 0x02	; 2
    1c14:	f5 2a       	or	r15, r21
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	f8 2a       	or	r15, r24
    1c1a:	28 c0       	rjmp	.+80     	; 0x1c6c <vfprintf+0xe8>
    1c1c:	98 e0       	ldi	r25, 0x08	; 8
    1c1e:	f9 2a       	or	r15, r25
    1c20:	25 c0       	rjmp	.+74     	; 0x1c6c <vfprintf+0xe8>
    1c22:	e0 e1       	ldi	r30, 0x10	; 16
    1c24:	fe 2a       	or	r15, r30
    1c26:	22 c0       	rjmp	.+68     	; 0x1c6c <vfprintf+0xe8>
    1c28:	f7 fc       	sbrc	r15, 7
    1c2a:	29 c0       	rjmp	.+82     	; 0x1c7e <vfprintf+0xfa>
    1c2c:	89 2f       	mov	r24, r25
    1c2e:	80 53       	subi	r24, 0x30	; 48
    1c30:	8a 30       	cpi	r24, 0x0A	; 10
    1c32:	70 f4       	brcc	.+28     	; 0x1c50 <vfprintf+0xcc>
    1c34:	f6 fe       	sbrs	r15, 6
    1c36:	05 c0       	rjmp	.+10     	; 0x1c42 <vfprintf+0xbe>
    1c38:	98 9c       	mul	r9, r8
    1c3a:	90 2c       	mov	r9, r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	98 0e       	add	r9, r24
    1c40:	15 c0       	rjmp	.+42     	; 0x1c6c <vfprintf+0xe8>
    1c42:	e8 9c       	mul	r14, r8
    1c44:	e0 2c       	mov	r14, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	e8 0e       	add	r14, r24
    1c4a:	f0 e2       	ldi	r31, 0x20	; 32
    1c4c:	ff 2a       	or	r15, r31
    1c4e:	0e c0       	rjmp	.+28     	; 0x1c6c <vfprintf+0xe8>
    1c50:	9e 32       	cpi	r25, 0x2E	; 46
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <vfprintf+0xda>
    1c54:	f6 fc       	sbrc	r15, 6
    1c56:	6b c1       	rjmp	.+726    	; 0x1f2e <vfprintf+0x3aa>
    1c58:	40 e4       	ldi	r20, 0x40	; 64
    1c5a:	f4 2a       	or	r15, r20
    1c5c:	07 c0       	rjmp	.+14     	; 0x1c6c <vfprintf+0xe8>
    1c5e:	9c 36       	cpi	r25, 0x6C	; 108
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <vfprintf+0xe4>
    1c62:	50 e8       	ldi	r21, 0x80	; 128
    1c64:	f5 2a       	or	r15, r21
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <vfprintf+0xe8>
    1c68:	98 36       	cpi	r25, 0x68	; 104
    1c6a:	49 f4       	brne	.+18     	; 0x1c7e <vfprintf+0xfa>
    1c6c:	f2 01       	movw	r30, r4
    1c6e:	23 fd       	sbrc	r18, 3
    1c70:	95 91       	lpm	r25, Z+
    1c72:	23 ff       	sbrs	r18, 3
    1c74:	91 91       	ld	r25, Z+
    1c76:	2f 01       	movw	r4, r30
    1c78:	99 23       	and	r25, r25
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <vfprintf+0xfa>
    1c7c:	b8 cf       	rjmp	.-144    	; 0x1bee <vfprintf+0x6a>
    1c7e:	89 2f       	mov	r24, r25
    1c80:	85 54       	subi	r24, 0x45	; 69
    1c82:	83 30       	cpi	r24, 0x03	; 3
    1c84:	18 f0       	brcs	.+6      	; 0x1c8c <vfprintf+0x108>
    1c86:	80 52       	subi	r24, 0x20	; 32
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	38 f4       	brcc	.+14     	; 0x1c9a <vfprintf+0x116>
    1c8c:	44 e0       	ldi	r20, 0x04	; 4
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	a4 0e       	add	r10, r20
    1c92:	b5 1e       	adc	r11, r21
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	59 83       	std	Y+1, r21	; 0x01
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <vfprintf+0x134>
    1c9a:	93 36       	cpi	r25, 0x63	; 99
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <vfprintf+0x126>
    1c9e:	93 37       	cpi	r25, 0x73	; 115
    1ca0:	79 f0       	breq	.+30     	; 0x1cc0 <vfprintf+0x13c>
    1ca2:	93 35       	cpi	r25, 0x53	; 83
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <vfprintf+0x124>
    1ca6:	56 c0       	rjmp	.+172    	; 0x1d54 <vfprintf+0x1d0>
    1ca8:	20 c0       	rjmp	.+64     	; 0x1cea <vfprintf+0x166>
    1caa:	f5 01       	movw	r30, r10
    1cac:	80 81       	ld	r24, Z
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	42 e0       	ldi	r20, 0x02	; 2
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	a4 0e       	add	r10, r20
    1cb6:	b5 1e       	adc	r11, r21
    1cb8:	61 01       	movw	r12, r2
    1cba:	01 e0       	ldi	r16, 0x01	; 1
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
    1cbe:	12 c0       	rjmp	.+36     	; 0x1ce4 <vfprintf+0x160>
    1cc0:	f5 01       	movw	r30, r10
    1cc2:	c0 80       	ld	r12, Z
    1cc4:	d1 80       	ldd	r13, Z+1	; 0x01
    1cc6:	f6 fc       	sbrc	r15, 6
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <vfprintf+0x14c>
    1cca:	6f ef       	ldi	r22, 0xFF	; 255
    1ccc:	7f ef       	ldi	r23, 0xFF	; 255
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0x150>
    1cd0:	69 2d       	mov	r22, r9
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	42 e0       	ldi	r20, 0x02	; 2
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	a4 0e       	add	r10, r20
    1cda:	b5 1e       	adc	r11, r21
    1cdc:	c6 01       	movw	r24, r12
    1cde:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <strnlen>
    1ce2:	8c 01       	movw	r16, r24
    1ce4:	5f e7       	ldi	r21, 0x7F	; 127
    1ce6:	f5 22       	and	r15, r21
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <vfprintf+0x18e>
    1cea:	f5 01       	movw	r30, r10
    1cec:	c0 80       	ld	r12, Z
    1cee:	d1 80       	ldd	r13, Z+1	; 0x01
    1cf0:	f6 fc       	sbrc	r15, 6
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfprintf+0x176>
    1cf4:	6f ef       	ldi	r22, 0xFF	; 255
    1cf6:	7f ef       	ldi	r23, 0xFF	; 255
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x17a>
    1cfa:	69 2d       	mov	r22, r9
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	a4 0e       	add	r10, r20
    1d04:	b5 1e       	adc	r11, r21
    1d06:	c6 01       	movw	r24, r12
    1d08:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <strnlen_P>
    1d0c:	8c 01       	movw	r16, r24
    1d0e:	50 e8       	ldi	r21, 0x80	; 128
    1d10:	f5 2a       	or	r15, r21
    1d12:	f3 fe       	sbrs	r15, 3
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <vfprintf+0x1a0>
    1d16:	1a c0       	rjmp	.+52     	; 0x1d4c <vfprintf+0x1c8>
    1d18:	80 e2       	ldi	r24, 0x20	; 32
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	b3 01       	movw	r22, r6
    1d1e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1d22:	ea 94       	dec	r14
    1d24:	8e 2d       	mov	r24, r14
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	08 17       	cp	r16, r24
    1d2a:	19 07       	cpc	r17, r25
    1d2c:	a8 f3       	brcs	.-22     	; 0x1d18 <vfprintf+0x194>
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <vfprintf+0x1c8>
    1d30:	f6 01       	movw	r30, r12
    1d32:	f7 fc       	sbrc	r15, 7
    1d34:	85 91       	lpm	r24, Z+
    1d36:	f7 fe       	sbrs	r15, 7
    1d38:	81 91       	ld	r24, Z+
    1d3a:	6f 01       	movw	r12, r30
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	b3 01       	movw	r22, r6
    1d40:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1d44:	e1 10       	cpse	r14, r1
    1d46:	ea 94       	dec	r14
    1d48:	01 50       	subi	r16, 0x01	; 1
    1d4a:	10 40       	sbci	r17, 0x00	; 0
    1d4c:	01 15       	cp	r16, r1
    1d4e:	11 05       	cpc	r17, r1
    1d50:	79 f7       	brne	.-34     	; 0x1d30 <vfprintf+0x1ac>
    1d52:	ea c0       	rjmp	.+468    	; 0x1f28 <vfprintf+0x3a4>
    1d54:	94 36       	cpi	r25, 0x64	; 100
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <vfprintf+0x1d8>
    1d58:	99 36       	cpi	r25, 0x69	; 105
    1d5a:	69 f5       	brne	.+90     	; 0x1db6 <vfprintf+0x232>
    1d5c:	f7 fe       	sbrs	r15, 7
    1d5e:	08 c0       	rjmp	.+16     	; 0x1d70 <vfprintf+0x1ec>
    1d60:	f5 01       	movw	r30, r10
    1d62:	20 81       	ld	r18, Z
    1d64:	31 81       	ldd	r19, Z+1	; 0x01
    1d66:	42 81       	ldd	r20, Z+2	; 0x02
    1d68:	53 81       	ldd	r21, Z+3	; 0x03
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <vfprintf+0x200>
    1d70:	f5 01       	movw	r30, r10
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	9c 01       	movw	r18, r24
    1d78:	44 27       	eor	r20, r20
    1d7a:	37 fd       	sbrc	r19, 7
    1d7c:	40 95       	com	r20
    1d7e:	54 2f       	mov	r21, r20
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a8 0e       	add	r10, r24
    1d86:	b9 1e       	adc	r11, r25
    1d88:	9f e6       	ldi	r25, 0x6F	; 111
    1d8a:	f9 22       	and	r15, r25
    1d8c:	57 ff       	sbrs	r21, 7
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <vfprintf+0x21e>
    1d90:	50 95       	com	r21
    1d92:	40 95       	com	r20
    1d94:	30 95       	com	r19
    1d96:	21 95       	neg	r18
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	e0 e8       	ldi	r30, 0x80	; 128
    1da0:	fe 2a       	or	r15, r30
    1da2:	ca 01       	movw	r24, r20
    1da4:	b9 01       	movw	r22, r18
    1da6:	a1 01       	movw	r20, r2
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__ultoa_invert>
    1db0:	d8 2e       	mov	r13, r24
    1db2:	d2 18       	sub	r13, r2
    1db4:	40 c0       	rjmp	.+128    	; 0x1e36 <vfprintf+0x2b2>
    1db6:	95 37       	cpi	r25, 0x75	; 117
    1db8:	29 f4       	brne	.+10     	; 0x1dc4 <vfprintf+0x240>
    1dba:	1f 2d       	mov	r17, r15
    1dbc:	1f 7e       	andi	r17, 0xEF	; 239
    1dbe:	2a e0       	ldi	r18, 0x0A	; 10
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	1d c0       	rjmp	.+58     	; 0x1dfe <vfprintf+0x27a>
    1dc4:	1f 2d       	mov	r17, r15
    1dc6:	19 7f       	andi	r17, 0xF9	; 249
    1dc8:	9f 36       	cpi	r25, 0x6F	; 111
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <vfprintf+0x260>
    1dcc:	90 37       	cpi	r25, 0x70	; 112
    1dce:	20 f4       	brcc	.+8      	; 0x1dd8 <vfprintf+0x254>
    1dd0:	98 35       	cpi	r25, 0x58	; 88
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <vfprintf+0x252>
    1dd4:	ac c0       	rjmp	.+344    	; 0x1f2e <vfprintf+0x3aa>
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <vfprintf+0x272>
    1dd8:	90 37       	cpi	r25, 0x70	; 112
    1dda:	39 f0       	breq	.+14     	; 0x1dea <vfprintf+0x266>
    1ddc:	98 37       	cpi	r25, 0x78	; 120
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <vfprintf+0x25e>
    1de0:	a6 c0       	rjmp	.+332    	; 0x1f2e <vfprintf+0x3aa>
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <vfprintf+0x268>
    1de4:	28 e0       	ldi	r18, 0x08	; 8
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	0a c0       	rjmp	.+20     	; 0x1dfe <vfprintf+0x27a>
    1dea:	10 61       	ori	r17, 0x10	; 16
    1dec:	14 fd       	sbrc	r17, 4
    1dee:	14 60       	ori	r17, 0x04	; 4
    1df0:	20 e1       	ldi	r18, 0x10	; 16
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <vfprintf+0x27a>
    1df6:	14 fd       	sbrc	r17, 4
    1df8:	16 60       	ori	r17, 0x06	; 6
    1dfa:	20 e1       	ldi	r18, 0x10	; 16
    1dfc:	32 e0       	ldi	r19, 0x02	; 2
    1dfe:	17 ff       	sbrs	r17, 7
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <vfprintf+0x28e>
    1e02:	f5 01       	movw	r30, r10
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	44 e0       	ldi	r20, 0x04	; 4
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <vfprintf+0x29e>
    1e12:	f5 01       	movw	r30, r10
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	bc 01       	movw	r22, r24
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	42 e0       	ldi	r20, 0x02	; 2
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	a4 0e       	add	r10, r20
    1e24:	b5 1e       	adc	r11, r21
    1e26:	a1 01       	movw	r20, r2
    1e28:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__ultoa_invert>
    1e2c:	d8 2e       	mov	r13, r24
    1e2e:	d2 18       	sub	r13, r2
    1e30:	8f e7       	ldi	r24, 0x7F	; 127
    1e32:	f8 2e       	mov	r15, r24
    1e34:	f1 22       	and	r15, r17
    1e36:	f6 fe       	sbrs	r15, 6
    1e38:	0b c0       	rjmp	.+22     	; 0x1e50 <vfprintf+0x2cc>
    1e3a:	5e ef       	ldi	r21, 0xFE	; 254
    1e3c:	f5 22       	and	r15, r21
    1e3e:	d9 14       	cp	r13, r9
    1e40:	38 f4       	brcc	.+14     	; 0x1e50 <vfprintf+0x2cc>
    1e42:	f4 fe       	sbrs	r15, 4
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <vfprintf+0x2d0>
    1e46:	f2 fc       	sbrc	r15, 2
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <vfprintf+0x2d0>
    1e4a:	8f ee       	ldi	r24, 0xEF	; 239
    1e4c:	f8 22       	and	r15, r24
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x2d0>
    1e50:	1d 2d       	mov	r17, r13
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <vfprintf+0x2d2>
    1e54:	19 2d       	mov	r17, r9
    1e56:	f4 fe       	sbrs	r15, 4
    1e58:	0d c0       	rjmp	.+26     	; 0x1e74 <vfprintf+0x2f0>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 0d       	add	r30, r13
    1e5e:	f1 1d       	adc	r31, r1
    1e60:	80 81       	ld	r24, Z
    1e62:	80 33       	cpi	r24, 0x30	; 48
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <vfprintf+0x2e8>
    1e66:	99 ee       	ldi	r25, 0xE9	; 233
    1e68:	f9 22       	and	r15, r25
    1e6a:	08 c0       	rjmp	.+16     	; 0x1e7c <vfprintf+0x2f8>
    1e6c:	1f 5f       	subi	r17, 0xFF	; 255
    1e6e:	f2 fe       	sbrs	r15, 2
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <vfprintf+0x2f8>
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <vfprintf+0x2f6>
    1e74:	8f 2d       	mov	r24, r15
    1e76:	86 78       	andi	r24, 0x86	; 134
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <vfprintf+0x2f8>
    1e7a:	1f 5f       	subi	r17, 0xFF	; 255
    1e7c:	0f 2d       	mov	r16, r15
    1e7e:	f3 fc       	sbrc	r15, 3
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <vfprintf+0x326>
    1e82:	f0 fe       	sbrs	r15, 0
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <vfprintf+0x320>
    1e86:	1e 15       	cp	r17, r14
    1e88:	10 f0       	brcs	.+4      	; 0x1e8e <vfprintf+0x30a>
    1e8a:	9d 2c       	mov	r9, r13
    1e8c:	0b c0       	rjmp	.+22     	; 0x1ea4 <vfprintf+0x320>
    1e8e:	9d 2c       	mov	r9, r13
    1e90:	9e 0c       	add	r9, r14
    1e92:	91 1a       	sub	r9, r17
    1e94:	1e 2d       	mov	r17, r14
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <vfprintf+0x320>
    1e98:	80 e2       	ldi	r24, 0x20	; 32
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	b3 01       	movw	r22, r6
    1e9e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1ea2:	1f 5f       	subi	r17, 0xFF	; 255
    1ea4:	1e 15       	cp	r17, r14
    1ea6:	c0 f3       	brcs	.-16     	; 0x1e98 <vfprintf+0x314>
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <vfprintf+0x32e>
    1eaa:	1e 15       	cp	r17, r14
    1eac:	10 f4       	brcc	.+4      	; 0x1eb2 <vfprintf+0x32e>
    1eae:	e1 1a       	sub	r14, r17
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <vfprintf+0x330>
    1eb2:	ee 24       	eor	r14, r14
    1eb4:	04 ff       	sbrs	r16, 4
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <vfprintf+0x352>
    1eb8:	80 e3       	ldi	r24, 0x30	; 48
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b3 01       	movw	r22, r6
    1ebe:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1ec2:	02 ff       	sbrs	r16, 2
    1ec4:	1d c0       	rjmp	.+58     	; 0x1f00 <vfprintf+0x37c>
    1ec6:	01 fd       	sbrc	r16, 1
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <vfprintf+0x34c>
    1eca:	88 e7       	ldi	r24, 0x78	; 120
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e c0       	rjmp	.+28     	; 0x1eec <vfprintf+0x368>
    1ed0:	88 e5       	ldi	r24, 0x58	; 88
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <vfprintf+0x368>
    1ed6:	80 2f       	mov	r24, r16
    1ed8:	86 78       	andi	r24, 0x86	; 134
    1eda:	91 f0       	breq	.+36     	; 0x1f00 <vfprintf+0x37c>
    1edc:	01 ff       	sbrs	r16, 1
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x360>
    1ee0:	8b e2       	ldi	r24, 0x2B	; 43
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <vfprintf+0x362>
    1ee4:	80 e2       	ldi	r24, 0x20	; 32
    1ee6:	f7 fc       	sbrc	r15, 7
    1ee8:	8d e2       	ldi	r24, 0x2D	; 45
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	b3 01       	movw	r22, r6
    1eee:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <vfprintf+0x37c>
    1ef4:	80 e3       	ldi	r24, 0x30	; 48
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	b3 01       	movw	r22, r6
    1efa:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1efe:	9a 94       	dec	r9
    1f00:	d9 14       	cp	r13, r9
    1f02:	c0 f3       	brcs	.-16     	; 0x1ef4 <vfprintf+0x370>
    1f04:	da 94       	dec	r13
    1f06:	f1 01       	movw	r30, r2
    1f08:	ed 0d       	add	r30, r13
    1f0a:	f1 1d       	adc	r31, r1
    1f0c:	80 81       	ld	r24, Z
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	b3 01       	movw	r22, r6
    1f12:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1f16:	dd 20       	and	r13, r13
    1f18:	a9 f7       	brne	.-22     	; 0x1f04 <vfprintf+0x380>
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0x3a4>
    1f1c:	80 e2       	ldi	r24, 0x20	; 32
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b3 01       	movw	r22, r6
    1f22:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <fputc>
    1f26:	ea 94       	dec	r14
    1f28:	ee 20       	and	r14, r14
    1f2a:	c1 f7       	brne	.-16     	; 0x1f1c <vfprintf+0x398>
    1f2c:	43 ce       	rjmp	.-890    	; 0x1bb4 <vfprintf+0x30>
    1f2e:	f3 01       	movw	r30, r6
    1f30:	66 81       	ldd	r22, Z+6	; 0x06
    1f32:	77 81       	ldd	r23, Z+7	; 0x07
    1f34:	cb 01       	movw	r24, r22
    1f36:	2b 96       	adiw	r28, 0x0b	; 11
    1f38:	e2 e1       	ldi	r30, 0x12	; 18
    1f3a:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__epilogue_restores__>

00001f3e <strnlen_P>:
    1f3e:	fc 01       	movw	r30, r24
    1f40:	05 90       	lpm	r0, Z+
    1f42:	61 50       	subi	r22, 0x01	; 1
    1f44:	70 40       	sbci	r23, 0x00	; 0
    1f46:	01 10       	cpse	r0, r1
    1f48:	d8 f7       	brcc	.-10     	; 0x1f40 <strnlen_P+0x2>
    1f4a:	80 95       	com	r24
    1f4c:	90 95       	com	r25
    1f4e:	8e 0f       	add	r24, r30
    1f50:	9f 1f       	adc	r25, r31
    1f52:	08 95       	ret

00001f54 <strnlen>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	61 50       	subi	r22, 0x01	; 1
    1f58:	70 40       	sbci	r23, 0x00	; 0
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	01 10       	cpse	r0, r1
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <strnlen+0x2>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	8e 0f       	add	r24, r30
    1f66:	9f 1f       	adc	r25, r31
    1f68:	08 95       	ret

00001f6a <fputc>:
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	8c 01       	movw	r16, r24
    1f74:	eb 01       	movw	r28, r22
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	81 ff       	sbrs	r24, 1
    1f7a:	1b c0       	rjmp	.+54     	; 0x1fb2 <fputc+0x48>
    1f7c:	82 ff       	sbrs	r24, 2
    1f7e:	0d c0       	rjmp	.+26     	; 0x1f9a <fputc+0x30>
    1f80:	2e 81       	ldd	r18, Y+6	; 0x06
    1f82:	3f 81       	ldd	r19, Y+7	; 0x07
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	28 17       	cp	r18, r24
    1f8a:	39 07       	cpc	r19, r25
    1f8c:	64 f4       	brge	.+24     	; 0x1fa6 <fputc+0x3c>
    1f8e:	e8 81       	ld	r30, Y
    1f90:	f9 81       	ldd	r31, Y+1	; 0x01
    1f92:	01 93       	st	Z+, r16
    1f94:	f9 83       	std	Y+1, r31	; 0x01
    1f96:	e8 83       	st	Y, r30
    1f98:	06 c0       	rjmp	.+12     	; 0x1fa6 <fputc+0x3c>
    1f9a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f9c:	f9 85       	ldd	r31, Y+9	; 0x09
    1f9e:	80 2f       	mov	r24, r16
    1fa0:	09 95       	icall
    1fa2:	89 2b       	or	r24, r25
    1fa4:	31 f4       	brne	.+12     	; 0x1fb2 <fputc+0x48>
    1fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa8:	9f 81       	ldd	r25, Y+7	; 0x07
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9f 83       	std	Y+7, r25	; 0x07
    1fae:	8e 83       	std	Y+6, r24	; 0x06
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <fputc+0x4c>
    1fb2:	0f ef       	ldi	r16, 0xFF	; 255
    1fb4:	1f ef       	ldi	r17, 0xFF	; 255
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	1f 91       	pop	r17
    1fbe:	0f 91       	pop	r16
    1fc0:	08 95       	ret

00001fc2 <__ultoa_invert>:
    1fc2:	fa 01       	movw	r30, r20
    1fc4:	aa 27       	eor	r26, r26
    1fc6:	28 30       	cpi	r18, 0x08	; 8
    1fc8:	51 f1       	breq	.+84     	; 0x201e <__ultoa_invert+0x5c>
    1fca:	20 31       	cpi	r18, 0x10	; 16
    1fcc:	81 f1       	breq	.+96     	; 0x202e <__ultoa_invert+0x6c>
    1fce:	e8 94       	clt
    1fd0:	6f 93       	push	r22
    1fd2:	6e 7f       	andi	r22, 0xFE	; 254
    1fd4:	6e 5f       	subi	r22, 0xFE	; 254
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	af 4f       	sbci	r26, 0xFF	; 255
    1fde:	b1 e0       	ldi	r27, 0x01	; 1
    1fe0:	3e d0       	rcall	.+124    	; 0x205e <__ultoa_invert+0x9c>
    1fe2:	b4 e0       	ldi	r27, 0x04	; 4
    1fe4:	3c d0       	rcall	.+120    	; 0x205e <__ultoa_invert+0x9c>
    1fe6:	67 0f       	add	r22, r23
    1fe8:	78 1f       	adc	r23, r24
    1fea:	89 1f       	adc	r24, r25
    1fec:	9a 1f       	adc	r25, r26
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	68 0f       	add	r22, r24
    1ff2:	79 1f       	adc	r23, r25
    1ff4:	8a 1f       	adc	r24, r26
    1ff6:	91 1d       	adc	r25, r1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	6a 0f       	add	r22, r26
    1ffc:	71 1d       	adc	r23, r1
    1ffe:	81 1d       	adc	r24, r1
    2000:	91 1d       	adc	r25, r1
    2002:	a1 1d       	adc	r26, r1
    2004:	20 d0       	rcall	.+64     	; 0x2046 <__ultoa_invert+0x84>
    2006:	09 f4       	brne	.+2      	; 0x200a <__ultoa_invert+0x48>
    2008:	68 94       	set
    200a:	3f 91       	pop	r19
    200c:	2a e0       	ldi	r18, 0x0A	; 10
    200e:	26 9f       	mul	r18, r22
    2010:	11 24       	eor	r1, r1
    2012:	30 19       	sub	r19, r0
    2014:	30 5d       	subi	r19, 0xD0	; 208
    2016:	31 93       	st	Z+, r19
    2018:	de f6       	brtc	.-74     	; 0x1fd0 <__ultoa_invert+0xe>
    201a:	cf 01       	movw	r24, r30
    201c:	08 95       	ret
    201e:	46 2f       	mov	r20, r22
    2020:	47 70       	andi	r20, 0x07	; 7
    2022:	40 5d       	subi	r20, 0xD0	; 208
    2024:	41 93       	st	Z+, r20
    2026:	b3 e0       	ldi	r27, 0x03	; 3
    2028:	0f d0       	rcall	.+30     	; 0x2048 <__ultoa_invert+0x86>
    202a:	c9 f7       	brne	.-14     	; 0x201e <__ultoa_invert+0x5c>
    202c:	f6 cf       	rjmp	.-20     	; 0x201a <__ultoa_invert+0x58>
    202e:	46 2f       	mov	r20, r22
    2030:	4f 70       	andi	r20, 0x0F	; 15
    2032:	40 5d       	subi	r20, 0xD0	; 208
    2034:	4a 33       	cpi	r20, 0x3A	; 58
    2036:	18 f0       	brcs	.+6      	; 0x203e <__ultoa_invert+0x7c>
    2038:	49 5d       	subi	r20, 0xD9	; 217
    203a:	31 fd       	sbrc	r19, 1
    203c:	40 52       	subi	r20, 0x20	; 32
    203e:	41 93       	st	Z+, r20
    2040:	02 d0       	rcall	.+4      	; 0x2046 <__ultoa_invert+0x84>
    2042:	a9 f7       	brne	.-22     	; 0x202e <__ultoa_invert+0x6c>
    2044:	ea cf       	rjmp	.-44     	; 0x201a <__ultoa_invert+0x58>
    2046:	b4 e0       	ldi	r27, 0x04	; 4
    2048:	a6 95       	lsr	r26
    204a:	97 95       	ror	r25
    204c:	87 95       	ror	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	ba 95       	dec	r27
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__ultoa_invert+0x86>
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	61 05       	cpc	r22, r1
    205a:	71 05       	cpc	r23, r1
    205c:	08 95       	ret
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	0a 2e       	mov	r0, r26
    2064:	06 94       	lsr	r0
    2066:	57 95       	ror	r21
    2068:	47 95       	ror	r20
    206a:	37 95       	ror	r19
    206c:	27 95       	ror	r18
    206e:	ba 95       	dec	r27
    2070:	c9 f7       	brne	.-14     	; 0x2064 <__ultoa_invert+0xa2>
    2072:	62 0f       	add	r22, r18
    2074:	73 1f       	adc	r23, r19
    2076:	84 1f       	adc	r24, r20
    2078:	95 1f       	adc	r25, r21
    207a:	a0 1d       	adc	r26, r0
    207c:	08 95       	ret
    207e:	ce c0       	rjmp	.+412    	; 0x221c <__fp_nan>

00002080 <__fp_rempio2>:
    2080:	3f d0       	rcall	.+126    	; 0x2100 <__fp_splitA>
    2082:	e8 f3       	brcs	.-6      	; 0x207e <__ultoa_invert+0xbc>
    2084:	e8 94       	clt
    2086:	e0 e0       	ldi	r30, 0x00	; 0
    2088:	bb 27       	eor	r27, r27
    208a:	9f 57       	subi	r25, 0x7F	; 127
    208c:	f0 f0       	brcs	.+60     	; 0x20ca <__fp_rempio2+0x4a>
    208e:	2a ed       	ldi	r18, 0xDA	; 218
    2090:	3f e0       	ldi	r19, 0x0F	; 15
    2092:	49 ec       	ldi	r20, 0xC9	; 201
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <__fp_rempio2+0x22>
    2096:	ee 0f       	add	r30, r30
    2098:	bb 0f       	add	r27, r27
    209a:	66 1f       	adc	r22, r22
    209c:	77 1f       	adc	r23, r23
    209e:	88 1f       	adc	r24, r24
    20a0:	28 f0       	brcs	.+10     	; 0x20ac <__fp_rempio2+0x2c>
    20a2:	b2 3a       	cpi	r27, 0xA2	; 162
    20a4:	62 07       	cpc	r22, r18
    20a6:	73 07       	cpc	r23, r19
    20a8:	84 07       	cpc	r24, r20
    20aa:	28 f0       	brcs	.+10     	; 0x20b6 <__fp_rempio2+0x36>
    20ac:	b2 5a       	subi	r27, 0xA2	; 162
    20ae:	62 0b       	sbc	r22, r18
    20b0:	73 0b       	sbc	r23, r19
    20b2:	84 0b       	sbc	r24, r20
    20b4:	e3 95       	inc	r30
    20b6:	9a 95       	dec	r25
    20b8:	72 f7       	brpl	.-36     	; 0x2096 <__fp_rempio2+0x16>
    20ba:	80 38       	cpi	r24, 0x80	; 128
    20bc:	30 f4       	brcc	.+12     	; 0x20ca <__fp_rempio2+0x4a>
    20be:	9a 95       	dec	r25
    20c0:	bb 0f       	add	r27, r27
    20c2:	66 1f       	adc	r22, r22
    20c4:	77 1f       	adc	r23, r23
    20c6:	88 1f       	adc	r24, r24
    20c8:	d2 f7       	brpl	.-12     	; 0x20be <__fp_rempio2+0x3e>
    20ca:	90 48       	sbci	r25, 0x80	; 128
    20cc:	9b c0       	rjmp	.+310    	; 0x2204 <__fp_mpack_finite>

000020ce <__fp_sinus>:
    20ce:	ef 93       	push	r30
    20d0:	e0 ff       	sbrs	r30, 0
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <__fp_sinus+0x12>
    20d4:	a2 ea       	ldi	r26, 0xA2	; 162
    20d6:	2a ed       	ldi	r18, 0xDA	; 218
    20d8:	3f e0       	ldi	r19, 0x0F	; 15
    20da:	49 ec       	ldi	r20, 0xC9	; 201
    20dc:	5f eb       	ldi	r21, 0xBF	; 191
    20de:	37 d0       	rcall	.+110    	; 0x214e <__addsf3x>
    20e0:	bf d0       	rcall	.+382    	; 0x2260 <__fp_round>
    20e2:	0f 90       	pop	r0
    20e4:	03 94       	inc	r0
    20e6:	01 fc       	sbrc	r0, 1
    20e8:	90 58       	subi	r25, 0x80	; 128
    20ea:	e0 e7       	ldi	r30, 0x70	; 112
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	99 c0       	rjmp	.+306    	; 0x2222 <__fp_powsodd>

000020f0 <__fp_split3>:
    20f0:	57 fd       	sbrc	r21, 7
    20f2:	90 58       	subi	r25, 0x80	; 128
    20f4:	44 0f       	add	r20, r20
    20f6:	55 1f       	adc	r21, r21
    20f8:	59 f0       	breq	.+22     	; 0x2110 <__fp_splitA+0x10>
    20fa:	5f 3f       	cpi	r21, 0xFF	; 255
    20fc:	71 f0       	breq	.+28     	; 0x211a <__fp_splitA+0x1a>
    20fe:	47 95       	ror	r20

00002100 <__fp_splitA>:
    2100:	88 0f       	add	r24, r24
    2102:	97 fb       	bst	r25, 7
    2104:	99 1f       	adc	r25, r25
    2106:	61 f0       	breq	.+24     	; 0x2120 <__fp_splitA+0x20>
    2108:	9f 3f       	cpi	r25, 0xFF	; 255
    210a:	79 f0       	breq	.+30     	; 0x212a <__fp_splitA+0x2a>
    210c:	87 95       	ror	r24
    210e:	08 95       	ret
    2110:	12 16       	cp	r1, r18
    2112:	13 06       	cpc	r1, r19
    2114:	14 06       	cpc	r1, r20
    2116:	55 1f       	adc	r21, r21
    2118:	f2 cf       	rjmp	.-28     	; 0x20fe <__fp_split3+0xe>
    211a:	46 95       	lsr	r20
    211c:	f1 df       	rcall	.-30     	; 0x2100 <__fp_splitA>
    211e:	08 c0       	rjmp	.+16     	; 0x2130 <__fp_splitA+0x30>
    2120:	16 16       	cp	r1, r22
    2122:	17 06       	cpc	r1, r23
    2124:	18 06       	cpc	r1, r24
    2126:	99 1f       	adc	r25, r25
    2128:	f1 cf       	rjmp	.-30     	; 0x210c <__fp_splitA+0xc>
    212a:	86 95       	lsr	r24
    212c:	71 05       	cpc	r23, r1
    212e:	61 05       	cpc	r22, r1
    2130:	08 94       	sec
    2132:	08 95       	ret
    2134:	87 d0       	rcall	.+270    	; 0x2244 <__fp_pscA>
    2136:	30 f0       	brcs	.+12     	; 0x2144 <__fp_splitA+0x44>
    2138:	8c d0       	rcall	.+280    	; 0x2252 <__fp_pscB>
    213a:	20 f0       	brcs	.+8      	; 0x2144 <__fp_splitA+0x44>
    213c:	31 f4       	brne	.+12     	; 0x214a <__fp_splitA+0x4a>
    213e:	9f 3f       	cpi	r25, 0xFF	; 255
    2140:	11 f4       	brne	.+4      	; 0x2146 <__fp_splitA+0x46>
    2142:	1e f4       	brtc	.+6      	; 0x214a <__fp_splitA+0x4a>
    2144:	6b c0       	rjmp	.+214    	; 0x221c <__fp_nan>
    2146:	0e f4       	brtc	.+2      	; 0x214a <__fp_splitA+0x4a>
    2148:	e0 95       	com	r30
    214a:	e7 fb       	bst	r30, 7
    214c:	53 c0       	rjmp	.+166    	; 0x21f4 <__fp_inf>

0000214e <__addsf3x>:
    214e:	e9 2f       	mov	r30, r25
    2150:	cf df       	rcall	.-98     	; 0x20f0 <__fp_split3>
    2152:	80 f3       	brcs	.-32     	; 0x2134 <__fp_splitA+0x34>
    2154:	ba 17       	cp	r27, r26
    2156:	62 07       	cpc	r22, r18
    2158:	73 07       	cpc	r23, r19
    215a:	84 07       	cpc	r24, r20
    215c:	95 07       	cpc	r25, r21
    215e:	18 f0       	brcs	.+6      	; 0x2166 <__addsf3x+0x18>
    2160:	71 f4       	brne	.+28     	; 0x217e <__addsf3x+0x30>
    2162:	9e f5       	brtc	.+102    	; 0x21ca <__addsf3x+0x7c>
    2164:	8e c0       	rjmp	.+284    	; 0x2282 <__fp_zero>
    2166:	0e f4       	brtc	.+2      	; 0x216a <__addsf3x+0x1c>
    2168:	e0 95       	com	r30
    216a:	0b 2e       	mov	r0, r27
    216c:	ba 2f       	mov	r27, r26
    216e:	a0 2d       	mov	r26, r0
    2170:	0b 01       	movw	r0, r22
    2172:	b9 01       	movw	r22, r18
    2174:	90 01       	movw	r18, r0
    2176:	0c 01       	movw	r0, r24
    2178:	ca 01       	movw	r24, r20
    217a:	a0 01       	movw	r20, r0
    217c:	11 24       	eor	r1, r1
    217e:	ff 27       	eor	r31, r31
    2180:	59 1b       	sub	r21, r25
    2182:	99 f0       	breq	.+38     	; 0x21aa <__addsf3x+0x5c>
    2184:	59 3f       	cpi	r21, 0xF9	; 249
    2186:	50 f4       	brcc	.+20     	; 0x219c <__addsf3x+0x4e>
    2188:	50 3e       	cpi	r21, 0xE0	; 224
    218a:	68 f1       	brcs	.+90     	; 0x21e6 <__addsf3x+0x98>
    218c:	1a 16       	cp	r1, r26
    218e:	f0 40       	sbci	r31, 0x00	; 0
    2190:	a2 2f       	mov	r26, r18
    2192:	23 2f       	mov	r18, r19
    2194:	34 2f       	mov	r19, r20
    2196:	44 27       	eor	r20, r20
    2198:	58 5f       	subi	r21, 0xF8	; 248
    219a:	f3 cf       	rjmp	.-26     	; 0x2182 <__addsf3x+0x34>
    219c:	46 95       	lsr	r20
    219e:	37 95       	ror	r19
    21a0:	27 95       	ror	r18
    21a2:	a7 95       	ror	r26
    21a4:	f0 40       	sbci	r31, 0x00	; 0
    21a6:	53 95       	inc	r21
    21a8:	c9 f7       	brne	.-14     	; 0x219c <__addsf3x+0x4e>
    21aa:	7e f4       	brtc	.+30     	; 0x21ca <__addsf3x+0x7c>
    21ac:	1f 16       	cp	r1, r31
    21ae:	ba 0b       	sbc	r27, r26
    21b0:	62 0b       	sbc	r22, r18
    21b2:	73 0b       	sbc	r23, r19
    21b4:	84 0b       	sbc	r24, r20
    21b6:	ba f0       	brmi	.+46     	; 0x21e6 <__addsf3x+0x98>
    21b8:	91 50       	subi	r25, 0x01	; 1
    21ba:	a1 f0       	breq	.+40     	; 0x21e4 <__addsf3x+0x96>
    21bc:	ff 0f       	add	r31, r31
    21be:	bb 1f       	adc	r27, r27
    21c0:	66 1f       	adc	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	c2 f7       	brpl	.-16     	; 0x21b8 <__addsf3x+0x6a>
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <__addsf3x+0x98>
    21ca:	ba 0f       	add	r27, r26
    21cc:	62 1f       	adc	r22, r18
    21ce:	73 1f       	adc	r23, r19
    21d0:	84 1f       	adc	r24, r20
    21d2:	48 f4       	brcc	.+18     	; 0x21e6 <__addsf3x+0x98>
    21d4:	87 95       	ror	r24
    21d6:	77 95       	ror	r23
    21d8:	67 95       	ror	r22
    21da:	b7 95       	ror	r27
    21dc:	f7 95       	ror	r31
    21de:	9e 3f       	cpi	r25, 0xFE	; 254
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <__addsf3x+0x96>
    21e2:	b3 cf       	rjmp	.-154    	; 0x214a <__fp_splitA+0x4a>
    21e4:	93 95       	inc	r25
    21e6:	88 0f       	add	r24, r24
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <__addsf3x+0x9e>
    21ea:	99 27       	eor	r25, r25
    21ec:	ee 0f       	add	r30, r30
    21ee:	97 95       	ror	r25
    21f0:	87 95       	ror	r24
    21f2:	08 95       	ret

000021f4 <__fp_inf>:
    21f4:	97 f9       	bld	r25, 7
    21f6:	9f 67       	ori	r25, 0x7F	; 127
    21f8:	80 e8       	ldi	r24, 0x80	; 128
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	08 95       	ret

00002200 <__fp_mpack>:
    2200:	9f 3f       	cpi	r25, 0xFF	; 255
    2202:	31 f0       	breq	.+12     	; 0x2210 <__fp_mpack_finite+0xc>

00002204 <__fp_mpack_finite>:
    2204:	91 50       	subi	r25, 0x01	; 1
    2206:	20 f4       	brcc	.+8      	; 0x2210 <__fp_mpack_finite+0xc>
    2208:	87 95       	ror	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	88 0f       	add	r24, r24
    2212:	91 1d       	adc	r25, r1
    2214:	96 95       	lsr	r25
    2216:	87 95       	ror	r24
    2218:	97 f9       	bld	r25, 7
    221a:	08 95       	ret

0000221c <__fp_nan>:
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	80 ec       	ldi	r24, 0xC0	; 192
    2220:	08 95       	ret

00002222 <__fp_powsodd>:
    2222:	9f 93       	push	r25
    2224:	8f 93       	push	r24
    2226:	7f 93       	push	r23
    2228:	6f 93       	push	r22
    222a:	ff 93       	push	r31
    222c:	ef 93       	push	r30
    222e:	9b 01       	movw	r18, r22
    2230:	ac 01       	movw	r20, r24
    2232:	0b d8       	rcall	.-4074   	; 0x124a <__mulsf3>
    2234:	ef 91       	pop	r30
    2236:	ff 91       	pop	r31
    2238:	2b d0       	rcall	.+86     	; 0x2290 <__fp_powser>
    223a:	2f 91       	pop	r18
    223c:	3f 91       	pop	r19
    223e:	4f 91       	pop	r20
    2240:	5f 91       	pop	r21
    2242:	03 c8       	rjmp	.-4090   	; 0x124a <__mulsf3>

00002244 <__fp_pscA>:
    2244:	00 24       	eor	r0, r0
    2246:	0a 94       	dec	r0
    2248:	16 16       	cp	r1, r22
    224a:	17 06       	cpc	r1, r23
    224c:	18 06       	cpc	r1, r24
    224e:	09 06       	cpc	r0, r25
    2250:	08 95       	ret

00002252 <__fp_pscB>:
    2252:	00 24       	eor	r0, r0
    2254:	0a 94       	dec	r0
    2256:	12 16       	cp	r1, r18
    2258:	13 06       	cpc	r1, r19
    225a:	14 06       	cpc	r1, r20
    225c:	05 06       	cpc	r0, r21
    225e:	08 95       	ret

00002260 <__fp_round>:
    2260:	09 2e       	mov	r0, r25
    2262:	03 94       	inc	r0
    2264:	00 0c       	add	r0, r0
    2266:	11 f4       	brne	.+4      	; 0x226c <__fp_round+0xc>
    2268:	88 23       	and	r24, r24
    226a:	52 f0       	brmi	.+20     	; 0x2280 <__fp_round+0x20>
    226c:	bb 0f       	add	r27, r27
    226e:	40 f4       	brcc	.+16     	; 0x2280 <__fp_round+0x20>
    2270:	bf 2b       	or	r27, r31
    2272:	11 f4       	brne	.+4      	; 0x2278 <__fp_round+0x18>
    2274:	60 ff       	sbrs	r22, 0
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <__fp_round+0x20>
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8f 4f       	sbci	r24, 0xFF	; 255
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	08 95       	ret

00002282 <__fp_zero>:
    2282:	e8 94       	clt

00002284 <__fp_szero>:
    2284:	bb 27       	eor	r27, r27
    2286:	66 27       	eor	r22, r22
    2288:	77 27       	eor	r23, r23
    228a:	cb 01       	movw	r24, r22
    228c:	97 f9       	bld	r25, 7
    228e:	08 95       	ret

00002290 <__fp_powser>:
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	1f 93       	push	r17
    2296:	0f 93       	push	r16
    2298:	ff 92       	push	r15
    229a:	ef 92       	push	r14
    229c:	df 92       	push	r13
    229e:	7b 01       	movw	r14, r22
    22a0:	8c 01       	movw	r16, r24
    22a2:	68 94       	set
    22a4:	05 c0       	rjmp	.+10     	; 0x22b0 <__fp_powser+0x20>
    22a6:	da 2e       	mov	r13, r26
    22a8:	ef 01       	movw	r28, r30
    22aa:	21 d0       	rcall	.+66     	; 0x22ee <__mulsf3x>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e8 94       	clt
    22b0:	a5 91       	lpm	r26, Z+
    22b2:	25 91       	lpm	r18, Z+
    22b4:	35 91       	lpm	r19, Z+
    22b6:	45 91       	lpm	r20, Z+
    22b8:	55 91       	lpm	r21, Z+
    22ba:	ae f3       	brts	.-22     	; 0x22a6 <__fp_powser+0x16>
    22bc:	ef 01       	movw	r28, r30
    22be:	47 df       	rcall	.-370    	; 0x214e <__addsf3x>
    22c0:	fe 01       	movw	r30, r28
    22c2:	97 01       	movw	r18, r14
    22c4:	a8 01       	movw	r20, r16
    22c6:	da 94       	dec	r13
    22c8:	79 f7       	brne	.-34     	; 0x22a8 <__fp_powser+0x18>
    22ca:	df 90       	pop	r13
    22cc:	ef 90       	pop	r14
    22ce:	ff 90       	pop	r15
    22d0:	0f 91       	pop	r16
    22d2:	1f 91       	pop	r17
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret
    22da:	b4 df       	rcall	.-152    	; 0x2244 <__fp_pscA>
    22dc:	28 f0       	brcs	.+10     	; 0x22e8 <__fp_powser+0x58>
    22de:	b9 df       	rcall	.-142    	; 0x2252 <__fp_pscB>
    22e0:	18 f0       	brcs	.+6      	; 0x22e8 <__fp_powser+0x58>
    22e2:	95 23       	and	r25, r21
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <__fp_powser+0x58>
    22e6:	86 cf       	rjmp	.-244    	; 0x21f4 <__fp_inf>
    22e8:	99 cf       	rjmp	.-206    	; 0x221c <__fp_nan>
    22ea:	11 24       	eor	r1, r1
    22ec:	cb cf       	rjmp	.-106    	; 0x2284 <__fp_szero>

000022ee <__mulsf3x>:
    22ee:	00 df       	rcall	.-512    	; 0x20f0 <__fp_split3>
    22f0:	a0 f3       	brcs	.-24     	; 0x22da <__fp_powser+0x4a>

000022f2 <__mulsf3_pse>:
    22f2:	95 9f       	mul	r25, r21
    22f4:	d1 f3       	breq	.-12     	; 0x22ea <__fp_powser+0x5a>
    22f6:	95 0f       	add	r25, r21
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	55 1f       	adc	r21, r21
    22fc:	62 9f       	mul	r22, r18
    22fe:	f0 01       	movw	r30, r0
    2300:	72 9f       	mul	r23, r18
    2302:	bb 27       	eor	r27, r27
    2304:	f0 0d       	add	r31, r0
    2306:	b1 1d       	adc	r27, r1
    2308:	63 9f       	mul	r22, r19
    230a:	aa 27       	eor	r26, r26
    230c:	f0 0d       	add	r31, r0
    230e:	b1 1d       	adc	r27, r1
    2310:	aa 1f       	adc	r26, r26
    2312:	64 9f       	mul	r22, r20
    2314:	66 27       	eor	r22, r22
    2316:	b0 0d       	add	r27, r0
    2318:	a1 1d       	adc	r26, r1
    231a:	66 1f       	adc	r22, r22
    231c:	82 9f       	mul	r24, r18
    231e:	22 27       	eor	r18, r18
    2320:	b0 0d       	add	r27, r0
    2322:	a1 1d       	adc	r26, r1
    2324:	62 1f       	adc	r22, r18
    2326:	73 9f       	mul	r23, r19
    2328:	b0 0d       	add	r27, r0
    232a:	a1 1d       	adc	r26, r1
    232c:	62 1f       	adc	r22, r18
    232e:	83 9f       	mul	r24, r19
    2330:	a0 0d       	add	r26, r0
    2332:	61 1d       	adc	r22, r1
    2334:	22 1f       	adc	r18, r18
    2336:	74 9f       	mul	r23, r20
    2338:	33 27       	eor	r19, r19
    233a:	a0 0d       	add	r26, r0
    233c:	61 1d       	adc	r22, r1
    233e:	23 1f       	adc	r18, r19
    2340:	84 9f       	mul	r24, r20
    2342:	60 0d       	add	r22, r0
    2344:	21 1d       	adc	r18, r1
    2346:	82 2f       	mov	r24, r18
    2348:	76 2f       	mov	r23, r22
    234a:	6a 2f       	mov	r22, r26
    234c:	11 24       	eor	r1, r1
    234e:	9f 57       	subi	r25, 0x7F	; 127
    2350:	50 40       	sbci	r21, 0x00	; 0
    2352:	8a f0       	brmi	.+34     	; 0x2376 <__mulsf3_pse+0x84>
    2354:	e1 f0       	breq	.+56     	; 0x238e <__mulsf3_pse+0x9c>
    2356:	88 23       	and	r24, r24
    2358:	4a f0       	brmi	.+18     	; 0x236c <__mulsf3_pse+0x7a>
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	bb 1f       	adc	r27, r27
    2360:	66 1f       	adc	r22, r22
    2362:	77 1f       	adc	r23, r23
    2364:	88 1f       	adc	r24, r24
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	a9 f7       	brne	.-22     	; 0x2356 <__mulsf3_pse+0x64>
    236c:	9e 3f       	cpi	r25, 0xFE	; 254
    236e:	51 05       	cpc	r21, r1
    2370:	70 f0       	brcs	.+28     	; 0x238e <__mulsf3_pse+0x9c>
    2372:	40 cf       	rjmp	.-384    	; 0x21f4 <__fp_inf>
    2374:	87 cf       	rjmp	.-242    	; 0x2284 <__fp_szero>
    2376:	5f 3f       	cpi	r21, 0xFF	; 255
    2378:	ec f3       	brlt	.-6      	; 0x2374 <__mulsf3_pse+0x82>
    237a:	98 3e       	cpi	r25, 0xE8	; 232
    237c:	dc f3       	brlt	.-10     	; 0x2374 <__mulsf3_pse+0x82>
    237e:	86 95       	lsr	r24
    2380:	77 95       	ror	r23
    2382:	67 95       	ror	r22
    2384:	b7 95       	ror	r27
    2386:	f7 95       	ror	r31
    2388:	e7 95       	ror	r30
    238a:	9f 5f       	subi	r25, 0xFF	; 255
    238c:	c1 f7       	brne	.-16     	; 0x237e <__mulsf3_pse+0x8c>
    238e:	fe 2b       	or	r31, r30
    2390:	88 0f       	add	r24, r24
    2392:	91 1d       	adc	r25, r1
    2394:	96 95       	lsr	r25
    2396:	87 95       	ror	r24
    2398:	97 f9       	bld	r25, 7
    239a:	08 95       	ret

0000239c <_exit>:
    239c:	f8 94       	cli

0000239e <__stop_program>:
    239e:	ff cf       	rjmp	.-2      	; 0x239e <__stop_program>
