
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00002264  000022f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  0080022e  0080022e  00002426  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006e2  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d75  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013eb  00000000  00000000  00005a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bfc  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00008a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000798  00000000  00000000  00008dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001048  00000000  00000000  0000956c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a5b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <LCDdefinechar+0x38>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDMainFrequency>:
      bb:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000c7 <LCDMainDecay>:
      c7:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000d4 <LCDMainRise>:
      d4:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000e0 <LCDFMFreq>:
      e0:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000ea <LCDFMDepth>:
      ea:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

000000f5 <LCDFMDecay>:
      f5:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

00000100 <LCDVoice>:
     100:	56 4f 49 43 45 20 00 00                             VOICE ..

00000108 <LcdCustomChar>:
     108:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     118:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     128:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     138:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e4 e6       	ldi	r30, 0x64	; 100
     15c:	f2 e2       	ldi	r31, 0x22	; 34
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	ae 32       	cpi	r26, 0x2E	; 46
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	13 e0       	ldi	r17, 0x03	; 3
     16c:	ae e2       	ldi	r26, 0x2E	; 46
     16e:	b2 e0       	ldi	r27, 0x02	; 2
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a2 3c       	cpi	r26, 0xC2	; 194
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
     17e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <__vector_13>:
void initLCD(void);
void updateLCD();
void updateManual(void);

ISR (TIMER1_COMPA_vect) // Fs = 8000
{ 
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	4f 93       	push	r20
     196:	5f 93       	push	r21
     198:	6f 93       	push	r22
     19a:	7f 93       	push	r23
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	ef 93       	push	r30
     1a2:	ff 93       	push	r31
	// turn on timer for profiling
	TCNT2 = 0; TCCR2B = 1;
     1a4:	10 92 b2 00 	sts	0x00B2, r1
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 b1 00 	sts	0x00B1, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if ((time & 0x0ff) == 0) {
     1ae:	80 91 b2 03 	lds	r24, 0x03B2
     1b2:	90 91 b3 03 	lds	r25, 0x03B3
     1b6:	88 23       	and	r24, r24
     1b8:	09 f0       	breq	.+2      	; 0x1bc <__vector_13+0x36>
     1ba:	3f c0       	rjmp	.+126    	; 0x23a <__vector_13+0xb4>
		amp_fall_main = amp_fall_main - (amp_fall_main>>decay_main) ;
     1bc:	20 91 93 02 	lds	r18, 0x0293
     1c0:	30 91 94 02 	lds	r19, 0x0294
     1c4:	80 91 93 02 	lds	r24, 0x0293
     1c8:	90 91 94 02 	lds	r25, 0x0294
     1cc:	40 91 87 02 	lds	r20, 0x0287
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_13+0x50>
     1d2:	96 95       	lsr	r25
     1d4:	87 95       	ror	r24
     1d6:	4a 95       	dec	r20
     1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <__vector_13+0x4c>
     1da:	28 1b       	sub	r18, r24
     1dc:	39 0b       	sbc	r19, r25
     1de:	30 93 94 02 	sts	0x0294, r19
     1e2:	20 93 93 02 	sts	0x0293, r18
		rise_phase_main = rise_phase_main - (rise_phase_main>>rise_main);
     1e6:	20 91 97 03 	lds	r18, 0x0397
     1ea:	30 91 98 03 	lds	r19, 0x0398
     1ee:	80 91 97 03 	lds	r24, 0x0397
     1f2:	90 91 98 03 	lds	r25, 0x0398
     1f6:	40 91 84 02 	lds	r20, 0x0284
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__vector_13+0x7a>
     1fc:	96 95       	lsr	r25
     1fe:	87 95       	ror	r24
     200:	4a 95       	dec	r20
     202:	e2 f7       	brpl	.-8      	; 0x1fc <__vector_13+0x76>
     204:	28 1b       	sub	r18, r24
     206:	39 0b       	sbc	r19, r25
     208:	30 93 98 03 	sts	0x0398, r19
     20c:	20 93 97 03 	sts	0x0397, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1 = amp_fm1 - (amp_fm1>>decay_fm1) ;
     210:	20 91 8a 02 	lds	r18, 0x028A
     214:	30 91 8b 02 	lds	r19, 0x028B
     218:	80 91 8a 02 	lds	r24, 0x028A
     21c:	90 91 8b 02 	lds	r25, 0x028B
     220:	40 91 b7 03 	lds	r20, 0x03B7
     224:	02 c0       	rjmp	.+4      	; 0x22a <__vector_13+0xa4>
     226:	96 95       	lsr	r25
     228:	87 95       	ror	r24
     22a:	4a 95       	dec	r20
     22c:	e2 f7       	brpl	.-8      	; 0x226 <__vector_13+0xa0>
     22e:	28 1b       	sub	r18, r24
     230:	39 0b       	sbc	r19, r25
     232:	30 93 8b 02 	sts	0x028B, r19
     236:	20 93 8a 02 	sts	0x028A, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main =  max_amp - rise_phase_main;
     23a:	80 91 97 03 	lds	r24, 0x0397
     23e:	90 91 98 03 	lds	r25, 0x0398
     242:	4f ef       	ldi	r20, 0xFF	; 255
     244:	5f e7       	ldi	r21, 0x7F	; 127
     246:	9a 01       	movw	r18, r20
     248:	28 1b       	sub	r18, r24
     24a:	39 0b       	sbc	r19, r25
     24c:	30 93 b6 03 	sts	0x03B6, r19
     250:	20 93 b5 03 	sts	0x03B5, r18
	// product of rise and fall exponentials is the amplitude envelope
	amp_main = (amp_rise_main>>8) * (amp_fall_main>>8) ;
     254:	20 91 b5 03 	lds	r18, 0x03B5
     258:	30 91 b6 03 	lds	r19, 0x03B6
     25c:	80 91 93 02 	lds	r24, 0x0293
     260:	90 91 94 02 	lds	r25, 0x0294
     264:	89 2f       	mov	r24, r25
     266:	99 27       	eor	r25, r25
     268:	23 2f       	mov	r18, r19
     26a:	33 27       	eor	r19, r19
     26c:	bc 01       	movw	r22, r24
     26e:	62 9f       	mul	r22, r18
     270:	c0 01       	movw	r24, r0
     272:	63 9f       	mul	r22, r19
     274:	90 0d       	add	r25, r0
     276:	72 9f       	mul	r23, r18
     278:	90 0d       	add	r25, r0
     27a:	11 24       	eor	r1, r1
     27c:	90 93 b0 03 	sts	0x03B0, r25
     280:	80 93 af 03 	sts	0x03AF, r24

	// Init the synth
	if (pluck==1) {
     284:	80 91 89 02 	lds	r24, 0x0289
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	d1 f4       	brne	.+52     	; 0x2c0 <__vector_13+0x13a>
		amp_fall_main = max_amp; 
     28c:	50 93 94 02 	sts	0x0294, r21
     290:	40 93 93 02 	sts	0x0293, r20
		rise_phase_main = max_amp ;
     294:	50 93 98 03 	sts	0x0398, r21
     298:	40 93 97 03 	sts	0x0397, r20
		amp_rise_main = 0 ;
     29c:	10 92 b6 03 	sts	0x03B6, r1
     2a0:	10 92 b5 03 	sts	0x03B5, r1
		amp_fm1 = max_amp ;
     2a4:	50 93 8b 02 	sts	0x028B, r21
     2a8:	40 93 8a 02 	sts	0x028A, r20
		// phase lock the synth
		acc_fm1 = 0 ;
     2ac:	10 92 90 02 	sts	0x0290, r1
     2b0:	10 92 8f 02 	sts	0x028F, r1
		acc_main = 0;
     2b4:	10 92 86 02 	sts	0x0286, r1
     2b8:	10 92 85 02 	sts	0x0285, r1
		pluck = 0;
     2bc:	10 92 89 02 	sts	0x0289, r1
	}

	//the FM DDR -- feeds into final DDR
	acc_fm1 = acc_fm1 + inc_fm1 ;
     2c0:	20 91 8f 02 	lds	r18, 0x028F
     2c4:	30 91 90 02 	lds	r19, 0x0290
     2c8:	80 91 ac 03 	lds	r24, 0x03AC
     2cc:	90 91 ad 03 	lds	r25, 0x03AD
     2d0:	82 0f       	add	r24, r18
     2d2:	93 1f       	adc	r25, r19
     2d4:	90 93 90 02 	sts	0x0290, r25
     2d8:	80 93 8f 02 	sts	0x028F, r24
	high_fm1 = (char)(acc_fm1 >> 8) ;
     2dc:	80 91 8f 02 	lds	r24, 0x028F
     2e0:	90 91 90 02 	lds	r25, 0x0290
     2e4:	90 93 b8 03 	sts	0x03B8, r25
	fm1 = sineTable[high_fm1] ;
     2e8:	e0 91 b8 03 	lds	r30, 0x03B8
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	e9 56       	subi	r30, 0x69	; 105
     2f0:	fd 4f       	sbci	r31, 0xFD	; 253
     2f2:	40 81       	ld	r20, Z
     2f4:	40 93 91 02 	sts	0x0291, r20

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main = acc_main + (inc_main + (fm1*(amp_fm1>>depth_fm1))) ;
     2f8:	60 91 85 02 	lds	r22, 0x0285
     2fc:	70 91 86 02 	lds	r23, 0x0286
     300:	20 91 8d 02 	lds	r18, 0x028D
     304:	30 91 8e 02 	lds	r19, 0x028E
     308:	80 91 8a 02 	lds	r24, 0x028A
     30c:	90 91 8b 02 	lds	r25, 0x028B
     310:	e0 91 8c 02 	lds	r30, 0x028C
     314:	26 0f       	add	r18, r22
     316:	37 1f       	adc	r19, r23
     318:	55 27       	eor	r21, r21
     31a:	47 fd       	sbrc	r20, 7
     31c:	50 95       	com	r21
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_13+0x19e>
     320:	96 95       	lsr	r25
     322:	87 95       	ror	r24
     324:	ea 95       	dec	r30
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_13+0x19a>
     328:	bc 01       	movw	r22, r24
     32a:	46 9f       	mul	r20, r22
     32c:	c0 01       	movw	r24, r0
     32e:	47 9f       	mul	r20, r23
     330:	90 0d       	add	r25, r0
     332:	56 9f       	mul	r21, r22
     334:	90 0d       	add	r25, r0
     336:	11 24       	eor	r1, r1
     338:	28 0f       	add	r18, r24
     33a:	39 1f       	adc	r19, r25
     33c:	30 93 86 02 	sts	0x0286, r19
     340:	20 93 85 02 	sts	0x0285, r18
	high_main = (char)(acc_main >> 8) ;
     344:	80 91 85 02 	lds	r24, 0x0285
     348:	90 91 86 02 	lds	r25, 0x0286
     34c:	90 93 b1 03 	sts	0x03B1, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	OCR0A = 128 + (((amp_main>>8) * (int)sineTable[high_main])>>7) ;
     350:	20 91 af 03 	lds	r18, 0x03AF
     354:	30 91 b0 03 	lds	r19, 0x03B0
     358:	e0 91 b1 03 	lds	r30, 0x03B1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	e9 56       	subi	r30, 0x69	; 105
     360:	fd 4f       	sbci	r31, 0xFD	; 253
     362:	80 81       	ld	r24, Z
     364:	99 27       	eor	r25, r25
     366:	87 fd       	sbrc	r24, 7
     368:	90 95       	com	r25
     36a:	23 2f       	mov	r18, r19
     36c:	33 27       	eor	r19, r19
     36e:	ac 01       	movw	r20, r24
     370:	42 9f       	mul	r20, r18
     372:	c0 01       	movw	r24, r0
     374:	43 9f       	mul	r20, r19
     376:	90 0d       	add	r25, r0
     378:	52 9f       	mul	r21, r18
     37a:	90 0d       	add	r25, r0
     37c:	11 24       	eor	r1, r1
     37e:	88 0f       	add	r24, r24
     380:	89 2f       	mov	r24, r25
     382:	88 1f       	adc	r24, r24
     384:	99 0b       	sbc	r25, r25
     386:	91 95       	neg	r25
     388:	80 58       	subi	r24, 0x80	; 128
     38a:	87 bd       	out	0x27, r24	; 39
	
	time++;     //ticks at 8 KHz 
     38c:	80 91 b2 03 	lds	r24, 0x03B2
     390:	90 91 b3 03 	lds	r25, 0x03B3
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	90 93 b3 03 	sts	0x03B3, r25
     39a:	80 93 b2 03 	sts	0x03B2, r24
	// profiling 
	TCCR2B = 0;
     39e:	10 92 b1 00 	sts	0x00B1, r1
} 
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <updateManual>:
	LCDstring(LCDBuffer, 1);
}

void updateManual(void){

}
     3c0:	08 95       	ret

000003c2 <main>:
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
			if ((~PINC & 0x01) && !pushed) {
				 pluck = 1;
     3c2:	21 e0       	ldi	r18, 0x01	; 1

   while(1) {  
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
     3c4:	80 91 b2 03 	lds	r24, 0x03B2
     3c8:	90 91 b3 03 	lds	r25, 0x03B3
     3cc:	88 23       	and	r24, r24
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <main+0x2>
			if ((~PINC & 0x01) && !pushed) {
     3d0:	30 99       	sbic	0x06, 0	; 6
     3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <main+0x22>
     3d4:	80 91 ae 03 	lds	r24, 0x03AE
     3d8:	88 23       	and	r24, r24
     3da:	21 f4       	brne	.+8      	; 0x3e4 <main+0x22>
				 pluck = 1;
     3dc:	20 93 89 02 	sts	0x0289, r18
				 pushed = 1;
     3e0:	20 93 ae 03 	sts	0x03AE, r18
 			}
			if (!(~PINC & 0x01)  && pushed) {
     3e4:	30 9b       	sbis	0x06, 0	; 6
     3e6:	ee cf       	rjmp	.-36     	; 0x3c4 <main+0x2>
     3e8:	80 91 ae 03 	lds	r24, 0x03AE
     3ec:	88 23       	and	r24, r24
     3ee:	51 f3       	breq	.-44     	; 0x3c4 <main+0x2>
				pushed = 0;
     3f0:	10 92 ae 03 	sts	0x03AE, r1
     3f4:	e7 cf       	rjmp	.-50     	; 0x3c4 <main+0x2>

000003f6 <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
	LCDclr();
     3fa:	0e 94 8e 04 	call	0x91c	; 0x91c <LCDclr>
	switch (state) {
     3fe:	80 91 92 02 	lds	r24, 0x0292
     402:	85 30       	cpi	r24, 0x05	; 5
     404:	09 f4       	brne	.+2      	; 0x408 <updateLCD+0x12>
     406:	3f c0       	rjmp	.+126    	; 0x486 <updateLCD+0x90>
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	40 f4       	brcc	.+16     	; 0x41c <updateLCD+0x26>
     40c:	83 30       	cpi	r24, 0x03	; 3
     40e:	f9 f0       	breq	.+62     	; 0x44e <updateLCD+0x58>
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	50 f5       	brcc	.+84     	; 0x468 <updateLCD+0x72>
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	09 f0       	breq	.+2      	; 0x41a <updateLCD+0x24>
     418:	b5 c0       	rjmp	.+362    	; 0x584 <updateLCD+0x18e>
     41a:	0c c0       	rjmp	.+24     	; 0x434 <updateLCD+0x3e>
     41c:	87 30       	cpi	r24, 0x07	; 7
     41e:	09 f4       	brne	.+2      	; 0x422 <updateLCD+0x2c>
     420:	4c c0       	rjmp	.+152    	; 0x4ba <updateLCD+0xc4>
     422:	87 30       	cpi	r24, 0x07	; 7
     424:	e8 f1       	brcs	.+122    	; 0x4a0 <updateLCD+0xaa>
     426:	88 30       	cpi	r24, 0x08	; 8
     428:	09 f4       	brne	.+2      	; 0x42c <updateLCD+0x36>
     42a:	6a c0       	rjmp	.+212    	; 0x500 <updateLCD+0x10a>
     42c:	89 30       	cpi	r24, 0x09	; 9
     42e:	09 f0       	breq	.+2      	; 0x432 <updateLCD+0x3c>
     430:	a9 c0       	rjmp	.+338    	; 0x584 <updateLCD+0x18e>
     432:	73 c0       	rjmp	.+230    	; 0x51a <updateLCD+0x124>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     434:	8e e8       	ldi	r24, 0x8E	; 142
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     440:	8b e9       	ldi	r24, 0x9B	; 155
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
     44c:	9b c0       	rjmp	.+310    	; 0x584 <updateLCD+0x18e>
			break;
		case MAN:
			updateManual();
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     44e:	8d ea       	ldi	r24, 0xAD	; 173
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     462:	20 91 aa 03 	lds	r18, 0x03AA
     466:	65 c0       	rjmp	.+202    	; 0x532 <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     468:	8b eb       	ldi	r24, 0xBB	; 187
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     474:	8a e0       	ldi	r24, 0x0A	; 10
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     47c:	20 91 8d 02 	lds	r18, 0x028D
     480:	30 91 8e 02 	lds	r19, 0x028E
     484:	28 c0       	rjmp	.+80     	; 0x4d6 <updateLCD+0xe0>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     486:	87 ec       	ldi	r24, 0xC7	; 199
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     492:	8b e0       	ldi	r24, 0x0B	; 11
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     49a:	20 91 87 02 	lds	r18, 0x0287
     49e:	49 c0       	rjmp	.+146    	; 0x532 <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     4a0:	84 ed       	ldi	r24, 0xD4	; 212
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     4ac:	8a e0       	ldi	r24, 0x0A	; 10
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     4b4:	20 91 84 02 	lds	r18, 0x0284
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     4ba:	80 ee       	ldi	r24, 0xE0	; 224
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     4ce:	20 91 ac 03 	lds	r18, 0x03AC
     4d2:	30 91 ad 03 	lds	r19, 0x03AD
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <updateLCD+0xe2>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <updateLCD+0xe4>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <updateLCD+0xe6>
     4dc:	ed b7       	in	r30, 0x3d	; 61
     4de:	fe b7       	in	r31, 0x3e	; 62
     4e0:	31 96       	adiw	r30, 0x01	; 1
     4e2:	09 e9       	ldi	r16, 0x99	; 153
     4e4:	13 e0       	ldi	r17, 0x03	; 3
     4e6:	ad b7       	in	r26, 0x3d	; 61
     4e8:	be b7       	in	r27, 0x3e	; 62
     4ea:	12 96       	adiw	r26, 0x02	; 2
     4ec:	1c 93       	st	X, r17
     4ee:	0e 93       	st	-X, r16
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	35 83       	std	Z+5, r19	; 0x05
     4fc:	24 83       	std	Z+4, r18	; 0x04
     4fe:	2d c0       	rjmp	.+90     	; 0x55a <updateLCD+0x164>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     500:	8a ee       	ldi	r24, 0xEA	; 234
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     50c:	89 e0       	ldi	r24, 0x09	; 9
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     514:	20 91 8c 02 	lds	r18, 0x028C
     518:	0c c0       	rjmp	.+24     	; 0x532 <updateLCD+0x13c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     51a:	85 ef       	ldi	r24, 0xF5	; 245
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     526:	89 e0       	ldi	r24, 0x09	; 9
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     52e:	20 91 b7 03 	lds	r18, 0x03B7
     532:	00 d0       	rcall	.+0      	; 0x534 <updateLCD+0x13e>
     534:	00 d0       	rcall	.+0      	; 0x536 <updateLCD+0x140>
     536:	00 d0       	rcall	.+0      	; 0x538 <updateLCD+0x142>
     538:	ed b7       	in	r30, 0x3d	; 61
     53a:	fe b7       	in	r31, 0x3e	; 62
     53c:	31 96       	adiw	r30, 0x01	; 1
     53e:	09 e9       	ldi	r16, 0x99	; 153
     540:	13 e0       	ldi	r17, 0x03	; 3
     542:	ad b7       	in	r26, 0x3d	; 61
     544:	be b7       	in	r27, 0x3e	; 62
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	1c 93       	st	X, r17
     54a:	0e 93       	st	-X, r16
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	93 83       	std	Z+3, r25	; 0x03
     554:	82 83       	std	Z+2, r24	; 0x02
     556:	24 83       	std	Z+4, r18	; 0x04
     558:	15 82       	std	Z+5, r1	; 0x05
     55a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     55e:	f8 01       	movw	r30, r16
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <updateLCD+0x16a>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	e0 1b       	sub	r30, r16
     56a:	f1 0b       	sbc	r31, r17
     56c:	8d b7       	in	r24, 0x3d	; 61
     56e:	9e b7       	in	r25, 0x3e	; 62
     570:	06 96       	adiw	r24, 0x06	; 6
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	9e bf       	out	0x3e, r25	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	8d bf       	out	0x3d, r24	; 61
     57c:	c8 01       	movw	r24, r16
     57e:	6e 2f       	mov	r22, r30
     580:	0e 94 96 04 	call	0x92c	; 0x92c <LCDstring>
			break;
	}

	CopyStringtoLCD(LCDVoice, 0, 0);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
	LCDGotoXY(voiceStrLen, 0);
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
	sprintf(LCDBuffer, "d", voice);
     598:	20 91 88 02 	lds	r18, 0x0288
     59c:	00 d0       	rcall	.+0      	; 0x59e <updateLCD+0x1a8>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <updateLCD+0x1aa>
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <updateLCD+0x1ac>
     5a2:	ed b7       	in	r30, 0x3d	; 61
     5a4:	fe b7       	in	r31, 0x3e	; 62
     5a6:	31 96       	adiw	r30, 0x01	; 1
     5a8:	09 e9       	ldi	r16, 0x99	; 153
     5aa:	13 e0       	ldi	r17, 0x03	; 3
     5ac:	ad b7       	in	r26, 0x3d	; 61
     5ae:	be b7       	in	r27, 0x3e	; 62
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	1c 93       	st	X, r17
     5b4:	0e 93       	st	-X, r16
     5b6:	11 97       	sbiw	r26, 0x01	; 1
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	93 83       	std	Z+3, r25	; 0x03
     5be:	82 83       	std	Z+2, r24	; 0x02
     5c0:	24 83       	std	Z+4, r18	; 0x04
     5c2:	15 82       	std	Z+5, r1	; 0x05
     5c4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
	LCDstring(LCDBuffer, 1);
     5c8:	8d b7       	in	r24, 0x3d	; 61
     5ca:	9e b7       	in	r25, 0x3e	; 62
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	9e bf       	out	0x3e, r25	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	8d bf       	out	0x3d, r24	; 61
     5d8:	c8 01       	movw	r24, r16
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	0e 94 96 04 	call	0x92c	; 0x92c <LCDstring>
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     5e6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCDinit>
	LCDcursorOFF();
     5ea:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDcursorOFF>
	LCDclr();				//clear the display
     5ee:	0e 94 8e 04 	call	0x91c	; 0x91c <LCDclr>
	LCDGotoXY(0,0);
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     5fa:	8e e8       	ldi	r24, 0x8E	; 142
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     606:	8b e9       	ldi	r24, 0x9B	; 155
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	0e 94 ba 04 	call	0x974	; 0x974 <CopyStringtoLCD>
}
     612:	08 95       	ret

00000614 <Initialize>:
	TCCR2B = 0;
} 
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
   // make B.3 an output
   DDRB = (1<<PINB3) ;
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	84 b9       	out	0x04, r24	; 4
     620:	07 e9       	ldi	r16, 0x97	; 151
     622:	12 e0       	ldi	r17, 0x02	; 2
     624:	c0 e0       	ldi	r28, 0x00	; 0
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	1f c0       	rjmp	.+62     	; 0x668 <Initialize+0x54>
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     62a:	be 01       	movw	r22, r28
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 05 0a 	call	0x140a	; 0x140a <__floatunsisf>
     634:	26 e5       	ldi	r18, 0x56	; 86
     636:	3e e0       	ldi	r19, 0x0E	; 14
     638:	49 ec       	ldi	r20, 0xC9	; 201
     63a:	50 e4       	ldi	r21, 0x40	; 64
     63c:	0e 94 87 08 	call	0x110e	; 0x110e <__mulsf3>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e8       	ldi	r20, 0x80	; 128
     646:	5b e3       	ldi	r21, 0x3B	; 59
     648:	0e 94 87 08 	call	0x110e	; 0x110e <__mulsf3>
     64c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <sin>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4e ef       	ldi	r20, 0xFE	; 254
     656:	52 e4       	ldi	r21, 0x42	; 66
     658:	0e 94 87 08 	call	0x110e	; 0x110e <__mulsf3>
     65c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fixunssfsi>
     660:	f8 01       	movw	r30, r16
     662:	61 93       	st	Z+, r22
     664:	8f 01       	movw	r16, r30
     666:	21 96       	adiw	r28, 0x01	; 1
  //	uart_init();
  //	stdout = stdin = stderr = &uart_str;
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
     668:	cf 3f       	cpi	r28, 0xFF	; 255
     66a:	d1 05       	cpc	r29, r1
     66c:	f1 f2       	breq	.-68     	; 0x62a <Initialize+0x16>
     66e:	e8 f2       	brcs	.-70     	; 0x62a <Initialize+0x16>
     670:	d0 93 96 02 	sts	0x0296, r29
     674:	c0 93 95 02 	sts	0x0295, r28
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
   }  

   // init the time counter
   time=0;
     678:	10 92 b3 03 	sts	0x03B3, r1
     67c:	10 92 b2 03 	sts	0x03B2, r1

   // timer 0 runs at full rate
   TCCR0B = 1 ;  
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	85 bd       	out	0x25, r24	; 37
   //turn off timer 0 overflow ISR
   TIMSK0 = 0 ;
     684:	10 92 6e 00 	sts	0x006E, r1
   // turn on PWM
   // turn on fast PWM and OC0A output
   // at full clock rate, toggle OC0A (pin B3) 
   // 16 microsec per PWM cycle sample time
   TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     688:	83 ec       	ldi	r24, 0xC3	; 195
     68a:	84 bd       	out	0x24, r24	; 36
   OCR0A = 128 ; // set PWM to half full scale
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	87 bd       	out	0x27, r24	; 39
	
	// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	OCR1A = 1999 ; // 2000 ticks
     690:	8f ec       	ldi	r24, 0xCF	; 207
     692:	97 e0       	ldi	r25, 0x07	; 7
     694:	90 93 89 00 	sts	0x0089, r25
     698:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = 0x09; 	//full speed; clear-on-match
     6a2:	89 e0       	ldi	r24, 0x09	; 9
     6a4:	80 93 81 00 	sts	0x0081, r24
  	TCCR1A = 0x00;	//turn off pwm and oc lines
     6a8:	10 92 80 00 	sts	0x0080, r1

	initLCD();
     6ac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <initLCD>
	
   // turn on all ISRs
   sei() ;
     6b0:	78 94       	sei
   ///////////////////////////////////////////////////
   // Sound parameters
   ///////////////////////////////////////////////////
   // Base frequency
   // 2^16/8000*freq = 8.192*freq
   inc_main = (int)(8.192 * 261) ; 
     6b2:	8a e5       	ldi	r24, 0x5A	; 90
     6b4:	98 e0       	ldi	r25, 0x08	; 8
     6b6:	90 93 8e 02 	sts	0x028E, r25
     6ba:	80 93 8d 02 	sts	0x028D, r24
   // rise and decay SHIFT factor  -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_main = 4 ;
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	80 93 87 02 	sts	0x0287, r24
   rise_main = 0 ;
     6c4:	10 92 84 02 	sts	0x0284, r1
   //
   // FM modulation rate -- also a frequency
   inc_fm1 = (int)(8.192 * 65) ;
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	90 93 ad 03 	sts	0x03AD, r25
     6d0:	80 93 ac 03 	sts	0x03AC, r24
   // FM modulation depth SHIFT factor 
   // bigger factor implies smaller FM!
   // useful range is 4 to 15
   depth_fm1 = 7 ;
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	80 93 8c 02 	sts	0x028C, r24
   // decay SHIFT factor -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_fm1 = 6 ;
     6da:	86 e0       	ldi	r24, 0x06	; 6
     6dc:	80 93 b7 03 	sts	0x03B7, r24
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	08 95       	ret

000006ea <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRD = 0x0f;
     6ea:	2f e0       	ldi	r18, 0x0F	; 15
     6ec:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     6ee:	80 ef       	ldi	r24, 0xF0	; 240
     6f0:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	39 2f       	mov	r19, r25
     6f6:	3a 95       	dec	r19
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <KeypadScan+0xc>
	_delay_us(5);
	key = PIND;
     6fa:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     6fc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     6fe:	2b b9       	out	0x0b, r18	; 11
     700:	9a 95       	dec	r25
     702:	f1 f7       	brne	.-4      	; 0x700 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PIND;
     704:	29 b1       	in	r18, 0x09	; 9
     706:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     708:	2f 3f       	cpi	r18, 0xFF	; 255
     70a:	61 f0       	breq	.+24     	; 0x724 <KeypadScan+0x3a>
     70c:	ed e0       	ldi	r30, 0x0D	; 13
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     712:	80 81       	ld	r24, Z
     714:	9f 5f       	subi	r25, 0xFF	; 255
     716:	82 17       	cp	r24, r18
     718:	11 f4       	brne	.+4      	; 0x71e <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     71a:	89 2f       	mov	r24, r25
     71c:	08 95       	ret
	_delay_us(5);
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     71e:	31 96       	adiw	r30, 0x01	; 1
     720:	90 31       	cpi	r25, 0x10	; 16
     722:	b9 f7       	brne	.-18     	; 0x712 <KeypadScan+0x28>
     724:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     726:	08 95       	ret

00000728 <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     728:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     72a:	80 91 30 02 	lds	r24, 0x0230
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	31 f4       	brne	.+12     	; 0x73e <KeypadAppend+0x16>
		KeypadFinished = 0;
     732:	10 92 30 02 	sts	0x0230, r1
		KeypadInput = 0;
     736:	10 92 2f 02 	sts	0x022F, r1
     73a:	10 92 2e 02 	sts	0x022E, r1
	}
	switch(key) {
     73e:	97 3d       	cpi	r25, 0xD7	; 215
     740:	b9 f1       	breq	.+110    	; 0x7b0 <KeypadAppend+0x88>
     742:	98 3d       	cpi	r25, 0xD8	; 216
     744:	98 f4       	brcc	.+38     	; 0x76c <KeypadAppend+0x44>
     746:	97 3b       	cpi	r25, 0xB7	; 183
     748:	99 f1       	breq	.+102    	; 0x7b0 <KeypadAppend+0x88>
     74a:	98 3b       	cpi	r25, 0xB8	; 184
     74c:	40 f4       	brcc	.+16     	; 0x75e <KeypadAppend+0x36>
     74e:	9b 37       	cpi	r25, 0x7B	; 123
     750:	79 f1       	breq	.+94     	; 0x7b0 <KeypadAppend+0x88>
     752:	9e 37       	cpi	r25, 0x7E	; 126
     754:	69 f1       	breq	.+90     	; 0x7b0 <KeypadAppend+0x88>
     756:	97 37       	cpi	r25, 0x77	; 119
     758:	09 f0       	breq	.+2      	; 0x75c <KeypadAppend+0x34>
     75a:	43 c0       	rjmp	.+134    	; 0x7e2 <KeypadAppend+0xba>
     75c:	29 c0       	rjmp	.+82     	; 0x7b0 <KeypadAppend+0x88>
     75e:	9d 3b       	cpi	r25, 0xBD	; 189
     760:	19 f1       	breq	.+70     	; 0x7a8 <KeypadAppend+0x80>
     762:	9e 3b       	cpi	r25, 0xBE	; 190
     764:	f9 f0       	breq	.+62     	; 0x7a4 <KeypadAppend+0x7c>
     766:	9b 3b       	cpi	r25, 0xBB	; 187
     768:	e1 f5       	brne	.+120    	; 0x7e2 <KeypadAppend+0xba>
     76a:	20 c0       	rjmp	.+64     	; 0x7ac <KeypadAppend+0x84>
     76c:	97 3e       	cpi	r25, 0xE7	; 231
     76e:	01 f1       	breq	.+64     	; 0x7b0 <KeypadAppend+0x88>
     770:	98 3e       	cpi	r25, 0xE8	; 232
     772:	38 f4       	brcc	.+14     	; 0x782 <KeypadAppend+0x5a>
     774:	9d 3d       	cpi	r25, 0xDD	; 221
     776:	91 f0       	breq	.+36     	; 0x79c <KeypadAppend+0x74>
     778:	9e 3d       	cpi	r25, 0xDE	; 222
     77a:	71 f0       	breq	.+28     	; 0x798 <KeypadAppend+0x70>
     77c:	9b 3d       	cpi	r25, 0xDB	; 219
     77e:	89 f5       	brne	.+98     	; 0x7e2 <KeypadAppend+0xba>
     780:	0f c0       	rjmp	.+30     	; 0x7a0 <KeypadAppend+0x78>
     782:	9d 3e       	cpi	r25, 0xED	; 237
     784:	29 f0       	breq	.+10     	; 0x790 <KeypadAppend+0x68>
     786:	9e 3e       	cpi	r25, 0xEE	; 238
     788:	b9 f0       	breq	.+46     	; 0x7b8 <KeypadAppend+0x90>
     78a:	9b 3e       	cpi	r25, 0xEB	; 235
     78c:	51 f5       	brne	.+84     	; 0x7e2 <KeypadAppend+0xba>
     78e:	02 c0       	rjmp	.+4      	; 0x794 <KeypadAppend+0x6c>
     790:	42 e0       	ldi	r20, 0x02	; 2
     792:	13 c0       	rjmp	.+38     	; 0x7ba <KeypadAppend+0x92>
     794:	43 e0       	ldi	r20, 0x03	; 3
     796:	11 c0       	rjmp	.+34     	; 0x7ba <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     798:	44 e0       	ldi	r20, 0x04	; 4
     79a:	0f c0       	rjmp	.+30     	; 0x7ba <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     79c:	45 e0       	ldi	r20, 0x05	; 5
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     7a0:	46 e0       	ldi	r20, 0x06	; 6
     7a2:	0b c0       	rjmp	.+22     	; 0x7ba <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     7a4:	47 e0       	ldi	r20, 0x07	; 7
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     7a8:	48 e0       	ldi	r20, 0x08	; 8
     7aa:	07 c0       	rjmp	.+14     	; 0x7ba <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     7ac:	49 e0       	ldi	r20, 0x09	; 9
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 30 02 	sts	0x0230, r24
     7b6:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     7b8:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     7ba:	80 91 2e 02 	lds	r24, 0x022E
     7be:	90 91 2f 02 	lds	r25, 0x022F
     7c2:	9c 01       	movw	r18, r24
     7c4:	63 e0       	ldi	r22, 0x03	; 3
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	6a 95       	dec	r22
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <KeypadAppend+0x9e>
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	28 0f       	add	r18, r24
     7d4:	39 1f       	adc	r19, r25
     7d6:	24 0f       	add	r18, r20
     7d8:	31 1d       	adc	r19, r1
     7da:	30 93 2f 02 	sts	0x022F, r19
     7de:	20 93 2e 02 	sts	0x022E, r18
     7e2:	08 95       	ret

000007e4 <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	debounceTime--;
     7e4:	80 91 ba 03 	lds	r24, 0x03BA
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 93 ba 03 	sts	0x03BA, r24
	uint8_t key = KeypadScan(); //Scan the keypad
     7ee:	0e 94 75 03 	call	0x6ea	; 0x6ea <KeypadScan>
     7f2:	98 2f       	mov	r25, r24
	switch(keyState){
     7f4:	80 91 31 02 	lds	r24, 0x0231
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	91 f0       	breq	.+36     	; 0x820 <KeypadDebounce+0x3c>
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	28 f0       	brcs	.+10     	; 0x80a <KeypadDebounce+0x26>
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	09 f1       	breq	.+66     	; 0x846 <KeypadDebounce+0x62>
     804:	83 30       	cpi	r24, 0x03	; 3
     806:	a1 f5       	brne	.+104    	; 0x870 <KeypadDebounce+0x8c>
     808:	27 c0       	rjmp	.+78     	; 0x858 <KeypadDebounce+0x74>
	
		case RELEASED:
			if (key){
     80a:	99 23       	and	r25, r25
     80c:	89 f1       	breq	.+98     	; 0x870 <KeypadDebounce+0x8c>
				keyState = MAYBEPUSHED;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 31 02 	sts	0x0231, r24
				debounceTime = DEBOUNCE_TIME;
     814:	8e e1       	ldi	r24, 0x1E	; 30
     816:	80 93 ba 03 	sts	0x03BA, r24
				checkKey = key;
     81a:	90 93 bb 03 	sts	0x03BB, r25
     81e:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     820:	80 91 ba 03 	lds	r24, 0x03BA
     824:	88 23       	and	r24, r24
     826:	21 f5       	brne	.+72     	; 0x870 <KeypadDebounce+0x8c>
				if (key && key == checkKey) {
     828:	99 23       	and	r25, r25
     82a:	e1 f0       	breq	.+56     	; 0x864 <KeypadDebounce+0x80>
     82c:	80 91 bb 03 	lds	r24, 0x03BB
     830:	98 17       	cp	r25, r24
     832:	c1 f4       	brne	.+48     	; 0x864 <KeypadDebounce+0x80>
					keyState = PUSHED;
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	80 93 31 02 	sts	0x0231, r24
					curKey = key;
     83a:	90 93 b9 03 	sts	0x03B9, r25
					KeypadAppend(key);
     83e:	89 2f       	mov	r24, r25
     840:	0e 94 94 03 	call	0x728	; 0x728 <KeypadAppend>
     844:	08 95       	ret
					keyState = RELEASED;
				}
			}
			break;
		case PUSHED:
			if (!key){
     846:	99 23       	and	r25, r25
     848:	99 f4       	brne	.+38     	; 0x870 <KeypadDebounce+0x8c>
				keyState = MAYBERELEASED;
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	80 93 31 02 	sts	0x0231, r24
				debounceTime = DEBOUNCE_TIME;
     850:	8e e1       	ldi	r24, 0x1E	; 30
     852:	80 93 ba 03 	sts	0x03BA, r24
     856:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     858:	80 91 ba 03 	lds	r24, 0x03BA
     85c:	88 23       	and	r24, r24
     85e:	41 f4       	brne	.+16     	; 0x870 <KeypadDebounce+0x8c>
				if (!key) {
     860:	99 23       	and	r25, r25
     862:	19 f4       	brne	.+6      	; 0x86a <KeypadDebounce+0x86>
					keyState = RELEASED;
     864:	10 92 31 02 	sts	0x0231, r1
     868:	08 95       	ret
				} else {
					keyState = PUSHED;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 31 02 	sts	0x0231, r24
     870:	08 95       	ret

00000872 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     872:	90 91 b9 03 	lds	r25, 0x03B9
	if (curKey){
     876:	80 91 b9 03 	lds	r24, 0x03B9
     87a:	88 23       	and	r24, r24
     87c:	11 f0       	breq	.+4      	; 0x882 <KeypadKey+0x10>
		curKey = 0;
     87e:	10 92 b9 03 	sts	0x03B9, r1
	}
	return tmpKey;
}
     882:	89 2f       	mov	r24, r25
     884:	08 95       	ret

00000886 <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	if (KeypadFinished) {
     886:	80 91 30 02 	lds	r24, 0x0230
     88a:	88 23       	and	r24, r24
     88c:	19 f4       	brne	.+6      	; 0x894 <KeypadInt+0xe>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	04 c0       	rjmp	.+8      	; 0x89c <KeypadInt+0x16>
		return KeypadInput;
     894:	20 91 2e 02 	lds	r18, 0x022E
     898:	30 91 2f 02 	lds	r19, 0x022F
	} else {
		return 0;
	}
}
     89c:	c9 01       	movw	r24, r18
     89e:	08 95       	ret

000008a0 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     8a0:	28 2f       	mov	r18, r24
     8a2:	20 7f       	andi	r18, 0xF0	; 240
     8a4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     8a6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     8a8:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8aa:	2a ef       	ldi	r18, 0xFA	; 250
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	f9 01       	movw	r30, r18
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     8b4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     8b6:	40 98       	cbi	0x08, 0	; 8
     8b8:	f9 01       	movw	r30, r18
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	44 e0       	ldi	r20, 0x04	; 4
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	4a 95       	dec	r20
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <LCDsendChar+0x22>
     8ca:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     8cc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     8ce:	42 9a       	sbi	0x08, 2	; 8
     8d0:	c9 01       	movw	r24, r18
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     8d6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     8d8:	40 98       	cbi	0x08, 0	; 8
     8da:	c9 01       	movw	r24, r18
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     8e0:	08 95       	ret

000008e2 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     8e2:	28 2f       	mov	r18, r24
     8e4:	20 7f       	andi	r18, 0xF0	; 240
     8e6:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     8e8:	42 9a       	sbi	0x08, 2	; 8
     8ea:	2a ef       	ldi	r18, 0xFA	; 250
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	f9 01       	movw	r30, r18
     8f0:	31 97       	sbiw	r30, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     8f4:	42 98       	cbi	0x08, 2	; 8
     8f6:	f9 01       	movw	r30, r18
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	54 e0       	ldi	r21, 0x04	; 4
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	5a 95       	dec	r21
     906:	e1 f7       	brne	.-8      	; 0x900 <LCDsendCommand+0x1e>
     908:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     90a:	42 9a       	sbi	0x08, 2	; 8
     90c:	c9 01       	movw	r24, r18
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     912:	42 98       	cbi	0x08, 2	; 8
     914:	c9 01       	movw	r24, r18
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     91a:	08 95       	ret

0000091c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     922:	08 95       	ret

00000924 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     92a:	08 95       	ret

0000092c <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	49 f0       	breq	.+18     	; 0x94c <LCDstring+0x20>
     93a:	ec 01       	movw	r28, r24
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	04 c0       	rjmp	.+8      	; 0x948 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     940:	89 91       	ld	r24, Y+
     942:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     946:	1f 5f       	subi	r17, 0xFF	; 255
     948:	10 17       	cp	r17, r16
     94a:	d0 f3       	brcs	.-12     	; 0x940 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	08 95       	ret

00000956 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     956:	62 30       	cpi	r22, 0x02	; 2
     958:	31 f0       	breq	.+12     	; 0x966 <LCDGotoXY+0x10>
     95a:	63 30       	cpi	r22, 0x03	; 3
     95c:	31 f0       	breq	.+12     	; 0x96a <LCDGotoXY+0x14>
     95e:	61 30       	cpi	r22, 0x01	; 1
     960:	29 f4       	brne	.+10     	; 0x96c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     962:	80 5c       	subi	r24, 0xC0	; 192
     964:	03 c0       	rjmp	.+6      	; 0x96c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     966:	8c 5e       	subi	r24, 0xEC	; 236
     968:	01 c0       	rjmp	.+2      	; 0x96c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     96a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
	
}
     972:	08 95       	ret

00000974 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     97e:	64 2f       	mov	r22, r20
     980:	0e 94 ab 04 	call	0x956	; 0x956 <LCDGotoXY>
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	03 c0       	rjmp	.+6      	; 0x98e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     988:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     98c:	1f 5f       	subi	r17, 0xFF	; 255
     98e:	fe 01       	movw	r30, r28
     990:	e1 0f       	add	r30, r17
     992:	f1 1d       	adc	r31, r1
     994:	84 91       	lpm	r24, Z+
     996:	88 23       	and	r24, r24
     998:	b9 f7       	brne	.-18     	; 0x988 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	7c 01       	movw	r14, r24
     9b0:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     9b2:	11 0f       	add	r17, r17
     9b4:	11 0f       	add	r17, r17
     9b6:	11 0f       	add	r17, r17
     9b8:	10 64       	ori	r17, 0x40	; 64
     9ba:	c0 e0       	ldi	r28, 0x00	; 0
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     9be:	f7 01       	movw	r30, r14
     9c0:	ec 0f       	add	r30, r28
     9c2:	fd 1f       	adc	r31, r29
     9c4:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     9c6:	81 2f       	mov	r24, r17
     9c8:	8c 0f       	add	r24, r28
     9ca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
		LCDsendChar(pcc);
     9ce:	80 2f       	mov	r24, r16
     9d0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     9d4:	21 96       	adiw	r28, 0x01	; 1
     9d6:	c8 30       	cpi	r28, 0x08	; 8
     9d8:	d1 05       	cpc	r29, r1
     9da:	89 f7       	brne	.-30     	; 0x9be <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	86 ea       	ldi	r24, 0xA6	; 166
     9f2:	9e e0       	ldi	r25, 0x0E	; 14
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     9f8:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     9fa:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     9fc:	87 b1       	in	r24, 0x07	; 7
     9fe:	80 6f       	ori	r24, 0xF0	; 240
     a00:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     a02:	87 b1       	in	r24, 0x07	; 7
     a04:	87 60       	ori	r24, 0x07	; 7
     a06:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     a08:	80 e3       	ldi	r24, 0x30	; 48
     a0a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     a0c:	42 9a       	sbi	0x08, 2	; 8
     a0e:	2a ef       	ldi	r18, 0xFA	; 250
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a18:	42 98       	cbi	0x08, 2	; 8
     a1a:	f9 01       	movw	r30, r18
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     a20:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     a22:	42 9a       	sbi	0x08, 2	; 8
     a24:	c9 01       	movw	r24, r18
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a2a:	42 98       	cbi	0x08, 2	; 8
     a2c:	c9 01       	movw	r24, r18
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     a32:	80 e2       	ldi	r24, 0x20	; 32
     a34:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     a36:	42 9a       	sbi	0x08, 2	; 8
     a38:	c9 01       	movw	r24, r18
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a3e:	42 98       	cbi	0x08, 2	; 8
     a40:	c9 01       	movw	r24, r18
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     a46:	88 e2       	ldi	r24, 0x28	; 40
     a48:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     a4c:	8c e0       	ldi	r24, 0x0C	; 12
     a4e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
     a52:	c8 e0       	ldi	r28, 0x08	; 8
     a54:	d1 e0       	ldi	r29, 0x01	; 1
     a56:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     a58:	16 2f       	mov	r17, r22
     a5a:	1f 5f       	subi	r17, 0xFF	; 255
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCDdefinechar>
     a62:	28 96       	adiw	r28, 0x08	; 8
     a64:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     a66:	18 30       	cpi	r17, 0x08	; 8
     a68:	b9 f7       	brne	.-18     	; 0xa58 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	08 95       	ret

00000a72 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	08 2f       	mov	r16, r24
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     a7c:	8e e1       	ldi	r24, 0x1E	; 30
     a7e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     a82:	1f 5f       	subi	r17, 0xFF	; 255
     a84:	10 17       	cp	r17, r16
     a86:	d0 f3       	brcs	.-12     	; 0xa7c <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	08 2f       	mov	r16, r24
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     a98:	88 e1       	ldi	r24, 0x18	; 24
     a9a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     a9e:	1f 5f       	subi	r17, 0xFF	; 255
     aa0:	10 17       	cp	r17, r16
     aa2:	d0 f3       	brcs	.-12     	; 0xa98 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     aaa:	8e e0       	ldi	r24, 0x0E	; 14
     aac:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     ab0:	08 95       	ret

00000ab2 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     ab2:	8f e0       	ldi	r24, 0x0F	; 15
     ab4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     ab8:	08 95       	ret

00000aba <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     ac0:	08 95       	ret

00000ac2 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     ac8:	08 95       	ret

00000aca <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
}
     ad0:	08 95       	ret

00000ad2 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	08 2f       	mov	r16, r24
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     ae2:	1f 5f       	subi	r17, 0xFF	; 255
     ae4:	10 17       	cp	r17, r16
     ae6:	d0 f3       	brcs	.-12     	; 0xadc <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	08 2f       	mov	r16, r24
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     af8:	84 e1       	ldi	r24, 0x14	; 20
     afa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     afe:	1f 5f       	subi	r17, 0xFF	; 255
     b00:	10 17       	cp	r17, r16
     b02:	d0 f3       	brcs	.-12     	; 0xaf8 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     b1a:	96 e0       	ldi	r25, 0x06	; 6
     b1c:	89 9f       	mul	r24, r25
     b1e:	c0 01       	movw	r24, r0
     b20:	11 24       	eor	r1, r1
     b22:	24 2f       	mov	r18, r20
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	ac 01       	movw	r20, r24
     b28:	42 9f       	mul	r20, r18
     b2a:	c0 01       	movw	r24, r0
     b2c:	43 9f       	mul	r20, r19
     b2e:	90 0d       	add	r25, r0
     b30:	52 9f       	mul	r21, r18
     b32:	90 0d       	add	r25, r0
     b34:	11 24       	eor	r1, r1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	0e 94 87 0c 	call	0x190e	; 0x190e <__divmodhi4>
     b3c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     b3e:	cb 01       	movw	r24, r22
     b40:	66 e0       	ldi	r22, 0x06	; 6
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__udivmodhi4>
     b48:	e8 2e       	mov	r14, r24
     b4a:	ff 24       	eor	r15, r15
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     b52:	c8 01       	movw	r24, r16
     b54:	05 96       	adiw	r24, 0x05	; 5
     b56:	c8 17       	cp	r28, r24
     b58:	d9 07       	cpc	r29, r25
     b5a:	10 f0       	brcs	.+4      	; 0xb60 <LCDprogressBar+0x56>
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     b60:	c0 17       	cp	r28, r16
     b62:	d1 07       	cpc	r29, r17
     b64:	10 f0       	brcs	.+4      	; 0xb6a <LCDprogressBar+0x60>
     b66:	8e 2d       	mov	r24, r14
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <LCDprogressBar+0x62>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     b6c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     b70:	f3 94       	inc	r15
     b72:	0a 5f       	subi	r16, 0xFA	; 250
     b74:	1f 4f       	sbci	r17, 0xFF	; 255
     b76:	fd 14       	cp	r15, r13
     b78:	60 f3       	brcs	.-40     	; 0xb52 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	08 95       	ret

00000b8a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     b8a:	87 e6       	ldi	r24, 0x67	; 103
     b8c:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	80 93 c1 00 	sts	0x00C1, r24
}
     b96:	08 95       	ret

00000b98 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     b98:	1f 93       	push	r17
     b9a:	18 2f       	mov	r17, r24

  if (c == '\a')
     b9c:	87 30       	cpi	r24, 0x07	; 7
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     ba0:	60 91 c0 03 	lds	r22, 0x03C0
     ba4:	70 91 c1 03 	lds	r23, 0x03C1
     ba8:	8d e1       	ldi	r24, 0x1D	; 29
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <fputs>
     bb0:	0b c0       	rjmp	.+22     	; 0xbc8 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     bb2:	8a 30       	cpi	r24, 0x0A	; 10
     bb4:	19 f4       	brne	.+6      	; 0xbbc <uart_putchar+0x24>
    uart_putchar('\r', stream);
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
     bb8:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     bbc:	80 91 c0 00 	lds	r24, 0x00C0
     bc0:	85 ff       	sbrs	r24, 5
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <uart_putchar+0x24>
  UDR0 = c;
     bc4:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     bde:	80 91 32 02 	lds	r24, 0x0232
     be2:	90 91 33 02 	lds	r25, 0x0233
     be6:	89 2b       	or	r24, r25
     be8:	09 f0       	breq	.+2      	; 0xbec <uart_getchar+0x1c>
     bea:	9f c0       	rjmp	.+318    	; 0xd2a <uart_getchar+0x15a>
     bec:	04 e3       	ldi	r16, 0x34	; 52
     bee:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     bf0:	80 91 c0 00 	lds	r24, 0x00C0
     bf4:	87 ff       	sbrs	r24, 7
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     bf8:	80 91 c0 00 	lds	r24, 0x00C0
     bfc:	84 ff       	sbrs	r24, 4
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <uart_getchar+0x36>
     c00:	2e ef       	ldi	r18, 0xFE	; 254
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	a6 c0       	rjmp	.+332    	; 0xd52 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     c06:	80 91 c0 00 	lds	r24, 0x00C0
     c0a:	83 fd       	sbrc	r24, 3
     c0c:	a0 c0       	rjmp	.+320    	; 0xd4e <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     c0e:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     c12:	9d 30       	cpi	r25, 0x0D	; 13
     c14:	11 f0       	breq	.+4      	; 0xc1a <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     c16:	9a 30       	cpi	r25, 0x0A	; 10
     c18:	69 f4       	brne	.+26     	; 0xc34 <uart_getchar+0x64>
	  {
	    *cp = c;
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	f8 01       	movw	r30, r16
     c1e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     c20:	b7 01       	movw	r22, r14
     c22:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
	    rxp = b;
     c26:	84 e3       	ldi	r24, 0x34	; 52
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	90 93 33 02 	sts	0x0233, r25
     c2e:	80 93 32 02 	sts	0x0232, r24
     c32:	7b c0       	rjmp	.+246    	; 0xd2a <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     c34:	99 30       	cpi	r25, 0x09	; 9
     c36:	09 f4       	brne	.+2      	; 0xc3a <uart_getchar+0x6a>
     c38:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     c3a:	89 2f       	mov	r24, r25
     c3c:	80 52       	subi	r24, 0x20	; 32
     c3e:	8f 35       	cpi	r24, 0x5F	; 95
     c40:	10 f0       	brcs	.+4      	; 0xc46 <uart_getchar+0x76>
     c42:	90 3a       	cpi	r25, 0xA0	; 160
     c44:	70 f0       	brcs	.+28     	; 0xc62 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     c46:	f2 e0       	ldi	r31, 0x02	; 2
     c48:	03 38       	cpi	r16, 0x83	; 131
     c4a:	1f 07       	cpc	r17, r31
     c4c:	11 f4       	brne	.+4      	; 0xc52 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     c4e:	87 e0       	ldi	r24, 0x07	; 7
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     c52:	f8 01       	movw	r30, r16
     c54:	91 93       	st	Z+, r25
     c56:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     c58:	89 2f       	mov	r24, r25
     c5a:	b7 01       	movw	r22, r14
     c5c:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
     c60:	c7 cf       	rjmp	.-114    	; 0xbf0 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     c62:	92 31       	cpi	r25, 0x12	; 18
     c64:	39 f1       	breq	.+78     	; 0xcb4 <uart_getchar+0xe4>
     c66:	93 31       	cpi	r25, 0x13	; 19
     c68:	38 f4       	brcc	.+14     	; 0xc78 <uart_getchar+0xa8>
     c6a:	93 30       	cpi	r25, 0x03	; 3
     c6c:	09 f4       	brne	.+2      	; 0xc70 <uart_getchar+0xa0>
     c6e:	6f c0       	rjmp	.+222    	; 0xd4e <uart_getchar+0x17e>
     c70:	98 30       	cpi	r25, 0x08	; 8
     c72:	09 f0       	breq	.+2      	; 0xc76 <uart_getchar+0xa6>
     c74:	bd cf       	rjmp	.-134    	; 0xbf0 <uart_getchar+0x20>
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <uart_getchar+0xba>
     c78:	97 31       	cpi	r25, 0x17	; 23
     c7a:	09 f4       	brne	.+2      	; 0xc7e <uart_getchar+0xae>
     c7c:	4b c0       	rjmp	.+150    	; 0xd14 <uart_getchar+0x144>
     c7e:	9f 37       	cpi	r25, 0x7F	; 127
     c80:	21 f0       	breq	.+8      	; 0xc8a <uart_getchar+0xba>
     c82:	95 31       	cpi	r25, 0x15	; 21
     c84:	09 f0       	breq	.+2      	; 0xc88 <uart_getchar+0xb8>
     c86:	b4 cf       	rjmp	.-152    	; 0xbf0 <uart_getchar+0x20>
     c88:	32 c0       	rjmp	.+100    	; 0xcee <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     c8a:	f2 e0       	ldi	r31, 0x02	; 2
     c8c:	04 33       	cpi	r16, 0x34	; 52
     c8e:	1f 07       	cpc	r17, r31
     c90:	09 f0       	breq	.+2      	; 0xc94 <uart_getchar+0xc4>
     c92:	08 f4       	brcc	.+2      	; 0xc96 <uart_getchar+0xc6>
     c94:	ad cf       	rjmp	.-166    	; 0xbf0 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     c96:	88 e0       	ldi	r24, 0x08	; 8
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar(' ', stream);
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	b7 01       	movw	r22, r14
     ca2:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar('\b', stream);
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	b7 01       	movw	r22, r14
     caa:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		cp--;
     cae:	01 50       	subi	r16, 0x01	; 1
     cb0:	10 40       	sbci	r17, 0x00	; 0
     cb2:	9e cf       	rjmp	.-196    	; 0xbf0 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     cb4:	8d e0       	ldi	r24, 0x0D	; 13
     cb6:	b7 01       	movw	r22, r14
     cb8:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
     cbc:	c4 e3       	ldi	r28, 0x34	; 52
     cbe:	d2 e0       	ldi	r29, 0x02	; 2
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     cc2:	89 91       	ld	r24, Y+
     cc4:	b7 01       	movw	r22, r14
     cc6:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     cca:	c0 17       	cp	r28, r16
     ccc:	d1 07       	cpc	r29, r17
     cce:	c8 f3       	brcs	.-14     	; 0xcc2 <uart_getchar+0xf2>
     cd0:	8f cf       	rjmp	.-226    	; 0xbf0 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	b7 01       	movw	r22, r14
     cd6:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar(' ', stream);
     cda:	80 e2       	ldi	r24, 0x20	; 32
     cdc:	b7 01       	movw	r22, r14
     cde:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar('\b', stream);
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	b7 01       	movw	r22, r14
     ce6:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		cp--;
     cea:	01 50       	subi	r16, 0x01	; 1
     cec:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	04 33       	cpi	r16, 0x34	; 52
     cf2:	18 07       	cpc	r17, r24
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <uart_getchar+0x128>
     cf6:	68 f7       	brcc	.-38     	; 0xcd2 <uart_getchar+0x102>
     cf8:	7b cf       	rjmp	.-266    	; 0xbf0 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     cfa:	88 e0       	ldi	r24, 0x08	; 8
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar(' ', stream);
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	b7 01       	movw	r22, r14
     d06:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
		uart_putchar('\b', stream);
     d0a:	88 e0       	ldi	r24, 0x08	; 8
     d0c:	b7 01       	movw	r22, r14
     d0e:	0e 94 cc 05 	call	0xb98	; 0xb98 <uart_putchar>
     d12:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     d14:	e2 e0       	ldi	r30, 0x02	; 2
     d16:	04 33       	cpi	r16, 0x34	; 52
     d18:	1e 07       	cpc	r17, r30
     d1a:	09 f0       	breq	.+2      	; 0xd1e <uart_getchar+0x14e>
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <uart_getchar+0x150>
     d1e:	68 cf       	rjmp	.-304    	; 0xbf0 <uart_getchar+0x20>
     d20:	e8 01       	movw	r28, r16
     d22:	8a 91       	ld	r24, -Y
     d24:	80 32       	cpi	r24, 0x20	; 32
     d26:	49 f7       	brne	.-46     	; 0xcfa <uart_getchar+0x12a>
     d28:	63 cf       	rjmp	.-314    	; 0xbf0 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     d2a:	e0 91 32 02 	lds	r30, 0x0232
     d2e:	f0 91 33 02 	lds	r31, 0x0233
     d32:	81 91       	ld	r24, Z+
     d34:	f0 93 33 02 	sts	0x0233, r31
     d38:	e0 93 32 02 	sts	0x0232, r30
  if (c == '\n')
     d3c:	8a 30       	cpi	r24, 0x0A	; 10
     d3e:	21 f4       	brne	.+8      	; 0xd48 <uart_getchar+0x178>
    rxp = 0;
     d40:	10 92 33 02 	sts	0x0233, r1
     d44:	10 92 32 02 	sts	0x0232, r1

  return c;
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <uart_getchar+0x182>
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
     d50:	3f ef       	ldi	r19, 0xFF	; 255
}
     d52:	c9 01       	movw	r24, r18
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	08 95       	ret

00000d62 <__fixunssfsi>:
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	7b 01       	movw	r14, r22
     d6c:	8c 01       	movw	r16, r24
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	5f e4       	ldi	r21, 0x4F	; 79
     d76:	0e 94 81 09 	call	0x1302	; 0x1302 <__gesf2>
     d7a:	88 23       	and	r24, r24
     d7c:	8c f0       	brlt	.+34     	; 0xda0 <__fixunssfsi+0x3e>
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	5f e4       	ldi	r21, 0x4F	; 79
     d8a:	0e 94 29 08 	call	0x1052	; 0x1052 <__subsf3>
     d8e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fixsfsi>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	20 50       	subi	r18, 0x00	; 0
     d98:	30 40       	sbci	r19, 0x00	; 0
     d9a:	40 40       	sbci	r20, 0x00	; 0
     d9c:	50 48       	sbci	r21, 0x80	; 128
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <__fixunssfsi+0x4a>
     da0:	c8 01       	movw	r24, r16
     da2:	b7 01       	movw	r22, r14
     da4:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fixsfsi>
     da8:	9b 01       	movw	r18, r22
     daa:	ac 01       	movw	r20, r24
     dac:	b9 01       	movw	r22, r18
     dae:	ca 01       	movw	r24, r20
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	08 95       	ret

00000dba <_fpadd_parts>:
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 ee       	ldi	r30, 0xE3	; 227
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__>
     dc6:	dc 01       	movw	r26, r24
     dc8:	2b 01       	movw	r4, r22
     dca:	fa 01       	movw	r30, r20
     dcc:	9c 91       	ld	r25, X
     dce:	92 30       	cpi	r25, 0x02	; 2
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <_fpadd_parts+0x1a>
     dd2:	39 c1       	rjmp	.+626    	; 0x1046 <_fpadd_parts+0x28c>
     dd4:	eb 01       	movw	r28, r22
     dd6:	88 81       	ld	r24, Y
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	08 f4       	brcc	.+2      	; 0xdde <_fpadd_parts+0x24>
     ddc:	33 c1       	rjmp	.+614    	; 0x1044 <_fpadd_parts+0x28a>
     dde:	94 30       	cpi	r25, 0x04	; 4
     de0:	69 f4       	brne	.+26     	; 0xdfc <_fpadd_parts+0x42>
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	09 f0       	breq	.+2      	; 0xde8 <_fpadd_parts+0x2e>
     de6:	2f c1       	rjmp	.+606    	; 0x1046 <_fpadd_parts+0x28c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	9c 91       	ld	r25, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	98 17       	cp	r25, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <_fpadd_parts+0x3c>
     df4:	28 c1       	rjmp	.+592    	; 0x1046 <_fpadd_parts+0x28c>
     df6:	a5 e2       	ldi	r26, 0x25	; 37
     df8:	b1 e0       	ldi	r27, 0x01	; 1
     dfa:	25 c1       	rjmp	.+586    	; 0x1046 <_fpadd_parts+0x28c>
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	09 f4       	brne	.+2      	; 0xe02 <_fpadd_parts+0x48>
     e00:	21 c1       	rjmp	.+578    	; 0x1044 <_fpadd_parts+0x28a>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	a9 f4       	brne	.+42     	; 0xe30 <_fpadd_parts+0x76>
     e06:	92 30       	cpi	r25, 0x02	; 2
     e08:	09 f0       	breq	.+2      	; 0xe0c <_fpadd_parts+0x52>
     e0a:	1d c1       	rjmp	.+570    	; 0x1046 <_fpadd_parts+0x28c>
     e0c:	9a 01       	movw	r18, r20
     e0e:	ad 01       	movw	r20, r26
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	ea 01       	movw	r28, r20
     e14:	09 90       	ld	r0, Y+
     e16:	ae 01       	movw	r20, r28
     e18:	e9 01       	movw	r28, r18
     e1a:	09 92       	st	Y+, r0
     e1c:	9e 01       	movw	r18, r28
     e1e:	81 50       	subi	r24, 0x01	; 1
     e20:	c1 f7       	brne	.-16     	; 0xe12 <_fpadd_parts+0x58>
     e22:	e2 01       	movw	r28, r4
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	9c 91       	ld	r25, X
     e2a:	89 23       	and	r24, r25
     e2c:	81 83       	std	Z+1, r24	; 0x01
     e2e:	08 c1       	rjmp	.+528    	; 0x1040 <_fpadd_parts+0x286>
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	09 f4       	brne	.+2      	; 0xe36 <_fpadd_parts+0x7c>
     e34:	07 c1       	rjmp	.+526    	; 0x1044 <_fpadd_parts+0x28a>
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	2d 90       	ld	r2, X+
     e3a:	3c 90       	ld	r3, X
     e3c:	13 97       	sbiw	r26, 0x03	; 3
     e3e:	eb 01       	movw	r28, r22
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	14 96       	adiw	r26, 0x04	; 4
     e46:	ad 90       	ld	r10, X+
     e48:	bd 90       	ld	r11, X+
     e4a:	cd 90       	ld	r12, X+
     e4c:	dc 90       	ld	r13, X
     e4e:	17 97       	sbiw	r26, 0x07	; 7
     e50:	ec 80       	ldd	r14, Y+4	; 0x04
     e52:	fd 80       	ldd	r15, Y+5	; 0x05
     e54:	0e 81       	ldd	r16, Y+6	; 0x06
     e56:	1f 81       	ldd	r17, Y+7	; 0x07
     e58:	91 01       	movw	r18, r2
     e5a:	28 1b       	sub	r18, r24
     e5c:	39 0b       	sbc	r19, r25
     e5e:	b9 01       	movw	r22, r18
     e60:	37 ff       	sbrs	r19, 7
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <_fpadd_parts+0xb2>
     e64:	66 27       	eor	r22, r22
     e66:	77 27       	eor	r23, r23
     e68:	62 1b       	sub	r22, r18
     e6a:	73 0b       	sbc	r23, r19
     e6c:	60 32       	cpi	r22, 0x20	; 32
     e6e:	71 05       	cpc	r23, r1
     e70:	0c f0       	brlt	.+2      	; 0xe74 <_fpadd_parts+0xba>
     e72:	61 c0       	rjmp	.+194    	; 0xf36 <_fpadd_parts+0x17c>
     e74:	12 16       	cp	r1, r18
     e76:	13 06       	cpc	r1, r19
     e78:	6c f5       	brge	.+90     	; 0xed4 <_fpadd_parts+0x11a>
     e7a:	37 01       	movw	r6, r14
     e7c:	48 01       	movw	r8, r16
     e7e:	06 2e       	mov	r0, r22
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <_fpadd_parts+0xd0>
     e82:	96 94       	lsr	r9
     e84:	87 94       	ror	r8
     e86:	77 94       	ror	r7
     e88:	67 94       	ror	r6
     e8a:	0a 94       	dec	r0
     e8c:	d2 f7       	brpl	.-12     	; 0xe82 <_fpadd_parts+0xc8>
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <_fpadd_parts+0xe6>
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	44 1f       	adc	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	6a 95       	dec	r22
     ea2:	d2 f7       	brpl	.-12     	; 0xe98 <_fpadd_parts+0xde>
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	30 40       	sbci	r19, 0x00	; 0
     ea8:	40 40       	sbci	r20, 0x00	; 0
     eaa:	50 40       	sbci	r21, 0x00	; 0
     eac:	2e 21       	and	r18, r14
     eae:	3f 21       	and	r19, r15
     eb0:	40 23       	and	r20, r16
     eb2:	51 23       	and	r21, r17
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	41 05       	cpc	r20, r1
     eba:	51 05       	cpc	r21, r1
     ebc:	21 f0       	breq	.+8      	; 0xec6 <_fpadd_parts+0x10c>
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	79 01       	movw	r14, r18
     ec8:	8a 01       	movw	r16, r20
     eca:	e6 28       	or	r14, r6
     ecc:	f7 28       	or	r15, r7
     ece:	08 29       	or	r16, r8
     ed0:	19 29       	or	r17, r9
     ed2:	3c c0       	rjmp	.+120    	; 0xf4c <_fpadd_parts+0x192>
     ed4:	23 2b       	or	r18, r19
     ed6:	d1 f1       	breq	.+116    	; 0xf4c <_fpadd_parts+0x192>
     ed8:	26 0e       	add	r2, r22
     eda:	37 1e       	adc	r3, r23
     edc:	35 01       	movw	r6, r10
     ede:	46 01       	movw	r8, r12
     ee0:	06 2e       	mov	r0, r22
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <_fpadd_parts+0x132>
     ee4:	96 94       	lsr	r9
     ee6:	87 94       	ror	r8
     ee8:	77 94       	ror	r7
     eea:	67 94       	ror	r6
     eec:	0a 94       	dec	r0
     eee:	d2 f7       	brpl	.-12     	; 0xee4 <_fpadd_parts+0x12a>
     ef0:	21 e0       	ldi	r18, 0x01	; 1
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <_fpadd_parts+0x148>
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	6a 95       	dec	r22
     f04:	d2 f7       	brpl	.-12     	; 0xefa <_fpadd_parts+0x140>
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	30 40       	sbci	r19, 0x00	; 0
     f0a:	40 40       	sbci	r20, 0x00	; 0
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	2a 21       	and	r18, r10
     f10:	3b 21       	and	r19, r11
     f12:	4c 21       	and	r20, r12
     f14:	5d 21       	and	r21, r13
     f16:	21 15       	cp	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	41 05       	cpc	r20, r1
     f1c:	51 05       	cpc	r21, r1
     f1e:	21 f0       	breq	.+8      	; 0xf28 <_fpadd_parts+0x16e>
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	59 01       	movw	r10, r18
     f2a:	6a 01       	movw	r12, r20
     f2c:	a6 28       	or	r10, r6
     f2e:	b7 28       	or	r11, r7
     f30:	c8 28       	or	r12, r8
     f32:	d9 28       	or	r13, r9
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <_fpadd_parts+0x192>
     f36:	82 15       	cp	r24, r2
     f38:	93 05       	cpc	r25, r3
     f3a:	2c f0       	brlt	.+10     	; 0xf46 <_fpadd_parts+0x18c>
     f3c:	1c 01       	movw	r2, r24
     f3e:	aa 24       	eor	r10, r10
     f40:	bb 24       	eor	r11, r11
     f42:	65 01       	movw	r12, r10
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <_fpadd_parts+0x192>
     f46:	ee 24       	eor	r14, r14
     f48:	ff 24       	eor	r15, r15
     f4a:	87 01       	movw	r16, r14
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	9c 91       	ld	r25, X
     f50:	d2 01       	movw	r26, r4
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	8c 91       	ld	r24, X
     f56:	98 17       	cp	r25, r24
     f58:	09 f4       	brne	.+2      	; 0xf5c <_fpadd_parts+0x1a2>
     f5a:	45 c0       	rjmp	.+138    	; 0xfe6 <_fpadd_parts+0x22c>
     f5c:	99 23       	and	r25, r25
     f5e:	39 f0       	breq	.+14     	; 0xf6e <_fpadd_parts+0x1b4>
     f60:	a8 01       	movw	r20, r16
     f62:	97 01       	movw	r18, r14
     f64:	2a 19       	sub	r18, r10
     f66:	3b 09       	sbc	r19, r11
     f68:	4c 09       	sbc	r20, r12
     f6a:	5d 09       	sbc	r21, r13
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <_fpadd_parts+0x1c0>
     f6e:	a6 01       	movw	r20, r12
     f70:	95 01       	movw	r18, r10
     f72:	2e 19       	sub	r18, r14
     f74:	3f 09       	sbc	r19, r15
     f76:	40 0b       	sbc	r20, r16
     f78:	51 0b       	sbc	r21, r17
     f7a:	57 fd       	sbrc	r21, 7
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <_fpadd_parts+0x1d4>
     f7e:	11 82       	std	Z+1, r1	; 0x01
     f80:	33 82       	std	Z+3, r3	; 0x03
     f82:	22 82       	std	Z+2, r2	; 0x02
     f84:	24 83       	std	Z+4, r18	; 0x04
     f86:	35 83       	std	Z+5, r19	; 0x05
     f88:	46 83       	std	Z+6, r20	; 0x06
     f8a:	57 83       	std	Z+7, r21	; 0x07
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <_fpadd_parts+0x20e>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	81 83       	std	Z+1, r24	; 0x01
     f92:	33 82       	std	Z+3, r3	; 0x03
     f94:	22 82       	std	Z+2, r2	; 0x02
     f96:	88 27       	eor	r24, r24
     f98:	99 27       	eor	r25, r25
     f9a:	dc 01       	movw	r26, r24
     f9c:	82 1b       	sub	r24, r18
     f9e:	93 0b       	sbc	r25, r19
     fa0:	a4 0b       	sbc	r26, r20
     fa2:	b5 0b       	sbc	r27, r21
     fa4:	84 83       	std	Z+4, r24	; 0x04
     fa6:	95 83       	std	Z+5, r25	; 0x05
     fa8:	a6 83       	std	Z+6, r26	; 0x06
     faa:	b7 83       	std	Z+7, r27	; 0x07
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <_fpadd_parts+0x20e>
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	44 1f       	adc	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	24 83       	std	Z+4, r18	; 0x04
     fb8:	35 83       	std	Z+5, r19	; 0x05
     fba:	46 83       	std	Z+6, r20	; 0x06
     fbc:	57 83       	std	Z+7, r21	; 0x07
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	93 83       	std	Z+3, r25	; 0x03
     fc6:	82 83       	std	Z+2, r24	; 0x02
     fc8:	24 81       	ldd	r18, Z+4	; 0x04
     fca:	35 81       	ldd	r19, Z+5	; 0x05
     fcc:	46 81       	ldd	r20, Z+6	; 0x06
     fce:	57 81       	ldd	r21, Z+7	; 0x07
     fd0:	da 01       	movw	r26, r20
     fd2:	c9 01       	movw	r24, r18
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	a1 09       	sbc	r26, r1
     fd8:	b1 09       	sbc	r27, r1
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	af 4f       	sbci	r26, 0xFF	; 255
     fe0:	bf 43       	sbci	r27, 0x3F	; 63
     fe2:	28 f3       	brcs	.-54     	; 0xfae <_fpadd_parts+0x1f4>
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <_fpadd_parts+0x242>
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	33 82       	std	Z+3, r3	; 0x03
     fea:	22 82       	std	Z+2, r2	; 0x02
     fec:	ea 0c       	add	r14, r10
     fee:	fb 1c       	adc	r15, r11
     ff0:	0c 1d       	adc	r16, r12
     ff2:	1d 1d       	adc	r17, r13
     ff4:	e4 82       	std	Z+4, r14	; 0x04
     ff6:	f5 82       	std	Z+5, r15	; 0x05
     ff8:	06 83       	std	Z+6, r16	; 0x06
     ffa:	17 83       	std	Z+7, r17	; 0x07
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	80 83       	st	Z, r24
    1000:	24 81       	ldd	r18, Z+4	; 0x04
    1002:	35 81       	ldd	r19, Z+5	; 0x05
    1004:	46 81       	ldd	r20, Z+6	; 0x06
    1006:	57 81       	ldd	r21, Z+7	; 0x07
    1008:	57 ff       	sbrs	r21, 7
    100a:	1a c0       	rjmp	.+52     	; 0x1040 <_fpadd_parts+0x286>
    100c:	c9 01       	movw	r24, r18
    100e:	aa 27       	eor	r26, r26
    1010:	97 fd       	sbrc	r25, 7
    1012:	a0 95       	com	r26
    1014:	ba 2f       	mov	r27, r26
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	a0 70       	andi	r26, 0x00	; 0
    101c:	b0 70       	andi	r27, 0x00	; 0
    101e:	56 95       	lsr	r21
    1020:	47 95       	ror	r20
    1022:	37 95       	ror	r19
    1024:	27 95       	ror	r18
    1026:	82 2b       	or	r24, r18
    1028:	93 2b       	or	r25, r19
    102a:	a4 2b       	or	r26, r20
    102c:	b5 2b       	or	r27, r21
    102e:	84 83       	std	Z+4, r24	; 0x04
    1030:	95 83       	std	Z+5, r25	; 0x05
    1032:	a6 83       	std	Z+6, r26	; 0x06
    1034:	b7 83       	std	Z+7, r27	; 0x07
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	93 83       	std	Z+3, r25	; 0x03
    103e:	82 83       	std	Z+2, r24	; 0x02
    1040:	df 01       	movw	r26, r30
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <_fpadd_parts+0x28c>
    1044:	d2 01       	movw	r26, r4
    1046:	cd 01       	movw	r24, r26
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	e2 e1       	ldi	r30, 0x12	; 18
    104e:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__>

00001052 <__subsf3>:
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ef e2       	ldi	r30, 0x2F	; 47
    1058:	f8 e0       	ldi	r31, 0x08	; 8
    105a:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__prologue_saves__+0x18>
    105e:	69 83       	std	Y+1, r22	; 0x01
    1060:	7a 83       	std	Y+2, r23	; 0x02
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	2d 83       	std	Y+5, r18	; 0x05
    1068:	3e 83       	std	Y+6, r19	; 0x06
    106a:	4f 83       	std	Y+7, r20	; 0x07
    106c:	58 87       	std	Y+8, r21	; 0x08
    106e:	e9 e0       	ldi	r30, 0x09	; 9
    1070:	ee 2e       	mov	r14, r30
    1072:	f1 2c       	mov	r15, r1
    1074:	ec 0e       	add	r14, r28
    1076:	fd 1e       	adc	r15, r29
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	b7 01       	movw	r22, r14
    107e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1082:	8e 01       	movw	r16, r28
    1084:	0f 5e       	subi	r16, 0xEF	; 239
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	ce 01       	movw	r24, r28
    108a:	05 96       	adiw	r24, 0x05	; 5
    108c:	b8 01       	movw	r22, r16
    108e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1092:	8a 89       	ldd	r24, Y+18	; 0x12
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	89 27       	eor	r24, r25
    1098:	8a 8b       	std	Y+18, r24	; 0x12
    109a:	c7 01       	movw	r24, r14
    109c:	b8 01       	movw	r22, r16
    109e:	ae 01       	movw	r20, r28
    10a0:	47 5e       	subi	r20, 0xE7	; 231
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	0e 94 dd 06 	call	0xdba	; 0xdba <_fpadd_parts>
    10a8:	0e 94 cd 0a 	call	0x159a	; 0x159a <__pack_f>
    10ac:	a0 96       	adiw	r28, 0x20	; 32
    10ae:	e6 e0       	ldi	r30, 0x06	; 6
    10b0:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__epilogue_restores__+0x18>

000010b4 <__addsf3>:
    10b4:	a0 e2       	ldi	r26, 0x20	; 32
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e0 e6       	ldi	r30, 0x60	; 96
    10ba:	f8 e0       	ldi	r31, 0x08	; 8
    10bc:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__prologue_saves__+0x18>
    10c0:	69 83       	std	Y+1, r22	; 0x01
    10c2:	7a 83       	std	Y+2, r23	; 0x02
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	2d 83       	std	Y+5, r18	; 0x05
    10ca:	3e 83       	std	Y+6, r19	; 0x06
    10cc:	4f 83       	std	Y+7, r20	; 0x07
    10ce:	58 87       	std	Y+8, r21	; 0x08
    10d0:	f9 e0       	ldi	r31, 0x09	; 9
    10d2:	ef 2e       	mov	r14, r31
    10d4:	f1 2c       	mov	r15, r1
    10d6:	ec 0e       	add	r14, r28
    10d8:	fd 1e       	adc	r15, r29
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	b7 01       	movw	r22, r14
    10e0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    10e4:	8e 01       	movw	r16, r28
    10e6:	0f 5e       	subi	r16, 0xEF	; 239
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	ce 01       	movw	r24, r28
    10ec:	05 96       	adiw	r24, 0x05	; 5
    10ee:	b8 01       	movw	r22, r16
    10f0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    10f4:	c7 01       	movw	r24, r14
    10f6:	b8 01       	movw	r22, r16
    10f8:	ae 01       	movw	r20, r28
    10fa:	47 5e       	subi	r20, 0xE7	; 231
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	0e 94 dd 06 	call	0xdba	; 0xdba <_fpadd_parts>
    1102:	0e 94 cd 0a 	call	0x159a	; 0x159a <__pack_f>
    1106:	a0 96       	adiw	r28, 0x20	; 32
    1108:	e6 e0       	ldi	r30, 0x06	; 6
    110a:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__epilogue_restores__+0x18>

0000110e <__mulsf3>:
    110e:	a0 e2       	ldi	r26, 0x20	; 32
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ed e8       	ldi	r30, 0x8D	; 141
    1114:	f8 e0       	ldi	r31, 0x08	; 8
    1116:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__>
    111a:	69 83       	std	Y+1, r22	; 0x01
    111c:	7a 83       	std	Y+2, r23	; 0x02
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	3e 83       	std	Y+6, r19	; 0x06
    1126:	4f 83       	std	Y+7, r20	; 0x07
    1128:	58 87       	std	Y+8, r21	; 0x08
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	be 01       	movw	r22, r28
    1130:	67 5f       	subi	r22, 0xF7	; 247
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1138:	ce 01       	movw	r24, r28
    113a:	05 96       	adiw	r24, 0x05	; 5
    113c:	be 01       	movw	r22, r28
    113e:	6f 5e       	subi	r22, 0xEF	; 239
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1146:	99 85       	ldd	r25, Y+9	; 0x09
    1148:	92 30       	cpi	r25, 0x02	; 2
    114a:	88 f0       	brcs	.+34     	; 0x116e <__mulsf3+0x60>
    114c:	89 89       	ldd	r24, Y+17	; 0x11
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	c8 f0       	brcs	.+50     	; 0x1184 <__mulsf3+0x76>
    1152:	94 30       	cpi	r25, 0x04	; 4
    1154:	19 f4       	brne	.+6      	; 0x115c <__mulsf3+0x4e>
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	51 f4       	brne	.+20     	; 0x116e <__mulsf3+0x60>
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <__mulsf3+0x56>
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	29 f4       	brne	.+10     	; 0x116a <__mulsf3+0x5c>
    1160:	92 30       	cpi	r25, 0x02	; 2
    1162:	81 f4       	brne	.+32     	; 0x1184 <__mulsf3+0x76>
    1164:	85 e2       	ldi	r24, 0x25	; 37
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	c6 c0       	rjmp	.+396    	; 0x12f6 <__mulsf3+0x1e8>
    116a:	92 30       	cpi	r25, 0x02	; 2
    116c:	49 f4       	brne	.+18     	; 0x1180 <__mulsf3+0x72>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	8a 89       	ldd	r24, Y+18	; 0x12
    1174:	98 13       	cpse	r25, r24
    1176:	21 e0       	ldi	r18, 0x01	; 1
    1178:	2a 87       	std	Y+10, r18	; 0x0a
    117a:	ce 01       	movw	r24, r28
    117c:	09 96       	adiw	r24, 0x09	; 9
    117e:	bb c0       	rjmp	.+374    	; 0x12f6 <__mulsf3+0x1e8>
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	49 f4       	brne	.+18     	; 0x1196 <__mulsf3+0x88>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	8a 89       	ldd	r24, Y+18	; 0x12
    118a:	98 13       	cpse	r25, r24
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	2a 8b       	std	Y+18, r18	; 0x12
    1190:	ce 01       	movw	r24, r28
    1192:	41 96       	adiw	r24, 0x11	; 17
    1194:	b0 c0       	rjmp	.+352    	; 0x12f6 <__mulsf3+0x1e8>
    1196:	2d 84       	ldd	r2, Y+13	; 0x0d
    1198:	3e 84       	ldd	r3, Y+14	; 0x0e
    119a:	4f 84       	ldd	r4, Y+15	; 0x0f
    119c:	58 88       	ldd	r5, Y+16	; 0x10
    119e:	6d 88       	ldd	r6, Y+21	; 0x15
    11a0:	7e 88       	ldd	r7, Y+22	; 0x16
    11a2:	8f 88       	ldd	r8, Y+23	; 0x17
    11a4:	98 8c       	ldd	r9, Y+24	; 0x18
    11a6:	ee 24       	eor	r14, r14
    11a8:	ff 24       	eor	r15, r15
    11aa:	87 01       	movw	r16, r14
    11ac:	aa 24       	eor	r10, r10
    11ae:	bb 24       	eor	r11, r11
    11b0:	65 01       	movw	r12, r10
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	c1 01       	movw	r24, r2
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	90 70       	andi	r25, 0x00	; 0
    11c4:	89 2b       	or	r24, r25
    11c6:	e9 f0       	breq	.+58     	; 0x1202 <__mulsf3+0xf4>
    11c8:	e6 0c       	add	r14, r6
    11ca:	f7 1c       	adc	r15, r7
    11cc:	08 1d       	adc	r16, r8
    11ce:	19 1d       	adc	r17, r9
    11d0:	9a 01       	movw	r18, r20
    11d2:	ab 01       	movw	r20, r22
    11d4:	2a 0d       	add	r18, r10
    11d6:	3b 1d       	adc	r19, r11
    11d8:	4c 1d       	adc	r20, r12
    11da:	5d 1d       	adc	r21, r13
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 e0       	ldi	r26, 0x00	; 0
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 14       	cp	r14, r6
    11e6:	f7 04       	cpc	r15, r7
    11e8:	08 05       	cpc	r16, r8
    11ea:	19 05       	cpc	r17, r9
    11ec:	20 f4       	brcc	.+8      	; 0x11f6 <__mulsf3+0xe8>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ba 01       	movw	r22, r20
    11f8:	a9 01       	movw	r20, r18
    11fa:	48 0f       	add	r20, r24
    11fc:	59 1f       	adc	r21, r25
    11fe:	6a 1f       	adc	r22, r26
    1200:	7b 1f       	adc	r23, r27
    1202:	aa 0c       	add	r10, r10
    1204:	bb 1c       	adc	r11, r11
    1206:	cc 1c       	adc	r12, r12
    1208:	dd 1c       	adc	r13, r13
    120a:	97 fe       	sbrs	r9, 7
    120c:	08 c0       	rjmp	.+16     	; 0x121e <__mulsf3+0x110>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	a8 2a       	or	r10, r24
    1218:	b9 2a       	or	r11, r25
    121a:	ca 2a       	or	r12, r26
    121c:	db 2a       	or	r13, r27
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	e0 32       	cpi	r30, 0x20	; 32
    1222:	f1 05       	cpc	r31, r1
    1224:	49 f0       	breq	.+18     	; 0x1238 <__mulsf3+0x12a>
    1226:	66 0c       	add	r6, r6
    1228:	77 1c       	adc	r7, r7
    122a:	88 1c       	adc	r8, r8
    122c:	99 1c       	adc	r9, r9
    122e:	56 94       	lsr	r5
    1230:	47 94       	ror	r4
    1232:	37 94       	ror	r3
    1234:	27 94       	ror	r2
    1236:	c3 cf       	rjmp	.-122    	; 0x11be <__mulsf3+0xb0>
    1238:	fa 85       	ldd	r31, Y+10	; 0x0a
    123a:	ea 89       	ldd	r30, Y+18	; 0x12
    123c:	2b 89       	ldd	r18, Y+19	; 0x13
    123e:	3c 89       	ldd	r19, Y+20	; 0x14
    1240:	8b 85       	ldd	r24, Y+11	; 0x0b
    1242:	9c 85       	ldd	r25, Y+12	; 0x0c
    1244:	28 0f       	add	r18, r24
    1246:	39 1f       	adc	r19, r25
    1248:	2e 5f       	subi	r18, 0xFE	; 254
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	17 c0       	rjmp	.+46     	; 0x127c <__mulsf3+0x16e>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	90 70       	andi	r25, 0x00	; 0
    1254:	89 2b       	or	r24, r25
    1256:	61 f0       	breq	.+24     	; 0x1270 <__mulsf3+0x162>
    1258:	16 95       	lsr	r17
    125a:	07 95       	ror	r16
    125c:	f7 94       	ror	r15
    125e:	e7 94       	ror	r14
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e8       	ldi	r27, 0x80	; 128
    1268:	e8 2a       	or	r14, r24
    126a:	f9 2a       	or	r15, r25
    126c:	0a 2b       	or	r16, r26
    126e:	1b 2b       	or	r17, r27
    1270:	76 95       	lsr	r23
    1272:	67 95       	ror	r22
    1274:	57 95       	ror	r21
    1276:	47 95       	ror	r20
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	77 fd       	sbrc	r23, 7
    127e:	e7 cf       	rjmp	.-50     	; 0x124e <__mulsf3+0x140>
    1280:	0c c0       	rjmp	.+24     	; 0x129a <__mulsf3+0x18c>
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	66 1f       	adc	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	17 fd       	sbrc	r17, 7
    128c:	41 60       	ori	r20, 0x01	; 1
    128e:	ee 0c       	add	r14, r14
    1290:	ff 1c       	adc	r15, r15
    1292:	00 1f       	adc	r16, r16
    1294:	11 1f       	adc	r17, r17
    1296:	21 50       	subi	r18, 0x01	; 1
    1298:	30 40       	sbci	r19, 0x00	; 0
    129a:	40 30       	cpi	r20, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	59 07       	cpc	r21, r25
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	69 07       	cpc	r22, r25
    12a4:	90 e4       	ldi	r25, 0x40	; 64
    12a6:	79 07       	cpc	r23, r25
    12a8:	60 f3       	brcs	.-40     	; 0x1282 <__mulsf3+0x174>
    12aa:	2b 8f       	std	Y+27, r18	; 0x1b
    12ac:	3c 8f       	std	Y+28, r19	; 0x1c
    12ae:	db 01       	movw	r26, r22
    12b0:	ca 01       	movw	r24, r20
    12b2:	8f 77       	andi	r24, 0x7F	; 127
    12b4:	90 70       	andi	r25, 0x00	; 0
    12b6:	a0 70       	andi	r26, 0x00	; 0
    12b8:	b0 70       	andi	r27, 0x00	; 0
    12ba:	80 34       	cpi	r24, 0x40	; 64
    12bc:	91 05       	cpc	r25, r1
    12be:	a1 05       	cpc	r26, r1
    12c0:	b1 05       	cpc	r27, r1
    12c2:	61 f4       	brne	.+24     	; 0x12dc <__mulsf3+0x1ce>
    12c4:	47 fd       	sbrc	r20, 7
    12c6:	0a c0       	rjmp	.+20     	; 0x12dc <__mulsf3+0x1ce>
    12c8:	e1 14       	cp	r14, r1
    12ca:	f1 04       	cpc	r15, r1
    12cc:	01 05       	cpc	r16, r1
    12ce:	11 05       	cpc	r17, r1
    12d0:	29 f0       	breq	.+10     	; 0x12dc <__mulsf3+0x1ce>
    12d2:	40 5c       	subi	r20, 0xC0	; 192
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	6f 4f       	sbci	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	40 78       	andi	r20, 0x80	; 128
    12dc:	1a 8e       	std	Y+26, r1	; 0x1a
    12de:	fe 17       	cp	r31, r30
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <__mulsf3+0x1d8>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8a 8f       	std	Y+26, r24	; 0x1a
    12e6:	4d 8f       	std	Y+29, r20	; 0x1d
    12e8:	5e 8f       	std	Y+30, r21	; 0x1e
    12ea:	6f 8f       	std	Y+31, r22	; 0x1f
    12ec:	78 a3       	std	Y+32, r23	; 0x20
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 8f       	std	Y+25, r24	; 0x19
    12f2:	ce 01       	movw	r24, r28
    12f4:	49 96       	adiw	r24, 0x19	; 25
    12f6:	0e 94 cd 0a 	call	0x159a	; 0x159a <__pack_f>
    12fa:	a0 96       	adiw	r28, 0x20	; 32
    12fc:	e2 e1       	ldi	r30, 0x12	; 18
    12fe:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__>

00001302 <__gesf2>:
    1302:	a8 e1       	ldi	r26, 0x18	; 24
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e8       	ldi	r30, 0x87	; 135
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__prologue_saves__+0x18>
    130e:	69 83       	std	Y+1, r22	; 0x01
    1310:	7a 83       	std	Y+2, r23	; 0x02
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	3e 83       	std	Y+6, r19	; 0x06
    131a:	4f 83       	std	Y+7, r20	; 0x07
    131c:	58 87       	std	Y+8, r21	; 0x08
    131e:	89 e0       	ldi	r24, 0x09	; 9
    1320:	e8 2e       	mov	r14, r24
    1322:	f1 2c       	mov	r15, r1
    1324:	ec 0e       	add	r14, r28
    1326:	fd 1e       	adc	r15, r29
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	b7 01       	movw	r22, r14
    132e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5e       	subi	r16, 0xEF	; 239
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ce 01       	movw	r24, r28
    133a:	05 96       	adiw	r24, 0x05	; 5
    133c:	b8 01       	movw	r22, r16
    133e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	40 f0       	brcs	.+16     	; 0x1358 <__gesf2+0x56>
    1348:	89 89       	ldd	r24, Y+17	; 0x11
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	28 f0       	brcs	.+10     	; 0x1358 <__gesf2+0x56>
    134e:	c7 01       	movw	r24, r14
    1350:	b8 01       	movw	r22, r16
    1352:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fpcmp_parts_f>
    1356:	01 c0       	rjmp	.+2      	; 0x135a <__gesf2+0x58>
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	68 96       	adiw	r28, 0x18	; 24
    135c:	e6 e0       	ldi	r30, 0x06	; 6
    135e:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__epilogue_restores__+0x18>

00001362 <__fixsfsi>:
    1362:	ac e0       	ldi	r26, 0x0C	; 12
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__prologue_saves__+0x20>
    136e:	69 83       	std	Y+1, r22	; 0x01
    1370:	7a 83       	std	Y+2, r23	; 0x02
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	be 01       	movw	r22, r28
    137c:	6b 5f       	subi	r22, 0xFB	; 251
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__unpack_f>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	61 f1       	breq	.+88     	; 0x13e2 <__fixsfsi+0x80>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	50 f1       	brcs	.+84     	; 0x13e2 <__fixsfsi+0x80>
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	21 f4       	brne	.+8      	; 0x139a <__fixsfsi+0x38>
    1392:	8e 81       	ldd	r24, Y+6	; 0x06
    1394:	88 23       	and	r24, r24
    1396:	51 f1       	breq	.+84     	; 0x13ec <__fixsfsi+0x8a>
    1398:	2e c0       	rjmp	.+92     	; 0x13f6 <__fixsfsi+0x94>
    139a:	2f 81       	ldd	r18, Y+7	; 0x07
    139c:	38 85       	ldd	r19, Y+8	; 0x08
    139e:	37 fd       	sbrc	r19, 7
    13a0:	20 c0       	rjmp	.+64     	; 0x13e2 <__fixsfsi+0x80>
    13a2:	6e 81       	ldd	r22, Y+6	; 0x06
    13a4:	2f 31       	cpi	r18, 0x1F	; 31
    13a6:	31 05       	cpc	r19, r1
    13a8:	1c f0       	brlt	.+6      	; 0x13b0 <__fixsfsi+0x4e>
    13aa:	66 23       	and	r22, r22
    13ac:	f9 f0       	breq	.+62     	; 0x13ec <__fixsfsi+0x8a>
    13ae:	23 c0       	rjmp	.+70     	; 0x13f6 <__fixsfsi+0x94>
    13b0:	8e e1       	ldi	r24, 0x1E	; 30
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	82 1b       	sub	r24, r18
    13b6:	93 0b       	sbc	r25, r19
    13b8:	29 85       	ldd	r18, Y+9	; 0x09
    13ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    13bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    13be:	5c 85       	ldd	r21, Y+12	; 0x0c
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <__fixsfsi+0x68>
    13c2:	56 95       	lsr	r21
    13c4:	47 95       	ror	r20
    13c6:	37 95       	ror	r19
    13c8:	27 95       	ror	r18
    13ca:	8a 95       	dec	r24
    13cc:	d2 f7       	brpl	.-12     	; 0x13c2 <__fixsfsi+0x60>
    13ce:	66 23       	and	r22, r22
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <__fixsfsi+0x9c>
    13d2:	50 95       	com	r21
    13d4:	40 95       	com	r20
    13d6:	30 95       	com	r19
    13d8:	21 95       	neg	r18
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	4f 4f       	sbci	r20, 0xFF	; 255
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <__fixsfsi+0x9c>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <__fixsfsi+0x9c>
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f ef       	ldi	r20, 0xFF	; 255
    13f2:	5f e7       	ldi	r21, 0x7F	; 127
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__fixsfsi+0x9c>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e8       	ldi	r21, 0x80	; 128
    13fe:	b9 01       	movw	r22, r18
    1400:	ca 01       	movw	r24, r20
    1402:	2c 96       	adiw	r28, 0x0c	; 12
    1404:	e2 e0       	ldi	r30, 0x02	; 2
    1406:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__epilogue_restores__+0x20>

0000140a <__floatunsisf>:
    140a:	a8 e0       	ldi	r26, 0x08	; 8
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e0       	ldi	r30, 0x0B	; 11
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__prologue_saves__+0x10>
    1416:	7b 01       	movw	r14, r22
    1418:	8c 01       	movw	r16, r24
    141a:	61 15       	cp	r22, r1
    141c:	71 05       	cpc	r23, r1
    141e:	81 05       	cpc	r24, r1
    1420:	91 05       	cpc	r25, r1
    1422:	19 f4       	brne	.+6      	; 0x142a <__floatunsisf+0x20>
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	60 c0       	rjmp	.+192    	; 0x14ea <__floatunsisf+0xe0>
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	8e e1       	ldi	r24, 0x1E	; 30
    1430:	c8 2e       	mov	r12, r24
    1432:	d1 2c       	mov	r13, r1
    1434:	dc 82       	std	Y+4, r13	; 0x04
    1436:	cb 82       	std	Y+3, r12	; 0x03
    1438:	ed 82       	std	Y+5, r14	; 0x05
    143a:	fe 82       	std	Y+6, r15	; 0x06
    143c:	0f 83       	std	Y+7, r16	; 0x07
    143e:	18 87       	std	Y+8, r17	; 0x08
    1440:	c8 01       	movw	r24, r16
    1442:	b7 01       	movw	r22, r14
    1444:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__clzsi2>
    1448:	fc 01       	movw	r30, r24
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	f7 ff       	sbrs	r31, 7
    144e:	3b c0       	rjmp	.+118    	; 0x14c6 <__floatunsisf+0xbc>
    1450:	22 27       	eor	r18, r18
    1452:	33 27       	eor	r19, r19
    1454:	2e 1b       	sub	r18, r30
    1456:	3f 0b       	sbc	r19, r31
    1458:	57 01       	movw	r10, r14
    145a:	68 01       	movw	r12, r16
    145c:	02 2e       	mov	r0, r18
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <__floatunsisf+0x5e>
    1460:	d6 94       	lsr	r13
    1462:	c7 94       	ror	r12
    1464:	b7 94       	ror	r11
    1466:	a7 94       	ror	r10
    1468:	0a 94       	dec	r0
    146a:	d2 f7       	brpl	.-12     	; 0x1460 <__floatunsisf+0x56>
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__floatunsisf+0x7c>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	aa 1f       	adc	r26, r26
    1484:	bb 1f       	adc	r27, r27
    1486:	2a 95       	dec	r18
    1488:	d2 f7       	brpl	.-12     	; 0x147e <__floatunsisf+0x74>
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	a1 09       	sbc	r26, r1
    148e:	b1 09       	sbc	r27, r1
    1490:	8e 21       	and	r24, r14
    1492:	9f 21       	and	r25, r15
    1494:	a0 23       	and	r26, r16
    1496:	b1 23       	and	r27, r17
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	a1 05       	cpc	r26, r1
    149c:	b1 05       	cpc	r27, r1
    149e:	21 f0       	breq	.+8      	; 0x14a8 <__floatunsisf+0x9e>
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	4a 29       	or	r20, r10
    14aa:	5b 29       	or	r21, r11
    14ac:	6c 29       	or	r22, r12
    14ae:	7d 29       	or	r23, r13
    14b0:	4d 83       	std	Y+5, r20	; 0x05
    14b2:	5e 83       	std	Y+6, r21	; 0x06
    14b4:	6f 83       	std	Y+7, r22	; 0x07
    14b6:	78 87       	std	Y+8, r23	; 0x08
    14b8:	8e e1       	ldi	r24, 0x1E	; 30
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	8e 1b       	sub	r24, r30
    14be:	9f 0b       	sbc	r25, r31
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
    14c4:	12 c0       	rjmp	.+36     	; 0x14ea <__floatunsisf+0xe0>
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	81 f0       	breq	.+32     	; 0x14ea <__floatunsisf+0xe0>
    14ca:	0e 2e       	mov	r0, r30
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <__floatunsisf+0xcc>
    14ce:	ee 0c       	add	r14, r14
    14d0:	ff 1c       	adc	r15, r15
    14d2:	00 1f       	adc	r16, r16
    14d4:	11 1f       	adc	r17, r17
    14d6:	0a 94       	dec	r0
    14d8:	d2 f7       	brpl	.-12     	; 0x14ce <__floatunsisf+0xc4>
    14da:	ed 82       	std	Y+5, r14	; 0x05
    14dc:	fe 82       	std	Y+6, r15	; 0x06
    14de:	0f 83       	std	Y+7, r16	; 0x07
    14e0:	18 87       	std	Y+8, r17	; 0x08
    14e2:	ce 1a       	sub	r12, r30
    14e4:	df 0a       	sbc	r13, r31
    14e6:	dc 82       	std	Y+4, r13	; 0x04
    14e8:	cb 82       	std	Y+3, r12	; 0x03
    14ea:	1a 82       	std	Y+2, r1	; 0x02
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	0e 94 cd 0a 	call	0x159a	; 0x159a <__pack_f>
    14f4:	28 96       	adiw	r28, 0x08	; 8
    14f6:	ea e0       	ldi	r30, 0x0A	; 10
    14f8:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__epilogue_restores__+0x10>

000014fc <__clzsi2>:
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	7b 01       	movw	r14, r22
    1506:	8c 01       	movw	r16, r24
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	e8 16       	cp	r14, r24
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	f8 06       	cpc	r15, r24
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	08 07       	cpc	r16, r24
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	18 07       	cpc	r17, r24
    1518:	88 f4       	brcc	.+34     	; 0x153c <__clzsi2+0x40>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	e8 16       	cp	r14, r24
    151e:	f1 04       	cpc	r15, r1
    1520:	01 05       	cpc	r16, r1
    1522:	11 05       	cpc	r17, r1
    1524:	31 f0       	breq	.+12     	; 0x1532 <__clzsi2+0x36>
    1526:	28 f0       	brcs	.+10     	; 0x1532 <__clzsi2+0x36>
    1528:	88 e0       	ldi	r24, 0x08	; 8
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	17 c0       	rjmp	.+46     	; 0x1560 <__clzsi2+0x64>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	12 c0       	rjmp	.+36     	; 0x1560 <__clzsi2+0x64>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	e8 16       	cp	r14, r24
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	f8 06       	cpc	r15, r24
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 07       	cpc	r16, r24
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	18 07       	cpc	r17, r24
    154c:	28 f0       	brcs	.+10     	; 0x1558 <__clzsi2+0x5c>
    154e:	88 e1       	ldi	r24, 0x18	; 24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <__clzsi2+0x64>
    1558:	80 e1       	ldi	r24, 0x10	; 16
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	20 e2       	ldi	r18, 0x20	; 32
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	28 1b       	sub	r18, r24
    156a:	39 0b       	sbc	r19, r25
    156c:	4a 0b       	sbc	r20, r26
    156e:	5b 0b       	sbc	r21, r27
    1570:	04 c0       	rjmp	.+8      	; 0x157a <__clzsi2+0x7e>
    1572:	16 95       	lsr	r17
    1574:	07 95       	ror	r16
    1576:	f7 94       	ror	r15
    1578:	e7 94       	ror	r14
    157a:	8a 95       	dec	r24
    157c:	d2 f7       	brpl	.-12     	; 0x1572 <__clzsi2+0x76>
    157e:	f7 01       	movw	r30, r14
    1580:	e3 5d       	subi	r30, 0xD3	; 211
    1582:	fe 4f       	sbci	r31, 0xFE	; 254
    1584:	80 81       	ld	r24, Z
    1586:	28 1b       	sub	r18, r24
    1588:	31 09       	sbc	r19, r1
    158a:	41 09       	sbc	r20, r1
    158c:	51 09       	sbc	r21, r1
    158e:	c9 01       	movw	r24, r18
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	08 95       	ret

0000159a <__pack_f>:
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	fc 01       	movw	r30, r24
    15a6:	e4 80       	ldd	r14, Z+4	; 0x04
    15a8:	f5 80       	ldd	r15, Z+5	; 0x05
    15aa:	06 81       	ldd	r16, Z+6	; 0x06
    15ac:	17 81       	ldd	r17, Z+7	; 0x07
    15ae:	d1 80       	ldd	r13, Z+1	; 0x01
    15b0:	80 81       	ld	r24, Z
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	48 f4       	brcc	.+18     	; 0x15c8 <__pack_f+0x2e>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e1       	ldi	r26, 0x10	; 16
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 2a       	or	r14, r24
    15c0:	f9 2a       	or	r15, r25
    15c2:	0a 2b       	or	r16, r26
    15c4:	1b 2b       	or	r17, r27
    15c6:	a5 c0       	rjmp	.+330    	; 0x1712 <__pack_f+0x178>
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	09 f4       	brne	.+2      	; 0x15ce <__pack_f+0x34>
    15cc:	9f c0       	rjmp	.+318    	; 0x170c <__pack_f+0x172>
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	21 f4       	brne	.+8      	; 0x15da <__pack_f+0x40>
    15d2:	ee 24       	eor	r14, r14
    15d4:	ff 24       	eor	r15, r15
    15d6:	87 01       	movw	r16, r14
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <__pack_f+0x4a>
    15da:	e1 14       	cp	r14, r1
    15dc:	f1 04       	cpc	r15, r1
    15de:	01 05       	cpc	r16, r1
    15e0:	11 05       	cpc	r17, r1
    15e2:	19 f4       	brne	.+6      	; 0x15ea <__pack_f+0x50>
    15e4:	e0 e0       	ldi	r30, 0x00	; 0
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	96 c0       	rjmp	.+300    	; 0x1716 <__pack_f+0x17c>
    15ea:	62 81       	ldd	r22, Z+2	; 0x02
    15ec:	73 81       	ldd	r23, Z+3	; 0x03
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	62 38       	cpi	r22, 0x82	; 130
    15f2:	79 07       	cpc	r23, r25
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <__pack_f+0x5e>
    15f6:	5b c0       	rjmp	.+182    	; 0x16ae <__pack_f+0x114>
    15f8:	22 e8       	ldi	r18, 0x82	; 130
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	26 1b       	sub	r18, r22
    15fe:	37 0b       	sbc	r19, r23
    1600:	2a 31       	cpi	r18, 0x1A	; 26
    1602:	31 05       	cpc	r19, r1
    1604:	2c f0       	brlt	.+10     	; 0x1610 <__pack_f+0x76>
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	2a c0       	rjmp	.+84     	; 0x1664 <__pack_f+0xca>
    1610:	b8 01       	movw	r22, r16
    1612:	a7 01       	movw	r20, r14
    1614:	02 2e       	mov	r0, r18
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__pack_f+0x86>
    1618:	76 95       	lsr	r23
    161a:	67 95       	ror	r22
    161c:	57 95       	ror	r21
    161e:	47 95       	ror	r20
    1620:	0a 94       	dec	r0
    1622:	d2 f7       	brpl	.-12     	; 0x1618 <__pack_f+0x7e>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <__pack_f+0x9c>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	aa 1f       	adc	r26, r26
    1634:	bb 1f       	adc	r27, r27
    1636:	2a 95       	dec	r18
    1638:	d2 f7       	brpl	.-12     	; 0x162e <__pack_f+0x94>
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	a1 09       	sbc	r26, r1
    163e:	b1 09       	sbc	r27, r1
    1640:	8e 21       	and	r24, r14
    1642:	9f 21       	and	r25, r15
    1644:	a0 23       	and	r26, r16
    1646:	b1 23       	and	r27, r17
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	a1 05       	cpc	r26, r1
    164c:	b1 05       	cpc	r27, r1
    164e:	21 f0       	breq	.+8      	; 0x1658 <__pack_f+0xbe>
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	9a 01       	movw	r18, r20
    165a:	ab 01       	movw	r20, r22
    165c:	28 2b       	or	r18, r24
    165e:	39 2b       	or	r19, r25
    1660:	4a 2b       	or	r20, r26
    1662:	5b 2b       	or	r21, r27
    1664:	da 01       	movw	r26, r20
    1666:	c9 01       	movw	r24, r18
    1668:	8f 77       	andi	r24, 0x7F	; 127
    166a:	90 70       	andi	r25, 0x00	; 0
    166c:	a0 70       	andi	r26, 0x00	; 0
    166e:	b0 70       	andi	r27, 0x00	; 0
    1670:	80 34       	cpi	r24, 0x40	; 64
    1672:	91 05       	cpc	r25, r1
    1674:	a1 05       	cpc	r26, r1
    1676:	b1 05       	cpc	r27, r1
    1678:	39 f4       	brne	.+14     	; 0x1688 <__pack_f+0xee>
    167a:	27 ff       	sbrs	r18, 7
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <__pack_f+0xf6>
    167e:	20 5c       	subi	r18, 0xC0	; 192
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	4f 4f       	sbci	r20, 0xFF	; 255
    1684:	5f 4f       	sbci	r21, 0xFF	; 255
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <__pack_f+0xf6>
    1688:	21 5c       	subi	r18, 0xC1	; 193
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	4f 4f       	sbci	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	e0 e0       	ldi	r30, 0x00	; 0
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	20 30       	cpi	r18, 0x00	; 0
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	3a 07       	cpc	r19, r26
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	4a 07       	cpc	r20, r26
    169e:	a0 e4       	ldi	r26, 0x40	; 64
    16a0:	5a 07       	cpc	r21, r26
    16a2:	10 f0       	brcs	.+4      	; 0x16a8 <__pack_f+0x10e>
    16a4:	e1 e0       	ldi	r30, 0x01	; 1
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	79 01       	movw	r14, r18
    16aa:	8a 01       	movw	r16, r20
    16ac:	27 c0       	rjmp	.+78     	; 0x16fc <__pack_f+0x162>
    16ae:	60 38       	cpi	r22, 0x80	; 128
    16b0:	71 05       	cpc	r23, r1
    16b2:	64 f5       	brge	.+88     	; 0x170c <__pack_f+0x172>
    16b4:	fb 01       	movw	r30, r22
    16b6:	e1 58       	subi	r30, 0x81	; 129
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	d8 01       	movw	r26, r16
    16bc:	c7 01       	movw	r24, r14
    16be:	8f 77       	andi	r24, 0x7F	; 127
    16c0:	90 70       	andi	r25, 0x00	; 0
    16c2:	a0 70       	andi	r26, 0x00	; 0
    16c4:	b0 70       	andi	r27, 0x00	; 0
    16c6:	80 34       	cpi	r24, 0x40	; 64
    16c8:	91 05       	cpc	r25, r1
    16ca:	a1 05       	cpc	r26, r1
    16cc:	b1 05       	cpc	r27, r1
    16ce:	39 f4       	brne	.+14     	; 0x16de <__pack_f+0x144>
    16d0:	e7 fe       	sbrs	r14, 7
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <__pack_f+0x154>
    16d4:	80 e4       	ldi	r24, 0x40	; 64
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <__pack_f+0x14c>
    16de:	8f e3       	ldi	r24, 0x3F	; 63
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e8 0e       	add	r14, r24
    16e8:	f9 1e       	adc	r15, r25
    16ea:	0a 1f       	adc	r16, r26
    16ec:	1b 1f       	adc	r17, r27
    16ee:	17 ff       	sbrs	r17, 7
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <__pack_f+0x162>
    16f2:	16 95       	lsr	r17
    16f4:	07 95       	ror	r16
    16f6:	f7 94       	ror	r15
    16f8:	e7 94       	ror	r14
    16fa:	31 96       	adiw	r30, 0x01	; 1
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	16 95       	lsr	r17
    1700:	07 95       	ror	r16
    1702:	f7 94       	ror	r15
    1704:	e7 94       	ror	r14
    1706:	8a 95       	dec	r24
    1708:	d1 f7       	brne	.-12     	; 0x16fe <__pack_f+0x164>
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <__pack_f+0x17c>
    170c:	ee 24       	eor	r14, r14
    170e:	ff 24       	eor	r15, r15
    1710:	87 01       	movw	r16, r14
    1712:	ef ef       	ldi	r30, 0xFF	; 255
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	6e 2f       	mov	r22, r30
    1718:	67 95       	ror	r22
    171a:	66 27       	eor	r22, r22
    171c:	67 95       	ror	r22
    171e:	90 2f       	mov	r25, r16
    1720:	9f 77       	andi	r25, 0x7F	; 127
    1722:	d7 94       	ror	r13
    1724:	dd 24       	eor	r13, r13
    1726:	d7 94       	ror	r13
    1728:	8e 2f       	mov	r24, r30
    172a:	86 95       	lsr	r24
    172c:	49 2f       	mov	r20, r25
    172e:	46 2b       	or	r20, r22
    1730:	58 2f       	mov	r21, r24
    1732:	5d 29       	or	r21, r13
    1734:	b7 01       	movw	r22, r14
    1736:	ca 01       	movw	r24, r20
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	08 95       	ret

00001744 <__unpack_f>:
    1744:	fc 01       	movw	r30, r24
    1746:	db 01       	movw	r26, r22
    1748:	40 81       	ld	r20, Z
    174a:	51 81       	ldd	r21, Z+1	; 0x01
    174c:	22 81       	ldd	r18, Z+2	; 0x02
    174e:	62 2f       	mov	r22, r18
    1750:	6f 77       	andi	r22, 0x7F	; 127
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	22 1f       	adc	r18, r18
    1756:	22 27       	eor	r18, r18
    1758:	22 1f       	adc	r18, r18
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	89 2f       	mov	r24, r25
    175e:	88 0f       	add	r24, r24
    1760:	82 2b       	or	r24, r18
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	99 1f       	adc	r25, r25
    1768:	99 27       	eor	r25, r25
    176a:	99 1f       	adc	r25, r25
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	9c 93       	st	X, r25
    1770:	11 97       	sbiw	r26, 0x01	; 1
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	a9 f5       	brne	.+106    	; 0x17e2 <__unpack_f+0x9e>
    1778:	41 15       	cp	r20, r1
    177a:	51 05       	cpc	r21, r1
    177c:	61 05       	cpc	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	11 f4       	brne	.+4      	; 0x1786 <__unpack_f+0x42>
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	37 c0       	rjmp	.+110    	; 0x17f4 <__unpack_f+0xb0>
    1786:	82 e8       	ldi	r24, 0x82	; 130
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	13 96       	adiw	r26, 0x03	; 3
    178c:	9c 93       	st	X, r25
    178e:	8e 93       	st	-X, r24
    1790:	12 97       	sbiw	r26, 0x02	; 2
    1792:	9a 01       	movw	r18, r20
    1794:	ab 01       	movw	r20, r22
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	44 1f       	adc	r20, r20
    179e:	55 1f       	adc	r21, r21
    17a0:	6a 95       	dec	r22
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <__unpack_f+0x54>
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	8c 93       	st	X, r24
    17a8:	0d c0       	rjmp	.+26     	; 0x17c4 <__unpack_f+0x80>
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	44 1f       	adc	r20, r20
    17b0:	55 1f       	adc	r21, r21
    17b2:	12 96       	adiw	r26, 0x02	; 2
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	13 97       	sbiw	r26, 0x03	; 3
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	13 96       	adiw	r26, 0x03	; 3
    17be:	9c 93       	st	X, r25
    17c0:	8e 93       	st	-X, r24
    17c2:	12 97       	sbiw	r26, 0x02	; 2
    17c4:	20 30       	cpi	r18, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	38 07       	cpc	r19, r24
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	48 07       	cpc	r20, r24
    17ce:	80 e4       	ldi	r24, 0x40	; 64
    17d0:	58 07       	cpc	r21, r24
    17d2:	58 f3       	brcs	.-42     	; 0x17aa <__unpack_f+0x66>
    17d4:	14 96       	adiw	r26, 0x04	; 4
    17d6:	2d 93       	st	X+, r18
    17d8:	3d 93       	st	X+, r19
    17da:	4d 93       	st	X+, r20
    17dc:	5c 93       	st	X, r21
    17de:	17 97       	sbiw	r26, 0x07	; 7
    17e0:	08 95       	ret
    17e2:	2f 3f       	cpi	r18, 0xFF	; 255
    17e4:	31 05       	cpc	r19, r1
    17e6:	79 f4       	brne	.+30     	; 0x1806 <__unpack_f+0xc2>
    17e8:	41 15       	cp	r20, r1
    17ea:	51 05       	cpc	r21, r1
    17ec:	61 05       	cpc	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <__unpack_f+0xb4>
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	8c 93       	st	X, r24
    17f6:	08 95       	ret
    17f8:	64 ff       	sbrs	r22, 4
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <__unpack_f+0xbe>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8c 93       	st	X, r24
    1800:	12 c0       	rjmp	.+36     	; 0x1826 <__unpack_f+0xe2>
    1802:	1c 92       	st	X, r1
    1804:	10 c0       	rjmp	.+32     	; 0x1826 <__unpack_f+0xe2>
    1806:	2f 57       	subi	r18, 0x7F	; 127
    1808:	30 40       	sbci	r19, 0x00	; 0
    180a:	13 96       	adiw	r26, 0x03	; 3
    180c:	3c 93       	st	X, r19
    180e:	2e 93       	st	-X, r18
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	8c 93       	st	X, r24
    1816:	87 e0       	ldi	r24, 0x07	; 7
    1818:	44 0f       	add	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	66 1f       	adc	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	8a 95       	dec	r24
    1822:	d1 f7       	brne	.-12     	; 0x1818 <__unpack_f+0xd4>
    1824:	70 64       	ori	r23, 0x40	; 64
    1826:	14 96       	adiw	r26, 0x04	; 4
    1828:	4d 93       	st	X+, r20
    182a:	5d 93       	st	X+, r21
    182c:	6d 93       	st	X+, r22
    182e:	7c 93       	st	X, r23
    1830:	17 97       	sbiw	r26, 0x07	; 7
    1832:	08 95       	ret

00001834 <__fpcmp_parts_f>:
    1834:	1f 93       	push	r17
    1836:	dc 01       	movw	r26, r24
    1838:	fb 01       	movw	r30, r22
    183a:	9c 91       	ld	r25, X
    183c:	92 30       	cpi	r25, 0x02	; 2
    183e:	08 f4       	brcc	.+2      	; 0x1842 <__fpcmp_parts_f+0xe>
    1840:	47 c0       	rjmp	.+142    	; 0x18d0 <__fpcmp_parts_f+0x9c>
    1842:	80 81       	ld	r24, Z
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	08 f4       	brcc	.+2      	; 0x184a <__fpcmp_parts_f+0x16>
    1848:	43 c0       	rjmp	.+134    	; 0x18d0 <__fpcmp_parts_f+0x9c>
    184a:	94 30       	cpi	r25, 0x04	; 4
    184c:	51 f4       	brne	.+20     	; 0x1862 <__fpcmp_parts_f+0x2e>
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	1c 91       	ld	r17, X
    1852:	84 30       	cpi	r24, 0x04	; 4
    1854:	99 f5       	brne	.+102    	; 0x18bc <__fpcmp_parts_f+0x88>
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	68 2f       	mov	r22, r24
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	61 1b       	sub	r22, r17
    185e:	71 09       	sbc	r23, r1
    1860:	3f c0       	rjmp	.+126    	; 0x18e0 <__fpcmp_parts_f+0xac>
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	21 f0       	breq	.+8      	; 0x186e <__fpcmp_parts_f+0x3a>
    1866:	92 30       	cpi	r25, 0x02	; 2
    1868:	31 f4       	brne	.+12     	; 0x1876 <__fpcmp_parts_f+0x42>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	b9 f1       	breq	.+110    	; 0x18dc <__fpcmp_parts_f+0xa8>
    186e:	81 81       	ldd	r24, Z+1	; 0x01
    1870:	88 23       	and	r24, r24
    1872:	89 f1       	breq	.+98     	; 0x18d6 <__fpcmp_parts_f+0xa2>
    1874:	2d c0       	rjmp	.+90     	; 0x18d0 <__fpcmp_parts_f+0x9c>
    1876:	11 96       	adiw	r26, 0x01	; 1
    1878:	1c 91       	ld	r17, X
    187a:	11 97       	sbiw	r26, 0x01	; 1
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	f1 f0       	breq	.+60     	; 0x18bc <__fpcmp_parts_f+0x88>
    1880:	81 81       	ldd	r24, Z+1	; 0x01
    1882:	18 17       	cp	r17, r24
    1884:	d9 f4       	brne	.+54     	; 0x18bc <__fpcmp_parts_f+0x88>
    1886:	12 96       	adiw	r26, 0x02	; 2
    1888:	2d 91       	ld	r18, X+
    188a:	3c 91       	ld	r19, X
    188c:	13 97       	sbiw	r26, 0x03	; 3
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	82 17       	cp	r24, r18
    1894:	93 07       	cpc	r25, r19
    1896:	94 f0       	brlt	.+36     	; 0x18bc <__fpcmp_parts_f+0x88>
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	bc f0       	brlt	.+46     	; 0x18cc <__fpcmp_parts_f+0x98>
    189e:	14 96       	adiw	r26, 0x04	; 4
    18a0:	8d 91       	ld	r24, X+
    18a2:	9d 91       	ld	r25, X+
    18a4:	0d 90       	ld	r0, X+
    18a6:	bc 91       	ld	r27, X
    18a8:	a0 2d       	mov	r26, r0
    18aa:	24 81       	ldd	r18, Z+4	; 0x04
    18ac:	35 81       	ldd	r19, Z+5	; 0x05
    18ae:	46 81       	ldd	r20, Z+6	; 0x06
    18b0:	57 81       	ldd	r21, Z+7	; 0x07
    18b2:	28 17       	cp	r18, r24
    18b4:	39 07       	cpc	r19, r25
    18b6:	4a 07       	cpc	r20, r26
    18b8:	5b 07       	cpc	r21, r27
    18ba:	18 f4       	brcc	.+6      	; 0x18c2 <__fpcmp_parts_f+0x8e>
    18bc:	11 23       	and	r17, r17
    18be:	41 f0       	breq	.+16     	; 0x18d0 <__fpcmp_parts_f+0x9c>
    18c0:	0a c0       	rjmp	.+20     	; 0x18d6 <__fpcmp_parts_f+0xa2>
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	a4 07       	cpc	r26, r20
    18c8:	b5 07       	cpc	r27, r21
    18ca:	40 f4       	brcc	.+16     	; 0x18dc <__fpcmp_parts_f+0xa8>
    18cc:	11 23       	and	r17, r17
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <__fpcmp_parts_f+0xa2>
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <__fpcmp_parts_f+0xac>
    18d6:	6f ef       	ldi	r22, 0xFF	; 255
    18d8:	7f ef       	ldi	r23, 0xFF	; 255
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <__fpcmp_parts_f+0xac>
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	cb 01       	movw	r24, r22
    18e2:	1f 91       	pop	r17
    18e4:	08 95       	ret

000018e6 <__udivmodhi4>:
    18e6:	aa 1b       	sub	r26, r26
    18e8:	bb 1b       	sub	r27, r27
    18ea:	51 e1       	ldi	r21, 0x11	; 17
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <__udivmodhi4_ep>

000018ee <__udivmodhi4_loop>:
    18ee:	aa 1f       	adc	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	a6 17       	cp	r26, r22
    18f4:	b7 07       	cpc	r27, r23
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <__udivmodhi4_ep>
    18f8:	a6 1b       	sub	r26, r22
    18fa:	b7 0b       	sbc	r27, r23

000018fc <__udivmodhi4_ep>:
    18fc:	88 1f       	adc	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	5a 95       	dec	r21
    1902:	a9 f7       	brne	.-22     	; 0x18ee <__udivmodhi4_loop>
    1904:	80 95       	com	r24
    1906:	90 95       	com	r25
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	08 95       	ret

0000190e <__divmodhi4>:
    190e:	97 fb       	bst	r25, 7
    1910:	09 2e       	mov	r0, r25
    1912:	07 26       	eor	r0, r23
    1914:	0a d0       	rcall	.+20     	; 0x192a <__divmodhi4_neg1>
    1916:	77 fd       	sbrc	r23, 7
    1918:	04 d0       	rcall	.+8      	; 0x1922 <__divmodhi4_neg2>
    191a:	e5 df       	rcall	.-54     	; 0x18e6 <__udivmodhi4>
    191c:	06 d0       	rcall	.+12     	; 0x192a <__divmodhi4_neg1>
    191e:	00 20       	and	r0, r0
    1920:	1a f4       	brpl	.+6      	; 0x1928 <__divmodhi4_exit>

00001922 <__divmodhi4_neg2>:
    1922:	70 95       	com	r23
    1924:	61 95       	neg	r22
    1926:	7f 4f       	sbci	r23, 0xFF	; 255

00001928 <__divmodhi4_exit>:
    1928:	08 95       	ret

0000192a <__divmodhi4_neg1>:
    192a:	f6 f7       	brtc	.-4      	; 0x1928 <__divmodhi4_exit>
    192c:	90 95       	com	r25
    192e:	81 95       	neg	r24
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	08 95       	ret

00001934 <__prologue_saves__>:
    1934:	2f 92       	push	r2
    1936:	3f 92       	push	r3
    1938:	4f 92       	push	r4
    193a:	5f 92       	push	r5
    193c:	6f 92       	push	r6
    193e:	7f 92       	push	r7
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	ca 1b       	sub	r28, r26
    195e:	db 0b       	sbc	r29, r27
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	09 94       	ijmp

0000196c <__epilogue_restores__>:
    196c:	2a 88       	ldd	r2, Y+18	; 0x12
    196e:	39 88       	ldd	r3, Y+17	; 0x11
    1970:	48 88       	ldd	r4, Y+16	; 0x10
    1972:	5f 84       	ldd	r5, Y+15	; 0x0f
    1974:	6e 84       	ldd	r6, Y+14	; 0x0e
    1976:	7d 84       	ldd	r7, Y+13	; 0x0d
    1978:	8c 84       	ldd	r8, Y+12	; 0x0c
    197a:	9b 84       	ldd	r9, Y+11	; 0x0b
    197c:	aa 84       	ldd	r10, Y+10	; 0x0a
    197e:	b9 84       	ldd	r11, Y+9	; 0x09
    1980:	c8 84       	ldd	r12, Y+8	; 0x08
    1982:	df 80       	ldd	r13, Y+7	; 0x07
    1984:	ee 80       	ldd	r14, Y+6	; 0x06
    1986:	fd 80       	ldd	r15, Y+5	; 0x05
    1988:	0c 81       	ldd	r16, Y+4	; 0x04
    198a:	1b 81       	ldd	r17, Y+3	; 0x03
    198c:	aa 81       	ldd	r26, Y+2	; 0x02
    198e:	b9 81       	ldd	r27, Y+1	; 0x01
    1990:	ce 0f       	add	r28, r30
    1992:	d1 1d       	adc	r29, r1
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	ed 01       	movw	r28, r26
    19a0:	08 95       	ret

000019a2 <fputs>:
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	7c 01       	movw	r14, r24
    19b0:	8b 01       	movw	r16, r22
    19b2:	db 01       	movw	r26, r22
    19b4:	13 96       	adiw	r26, 0x03	; 3
    19b6:	8c 91       	ld	r24, X
    19b8:	81 fd       	sbrc	r24, 1
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <fputs+0x20>
    19bc:	cf ef       	ldi	r28, 0xFF	; 255
    19be:	df ef       	ldi	r29, 0xFF	; 255
    19c0:	13 c0       	rjmp	.+38     	; 0x19e8 <fputs+0x46>
    19c2:	c0 e0       	ldi	r28, 0x00	; 0
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <fputs+0x3c>
    19c8:	d8 01       	movw	r26, r16
    19ca:	18 96       	adiw	r26, 0x08	; 8
    19cc:	ed 91       	ld	r30, X+
    19ce:	fc 91       	ld	r31, X
    19d0:	19 97       	sbiw	r26, 0x09	; 9
    19d2:	b8 01       	movw	r22, r16
    19d4:	09 95       	icall
    19d6:	89 2b       	or	r24, r25
    19d8:	11 f0       	breq	.+4      	; 0x19de <fputs+0x3c>
    19da:	cf ef       	ldi	r28, 0xFF	; 255
    19dc:	df ef       	ldi	r29, 0xFF	; 255
    19de:	f7 01       	movw	r30, r14
    19e0:	81 91       	ld	r24, Z+
    19e2:	7f 01       	movw	r14, r30
    19e4:	88 23       	and	r24, r24
    19e6:	81 f7       	brne	.-32     	; 0x19c8 <fputs+0x26>
    19e8:	ce 01       	movw	r24, r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	e6 e0       	ldi	r30, 0x06	; 6
    19f0:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__epilogue_restores__+0x18>

000019f4 <sprintf>:
    19f4:	ae e0       	ldi	r26, 0x0E	; 14
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	fd e0       	ldi	r31, 0x0D	; 13
    19fc:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__prologue_saves__+0x1c>
    1a00:	0d 89       	ldd	r16, Y+21	; 0x15
    1a02:	1e 89       	ldd	r17, Y+22	; 0x16
    1a04:	86 e0       	ldi	r24, 0x06	; 6
    1a06:	8c 83       	std	Y+4, r24	; 0x04
    1a08:	1a 83       	std	Y+2, r17	; 0x02
    1a0a:	09 83       	std	Y+1, r16	; 0x01
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f e7       	ldi	r25, 0x7F	; 127
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	9e 01       	movw	r18, r28
    1a16:	27 5e       	subi	r18, 0xE7	; 231
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	6f 89       	ldd	r22, Y+23	; 0x17
    1a20:	78 8d       	ldd	r23, Y+24	; 0x18
    1a22:	a9 01       	movw	r20, r18
    1a24:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <vfprintf>
    1a28:	2f 81       	ldd	r18, Y+7	; 0x07
    1a2a:	38 85       	ldd	r19, Y+8	; 0x08
    1a2c:	02 0f       	add	r16, r18
    1a2e:	13 1f       	adc	r17, r19
    1a30:	f8 01       	movw	r30, r16
    1a32:	10 82       	st	Z, r1
    1a34:	2e 96       	adiw	r28, 0x0e	; 14
    1a36:	e4 e0       	ldi	r30, 0x04	; 4
    1a38:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__epilogue_restores__+0x1c>

00001a3c <sin>:
    1a3c:	9f 93       	push	r25
    1a3e:	82 d2       	rcall	.+1284   	; 0x1f44 <__fp_rempio2>
    1a40:	0f 90       	pop	r0
    1a42:	07 fc       	sbrc	r0, 7
    1a44:	ee 5f       	subi	r30, 0xFE	; 254
    1a46:	a5 c2       	rjmp	.+1354   	; 0x1f92 <__fp_sinus>

00001a48 <vfprintf>:
    1a48:	ab e0       	ldi	r26, 0x0B	; 11
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ea e2       	ldi	r30, 0x2A	; 42
    1a4e:	fd e0       	ldi	r31, 0x0D	; 13
    1a50:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__>
    1a54:	3c 01       	movw	r6, r24
    1a56:	2b 01       	movw	r4, r22
    1a58:	5a 01       	movw	r10, r20
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	17 82       	std	Z+7, r1	; 0x07
    1a5e:	16 82       	std	Z+6, r1	; 0x06
    1a60:	83 81       	ldd	r24, Z+3	; 0x03
    1a62:	81 fd       	sbrc	r24, 1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <vfprintf+0x24>
    1a66:	6f ef       	ldi	r22, 0xFF	; 255
    1a68:	7f ef       	ldi	r23, 0xFF	; 255
    1a6a:	c6 c1       	rjmp	.+908    	; 0x1df8 <vfprintf+0x3b0>
    1a6c:	9a e0       	ldi	r25, 0x0A	; 10
    1a6e:	89 2e       	mov	r8, r25
    1a70:	1e 01       	movw	r2, r28
    1a72:	08 94       	sec
    1a74:	21 1c       	adc	r2, r1
    1a76:	31 1c       	adc	r3, r1
    1a78:	f3 01       	movw	r30, r6
    1a7a:	23 81       	ldd	r18, Z+3	; 0x03
    1a7c:	f2 01       	movw	r30, r4
    1a7e:	23 fd       	sbrc	r18, 3
    1a80:	85 91       	lpm	r24, Z+
    1a82:	23 ff       	sbrs	r18, 3
    1a84:	81 91       	ld	r24, Z+
    1a86:	2f 01       	movw	r4, r30
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <vfprintf+0x46>
    1a8c:	b2 c1       	rjmp	.+868    	; 0x1df2 <vfprintf+0x3aa>
    1a8e:	85 32       	cpi	r24, 0x25	; 37
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <vfprintf+0x58>
    1a92:	23 fd       	sbrc	r18, 3
    1a94:	85 91       	lpm	r24, Z+
    1a96:	23 ff       	sbrs	r18, 3
    1a98:	81 91       	ld	r24, Z+
    1a9a:	2f 01       	movw	r4, r30
    1a9c:	85 32       	cpi	r24, 0x25	; 37
    1a9e:	29 f4       	brne	.+10     	; 0x1aaa <vfprintf+0x62>
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	b3 01       	movw	r22, r6
    1aa4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1aa8:	e7 cf       	rjmp	.-50     	; 0x1a78 <vfprintf+0x30>
    1aaa:	98 2f       	mov	r25, r24
    1aac:	ff 24       	eor	r15, r15
    1aae:	ee 24       	eor	r14, r14
    1ab0:	99 24       	eor	r9, r9
    1ab2:	ff e1       	ldi	r31, 0x1F	; 31
    1ab4:	ff 15       	cp	r31, r15
    1ab6:	d0 f0       	brcs	.+52     	; 0x1aec <vfprintf+0xa4>
    1ab8:	9b 32       	cpi	r25, 0x2B	; 43
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <vfprintf+0x8e>
    1abc:	9c 32       	cpi	r25, 0x2C	; 44
    1abe:	28 f4       	brcc	.+10     	; 0x1aca <vfprintf+0x82>
    1ac0:	90 32       	cpi	r25, 0x20	; 32
    1ac2:	59 f0       	breq	.+22     	; 0x1ada <vfprintf+0x92>
    1ac4:	93 32       	cpi	r25, 0x23	; 35
    1ac6:	91 f4       	brne	.+36     	; 0x1aec <vfprintf+0xa4>
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <vfprintf+0x9e>
    1aca:	9d 32       	cpi	r25, 0x2D	; 45
    1acc:	49 f0       	breq	.+18     	; 0x1ae0 <vfprintf+0x98>
    1ace:	90 33       	cpi	r25, 0x30	; 48
    1ad0:	69 f4       	brne	.+26     	; 0x1aec <vfprintf+0xa4>
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	24 c0       	rjmp	.+72     	; 0x1b1e <vfprintf+0xd6>
    1ad6:	52 e0       	ldi	r21, 0x02	; 2
    1ad8:	f5 2a       	or	r15, r21
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	f8 2a       	or	r15, r24
    1ade:	28 c0       	rjmp	.+80     	; 0x1b30 <vfprintf+0xe8>
    1ae0:	98 e0       	ldi	r25, 0x08	; 8
    1ae2:	f9 2a       	or	r15, r25
    1ae4:	25 c0       	rjmp	.+74     	; 0x1b30 <vfprintf+0xe8>
    1ae6:	e0 e1       	ldi	r30, 0x10	; 16
    1ae8:	fe 2a       	or	r15, r30
    1aea:	22 c0       	rjmp	.+68     	; 0x1b30 <vfprintf+0xe8>
    1aec:	f7 fc       	sbrc	r15, 7
    1aee:	29 c0       	rjmp	.+82     	; 0x1b42 <vfprintf+0xfa>
    1af0:	89 2f       	mov	r24, r25
    1af2:	80 53       	subi	r24, 0x30	; 48
    1af4:	8a 30       	cpi	r24, 0x0A	; 10
    1af6:	70 f4       	brcc	.+28     	; 0x1b14 <vfprintf+0xcc>
    1af8:	f6 fe       	sbrs	r15, 6
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <vfprintf+0xbe>
    1afc:	98 9c       	mul	r9, r8
    1afe:	90 2c       	mov	r9, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	98 0e       	add	r9, r24
    1b04:	15 c0       	rjmp	.+42     	; 0x1b30 <vfprintf+0xe8>
    1b06:	e8 9c       	mul	r14, r8
    1b08:	e0 2c       	mov	r14, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	e8 0e       	add	r14, r24
    1b0e:	f0 e2       	ldi	r31, 0x20	; 32
    1b10:	ff 2a       	or	r15, r31
    1b12:	0e c0       	rjmp	.+28     	; 0x1b30 <vfprintf+0xe8>
    1b14:	9e 32       	cpi	r25, 0x2E	; 46
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <vfprintf+0xda>
    1b18:	f6 fc       	sbrc	r15, 6
    1b1a:	6b c1       	rjmp	.+726    	; 0x1df2 <vfprintf+0x3aa>
    1b1c:	40 e4       	ldi	r20, 0x40	; 64
    1b1e:	f4 2a       	or	r15, r20
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <vfprintf+0xe8>
    1b22:	9c 36       	cpi	r25, 0x6C	; 108
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <vfprintf+0xe4>
    1b26:	50 e8       	ldi	r21, 0x80	; 128
    1b28:	f5 2a       	or	r15, r21
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <vfprintf+0xe8>
    1b2c:	98 36       	cpi	r25, 0x68	; 104
    1b2e:	49 f4       	brne	.+18     	; 0x1b42 <vfprintf+0xfa>
    1b30:	f2 01       	movw	r30, r4
    1b32:	23 fd       	sbrc	r18, 3
    1b34:	95 91       	lpm	r25, Z+
    1b36:	23 ff       	sbrs	r18, 3
    1b38:	91 91       	ld	r25, Z+
    1b3a:	2f 01       	movw	r4, r30
    1b3c:	99 23       	and	r25, r25
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0xfa>
    1b40:	b8 cf       	rjmp	.-144    	; 0x1ab2 <vfprintf+0x6a>
    1b42:	89 2f       	mov	r24, r25
    1b44:	85 54       	subi	r24, 0x45	; 69
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	18 f0       	brcs	.+6      	; 0x1b50 <vfprintf+0x108>
    1b4a:	80 52       	subi	r24, 0x20	; 32
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	38 f4       	brcc	.+14     	; 0x1b5e <vfprintf+0x116>
    1b50:	44 e0       	ldi	r20, 0x04	; 4
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	a4 0e       	add	r10, r20
    1b56:	b5 1e       	adc	r11, r21
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	59 83       	std	Y+1, r21	; 0x01
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <vfprintf+0x134>
    1b5e:	93 36       	cpi	r25, 0x63	; 99
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <vfprintf+0x126>
    1b62:	93 37       	cpi	r25, 0x73	; 115
    1b64:	79 f0       	breq	.+30     	; 0x1b84 <vfprintf+0x13c>
    1b66:	93 35       	cpi	r25, 0x53	; 83
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <vfprintf+0x124>
    1b6a:	56 c0       	rjmp	.+172    	; 0x1c18 <vfprintf+0x1d0>
    1b6c:	20 c0       	rjmp	.+64     	; 0x1bae <vfprintf+0x166>
    1b6e:	f5 01       	movw	r30, r10
    1b70:	80 81       	ld	r24, Z
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	42 e0       	ldi	r20, 0x02	; 2
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	a4 0e       	add	r10, r20
    1b7a:	b5 1e       	adc	r11, r21
    1b7c:	61 01       	movw	r12, r2
    1b7e:	01 e0       	ldi	r16, 0x01	; 1
    1b80:	10 e0       	ldi	r17, 0x00	; 0
    1b82:	12 c0       	rjmp	.+36     	; 0x1ba8 <vfprintf+0x160>
    1b84:	f5 01       	movw	r30, r10
    1b86:	c0 80       	ld	r12, Z
    1b88:	d1 80       	ldd	r13, Z+1	; 0x01
    1b8a:	f6 fc       	sbrc	r15, 6
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <vfprintf+0x14c>
    1b8e:	6f ef       	ldi	r22, 0xFF	; 255
    1b90:	7f ef       	ldi	r23, 0xFF	; 255
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x150>
    1b94:	69 2d       	mov	r22, r9
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	42 e0       	ldi	r20, 0x02	; 2
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	a4 0e       	add	r10, r20
    1b9e:	b5 1e       	adc	r11, r21
    1ba0:	c6 01       	movw	r24, r12
    1ba2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <strnlen>
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	5f e7       	ldi	r21, 0x7F	; 127
    1baa:	f5 22       	and	r15, r21
    1bac:	14 c0       	rjmp	.+40     	; 0x1bd6 <vfprintf+0x18e>
    1bae:	f5 01       	movw	r30, r10
    1bb0:	c0 80       	ld	r12, Z
    1bb2:	d1 80       	ldd	r13, Z+1	; 0x01
    1bb4:	f6 fc       	sbrc	r15, 6
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <vfprintf+0x176>
    1bb8:	6f ef       	ldi	r22, 0xFF	; 255
    1bba:	7f ef       	ldi	r23, 0xFF	; 255
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <vfprintf+0x17a>
    1bbe:	69 2d       	mov	r22, r9
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	42 e0       	ldi	r20, 0x02	; 2
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	a4 0e       	add	r10, r20
    1bc8:	b5 1e       	adc	r11, r21
    1bca:	c6 01       	movw	r24, r12
    1bcc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <strnlen_P>
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	50 e8       	ldi	r21, 0x80	; 128
    1bd4:	f5 2a       	or	r15, r21
    1bd6:	f3 fe       	sbrs	r15, 3
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <vfprintf+0x1a0>
    1bda:	1a c0       	rjmp	.+52     	; 0x1c10 <vfprintf+0x1c8>
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	b3 01       	movw	r22, r6
    1be2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1be6:	ea 94       	dec	r14
    1be8:	8e 2d       	mov	r24, r14
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	08 17       	cp	r16, r24
    1bee:	19 07       	cpc	r17, r25
    1bf0:	a8 f3       	brcs	.-22     	; 0x1bdc <vfprintf+0x194>
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <vfprintf+0x1c8>
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	f7 fc       	sbrc	r15, 7
    1bf8:	85 91       	lpm	r24, Z+
    1bfa:	f7 fe       	sbrs	r15, 7
    1bfc:	81 91       	ld	r24, Z+
    1bfe:	6f 01       	movw	r12, r30
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	b3 01       	movw	r22, r6
    1c04:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1c08:	e1 10       	cpse	r14, r1
    1c0a:	ea 94       	dec	r14
    1c0c:	01 50       	subi	r16, 0x01	; 1
    1c0e:	10 40       	sbci	r17, 0x00	; 0
    1c10:	01 15       	cp	r16, r1
    1c12:	11 05       	cpc	r17, r1
    1c14:	79 f7       	brne	.-34     	; 0x1bf4 <vfprintf+0x1ac>
    1c16:	ea c0       	rjmp	.+468    	; 0x1dec <vfprintf+0x3a4>
    1c18:	94 36       	cpi	r25, 0x64	; 100
    1c1a:	11 f0       	breq	.+4      	; 0x1c20 <vfprintf+0x1d8>
    1c1c:	99 36       	cpi	r25, 0x69	; 105
    1c1e:	69 f5       	brne	.+90     	; 0x1c7a <vfprintf+0x232>
    1c20:	f7 fe       	sbrs	r15, 7
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <vfprintf+0x1ec>
    1c24:	f5 01       	movw	r30, r10
    1c26:	20 81       	ld	r18, Z
    1c28:	31 81       	ldd	r19, Z+1	; 0x01
    1c2a:	42 81       	ldd	r20, Z+2	; 0x02
    1c2c:	53 81       	ldd	r21, Z+3	; 0x03
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0a c0       	rjmp	.+20     	; 0x1c48 <vfprintf+0x200>
    1c34:	f5 01       	movw	r30, r10
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	44 27       	eor	r20, r20
    1c3e:	37 fd       	sbrc	r19, 7
    1c40:	40 95       	com	r20
    1c42:	54 2f       	mov	r21, r20
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a8 0e       	add	r10, r24
    1c4a:	b9 1e       	adc	r11, r25
    1c4c:	9f e6       	ldi	r25, 0x6F	; 111
    1c4e:	f9 22       	and	r15, r25
    1c50:	57 ff       	sbrs	r21, 7
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <vfprintf+0x21e>
    1c54:	50 95       	com	r21
    1c56:	40 95       	com	r20
    1c58:	30 95       	com	r19
    1c5a:	21 95       	neg	r18
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	e0 e8       	ldi	r30, 0x80	; 128
    1c64:	fe 2a       	or	r15, r30
    1c66:	ca 01       	movw	r24, r20
    1c68:	b9 01       	movw	r22, r18
    1c6a:	a1 01       	movw	r20, r2
    1c6c:	2a e0       	ldi	r18, 0x0A	; 10
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ultoa_invert>
    1c74:	d8 2e       	mov	r13, r24
    1c76:	d2 18       	sub	r13, r2
    1c78:	40 c0       	rjmp	.+128    	; 0x1cfa <vfprintf+0x2b2>
    1c7a:	95 37       	cpi	r25, 0x75	; 117
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <vfprintf+0x240>
    1c7e:	1f 2d       	mov	r17, r15
    1c80:	1f 7e       	andi	r17, 0xEF	; 239
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <vfprintf+0x27a>
    1c88:	1f 2d       	mov	r17, r15
    1c8a:	19 7f       	andi	r17, 0xF9	; 249
    1c8c:	9f 36       	cpi	r25, 0x6F	; 111
    1c8e:	61 f0       	breq	.+24     	; 0x1ca8 <vfprintf+0x260>
    1c90:	90 37       	cpi	r25, 0x70	; 112
    1c92:	20 f4       	brcc	.+8      	; 0x1c9c <vfprintf+0x254>
    1c94:	98 35       	cpi	r25, 0x58	; 88
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <vfprintf+0x252>
    1c98:	ac c0       	rjmp	.+344    	; 0x1df2 <vfprintf+0x3aa>
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <vfprintf+0x272>
    1c9c:	90 37       	cpi	r25, 0x70	; 112
    1c9e:	39 f0       	breq	.+14     	; 0x1cae <vfprintf+0x266>
    1ca0:	98 37       	cpi	r25, 0x78	; 120
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <vfprintf+0x25e>
    1ca4:	a6 c0       	rjmp	.+332    	; 0x1df2 <vfprintf+0x3aa>
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <vfprintf+0x268>
    1ca8:	28 e0       	ldi	r18, 0x08	; 8
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	0a c0       	rjmp	.+20     	; 0x1cc2 <vfprintf+0x27a>
    1cae:	10 61       	ori	r17, 0x10	; 16
    1cb0:	14 fd       	sbrc	r17, 4
    1cb2:	14 60       	ori	r17, 0x04	; 4
    1cb4:	20 e1       	ldi	r18, 0x10	; 16
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <vfprintf+0x27a>
    1cba:	14 fd       	sbrc	r17, 4
    1cbc:	16 60       	ori	r17, 0x06	; 6
    1cbe:	20 e1       	ldi	r18, 0x10	; 16
    1cc0:	32 e0       	ldi	r19, 0x02	; 2
    1cc2:	17 ff       	sbrs	r17, 7
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <vfprintf+0x28e>
    1cc6:	f5 01       	movw	r30, r10
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	44 e0       	ldi	r20, 0x04	; 4
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	08 c0       	rjmp	.+16     	; 0x1ce6 <vfprintf+0x29e>
    1cd6:	f5 01       	movw	r30, r10
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	bc 01       	movw	r22, r24
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	42 e0       	ldi	r20, 0x02	; 2
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	a4 0e       	add	r10, r20
    1ce8:	b5 1e       	adc	r11, r21
    1cea:	a1 01       	movw	r20, r2
    1cec:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__ultoa_invert>
    1cf0:	d8 2e       	mov	r13, r24
    1cf2:	d2 18       	sub	r13, r2
    1cf4:	8f e7       	ldi	r24, 0x7F	; 127
    1cf6:	f8 2e       	mov	r15, r24
    1cf8:	f1 22       	and	r15, r17
    1cfa:	f6 fe       	sbrs	r15, 6
    1cfc:	0b c0       	rjmp	.+22     	; 0x1d14 <vfprintf+0x2cc>
    1cfe:	5e ef       	ldi	r21, 0xFE	; 254
    1d00:	f5 22       	and	r15, r21
    1d02:	d9 14       	cp	r13, r9
    1d04:	38 f4       	brcc	.+14     	; 0x1d14 <vfprintf+0x2cc>
    1d06:	f4 fe       	sbrs	r15, 4
    1d08:	07 c0       	rjmp	.+14     	; 0x1d18 <vfprintf+0x2d0>
    1d0a:	f2 fc       	sbrc	r15, 2
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <vfprintf+0x2d0>
    1d0e:	8f ee       	ldi	r24, 0xEF	; 239
    1d10:	f8 22       	and	r15, r24
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <vfprintf+0x2d0>
    1d14:	1d 2d       	mov	r17, r13
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <vfprintf+0x2d2>
    1d18:	19 2d       	mov	r17, r9
    1d1a:	f4 fe       	sbrs	r15, 4
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <vfprintf+0x2f0>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ed 0d       	add	r30, r13
    1d22:	f1 1d       	adc	r31, r1
    1d24:	80 81       	ld	r24, Z
    1d26:	80 33       	cpi	r24, 0x30	; 48
    1d28:	19 f4       	brne	.+6      	; 0x1d30 <vfprintf+0x2e8>
    1d2a:	99 ee       	ldi	r25, 0xE9	; 233
    1d2c:	f9 22       	and	r15, r25
    1d2e:	08 c0       	rjmp	.+16     	; 0x1d40 <vfprintf+0x2f8>
    1d30:	1f 5f       	subi	r17, 0xFF	; 255
    1d32:	f2 fe       	sbrs	r15, 2
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <vfprintf+0x2f8>
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <vfprintf+0x2f6>
    1d38:	8f 2d       	mov	r24, r15
    1d3a:	86 78       	andi	r24, 0x86	; 134
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <vfprintf+0x2f8>
    1d3e:	1f 5f       	subi	r17, 0xFF	; 255
    1d40:	0f 2d       	mov	r16, r15
    1d42:	f3 fc       	sbrc	r15, 3
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <vfprintf+0x326>
    1d46:	f0 fe       	sbrs	r15, 0
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <vfprintf+0x320>
    1d4a:	1e 15       	cp	r17, r14
    1d4c:	10 f0       	brcs	.+4      	; 0x1d52 <vfprintf+0x30a>
    1d4e:	9d 2c       	mov	r9, r13
    1d50:	0b c0       	rjmp	.+22     	; 0x1d68 <vfprintf+0x320>
    1d52:	9d 2c       	mov	r9, r13
    1d54:	9e 0c       	add	r9, r14
    1d56:	91 1a       	sub	r9, r17
    1d58:	1e 2d       	mov	r17, r14
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0x320>
    1d5c:	80 e2       	ldi	r24, 0x20	; 32
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	b3 01       	movw	r22, r6
    1d62:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1d66:	1f 5f       	subi	r17, 0xFF	; 255
    1d68:	1e 15       	cp	r17, r14
    1d6a:	c0 f3       	brcs	.-16     	; 0x1d5c <vfprintf+0x314>
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <vfprintf+0x32e>
    1d6e:	1e 15       	cp	r17, r14
    1d70:	10 f4       	brcc	.+4      	; 0x1d76 <vfprintf+0x32e>
    1d72:	e1 1a       	sub	r14, r17
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <vfprintf+0x330>
    1d76:	ee 24       	eor	r14, r14
    1d78:	04 ff       	sbrs	r16, 4
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <vfprintf+0x352>
    1d7c:	80 e3       	ldi	r24, 0x30	; 48
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	b3 01       	movw	r22, r6
    1d82:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1d86:	02 ff       	sbrs	r16, 2
    1d88:	1d c0       	rjmp	.+58     	; 0x1dc4 <vfprintf+0x37c>
    1d8a:	01 fd       	sbrc	r16, 1
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <vfprintf+0x34c>
    1d8e:	88 e7       	ldi	r24, 0x78	; 120
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <vfprintf+0x368>
    1d94:	88 e5       	ldi	r24, 0x58	; 88
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0b c0       	rjmp	.+22     	; 0x1db0 <vfprintf+0x368>
    1d9a:	80 2f       	mov	r24, r16
    1d9c:	86 78       	andi	r24, 0x86	; 134
    1d9e:	91 f0       	breq	.+36     	; 0x1dc4 <vfprintf+0x37c>
    1da0:	01 ff       	sbrs	r16, 1
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x360>
    1da4:	8b e2       	ldi	r24, 0x2B	; 43
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <vfprintf+0x362>
    1da8:	80 e2       	ldi	r24, 0x20	; 32
    1daa:	f7 fc       	sbrc	r15, 7
    1dac:	8d e2       	ldi	r24, 0x2D	; 45
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	b3 01       	movw	r22, r6
    1db2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <vfprintf+0x37c>
    1db8:	80 e3       	ldi	r24, 0x30	; 48
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	b3 01       	movw	r22, r6
    1dbe:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1dc2:	9a 94       	dec	r9
    1dc4:	d9 14       	cp	r13, r9
    1dc6:	c0 f3       	brcs	.-16     	; 0x1db8 <vfprintf+0x370>
    1dc8:	da 94       	dec	r13
    1dca:	f1 01       	movw	r30, r2
    1dcc:	ed 0d       	add	r30, r13
    1dce:	f1 1d       	adc	r31, r1
    1dd0:	80 81       	ld	r24, Z
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	b3 01       	movw	r22, r6
    1dd6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1dda:	dd 20       	and	r13, r13
    1ddc:	a9 f7       	brne	.-22     	; 0x1dc8 <vfprintf+0x380>
    1dde:	06 c0       	rjmp	.+12     	; 0x1dec <vfprintf+0x3a4>
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	b3 01       	movw	r22, r6
    1de6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
    1dea:	ea 94       	dec	r14
    1dec:	ee 20       	and	r14, r14
    1dee:	c1 f7       	brne	.-16     	; 0x1de0 <vfprintf+0x398>
    1df0:	43 ce       	rjmp	.-890    	; 0x1a78 <vfprintf+0x30>
    1df2:	f3 01       	movw	r30, r6
    1df4:	66 81       	ldd	r22, Z+6	; 0x06
    1df6:	77 81       	ldd	r23, Z+7	; 0x07
    1df8:	cb 01       	movw	r24, r22
    1dfa:	2b 96       	adiw	r28, 0x0b	; 11
    1dfc:	e2 e1       	ldi	r30, 0x12	; 18
    1dfe:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__>

00001e02 <strnlen_P>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	05 90       	lpm	r0, Z+
    1e06:	61 50       	subi	r22, 0x01	; 1
    1e08:	70 40       	sbci	r23, 0x00	; 0
    1e0a:	01 10       	cpse	r0, r1
    1e0c:	d8 f7       	brcc	.-10     	; 0x1e04 <strnlen_P+0x2>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	8e 0f       	add	r24, r30
    1e14:	9f 1f       	adc	r25, r31
    1e16:	08 95       	ret

00001e18 <strnlen>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	61 50       	subi	r22, 0x01	; 1
    1e1c:	70 40       	sbci	r23, 0x00	; 0
    1e1e:	01 90       	ld	r0, Z+
    1e20:	01 10       	cpse	r0, r1
    1e22:	d8 f7       	brcc	.-10     	; 0x1e1a <strnlen+0x2>
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	8e 0f       	add	r24, r30
    1e2a:	9f 1f       	adc	r25, r31
    1e2c:	08 95       	ret

00001e2e <fputc>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	8c 01       	movw	r16, r24
    1e38:	eb 01       	movw	r28, r22
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	81 ff       	sbrs	r24, 1
    1e3e:	1b c0       	rjmp	.+54     	; 0x1e76 <fputc+0x48>
    1e40:	82 ff       	sbrs	r24, 2
    1e42:	0d c0       	rjmp	.+26     	; 0x1e5e <fputc+0x30>
    1e44:	2e 81       	ldd	r18, Y+6	; 0x06
    1e46:	3f 81       	ldd	r19, Y+7	; 0x07
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	64 f4       	brge	.+24     	; 0x1e6a <fputc+0x3c>
    1e52:	e8 81       	ld	r30, Y
    1e54:	f9 81       	ldd	r31, Y+1	; 0x01
    1e56:	01 93       	st	Z+, r16
    1e58:	f9 83       	std	Y+1, r31	; 0x01
    1e5a:	e8 83       	st	Y, r30
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <fputc+0x3c>
    1e5e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e60:	f9 85       	ldd	r31, Y+9	; 0x09
    1e62:	80 2f       	mov	r24, r16
    1e64:	09 95       	icall
    1e66:	89 2b       	or	r24, r25
    1e68:	31 f4       	brne	.+12     	; 0x1e76 <fputc+0x48>
    1e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	9f 83       	std	Y+7, r25	; 0x07
    1e72:	8e 83       	std	Y+6, r24	; 0x06
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <fputc+0x4c>
    1e76:	0f ef       	ldi	r16, 0xFF	; 255
    1e78:	1f ef       	ldi	r17, 0xFF	; 255
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <__ultoa_invert>:
    1e86:	fa 01       	movw	r30, r20
    1e88:	aa 27       	eor	r26, r26
    1e8a:	28 30       	cpi	r18, 0x08	; 8
    1e8c:	51 f1       	breq	.+84     	; 0x1ee2 <__ultoa_invert+0x5c>
    1e8e:	20 31       	cpi	r18, 0x10	; 16
    1e90:	81 f1       	breq	.+96     	; 0x1ef2 <__ultoa_invert+0x6c>
    1e92:	e8 94       	clt
    1e94:	6f 93       	push	r22
    1e96:	6e 7f       	andi	r22, 0xFE	; 254
    1e98:	6e 5f       	subi	r22, 0xFE	; 254
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	af 4f       	sbci	r26, 0xFF	; 255
    1ea2:	b1 e0       	ldi	r27, 0x01	; 1
    1ea4:	3e d0       	rcall	.+124    	; 0x1f22 <__ultoa_invert+0x9c>
    1ea6:	b4 e0       	ldi	r27, 0x04	; 4
    1ea8:	3c d0       	rcall	.+120    	; 0x1f22 <__ultoa_invert+0x9c>
    1eaa:	67 0f       	add	r22, r23
    1eac:	78 1f       	adc	r23, r24
    1eae:	89 1f       	adc	r24, r25
    1eb0:	9a 1f       	adc	r25, r26
    1eb2:	a1 1d       	adc	r26, r1
    1eb4:	68 0f       	add	r22, r24
    1eb6:	79 1f       	adc	r23, r25
    1eb8:	8a 1f       	adc	r24, r26
    1eba:	91 1d       	adc	r25, r1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	6a 0f       	add	r22, r26
    1ec0:	71 1d       	adc	r23, r1
    1ec2:	81 1d       	adc	r24, r1
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	a1 1d       	adc	r26, r1
    1ec8:	20 d0       	rcall	.+64     	; 0x1f0a <__ultoa_invert+0x84>
    1eca:	09 f4       	brne	.+2      	; 0x1ece <__ultoa_invert+0x48>
    1ecc:	68 94       	set
    1ece:	3f 91       	pop	r19
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	26 9f       	mul	r18, r22
    1ed4:	11 24       	eor	r1, r1
    1ed6:	30 19       	sub	r19, r0
    1ed8:	30 5d       	subi	r19, 0xD0	; 208
    1eda:	31 93       	st	Z+, r19
    1edc:	de f6       	brtc	.-74     	; 0x1e94 <__ultoa_invert+0xe>
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	47 70       	andi	r20, 0x07	; 7
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	41 93       	st	Z+, r20
    1eea:	b3 e0       	ldi	r27, 0x03	; 3
    1eec:	0f d0       	rcall	.+30     	; 0x1f0c <__ultoa_invert+0x86>
    1eee:	c9 f7       	brne	.-14     	; 0x1ee2 <__ultoa_invert+0x5c>
    1ef0:	f6 cf       	rjmp	.-20     	; 0x1ede <__ultoa_invert+0x58>
    1ef2:	46 2f       	mov	r20, r22
    1ef4:	4f 70       	andi	r20, 0x0F	; 15
    1ef6:	40 5d       	subi	r20, 0xD0	; 208
    1ef8:	4a 33       	cpi	r20, 0x3A	; 58
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <__ultoa_invert+0x7c>
    1efc:	49 5d       	subi	r20, 0xD9	; 217
    1efe:	31 fd       	sbrc	r19, 1
    1f00:	40 52       	subi	r20, 0x20	; 32
    1f02:	41 93       	st	Z+, r20
    1f04:	02 d0       	rcall	.+4      	; 0x1f0a <__ultoa_invert+0x84>
    1f06:	a9 f7       	brne	.-22     	; 0x1ef2 <__ultoa_invert+0x6c>
    1f08:	ea cf       	rjmp	.-44     	; 0x1ede <__ultoa_invert+0x58>
    1f0a:	b4 e0       	ldi	r27, 0x04	; 4
    1f0c:	a6 95       	lsr	r26
    1f0e:	97 95       	ror	r25
    1f10:	87 95       	ror	r24
    1f12:	77 95       	ror	r23
    1f14:	67 95       	ror	r22
    1f16:	ba 95       	dec	r27
    1f18:	c9 f7       	brne	.-14     	; 0x1f0c <__ultoa_invert+0x86>
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	61 05       	cpc	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	08 95       	ret
    1f22:	9b 01       	movw	r18, r22
    1f24:	ac 01       	movw	r20, r24
    1f26:	0a 2e       	mov	r0, r26
    1f28:	06 94       	lsr	r0
    1f2a:	57 95       	ror	r21
    1f2c:	47 95       	ror	r20
    1f2e:	37 95       	ror	r19
    1f30:	27 95       	ror	r18
    1f32:	ba 95       	dec	r27
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__ultoa_invert+0xa2>
    1f36:	62 0f       	add	r22, r18
    1f38:	73 1f       	adc	r23, r19
    1f3a:	84 1f       	adc	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	a0 1d       	adc	r26, r0
    1f40:	08 95       	ret
    1f42:	ce c0       	rjmp	.+412    	; 0x20e0 <__fp_nan>

00001f44 <__fp_rempio2>:
    1f44:	3f d0       	rcall	.+126    	; 0x1fc4 <__fp_splitA>
    1f46:	e8 f3       	brcs	.-6      	; 0x1f42 <__ultoa_invert+0xbc>
    1f48:	e8 94       	clt
    1f4a:	e0 e0       	ldi	r30, 0x00	; 0
    1f4c:	bb 27       	eor	r27, r27
    1f4e:	9f 57       	subi	r25, 0x7F	; 127
    1f50:	f0 f0       	brcs	.+60     	; 0x1f8e <__fp_rempio2+0x4a>
    1f52:	2a ed       	ldi	r18, 0xDA	; 218
    1f54:	3f e0       	ldi	r19, 0x0F	; 15
    1f56:	49 ec       	ldi	r20, 0xC9	; 201
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <__fp_rempio2+0x22>
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	bb 0f       	add	r27, r27
    1f5e:	66 1f       	adc	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	28 f0       	brcs	.+10     	; 0x1f70 <__fp_rempio2+0x2c>
    1f66:	b2 3a       	cpi	r27, 0xA2	; 162
    1f68:	62 07       	cpc	r22, r18
    1f6a:	73 07       	cpc	r23, r19
    1f6c:	84 07       	cpc	r24, r20
    1f6e:	28 f0       	brcs	.+10     	; 0x1f7a <__fp_rempio2+0x36>
    1f70:	b2 5a       	subi	r27, 0xA2	; 162
    1f72:	62 0b       	sbc	r22, r18
    1f74:	73 0b       	sbc	r23, r19
    1f76:	84 0b       	sbc	r24, r20
    1f78:	e3 95       	inc	r30
    1f7a:	9a 95       	dec	r25
    1f7c:	72 f7       	brpl	.-36     	; 0x1f5a <__fp_rempio2+0x16>
    1f7e:	80 38       	cpi	r24, 0x80	; 128
    1f80:	30 f4       	brcc	.+12     	; 0x1f8e <__fp_rempio2+0x4a>
    1f82:	9a 95       	dec	r25
    1f84:	bb 0f       	add	r27, r27
    1f86:	66 1f       	adc	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	d2 f7       	brpl	.-12     	; 0x1f82 <__fp_rempio2+0x3e>
    1f8e:	90 48       	sbci	r25, 0x80	; 128
    1f90:	9b c0       	rjmp	.+310    	; 0x20c8 <__fp_mpack_finite>

00001f92 <__fp_sinus>:
    1f92:	ef 93       	push	r30
    1f94:	e0 ff       	sbrs	r30, 0
    1f96:	06 c0       	rjmp	.+12     	; 0x1fa4 <__fp_sinus+0x12>
    1f98:	a2 ea       	ldi	r26, 0xA2	; 162
    1f9a:	2a ed       	ldi	r18, 0xDA	; 218
    1f9c:	3f e0       	ldi	r19, 0x0F	; 15
    1f9e:	49 ec       	ldi	r20, 0xC9	; 201
    1fa0:	5f eb       	ldi	r21, 0xBF	; 191
    1fa2:	37 d0       	rcall	.+110    	; 0x2012 <__addsf3x>
    1fa4:	bf d0       	rcall	.+382    	; 0x2124 <__fp_round>
    1fa6:	0f 90       	pop	r0
    1fa8:	03 94       	inc	r0
    1faa:	01 fc       	sbrc	r0, 1
    1fac:	90 58       	subi	r25, 0x80	; 128
    1fae:	e0 e7       	ldi	r30, 0x70	; 112
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	99 c0       	rjmp	.+306    	; 0x20e6 <__fp_powsodd>

00001fb4 <__fp_split3>:
    1fb4:	57 fd       	sbrc	r21, 7
    1fb6:	90 58       	subi	r25, 0x80	; 128
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	59 f0       	breq	.+22     	; 0x1fd4 <__fp_splitA+0x10>
    1fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc0:	71 f0       	breq	.+28     	; 0x1fde <__fp_splitA+0x1a>
    1fc2:	47 95       	ror	r20

00001fc4 <__fp_splitA>:
    1fc4:	88 0f       	add	r24, r24
    1fc6:	97 fb       	bst	r25, 7
    1fc8:	99 1f       	adc	r25, r25
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <__fp_splitA+0x20>
    1fcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fce:	79 f0       	breq	.+30     	; 0x1fee <__fp_splitA+0x2a>
    1fd0:	87 95       	ror	r24
    1fd2:	08 95       	ret
    1fd4:	12 16       	cp	r1, r18
    1fd6:	13 06       	cpc	r1, r19
    1fd8:	14 06       	cpc	r1, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	f2 cf       	rjmp	.-28     	; 0x1fc2 <__fp_split3+0xe>
    1fde:	46 95       	lsr	r20
    1fe0:	f1 df       	rcall	.-30     	; 0x1fc4 <__fp_splitA>
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <__fp_splitA+0x30>
    1fe4:	16 16       	cp	r1, r22
    1fe6:	17 06       	cpc	r1, r23
    1fe8:	18 06       	cpc	r1, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	f1 cf       	rjmp	.-30     	; 0x1fd0 <__fp_splitA+0xc>
    1fee:	86 95       	lsr	r24
    1ff0:	71 05       	cpc	r23, r1
    1ff2:	61 05       	cpc	r22, r1
    1ff4:	08 94       	sec
    1ff6:	08 95       	ret
    1ff8:	87 d0       	rcall	.+270    	; 0x2108 <__fp_pscA>
    1ffa:	30 f0       	brcs	.+12     	; 0x2008 <__fp_splitA+0x44>
    1ffc:	8c d0       	rcall	.+280    	; 0x2116 <__fp_pscB>
    1ffe:	20 f0       	brcs	.+8      	; 0x2008 <__fp_splitA+0x44>
    2000:	31 f4       	brne	.+12     	; 0x200e <__fp_splitA+0x4a>
    2002:	9f 3f       	cpi	r25, 0xFF	; 255
    2004:	11 f4       	brne	.+4      	; 0x200a <__fp_splitA+0x46>
    2006:	1e f4       	brtc	.+6      	; 0x200e <__fp_splitA+0x4a>
    2008:	6b c0       	rjmp	.+214    	; 0x20e0 <__fp_nan>
    200a:	0e f4       	brtc	.+2      	; 0x200e <__fp_splitA+0x4a>
    200c:	e0 95       	com	r30
    200e:	e7 fb       	bst	r30, 7
    2010:	53 c0       	rjmp	.+166    	; 0x20b8 <__fp_inf>

00002012 <__addsf3x>:
    2012:	e9 2f       	mov	r30, r25
    2014:	cf df       	rcall	.-98     	; 0x1fb4 <__fp_split3>
    2016:	80 f3       	brcs	.-32     	; 0x1ff8 <__fp_splitA+0x34>
    2018:	ba 17       	cp	r27, r26
    201a:	62 07       	cpc	r22, r18
    201c:	73 07       	cpc	r23, r19
    201e:	84 07       	cpc	r24, r20
    2020:	95 07       	cpc	r25, r21
    2022:	18 f0       	brcs	.+6      	; 0x202a <__addsf3x+0x18>
    2024:	71 f4       	brne	.+28     	; 0x2042 <__addsf3x+0x30>
    2026:	9e f5       	brtc	.+102    	; 0x208e <__addsf3x+0x7c>
    2028:	8e c0       	rjmp	.+284    	; 0x2146 <__fp_zero>
    202a:	0e f4       	brtc	.+2      	; 0x202e <__addsf3x+0x1c>
    202c:	e0 95       	com	r30
    202e:	0b 2e       	mov	r0, r27
    2030:	ba 2f       	mov	r27, r26
    2032:	a0 2d       	mov	r26, r0
    2034:	0b 01       	movw	r0, r22
    2036:	b9 01       	movw	r22, r18
    2038:	90 01       	movw	r18, r0
    203a:	0c 01       	movw	r0, r24
    203c:	ca 01       	movw	r24, r20
    203e:	a0 01       	movw	r20, r0
    2040:	11 24       	eor	r1, r1
    2042:	ff 27       	eor	r31, r31
    2044:	59 1b       	sub	r21, r25
    2046:	99 f0       	breq	.+38     	; 0x206e <__addsf3x+0x5c>
    2048:	59 3f       	cpi	r21, 0xF9	; 249
    204a:	50 f4       	brcc	.+20     	; 0x2060 <__addsf3x+0x4e>
    204c:	50 3e       	cpi	r21, 0xE0	; 224
    204e:	68 f1       	brcs	.+90     	; 0x20aa <__addsf3x+0x98>
    2050:	1a 16       	cp	r1, r26
    2052:	f0 40       	sbci	r31, 0x00	; 0
    2054:	a2 2f       	mov	r26, r18
    2056:	23 2f       	mov	r18, r19
    2058:	34 2f       	mov	r19, r20
    205a:	44 27       	eor	r20, r20
    205c:	58 5f       	subi	r21, 0xF8	; 248
    205e:	f3 cf       	rjmp	.-26     	; 0x2046 <__addsf3x+0x34>
    2060:	46 95       	lsr	r20
    2062:	37 95       	ror	r19
    2064:	27 95       	ror	r18
    2066:	a7 95       	ror	r26
    2068:	f0 40       	sbci	r31, 0x00	; 0
    206a:	53 95       	inc	r21
    206c:	c9 f7       	brne	.-14     	; 0x2060 <__addsf3x+0x4e>
    206e:	7e f4       	brtc	.+30     	; 0x208e <__addsf3x+0x7c>
    2070:	1f 16       	cp	r1, r31
    2072:	ba 0b       	sbc	r27, r26
    2074:	62 0b       	sbc	r22, r18
    2076:	73 0b       	sbc	r23, r19
    2078:	84 0b       	sbc	r24, r20
    207a:	ba f0       	brmi	.+46     	; 0x20aa <__addsf3x+0x98>
    207c:	91 50       	subi	r25, 0x01	; 1
    207e:	a1 f0       	breq	.+40     	; 0x20a8 <__addsf3x+0x96>
    2080:	ff 0f       	add	r31, r31
    2082:	bb 1f       	adc	r27, r27
    2084:	66 1f       	adc	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	c2 f7       	brpl	.-16     	; 0x207c <__addsf3x+0x6a>
    208c:	0e c0       	rjmp	.+28     	; 0x20aa <__addsf3x+0x98>
    208e:	ba 0f       	add	r27, r26
    2090:	62 1f       	adc	r22, r18
    2092:	73 1f       	adc	r23, r19
    2094:	84 1f       	adc	r24, r20
    2096:	48 f4       	brcc	.+18     	; 0x20aa <__addsf3x+0x98>
    2098:	87 95       	ror	r24
    209a:	77 95       	ror	r23
    209c:	67 95       	ror	r22
    209e:	b7 95       	ror	r27
    20a0:	f7 95       	ror	r31
    20a2:	9e 3f       	cpi	r25, 0xFE	; 254
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <__addsf3x+0x96>
    20a6:	b3 cf       	rjmp	.-154    	; 0x200e <__fp_splitA+0x4a>
    20a8:	93 95       	inc	r25
    20aa:	88 0f       	add	r24, r24
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <__addsf3x+0x9e>
    20ae:	99 27       	eor	r25, r25
    20b0:	ee 0f       	add	r30, r30
    20b2:	97 95       	ror	r25
    20b4:	87 95       	ror	r24
    20b6:	08 95       	ret

000020b8 <__fp_inf>:
    20b8:	97 f9       	bld	r25, 7
    20ba:	9f 67       	ori	r25, 0x7F	; 127
    20bc:	80 e8       	ldi	r24, 0x80	; 128
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	08 95       	ret

000020c4 <__fp_mpack>:
    20c4:	9f 3f       	cpi	r25, 0xFF	; 255
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <__fp_mpack_finite+0xc>

000020c8 <__fp_mpack_finite>:
    20c8:	91 50       	subi	r25, 0x01	; 1
    20ca:	20 f4       	brcc	.+8      	; 0x20d4 <__fp_mpack_finite+0xc>
    20cc:	87 95       	ror	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b7 95       	ror	r27
    20d4:	88 0f       	add	r24, r24
    20d6:	91 1d       	adc	r25, r1
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret

000020e0 <__fp_nan>:
    20e0:	9f ef       	ldi	r25, 0xFF	; 255
    20e2:	80 ec       	ldi	r24, 0xC0	; 192
    20e4:	08 95       	ret

000020e6 <__fp_powsodd>:
    20e6:	9f 93       	push	r25
    20e8:	8f 93       	push	r24
    20ea:	7f 93       	push	r23
    20ec:	6f 93       	push	r22
    20ee:	ff 93       	push	r31
    20f0:	ef 93       	push	r30
    20f2:	9b 01       	movw	r18, r22
    20f4:	ac 01       	movw	r20, r24
    20f6:	0b d8       	rcall	.-4074   	; 0x110e <__mulsf3>
    20f8:	ef 91       	pop	r30
    20fa:	ff 91       	pop	r31
    20fc:	2b d0       	rcall	.+86     	; 0x2154 <__fp_powser>
    20fe:	2f 91       	pop	r18
    2100:	3f 91       	pop	r19
    2102:	4f 91       	pop	r20
    2104:	5f 91       	pop	r21
    2106:	03 c8       	rjmp	.-4090   	; 0x110e <__mulsf3>

00002108 <__fp_pscA>:
    2108:	00 24       	eor	r0, r0
    210a:	0a 94       	dec	r0
    210c:	16 16       	cp	r1, r22
    210e:	17 06       	cpc	r1, r23
    2110:	18 06       	cpc	r1, r24
    2112:	09 06       	cpc	r0, r25
    2114:	08 95       	ret

00002116 <__fp_pscB>:
    2116:	00 24       	eor	r0, r0
    2118:	0a 94       	dec	r0
    211a:	12 16       	cp	r1, r18
    211c:	13 06       	cpc	r1, r19
    211e:	14 06       	cpc	r1, r20
    2120:	05 06       	cpc	r0, r21
    2122:	08 95       	ret

00002124 <__fp_round>:
    2124:	09 2e       	mov	r0, r25
    2126:	03 94       	inc	r0
    2128:	00 0c       	add	r0, r0
    212a:	11 f4       	brne	.+4      	; 0x2130 <__fp_round+0xc>
    212c:	88 23       	and	r24, r24
    212e:	52 f0       	brmi	.+20     	; 0x2144 <__fp_round+0x20>
    2130:	bb 0f       	add	r27, r27
    2132:	40 f4       	brcc	.+16     	; 0x2144 <__fp_round+0x20>
    2134:	bf 2b       	or	r27, r31
    2136:	11 f4       	brne	.+4      	; 0x213c <__fp_round+0x18>
    2138:	60 ff       	sbrs	r22, 0
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <__fp_round+0x20>
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	8f 4f       	sbci	r24, 0xFF	; 255
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	08 95       	ret

00002146 <__fp_zero>:
    2146:	e8 94       	clt

00002148 <__fp_szero>:
    2148:	bb 27       	eor	r27, r27
    214a:	66 27       	eor	r22, r22
    214c:	77 27       	eor	r23, r23
    214e:	cb 01       	movw	r24, r22
    2150:	97 f9       	bld	r25, 7
    2152:	08 95       	ret

00002154 <__fp_powser>:
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	1f 93       	push	r17
    215a:	0f 93       	push	r16
    215c:	ff 92       	push	r15
    215e:	ef 92       	push	r14
    2160:	df 92       	push	r13
    2162:	7b 01       	movw	r14, r22
    2164:	8c 01       	movw	r16, r24
    2166:	68 94       	set
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <__fp_powser+0x20>
    216a:	da 2e       	mov	r13, r26
    216c:	ef 01       	movw	r28, r30
    216e:	21 d0       	rcall	.+66     	; 0x21b2 <__mulsf3x>
    2170:	fe 01       	movw	r30, r28
    2172:	e8 94       	clt
    2174:	a5 91       	lpm	r26, Z+
    2176:	25 91       	lpm	r18, Z+
    2178:	35 91       	lpm	r19, Z+
    217a:	45 91       	lpm	r20, Z+
    217c:	55 91       	lpm	r21, Z+
    217e:	ae f3       	brts	.-22     	; 0x216a <__fp_powser+0x16>
    2180:	ef 01       	movw	r28, r30
    2182:	47 df       	rcall	.-370    	; 0x2012 <__addsf3x>
    2184:	fe 01       	movw	r30, r28
    2186:	97 01       	movw	r18, r14
    2188:	a8 01       	movw	r20, r16
    218a:	da 94       	dec	r13
    218c:	79 f7       	brne	.-34     	; 0x216c <__fp_powser+0x18>
    218e:	df 90       	pop	r13
    2190:	ef 90       	pop	r14
    2192:	ff 90       	pop	r15
    2194:	0f 91       	pop	r16
    2196:	1f 91       	pop	r17
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret
    219e:	b4 df       	rcall	.-152    	; 0x2108 <__fp_pscA>
    21a0:	28 f0       	brcs	.+10     	; 0x21ac <__fp_powser+0x58>
    21a2:	b9 df       	rcall	.-142    	; 0x2116 <__fp_pscB>
    21a4:	18 f0       	brcs	.+6      	; 0x21ac <__fp_powser+0x58>
    21a6:	95 23       	and	r25, r21
    21a8:	09 f0       	breq	.+2      	; 0x21ac <__fp_powser+0x58>
    21aa:	86 cf       	rjmp	.-244    	; 0x20b8 <__fp_inf>
    21ac:	99 cf       	rjmp	.-206    	; 0x20e0 <__fp_nan>
    21ae:	11 24       	eor	r1, r1
    21b0:	cb cf       	rjmp	.-106    	; 0x2148 <__fp_szero>

000021b2 <__mulsf3x>:
    21b2:	00 df       	rcall	.-512    	; 0x1fb4 <__fp_split3>
    21b4:	a0 f3       	brcs	.-24     	; 0x219e <__fp_powser+0x4a>

000021b6 <__mulsf3_pse>:
    21b6:	95 9f       	mul	r25, r21
    21b8:	d1 f3       	breq	.-12     	; 0x21ae <__fp_powser+0x5a>
    21ba:	95 0f       	add	r25, r21
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	55 1f       	adc	r21, r21
    21c0:	62 9f       	mul	r22, r18
    21c2:	f0 01       	movw	r30, r0
    21c4:	72 9f       	mul	r23, r18
    21c6:	bb 27       	eor	r27, r27
    21c8:	f0 0d       	add	r31, r0
    21ca:	b1 1d       	adc	r27, r1
    21cc:	63 9f       	mul	r22, r19
    21ce:	aa 27       	eor	r26, r26
    21d0:	f0 0d       	add	r31, r0
    21d2:	b1 1d       	adc	r27, r1
    21d4:	aa 1f       	adc	r26, r26
    21d6:	64 9f       	mul	r22, r20
    21d8:	66 27       	eor	r22, r22
    21da:	b0 0d       	add	r27, r0
    21dc:	a1 1d       	adc	r26, r1
    21de:	66 1f       	adc	r22, r22
    21e0:	82 9f       	mul	r24, r18
    21e2:	22 27       	eor	r18, r18
    21e4:	b0 0d       	add	r27, r0
    21e6:	a1 1d       	adc	r26, r1
    21e8:	62 1f       	adc	r22, r18
    21ea:	73 9f       	mul	r23, r19
    21ec:	b0 0d       	add	r27, r0
    21ee:	a1 1d       	adc	r26, r1
    21f0:	62 1f       	adc	r22, r18
    21f2:	83 9f       	mul	r24, r19
    21f4:	a0 0d       	add	r26, r0
    21f6:	61 1d       	adc	r22, r1
    21f8:	22 1f       	adc	r18, r18
    21fa:	74 9f       	mul	r23, r20
    21fc:	33 27       	eor	r19, r19
    21fe:	a0 0d       	add	r26, r0
    2200:	61 1d       	adc	r22, r1
    2202:	23 1f       	adc	r18, r19
    2204:	84 9f       	mul	r24, r20
    2206:	60 0d       	add	r22, r0
    2208:	21 1d       	adc	r18, r1
    220a:	82 2f       	mov	r24, r18
    220c:	76 2f       	mov	r23, r22
    220e:	6a 2f       	mov	r22, r26
    2210:	11 24       	eor	r1, r1
    2212:	9f 57       	subi	r25, 0x7F	; 127
    2214:	50 40       	sbci	r21, 0x00	; 0
    2216:	8a f0       	brmi	.+34     	; 0x223a <__mulsf3_pse+0x84>
    2218:	e1 f0       	breq	.+56     	; 0x2252 <__mulsf3_pse+0x9c>
    221a:	88 23       	and	r24, r24
    221c:	4a f0       	brmi	.+18     	; 0x2230 <__mulsf3_pse+0x7a>
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	bb 1f       	adc	r27, r27
    2224:	66 1f       	adc	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	88 1f       	adc	r24, r24
    222a:	91 50       	subi	r25, 0x01	; 1
    222c:	50 40       	sbci	r21, 0x00	; 0
    222e:	a9 f7       	brne	.-22     	; 0x221a <__mulsf3_pse+0x64>
    2230:	9e 3f       	cpi	r25, 0xFE	; 254
    2232:	51 05       	cpc	r21, r1
    2234:	70 f0       	brcs	.+28     	; 0x2252 <__mulsf3_pse+0x9c>
    2236:	40 cf       	rjmp	.-384    	; 0x20b8 <__fp_inf>
    2238:	87 cf       	rjmp	.-242    	; 0x2148 <__fp_szero>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	ec f3       	brlt	.-6      	; 0x2238 <__mulsf3_pse+0x82>
    223e:	98 3e       	cpi	r25, 0xE8	; 232
    2240:	dc f3       	brlt	.-10     	; 0x2238 <__mulsf3_pse+0x82>
    2242:	86 95       	lsr	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	b7 95       	ror	r27
    224a:	f7 95       	ror	r31
    224c:	e7 95       	ror	r30
    224e:	9f 5f       	subi	r25, 0xFF	; 255
    2250:	c1 f7       	brne	.-16     	; 0x2242 <__mulsf3_pse+0x8c>
    2252:	fe 2b       	or	r31, r30
    2254:	88 0f       	add	r24, r24
    2256:	91 1d       	adc	r25, r1
    2258:	96 95       	lsr	r25
    225a:	87 95       	ror	r24
    225c:	97 f9       	bld	r25, 7
    225e:	08 95       	ret

00002260 <_exit>:
    2260:	f8 94       	cli

00002262 <__stop_program>:
    2262:	ff cf       	rjmp	.-2      	; 0x2262 <__stop_program>
