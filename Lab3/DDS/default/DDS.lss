
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000236  00800100  0000267a  0000270e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000267a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e4  00800336  00800336  00002944  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007f5  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000303f  00000000  00000000  000032f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001506  00000000  00000000  00006338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e76  00000000  00000000  0000783e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  000096b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000860  00000000  00000000  00009ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000109f  00000000  00000000  0000a324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b3c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_9>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <Initialize+0xf2>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDMainFrequency>:
      bb:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000c7 <LCDMainDecay>:
      c7:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000d4 <LCDMainRise>:
      d4:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000e0 <LCDFMFreq>:
      e0:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000ea <LCDFMDepth>:
      ea:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

000000f5 <LCDFMDecay>:
      f5:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

00000100 <LCDVoice>:
     100:	56 4f 49 43 45 20 00 00                             VOICE ..

00000108 <LcdCustomChar>:
     108:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     118:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     128:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     138:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	13 e0       	ldi	r17, 0x03	; 3
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f6 e2       	ldi	r31, 0x26	; 38
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	a6 33       	cpi	r26, 0x36	; 54
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	15 e0       	ldi	r17, 0x05	; 5
     16c:	a6 e3       	ldi	r26, 0x36	; 54
     16e:	b3 e0       	ldi	r27, 0x03	; 3
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	aa 31       	cpi	r26, 0x1A	; 26
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <main>
     17e:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <sample>:
void setState(uint8_t);
void nextState(void);
uint8_t sample(uint8_t);

//returns OCR0A
uint8_t sample(uint8_t idx) {
     186:	df 92       	push	r13
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	d8 2e       	mov	r13, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if (!(time & 0x0ff)) {
     196:	80 91 fe 04 	lds	r24, 0x04FE
     19a:	90 91 ff 04 	lds	r25, 0x04FF
     19e:	88 23       	and	r24, r24
     1a0:	09 f0       	breq	.+2      	; 0x1a4 <sample+0x1e>
     1a2:	47 c0       	rjmp	.+142    	; 0x232 <sample+0xac>
		amp_fall_main[idx] = amp_fall_main[idx] - (amp_fall_main[idx]>>decay_main[idx]);
     1a4:	0d 2d       	mov	r16, r13
     1a6:	10 e0       	ldi	r17, 0x00	; 0
     1a8:	a8 01       	movw	r20, r16
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	da 01       	movw	r26, r20
     1b0:	ad 53       	subi	r26, 0x3D	; 61
     1b2:	bc 4f       	sbci	r27, 0xFC	; 252
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	11 97       	sbiw	r26, 0x01	; 1
     1ba:	8d 91       	ld	r24, X+
     1bc:	9c 91       	ld	r25, X
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	f8 01       	movw	r30, r16
     1c2:	e4 56       	subi	r30, 0x64	; 100
     1c4:	fc 4f       	sbci	r31, 0xFC	; 252
     1c6:	60 81       	ld	r22, Z
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <sample+0x48>
     1ca:	96 95       	lsr	r25
     1cc:	87 95       	ror	r24
     1ce:	6a 95       	dec	r22
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <sample+0x44>
     1d2:	28 1b       	sub	r18, r24
     1d4:	39 0b       	sbc	r19, r25
     1d6:	11 96       	adiw	r26, 0x01	; 1
     1d8:	3c 93       	st	X, r19
     1da:	2e 93       	st	-X, r18
		rise_phase_main[idx] = rise_phase_main[idx] - (rise_phase_main[idx]>>rise_main[idx]);
     1dc:	da 01       	movw	r26, r20
     1de:	a2 53       	subi	r26, 0x32	; 50
     1e0:	bb 4f       	sbci	r27, 0xFB	; 251
     1e2:	2d 91       	ld	r18, X+
     1e4:	3c 91       	ld	r19, X
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	8d 91       	ld	r24, X+
     1ea:	9c 91       	ld	r25, X
     1ec:	11 97       	sbiw	r26, 0x01	; 1
     1ee:	f8 01       	movw	r30, r16
     1f0:	e0 57       	subi	r30, 0x70	; 112
     1f2:	fc 4f       	sbci	r31, 0xFC	; 252
     1f4:	60 81       	ld	r22, Z
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <sample+0x76>
     1f8:	96 95       	lsr	r25
     1fa:	87 95       	ror	r24
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <sample+0x72>
     200:	28 1b       	sub	r18, r24
     202:	39 0b       	sbc	r19, r25
     204:	11 96       	adiw	r26, 0x01	; 1
     206:	3c 93       	st	X, r19
     208:	2e 93       	st	-X, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1[idx] = amp_fm1[idx] - (amp_fm1[idx]>>decay_fm1[idx]) ;
     20a:	4d 55       	subi	r20, 0x5D	; 93
     20c:	5c 4f       	sbci	r21, 0xFC	; 252
     20e:	ea 01       	movw	r28, r20
     210:	28 81       	ld	r18, Y
     212:	39 81       	ldd	r19, Y+1	; 0x01
     214:	88 81       	ld	r24, Y
     216:	99 81       	ldd	r25, Y+1	; 0x01
     218:	07 5f       	subi	r16, 0xF7	; 247
     21a:	1a 4f       	sbci	r17, 0xFA	; 250
     21c:	f8 01       	movw	r30, r16
     21e:	60 81       	ld	r22, Z
     220:	02 c0       	rjmp	.+4      	; 0x226 <sample+0xa0>
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	6a 95       	dec	r22
     228:	e2 f7       	brpl	.-8      	; 0x222 <sample+0x9c>
     22a:	28 1b       	sub	r18, r24
     22c:	39 0b       	sbc	r19, r25
     22e:	39 83       	std	Y+1, r19	; 0x01
     230:	28 83       	st	Y, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main[idx] =  max_amp - rise_phase_main[idx];
     232:	ed 2c       	mov	r14, r13
     234:	ff 24       	eor	r15, r15
     236:	d7 01       	movw	r26, r14
     238:	aa 0f       	add	r26, r26
     23a:	bb 1f       	adc	r27, r27
     23c:	8d 01       	movw	r16, r26
     23e:	02 53       	subi	r16, 0x32	; 50
     240:	1b 4f       	sbci	r17, 0xFB	; 251
     242:	e8 01       	movw	r28, r16
     244:	88 81       	ld	r24, Y
     246:	99 81       	ldd	r25, Y+1	; 0x01
     248:	6f ef       	ldi	r22, 0xFF	; 255
     24a:	7f e7       	ldi	r23, 0x7F	; 127
     24c:	fb 01       	movw	r30, r22
     24e:	e8 1b       	sub	r30, r24
     250:	f9 0b       	sbc	r31, r25
     252:	ed 01       	movw	r28, r26
     254:	cf 5f       	subi	r28, 0xFF	; 255
     256:	da 4f       	sbci	r29, 0xFA	; 250
     258:	f9 83       	std	Y+1, r31	; 0x01
     25a:	e8 83       	st	Y, r30
	// product of rise and fall exponentials is the amplitude envelope
	amp_main[idx] = (amp_rise_main[idx]>>8) * (amp_fall_main[idx]>>8) ;
     25c:	28 81       	ld	r18, Y
     25e:	39 81       	ldd	r19, Y+1	; 0x01
     260:	ad 01       	movw	r20, r26
     262:	4d 53       	subi	r20, 0x3D	; 61
     264:	5c 4f       	sbci	r21, 0xFC	; 252
     266:	fa 01       	movw	r30, r20
     268:	80 81       	ld	r24, Z
     26a:	91 81       	ldd	r25, Z+1	; 0x01
     26c:	89 2f       	mov	r24, r25
     26e:	99 27       	eor	r25, r25
     270:	23 2f       	mov	r18, r19
     272:	33 27       	eor	r19, r19
     274:	fc 01       	movw	r30, r24
     276:	e2 9f       	mul	r30, r18
     278:	c0 01       	movw	r24, r0
     27a:	e3 9f       	mul	r30, r19
     27c:	90 0d       	add	r25, r0
     27e:	f2 9f       	mul	r31, r18
     280:	90 0d       	add	r25, r0
     282:	11 24       	eor	r1, r1
     284:	fd 01       	movw	r30, r26
     286:	ed 50       	subi	r30, 0x0D	; 13
     288:	fb 4f       	sbci	r31, 0xFB	; 251
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24

	// Init the synth
	if (pluck==1) {
     28e:	80 91 a2 03 	lds	r24, 0x03A2
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	e1 f4       	brne	.+56     	; 0x2ce <sample+0x148>
		amp_fall_main[idx] = max_amp; 
     296:	fa 01       	movw	r30, r20
     298:	71 83       	std	Z+1, r23	; 0x01
     29a:	60 83       	st	Z, r22
		rise_phase_main[idx] = max_amp ;
     29c:	f8 01       	movw	r30, r16
     29e:	71 83       	std	Z+1, r23	; 0x01
     2a0:	60 83       	st	Z, r22
		amp_rise_main[idx] = 0 ;
     2a2:	19 82       	std	Y+1, r1	; 0x01
     2a4:	18 82       	st	Y, r1
		amp_fm1[idx] = max_amp ;
     2a6:	fd 01       	movw	r30, r26
     2a8:	ed 55       	subi	r30, 0x5D	; 93
     2aa:	fc 4f       	sbci	r31, 0xFC	; 252
     2ac:	71 83       	std	Z+1, r23	; 0x01
     2ae:	60 83       	st	Z, r22
		// phase lock the synth
		acc_fm1[idx] = 0 ;
     2b0:	fd 01       	movw	r30, r26
     2b2:	e8 54       	subi	r30, 0x48	; 72
     2b4:	fc 4f       	sbci	r31, 0xFC	; 252
     2b6:	11 82       	std	Z+1, r1	; 0x01
     2b8:	10 82       	st	Z, r1
		acc_main[idx] = 0;
     2ba:	ac 56       	subi	r26, 0x6C	; 108
     2bc:	bc 4f       	sbci	r27, 0xFC	; 252
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	1c 92       	st	X, r1
     2c2:	1e 92       	st	-X, r1

		//DIRTY UGLY HACK FIX THIS STUPID
		if (idx == (NUM_VOICES - 1)) {
     2c4:	f3 e0       	ldi	r31, 0x03	; 3
     2c6:	df 16       	cp	r13, r31
     2c8:	11 f4       	brne	.+4      	; 0x2ce <sample+0x148>
			pluck = 0;
     2ca:	10 92 a2 03 	sts	0x03A2, r1
		}

	}

	//the FM DDR -- feeds into final DDR
	acc_fm1[idx] = acc_fm1[idx] + inc_fm1[idx] ;
     2ce:	a7 01       	movw	r20, r14
     2d0:	44 0f       	add	r20, r20
     2d2:	55 1f       	adc	r21, r21
     2d4:	da 01       	movw	r26, r20
     2d6:	a8 54       	subi	r26, 0x48	; 72
     2d8:	bc 4f       	sbci	r27, 0xFC	; 252
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	11 97       	sbiw	r26, 0x01	; 1
     2e0:	fa 01       	movw	r30, r20
     2e2:	e6 51       	subi	r30, 0x16	; 22
     2e4:	fb 4f       	sbci	r31, 0xFB	; 251
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	82 0f       	add	r24, r18
     2ec:	93 1f       	adc	r25, r19
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	9c 93       	st	X, r25
     2f2:	8e 93       	st	-X, r24
	high_fm1 = (char)(acc_fm1[idx] >> 8) ;
     2f4:	8d 91       	ld	r24, X+
     2f6:	9c 91       	ld	r25, X
     2f8:	90 93 0f 05 	sts	0x050F, r25
	fm1 = sineTable[high_fm1] ;
     2fc:	e0 91 0f 05 	lds	r30, 0x050F
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	e2 53       	subi	r30, 0x32	; 50
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	60 81       	ld	r22, Z
     308:	60 93 c0 03 	sts	0x03C0, r22

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main[idx] = acc_main[idx] + (inc_main[idx] + (fm1*(amp_fm1[idx]>>depth_fm1[idx]))) ;
     30c:	da 01       	movw	r26, r20
     30e:	ac 56       	subi	r26, 0x6C	; 108
     310:	bc 4f       	sbci	r27, 0xFC	; 252
     312:	0d 91       	ld	r16, X+
     314:	1c 91       	ld	r17, X
     316:	11 97       	sbiw	r26, 0x01	; 1
     318:	fa 01       	movw	r30, r20
     31a:	e1 55       	subi	r30, 0x51	; 81
     31c:	fc 4f       	sbci	r31, 0xFC	; 252
     31e:	20 81       	ld	r18, Z
     320:	31 81       	ldd	r19, Z+1	; 0x01
     322:	fa 01       	movw	r30, r20
     324:	ed 55       	subi	r30, 0x5D	; 93
     326:	fc 4f       	sbci	r31, 0xFC	; 252
     328:	80 81       	ld	r24, Z
     32a:	91 81       	ldd	r25, Z+1	; 0x01
     32c:	cb ea       	ldi	r28, 0xAB	; 171
     32e:	d3 e0       	ldi	r29, 0x03	; 3
     330:	ec 0e       	add	r14, r28
     332:	fd 1e       	adc	r15, r29
     334:	e7 01       	movw	r28, r14
     336:	e8 81       	ld	r30, Y
     338:	20 0f       	add	r18, r16
     33a:	31 1f       	adc	r19, r17
     33c:	02 c0       	rjmp	.+4      	; 0x342 <sample+0x1bc>
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	ea 95       	dec	r30
     344:	e2 f7       	brpl	.-8      	; 0x33e <sample+0x1b8>
     346:	77 27       	eor	r23, r23
     348:	67 fd       	sbrc	r22, 7
     34a:	70 95       	com	r23
     34c:	fc 01       	movw	r30, r24
     34e:	e6 9f       	mul	r30, r22
     350:	c0 01       	movw	r24, r0
     352:	e7 9f       	mul	r30, r23
     354:	90 0d       	add	r25, r0
     356:	f6 9f       	mul	r31, r22
     358:	90 0d       	add	r25, r0
     35a:	11 24       	eor	r1, r1
     35c:	28 0f       	add	r18, r24
     35e:	39 1f       	adc	r19, r25
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	3c 93       	st	X, r19
     364:	2e 93       	st	-X, r18
	high_main = (char)(acc_main[idx] >> 8) ;
     366:	8d 91       	ld	r24, X+
     368:	9c 91       	ld	r25, X
     36a:	90 93 fc 04 	sts	0x04FC, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main[idx]>>8) * (int)sineTable[high_main])>>7) ;
     36e:	4d 50       	subi	r20, 0x0D	; 13
     370:	5b 4f       	sbci	r21, 0xFB	; 251
     372:	ea 01       	movw	r28, r20
     374:	28 81       	ld	r18, Y
     376:	39 81       	ldd	r19, Y+1	; 0x01
     378:	e0 91 fc 04 	lds	r30, 0x04FC
     37c:	23 2f       	mov	r18, r19
     37e:	33 27       	eor	r19, r19
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	e2 53       	subi	r30, 0x32	; 50
     384:	fc 4f       	sbci	r31, 0xFC	; 252
     386:	80 81       	ld	r24, Z
     388:	99 27       	eor	r25, r25
     38a:	87 fd       	sbrc	r24, 7
     38c:	90 95       	com	r25
     38e:	fc 01       	movw	r30, r24
     390:	2e 9f       	mul	r18, r30
     392:	c0 01       	movw	r24, r0
     394:	2f 9f       	mul	r18, r31
     396:	90 0d       	add	r25, r0
     398:	3e 9f       	mul	r19, r30
     39a:	90 0d       	add	r25, r0
     39c:	11 24       	eor	r1, r1
     39e:	88 0f       	add	r24, r24
     3a0:	89 2f       	mov	r24, r25
     3a2:	88 1f       	adc	r24, r24
     3a4:	99 0b       	sbc	r25, r25
     3a6:	91 95       	neg	r25
}
     3a8:	80 58       	subi	r24, 0x80	; 128
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	08 95       	ret

000003ba <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 12000
{ 
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	6f 93       	push	r22
     3d2:	7f 93       	push	r23
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	af 93       	push	r26
     3da:	bf 93       	push	r27
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	00 e0       	ldi	r16, 0x00	; 0

	// Set Sample
	uint8_t idx;
	uint8_t voiceAccum = 0;
	for (idx=0; idx < NUM_VOICES; idx++){
		voiceAccum += sample(idx) >> 2;
     3e4:	81 2f       	mov	r24, r17
     3e6:	0e 94 c3 00 	call	0x186	; 0x186 <sample>
     3ea:	86 95       	lsr	r24
     3ec:	86 95       	lsr	r24
     3ee:	08 0f       	add	r16, r24
	//TCNT2 = 0; TCCR2B = 1;

	// Set Sample
	uint8_t idx;
	uint8_t voiceAccum = 0;
	for (idx=0; idx < NUM_VOICES; idx++){
     3f0:	1f 5f       	subi	r17, 0xFF	; 255
     3f2:	14 30       	cpi	r17, 0x04	; 4
     3f4:	b9 f7       	brne	.-18     	; 0x3e4 <__vector_13+0x2a>
		voiceAccum += sample(idx) >> 2;
	}
	OCR0A = voiceAccum;
     3f6:	07 bd       	out	0x27, r16	; 39
	//OCR0A = sample(1);
	
	time++;     //ticks at 12 KHz 
     3f8:	80 91 fe 04 	lds	r24, 0x04FE
     3fc:	90 91 ff 04 	lds	r25, 0x04FF
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	90 93 ff 04 	sts	0x04FF, r25
     406:	80 93 fe 04 	sts	0x04FE, r24
	// profiling 
	//TCCR2B = 0;
} 
     40a:	ff 91       	pop	r31
     40c:	ef 91       	pop	r30
     40e:	bf 91       	pop	r27
     410:	af 91       	pop	r26
     412:	9f 91       	pop	r25
     414:	8f 91       	pop	r24
     416:	7f 91       	pop	r23
     418:	6f 91       	pop	r22
     41a:	5f 91       	pop	r21
     41c:	4f 91       	pop	r20
     41e:	3f 91       	pop	r19
     420:	2f 91       	pop	r18
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <updateManual>:
	LCDstring(LCDBuffer, 1);
}

void updateManual(void){

}
     430:	08 95       	ret

00000432 <setNextNote>:
	updateLCD();
}

//set the next note to play
void setNextNote(){
	switch (seqId){
     432:	80 91 e7 04 	lds	r24, 0x04E7
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	99 f4       	brne	.+38     	; 0x460 <setNextNote+0x2e>
		case 1:
			inc_main[0] = markovFrequencies[curNote++ % NUM_NOTES];
     43a:	80 91 10 05 	lds	r24, 0x0510
     43e:	e8 2f       	mov	r30, r24
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	e7 70       	andi	r30, 0x07	; 7
     444:	f0 70       	andi	r31, 0x00	; 0
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	ed 5f       	subi	r30, 0xFD	; 253
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	20 81       	ld	r18, Z
     450:	31 81       	ldd	r19, Z+1	; 0x01
     452:	30 93 b0 03 	sts	0x03B0, r19
     456:	20 93 af 03 	sts	0x03AF, r18
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 10 05 	sts	0x0510, r24
     460:	08 95       	ret

00000462 <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
	LCDclr();
     466:	0e 94 99 06 	call	0xd32	; 0xd32 <LCDclr>
	switch (state) {
     46a:	80 91 c2 03 	lds	r24, 0x03C2
     46e:	86 30       	cpi	r24, 0x06	; 6
     470:	09 f4       	brne	.+2      	; 0x474 <updateLCD+0x12>
     472:	67 c0       	rjmp	.+206    	; 0x542 <updateLCD+0xe0>
     474:	87 30       	cpi	r24, 0x07	; 7
     476:	48 f4       	brcc	.+18     	; 0x48a <updateLCD+0x28>
     478:	83 30       	cpi	r24, 0x03	; 3
     47a:	09 f1       	breq	.+66     	; 0x4be <updateLCD+0x5c>
     47c:	85 30       	cpi	r24, 0x05	; 5
     47e:	09 f4       	brne	.+2      	; 0x482 <updateLCD+0x20>
     480:	40 c0       	rjmp	.+128    	; 0x502 <updateLCD+0xa0>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	09 f0       	breq	.+2      	; 0x488 <updateLCD+0x26>
     486:	13 c1       	rjmp	.+550    	; 0x6ae <updateLCD+0x24c>
     488:	0d c0       	rjmp	.+26     	; 0x4a4 <updateLCD+0x42>
     48a:	88 30       	cpi	r24, 0x08	; 8
     48c:	09 f4       	brne	.+2      	; 0x490 <updateLCD+0x2e>
     48e:	99 c0       	rjmp	.+306    	; 0x5c2 <updateLCD+0x160>
     490:	88 30       	cpi	r24, 0x08	; 8
     492:	08 f4       	brcc	.+2      	; 0x496 <updateLCD+0x34>
     494:	76 c0       	rjmp	.+236    	; 0x582 <updateLCD+0x120>
     496:	89 30       	cpi	r24, 0x09	; 9
     498:	09 f4       	brne	.+2      	; 0x49c <updateLCD+0x3a>
     49a:	b3 c0       	rjmp	.+358    	; 0x602 <updateLCD+0x1a0>
     49c:	8a 30       	cpi	r24, 0x0A	; 10
     49e:	09 f0       	breq	.+2      	; 0x4a2 <updateLCD+0x40>
     4a0:	06 c1       	rjmp	.+524    	; 0x6ae <updateLCD+0x24c>
     4a2:	cf c0       	rjmp	.+414    	; 0x642 <updateLCD+0x1e0>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     4a4:	8e e8       	ldi	r24, 0x8E	; 142
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     4b0:	8b e9       	ldi	r24, 0x9B	; 155
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
     4bc:	f8 c0       	rjmp	.+496    	; 0x6ae <updateLCD+0x24c>
			break;
		case MAN:
			updateManual();
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     4be:	8d ea       	ldi	r24, 0xAD	; 173
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     4ca:	80 91 c1 03 	lds	r24, 0x03C1
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     4d4:	20 91 e7 04 	lds	r18, 0x04E7
     4d8:	00 d0       	rcall	.+0      	; 0x4da <updateLCD+0x78>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <updateLCD+0x7a>
     4dc:	00 d0       	rcall	.+0      	; 0x4de <updateLCD+0x7c>
     4de:	ed b7       	in	r30, 0x3d	; 61
     4e0:	fe b7       	in	r31, 0x3e	; 62
     4e2:	31 96       	adiw	r30, 0x01	; 1
     4e4:	06 ed       	ldi	r16, 0xD6	; 214
     4e6:	14 e0       	ldi	r17, 0x04	; 4
     4e8:	ad b7       	in	r26, 0x3d	; 61
     4ea:	be b7       	in	r27, 0x3e	; 62
     4ec:	12 96       	adiw	r26, 0x02	; 2
     4ee:	1c 93       	st	X, r17
     4f0:	0e 93       	st	-X, r16
     4f2:	11 97       	sbiw	r26, 0x01	; 1
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	93 83       	std	Z+3, r25	; 0x03
     4fa:	82 83       	std	Z+2, r24	; 0x02
     4fc:	24 83       	std	Z+4, r18	; 0x04
     4fe:	15 82       	std	Z+5, r1	; 0x05
     500:	c1 c0       	rjmp	.+386    	; 0x684 <updateLCD+0x222>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     502:	8b eb       	ldi	r24, 0xBB	; 187
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     50e:	80 91 e9 04 	lds	r24, 0x04E9
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     518:	00 d0       	rcall	.+0      	; 0x51a <updateLCD+0xb8>
     51a:	00 d0       	rcall	.+0      	; 0x51c <updateLCD+0xba>
     51c:	00 d0       	rcall	.+0      	; 0x51e <updateLCD+0xbc>
     51e:	ed b7       	in	r30, 0x3d	; 61
     520:	fe b7       	in	r31, 0x3e	; 62
     522:	31 96       	adiw	r30, 0x01	; 1
     524:	06 ed       	ldi	r16, 0xD6	; 214
     526:	14 e0       	ldi	r17, 0x04	; 4
     528:	ad b7       	in	r26, 0x3d	; 61
     52a:	be b7       	in	r27, 0x3e	; 62
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	1c 93       	st	X, r17
     530:	0e 93       	st	-X, r16
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	93 83       	std	Z+3, r25	; 0x03
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	8f ea       	ldi	r24, 0xAF	; 175
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	9f c0       	rjmp	.+318    	; 0x680 <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     542:	87 ec       	ldi	r24, 0xC7	; 199
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     54e:	80 91 a1 03 	lds	r24, 0x03A1
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     558:	00 d0       	rcall	.+0      	; 0x55a <updateLCD+0xf8>
     55a:	00 d0       	rcall	.+0      	; 0x55c <updateLCD+0xfa>
     55c:	00 d0       	rcall	.+0      	; 0x55e <updateLCD+0xfc>
     55e:	ed b7       	in	r30, 0x3d	; 61
     560:	fe b7       	in	r31, 0x3e	; 62
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	06 ed       	ldi	r16, 0xD6	; 214
     566:	14 e0       	ldi	r17, 0x04	; 4
     568:	ad b7       	in	r26, 0x3d	; 61
     56a:	be b7       	in	r27, 0x3e	; 62
     56c:	12 96       	adiw	r26, 0x02	; 2
     56e:	1c 93       	st	X, r17
     570:	0e 93       	st	-X, r16
     572:	11 97       	sbiw	r26, 0x01	; 1
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	93 83       	std	Z+3, r25	; 0x03
     57a:	82 83       	std	Z+2, r24	; 0x02
     57c:	8c e9       	ldi	r24, 0x9C	; 156
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	7f c0       	rjmp	.+254    	; 0x680 <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     582:	84 ed       	ldi	r24, 0xD4	; 212
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     58e:	80 91 0d 05 	lds	r24, 0x050D
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     598:	00 d0       	rcall	.+0      	; 0x59a <updateLCD+0x138>
     59a:	00 d0       	rcall	.+0      	; 0x59c <updateLCD+0x13a>
     59c:	00 d0       	rcall	.+0      	; 0x59e <updateLCD+0x13c>
     59e:	ed b7       	in	r30, 0x3d	; 61
     5a0:	fe b7       	in	r31, 0x3e	; 62
     5a2:	31 96       	adiw	r30, 0x01	; 1
     5a4:	06 ed       	ldi	r16, 0xD6	; 214
     5a6:	14 e0       	ldi	r17, 0x04	; 4
     5a8:	ad b7       	in	r26, 0x3d	; 61
     5aa:	be b7       	in	r27, 0x3e	; 62
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	1c 93       	st	X, r17
     5b0:	0e 93       	st	-X, r16
     5b2:	11 97       	sbiw	r26, 0x01	; 1
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	93 83       	std	Z+3, r25	; 0x03
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	80 e9       	ldi	r24, 0x90	; 144
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	5f c0       	rjmp	.+190    	; 0x680 <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     5c2:	80 ee       	ldi	r24, 0xE0	; 224
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     5ce:	80 91 fd 04 	lds	r24, 0x04FD
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     5d8:	00 d0       	rcall	.+0      	; 0x5da <updateLCD+0x178>
     5da:	00 d0       	rcall	.+0      	; 0x5dc <updateLCD+0x17a>
     5dc:	00 d0       	rcall	.+0      	; 0x5de <updateLCD+0x17c>
     5de:	ed b7       	in	r30, 0x3d	; 61
     5e0:	fe b7       	in	r31, 0x3e	; 62
     5e2:	31 96       	adiw	r30, 0x01	; 1
     5e4:	06 ed       	ldi	r16, 0xD6	; 214
     5e6:	14 e0       	ldi	r17, 0x04	; 4
     5e8:	ad b7       	in	r26, 0x3d	; 61
     5ea:	be b7       	in	r27, 0x3e	; 62
     5ec:	12 96       	adiw	r26, 0x02	; 2
     5ee:	1c 93       	st	X, r17
     5f0:	0e 93       	st	-X, r16
     5f2:	11 97       	sbiw	r26, 0x01	; 1
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	93 83       	std	Z+3, r25	; 0x03
     5fa:	82 83       	std	Z+2, r24	; 0x02
     5fc:	8a ee       	ldi	r24, 0xEA	; 234
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	3f c0       	rjmp	.+126    	; 0x680 <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     602:	8a ee       	ldi	r24, 0xEA	; 234
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     60e:	80 91 0e 05 	lds	r24, 0x050E
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     618:	00 d0       	rcall	.+0      	; 0x61a <updateLCD+0x1b8>
     61a:	00 d0       	rcall	.+0      	; 0x61c <updateLCD+0x1ba>
     61c:	00 d0       	rcall	.+0      	; 0x61e <updateLCD+0x1bc>
     61e:	ed b7       	in	r30, 0x3d	; 61
     620:	fe b7       	in	r31, 0x3e	; 62
     622:	31 96       	adiw	r30, 0x01	; 1
     624:	06 ed       	ldi	r16, 0xD6	; 214
     626:	14 e0       	ldi	r17, 0x04	; 4
     628:	ad b7       	in	r26, 0x3d	; 61
     62a:	be b7       	in	r27, 0x3e	; 62
     62c:	12 96       	adiw	r26, 0x02	; 2
     62e:	1c 93       	st	X, r17
     630:	0e 93       	st	-X, r16
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	93 83       	std	Z+3, r25	; 0x03
     63a:	82 83       	std	Z+2, r24	; 0x02
     63c:	8b ea       	ldi	r24, 0xAB	; 171
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	1f c0       	rjmp	.+62     	; 0x680 <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     642:	85 ef       	ldi	r24, 0xF5	; 245
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     64e:	80 91 b7 03 	lds	r24, 0x03B7
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     658:	00 d0       	rcall	.+0      	; 0x65a <updateLCD+0x1f8>
     65a:	00 d0       	rcall	.+0      	; 0x65c <updateLCD+0x1fa>
     65c:	00 d0       	rcall	.+0      	; 0x65e <updateLCD+0x1fc>
     65e:	ed b7       	in	r30, 0x3d	; 61
     660:	fe b7       	in	r31, 0x3e	; 62
     662:	31 96       	adiw	r30, 0x01	; 1
     664:	06 ed       	ldi	r16, 0xD6	; 214
     666:	14 e0       	ldi	r17, 0x04	; 4
     668:	ad b7       	in	r26, 0x3d	; 61
     66a:	be b7       	in	r27, 0x3e	; 62
     66c:	12 96       	adiw	r26, 0x02	; 2
     66e:	1c 93       	st	X, r17
     670:	0e 93       	st	-X, r16
     672:	11 97       	sbiw	r26, 0x01	; 1
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	93 83       	std	Z+3, r25	; 0x03
     67a:	82 83       	std	Z+2, r24	; 0x02
     67c:	89 e0       	ldi	r24, 0x09	; 9
     67e:	95 e0       	ldi	r25, 0x05	; 5
     680:	95 83       	std	Z+5, r25	; 0x05
     682:	84 83       	std	Z+4, r24	; 0x04
     684:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     688:	f8 01       	movw	r30, r16
     68a:	01 90       	ld	r0, Z+
     68c:	00 20       	and	r0, r0
     68e:	e9 f7       	brne	.-6      	; 0x68a <updateLCD+0x228>
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	e0 1b       	sub	r30, r16
     694:	f1 0b       	sbc	r31, r17
     696:	8d b7       	in	r24, 0x3d	; 61
     698:	9e b7       	in	r25, 0x3e	; 62
     69a:	06 96       	adiw	r24, 0x06	; 6
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	9e bf       	out	0x3e, r25	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	8d bf       	out	0x3d, r24	; 61
     6a6:	c8 01       	movw	r24, r16
     6a8:	6e 2f       	mov	r22, r30
     6aa:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCDstring>
			break;
	}

	CopyStringtoLCD(LCDVoice, 0, 0);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
	LCDGotoXY(voiceStrLen, 0);
     6ba:	80 91 cb 03 	lds	r24, 0x03CB
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
	sprintf(LCDBuffer, "%d", voice);
     6c4:	20 91 a0 03 	lds	r18, 0x03A0
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <updateLCD+0x268>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <updateLCD+0x26a>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <updateLCD+0x26c>
     6ce:	ed b7       	in	r30, 0x3d	; 61
     6d0:	fe b7       	in	r31, 0x3e	; 62
     6d2:	31 96       	adiw	r30, 0x01	; 1
     6d4:	06 ed       	ldi	r16, 0xD6	; 214
     6d6:	14 e0       	ldi	r17, 0x04	; 4
     6d8:	ad b7       	in	r26, 0x3d	; 61
     6da:	be b7       	in	r27, 0x3e	; 62
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	1c 93       	st	X, r17
     6e0:	0e 93       	st	-X, r16
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	93 83       	std	Z+3, r25	; 0x03
     6ea:	82 83       	std	Z+2, r24	; 0x02
     6ec:	24 83       	std	Z+4, r18	; 0x04
     6ee:	15 82       	std	Z+5, r1	; 0x05
     6f0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <sprintf>
	LCDstring(LCDBuffer, 1);
     6f4:	8d b7       	in	r24, 0x3d	; 61
     6f6:	9e b7       	in	r25, 0x3e	; 62
     6f8:	06 96       	adiw	r24, 0x06	; 6
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	9e bf       	out	0x3e, r25	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	8d bf       	out	0x3d, r24	; 61
     704:	c8 01       	movw	r24, r16
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCDstring>
}
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <setState>:
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     712:	80 93 c2 03 	sts	0x03C2, r24
	updateLCD();
     716:	0e 94 31 02 	call	0x462	; 0x462 <updateLCD>
}
     71a:	08 95       	ret

0000071c <nextState>:
}

// update to next state if key is pressed
uint8_t waitingForInput = 0;
uint8_t vidx = 0;
void nextState(void){
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
	if(waitingForInput) {
		// output input to screen
	}
	uint8_t key = KeypadKey();
     724:	0e 94 49 06 	call	0xc92	; 0xc92 <KeypadKey>
     728:	08 2f       	mov	r16, r24
	if(key != 0) {
     72a:	88 23       	and	r24, r24
     72c:	f1 f1       	breq	.+124    	; 0x7aa <nextState+0x8e>
		//_delay_ms(1000);
		sprintf(LCDBuffer, "%d", key);
     72e:	00 d0       	rcall	.+0      	; 0x730 <nextState+0x14>
     730:	00 d0       	rcall	.+0      	; 0x732 <nextState+0x16>
     732:	00 d0       	rcall	.+0      	; 0x734 <nextState+0x18>
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	86 ed       	ldi	r24, 0xD6	; 214
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	ad b7       	in	r26, 0x3d	; 61
     740:	be b7       	in	r27, 0x3e	; 62
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	93 83       	std	Z+3, r25	; 0x03
     750:	82 83       	std	Z+2, r24	; 0x02
     752:	04 83       	std	Z+4, r16	; 0x04
     754:	15 82       	std	Z+5, r1	; 0x05
     756:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <sprintf>
		//LCDGotoXY(0, 0);
		LCDstring(LCDBuffer, strlen(LCDBuffer));
     75a:	e6 ed       	ldi	r30, 0xD6	; 214
     75c:	f4 e0       	ldi	r31, 0x04	; 4
     75e:	01 90       	ld	r0, Z+
     760:	00 20       	and	r0, r0
     762:	e9 f7       	brne	.-6      	; 0x75e <nextState+0x42>
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	e6 5d       	subi	r30, 0xD6	; 214
     768:	f4 40       	sbci	r31, 0x04	; 4
     76a:	ad b7       	in	r26, 0x3d	; 61
     76c:	be b7       	in	r27, 0x3e	; 62
     76e:	16 96       	adiw	r26, 0x06	; 6
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	be bf       	out	0x3e, r27	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	ad bf       	out	0x3d, r26	; 61
     77a:	86 ed       	ldi	r24, 0xD6	; 214
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	6e 2f       	mov	r22, r30
     780:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCDstring>
	}
	switch(key) {
     784:	0b 37       	cpi	r16, 0x7B	; 123
     786:	19 f0       	breq	.+6      	; 0x78e <nextState+0x72>
     788:	07 3e       	cpi	r16, 0xE7	; 231
     78a:	79 f4       	brne	.+30     	; 0x7aa <nextState+0x8e>
     78c:	02 c0       	rjmp	.+4      	; 0x792 <nextState+0x76>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	08 c0       	rjmp	.+16     	; 0x7a2 <nextState+0x86>
	switch(key) {
		case KEY_P:
			setState(MAN);
			break;
		case KEY_A:
			setState((state + 1) % 10);
     792:	80 91 c2 03 	lds	r24, 0x03C2
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	6a e0       	ldi	r22, 0x0A	; 10
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__divmodhi4>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     7a2:	80 93 c2 03 	sts	0x03C2, r24
	updateLCD();
     7a6:	0e 94 31 02 	call	0x462	; 0x462 <updateLCD>
			break;
		case KEY_A:
			setState((state + 1) % 10);
			break;
	}
	switch (state) {
     7aa:	80 91 c2 03 	lds	r24, 0x03C2
     7ae:	86 30       	cpi	r24, 0x06	; 6
     7b0:	c9 f1       	breq	.+114    	; 0x824 <nextState+0x108>
     7b2:	87 30       	cpi	r24, 0x07	; 7
     7b4:	40 f4       	brcc	.+16     	; 0x7c6 <nextState+0xaa>
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	d1 f0       	breq	.+52     	; 0x7ee <nextState+0xd2>
     7ba:	85 30       	cpi	r24, 0x05	; 5
     7bc:	20 f5       	brcc	.+72     	; 0x806 <nextState+0xea>
     7be:	83 30       	cpi	r24, 0x03	; 3
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <nextState+0xa8>
     7c2:	76 c0       	rjmp	.+236    	; 0x8b0 <nextState+0x194>
     7c4:	0c c0       	rjmp	.+24     	; 0x7de <nextState+0xc2>
     7c6:	88 30       	cpi	r24, 0x08	; 8
     7c8:	09 f4       	brne	.+2      	; 0x7cc <nextState+0xb0>
     7ca:	42 c0       	rjmp	.+132    	; 0x850 <nextState+0x134>
     7cc:	88 30       	cpi	r24, 0x08	; 8
     7ce:	a8 f1       	brcs	.+106    	; 0x83a <nextState+0x11e>
     7d0:	89 30       	cpi	r24, 0x09	; 9
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <nextState+0xba>
     7d4:	4d c0       	rjmp	.+154    	; 0x870 <nextState+0x154>
     7d6:	8a 30       	cpi	r24, 0x0A	; 10
     7d8:	09 f0       	breq	.+2      	; 0x7dc <nextState+0xc0>
     7da:	6a c0       	rjmp	.+212    	; 0x8b0 <nextState+0x194>
     7dc:	54 c0       	rjmp	.+168    	; 0x886 <nextState+0x16a>
		case SET_SEQUENCE:
			if(key == KEY_D) {
     7de:	07 37       	cpi	r16, 0x77	; 119
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <nextState+0xc8>
     7e2:	5f c0       	rjmp	.+190    	; 0x8a2 <nextState+0x186>
				seqId = KeypadInt();
     7e4:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     7e8:	80 93 e7 04 	sts	0x04E7, r24
     7ec:	57 c0       	rjmp	.+174    	; 0x89c <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_VIDX:
			if(key == KEY_D) {
     7ee:	07 37       	cpi	r16, 0x77	; 119
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <nextState+0xd8>
     7f2:	57 c0       	rjmp	.+174    	; 0x8a2 <nextState+0x186>
				vidx = KeypadInt() % NUM_VOICES;
     7f4:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     7f8:	64 e0       	ldi	r22, 0x04	; 4
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__divmodhi4>
     800:	80 93 39 03 	sts	0x0339, r24
     804:	4b c0       	rjmp	.+150    	; 0x89c <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_MAIN:
			if(key == KEY_D) {
     806:	07 37       	cpi	r16, 0x77	; 119
     808:	09 f0       	breq	.+2      	; 0x80c <nextState+0xf0>
     80a:	4b c0       	rjmp	.+150    	; 0x8a2 <nextState+0x186>
				inc_main[vidx] = KeypadInt();
     80c:	80 91 39 03 	lds	r24, 0x0339
     810:	c8 2f       	mov	r28, r24
     812:	d0 e0       	ldi	r29, 0x00	; 0
     814:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     818:	9c 01       	movw	r18, r24
     81a:	cc 0f       	add	r28, r28
     81c:	dd 1f       	adc	r29, r29
     81e:	c1 55       	subi	r28, 0x51	; 81
     820:	dc 4f       	sbci	r29, 0xFC	; 252
     822:	23 c0       	rjmp	.+70     	; 0x86a <nextState+0x14e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_MAIN:
			if(key == KEY_D) {
     824:	07 37       	cpi	r16, 0x77	; 119
     826:	e9 f5       	brne	.+122    	; 0x8a2 <nextState+0x186>
				decay_main[vidx] = KeypadInt();
     828:	80 91 39 03 	lds	r24, 0x0339
     82c:	c8 2f       	mov	r28, r24
     82e:	d0 e0       	ldi	r29, 0x00	; 0
     830:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     834:	c4 56       	subi	r28, 0x64	; 100
     836:	dc 4f       	sbci	r29, 0xFC	; 252
     838:	30 c0       	rjmp	.+96     	; 0x89a <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_RISE_MAIN:
			if(key == KEY_D) {
     83a:	07 37       	cpi	r16, 0x77	; 119
     83c:	91 f5       	brne	.+100    	; 0x8a2 <nextState+0x186>
				rise_main[vidx] = KeypadInt();
     83e:	80 91 39 03 	lds	r24, 0x0339
     842:	c8 2f       	mov	r28, r24
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     84a:	c0 57       	subi	r28, 0x70	; 112
     84c:	dc 4f       	sbci	r29, 0xFC	; 252
     84e:	25 c0       	rjmp	.+74     	; 0x89a <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_FM:
			if(key == KEY_D) {
     850:	07 37       	cpi	r16, 0x77	; 119
     852:	39 f5       	brne	.+78     	; 0x8a2 <nextState+0x186>
				inc_fm1[vidx] = KeypadInt();
     854:	80 91 39 03 	lds	r24, 0x0339
     858:	c8 2f       	mov	r28, r24
     85a:	d0 e0       	ldi	r29, 0x00	; 0
     85c:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     860:	9c 01       	movw	r18, r24
     862:	cc 0f       	add	r28, r28
     864:	dd 1f       	adc	r29, r29
     866:	c6 51       	subi	r28, 0x16	; 22
     868:	db 4f       	sbci	r29, 0xFB	; 251
     86a:	39 83       	std	Y+1, r19	; 0x01
     86c:	28 83       	st	Y, r18
     86e:	16 c0       	rjmp	.+44     	; 0x89c <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DEPTH_FM:
			if(key == KEY_D) {
     870:	07 37       	cpi	r16, 0x77	; 119
     872:	b9 f4       	brne	.+46     	; 0x8a2 <nextState+0x186>
				depth_fm1[vidx] = KeypadInt();
     874:	80 91 39 03 	lds	r24, 0x0339
     878:	c8 2f       	mov	r28, r24
     87a:	d0 e0       	ldi	r29, 0x00	; 0
     87c:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     880:	c5 55       	subi	r28, 0x55	; 85
     882:	dc 4f       	sbci	r29, 0xFC	; 252
     884:	0a c0       	rjmp	.+20     	; 0x89a <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_FM:
			if(key == KEY_D) {
     886:	07 37       	cpi	r16, 0x77	; 119
     888:	61 f4       	brne	.+24     	; 0x8a2 <nextState+0x186>
				decay_fm1[vidx] = KeypadInt();
     88a:	80 91 39 03 	lds	r24, 0x0339
     88e:	c8 2f       	mov	r28, r24
     890:	d0 e0       	ldi	r29, 0x00	; 0
     892:	0e 94 53 06 	call	0xca6	; 0xca6 <KeypadInt>
     896:	c7 5f       	subi	r28, 0xF7	; 247
     898:	da 4f       	sbci	r29, 0xFA	; 250
     89a:	88 83       	st	Y, r24
				waitingForInput = 0;
     89c:	10 92 38 03 	sts	0x0338, r1
     8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <nextState+0x194>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	10 93 c2 03 	sts	0x03C2, r17
	updateLCD();
     8a8:	0e 94 31 02 	call	0x462	; 0x462 <updateLCD>
			if(key == KEY_D) {
				decay_fm1[vidx] = KeypadInt();
				waitingForInput = 0;
			} else {
				setState(MAIN_SCREEN);
				waitingForInput = 1;
     8ac:	10 93 38 03 	sts	0x0338, r17
			}
			break;
		
	}
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     8ba:	0e 94 00 07 	call	0xe00	; 0xe00 <LCDinit>
	LCDcursorOFF();
     8be:	0e 94 68 07 	call	0xed0	; 0xed0 <LCDcursorOFF>
	LCDclr();				//clear the display
     8c2:	0e 94 99 06 	call	0xd32	; 0xd32 <LCDclr>
	LCDGotoXY(0,0);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     8ce:	8e e8       	ldi	r24, 0x8E	; 142
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     8da:	8b e9       	ldi	r24, 0x9B	; 155
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <CopyStringtoLCD>
}
     8e6:	08 95       	ret

000008e8 <Initialize>:
	}
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
	// make B.3 an output
	DDRB = (1<<PINB3) ;
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	84 b9       	out	0x04, r24	; 4

	//Keypad
	DDRD=0x00;
     8f4:	1a b8       	out	0x0a, r1	; 10
     8f6:	0e ec       	ldi	r16, 0xCE	; 206
     8f8:	13 e0       	ldi	r17, 0x03	; 3
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	d0 e0       	ldi	r29, 0x00	; 0
     8fe:	1f c0       	rjmp	.+62     	; 0x93e <Initialize+0x56>
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     900:	be 01       	movw	r22, r28
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 10 0c 	call	0x1820	; 0x1820 <__floatunsisf>
     90a:	26 e5       	ldi	r18, 0x56	; 86
     90c:	3e e0       	ldi	r19, 0x0E	; 14
     90e:	49 ec       	ldi	r20, 0xC9	; 201
     910:	50 e4       	ldi	r21, 0x40	; 64
     912:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5b e3       	ldi	r21, 0x3B	; 59
     91e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     922:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <sin>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4e ef       	ldi	r20, 0xFE	; 254
     92c:	52 e4       	ldi	r21, 0x42	; 66
     92e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     932:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fixunssfsi>
     936:	f8 01       	movw	r30, r16
     938:	61 93       	st	Z+, r22
     93a:	8f 01       	movw	r16, r30
     93c:	21 96       	adiw	r28, 0x01	; 1
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
     93e:	cf 3f       	cpi	r28, 0xFF	; 255
     940:	d1 05       	cpc	r29, r1
     942:	f1 f2       	breq	.-68     	; 0x900 <Initialize+0x18>
     944:	e8 f2       	brcs	.-70     	; 0x900 <Initialize+0x18>
     946:	d0 93 cd 03 	sts	0x03CD, r29
     94a:	c0 93 cc 03 	sts	0x03CC, r28
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
	}  

	// init the time counter
	time=0;
     94e:	10 92 ff 04 	sts	0x04FF, r1
     952:	10 92 fe 04 	sts	0x04FE, r1

	// timer 0 runs at full rate
	TCCR0B = 1 ;  
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	85 bd       	out	0x25, r24	; 37
	//turn off timer 0 overflow ISR
	TIMSK0 = 0 ;
     95a:	10 92 6e 00 	sts	0x006E, r1
	// turn on PWM
	// turn on fast PWM and OC0A output
	// at full clock rate, toggle OC0A (pin B3) 
	// 16 microsec per PWM cycle sample time
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     95e:	83 ec       	ldi	r24, 0xC3	; 195
     960:	84 bd       	out	0x24, r24	; 36
	OCR0A = 128 ; // set PWM to half full scale
     962:	80 e8       	ldi	r24, 0x80	; 128
     964:	87 bd       	out	0x27, r24	; 39

	/////////// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	// timer 1 ticks at 12000 Hz = 1333 ticks
	OCR1A = 1332 ; // 2000 ticks
     966:	84 e3       	ldi	r24, 0x34	; 52
     968:	95 e0       	ldi	r25, 0x05	; 5
     96a:	90 93 89 00 	sts	0x0089, r25
     96e:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     978:	29 e0       	ldi	r18, 0x09	; 9
     97a:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0x00;	//turn off pwm and oc lines
     97e:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 2 cmp match ISR
     982:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     986:	89 ef       	ldi	r24, 0xF9	; 249
     988:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     98c:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	80 93 b1 00 	sts	0x00B1, r24


	seqStrLen = strlen(LCDSequenceId);
     996:	8c e0       	ldi	r24, 0x0C	; 12
     998:	80 93 c1 03 	sts	0x03C1, r24
	mainFreqStrLen = strlen(LCDMainFrequency);
     99c:	9a e0       	ldi	r25, 0x0A	; 10
     99e:	90 93 e9 04 	sts	0x04E9, r25
	mainDecayStrLen = strlen(LCDMainDecay);
     9a2:	8b e0       	ldi	r24, 0x0B	; 11
     9a4:	80 93 a1 03 	sts	0x03A1, r24
	mainRiseStrLen = strlen(LCDMainRise);
     9a8:	90 93 0d 05 	sts	0x050D, r25
	fmFreqStrLen = strlen(LCDFMFreq);
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	80 93 fd 04 	sts	0x04FD, r24
	fmDepthStrLen = strlen(LCDFMDepth);
     9b2:	20 93 0e 05 	sts	0x050E, r18
	fmDecayStrLen = strlen(LCDFMDecay);
     9b6:	20 93 b7 03 	sts	0x03B7, r18
	voiceStrLen = strlen(LCDVoice);
     9ba:	86 e0       	ldi	r24, 0x06	; 6
     9bc:	80 93 cb 03 	sts	0x03CB, r24

	initLCD();
     9c0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <initLCD>

	// turn on all ISRs
	sei() ;
     9c4:	78 94       	sei
	///////////////////////////////////////////////////
	// Sound parameters
	///////////////////////////////////////////////////
	// Base frequency
	// 2^16/8000*freq = 8.192*freq
	inc_main[0] = (int)(8.192 * 261) ; 
     9c6:	2a e5       	ldi	r18, 0x5A	; 90
     9c8:	38 e0       	ldi	r19, 0x08	; 8
     9ca:	30 93 b0 03 	sts	0x03B0, r19
     9ce:	20 93 af 03 	sts	0x03AF, r18
	// rise and decay SHIFT factor  -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_main[0] = 4 ;
     9d2:	84 e0       	ldi	r24, 0x04	; 4
     9d4:	80 93 9c 03 	sts	0x039C, r24
	rise_main[0] = 0 ;
     9d8:	10 92 90 03 	sts	0x0390, r1
	//
	// FM modulation rate -- also a frequency
	inc_fm1[0] = (int)(8.192 * 65) ;
     9dc:	84 e1       	ldi	r24, 0x14	; 20
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	90 93 eb 04 	sts	0x04EB, r25
     9e4:	80 93 ea 04 	sts	0x04EA, r24
	// FM modulation depth SHIFT factor 
	// bigger factor implies smaller FM!
	// useful range is 4 to 15
	depth_fm1[0] = 7 ;
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	80 93 ab 03 	sts	0x03AB, r24
	// decay SHIFT factor -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_fm1[0] = 6 ;
     9ee:	86 e0       	ldi	r24, 0x06	; 6
     9f0:	80 93 09 05 	sts	0x0509, r24

//Chime:
	inc_main[1] = (int)(8.192 * 261.0) ; 
     9f4:	30 93 b2 03 	sts	0x03B2, r19
     9f8:	20 93 b1 03 	sts	0x03B1, r18
	decay_main[1] = 5 ;
     9fc:	45 e0       	ldi	r20, 0x05	; 5
     9fe:	40 93 9d 03 	sts	0x039D, r20
	rise_main[1] = 1 ;
     a02:	31 e0       	ldi	r19, 0x01	; 1
     a04:	30 93 91 03 	sts	0x0391, r19
	inc_fm1[1] = (int)(8.192 * 350.0) ;
     a08:	83 e3       	ldi	r24, 0x33	; 51
     a0a:	9b e0       	ldi	r25, 0x0B	; 11
     a0c:	90 93 ed 04 	sts	0x04ED, r25
     a10:	80 93 ec 04 	sts	0x04EC, r24
	depth_fm1[1] = 9 ;
     a14:	89 e0       	ldi	r24, 0x09	; 9
     a16:	80 93 ac 03 	sts	0x03AC, r24
	decay_fm1[1] = 5 ;
     a1a:	40 93 0a 05 	sts	0x050A, r20

//Plucked String:
	inc_main[2] = (int)(8.192 * 500.0) ; 
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e1       	ldi	r25, 0x10	; 16
     a22:	90 93 b4 03 	sts	0x03B4, r25
     a26:	80 93 b3 03 	sts	0x03B3, r24
	decay_main[2] = 3 ;
     a2a:	23 e0       	ldi	r18, 0x03	; 3
     a2c:	20 93 9e 03 	sts	0x039E, r18
	rise_main[2] = 1 ;
     a30:	30 93 92 03 	sts	0x0392, r19
	inc_fm1[2] = (int)(8.192 * 750.0) ;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	98 e1       	ldi	r25, 0x18	; 24
     a38:	90 93 ef 04 	sts	0x04EF, r25
     a3c:	80 93 ee 04 	sts	0x04EE, r24
	depth_fm1[2] = 8 ;
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	80 93 ad 03 	sts	0x03AD, r24
	decay_fm1[2] = 3 ;
     a46:	20 93 0b 05 	sts	0x050B, r18

//Small, stiff rod
	inc_main[3] = (int)(8.192 * 1440) ;   
     a4a:	84 e1       	ldi	r24, 0x14	; 20
     a4c:	9e e2       	ldi	r25, 0x2E	; 46
     a4e:	90 93 b6 03 	sts	0x03B6, r25
     a52:	80 93 b5 03 	sts	0x03B5, r24
	decay_main[3] = 3 ;
     a56:	20 93 9f 03 	sts	0x039F, r18
	rise_main[3] = 1 ;   
     a5a:	30 93 93 03 	sts	0x0393, r19
	inc_fm1[3] = (int)(8.192 * 50) ; // at 100 get stiff string; at 200 get hollow pipe
     a5e:	89 e9       	ldi	r24, 0x99	; 153
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	90 93 f1 04 	sts	0x04F1, r25
     a66:	80 93 f0 04 	sts	0x04F0, r24
	depth_fm1[3] = 10 ; //or 9
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
     a6c:	80 93 ae 03 	sts	0x03AE, r24
	decay_fm1[3] = 5 ;
     a70:	40 93 0c 05 	sts	0x050C, r20
	decay_main[5] = 5 ;
	rise_main[5] = 0 ;
	inc_fm1[5] = (int)(8.192 * 1000) ;
	depth_fm1[5] = 8 ;
	decay_fm1[5] = 6 ;*/
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <main>:
	}
}
/////////////////////////////////////////////////////
int main(void)
{ 
   Initialize();
     a7e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Initialize>
				pushed = 0;
			}
		//	printf("%d\n\r", TCNT2);
		}
		*/
		nextState();
     a82:	0e 94 8e 03 	call	0x71c	; 0x71c <nextState>
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <main+0x4>

00000a88 <__vector_9>:
	//TCCR2B = 0;
} 

// Every 1ms
volatile uint16_t mscount = 0;
ISR (TIMER2_COMPA_vect){
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
	KeypadDebounce();
     aaa:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadDebounce>
	mscount++;
     aae:	80 91 36 03 	lds	r24, 0x0336
     ab2:	90 91 37 03 	lds	r25, 0x0337
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 37 03 	sts	0x0337, r25
     abc:	80 93 36 03 	sts	0x0336, r24
	if(!(mscount % 1100)) {
     ac0:	80 91 36 03 	lds	r24, 0x0336
     ac4:	90 91 37 03 	lds	r25, 0x0337
     ac8:	6c e4       	ldi	r22, 0x4C	; 76
     aca:	74 e0       	ldi	r23, 0x04	; 4
     acc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__udivmodhi4>
     ad0:	89 2b       	or	r24, r25
     ad2:	19 f4       	brne	.+6      	; 0xada <__vector_9+0x52>
		pluck = 1;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	80 93 a2 03 	sts	0x03A2, r24
	}
}
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRA = 0x0f;
     afc:	2f e0       	ldi	r18, 0x0F	; 15
     afe:	21 b9       	out	0x01, r18	; 1
	PORTA = 0xf0; 
     b00:	80 ef       	ldi	r24, 0xF0	; 240
     b02:	82 b9       	out	0x02, r24	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b04:	9a e1       	ldi	r25, 0x1A	; 26
     b06:	39 2f       	mov	r19, r25
     b08:	3a 95       	dec	r19
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <KeypadScan+0xc>
	_delay_us(5);
	key = PINA;
     b0c:	30 b1       	in	r19, 0x00	; 0
	
	//get upper nibble
	DDRA = 0xf0;
     b0e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0f; 
     b10:	22 b9       	out	0x02, r18	; 2
     b12:	9a 95       	dec	r25
     b14:	f1 f7       	brne	.-4      	; 0xb12 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PINA;
     b16:	20 b1       	in	r18, 0x00	; 0
     b18:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     b1a:	2f 3f       	cpi	r18, 0xFF	; 255
     b1c:	61 f0       	breq	.+24     	; 0xb36 <KeypadScan+0x3a>
     b1e:	e5 e1       	ldi	r30, 0x15	; 21
     b20:	f2 e0       	ldi	r31, 0x02	; 2
     b22:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     b24:	80 81       	ld	r24, Z
     b26:	9f 5f       	subi	r25, 0xFF	; 255
     b28:	82 17       	cp	r24, r18
     b2a:	11 f4       	brne	.+4      	; 0xb30 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     b2c:	89 2f       	mov	r24, r25
     b2e:	08 95       	ret
	_delay_us(5);
	key = key | PINA;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     b30:	31 96       	adiw	r30, 0x01	; 1
     b32:	90 31       	cpi	r25, 0x10	; 16
     b34:	b9 f7       	brne	.-18     	; 0xb24 <KeypadScan+0x28>
     b36:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     b38:	08 95       	ret

00000b3a <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     b3a:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     b3c:	80 91 3c 03 	lds	r24, 0x033C
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	31 f4       	brne	.+12     	; 0xb50 <KeypadAppend+0x16>
		KeypadFinished = 0;
     b44:	10 92 3c 03 	sts	0x033C, r1
		KeypadInput = 0;
     b48:	10 92 3b 03 	sts	0x033B, r1
     b4c:	10 92 3a 03 	sts	0x033A, r1
	}
	switch(key) {
     b50:	97 3d       	cpi	r25, 0xD7	; 215
     b52:	b9 f1       	breq	.+110    	; 0xbc2 <KeypadAppend+0x88>
     b54:	98 3d       	cpi	r25, 0xD8	; 216
     b56:	98 f4       	brcc	.+38     	; 0xb7e <KeypadAppend+0x44>
     b58:	97 3b       	cpi	r25, 0xB7	; 183
     b5a:	99 f1       	breq	.+102    	; 0xbc2 <KeypadAppend+0x88>
     b5c:	98 3b       	cpi	r25, 0xB8	; 184
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <KeypadAppend+0x36>
     b60:	9b 37       	cpi	r25, 0x7B	; 123
     b62:	79 f1       	breq	.+94     	; 0xbc2 <KeypadAppend+0x88>
     b64:	9e 37       	cpi	r25, 0x7E	; 126
     b66:	69 f1       	breq	.+90     	; 0xbc2 <KeypadAppend+0x88>
     b68:	97 37       	cpi	r25, 0x77	; 119
     b6a:	09 f0       	breq	.+2      	; 0xb6e <KeypadAppend+0x34>
     b6c:	43 c0       	rjmp	.+134    	; 0xbf4 <KeypadAppend+0xba>
     b6e:	29 c0       	rjmp	.+82     	; 0xbc2 <KeypadAppend+0x88>
     b70:	9d 3b       	cpi	r25, 0xBD	; 189
     b72:	19 f1       	breq	.+70     	; 0xbba <KeypadAppend+0x80>
     b74:	9e 3b       	cpi	r25, 0xBE	; 190
     b76:	f9 f0       	breq	.+62     	; 0xbb6 <KeypadAppend+0x7c>
     b78:	9b 3b       	cpi	r25, 0xBB	; 187
     b7a:	e1 f5       	brne	.+120    	; 0xbf4 <KeypadAppend+0xba>
     b7c:	20 c0       	rjmp	.+64     	; 0xbbe <KeypadAppend+0x84>
     b7e:	97 3e       	cpi	r25, 0xE7	; 231
     b80:	01 f1       	breq	.+64     	; 0xbc2 <KeypadAppend+0x88>
     b82:	98 3e       	cpi	r25, 0xE8	; 232
     b84:	38 f4       	brcc	.+14     	; 0xb94 <KeypadAppend+0x5a>
     b86:	9d 3d       	cpi	r25, 0xDD	; 221
     b88:	91 f0       	breq	.+36     	; 0xbae <KeypadAppend+0x74>
     b8a:	9e 3d       	cpi	r25, 0xDE	; 222
     b8c:	71 f0       	breq	.+28     	; 0xbaa <KeypadAppend+0x70>
     b8e:	9b 3d       	cpi	r25, 0xDB	; 219
     b90:	89 f5       	brne	.+98     	; 0xbf4 <KeypadAppend+0xba>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <KeypadAppend+0x78>
     b94:	9d 3e       	cpi	r25, 0xED	; 237
     b96:	29 f0       	breq	.+10     	; 0xba2 <KeypadAppend+0x68>
     b98:	9e 3e       	cpi	r25, 0xEE	; 238
     b9a:	b9 f0       	breq	.+46     	; 0xbca <KeypadAppend+0x90>
     b9c:	9b 3e       	cpi	r25, 0xEB	; 235
     b9e:	51 f5       	brne	.+84     	; 0xbf4 <KeypadAppend+0xba>
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <KeypadAppend+0x6c>
     ba2:	42 e0       	ldi	r20, 0x02	; 2
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <KeypadAppend+0x92>
     ba6:	43 e0       	ldi	r20, 0x03	; 3
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     baa:	44 e0       	ldi	r20, 0x04	; 4
     bac:	0f c0       	rjmp	.+30     	; 0xbcc <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     bae:	45 e0       	ldi	r20, 0x05	; 5
     bb0:	0d c0       	rjmp	.+26     	; 0xbcc <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     bb2:	46 e0       	ldi	r20, 0x06	; 6
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     bb6:	47 e0       	ldi	r20, 0x07	; 7
     bb8:	09 c0       	rjmp	.+18     	; 0xbcc <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     bba:	48 e0       	ldi	r20, 0x08	; 8
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     bbe:	49 e0       	ldi	r20, 0x09	; 9
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 3c 03 	sts	0x033C, r24
     bc8:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     bca:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     bcc:	80 91 3a 03 	lds	r24, 0x033A
     bd0:	90 91 3b 03 	lds	r25, 0x033B
     bd4:	9c 01       	movw	r18, r24
     bd6:	63 e0       	ldi	r22, 0x03	; 3
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	6a 95       	dec	r22
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <KeypadAppend+0x9e>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	28 0f       	add	r18, r24
     be6:	39 1f       	adc	r19, r25
     be8:	24 0f       	add	r18, r20
     bea:	31 1d       	adc	r19, r1
     bec:	30 93 3b 03 	sts	0x033B, r19
     bf0:	20 93 3a 03 	sts	0x033A, r18
     bf4:	08 95       	ret

00000bf6 <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	if(debounceTime > 0) {
     bf6:	80 91 12 05 	lds	r24, 0x0512
     bfa:	88 23       	and	r24, r24
     bfc:	29 f0       	breq	.+10     	; 0xc08 <KeypadDebounce+0x12>
		debounceTime--;
     bfe:	80 91 12 05 	lds	r24, 0x0512
     c02:	81 50       	subi	r24, 0x01	; 1
     c04:	80 93 12 05 	sts	0x0512, r24
	}
	uint8_t key = KeypadScan(); //Scan the keypad
     c08:	0e 94 7e 05 	call	0xafc	; 0xafc <KeypadScan>
     c0c:	98 2f       	mov	r25, r24
	switch(keyState){
     c0e:	80 91 3d 03 	lds	r24, 0x033D
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 f0       	breq	.+36     	; 0xc3a <KeypadDebounce+0x44>
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	28 f0       	brcs	.+10     	; 0xc24 <KeypadDebounce+0x2e>
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	21 f1       	breq	.+72     	; 0xc66 <KeypadDebounce+0x70>
     c1e:	83 30       	cpi	r24, 0x03	; 3
     c20:	b9 f5       	brne	.+110    	; 0xc90 <KeypadDebounce+0x9a>
     c22:	2a c0       	rjmp	.+84     	; 0xc78 <KeypadDebounce+0x82>
	
		case RELEASED:
			if (key){
     c24:	99 23       	and	r25, r25
     c26:	a1 f1       	breq	.+104    	; 0xc90 <KeypadDebounce+0x9a>
				keyState = MAYBEPUSHED;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 3d 03 	sts	0x033D, r24
				debounceTime = DEBOUNCE_TIME;
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	80 93 12 05 	sts	0x0512, r24
				checkKey = key;
     c34:	90 93 13 05 	sts	0x0513, r25
     c38:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     c3a:	80 91 12 05 	lds	r24, 0x0512
     c3e:	88 23       	and	r24, r24
     c40:	39 f5       	brne	.+78     	; 0xc90 <KeypadDebounce+0x9a>
				if (key && key == checkKey) {
     c42:	99 23       	and	r25, r25
     c44:	69 f0       	breq	.+26     	; 0xc60 <KeypadDebounce+0x6a>
     c46:	80 91 13 05 	lds	r24, 0x0513
     c4a:	98 17       	cp	r25, r24
     c4c:	49 f4       	brne	.+18     	; 0xc60 <KeypadDebounce+0x6a>
					keyState = PUSHED;
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	80 93 3d 03 	sts	0x033D, r24
					curKey = key;
     c54:	90 93 11 05 	sts	0x0511, r25
					KeypadAppend(key);
     c58:	89 2f       	mov	r24, r25
     c5a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <KeypadAppend>
     c5e:	08 95       	ret
				} else {
					keyState = RELEASED;
     c60:	10 92 3d 03 	sts	0x033D, r1
     c64:	08 95       	ret
				}
			}
			break;
		case PUSHED:
			if (key == 0){
     c66:	99 23       	and	r25, r25
     c68:	99 f4       	brne	.+38     	; 0xc90 <KeypadDebounce+0x9a>
				keyState = MAYBERELEASED;
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	80 93 3d 03 	sts	0x033D, r24
				debounceTime = DEBOUNCE_TIME;
     c70:	8e e1       	ldi	r24, 0x1E	; 30
     c72:	80 93 12 05 	sts	0x0512, r24
     c76:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     c78:	80 91 12 05 	lds	r24, 0x0512
     c7c:	88 23       	and	r24, r24
     c7e:	41 f4       	brne	.+16     	; 0xc90 <KeypadDebounce+0x9a>
				if (key == 0) {
     c80:	99 23       	and	r25, r25
     c82:	21 f4       	brne	.+8      	; 0xc8c <KeypadDebounce+0x96>
					keyState = PUSHED;
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	80 93 3d 03 	sts	0x033D, r24
     c8a:	08 95       	ret
				} else {
					keyState = RELEASED;
     c8c:	10 92 3d 03 	sts	0x033D, r1
     c90:	08 95       	ret

00000c92 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     c92:	90 91 11 05 	lds	r25, 0x0511
	if (curKey){
     c96:	80 91 11 05 	lds	r24, 0x0511
     c9a:	88 23       	and	r24, r24
     c9c:	11 f0       	breq	.+4      	; 0xca2 <KeypadKey+0x10>
		curKey = 0;
     c9e:	10 92 11 05 	sts	0x0511, r1
	}
	return tmpKey;
}
     ca2:	89 2f       	mov	r24, r25
     ca4:	08 95       	ret

00000ca6 <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	return KeypadInput;
}
     ca6:	80 91 3a 03 	lds	r24, 0x033A
     caa:	90 91 3b 03 	lds	r25, 0x033B
     cae:	08 95       	ret

00000cb0 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     cb0:	80 91 3c 03 	lds	r24, 0x033C
     cb4:	08 95       	ret

00000cb6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     cb6:	28 2f       	mov	r18, r24
     cb8:	20 7f       	andi	r18, 0xF0	; 240
     cba:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     cbc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     cbe:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc0:	20 ea       	ldi	r18, 0xA0	; 160
     cc2:	3f e0       	ldi	r19, 0x0F	; 15
     cc4:	f9 01       	movw	r30, r18
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     cca:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     ccc:	40 98       	cbi	0x08, 0	; 8
     cce:	f9 01       	movw	r30, r18
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	44 e0       	ldi	r20, 0x04	; 4
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	4a 95       	dec	r20
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <LCDsendChar+0x22>
     ce0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     ce2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     ce4:	42 9a       	sbi	0x08, 2	; 8
     ce6:	c9 01       	movw	r24, r18
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     cec:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     cee:	40 98       	cbi	0x08, 0	; 8
     cf0:	c9 01       	movw	r24, r18
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     cf6:	08 95       	ret

00000cf8 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     cf8:	28 2f       	mov	r18, r24
     cfa:	20 7f       	andi	r18, 0xF0	; 240
     cfc:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     cfe:	42 9a       	sbi	0x08, 2	; 8
     d00:	20 ea       	ldi	r18, 0xA0	; 160
     d02:	3f e0       	ldi	r19, 0x0F	; 15
     d04:	f9 01       	movw	r30, r18
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d0a:	42 98       	cbi	0x08, 2	; 8
     d0c:	f9 01       	movw	r30, r18
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	54 e0       	ldi	r21, 0x04	; 4
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	5a 95       	dec	r21
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <LCDsendCommand+0x1e>
     d1e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     d20:	42 9a       	sbi	0x08, 2	; 8
     d22:	c9 01       	movw	r24, r18
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d28:	42 98       	cbi	0x08, 2	; 8
     d2a:	c9 01       	movw	r24, r18
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     d30:	08 95       	ret

00000d32 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     d38:	08 95       	ret

00000d3a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     d40:	08 95       	ret

00000d42 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	49 f0       	breq	.+18     	; 0xd62 <LCDstring+0x20>
     d50:	ec 01       	movw	r28, r24
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     d56:	89 91       	ld	r24, Y+
     d58:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     d5c:	1f 5f       	subi	r17, 0xFF	; 255
     d5e:	10 17       	cp	r17, r16
     d60:	d0 f3       	brcs	.-12     	; 0xd56 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     d6c:	62 30       	cpi	r22, 0x02	; 2
     d6e:	31 f0       	breq	.+12     	; 0xd7c <LCDGotoXY+0x10>
     d70:	63 30       	cpi	r22, 0x03	; 3
     d72:	31 f0       	breq	.+12     	; 0xd80 <LCDGotoXY+0x14>
     d74:	61 30       	cpi	r22, 0x01	; 1
     d76:	29 f4       	brne	.+10     	; 0xd82 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     d78:	80 5c       	subi	r24, 0xC0	; 192
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     d7c:	8c 5e       	subi	r24, 0xEC	; 236
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     d80:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
	
}
     d88:	08 95       	ret

00000d8a <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
     d92:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     d94:	64 2f       	mov	r22, r20
     d96:	0e 94 b6 06 	call	0xd6c	; 0xd6c <LCDGotoXY>
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     d9e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     da2:	1f 5f       	subi	r17, 0xFF	; 255
     da4:	fe 01       	movw	r30, r28
     da6:	e1 0f       	add	r30, r17
     da8:	f1 1d       	adc	r31, r1
     daa:	84 91       	lpm	r24, Z+
     dac:	88 23       	and	r24, r24
     dae:	b9 f7       	brne	.-18     	; 0xd9e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	08 95       	ret

00000db8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	7c 01       	movw	r14, r24
     dc6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     dc8:	11 0f       	add	r17, r17
     dca:	11 0f       	add	r17, r17
     dcc:	11 0f       	add	r17, r17
     dce:	10 64       	ori	r17, 0x40	; 64
     dd0:	c0 e0       	ldi	r28, 0x00	; 0
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     dd4:	f7 01       	movw	r30, r14
     dd6:	ec 0f       	add	r30, r28
     dd8:	fd 1f       	adc	r31, r29
     dda:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     ddc:	81 2f       	mov	r24, r17
     dde:	8c 0f       	add	r24, r28
     de0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
		LCDsendChar(pcc);
     de4:	80 2f       	mov	r24, r16
     de6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     dea:	21 96       	adiw	r28, 0x01	; 1
     dec:	c8 30       	cpi	r28, 0x08	; 8
     dee:	d1 05       	cpc	r29, r1
     df0:	89 f7       	brne	.-30     	; 0xdd4 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	08 95       	ret

00000e00 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	80 e6       	ldi	r24, 0x60	; 96
     e08:	9a ee       	ldi	r25, 0xEA	; 234
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     e0e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     e10:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     e12:	87 b1       	in	r24, 0x07	; 7
     e14:	80 6f       	ori	r24, 0xF0	; 240
     e16:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     e18:	87 b1       	in	r24, 0x07	; 7
     e1a:	87 60       	ori	r24, 0x07	; 7
     e1c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e1e:	80 e3       	ldi	r24, 0x30	; 48
     e20:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e22:	42 9a       	sbi	0x08, 2	; 8
     e24:	20 ea       	ldi	r18, 0xA0	; 160
     e26:	3f e0       	ldi	r19, 0x0F	; 15
     e28:	f9 01       	movw	r30, r18
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e2e:	42 98       	cbi	0x08, 2	; 8
     e30:	f9 01       	movw	r30, r18
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e36:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e38:	42 9a       	sbi	0x08, 2	; 8
     e3a:	c9 01       	movw	r24, r18
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e40:	42 98       	cbi	0x08, 2	; 8
     e42:	c9 01       	movw	r24, r18
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e4c:	42 9a       	sbi	0x08, 2	; 8
     e4e:	c9 01       	movw	r24, r18
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e54:	42 98       	cbi	0x08, 2	; 8
     e56:	c9 01       	movw	r24, r18
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     e5c:	88 e2       	ldi	r24, 0x28	; 40
     e5e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     e62:	8c e0       	ldi	r24, 0x0C	; 12
     e64:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
     e68:	c8 e0       	ldi	r28, 0x08	; 8
     e6a:	d1 e0       	ldi	r29, 0x01	; 1
     e6c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     e6e:	16 2f       	mov	r17, r22
     e70:	1f 5f       	subi	r17, 0xFF	; 255
     e72:	ce 01       	movw	r24, r28
     e74:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LCDdefinechar>
     e78:	28 96       	adiw	r28, 0x08	; 8
     e7a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     e7c:	18 30       	cpi	r17, 0x08	; 8
     e7e:	b9 f7       	brne	.-18     	; 0xe6e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	08 95       	ret

00000e88 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	08 2f       	mov	r16, r24
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     e92:	8e e1       	ldi	r24, 0x1E	; 30
     e94:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     e98:	1f 5f       	subi	r17, 0xFF	; 255
     e9a:	10 17       	cp	r17, r16
     e9c:	d0 f3       	brcs	.-12     	; 0xe92 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	08 2f       	mov	r16, r24
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     eae:	88 e1       	ldi	r24, 0x18	; 24
     eb0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     eb4:	1f 5f       	subi	r17, 0xFF	; 255
     eb6:	10 17       	cp	r17, r16
     eb8:	d0 f3       	brcs	.-12     	; 0xeae <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     ec0:	8e e0       	ldi	r24, 0x0E	; 14
     ec2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     ec6:	08 95       	ret

00000ec8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     ec8:	8f e0       	ldi	r24, 0x0F	; 15
     eca:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     ece:	08 95       	ret

00000ed0 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     ed0:	8c e0       	ldi	r24, 0x0C	; 12
     ed2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     ed6:	08 95       	ret

00000ed8 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     ede:	08 95       	ret

00000ee0 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     ee0:	8c e0       	ldi	r24, 0x0C	; 12
     ee2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
}
     ee6:	08 95       	ret

00000ee8 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	08 2f       	mov	r16, r24
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     ef2:	80 e1       	ldi	r24, 0x10	; 16
     ef4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     ef8:	1f 5f       	subi	r17, 0xFF	; 255
     efa:	10 17       	cp	r17, r16
     efc:	d0 f3       	brcs	.-12     	; 0xef2 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	08 2f       	mov	r16, r24
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     f0e:	84 e1       	ldi	r24, 0x14	; 20
     f10:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f14:	1f 5f       	subi	r17, 0xFF	; 255
     f16:	10 17       	cp	r17, r16
     f18:	d0 f3       	brcs	.-12     	; 0xf0e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	89 9f       	mul	r24, r25
     f34:	c0 01       	movw	r24, r0
     f36:	11 24       	eor	r1, r1
     f38:	24 2f       	mov	r18, r20
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	ac 01       	movw	r20, r24
     f3e:	42 9f       	mul	r20, r18
     f40:	c0 01       	movw	r24, r0
     f42:	43 9f       	mul	r20, r19
     f44:	90 0d       	add	r25, r0
     f46:	52 9f       	mul	r21, r18
     f48:	90 0d       	add	r25, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__divmodhi4>
     f52:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     f54:	cb 01       	movw	r24, r22
     f56:	66 e0       	ldi	r22, 0x06	; 6
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__udivmodhi4>
     f5e:	e8 2e       	mov	r14, r24
     f60:	ff 24       	eor	r15, r15
     f62:	00 e0       	ldi	r16, 0x00	; 0
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	12 c0       	rjmp	.+36     	; 0xf8c <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     f68:	c8 01       	movw	r24, r16
     f6a:	05 96       	adiw	r24, 0x05	; 5
     f6c:	c8 17       	cp	r28, r24
     f6e:	d9 07       	cpc	r29, r25
     f70:	10 f0       	brcs	.+4      	; 0xf76 <LCDprogressBar+0x56>
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     f76:	c0 17       	cp	r28, r16
     f78:	d1 07       	cpc	r29, r17
     f7a:	10 f0       	brcs	.+4      	; 0xf80 <LCDprogressBar+0x60>
     f7c:	8e 2d       	mov	r24, r14
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <LCDprogressBar+0x62>
     f80:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     f82:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     f86:	f3 94       	inc	r15
     f88:	0a 5f       	subi	r16, 0xFA	; 250
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	fd 14       	cp	r15, r13
     f8e:	60 f3       	brcs	.-40     	; 0xf68 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	08 95       	ret

00000fa0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     fa0:	87 e6       	ldi	r24, 0x67	; 103
     fa2:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     fa6:	88 e1       	ldi	r24, 0x18	; 24
     fa8:	80 93 c1 00 	sts	0x00C1, r24
}
     fac:	08 95       	ret

00000fae <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     fae:	1f 93       	push	r17
     fb0:	18 2f       	mov	r17, r24

  if (c == '\a')
     fb2:	87 30       	cpi	r24, 0x07	; 7
     fb4:	49 f4       	brne	.+18     	; 0xfc8 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     fb6:	60 91 18 05 	lds	r22, 0x0518
     fba:	70 91 19 05 	lds	r23, 0x0519
     fbe:	85 e2       	ldi	r24, 0x25	; 37
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <fputs>
     fc6:	0b c0       	rjmp	.+22     	; 0xfde <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     fc8:	8a 30       	cpi	r24, 0x0A	; 10
     fca:	19 f4       	brne	.+6      	; 0xfd2 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     fcc:	8d e0       	ldi	r24, 0x0D	; 13
     fce:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     fd2:	80 91 c0 00 	lds	r24, 0x00C0
     fd6:	85 ff       	sbrs	r24, 5
     fd8:	fc cf       	rjmp	.-8      	; 0xfd2 <uart_putchar+0x24>
  UDR0 = c;
     fda:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	1f 91       	pop	r17
     fe4:	08 95       	ret

00000fe6 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     ff4:	80 91 3e 03 	lds	r24, 0x033E
     ff8:	90 91 3f 03 	lds	r25, 0x033F
     ffc:	89 2b       	or	r24, r25
     ffe:	09 f0       	breq	.+2      	; 0x1002 <uart_getchar+0x1c>
    1000:	9f c0       	rjmp	.+318    	; 0x1140 <__stack+0x41>
    1002:	00 e4       	ldi	r16, 0x40	; 64
    1004:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1006:	80 91 c0 00 	lds	r24, 0x00C0
    100a:	87 ff       	sbrs	r24, 7
    100c:	fc cf       	rjmp	.-8      	; 0x1006 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    100e:	80 91 c0 00 	lds	r24, 0x00C0
    1012:	84 ff       	sbrs	r24, 4
    1014:	03 c0       	rjmp	.+6      	; 0x101c <uart_getchar+0x36>
    1016:	2e ef       	ldi	r18, 0xFE	; 254
    1018:	3f ef       	ldi	r19, 0xFF	; 255
    101a:	a6 c0       	rjmp	.+332    	; 0x1168 <__stack+0x69>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    101c:	80 91 c0 00 	lds	r24, 0x00C0
    1020:	83 fd       	sbrc	r24, 3
    1022:	a0 c0       	rjmp	.+320    	; 0x1164 <__stack+0x65>
	  return _FDEV_ERR;
	c = UDR0;
    1024:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1028:	9d 30       	cpi	r25, 0x0D	; 13
    102a:	11 f0       	breq	.+4      	; 0x1030 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    102c:	9a 30       	cpi	r25, 0x0A	; 10
    102e:	69 f4       	brne	.+26     	; 0x104a <uart_getchar+0x64>
	  {
	    *cp = c;
    1030:	8a e0       	ldi	r24, 0x0A	; 10
    1032:	f8 01       	movw	r30, r16
    1034:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    1036:	b7 01       	movw	r22, r14
    1038:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
	    rxp = b;
    103c:	80 e4       	ldi	r24, 0x40	; 64
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	90 93 3f 03 	sts	0x033F, r25
    1044:	80 93 3e 03 	sts	0x033E, r24
    1048:	7b c0       	rjmp	.+246    	; 0x1140 <__stack+0x41>
	    break;
	  }
	else if (c == '\t')
    104a:	99 30       	cpi	r25, 0x09	; 9
    104c:	09 f4       	brne	.+2      	; 0x1050 <uart_getchar+0x6a>
    104e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1050:	89 2f       	mov	r24, r25
    1052:	80 52       	subi	r24, 0x20	; 32
    1054:	8f 35       	cpi	r24, 0x5F	; 95
    1056:	10 f0       	brcs	.+4      	; 0x105c <uart_getchar+0x76>
    1058:	90 3a       	cpi	r25, 0xA0	; 160
    105a:	70 f0       	brcs	.+28     	; 0x1078 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    105c:	f3 e0       	ldi	r31, 0x03	; 3
    105e:	0f 38       	cpi	r16, 0x8F	; 143
    1060:	1f 07       	cpc	r17, r31
    1062:	11 f4       	brne	.+4      	; 0x1068 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    1064:	87 e0       	ldi	r24, 0x07	; 7
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1068:	f8 01       	movw	r30, r16
    106a:	91 93       	st	Z+, r25
    106c:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    106e:	89 2f       	mov	r24, r25
    1070:	b7 01       	movw	r22, r14
    1072:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
    1076:	c7 cf       	rjmp	.-114    	; 0x1006 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1078:	92 31       	cpi	r25, 0x12	; 18
    107a:	39 f1       	breq	.+78     	; 0x10ca <uart_getchar+0xe4>
    107c:	93 31       	cpi	r25, 0x13	; 19
    107e:	38 f4       	brcc	.+14     	; 0x108e <uart_getchar+0xa8>
    1080:	93 30       	cpi	r25, 0x03	; 3
    1082:	09 f4       	brne	.+2      	; 0x1086 <uart_getchar+0xa0>
    1084:	6f c0       	rjmp	.+222    	; 0x1164 <__stack+0x65>
    1086:	98 30       	cpi	r25, 0x08	; 8
    1088:	09 f0       	breq	.+2      	; 0x108c <uart_getchar+0xa6>
    108a:	bd cf       	rjmp	.-134    	; 0x1006 <uart_getchar+0x20>
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <uart_getchar+0xba>
    108e:	97 31       	cpi	r25, 0x17	; 23
    1090:	09 f4       	brne	.+2      	; 0x1094 <uart_getchar+0xae>
    1092:	4b c0       	rjmp	.+150    	; 0x112a <__stack+0x2b>
    1094:	9f 37       	cpi	r25, 0x7F	; 127
    1096:	21 f0       	breq	.+8      	; 0x10a0 <uart_getchar+0xba>
    1098:	95 31       	cpi	r25, 0x15	; 21
    109a:	09 f0       	breq	.+2      	; 0x109e <uart_getchar+0xb8>
    109c:	b4 cf       	rjmp	.-152    	; 0x1006 <uart_getchar+0x20>
    109e:	32 c0       	rjmp	.+100    	; 0x1104 <__stack+0x5>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    10a0:	f3 e0       	ldi	r31, 0x03	; 3
    10a2:	00 34       	cpi	r16, 0x40	; 64
    10a4:	1f 07       	cpc	r17, r31
    10a6:	09 f0       	breq	.+2      	; 0x10aa <uart_getchar+0xc4>
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <uart_getchar+0xc6>
    10aa:	ad cf       	rjmp	.-166    	; 0x1006 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    10ac:	88 e0       	ldi	r24, 0x08	; 8
    10ae:	b7 01       	movw	r22, r14
    10b0:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar(' ', stream);
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	b7 01       	movw	r22, r14
    10b8:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar('\b', stream);
    10bc:	88 e0       	ldi	r24, 0x08	; 8
    10be:	b7 01       	movw	r22, r14
    10c0:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		cp--;
    10c4:	01 50       	subi	r16, 0x01	; 1
    10c6:	10 40       	sbci	r17, 0x00	; 0
    10c8:	9e cf       	rjmp	.-196    	; 0x1006 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    10ca:	8d e0       	ldi	r24, 0x0D	; 13
    10cc:	b7 01       	movw	r22, r14
    10ce:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
    10d2:	c0 e4       	ldi	r28, 0x40	; 64
    10d4:	d3 e0       	ldi	r29, 0x03	; 3
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    10d8:	89 91       	ld	r24, Y+
    10da:	b7 01       	movw	r22, r14
    10dc:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    10e0:	c0 17       	cp	r28, r16
    10e2:	d1 07       	cpc	r29, r17
    10e4:	c8 f3       	brcs	.-14     	; 0x10d8 <uart_getchar+0xf2>
    10e6:	8f cf       	rjmp	.-226    	; 0x1006 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	b7 01       	movw	r22, r14
    10ec:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar(' ', stream);
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	b7 01       	movw	r22, r14
    10f4:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar('\b', stream);
    10f8:	88 e0       	ldi	r24, 0x08	; 8
    10fa:	b7 01       	movw	r22, r14
    10fc:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		cp--;
    1100:	01 50       	subi	r16, 0x01	; 1
    1102:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	00 34       	cpi	r16, 0x40	; 64
    1108:	18 07       	cpc	r17, r24
    110a:	09 f0       	breq	.+2      	; 0x110e <__stack+0xf>
    110c:	68 f7       	brcc	.-38     	; 0x10e8 <uart_getchar+0x102>
    110e:	7b cf       	rjmp	.-266    	; 0x1006 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	b7 01       	movw	r22, r14
    1114:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar(' ', stream);
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	b7 01       	movw	r22, r14
    111c:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
		uart_putchar('\b', stream);
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	b7 01       	movw	r22, r14
    1124:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_putchar>
    1128:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    112a:	e3 e0       	ldi	r30, 0x03	; 3
    112c:	00 34       	cpi	r16, 0x40	; 64
    112e:	1e 07       	cpc	r17, r30
    1130:	09 f0       	breq	.+2      	; 0x1134 <__stack+0x35>
    1132:	08 f4       	brcc	.+2      	; 0x1136 <__stack+0x37>
    1134:	68 cf       	rjmp	.-304    	; 0x1006 <uart_getchar+0x20>
    1136:	e8 01       	movw	r28, r16
    1138:	8a 91       	ld	r24, -Y
    113a:	80 32       	cpi	r24, 0x20	; 32
    113c:	49 f7       	brne	.-46     	; 0x1110 <__stack+0x11>
    113e:	63 cf       	rjmp	.-314    	; 0x1006 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1140:	e0 91 3e 03 	lds	r30, 0x033E
    1144:	f0 91 3f 03 	lds	r31, 0x033F
    1148:	81 91       	ld	r24, Z+
    114a:	f0 93 3f 03 	sts	0x033F, r31
    114e:	e0 93 3e 03 	sts	0x033E, r30
  if (c == '\n')
    1152:	8a 30       	cpi	r24, 0x0A	; 10
    1154:	21 f4       	brne	.+8      	; 0x115e <__stack+0x5f>
    rxp = 0;
    1156:	10 92 3f 03 	sts	0x033F, r1
    115a:	10 92 3e 03 	sts	0x033E, r1

  return c;
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <__stack+0x69>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	3f ef       	ldi	r19, 0xFF	; 255
}
    1168:	c9 01       	movw	r24, r18
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <__fixunssfsi>:
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	7b 01       	movw	r14, r22
    1182:	8c 01       	movw	r16, r24
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	5f e4       	ldi	r21, 0x4F	; 79
    118c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
    1190:	88 23       	and	r24, r24
    1192:	8c f0       	brlt	.+34     	; 0x11b6 <__fixunssfsi+0x3e>
    1194:	c8 01       	movw	r24, r16
    1196:	b7 01       	movw	r22, r14
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	5f e4       	ldi	r21, 0x4F	; 79
    11a0:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
    11a4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixsfsi>
    11a8:	9b 01       	movw	r18, r22
    11aa:	ac 01       	movw	r20, r24
    11ac:	20 50       	subi	r18, 0x00	; 0
    11ae:	30 40       	sbci	r19, 0x00	; 0
    11b0:	40 40       	sbci	r20, 0x00	; 0
    11b2:	50 48       	sbci	r21, 0x80	; 128
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <__fixunssfsi+0x4a>
    11b6:	c8 01       	movw	r24, r16
    11b8:	b7 01       	movw	r22, r14
    11ba:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixsfsi>
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	b9 01       	movw	r22, r18
    11c4:	ca 01       	movw	r24, r20
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	08 95       	ret

000011d0 <_fpadd_parts>:
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ee ee       	ldi	r30, 0xEE	; 238
    11d6:	f8 e0       	ldi	r31, 0x08	; 8
    11d8:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__>
    11dc:	dc 01       	movw	r26, r24
    11de:	2b 01       	movw	r4, r22
    11e0:	fa 01       	movw	r30, r20
    11e2:	9c 91       	ld	r25, X
    11e4:	92 30       	cpi	r25, 0x02	; 2
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <_fpadd_parts+0x1a>
    11e8:	39 c1       	rjmp	.+626    	; 0x145c <_fpadd_parts+0x28c>
    11ea:	eb 01       	movw	r28, r22
    11ec:	88 81       	ld	r24, Y
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <_fpadd_parts+0x24>
    11f2:	33 c1       	rjmp	.+614    	; 0x145a <_fpadd_parts+0x28a>
    11f4:	94 30       	cpi	r25, 0x04	; 4
    11f6:	69 f4       	brne	.+26     	; 0x1212 <_fpadd_parts+0x42>
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	09 f0       	breq	.+2      	; 0x11fe <_fpadd_parts+0x2e>
    11fc:	2f c1       	rjmp	.+606    	; 0x145c <_fpadd_parts+0x28c>
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	9c 91       	ld	r25, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	98 17       	cp	r25, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <_fpadd_parts+0x3c>
    120a:	28 c1       	rjmp	.+592    	; 0x145c <_fpadd_parts+0x28c>
    120c:	ad e2       	ldi	r26, 0x2D	; 45
    120e:	b2 e0       	ldi	r27, 0x02	; 2
    1210:	25 c1       	rjmp	.+586    	; 0x145c <_fpadd_parts+0x28c>
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	09 f4       	brne	.+2      	; 0x1218 <_fpadd_parts+0x48>
    1216:	21 c1       	rjmp	.+578    	; 0x145a <_fpadd_parts+0x28a>
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	a9 f4       	brne	.+42     	; 0x1246 <_fpadd_parts+0x76>
    121c:	92 30       	cpi	r25, 0x02	; 2
    121e:	09 f0       	breq	.+2      	; 0x1222 <_fpadd_parts+0x52>
    1220:	1d c1       	rjmp	.+570    	; 0x145c <_fpadd_parts+0x28c>
    1222:	9a 01       	movw	r18, r20
    1224:	ad 01       	movw	r20, r26
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	ea 01       	movw	r28, r20
    122a:	09 90       	ld	r0, Y+
    122c:	ae 01       	movw	r20, r28
    122e:	e9 01       	movw	r28, r18
    1230:	09 92       	st	Y+, r0
    1232:	9e 01       	movw	r18, r28
    1234:	81 50       	subi	r24, 0x01	; 1
    1236:	c1 f7       	brne	.-16     	; 0x1228 <_fpadd_parts+0x58>
    1238:	e2 01       	movw	r28, r4
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	9c 91       	ld	r25, X
    1240:	89 23       	and	r24, r25
    1242:	81 83       	std	Z+1, r24	; 0x01
    1244:	08 c1       	rjmp	.+528    	; 0x1456 <_fpadd_parts+0x286>
    1246:	92 30       	cpi	r25, 0x02	; 2
    1248:	09 f4       	brne	.+2      	; 0x124c <_fpadd_parts+0x7c>
    124a:	07 c1       	rjmp	.+526    	; 0x145a <_fpadd_parts+0x28a>
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	2d 90       	ld	r2, X+
    1250:	3c 90       	ld	r3, X
    1252:	13 97       	sbiw	r26, 0x03	; 3
    1254:	eb 01       	movw	r28, r22
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	14 96       	adiw	r26, 0x04	; 4
    125c:	ad 90       	ld	r10, X+
    125e:	bd 90       	ld	r11, X+
    1260:	cd 90       	ld	r12, X+
    1262:	dc 90       	ld	r13, X
    1264:	17 97       	sbiw	r26, 0x07	; 7
    1266:	ec 80       	ldd	r14, Y+4	; 0x04
    1268:	fd 80       	ldd	r15, Y+5	; 0x05
    126a:	0e 81       	ldd	r16, Y+6	; 0x06
    126c:	1f 81       	ldd	r17, Y+7	; 0x07
    126e:	91 01       	movw	r18, r2
    1270:	28 1b       	sub	r18, r24
    1272:	39 0b       	sbc	r19, r25
    1274:	b9 01       	movw	r22, r18
    1276:	37 ff       	sbrs	r19, 7
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <_fpadd_parts+0xb2>
    127a:	66 27       	eor	r22, r22
    127c:	77 27       	eor	r23, r23
    127e:	62 1b       	sub	r22, r18
    1280:	73 0b       	sbc	r23, r19
    1282:	60 32       	cpi	r22, 0x20	; 32
    1284:	71 05       	cpc	r23, r1
    1286:	0c f0       	brlt	.+2      	; 0x128a <_fpadd_parts+0xba>
    1288:	61 c0       	rjmp	.+194    	; 0x134c <_fpadd_parts+0x17c>
    128a:	12 16       	cp	r1, r18
    128c:	13 06       	cpc	r1, r19
    128e:	6c f5       	brge	.+90     	; 0x12ea <_fpadd_parts+0x11a>
    1290:	37 01       	movw	r6, r14
    1292:	48 01       	movw	r8, r16
    1294:	06 2e       	mov	r0, r22
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <_fpadd_parts+0xd0>
    1298:	96 94       	lsr	r9
    129a:	87 94       	ror	r8
    129c:	77 94       	ror	r7
    129e:	67 94       	ror	r6
    12a0:	0a 94       	dec	r0
    12a2:	d2 f7       	brpl	.-12     	; 0x1298 <_fpadd_parts+0xc8>
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <_fpadd_parts+0xe6>
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	44 1f       	adc	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	6a 95       	dec	r22
    12b8:	d2 f7       	brpl	.-12     	; 0x12ae <_fpadd_parts+0xde>
    12ba:	21 50       	subi	r18, 0x01	; 1
    12bc:	30 40       	sbci	r19, 0x00	; 0
    12be:	40 40       	sbci	r20, 0x00	; 0
    12c0:	50 40       	sbci	r21, 0x00	; 0
    12c2:	2e 21       	and	r18, r14
    12c4:	3f 21       	and	r19, r15
    12c6:	40 23       	and	r20, r16
    12c8:	51 23       	and	r21, r17
    12ca:	21 15       	cp	r18, r1
    12cc:	31 05       	cpc	r19, r1
    12ce:	41 05       	cpc	r20, r1
    12d0:	51 05       	cpc	r21, r1
    12d2:	21 f0       	breq	.+8      	; 0x12dc <_fpadd_parts+0x10c>
    12d4:	21 e0       	ldi	r18, 0x01	; 1
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	79 01       	movw	r14, r18
    12de:	8a 01       	movw	r16, r20
    12e0:	e6 28       	or	r14, r6
    12e2:	f7 28       	or	r15, r7
    12e4:	08 29       	or	r16, r8
    12e6:	19 29       	or	r17, r9
    12e8:	3c c0       	rjmp	.+120    	; 0x1362 <_fpadd_parts+0x192>
    12ea:	23 2b       	or	r18, r19
    12ec:	d1 f1       	breq	.+116    	; 0x1362 <_fpadd_parts+0x192>
    12ee:	26 0e       	add	r2, r22
    12f0:	37 1e       	adc	r3, r23
    12f2:	35 01       	movw	r6, r10
    12f4:	46 01       	movw	r8, r12
    12f6:	06 2e       	mov	r0, r22
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <_fpadd_parts+0x132>
    12fa:	96 94       	lsr	r9
    12fc:	87 94       	ror	r8
    12fe:	77 94       	ror	r7
    1300:	67 94       	ror	r6
    1302:	0a 94       	dec	r0
    1304:	d2 f7       	brpl	.-12     	; 0x12fa <_fpadd_parts+0x12a>
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <_fpadd_parts+0x148>
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	44 1f       	adc	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	6a 95       	dec	r22
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <_fpadd_parts+0x140>
    131c:	21 50       	subi	r18, 0x01	; 1
    131e:	30 40       	sbci	r19, 0x00	; 0
    1320:	40 40       	sbci	r20, 0x00	; 0
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	2a 21       	and	r18, r10
    1326:	3b 21       	and	r19, r11
    1328:	4c 21       	and	r20, r12
    132a:	5d 21       	and	r21, r13
    132c:	21 15       	cp	r18, r1
    132e:	31 05       	cpc	r19, r1
    1330:	41 05       	cpc	r20, r1
    1332:	51 05       	cpc	r21, r1
    1334:	21 f0       	breq	.+8      	; 0x133e <_fpadd_parts+0x16e>
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	59 01       	movw	r10, r18
    1340:	6a 01       	movw	r12, r20
    1342:	a6 28       	or	r10, r6
    1344:	b7 28       	or	r11, r7
    1346:	c8 28       	or	r12, r8
    1348:	d9 28       	or	r13, r9
    134a:	0b c0       	rjmp	.+22     	; 0x1362 <_fpadd_parts+0x192>
    134c:	82 15       	cp	r24, r2
    134e:	93 05       	cpc	r25, r3
    1350:	2c f0       	brlt	.+10     	; 0x135c <_fpadd_parts+0x18c>
    1352:	1c 01       	movw	r2, r24
    1354:	aa 24       	eor	r10, r10
    1356:	bb 24       	eor	r11, r11
    1358:	65 01       	movw	r12, r10
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_fpadd_parts+0x192>
    135c:	ee 24       	eor	r14, r14
    135e:	ff 24       	eor	r15, r15
    1360:	87 01       	movw	r16, r14
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	9c 91       	ld	r25, X
    1366:	d2 01       	movw	r26, r4
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	8c 91       	ld	r24, X
    136c:	98 17       	cp	r25, r24
    136e:	09 f4       	brne	.+2      	; 0x1372 <_fpadd_parts+0x1a2>
    1370:	45 c0       	rjmp	.+138    	; 0x13fc <_fpadd_parts+0x22c>
    1372:	99 23       	and	r25, r25
    1374:	39 f0       	breq	.+14     	; 0x1384 <_fpadd_parts+0x1b4>
    1376:	a8 01       	movw	r20, r16
    1378:	97 01       	movw	r18, r14
    137a:	2a 19       	sub	r18, r10
    137c:	3b 09       	sbc	r19, r11
    137e:	4c 09       	sbc	r20, r12
    1380:	5d 09       	sbc	r21, r13
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <_fpadd_parts+0x1c0>
    1384:	a6 01       	movw	r20, r12
    1386:	95 01       	movw	r18, r10
    1388:	2e 19       	sub	r18, r14
    138a:	3f 09       	sbc	r19, r15
    138c:	40 0b       	sbc	r20, r16
    138e:	51 0b       	sbc	r21, r17
    1390:	57 fd       	sbrc	r21, 7
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <_fpadd_parts+0x1d4>
    1394:	11 82       	std	Z+1, r1	; 0x01
    1396:	33 82       	std	Z+3, r3	; 0x03
    1398:	22 82       	std	Z+2, r2	; 0x02
    139a:	24 83       	std	Z+4, r18	; 0x04
    139c:	35 83       	std	Z+5, r19	; 0x05
    139e:	46 83       	std	Z+6, r20	; 0x06
    13a0:	57 83       	std	Z+7, r21	; 0x07
    13a2:	1d c0       	rjmp	.+58     	; 0x13de <_fpadd_parts+0x20e>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	81 83       	std	Z+1, r24	; 0x01
    13a8:	33 82       	std	Z+3, r3	; 0x03
    13aa:	22 82       	std	Z+2, r2	; 0x02
    13ac:	88 27       	eor	r24, r24
    13ae:	99 27       	eor	r25, r25
    13b0:	dc 01       	movw	r26, r24
    13b2:	82 1b       	sub	r24, r18
    13b4:	93 0b       	sbc	r25, r19
    13b6:	a4 0b       	sbc	r26, r20
    13b8:	b5 0b       	sbc	r27, r21
    13ba:	84 83       	std	Z+4, r24	; 0x04
    13bc:	95 83       	std	Z+5, r25	; 0x05
    13be:	a6 83       	std	Z+6, r26	; 0x06
    13c0:	b7 83       	std	Z+7, r27	; 0x07
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <_fpadd_parts+0x20e>
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	44 1f       	adc	r20, r20
    13ca:	55 1f       	adc	r21, r21
    13cc:	24 83       	std	Z+4, r18	; 0x04
    13ce:	35 83       	std	Z+5, r19	; 0x05
    13d0:	46 83       	std	Z+6, r20	; 0x06
    13d2:	57 83       	std	Z+7, r21	; 0x07
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	93 83       	std	Z+3, r25	; 0x03
    13dc:	82 83       	std	Z+2, r24	; 0x02
    13de:	24 81       	ldd	r18, Z+4	; 0x04
    13e0:	35 81       	ldd	r19, Z+5	; 0x05
    13e2:	46 81       	ldd	r20, Z+6	; 0x06
    13e4:	57 81       	ldd	r21, Z+7	; 0x07
    13e6:	da 01       	movw	r26, r20
    13e8:	c9 01       	movw	r24, r18
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	a1 09       	sbc	r26, r1
    13ee:	b1 09       	sbc	r27, r1
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	af 4f       	sbci	r26, 0xFF	; 255
    13f6:	bf 43       	sbci	r27, 0x3F	; 63
    13f8:	28 f3       	brcs	.-54     	; 0x13c4 <_fpadd_parts+0x1f4>
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <_fpadd_parts+0x242>
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	33 82       	std	Z+3, r3	; 0x03
    1400:	22 82       	std	Z+2, r2	; 0x02
    1402:	ea 0c       	add	r14, r10
    1404:	fb 1c       	adc	r15, r11
    1406:	0c 1d       	adc	r16, r12
    1408:	1d 1d       	adc	r17, r13
    140a:	e4 82       	std	Z+4, r14	; 0x04
    140c:	f5 82       	std	Z+5, r15	; 0x05
    140e:	06 83       	std	Z+6, r16	; 0x06
    1410:	17 83       	std	Z+7, r17	; 0x07
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	80 83       	st	Z, r24
    1416:	24 81       	ldd	r18, Z+4	; 0x04
    1418:	35 81       	ldd	r19, Z+5	; 0x05
    141a:	46 81       	ldd	r20, Z+6	; 0x06
    141c:	57 81       	ldd	r21, Z+7	; 0x07
    141e:	57 ff       	sbrs	r21, 7
    1420:	1a c0       	rjmp	.+52     	; 0x1456 <_fpadd_parts+0x286>
    1422:	c9 01       	movw	r24, r18
    1424:	aa 27       	eor	r26, r26
    1426:	97 fd       	sbrc	r25, 7
    1428:	a0 95       	com	r26
    142a:	ba 2f       	mov	r27, r26
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	90 70       	andi	r25, 0x00	; 0
    1430:	a0 70       	andi	r26, 0x00	; 0
    1432:	b0 70       	andi	r27, 0x00	; 0
    1434:	56 95       	lsr	r21
    1436:	47 95       	ror	r20
    1438:	37 95       	ror	r19
    143a:	27 95       	ror	r18
    143c:	82 2b       	or	r24, r18
    143e:	93 2b       	or	r25, r19
    1440:	a4 2b       	or	r26, r20
    1442:	b5 2b       	or	r27, r21
    1444:	84 83       	std	Z+4, r24	; 0x04
    1446:	95 83       	std	Z+5, r25	; 0x05
    1448:	a6 83       	std	Z+6, r26	; 0x06
    144a:	b7 83       	std	Z+7, r27	; 0x07
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	93 83       	std	Z+3, r25	; 0x03
    1454:	82 83       	std	Z+2, r24	; 0x02
    1456:	df 01       	movw	r26, r30
    1458:	01 c0       	rjmp	.+2      	; 0x145c <_fpadd_parts+0x28c>
    145a:	d2 01       	movw	r26, r4
    145c:	cd 01       	movw	r24, r26
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	e2 e1       	ldi	r30, 0x12	; 18
    1464:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__>

00001468 <__subsf3>:
    1468:	a0 e2       	ldi	r26, 0x20	; 32
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	fa e0       	ldi	r31, 0x0A	; 10
    1470:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__prologue_saves__+0x18>
    1474:	69 83       	std	Y+1, r22	; 0x01
    1476:	7a 83       	std	Y+2, r23	; 0x02
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	2d 83       	std	Y+5, r18	; 0x05
    147e:	3e 83       	std	Y+6, r19	; 0x06
    1480:	4f 83       	std	Y+7, r20	; 0x07
    1482:	58 87       	std	Y+8, r21	; 0x08
    1484:	e9 e0       	ldi	r30, 0x09	; 9
    1486:	ee 2e       	mov	r14, r30
    1488:	f1 2c       	mov	r15, r1
    148a:	ec 0e       	add	r14, r28
    148c:	fd 1e       	adc	r15, r29
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	b7 01       	movw	r22, r14
    1494:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    1498:	8e 01       	movw	r16, r28
    149a:	0f 5e       	subi	r16, 0xEF	; 239
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	ce 01       	movw	r24, r28
    14a0:	05 96       	adiw	r24, 0x05	; 5
    14a2:	b8 01       	movw	r22, r16
    14a4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    14a8:	8a 89       	ldd	r24, Y+18	; 0x12
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	89 27       	eor	r24, r25
    14ae:	8a 8b       	std	Y+18, r24	; 0x12
    14b0:	c7 01       	movw	r24, r14
    14b2:	b8 01       	movw	r22, r16
    14b4:	ae 01       	movw	r20, r28
    14b6:	47 5e       	subi	r20, 0xE7	; 231
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_fpadd_parts>
    14be:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__pack_f>
    14c2:	a0 96       	adiw	r28, 0x20	; 32
    14c4:	e6 e0       	ldi	r30, 0x06	; 6
    14c6:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__+0x18>

000014ca <__addsf3>:
    14ca:	a0 e2       	ldi	r26, 0x20	; 32
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e6       	ldi	r30, 0x6B	; 107
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__prologue_saves__+0x18>
    14d6:	69 83       	std	Y+1, r22	; 0x01
    14d8:	7a 83       	std	Y+2, r23	; 0x02
    14da:	8b 83       	std	Y+3, r24	; 0x03
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	2d 83       	std	Y+5, r18	; 0x05
    14e0:	3e 83       	std	Y+6, r19	; 0x06
    14e2:	4f 83       	std	Y+7, r20	; 0x07
    14e4:	58 87       	std	Y+8, r21	; 0x08
    14e6:	f9 e0       	ldi	r31, 0x09	; 9
    14e8:	ef 2e       	mov	r14, r31
    14ea:	f1 2c       	mov	r15, r1
    14ec:	ec 0e       	add	r14, r28
    14ee:	fd 1e       	adc	r15, r29
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	b7 01       	movw	r22, r14
    14f6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    14fa:	8e 01       	movw	r16, r28
    14fc:	0f 5e       	subi	r16, 0xEF	; 239
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	ce 01       	movw	r24, r28
    1502:	05 96       	adiw	r24, 0x05	; 5
    1504:	b8 01       	movw	r22, r16
    1506:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    150a:	c7 01       	movw	r24, r14
    150c:	b8 01       	movw	r22, r16
    150e:	ae 01       	movw	r20, r28
    1510:	47 5e       	subi	r20, 0xE7	; 231
    1512:	5f 4f       	sbci	r21, 0xFF	; 255
    1514:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_fpadd_parts>
    1518:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__pack_f>
    151c:	a0 96       	adiw	r28, 0x20	; 32
    151e:	e6 e0       	ldi	r30, 0x06	; 6
    1520:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__+0x18>

00001524 <__mulsf3>:
    1524:	a0 e2       	ldi	r26, 0x20	; 32
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e9       	ldi	r30, 0x98	; 152
    152a:	fa e0       	ldi	r31, 0x0A	; 10
    152c:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__>
    1530:	69 83       	std	Y+1, r22	; 0x01
    1532:	7a 83       	std	Y+2, r23	; 0x02
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	2d 83       	std	Y+5, r18	; 0x05
    153a:	3e 83       	std	Y+6, r19	; 0x06
    153c:	4f 83       	std	Y+7, r20	; 0x07
    153e:	58 87       	std	Y+8, r21	; 0x08
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	be 01       	movw	r22, r28
    1546:	67 5f       	subi	r22, 0xF7	; 247
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    154e:	ce 01       	movw	r24, r28
    1550:	05 96       	adiw	r24, 0x05	; 5
    1552:	be 01       	movw	r22, r28
    1554:	6f 5e       	subi	r22, 0xEF	; 239
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    155c:	99 85       	ldd	r25, Y+9	; 0x09
    155e:	92 30       	cpi	r25, 0x02	; 2
    1560:	88 f0       	brcs	.+34     	; 0x1584 <__mulsf3+0x60>
    1562:	89 89       	ldd	r24, Y+17	; 0x11
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	c8 f0       	brcs	.+50     	; 0x159a <__mulsf3+0x76>
    1568:	94 30       	cpi	r25, 0x04	; 4
    156a:	19 f4       	brne	.+6      	; 0x1572 <__mulsf3+0x4e>
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	51 f4       	brne	.+20     	; 0x1584 <__mulsf3+0x60>
    1570:	04 c0       	rjmp	.+8      	; 0x157a <__mulsf3+0x56>
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	29 f4       	brne	.+10     	; 0x1580 <__mulsf3+0x5c>
    1576:	92 30       	cpi	r25, 0x02	; 2
    1578:	81 f4       	brne	.+32     	; 0x159a <__mulsf3+0x76>
    157a:	8d e2       	ldi	r24, 0x2D	; 45
    157c:	92 e0       	ldi	r25, 0x02	; 2
    157e:	c6 c0       	rjmp	.+396    	; 0x170c <__mulsf3+0x1e8>
    1580:	92 30       	cpi	r25, 0x02	; 2
    1582:	49 f4       	brne	.+18     	; 0x1596 <__mulsf3+0x72>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	8a 89       	ldd	r24, Y+18	; 0x12
    158a:	98 13       	cpse	r25, r24
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	2a 87       	std	Y+10, r18	; 0x0a
    1590:	ce 01       	movw	r24, r28
    1592:	09 96       	adiw	r24, 0x09	; 9
    1594:	bb c0       	rjmp	.+374    	; 0x170c <__mulsf3+0x1e8>
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	49 f4       	brne	.+18     	; 0x15ac <__mulsf3+0x88>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	8a 89       	ldd	r24, Y+18	; 0x12
    15a0:	98 13       	cpse	r25, r24
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	2a 8b       	std	Y+18, r18	; 0x12
    15a6:	ce 01       	movw	r24, r28
    15a8:	41 96       	adiw	r24, 0x11	; 17
    15aa:	b0 c0       	rjmp	.+352    	; 0x170c <__mulsf3+0x1e8>
    15ac:	2d 84       	ldd	r2, Y+13	; 0x0d
    15ae:	3e 84       	ldd	r3, Y+14	; 0x0e
    15b0:	4f 84       	ldd	r4, Y+15	; 0x0f
    15b2:	58 88       	ldd	r5, Y+16	; 0x10
    15b4:	6d 88       	ldd	r6, Y+21	; 0x15
    15b6:	7e 88       	ldd	r7, Y+22	; 0x16
    15b8:	8f 88       	ldd	r8, Y+23	; 0x17
    15ba:	98 8c       	ldd	r9, Y+24	; 0x18
    15bc:	ee 24       	eor	r14, r14
    15be:	ff 24       	eor	r15, r15
    15c0:	87 01       	movw	r16, r14
    15c2:	aa 24       	eor	r10, r10
    15c4:	bb 24       	eor	r11, r11
    15c6:	65 01       	movw	r12, r10
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	e0 e0       	ldi	r30, 0x00	; 0
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	c1 01       	movw	r24, r2
    15d6:	81 70       	andi	r24, 0x01	; 1
    15d8:	90 70       	andi	r25, 0x00	; 0
    15da:	89 2b       	or	r24, r25
    15dc:	e9 f0       	breq	.+58     	; 0x1618 <__mulsf3+0xf4>
    15de:	e6 0c       	add	r14, r6
    15e0:	f7 1c       	adc	r15, r7
    15e2:	08 1d       	adc	r16, r8
    15e4:	19 1d       	adc	r17, r9
    15e6:	9a 01       	movw	r18, r20
    15e8:	ab 01       	movw	r20, r22
    15ea:	2a 0d       	add	r18, r10
    15ec:	3b 1d       	adc	r19, r11
    15ee:	4c 1d       	adc	r20, r12
    15f0:	5d 1d       	adc	r21, r13
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e6 14       	cp	r14, r6
    15fc:	f7 04       	cpc	r15, r7
    15fe:	08 05       	cpc	r16, r8
    1600:	19 05       	cpc	r17, r9
    1602:	20 f4       	brcc	.+8      	; 0x160c <__mulsf3+0xe8>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e0       	ldi	r26, 0x00	; 0
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ba 01       	movw	r22, r20
    160e:	a9 01       	movw	r20, r18
    1610:	48 0f       	add	r20, r24
    1612:	59 1f       	adc	r21, r25
    1614:	6a 1f       	adc	r22, r26
    1616:	7b 1f       	adc	r23, r27
    1618:	aa 0c       	add	r10, r10
    161a:	bb 1c       	adc	r11, r11
    161c:	cc 1c       	adc	r12, r12
    161e:	dd 1c       	adc	r13, r13
    1620:	97 fe       	sbrs	r9, 7
    1622:	08 c0       	rjmp	.+16     	; 0x1634 <__mulsf3+0x110>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	a8 2a       	or	r10, r24
    162e:	b9 2a       	or	r11, r25
    1630:	ca 2a       	or	r12, r26
    1632:	db 2a       	or	r13, r27
    1634:	31 96       	adiw	r30, 0x01	; 1
    1636:	e0 32       	cpi	r30, 0x20	; 32
    1638:	f1 05       	cpc	r31, r1
    163a:	49 f0       	breq	.+18     	; 0x164e <__mulsf3+0x12a>
    163c:	66 0c       	add	r6, r6
    163e:	77 1c       	adc	r7, r7
    1640:	88 1c       	adc	r8, r8
    1642:	99 1c       	adc	r9, r9
    1644:	56 94       	lsr	r5
    1646:	47 94       	ror	r4
    1648:	37 94       	ror	r3
    164a:	27 94       	ror	r2
    164c:	c3 cf       	rjmp	.-122    	; 0x15d4 <__mulsf3+0xb0>
    164e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1650:	ea 89       	ldd	r30, Y+18	; 0x12
    1652:	2b 89       	ldd	r18, Y+19	; 0x13
    1654:	3c 89       	ldd	r19, Y+20	; 0x14
    1656:	8b 85       	ldd	r24, Y+11	; 0x0b
    1658:	9c 85       	ldd	r25, Y+12	; 0x0c
    165a:	28 0f       	add	r18, r24
    165c:	39 1f       	adc	r19, r25
    165e:	2e 5f       	subi	r18, 0xFE	; 254
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <__mulsf3+0x16e>
    1664:	ca 01       	movw	r24, r20
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	90 70       	andi	r25, 0x00	; 0
    166a:	89 2b       	or	r24, r25
    166c:	61 f0       	breq	.+24     	; 0x1686 <__mulsf3+0x162>
    166e:	16 95       	lsr	r17
    1670:	07 95       	ror	r16
    1672:	f7 94       	ror	r15
    1674:	e7 94       	ror	r14
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e8       	ldi	r27, 0x80	; 128
    167e:	e8 2a       	or	r14, r24
    1680:	f9 2a       	or	r15, r25
    1682:	0a 2b       	or	r16, r26
    1684:	1b 2b       	or	r17, r27
    1686:	76 95       	lsr	r23
    1688:	67 95       	ror	r22
    168a:	57 95       	ror	r21
    168c:	47 95       	ror	r20
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	77 fd       	sbrc	r23, 7
    1694:	e7 cf       	rjmp	.-50     	; 0x1664 <__mulsf3+0x140>
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <__mulsf3+0x18c>
    1698:	44 0f       	add	r20, r20
    169a:	55 1f       	adc	r21, r21
    169c:	66 1f       	adc	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	17 fd       	sbrc	r17, 7
    16a2:	41 60       	ori	r20, 0x01	; 1
    16a4:	ee 0c       	add	r14, r14
    16a6:	ff 1c       	adc	r15, r15
    16a8:	00 1f       	adc	r16, r16
    16aa:	11 1f       	adc	r17, r17
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	30 40       	sbci	r19, 0x00	; 0
    16b0:	40 30       	cpi	r20, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	59 07       	cpc	r21, r25
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	69 07       	cpc	r22, r25
    16ba:	90 e4       	ldi	r25, 0x40	; 64
    16bc:	79 07       	cpc	r23, r25
    16be:	60 f3       	brcs	.-40     	; 0x1698 <__mulsf3+0x174>
    16c0:	2b 8f       	std	Y+27, r18	; 0x1b
    16c2:	3c 8f       	std	Y+28, r19	; 0x1c
    16c4:	db 01       	movw	r26, r22
    16c6:	ca 01       	movw	r24, r20
    16c8:	8f 77       	andi	r24, 0x7F	; 127
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	a0 70       	andi	r26, 0x00	; 0
    16ce:	b0 70       	andi	r27, 0x00	; 0
    16d0:	80 34       	cpi	r24, 0x40	; 64
    16d2:	91 05       	cpc	r25, r1
    16d4:	a1 05       	cpc	r26, r1
    16d6:	b1 05       	cpc	r27, r1
    16d8:	61 f4       	brne	.+24     	; 0x16f2 <__mulsf3+0x1ce>
    16da:	47 fd       	sbrc	r20, 7
    16dc:	0a c0       	rjmp	.+20     	; 0x16f2 <__mulsf3+0x1ce>
    16de:	e1 14       	cp	r14, r1
    16e0:	f1 04       	cpc	r15, r1
    16e2:	01 05       	cpc	r16, r1
    16e4:	11 05       	cpc	r17, r1
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <__mulsf3+0x1ce>
    16e8:	40 5c       	subi	r20, 0xC0	; 192
    16ea:	5f 4f       	sbci	r21, 0xFF	; 255
    16ec:	6f 4f       	sbci	r22, 0xFF	; 255
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	40 78       	andi	r20, 0x80	; 128
    16f2:	1a 8e       	std	Y+26, r1	; 0x1a
    16f4:	fe 17       	cp	r31, r30
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__mulsf3+0x1d8>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	8a 8f       	std	Y+26, r24	; 0x1a
    16fc:	4d 8f       	std	Y+29, r20	; 0x1d
    16fe:	5e 8f       	std	Y+30, r21	; 0x1e
    1700:	6f 8f       	std	Y+31, r22	; 0x1f
    1702:	78 a3       	std	Y+32, r23	; 0x20
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	89 8f       	std	Y+25, r24	; 0x19
    1708:	ce 01       	movw	r24, r28
    170a:	49 96       	adiw	r24, 0x19	; 25
    170c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__pack_f>
    1710:	a0 96       	adiw	r28, 0x20	; 32
    1712:	e2 e1       	ldi	r30, 0x12	; 18
    1714:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__>

00001718 <__gesf2>:
    1718:	a8 e1       	ldi	r26, 0x18	; 24
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e9       	ldi	r30, 0x92	; 146
    171e:	fb e0       	ldi	r31, 0x0B	; 11
    1720:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__prologue_saves__+0x18>
    1724:	69 83       	std	Y+1, r22	; 0x01
    1726:	7a 83       	std	Y+2, r23	; 0x02
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	2d 83       	std	Y+5, r18	; 0x05
    172e:	3e 83       	std	Y+6, r19	; 0x06
    1730:	4f 83       	std	Y+7, r20	; 0x07
    1732:	58 87       	std	Y+8, r21	; 0x08
    1734:	89 e0       	ldi	r24, 0x09	; 9
    1736:	e8 2e       	mov	r14, r24
    1738:	f1 2c       	mov	r15, r1
    173a:	ec 0e       	add	r14, r28
    173c:	fd 1e       	adc	r15, r29
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	b7 01       	movw	r22, r14
    1744:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    1748:	8e 01       	movw	r16, r28
    174a:	0f 5e       	subi	r16, 0xEF	; 239
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	ce 01       	movw	r24, r28
    1750:	05 96       	adiw	r24, 0x05	; 5
    1752:	b8 01       	movw	r22, r16
    1754:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	40 f0       	brcs	.+16     	; 0x176e <__gesf2+0x56>
    175e:	89 89       	ldd	r24, Y+17	; 0x11
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	28 f0       	brcs	.+10     	; 0x176e <__gesf2+0x56>
    1764:	c7 01       	movw	r24, r14
    1766:	b8 01       	movw	r22, r16
    1768:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__fpcmp_parts_f>
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <__gesf2+0x58>
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	68 96       	adiw	r28, 0x18	; 24
    1772:	e6 e0       	ldi	r30, 0x06	; 6
    1774:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__+0x18>

00001778 <__fixsfsi>:
    1778:	ac e0       	ldi	r26, 0x0C	; 12
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 ec       	ldi	r30, 0xC2	; 194
    177e:	fb e0       	ldi	r31, 0x0B	; 11
    1780:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__prologue_saves__+0x20>
    1784:	69 83       	std	Y+1, r22	; 0x01
    1786:	7a 83       	std	Y+2, r23	; 0x02
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	be 01       	movw	r22, r28
    1792:	6b 5f       	subi	r22, 0xFB	; 251
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__unpack_f>
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	61 f1       	breq	.+88     	; 0x17f8 <__fixsfsi+0x80>
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	50 f1       	brcs	.+84     	; 0x17f8 <__fixsfsi+0x80>
    17a4:	84 30       	cpi	r24, 0x04	; 4
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <__fixsfsi+0x38>
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	88 23       	and	r24, r24
    17ac:	51 f1       	breq	.+84     	; 0x1802 <__fixsfsi+0x8a>
    17ae:	2e c0       	rjmp	.+92     	; 0x180c <__fixsfsi+0x94>
    17b0:	2f 81       	ldd	r18, Y+7	; 0x07
    17b2:	38 85       	ldd	r19, Y+8	; 0x08
    17b4:	37 fd       	sbrc	r19, 7
    17b6:	20 c0       	rjmp	.+64     	; 0x17f8 <__fixsfsi+0x80>
    17b8:	6e 81       	ldd	r22, Y+6	; 0x06
    17ba:	2f 31       	cpi	r18, 0x1F	; 31
    17bc:	31 05       	cpc	r19, r1
    17be:	1c f0       	brlt	.+6      	; 0x17c6 <__fixsfsi+0x4e>
    17c0:	66 23       	and	r22, r22
    17c2:	f9 f0       	breq	.+62     	; 0x1802 <__fixsfsi+0x8a>
    17c4:	23 c0       	rjmp	.+70     	; 0x180c <__fixsfsi+0x94>
    17c6:	8e e1       	ldi	r24, 0x1E	; 30
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 1b       	sub	r24, r18
    17cc:	93 0b       	sbc	r25, r19
    17ce:	29 85       	ldd	r18, Y+9	; 0x09
    17d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    17d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <__fixsfsi+0x68>
    17d8:	56 95       	lsr	r21
    17da:	47 95       	ror	r20
    17dc:	37 95       	ror	r19
    17de:	27 95       	ror	r18
    17e0:	8a 95       	dec	r24
    17e2:	d2 f7       	brpl	.-12     	; 0x17d8 <__fixsfsi+0x60>
    17e4:	66 23       	and	r22, r22
    17e6:	b1 f0       	breq	.+44     	; 0x1814 <__fixsfsi+0x9c>
    17e8:	50 95       	com	r21
    17ea:	40 95       	com	r20
    17ec:	30 95       	com	r19
    17ee:	21 95       	neg	r18
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	4f 4f       	sbci	r20, 0xFF	; 255
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <__fixsfsi+0x9c>
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <__fixsfsi+0x9c>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f ef       	ldi	r20, 0xFF	; 255
    1808:	5f e7       	ldi	r21, 0x7F	; 127
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <__fixsfsi+0x9c>
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	50 e8       	ldi	r21, 0x80	; 128
    1814:	b9 01       	movw	r22, r18
    1816:	ca 01       	movw	r24, r20
    1818:	2c 96       	adiw	r28, 0x0c	; 12
    181a:	e2 e0       	ldi	r30, 0x02	; 2
    181c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__epilogue_restores__+0x20>

00001820 <__floatunsisf>:
    1820:	a8 e0       	ldi	r26, 0x08	; 8
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e6 e1       	ldi	r30, 0x16	; 22
    1826:	fc e0       	ldi	r31, 0x0C	; 12
    1828:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__prologue_saves__+0x10>
    182c:	7b 01       	movw	r14, r22
    182e:	8c 01       	movw	r16, r24
    1830:	61 15       	cp	r22, r1
    1832:	71 05       	cpc	r23, r1
    1834:	81 05       	cpc	r24, r1
    1836:	91 05       	cpc	r25, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__floatunsisf+0x20>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	60 c0       	rjmp	.+192    	; 0x1900 <__floatunsisf+0xe0>
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	8e e1       	ldi	r24, 0x1E	; 30
    1846:	c8 2e       	mov	r12, r24
    1848:	d1 2c       	mov	r13, r1
    184a:	dc 82       	std	Y+4, r13	; 0x04
    184c:	cb 82       	std	Y+3, r12	; 0x03
    184e:	ed 82       	std	Y+5, r14	; 0x05
    1850:	fe 82       	std	Y+6, r15	; 0x06
    1852:	0f 83       	std	Y+7, r16	; 0x07
    1854:	18 87       	std	Y+8, r17	; 0x08
    1856:	c8 01       	movw	r24, r16
    1858:	b7 01       	movw	r22, r14
    185a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__clzsi2>
    185e:	fc 01       	movw	r30, r24
    1860:	31 97       	sbiw	r30, 0x01	; 1
    1862:	f7 ff       	sbrs	r31, 7
    1864:	3b c0       	rjmp	.+118    	; 0x18dc <__floatunsisf+0xbc>
    1866:	22 27       	eor	r18, r18
    1868:	33 27       	eor	r19, r19
    186a:	2e 1b       	sub	r18, r30
    186c:	3f 0b       	sbc	r19, r31
    186e:	57 01       	movw	r10, r14
    1870:	68 01       	movw	r12, r16
    1872:	02 2e       	mov	r0, r18
    1874:	04 c0       	rjmp	.+8      	; 0x187e <__floatunsisf+0x5e>
    1876:	d6 94       	lsr	r13
    1878:	c7 94       	ror	r12
    187a:	b7 94       	ror	r11
    187c:	a7 94       	ror	r10
    187e:	0a 94       	dec	r0
    1880:	d2 f7       	brpl	.-12     	; 0x1876 <__floatunsisf+0x56>
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	04 c0       	rjmp	.+8      	; 0x189c <__floatunsisf+0x7c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	aa 1f       	adc	r26, r26
    189a:	bb 1f       	adc	r27, r27
    189c:	2a 95       	dec	r18
    189e:	d2 f7       	brpl	.-12     	; 0x1894 <__floatunsisf+0x74>
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	a1 09       	sbc	r26, r1
    18a4:	b1 09       	sbc	r27, r1
    18a6:	8e 21       	and	r24, r14
    18a8:	9f 21       	and	r25, r15
    18aa:	a0 23       	and	r26, r16
    18ac:	b1 23       	and	r27, r17
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	a1 05       	cpc	r26, r1
    18b2:	b1 05       	cpc	r27, r1
    18b4:	21 f0       	breq	.+8      	; 0x18be <__floatunsisf+0x9e>
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	4a 29       	or	r20, r10
    18c0:	5b 29       	or	r21, r11
    18c2:	6c 29       	or	r22, r12
    18c4:	7d 29       	or	r23, r13
    18c6:	4d 83       	std	Y+5, r20	; 0x05
    18c8:	5e 83       	std	Y+6, r21	; 0x06
    18ca:	6f 83       	std	Y+7, r22	; 0x07
    18cc:	78 87       	std	Y+8, r23	; 0x08
    18ce:	8e e1       	ldi	r24, 0x1E	; 30
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	8e 1b       	sub	r24, r30
    18d4:	9f 0b       	sbc	r25, r31
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    18da:	12 c0       	rjmp	.+36     	; 0x1900 <__floatunsisf+0xe0>
    18dc:	30 97       	sbiw	r30, 0x00	; 0
    18de:	81 f0       	breq	.+32     	; 0x1900 <__floatunsisf+0xe0>
    18e0:	0e 2e       	mov	r0, r30
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <__floatunsisf+0xcc>
    18e4:	ee 0c       	add	r14, r14
    18e6:	ff 1c       	adc	r15, r15
    18e8:	00 1f       	adc	r16, r16
    18ea:	11 1f       	adc	r17, r17
    18ec:	0a 94       	dec	r0
    18ee:	d2 f7       	brpl	.-12     	; 0x18e4 <__floatunsisf+0xc4>
    18f0:	ed 82       	std	Y+5, r14	; 0x05
    18f2:	fe 82       	std	Y+6, r15	; 0x06
    18f4:	0f 83       	std	Y+7, r16	; 0x07
    18f6:	18 87       	std	Y+8, r17	; 0x08
    18f8:	ce 1a       	sub	r12, r30
    18fa:	df 0a       	sbc	r13, r31
    18fc:	dc 82       	std	Y+4, r13	; 0x04
    18fe:	cb 82       	std	Y+3, r12	; 0x03
    1900:	1a 82       	std	Y+2, r1	; 0x02
    1902:	ce 01       	movw	r24, r28
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__pack_f>
    190a:	28 96       	adiw	r28, 0x08	; 8
    190c:	ea e0       	ldi	r30, 0x0A	; 10
    190e:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__epilogue_restores__+0x10>

00001912 <__clzsi2>:
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	7b 01       	movw	r14, r22
    191c:	8c 01       	movw	r16, r24
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	e8 16       	cp	r14, r24
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	f8 06       	cpc	r15, r24
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	08 07       	cpc	r16, r24
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	18 07       	cpc	r17, r24
    192e:	88 f4       	brcc	.+34     	; 0x1952 <__clzsi2+0x40>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	e8 16       	cp	r14, r24
    1934:	f1 04       	cpc	r15, r1
    1936:	01 05       	cpc	r16, r1
    1938:	11 05       	cpc	r17, r1
    193a:	31 f0       	breq	.+12     	; 0x1948 <__clzsi2+0x36>
    193c:	28 f0       	brcs	.+10     	; 0x1948 <__clzsi2+0x36>
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e0       	ldi	r26, 0x00	; 0
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	17 c0       	rjmp	.+46     	; 0x1976 <__clzsi2+0x64>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	12 c0       	rjmp	.+36     	; 0x1976 <__clzsi2+0x64>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	e8 16       	cp	r14, r24
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	f8 06       	cpc	r15, r24
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	08 07       	cpc	r16, r24
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	18 07       	cpc	r17, r24
    1962:	28 f0       	brcs	.+10     	; 0x196e <__clzsi2+0x5c>
    1964:	88 e1       	ldi	r24, 0x18	; 24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <__clzsi2+0x64>
    196e:	80 e1       	ldi	r24, 0x10	; 16
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	20 e2       	ldi	r18, 0x20	; 32
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	28 1b       	sub	r18, r24
    1980:	39 0b       	sbc	r19, r25
    1982:	4a 0b       	sbc	r20, r26
    1984:	5b 0b       	sbc	r21, r27
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <__clzsi2+0x7e>
    1988:	16 95       	lsr	r17
    198a:	07 95       	ror	r16
    198c:	f7 94       	ror	r15
    198e:	e7 94       	ror	r14
    1990:	8a 95       	dec	r24
    1992:	d2 f7       	brpl	.-12     	; 0x1988 <__clzsi2+0x76>
    1994:	f7 01       	movw	r30, r14
    1996:	eb 5c       	subi	r30, 0xCB	; 203
    1998:	fd 4f       	sbci	r31, 0xFD	; 253
    199a:	80 81       	ld	r24, Z
    199c:	28 1b       	sub	r18, r24
    199e:	31 09       	sbc	r19, r1
    19a0:	41 09       	sbc	r20, r1
    19a2:	51 09       	sbc	r21, r1
    19a4:	c9 01       	movw	r24, r18
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <__pack_f>:
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	fc 01       	movw	r30, r24
    19bc:	e4 80       	ldd	r14, Z+4	; 0x04
    19be:	f5 80       	ldd	r15, Z+5	; 0x05
    19c0:	06 81       	ldd	r16, Z+6	; 0x06
    19c2:	17 81       	ldd	r17, Z+7	; 0x07
    19c4:	d1 80       	ldd	r13, Z+1	; 0x01
    19c6:	80 81       	ld	r24, Z
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	48 f4       	brcc	.+18     	; 0x19de <__pack_f+0x2e>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a0 e1       	ldi	r26, 0x10	; 16
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e8 2a       	or	r14, r24
    19d6:	f9 2a       	or	r15, r25
    19d8:	0a 2b       	or	r16, r26
    19da:	1b 2b       	or	r17, r27
    19dc:	a5 c0       	rjmp	.+330    	; 0x1b28 <__pack_f+0x178>
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <__pack_f+0x34>
    19e2:	9f c0       	rjmp	.+318    	; 0x1b22 <__pack_f+0x172>
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <__pack_f+0x40>
    19e8:	ee 24       	eor	r14, r14
    19ea:	ff 24       	eor	r15, r15
    19ec:	87 01       	movw	r16, r14
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <__pack_f+0x4a>
    19f0:	e1 14       	cp	r14, r1
    19f2:	f1 04       	cpc	r15, r1
    19f4:	01 05       	cpc	r16, r1
    19f6:	11 05       	cpc	r17, r1
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <__pack_f+0x50>
    19fa:	e0 e0       	ldi	r30, 0x00	; 0
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	96 c0       	rjmp	.+300    	; 0x1b2c <__pack_f+0x17c>
    1a00:	62 81       	ldd	r22, Z+2	; 0x02
    1a02:	73 81       	ldd	r23, Z+3	; 0x03
    1a04:	9f ef       	ldi	r25, 0xFF	; 255
    1a06:	62 38       	cpi	r22, 0x82	; 130
    1a08:	79 07       	cpc	r23, r25
    1a0a:	0c f0       	brlt	.+2      	; 0x1a0e <__pack_f+0x5e>
    1a0c:	5b c0       	rjmp	.+182    	; 0x1ac4 <__pack_f+0x114>
    1a0e:	22 e8       	ldi	r18, 0x82	; 130
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	26 1b       	sub	r18, r22
    1a14:	37 0b       	sbc	r19, r23
    1a16:	2a 31       	cpi	r18, 0x1A	; 26
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f0       	brlt	.+10     	; 0x1a26 <__pack_f+0x76>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	2a c0       	rjmp	.+84     	; 0x1a7a <__pack_f+0xca>
    1a26:	b8 01       	movw	r22, r16
    1a28:	a7 01       	movw	r20, r14
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <__pack_f+0x86>
    1a2e:	76 95       	lsr	r23
    1a30:	67 95       	ror	r22
    1a32:	57 95       	ror	r21
    1a34:	47 95       	ror	r20
    1a36:	0a 94       	dec	r0
    1a38:	d2 f7       	brpl	.-12     	; 0x1a2e <__pack_f+0x7e>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <__pack_f+0x9c>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	bb 1f       	adc	r27, r27
    1a4c:	2a 95       	dec	r18
    1a4e:	d2 f7       	brpl	.-12     	; 0x1a44 <__pack_f+0x94>
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	a1 09       	sbc	r26, r1
    1a54:	b1 09       	sbc	r27, r1
    1a56:	8e 21       	and	r24, r14
    1a58:	9f 21       	and	r25, r15
    1a5a:	a0 23       	and	r26, r16
    1a5c:	b1 23       	and	r27, r17
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	a1 05       	cpc	r26, r1
    1a62:	b1 05       	cpc	r27, r1
    1a64:	21 f0       	breq	.+8      	; 0x1a6e <__pack_f+0xbe>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	9a 01       	movw	r18, r20
    1a70:	ab 01       	movw	r20, r22
    1a72:	28 2b       	or	r18, r24
    1a74:	39 2b       	or	r19, r25
    1a76:	4a 2b       	or	r20, r26
    1a78:	5b 2b       	or	r21, r27
    1a7a:	da 01       	movw	r26, r20
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	8f 77       	andi	r24, 0x7F	; 127
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	a0 70       	andi	r26, 0x00	; 0
    1a84:	b0 70       	andi	r27, 0x00	; 0
    1a86:	80 34       	cpi	r24, 0x40	; 64
    1a88:	91 05       	cpc	r25, r1
    1a8a:	a1 05       	cpc	r26, r1
    1a8c:	b1 05       	cpc	r27, r1
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <__pack_f+0xee>
    1a90:	27 ff       	sbrs	r18, 7
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <__pack_f+0xf6>
    1a94:	20 5c       	subi	r18, 0xC0	; 192
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	4f 4f       	sbci	r20, 0xFF	; 255
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__pack_f+0xf6>
    1a9e:	21 5c       	subi	r18, 0xC1	; 193
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa6:	e0 e0       	ldi	r30, 0x00	; 0
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	20 30       	cpi	r18, 0x00	; 0
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	3a 07       	cpc	r19, r26
    1ab0:	a0 e0       	ldi	r26, 0x00	; 0
    1ab2:	4a 07       	cpc	r20, r26
    1ab4:	a0 e4       	ldi	r26, 0x40	; 64
    1ab6:	5a 07       	cpc	r21, r26
    1ab8:	10 f0       	brcs	.+4      	; 0x1abe <__pack_f+0x10e>
    1aba:	e1 e0       	ldi	r30, 0x01	; 1
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	79 01       	movw	r14, r18
    1ac0:	8a 01       	movw	r16, r20
    1ac2:	27 c0       	rjmp	.+78     	; 0x1b12 <__pack_f+0x162>
    1ac4:	60 38       	cpi	r22, 0x80	; 128
    1ac6:	71 05       	cpc	r23, r1
    1ac8:	64 f5       	brge	.+88     	; 0x1b22 <__pack_f+0x172>
    1aca:	fb 01       	movw	r30, r22
    1acc:	e1 58       	subi	r30, 0x81	; 129
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	d8 01       	movw	r26, r16
    1ad2:	c7 01       	movw	r24, r14
    1ad4:	8f 77       	andi	r24, 0x7F	; 127
    1ad6:	90 70       	andi	r25, 0x00	; 0
    1ad8:	a0 70       	andi	r26, 0x00	; 0
    1ada:	b0 70       	andi	r27, 0x00	; 0
    1adc:	80 34       	cpi	r24, 0x40	; 64
    1ade:	91 05       	cpc	r25, r1
    1ae0:	a1 05       	cpc	r26, r1
    1ae2:	b1 05       	cpc	r27, r1
    1ae4:	39 f4       	brne	.+14     	; 0x1af4 <__pack_f+0x144>
    1ae6:	e7 fe       	sbrs	r14, 7
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <__pack_f+0x154>
    1aea:	80 e4       	ldi	r24, 0x40	; 64
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <__pack_f+0x14c>
    1af4:	8f e3       	ldi	r24, 0x3F	; 63
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 0e       	add	r14, r24
    1afe:	f9 1e       	adc	r15, r25
    1b00:	0a 1f       	adc	r16, r26
    1b02:	1b 1f       	adc	r17, r27
    1b04:	17 ff       	sbrs	r17, 7
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <__pack_f+0x162>
    1b08:	16 95       	lsr	r17
    1b0a:	07 95       	ror	r16
    1b0c:	f7 94       	ror	r15
    1b0e:	e7 94       	ror	r14
    1b10:	31 96       	adiw	r30, 0x01	; 1
    1b12:	87 e0       	ldi	r24, 0x07	; 7
    1b14:	16 95       	lsr	r17
    1b16:	07 95       	ror	r16
    1b18:	f7 94       	ror	r15
    1b1a:	e7 94       	ror	r14
    1b1c:	8a 95       	dec	r24
    1b1e:	d1 f7       	brne	.-12     	; 0x1b14 <__pack_f+0x164>
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <__pack_f+0x17c>
    1b22:	ee 24       	eor	r14, r14
    1b24:	ff 24       	eor	r15, r15
    1b26:	87 01       	movw	r16, r14
    1b28:	ef ef       	ldi	r30, 0xFF	; 255
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	6e 2f       	mov	r22, r30
    1b2e:	67 95       	ror	r22
    1b30:	66 27       	eor	r22, r22
    1b32:	67 95       	ror	r22
    1b34:	90 2f       	mov	r25, r16
    1b36:	9f 77       	andi	r25, 0x7F	; 127
    1b38:	d7 94       	ror	r13
    1b3a:	dd 24       	eor	r13, r13
    1b3c:	d7 94       	ror	r13
    1b3e:	8e 2f       	mov	r24, r30
    1b40:	86 95       	lsr	r24
    1b42:	49 2f       	mov	r20, r25
    1b44:	46 2b       	or	r20, r22
    1b46:	58 2f       	mov	r21, r24
    1b48:	5d 29       	or	r21, r13
    1b4a:	b7 01       	movw	r22, r14
    1b4c:	ca 01       	movw	r24, r20
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	08 95       	ret

00001b5a <__unpack_f>:
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	db 01       	movw	r26, r22
    1b5e:	40 81       	ld	r20, Z
    1b60:	51 81       	ldd	r21, Z+1	; 0x01
    1b62:	22 81       	ldd	r18, Z+2	; 0x02
    1b64:	62 2f       	mov	r22, r18
    1b66:	6f 77       	andi	r22, 0x7F	; 127
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	22 1f       	adc	r18, r18
    1b6c:	22 27       	eor	r18, r18
    1b6e:	22 1f       	adc	r18, r18
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	89 2f       	mov	r24, r25
    1b74:	88 0f       	add	r24, r24
    1b76:	82 2b       	or	r24, r18
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	99 27       	eor	r25, r25
    1b80:	99 1f       	adc	r25, r25
    1b82:	11 96       	adiw	r26, 0x01	; 1
    1b84:	9c 93       	st	X, r25
    1b86:	11 97       	sbiw	r26, 0x01	; 1
    1b88:	21 15       	cp	r18, r1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	a9 f5       	brne	.+106    	; 0x1bf8 <__unpack_f+0x9e>
    1b8e:	41 15       	cp	r20, r1
    1b90:	51 05       	cpc	r21, r1
    1b92:	61 05       	cpc	r22, r1
    1b94:	71 05       	cpc	r23, r1
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <__unpack_f+0x42>
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	37 c0       	rjmp	.+110    	; 0x1c0a <__unpack_f+0xb0>
    1b9c:	82 e8       	ldi	r24, 0x82	; 130
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	13 96       	adiw	r26, 0x03	; 3
    1ba2:	9c 93       	st	X, r25
    1ba4:	8e 93       	st	-X, r24
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	9a 01       	movw	r18, r20
    1baa:	ab 01       	movw	r20, r22
    1bac:	67 e0       	ldi	r22, 0x07	; 7
    1bae:	22 0f       	add	r18, r18
    1bb0:	33 1f       	adc	r19, r19
    1bb2:	44 1f       	adc	r20, r20
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	6a 95       	dec	r22
    1bb8:	d1 f7       	brne	.-12     	; 0x1bae <__unpack_f+0x54>
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	8c 93       	st	X, r24
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <__unpack_f+0x80>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	12 96       	adiw	r26, 0x02	; 2
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	13 97       	sbiw	r26, 0x03	; 3
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	9c 93       	st	X, r25
    1bd6:	8e 93       	st	-X, r24
    1bd8:	12 97       	sbiw	r26, 0x02	; 2
    1bda:	20 30       	cpi	r18, 0x00	; 0
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	38 07       	cpc	r19, r24
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	48 07       	cpc	r20, r24
    1be4:	80 e4       	ldi	r24, 0x40	; 64
    1be6:	58 07       	cpc	r21, r24
    1be8:	58 f3       	brcs	.-42     	; 0x1bc0 <__unpack_f+0x66>
    1bea:	14 96       	adiw	r26, 0x04	; 4
    1bec:	2d 93       	st	X+, r18
    1bee:	3d 93       	st	X+, r19
    1bf0:	4d 93       	st	X+, r20
    1bf2:	5c 93       	st	X, r21
    1bf4:	17 97       	sbiw	r26, 0x07	; 7
    1bf6:	08 95       	ret
    1bf8:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	79 f4       	brne	.+30     	; 0x1c1c <__unpack_f+0xc2>
    1bfe:	41 15       	cp	r20, r1
    1c00:	51 05       	cpc	r21, r1
    1c02:	61 05       	cpc	r22, r1
    1c04:	71 05       	cpc	r23, r1
    1c06:	19 f4       	brne	.+6      	; 0x1c0e <__unpack_f+0xb4>
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	8c 93       	st	X, r24
    1c0c:	08 95       	ret
    1c0e:	64 ff       	sbrs	r22, 4
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <__unpack_f+0xbe>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8c 93       	st	X, r24
    1c16:	12 c0       	rjmp	.+36     	; 0x1c3c <__unpack_f+0xe2>
    1c18:	1c 92       	st	X, r1
    1c1a:	10 c0       	rjmp	.+32     	; 0x1c3c <__unpack_f+0xe2>
    1c1c:	2f 57       	subi	r18, 0x7F	; 127
    1c1e:	30 40       	sbci	r19, 0x00	; 0
    1c20:	13 96       	adiw	r26, 0x03	; 3
    1c22:	3c 93       	st	X, r19
    1c24:	2e 93       	st	-X, r18
    1c26:	12 97       	sbiw	r26, 0x02	; 2
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	8c 93       	st	X, r24
    1c2c:	87 e0       	ldi	r24, 0x07	; 7
    1c2e:	44 0f       	add	r20, r20
    1c30:	55 1f       	adc	r21, r21
    1c32:	66 1f       	adc	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	8a 95       	dec	r24
    1c38:	d1 f7       	brne	.-12     	; 0x1c2e <__unpack_f+0xd4>
    1c3a:	70 64       	ori	r23, 0x40	; 64
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	4d 93       	st	X+, r20
    1c40:	5d 93       	st	X+, r21
    1c42:	6d 93       	st	X+, r22
    1c44:	7c 93       	st	X, r23
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	08 95       	ret

00001c4a <__fpcmp_parts_f>:
    1c4a:	1f 93       	push	r17
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	fb 01       	movw	r30, r22
    1c50:	9c 91       	ld	r25, X
    1c52:	92 30       	cpi	r25, 0x02	; 2
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <__fpcmp_parts_f+0xe>
    1c56:	47 c0       	rjmp	.+142    	; 0x1ce6 <__fpcmp_parts_f+0x9c>
    1c58:	80 81       	ld	r24, Z
    1c5a:	82 30       	cpi	r24, 0x02	; 2
    1c5c:	08 f4       	brcc	.+2      	; 0x1c60 <__fpcmp_parts_f+0x16>
    1c5e:	43 c0       	rjmp	.+134    	; 0x1ce6 <__fpcmp_parts_f+0x9c>
    1c60:	94 30       	cpi	r25, 0x04	; 4
    1c62:	51 f4       	brne	.+20     	; 0x1c78 <__fpcmp_parts_f+0x2e>
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	1c 91       	ld	r17, X
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	99 f5       	brne	.+102    	; 0x1cd2 <__fpcmp_parts_f+0x88>
    1c6c:	81 81       	ldd	r24, Z+1	; 0x01
    1c6e:	68 2f       	mov	r22, r24
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	61 1b       	sub	r22, r17
    1c74:	71 09       	sbc	r23, r1
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <__fpcmp_parts_f+0xac>
    1c78:	84 30       	cpi	r24, 0x04	; 4
    1c7a:	21 f0       	breq	.+8      	; 0x1c84 <__fpcmp_parts_f+0x3a>
    1c7c:	92 30       	cpi	r25, 0x02	; 2
    1c7e:	31 f4       	brne	.+12     	; 0x1c8c <__fpcmp_parts_f+0x42>
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	b9 f1       	breq	.+110    	; 0x1cf2 <__fpcmp_parts_f+0xa8>
    1c84:	81 81       	ldd	r24, Z+1	; 0x01
    1c86:	88 23       	and	r24, r24
    1c88:	89 f1       	breq	.+98     	; 0x1cec <__fpcmp_parts_f+0xa2>
    1c8a:	2d c0       	rjmp	.+90     	; 0x1ce6 <__fpcmp_parts_f+0x9c>
    1c8c:	11 96       	adiw	r26, 0x01	; 1
    1c8e:	1c 91       	ld	r17, X
    1c90:	11 97       	sbiw	r26, 0x01	; 1
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	f1 f0       	breq	.+60     	; 0x1cd2 <__fpcmp_parts_f+0x88>
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	18 17       	cp	r17, r24
    1c9a:	d9 f4       	brne	.+54     	; 0x1cd2 <__fpcmp_parts_f+0x88>
    1c9c:	12 96       	adiw	r26, 0x02	; 2
    1c9e:	2d 91       	ld	r18, X+
    1ca0:	3c 91       	ld	r19, X
    1ca2:	13 97       	sbiw	r26, 0x03	; 3
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	82 17       	cp	r24, r18
    1caa:	93 07       	cpc	r25, r19
    1cac:	94 f0       	brlt	.+36     	; 0x1cd2 <__fpcmp_parts_f+0x88>
    1cae:	28 17       	cp	r18, r24
    1cb0:	39 07       	cpc	r19, r25
    1cb2:	bc f0       	brlt	.+46     	; 0x1ce2 <__fpcmp_parts_f+0x98>
    1cb4:	14 96       	adiw	r26, 0x04	; 4
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9d 91       	ld	r25, X+
    1cba:	0d 90       	ld	r0, X+
    1cbc:	bc 91       	ld	r27, X
    1cbe:	a0 2d       	mov	r26, r0
    1cc0:	24 81       	ldd	r18, Z+4	; 0x04
    1cc2:	35 81       	ldd	r19, Z+5	; 0x05
    1cc4:	46 81       	ldd	r20, Z+6	; 0x06
    1cc6:	57 81       	ldd	r21, Z+7	; 0x07
    1cc8:	28 17       	cp	r18, r24
    1cca:	39 07       	cpc	r19, r25
    1ccc:	4a 07       	cpc	r20, r26
    1cce:	5b 07       	cpc	r21, r27
    1cd0:	18 f4       	brcc	.+6      	; 0x1cd8 <__fpcmp_parts_f+0x8e>
    1cd2:	11 23       	and	r17, r17
    1cd4:	41 f0       	breq	.+16     	; 0x1ce6 <__fpcmp_parts_f+0x9c>
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <__fpcmp_parts_f+0xa2>
    1cd8:	82 17       	cp	r24, r18
    1cda:	93 07       	cpc	r25, r19
    1cdc:	a4 07       	cpc	r26, r20
    1cde:	b5 07       	cpc	r27, r21
    1ce0:	40 f4       	brcc	.+16     	; 0x1cf2 <__fpcmp_parts_f+0xa8>
    1ce2:	11 23       	and	r17, r17
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <__fpcmp_parts_f+0xa2>
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__fpcmp_parts_f+0xac>
    1cec:	6f ef       	ldi	r22, 0xFF	; 255
    1cee:	7f ef       	ldi	r23, 0xFF	; 255
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <__fpcmp_parts_f+0xac>
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	1f 91       	pop	r17
    1cfa:	08 95       	ret

00001cfc <__udivmodhi4>:
    1cfc:	aa 1b       	sub	r26, r26
    1cfe:	bb 1b       	sub	r27, r27
    1d00:	51 e1       	ldi	r21, 0x11	; 17
    1d02:	07 c0       	rjmp	.+14     	; 0x1d12 <__udivmodhi4_ep>

00001d04 <__udivmodhi4_loop>:
    1d04:	aa 1f       	adc	r26, r26
    1d06:	bb 1f       	adc	r27, r27
    1d08:	a6 17       	cp	r26, r22
    1d0a:	b7 07       	cpc	r27, r23
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <__udivmodhi4_ep>
    1d0e:	a6 1b       	sub	r26, r22
    1d10:	b7 0b       	sbc	r27, r23

00001d12 <__udivmodhi4_ep>:
    1d12:	88 1f       	adc	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	5a 95       	dec	r21
    1d18:	a9 f7       	brne	.-22     	; 0x1d04 <__udivmodhi4_loop>
    1d1a:	80 95       	com	r24
    1d1c:	90 95       	com	r25
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	08 95       	ret

00001d24 <__divmodhi4>:
    1d24:	97 fb       	bst	r25, 7
    1d26:	09 2e       	mov	r0, r25
    1d28:	07 26       	eor	r0, r23
    1d2a:	0a d0       	rcall	.+20     	; 0x1d40 <__divmodhi4_neg1>
    1d2c:	77 fd       	sbrc	r23, 7
    1d2e:	04 d0       	rcall	.+8      	; 0x1d38 <__divmodhi4_neg2>
    1d30:	e5 df       	rcall	.-54     	; 0x1cfc <__udivmodhi4>
    1d32:	06 d0       	rcall	.+12     	; 0x1d40 <__divmodhi4_neg1>
    1d34:	00 20       	and	r0, r0
    1d36:	1a f4       	brpl	.+6      	; 0x1d3e <__divmodhi4_exit>

00001d38 <__divmodhi4_neg2>:
    1d38:	70 95       	com	r23
    1d3a:	61 95       	neg	r22
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001d3e <__divmodhi4_exit>:
    1d3e:	08 95       	ret

00001d40 <__divmodhi4_neg1>:
    1d40:	f6 f7       	brtc	.-4      	; 0x1d3e <__divmodhi4_exit>
    1d42:	90 95       	com	r25
    1d44:	81 95       	neg	r24
    1d46:	9f 4f       	sbci	r25, 0xFF	; 255
    1d48:	08 95       	ret

00001d4a <__prologue_saves__>:
    1d4a:	2f 92       	push	r2
    1d4c:	3f 92       	push	r3
    1d4e:	4f 92       	push	r4
    1d50:	5f 92       	push	r5
    1d52:	6f 92       	push	r6
    1d54:	7f 92       	push	r7
    1d56:	8f 92       	push	r8
    1d58:	9f 92       	push	r9
    1d5a:	af 92       	push	r10
    1d5c:	bf 92       	push	r11
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	ca 1b       	sub	r28, r26
    1d74:	db 0b       	sbc	r29, r27
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	09 94       	ijmp

00001d82 <__epilogue_restores__>:
    1d82:	2a 88       	ldd	r2, Y+18	; 0x12
    1d84:	39 88       	ldd	r3, Y+17	; 0x11
    1d86:	48 88       	ldd	r4, Y+16	; 0x10
    1d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d94:	b9 84       	ldd	r11, Y+9	; 0x09
    1d96:	c8 84       	ldd	r12, Y+8	; 0x08
    1d98:	df 80       	ldd	r13, Y+7	; 0x07
    1d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1da0:	1b 81       	ldd	r17, Y+3	; 0x03
    1da2:	aa 81       	ldd	r26, Y+2	; 0x02
    1da4:	b9 81       	ldd	r27, Y+1	; 0x01
    1da6:	ce 0f       	add	r28, r30
    1da8:	d1 1d       	adc	r29, r1
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	ed 01       	movw	r28, r26
    1db6:	08 95       	ret

00001db8 <fputs>:
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	8b 01       	movw	r16, r22
    1dc8:	db 01       	movw	r26, r22
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	8c 91       	ld	r24, X
    1dce:	81 fd       	sbrc	r24, 1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <fputs+0x20>
    1dd2:	cf ef       	ldi	r28, 0xFF	; 255
    1dd4:	df ef       	ldi	r29, 0xFF	; 255
    1dd6:	13 c0       	rjmp	.+38     	; 0x1dfe <fputs+0x46>
    1dd8:	c0 e0       	ldi	r28, 0x00	; 0
    1dda:	d0 e0       	ldi	r29, 0x00	; 0
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <fputs+0x3c>
    1dde:	d8 01       	movw	r26, r16
    1de0:	18 96       	adiw	r26, 0x08	; 8
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	19 97       	sbiw	r26, 0x09	; 9
    1de8:	b8 01       	movw	r22, r16
    1dea:	09 95       	icall
    1dec:	89 2b       	or	r24, r25
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <fputs+0x3c>
    1df0:	cf ef       	ldi	r28, 0xFF	; 255
    1df2:	df ef       	ldi	r29, 0xFF	; 255
    1df4:	f7 01       	movw	r30, r14
    1df6:	81 91       	ld	r24, Z+
    1df8:	7f 01       	movw	r14, r30
    1dfa:	88 23       	and	r24, r24
    1dfc:	81 f7       	brne	.-32     	; 0x1dde <fputs+0x26>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	e6 e0       	ldi	r30, 0x06	; 6
    1e06:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__+0x18>

00001e0a <sprintf>:
    1e0a:	ae e0       	ldi	r26, 0x0E	; 14
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e0       	ldi	r30, 0x0B	; 11
    1e10:	ff e0       	ldi	r31, 0x0F	; 15
    1e12:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__prologue_saves__+0x1c>
    1e16:	0d 89       	ldd	r16, Y+21	; 0x15
    1e18:	1e 89       	ldd	r17, Y+22	; 0x16
    1e1a:	86 e0       	ldi	r24, 0x06	; 6
    1e1c:	8c 83       	std	Y+4, r24	; 0x04
    1e1e:	1a 83       	std	Y+2, r17	; 0x02
    1e20:	09 83       	std	Y+1, r16	; 0x01
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f e7       	ldi	r25, 0x7F	; 127
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	27 5e       	subi	r18, 0xE7	; 231
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	6f 89       	ldd	r22, Y+23	; 0x17
    1e36:	78 8d       	ldd	r23, Y+24	; 0x18
    1e38:	a9 01       	movw	r20, r18
    1e3a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <vfprintf>
    1e3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e40:	38 85       	ldd	r19, Y+8	; 0x08
    1e42:	02 0f       	add	r16, r18
    1e44:	13 1f       	adc	r17, r19
    1e46:	f8 01       	movw	r30, r16
    1e48:	10 82       	st	Z, r1
    1e4a:	2e 96       	adiw	r28, 0x0e	; 14
    1e4c:	e4 e0       	ldi	r30, 0x04	; 4
    1e4e:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__epilogue_restores__+0x1c>

00001e52 <sin>:
    1e52:	9f 93       	push	r25
    1e54:	82 d2       	rcall	.+1284   	; 0x235a <__fp_rempio2>
    1e56:	0f 90       	pop	r0
    1e58:	07 fc       	sbrc	r0, 7
    1e5a:	ee 5f       	subi	r30, 0xFE	; 254
    1e5c:	a5 c2       	rjmp	.+1354   	; 0x23a8 <__fp_sinus>

00001e5e <vfprintf>:
    1e5e:	ab e0       	ldi	r26, 0x0B	; 11
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	ff e0       	ldi	r31, 0x0F	; 15
    1e66:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__>
    1e6a:	3c 01       	movw	r6, r24
    1e6c:	2b 01       	movw	r4, r22
    1e6e:	5a 01       	movw	r10, r20
    1e70:	fc 01       	movw	r30, r24
    1e72:	17 82       	std	Z+7, r1	; 0x07
    1e74:	16 82       	std	Z+6, r1	; 0x06
    1e76:	83 81       	ldd	r24, Z+3	; 0x03
    1e78:	81 fd       	sbrc	r24, 1
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <vfprintf+0x24>
    1e7c:	6f ef       	ldi	r22, 0xFF	; 255
    1e7e:	7f ef       	ldi	r23, 0xFF	; 255
    1e80:	c6 c1       	rjmp	.+908    	; 0x220e <vfprintf+0x3b0>
    1e82:	9a e0       	ldi	r25, 0x0A	; 10
    1e84:	89 2e       	mov	r8, r25
    1e86:	1e 01       	movw	r2, r28
    1e88:	08 94       	sec
    1e8a:	21 1c       	adc	r2, r1
    1e8c:	31 1c       	adc	r3, r1
    1e8e:	f3 01       	movw	r30, r6
    1e90:	23 81       	ldd	r18, Z+3	; 0x03
    1e92:	f2 01       	movw	r30, r4
    1e94:	23 fd       	sbrc	r18, 3
    1e96:	85 91       	lpm	r24, Z+
    1e98:	23 ff       	sbrs	r18, 3
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	2f 01       	movw	r4, r30
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <vfprintf+0x46>
    1ea2:	b2 c1       	rjmp	.+868    	; 0x2208 <vfprintf+0x3aa>
    1ea4:	85 32       	cpi	r24, 0x25	; 37
    1ea6:	39 f4       	brne	.+14     	; 0x1eb6 <vfprintf+0x58>
    1ea8:	23 fd       	sbrc	r18, 3
    1eaa:	85 91       	lpm	r24, Z+
    1eac:	23 ff       	sbrs	r18, 3
    1eae:	81 91       	ld	r24, Z+
    1eb0:	2f 01       	movw	r4, r30
    1eb2:	85 32       	cpi	r24, 0x25	; 37
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <vfprintf+0x62>
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	b3 01       	movw	r22, r6
    1eba:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1ebe:	e7 cf       	rjmp	.-50     	; 0x1e8e <vfprintf+0x30>
    1ec0:	98 2f       	mov	r25, r24
    1ec2:	ff 24       	eor	r15, r15
    1ec4:	ee 24       	eor	r14, r14
    1ec6:	99 24       	eor	r9, r9
    1ec8:	ff e1       	ldi	r31, 0x1F	; 31
    1eca:	ff 15       	cp	r31, r15
    1ecc:	d0 f0       	brcs	.+52     	; 0x1f02 <vfprintf+0xa4>
    1ece:	9b 32       	cpi	r25, 0x2B	; 43
    1ed0:	69 f0       	breq	.+26     	; 0x1eec <vfprintf+0x8e>
    1ed2:	9c 32       	cpi	r25, 0x2C	; 44
    1ed4:	28 f4       	brcc	.+10     	; 0x1ee0 <vfprintf+0x82>
    1ed6:	90 32       	cpi	r25, 0x20	; 32
    1ed8:	59 f0       	breq	.+22     	; 0x1ef0 <vfprintf+0x92>
    1eda:	93 32       	cpi	r25, 0x23	; 35
    1edc:	91 f4       	brne	.+36     	; 0x1f02 <vfprintf+0xa4>
    1ede:	0e c0       	rjmp	.+28     	; 0x1efc <vfprintf+0x9e>
    1ee0:	9d 32       	cpi	r25, 0x2D	; 45
    1ee2:	49 f0       	breq	.+18     	; 0x1ef6 <vfprintf+0x98>
    1ee4:	90 33       	cpi	r25, 0x30	; 48
    1ee6:	69 f4       	brne	.+26     	; 0x1f02 <vfprintf+0xa4>
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	24 c0       	rjmp	.+72     	; 0x1f34 <vfprintf+0xd6>
    1eec:	52 e0       	ldi	r21, 0x02	; 2
    1eee:	f5 2a       	or	r15, r21
    1ef0:	84 e0       	ldi	r24, 0x04	; 4
    1ef2:	f8 2a       	or	r15, r24
    1ef4:	28 c0       	rjmp	.+80     	; 0x1f46 <vfprintf+0xe8>
    1ef6:	98 e0       	ldi	r25, 0x08	; 8
    1ef8:	f9 2a       	or	r15, r25
    1efa:	25 c0       	rjmp	.+74     	; 0x1f46 <vfprintf+0xe8>
    1efc:	e0 e1       	ldi	r30, 0x10	; 16
    1efe:	fe 2a       	or	r15, r30
    1f00:	22 c0       	rjmp	.+68     	; 0x1f46 <vfprintf+0xe8>
    1f02:	f7 fc       	sbrc	r15, 7
    1f04:	29 c0       	rjmp	.+82     	; 0x1f58 <vfprintf+0xfa>
    1f06:	89 2f       	mov	r24, r25
    1f08:	80 53       	subi	r24, 0x30	; 48
    1f0a:	8a 30       	cpi	r24, 0x0A	; 10
    1f0c:	70 f4       	brcc	.+28     	; 0x1f2a <vfprintf+0xcc>
    1f0e:	f6 fe       	sbrs	r15, 6
    1f10:	05 c0       	rjmp	.+10     	; 0x1f1c <vfprintf+0xbe>
    1f12:	98 9c       	mul	r9, r8
    1f14:	90 2c       	mov	r9, r0
    1f16:	11 24       	eor	r1, r1
    1f18:	98 0e       	add	r9, r24
    1f1a:	15 c0       	rjmp	.+42     	; 0x1f46 <vfprintf+0xe8>
    1f1c:	e8 9c       	mul	r14, r8
    1f1e:	e0 2c       	mov	r14, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	e8 0e       	add	r14, r24
    1f24:	f0 e2       	ldi	r31, 0x20	; 32
    1f26:	ff 2a       	or	r15, r31
    1f28:	0e c0       	rjmp	.+28     	; 0x1f46 <vfprintf+0xe8>
    1f2a:	9e 32       	cpi	r25, 0x2E	; 46
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <vfprintf+0xda>
    1f2e:	f6 fc       	sbrc	r15, 6
    1f30:	6b c1       	rjmp	.+726    	; 0x2208 <vfprintf+0x3aa>
    1f32:	40 e4       	ldi	r20, 0x40	; 64
    1f34:	f4 2a       	or	r15, r20
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <vfprintf+0xe8>
    1f38:	9c 36       	cpi	r25, 0x6C	; 108
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <vfprintf+0xe4>
    1f3c:	50 e8       	ldi	r21, 0x80	; 128
    1f3e:	f5 2a       	or	r15, r21
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0xe8>
    1f42:	98 36       	cpi	r25, 0x68	; 104
    1f44:	49 f4       	brne	.+18     	; 0x1f58 <vfprintf+0xfa>
    1f46:	f2 01       	movw	r30, r4
    1f48:	23 fd       	sbrc	r18, 3
    1f4a:	95 91       	lpm	r25, Z+
    1f4c:	23 ff       	sbrs	r18, 3
    1f4e:	91 91       	ld	r25, Z+
    1f50:	2f 01       	movw	r4, r30
    1f52:	99 23       	and	r25, r25
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <vfprintf+0xfa>
    1f56:	b8 cf       	rjmp	.-144    	; 0x1ec8 <vfprintf+0x6a>
    1f58:	89 2f       	mov	r24, r25
    1f5a:	85 54       	subi	r24, 0x45	; 69
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	18 f0       	brcs	.+6      	; 0x1f66 <vfprintf+0x108>
    1f60:	80 52       	subi	r24, 0x20	; 32
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	38 f4       	brcc	.+14     	; 0x1f74 <vfprintf+0x116>
    1f66:	44 e0       	ldi	r20, 0x04	; 4
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	a4 0e       	add	r10, r20
    1f6c:	b5 1e       	adc	r11, r21
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	59 83       	std	Y+1, r21	; 0x01
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <vfprintf+0x134>
    1f74:	93 36       	cpi	r25, 0x63	; 99
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <vfprintf+0x126>
    1f78:	93 37       	cpi	r25, 0x73	; 115
    1f7a:	79 f0       	breq	.+30     	; 0x1f9a <vfprintf+0x13c>
    1f7c:	93 35       	cpi	r25, 0x53	; 83
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <vfprintf+0x124>
    1f80:	56 c0       	rjmp	.+172    	; 0x202e <vfprintf+0x1d0>
    1f82:	20 c0       	rjmp	.+64     	; 0x1fc4 <vfprintf+0x166>
    1f84:	f5 01       	movw	r30, r10
    1f86:	80 81       	ld	r24, Z
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	42 e0       	ldi	r20, 0x02	; 2
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	a4 0e       	add	r10, r20
    1f90:	b5 1e       	adc	r11, r21
    1f92:	61 01       	movw	r12, r2
    1f94:	01 e0       	ldi	r16, 0x01	; 1
    1f96:	10 e0       	ldi	r17, 0x00	; 0
    1f98:	12 c0       	rjmp	.+36     	; 0x1fbe <vfprintf+0x160>
    1f9a:	f5 01       	movw	r30, r10
    1f9c:	c0 80       	ld	r12, Z
    1f9e:	d1 80       	ldd	r13, Z+1	; 0x01
    1fa0:	f6 fc       	sbrc	r15, 6
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <vfprintf+0x14c>
    1fa4:	6f ef       	ldi	r22, 0xFF	; 255
    1fa6:	7f ef       	ldi	r23, 0xFF	; 255
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0x150>
    1faa:	69 2d       	mov	r22, r9
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	42 e0       	ldi	r20, 0x02	; 2
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	a4 0e       	add	r10, r20
    1fb4:	b5 1e       	adc	r11, r21
    1fb6:	c6 01       	movw	r24, r12
    1fb8:	0e 94 17 11 	call	0x222e	; 0x222e <strnlen>
    1fbc:	8c 01       	movw	r16, r24
    1fbe:	5f e7       	ldi	r21, 0x7F	; 127
    1fc0:	f5 22       	and	r15, r21
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <vfprintf+0x18e>
    1fc4:	f5 01       	movw	r30, r10
    1fc6:	c0 80       	ld	r12, Z
    1fc8:	d1 80       	ldd	r13, Z+1	; 0x01
    1fca:	f6 fc       	sbrc	r15, 6
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x176>
    1fce:	6f ef       	ldi	r22, 0xFF	; 255
    1fd0:	7f ef       	ldi	r23, 0xFF	; 255
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <vfprintf+0x17a>
    1fd4:	69 2d       	mov	r22, r9
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	42 e0       	ldi	r20, 0x02	; 2
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	a4 0e       	add	r10, r20
    1fde:	b5 1e       	adc	r11, r21
    1fe0:	c6 01       	movw	r24, r12
    1fe2:	0e 94 0c 11 	call	0x2218	; 0x2218 <strnlen_P>
    1fe6:	8c 01       	movw	r16, r24
    1fe8:	50 e8       	ldi	r21, 0x80	; 128
    1fea:	f5 2a       	or	r15, r21
    1fec:	f3 fe       	sbrs	r15, 3
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <vfprintf+0x1a0>
    1ff0:	1a c0       	rjmp	.+52     	; 0x2026 <vfprintf+0x1c8>
    1ff2:	80 e2       	ldi	r24, 0x20	; 32
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	b3 01       	movw	r22, r6
    1ff8:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1ffc:	ea 94       	dec	r14
    1ffe:	8e 2d       	mov	r24, r14
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	08 17       	cp	r16, r24
    2004:	19 07       	cpc	r17, r25
    2006:	a8 f3       	brcs	.-22     	; 0x1ff2 <vfprintf+0x194>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <vfprintf+0x1c8>
    200a:	f6 01       	movw	r30, r12
    200c:	f7 fc       	sbrc	r15, 7
    200e:	85 91       	lpm	r24, Z+
    2010:	f7 fe       	sbrs	r15, 7
    2012:	81 91       	ld	r24, Z+
    2014:	6f 01       	movw	r12, r30
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	b3 01       	movw	r22, r6
    201a:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    201e:	e1 10       	cpse	r14, r1
    2020:	ea 94       	dec	r14
    2022:	01 50       	subi	r16, 0x01	; 1
    2024:	10 40       	sbci	r17, 0x00	; 0
    2026:	01 15       	cp	r16, r1
    2028:	11 05       	cpc	r17, r1
    202a:	79 f7       	brne	.-34     	; 0x200a <vfprintf+0x1ac>
    202c:	ea c0       	rjmp	.+468    	; 0x2202 <vfprintf+0x3a4>
    202e:	94 36       	cpi	r25, 0x64	; 100
    2030:	11 f0       	breq	.+4      	; 0x2036 <vfprintf+0x1d8>
    2032:	99 36       	cpi	r25, 0x69	; 105
    2034:	69 f5       	brne	.+90     	; 0x2090 <vfprintf+0x232>
    2036:	f7 fe       	sbrs	r15, 7
    2038:	08 c0       	rjmp	.+16     	; 0x204a <vfprintf+0x1ec>
    203a:	f5 01       	movw	r30, r10
    203c:	20 81       	ld	r18, Z
    203e:	31 81       	ldd	r19, Z+1	; 0x01
    2040:	42 81       	ldd	r20, Z+2	; 0x02
    2042:	53 81       	ldd	r21, Z+3	; 0x03
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0a c0       	rjmp	.+20     	; 0x205e <vfprintf+0x200>
    204a:	f5 01       	movw	r30, r10
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	9c 01       	movw	r18, r24
    2052:	44 27       	eor	r20, r20
    2054:	37 fd       	sbrc	r19, 7
    2056:	40 95       	com	r20
    2058:	54 2f       	mov	r21, r20
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a8 0e       	add	r10, r24
    2060:	b9 1e       	adc	r11, r25
    2062:	9f e6       	ldi	r25, 0x6F	; 111
    2064:	f9 22       	and	r15, r25
    2066:	57 ff       	sbrs	r21, 7
    2068:	09 c0       	rjmp	.+18     	; 0x207c <vfprintf+0x21e>
    206a:	50 95       	com	r21
    206c:	40 95       	com	r20
    206e:	30 95       	com	r19
    2070:	21 95       	neg	r18
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	4f 4f       	sbci	r20, 0xFF	; 255
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	e0 e8       	ldi	r30, 0x80	; 128
    207a:	fe 2a       	or	r15, r30
    207c:	ca 01       	movw	r24, r20
    207e:	b9 01       	movw	r22, r18
    2080:	a1 01       	movw	r20, r2
    2082:	2a e0       	ldi	r18, 0x0A	; 10
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	0e 94 4e 11 	call	0x229c	; 0x229c <__ultoa_invert>
    208a:	d8 2e       	mov	r13, r24
    208c:	d2 18       	sub	r13, r2
    208e:	40 c0       	rjmp	.+128    	; 0x2110 <vfprintf+0x2b2>
    2090:	95 37       	cpi	r25, 0x75	; 117
    2092:	29 f4       	brne	.+10     	; 0x209e <vfprintf+0x240>
    2094:	1f 2d       	mov	r17, r15
    2096:	1f 7e       	andi	r17, 0xEF	; 239
    2098:	2a e0       	ldi	r18, 0x0A	; 10
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	1d c0       	rjmp	.+58     	; 0x20d8 <vfprintf+0x27a>
    209e:	1f 2d       	mov	r17, r15
    20a0:	19 7f       	andi	r17, 0xF9	; 249
    20a2:	9f 36       	cpi	r25, 0x6F	; 111
    20a4:	61 f0       	breq	.+24     	; 0x20be <vfprintf+0x260>
    20a6:	90 37       	cpi	r25, 0x70	; 112
    20a8:	20 f4       	brcc	.+8      	; 0x20b2 <vfprintf+0x254>
    20aa:	98 35       	cpi	r25, 0x58	; 88
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <vfprintf+0x252>
    20ae:	ac c0       	rjmp	.+344    	; 0x2208 <vfprintf+0x3aa>
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <vfprintf+0x272>
    20b2:	90 37       	cpi	r25, 0x70	; 112
    20b4:	39 f0       	breq	.+14     	; 0x20c4 <vfprintf+0x266>
    20b6:	98 37       	cpi	r25, 0x78	; 120
    20b8:	09 f0       	breq	.+2      	; 0x20bc <vfprintf+0x25e>
    20ba:	a6 c0       	rjmp	.+332    	; 0x2208 <vfprintf+0x3aa>
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <vfprintf+0x268>
    20be:	28 e0       	ldi	r18, 0x08	; 8
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	0a c0       	rjmp	.+20     	; 0x20d8 <vfprintf+0x27a>
    20c4:	10 61       	ori	r17, 0x10	; 16
    20c6:	14 fd       	sbrc	r17, 4
    20c8:	14 60       	ori	r17, 0x04	; 4
    20ca:	20 e1       	ldi	r18, 0x10	; 16
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	04 c0       	rjmp	.+8      	; 0x20d8 <vfprintf+0x27a>
    20d0:	14 fd       	sbrc	r17, 4
    20d2:	16 60       	ori	r17, 0x06	; 6
    20d4:	20 e1       	ldi	r18, 0x10	; 16
    20d6:	32 e0       	ldi	r19, 0x02	; 2
    20d8:	17 ff       	sbrs	r17, 7
    20da:	08 c0       	rjmp	.+16     	; 0x20ec <vfprintf+0x28e>
    20dc:	f5 01       	movw	r30, r10
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	44 e0       	ldi	r20, 0x04	; 4
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <vfprintf+0x29e>
    20ec:	f5 01       	movw	r30, r10
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	bc 01       	movw	r22, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	42 e0       	ldi	r20, 0x02	; 2
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	a4 0e       	add	r10, r20
    20fe:	b5 1e       	adc	r11, r21
    2100:	a1 01       	movw	r20, r2
    2102:	0e 94 4e 11 	call	0x229c	; 0x229c <__ultoa_invert>
    2106:	d8 2e       	mov	r13, r24
    2108:	d2 18       	sub	r13, r2
    210a:	8f e7       	ldi	r24, 0x7F	; 127
    210c:	f8 2e       	mov	r15, r24
    210e:	f1 22       	and	r15, r17
    2110:	f6 fe       	sbrs	r15, 6
    2112:	0b c0       	rjmp	.+22     	; 0x212a <vfprintf+0x2cc>
    2114:	5e ef       	ldi	r21, 0xFE	; 254
    2116:	f5 22       	and	r15, r21
    2118:	d9 14       	cp	r13, r9
    211a:	38 f4       	brcc	.+14     	; 0x212a <vfprintf+0x2cc>
    211c:	f4 fe       	sbrs	r15, 4
    211e:	07 c0       	rjmp	.+14     	; 0x212e <vfprintf+0x2d0>
    2120:	f2 fc       	sbrc	r15, 2
    2122:	05 c0       	rjmp	.+10     	; 0x212e <vfprintf+0x2d0>
    2124:	8f ee       	ldi	r24, 0xEF	; 239
    2126:	f8 22       	and	r15, r24
    2128:	02 c0       	rjmp	.+4      	; 0x212e <vfprintf+0x2d0>
    212a:	1d 2d       	mov	r17, r13
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <vfprintf+0x2d2>
    212e:	19 2d       	mov	r17, r9
    2130:	f4 fe       	sbrs	r15, 4
    2132:	0d c0       	rjmp	.+26     	; 0x214e <vfprintf+0x2f0>
    2134:	fe 01       	movw	r30, r28
    2136:	ed 0d       	add	r30, r13
    2138:	f1 1d       	adc	r31, r1
    213a:	80 81       	ld	r24, Z
    213c:	80 33       	cpi	r24, 0x30	; 48
    213e:	19 f4       	brne	.+6      	; 0x2146 <vfprintf+0x2e8>
    2140:	99 ee       	ldi	r25, 0xE9	; 233
    2142:	f9 22       	and	r15, r25
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <vfprintf+0x2f8>
    2146:	1f 5f       	subi	r17, 0xFF	; 255
    2148:	f2 fe       	sbrs	r15, 2
    214a:	05 c0       	rjmp	.+10     	; 0x2156 <vfprintf+0x2f8>
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <vfprintf+0x2f6>
    214e:	8f 2d       	mov	r24, r15
    2150:	86 78       	andi	r24, 0x86	; 134
    2152:	09 f0       	breq	.+2      	; 0x2156 <vfprintf+0x2f8>
    2154:	1f 5f       	subi	r17, 0xFF	; 255
    2156:	0f 2d       	mov	r16, r15
    2158:	f3 fc       	sbrc	r15, 3
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <vfprintf+0x326>
    215c:	f0 fe       	sbrs	r15, 0
    215e:	0f c0       	rjmp	.+30     	; 0x217e <vfprintf+0x320>
    2160:	1e 15       	cp	r17, r14
    2162:	10 f0       	brcs	.+4      	; 0x2168 <vfprintf+0x30a>
    2164:	9d 2c       	mov	r9, r13
    2166:	0b c0       	rjmp	.+22     	; 0x217e <vfprintf+0x320>
    2168:	9d 2c       	mov	r9, r13
    216a:	9e 0c       	add	r9, r14
    216c:	91 1a       	sub	r9, r17
    216e:	1e 2d       	mov	r17, r14
    2170:	06 c0       	rjmp	.+12     	; 0x217e <vfprintf+0x320>
    2172:	80 e2       	ldi	r24, 0x20	; 32
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	b3 01       	movw	r22, r6
    2178:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    217c:	1f 5f       	subi	r17, 0xFF	; 255
    217e:	1e 15       	cp	r17, r14
    2180:	c0 f3       	brcs	.-16     	; 0x2172 <vfprintf+0x314>
    2182:	04 c0       	rjmp	.+8      	; 0x218c <vfprintf+0x32e>
    2184:	1e 15       	cp	r17, r14
    2186:	10 f4       	brcc	.+4      	; 0x218c <vfprintf+0x32e>
    2188:	e1 1a       	sub	r14, r17
    218a:	01 c0       	rjmp	.+2      	; 0x218e <vfprintf+0x330>
    218c:	ee 24       	eor	r14, r14
    218e:	04 ff       	sbrs	r16, 4
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <vfprintf+0x352>
    2192:	80 e3       	ldi	r24, 0x30	; 48
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	b3 01       	movw	r22, r6
    2198:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    219c:	02 ff       	sbrs	r16, 2
    219e:	1d c0       	rjmp	.+58     	; 0x21da <vfprintf+0x37c>
    21a0:	01 fd       	sbrc	r16, 1
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <vfprintf+0x34c>
    21a4:	88 e7       	ldi	r24, 0x78	; 120
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e c0       	rjmp	.+28     	; 0x21c6 <vfprintf+0x368>
    21aa:	88 e5       	ldi	r24, 0x58	; 88
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0b c0       	rjmp	.+22     	; 0x21c6 <vfprintf+0x368>
    21b0:	80 2f       	mov	r24, r16
    21b2:	86 78       	andi	r24, 0x86	; 134
    21b4:	91 f0       	breq	.+36     	; 0x21da <vfprintf+0x37c>
    21b6:	01 ff       	sbrs	r16, 1
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <vfprintf+0x360>
    21ba:	8b e2       	ldi	r24, 0x2B	; 43
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <vfprintf+0x362>
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	f7 fc       	sbrc	r15, 7
    21c2:	8d e2       	ldi	r24, 0x2D	; 45
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b3 01       	movw	r22, r6
    21c8:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21cc:	06 c0       	rjmp	.+12     	; 0x21da <vfprintf+0x37c>
    21ce:	80 e3       	ldi	r24, 0x30	; 48
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	b3 01       	movw	r22, r6
    21d4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21d8:	9a 94       	dec	r9
    21da:	d9 14       	cp	r13, r9
    21dc:	c0 f3       	brcs	.-16     	; 0x21ce <vfprintf+0x370>
    21de:	da 94       	dec	r13
    21e0:	f1 01       	movw	r30, r2
    21e2:	ed 0d       	add	r30, r13
    21e4:	f1 1d       	adc	r31, r1
    21e6:	80 81       	ld	r24, Z
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	b3 01       	movw	r22, r6
    21ec:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21f0:	dd 20       	and	r13, r13
    21f2:	a9 f7       	brne	.-22     	; 0x21de <vfprintf+0x380>
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <vfprintf+0x3a4>
    21f6:	80 e2       	ldi	r24, 0x20	; 32
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	b3 01       	movw	r22, r6
    21fc:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    2200:	ea 94       	dec	r14
    2202:	ee 20       	and	r14, r14
    2204:	c1 f7       	brne	.-16     	; 0x21f6 <vfprintf+0x398>
    2206:	43 ce       	rjmp	.-890    	; 0x1e8e <vfprintf+0x30>
    2208:	f3 01       	movw	r30, r6
    220a:	66 81       	ldd	r22, Z+6	; 0x06
    220c:	77 81       	ldd	r23, Z+7	; 0x07
    220e:	cb 01       	movw	r24, r22
    2210:	2b 96       	adiw	r28, 0x0b	; 11
    2212:	e2 e1       	ldi	r30, 0x12	; 18
    2214:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__>

00002218 <strnlen_P>:
    2218:	fc 01       	movw	r30, r24
    221a:	05 90       	lpm	r0, Z+
    221c:	61 50       	subi	r22, 0x01	; 1
    221e:	70 40       	sbci	r23, 0x00	; 0
    2220:	01 10       	cpse	r0, r1
    2222:	d8 f7       	brcc	.-10     	; 0x221a <strnlen_P+0x2>
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	8e 0f       	add	r24, r30
    222a:	9f 1f       	adc	r25, r31
    222c:	08 95       	ret

0000222e <strnlen>:
    222e:	fc 01       	movw	r30, r24
    2230:	61 50       	subi	r22, 0x01	; 1
    2232:	70 40       	sbci	r23, 0x00	; 0
    2234:	01 90       	ld	r0, Z+
    2236:	01 10       	cpse	r0, r1
    2238:	d8 f7       	brcc	.-10     	; 0x2230 <strnlen+0x2>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	8e 0f       	add	r24, r30
    2240:	9f 1f       	adc	r25, r31
    2242:	08 95       	ret

00002244 <fputc>:
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	8c 01       	movw	r16, r24
    224e:	eb 01       	movw	r28, r22
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	81 ff       	sbrs	r24, 1
    2254:	1b c0       	rjmp	.+54     	; 0x228c <fputc+0x48>
    2256:	82 ff       	sbrs	r24, 2
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <fputc+0x30>
    225a:	2e 81       	ldd	r18, Y+6	; 0x06
    225c:	3f 81       	ldd	r19, Y+7	; 0x07
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	64 f4       	brge	.+24     	; 0x2280 <fputc+0x3c>
    2268:	e8 81       	ld	r30, Y
    226a:	f9 81       	ldd	r31, Y+1	; 0x01
    226c:	01 93       	st	Z+, r16
    226e:	f9 83       	std	Y+1, r31	; 0x01
    2270:	e8 83       	st	Y, r30
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <fputc+0x3c>
    2274:	e8 85       	ldd	r30, Y+8	; 0x08
    2276:	f9 85       	ldd	r31, Y+9	; 0x09
    2278:	80 2f       	mov	r24, r16
    227a:	09 95       	icall
    227c:	89 2b       	or	r24, r25
    227e:	31 f4       	brne	.+12     	; 0x228c <fputc+0x48>
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	9f 83       	std	Y+7, r25	; 0x07
    2288:	8e 83       	std	Y+6, r24	; 0x06
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <fputc+0x4c>
    228c:	0f ef       	ldi	r16, 0xFF	; 255
    228e:	1f ef       	ldi	r17, 0xFF	; 255
    2290:	c8 01       	movw	r24, r16
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <__ultoa_invert>:
    229c:	fa 01       	movw	r30, r20
    229e:	aa 27       	eor	r26, r26
    22a0:	28 30       	cpi	r18, 0x08	; 8
    22a2:	51 f1       	breq	.+84     	; 0x22f8 <__ultoa_invert+0x5c>
    22a4:	20 31       	cpi	r18, 0x10	; 16
    22a6:	81 f1       	breq	.+96     	; 0x2308 <__ultoa_invert+0x6c>
    22a8:	e8 94       	clt
    22aa:	6f 93       	push	r22
    22ac:	6e 7f       	andi	r22, 0xFE	; 254
    22ae:	6e 5f       	subi	r22, 0xFE	; 254
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	af 4f       	sbci	r26, 0xFF	; 255
    22b8:	b1 e0       	ldi	r27, 0x01	; 1
    22ba:	3e d0       	rcall	.+124    	; 0x2338 <__ultoa_invert+0x9c>
    22bc:	b4 e0       	ldi	r27, 0x04	; 4
    22be:	3c d0       	rcall	.+120    	; 0x2338 <__ultoa_invert+0x9c>
    22c0:	67 0f       	add	r22, r23
    22c2:	78 1f       	adc	r23, r24
    22c4:	89 1f       	adc	r24, r25
    22c6:	9a 1f       	adc	r25, r26
    22c8:	a1 1d       	adc	r26, r1
    22ca:	68 0f       	add	r22, r24
    22cc:	79 1f       	adc	r23, r25
    22ce:	8a 1f       	adc	r24, r26
    22d0:	91 1d       	adc	r25, r1
    22d2:	a1 1d       	adc	r26, r1
    22d4:	6a 0f       	add	r22, r26
    22d6:	71 1d       	adc	r23, r1
    22d8:	81 1d       	adc	r24, r1
    22da:	91 1d       	adc	r25, r1
    22dc:	a1 1d       	adc	r26, r1
    22de:	20 d0       	rcall	.+64     	; 0x2320 <__ultoa_invert+0x84>
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <__ultoa_invert+0x48>
    22e2:	68 94       	set
    22e4:	3f 91       	pop	r19
    22e6:	2a e0       	ldi	r18, 0x0A	; 10
    22e8:	26 9f       	mul	r18, r22
    22ea:	11 24       	eor	r1, r1
    22ec:	30 19       	sub	r19, r0
    22ee:	30 5d       	subi	r19, 0xD0	; 208
    22f0:	31 93       	st	Z+, r19
    22f2:	de f6       	brtc	.-74     	; 0x22aa <__ultoa_invert+0xe>
    22f4:	cf 01       	movw	r24, r30
    22f6:	08 95       	ret
    22f8:	46 2f       	mov	r20, r22
    22fa:	47 70       	andi	r20, 0x07	; 7
    22fc:	40 5d       	subi	r20, 0xD0	; 208
    22fe:	41 93       	st	Z+, r20
    2300:	b3 e0       	ldi	r27, 0x03	; 3
    2302:	0f d0       	rcall	.+30     	; 0x2322 <__ultoa_invert+0x86>
    2304:	c9 f7       	brne	.-14     	; 0x22f8 <__ultoa_invert+0x5c>
    2306:	f6 cf       	rjmp	.-20     	; 0x22f4 <__ultoa_invert+0x58>
    2308:	46 2f       	mov	r20, r22
    230a:	4f 70       	andi	r20, 0x0F	; 15
    230c:	40 5d       	subi	r20, 0xD0	; 208
    230e:	4a 33       	cpi	r20, 0x3A	; 58
    2310:	18 f0       	brcs	.+6      	; 0x2318 <__ultoa_invert+0x7c>
    2312:	49 5d       	subi	r20, 0xD9	; 217
    2314:	31 fd       	sbrc	r19, 1
    2316:	40 52       	subi	r20, 0x20	; 32
    2318:	41 93       	st	Z+, r20
    231a:	02 d0       	rcall	.+4      	; 0x2320 <__ultoa_invert+0x84>
    231c:	a9 f7       	brne	.-22     	; 0x2308 <__ultoa_invert+0x6c>
    231e:	ea cf       	rjmp	.-44     	; 0x22f4 <__ultoa_invert+0x58>
    2320:	b4 e0       	ldi	r27, 0x04	; 4
    2322:	a6 95       	lsr	r26
    2324:	97 95       	ror	r25
    2326:	87 95       	ror	r24
    2328:	77 95       	ror	r23
    232a:	67 95       	ror	r22
    232c:	ba 95       	dec	r27
    232e:	c9 f7       	brne	.-14     	; 0x2322 <__ultoa_invert+0x86>
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	61 05       	cpc	r22, r1
    2334:	71 05       	cpc	r23, r1
    2336:	08 95       	ret
    2338:	9b 01       	movw	r18, r22
    233a:	ac 01       	movw	r20, r24
    233c:	0a 2e       	mov	r0, r26
    233e:	06 94       	lsr	r0
    2340:	57 95       	ror	r21
    2342:	47 95       	ror	r20
    2344:	37 95       	ror	r19
    2346:	27 95       	ror	r18
    2348:	ba 95       	dec	r27
    234a:	c9 f7       	brne	.-14     	; 0x233e <__ultoa_invert+0xa2>
    234c:	62 0f       	add	r22, r18
    234e:	73 1f       	adc	r23, r19
    2350:	84 1f       	adc	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	a0 1d       	adc	r26, r0
    2356:	08 95       	ret
    2358:	ce c0       	rjmp	.+412    	; 0x24f6 <__fp_nan>

0000235a <__fp_rempio2>:
    235a:	3f d0       	rcall	.+126    	; 0x23da <__fp_splitA>
    235c:	e8 f3       	brcs	.-6      	; 0x2358 <__ultoa_invert+0xbc>
    235e:	e8 94       	clt
    2360:	e0 e0       	ldi	r30, 0x00	; 0
    2362:	bb 27       	eor	r27, r27
    2364:	9f 57       	subi	r25, 0x7F	; 127
    2366:	f0 f0       	brcs	.+60     	; 0x23a4 <__fp_rempio2+0x4a>
    2368:	2a ed       	ldi	r18, 0xDA	; 218
    236a:	3f e0       	ldi	r19, 0x0F	; 15
    236c:	49 ec       	ldi	r20, 0xC9	; 201
    236e:	06 c0       	rjmp	.+12     	; 0x237c <__fp_rempio2+0x22>
    2370:	ee 0f       	add	r30, r30
    2372:	bb 0f       	add	r27, r27
    2374:	66 1f       	adc	r22, r22
    2376:	77 1f       	adc	r23, r23
    2378:	88 1f       	adc	r24, r24
    237a:	28 f0       	brcs	.+10     	; 0x2386 <__fp_rempio2+0x2c>
    237c:	b2 3a       	cpi	r27, 0xA2	; 162
    237e:	62 07       	cpc	r22, r18
    2380:	73 07       	cpc	r23, r19
    2382:	84 07       	cpc	r24, r20
    2384:	28 f0       	brcs	.+10     	; 0x2390 <__fp_rempio2+0x36>
    2386:	b2 5a       	subi	r27, 0xA2	; 162
    2388:	62 0b       	sbc	r22, r18
    238a:	73 0b       	sbc	r23, r19
    238c:	84 0b       	sbc	r24, r20
    238e:	e3 95       	inc	r30
    2390:	9a 95       	dec	r25
    2392:	72 f7       	brpl	.-36     	; 0x2370 <__fp_rempio2+0x16>
    2394:	80 38       	cpi	r24, 0x80	; 128
    2396:	30 f4       	brcc	.+12     	; 0x23a4 <__fp_rempio2+0x4a>
    2398:	9a 95       	dec	r25
    239a:	bb 0f       	add	r27, r27
    239c:	66 1f       	adc	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	d2 f7       	brpl	.-12     	; 0x2398 <__fp_rempio2+0x3e>
    23a4:	90 48       	sbci	r25, 0x80	; 128
    23a6:	9b c0       	rjmp	.+310    	; 0x24de <__fp_mpack_finite>

000023a8 <__fp_sinus>:
    23a8:	ef 93       	push	r30
    23aa:	e0 ff       	sbrs	r30, 0
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <__fp_sinus+0x12>
    23ae:	a2 ea       	ldi	r26, 0xA2	; 162
    23b0:	2a ed       	ldi	r18, 0xDA	; 218
    23b2:	3f e0       	ldi	r19, 0x0F	; 15
    23b4:	49 ec       	ldi	r20, 0xC9	; 201
    23b6:	5f eb       	ldi	r21, 0xBF	; 191
    23b8:	37 d0       	rcall	.+110    	; 0x2428 <__addsf3x>
    23ba:	bf d0       	rcall	.+382    	; 0x253a <__fp_round>
    23bc:	0f 90       	pop	r0
    23be:	03 94       	inc	r0
    23c0:	01 fc       	sbrc	r0, 1
    23c2:	90 58       	subi	r25, 0x80	; 128
    23c4:	e0 e7       	ldi	r30, 0x70	; 112
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	99 c0       	rjmp	.+306    	; 0x24fc <__fp_powsodd>

000023ca <__fp_split3>:
    23ca:	57 fd       	sbrc	r21, 7
    23cc:	90 58       	subi	r25, 0x80	; 128
    23ce:	44 0f       	add	r20, r20
    23d0:	55 1f       	adc	r21, r21
    23d2:	59 f0       	breq	.+22     	; 0x23ea <__fp_splitA+0x10>
    23d4:	5f 3f       	cpi	r21, 0xFF	; 255
    23d6:	71 f0       	breq	.+28     	; 0x23f4 <__fp_splitA+0x1a>
    23d8:	47 95       	ror	r20

000023da <__fp_splitA>:
    23da:	88 0f       	add	r24, r24
    23dc:	97 fb       	bst	r25, 7
    23de:	99 1f       	adc	r25, r25
    23e0:	61 f0       	breq	.+24     	; 0x23fa <__fp_splitA+0x20>
    23e2:	9f 3f       	cpi	r25, 0xFF	; 255
    23e4:	79 f0       	breq	.+30     	; 0x2404 <__fp_splitA+0x2a>
    23e6:	87 95       	ror	r24
    23e8:	08 95       	ret
    23ea:	12 16       	cp	r1, r18
    23ec:	13 06       	cpc	r1, r19
    23ee:	14 06       	cpc	r1, r20
    23f0:	55 1f       	adc	r21, r21
    23f2:	f2 cf       	rjmp	.-28     	; 0x23d8 <__fp_split3+0xe>
    23f4:	46 95       	lsr	r20
    23f6:	f1 df       	rcall	.-30     	; 0x23da <__fp_splitA>
    23f8:	08 c0       	rjmp	.+16     	; 0x240a <__fp_splitA+0x30>
    23fa:	16 16       	cp	r1, r22
    23fc:	17 06       	cpc	r1, r23
    23fe:	18 06       	cpc	r1, r24
    2400:	99 1f       	adc	r25, r25
    2402:	f1 cf       	rjmp	.-30     	; 0x23e6 <__fp_splitA+0xc>
    2404:	86 95       	lsr	r24
    2406:	71 05       	cpc	r23, r1
    2408:	61 05       	cpc	r22, r1
    240a:	08 94       	sec
    240c:	08 95       	ret
    240e:	87 d0       	rcall	.+270    	; 0x251e <__fp_pscA>
    2410:	30 f0       	brcs	.+12     	; 0x241e <__fp_splitA+0x44>
    2412:	8c d0       	rcall	.+280    	; 0x252c <__fp_pscB>
    2414:	20 f0       	brcs	.+8      	; 0x241e <__fp_splitA+0x44>
    2416:	31 f4       	brne	.+12     	; 0x2424 <__fp_splitA+0x4a>
    2418:	9f 3f       	cpi	r25, 0xFF	; 255
    241a:	11 f4       	brne	.+4      	; 0x2420 <__fp_splitA+0x46>
    241c:	1e f4       	brtc	.+6      	; 0x2424 <__fp_splitA+0x4a>
    241e:	6b c0       	rjmp	.+214    	; 0x24f6 <__fp_nan>
    2420:	0e f4       	brtc	.+2      	; 0x2424 <__fp_splitA+0x4a>
    2422:	e0 95       	com	r30
    2424:	e7 fb       	bst	r30, 7
    2426:	53 c0       	rjmp	.+166    	; 0x24ce <__fp_inf>

00002428 <__addsf3x>:
    2428:	e9 2f       	mov	r30, r25
    242a:	cf df       	rcall	.-98     	; 0x23ca <__fp_split3>
    242c:	80 f3       	brcs	.-32     	; 0x240e <__fp_splitA+0x34>
    242e:	ba 17       	cp	r27, r26
    2430:	62 07       	cpc	r22, r18
    2432:	73 07       	cpc	r23, r19
    2434:	84 07       	cpc	r24, r20
    2436:	95 07       	cpc	r25, r21
    2438:	18 f0       	brcs	.+6      	; 0x2440 <__addsf3x+0x18>
    243a:	71 f4       	brne	.+28     	; 0x2458 <__addsf3x+0x30>
    243c:	9e f5       	brtc	.+102    	; 0x24a4 <__addsf3x+0x7c>
    243e:	8e c0       	rjmp	.+284    	; 0x255c <__fp_zero>
    2440:	0e f4       	brtc	.+2      	; 0x2444 <__addsf3x+0x1c>
    2442:	e0 95       	com	r30
    2444:	0b 2e       	mov	r0, r27
    2446:	ba 2f       	mov	r27, r26
    2448:	a0 2d       	mov	r26, r0
    244a:	0b 01       	movw	r0, r22
    244c:	b9 01       	movw	r22, r18
    244e:	90 01       	movw	r18, r0
    2450:	0c 01       	movw	r0, r24
    2452:	ca 01       	movw	r24, r20
    2454:	a0 01       	movw	r20, r0
    2456:	11 24       	eor	r1, r1
    2458:	ff 27       	eor	r31, r31
    245a:	59 1b       	sub	r21, r25
    245c:	99 f0       	breq	.+38     	; 0x2484 <__addsf3x+0x5c>
    245e:	59 3f       	cpi	r21, 0xF9	; 249
    2460:	50 f4       	brcc	.+20     	; 0x2476 <__addsf3x+0x4e>
    2462:	50 3e       	cpi	r21, 0xE0	; 224
    2464:	68 f1       	brcs	.+90     	; 0x24c0 <__addsf3x+0x98>
    2466:	1a 16       	cp	r1, r26
    2468:	f0 40       	sbci	r31, 0x00	; 0
    246a:	a2 2f       	mov	r26, r18
    246c:	23 2f       	mov	r18, r19
    246e:	34 2f       	mov	r19, r20
    2470:	44 27       	eor	r20, r20
    2472:	58 5f       	subi	r21, 0xF8	; 248
    2474:	f3 cf       	rjmp	.-26     	; 0x245c <__addsf3x+0x34>
    2476:	46 95       	lsr	r20
    2478:	37 95       	ror	r19
    247a:	27 95       	ror	r18
    247c:	a7 95       	ror	r26
    247e:	f0 40       	sbci	r31, 0x00	; 0
    2480:	53 95       	inc	r21
    2482:	c9 f7       	brne	.-14     	; 0x2476 <__addsf3x+0x4e>
    2484:	7e f4       	brtc	.+30     	; 0x24a4 <__addsf3x+0x7c>
    2486:	1f 16       	cp	r1, r31
    2488:	ba 0b       	sbc	r27, r26
    248a:	62 0b       	sbc	r22, r18
    248c:	73 0b       	sbc	r23, r19
    248e:	84 0b       	sbc	r24, r20
    2490:	ba f0       	brmi	.+46     	; 0x24c0 <__addsf3x+0x98>
    2492:	91 50       	subi	r25, 0x01	; 1
    2494:	a1 f0       	breq	.+40     	; 0x24be <__addsf3x+0x96>
    2496:	ff 0f       	add	r31, r31
    2498:	bb 1f       	adc	r27, r27
    249a:	66 1f       	adc	r22, r22
    249c:	77 1f       	adc	r23, r23
    249e:	88 1f       	adc	r24, r24
    24a0:	c2 f7       	brpl	.-16     	; 0x2492 <__addsf3x+0x6a>
    24a2:	0e c0       	rjmp	.+28     	; 0x24c0 <__addsf3x+0x98>
    24a4:	ba 0f       	add	r27, r26
    24a6:	62 1f       	adc	r22, r18
    24a8:	73 1f       	adc	r23, r19
    24aa:	84 1f       	adc	r24, r20
    24ac:	48 f4       	brcc	.+18     	; 0x24c0 <__addsf3x+0x98>
    24ae:	87 95       	ror	r24
    24b0:	77 95       	ror	r23
    24b2:	67 95       	ror	r22
    24b4:	b7 95       	ror	r27
    24b6:	f7 95       	ror	r31
    24b8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ba:	08 f0       	brcs	.+2      	; 0x24be <__addsf3x+0x96>
    24bc:	b3 cf       	rjmp	.-154    	; 0x2424 <__fp_splitA+0x4a>
    24be:	93 95       	inc	r25
    24c0:	88 0f       	add	r24, r24
    24c2:	08 f0       	brcs	.+2      	; 0x24c6 <__addsf3x+0x9e>
    24c4:	99 27       	eor	r25, r25
    24c6:	ee 0f       	add	r30, r30
    24c8:	97 95       	ror	r25
    24ca:	87 95       	ror	r24
    24cc:	08 95       	ret

000024ce <__fp_inf>:
    24ce:	97 f9       	bld	r25, 7
    24d0:	9f 67       	ori	r25, 0x7F	; 127
    24d2:	80 e8       	ldi	r24, 0x80	; 128
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	08 95       	ret

000024da <__fp_mpack>:
    24da:	9f 3f       	cpi	r25, 0xFF	; 255
    24dc:	31 f0       	breq	.+12     	; 0x24ea <__fp_mpack_finite+0xc>

000024de <__fp_mpack_finite>:
    24de:	91 50       	subi	r25, 0x01	; 1
    24e0:	20 f4       	brcc	.+8      	; 0x24ea <__fp_mpack_finite+0xc>
    24e2:	87 95       	ror	r24
    24e4:	77 95       	ror	r23
    24e6:	67 95       	ror	r22
    24e8:	b7 95       	ror	r27
    24ea:	88 0f       	add	r24, r24
    24ec:	91 1d       	adc	r25, r1
    24ee:	96 95       	lsr	r25
    24f0:	87 95       	ror	r24
    24f2:	97 f9       	bld	r25, 7
    24f4:	08 95       	ret

000024f6 <__fp_nan>:
    24f6:	9f ef       	ldi	r25, 0xFF	; 255
    24f8:	80 ec       	ldi	r24, 0xC0	; 192
    24fa:	08 95       	ret

000024fc <__fp_powsodd>:
    24fc:	9f 93       	push	r25
    24fe:	8f 93       	push	r24
    2500:	7f 93       	push	r23
    2502:	6f 93       	push	r22
    2504:	ff 93       	push	r31
    2506:	ef 93       	push	r30
    2508:	9b 01       	movw	r18, r22
    250a:	ac 01       	movw	r20, r24
    250c:	0b d8       	rcall	.-4074   	; 0x1524 <__mulsf3>
    250e:	ef 91       	pop	r30
    2510:	ff 91       	pop	r31
    2512:	2b d0       	rcall	.+86     	; 0x256a <__fp_powser>
    2514:	2f 91       	pop	r18
    2516:	3f 91       	pop	r19
    2518:	4f 91       	pop	r20
    251a:	5f 91       	pop	r21
    251c:	03 c8       	rjmp	.-4090   	; 0x1524 <__mulsf3>

0000251e <__fp_pscA>:
    251e:	00 24       	eor	r0, r0
    2520:	0a 94       	dec	r0
    2522:	16 16       	cp	r1, r22
    2524:	17 06       	cpc	r1, r23
    2526:	18 06       	cpc	r1, r24
    2528:	09 06       	cpc	r0, r25
    252a:	08 95       	ret

0000252c <__fp_pscB>:
    252c:	00 24       	eor	r0, r0
    252e:	0a 94       	dec	r0
    2530:	12 16       	cp	r1, r18
    2532:	13 06       	cpc	r1, r19
    2534:	14 06       	cpc	r1, r20
    2536:	05 06       	cpc	r0, r21
    2538:	08 95       	ret

0000253a <__fp_round>:
    253a:	09 2e       	mov	r0, r25
    253c:	03 94       	inc	r0
    253e:	00 0c       	add	r0, r0
    2540:	11 f4       	brne	.+4      	; 0x2546 <__fp_round+0xc>
    2542:	88 23       	and	r24, r24
    2544:	52 f0       	brmi	.+20     	; 0x255a <__fp_round+0x20>
    2546:	bb 0f       	add	r27, r27
    2548:	40 f4       	brcc	.+16     	; 0x255a <__fp_round+0x20>
    254a:	bf 2b       	or	r27, r31
    254c:	11 f4       	brne	.+4      	; 0x2552 <__fp_round+0x18>
    254e:	60 ff       	sbrs	r22, 0
    2550:	04 c0       	rjmp	.+8      	; 0x255a <__fp_round+0x20>
    2552:	6f 5f       	subi	r22, 0xFF	; 255
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	8f 4f       	sbci	r24, 0xFF	; 255
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	08 95       	ret

0000255c <__fp_zero>:
    255c:	e8 94       	clt

0000255e <__fp_szero>:
    255e:	bb 27       	eor	r27, r27
    2560:	66 27       	eor	r22, r22
    2562:	77 27       	eor	r23, r23
    2564:	cb 01       	movw	r24, r22
    2566:	97 f9       	bld	r25, 7
    2568:	08 95       	ret

0000256a <__fp_powser>:
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	1f 93       	push	r17
    2570:	0f 93       	push	r16
    2572:	ff 92       	push	r15
    2574:	ef 92       	push	r14
    2576:	df 92       	push	r13
    2578:	7b 01       	movw	r14, r22
    257a:	8c 01       	movw	r16, r24
    257c:	68 94       	set
    257e:	05 c0       	rjmp	.+10     	; 0x258a <__fp_powser+0x20>
    2580:	da 2e       	mov	r13, r26
    2582:	ef 01       	movw	r28, r30
    2584:	21 d0       	rcall	.+66     	; 0x25c8 <__mulsf3x>
    2586:	fe 01       	movw	r30, r28
    2588:	e8 94       	clt
    258a:	a5 91       	lpm	r26, Z+
    258c:	25 91       	lpm	r18, Z+
    258e:	35 91       	lpm	r19, Z+
    2590:	45 91       	lpm	r20, Z+
    2592:	55 91       	lpm	r21, Z+
    2594:	ae f3       	brts	.-22     	; 0x2580 <__fp_powser+0x16>
    2596:	ef 01       	movw	r28, r30
    2598:	47 df       	rcall	.-370    	; 0x2428 <__addsf3x>
    259a:	fe 01       	movw	r30, r28
    259c:	97 01       	movw	r18, r14
    259e:	a8 01       	movw	r20, r16
    25a0:	da 94       	dec	r13
    25a2:	79 f7       	brne	.-34     	; 0x2582 <__fp_powser+0x18>
    25a4:	df 90       	pop	r13
    25a6:	ef 90       	pop	r14
    25a8:	ff 90       	pop	r15
    25aa:	0f 91       	pop	r16
    25ac:	1f 91       	pop	r17
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret
    25b4:	b4 df       	rcall	.-152    	; 0x251e <__fp_pscA>
    25b6:	28 f0       	brcs	.+10     	; 0x25c2 <__fp_powser+0x58>
    25b8:	b9 df       	rcall	.-142    	; 0x252c <__fp_pscB>
    25ba:	18 f0       	brcs	.+6      	; 0x25c2 <__fp_powser+0x58>
    25bc:	95 23       	and	r25, r21
    25be:	09 f0       	breq	.+2      	; 0x25c2 <__fp_powser+0x58>
    25c0:	86 cf       	rjmp	.-244    	; 0x24ce <__fp_inf>
    25c2:	99 cf       	rjmp	.-206    	; 0x24f6 <__fp_nan>
    25c4:	11 24       	eor	r1, r1
    25c6:	cb cf       	rjmp	.-106    	; 0x255e <__fp_szero>

000025c8 <__mulsf3x>:
    25c8:	00 df       	rcall	.-512    	; 0x23ca <__fp_split3>
    25ca:	a0 f3       	brcs	.-24     	; 0x25b4 <__fp_powser+0x4a>

000025cc <__mulsf3_pse>:
    25cc:	95 9f       	mul	r25, r21
    25ce:	d1 f3       	breq	.-12     	; 0x25c4 <__fp_powser+0x5a>
    25d0:	95 0f       	add	r25, r21
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	55 1f       	adc	r21, r21
    25d6:	62 9f       	mul	r22, r18
    25d8:	f0 01       	movw	r30, r0
    25da:	72 9f       	mul	r23, r18
    25dc:	bb 27       	eor	r27, r27
    25de:	f0 0d       	add	r31, r0
    25e0:	b1 1d       	adc	r27, r1
    25e2:	63 9f       	mul	r22, r19
    25e4:	aa 27       	eor	r26, r26
    25e6:	f0 0d       	add	r31, r0
    25e8:	b1 1d       	adc	r27, r1
    25ea:	aa 1f       	adc	r26, r26
    25ec:	64 9f       	mul	r22, r20
    25ee:	66 27       	eor	r22, r22
    25f0:	b0 0d       	add	r27, r0
    25f2:	a1 1d       	adc	r26, r1
    25f4:	66 1f       	adc	r22, r22
    25f6:	82 9f       	mul	r24, r18
    25f8:	22 27       	eor	r18, r18
    25fa:	b0 0d       	add	r27, r0
    25fc:	a1 1d       	adc	r26, r1
    25fe:	62 1f       	adc	r22, r18
    2600:	73 9f       	mul	r23, r19
    2602:	b0 0d       	add	r27, r0
    2604:	a1 1d       	adc	r26, r1
    2606:	62 1f       	adc	r22, r18
    2608:	83 9f       	mul	r24, r19
    260a:	a0 0d       	add	r26, r0
    260c:	61 1d       	adc	r22, r1
    260e:	22 1f       	adc	r18, r18
    2610:	74 9f       	mul	r23, r20
    2612:	33 27       	eor	r19, r19
    2614:	a0 0d       	add	r26, r0
    2616:	61 1d       	adc	r22, r1
    2618:	23 1f       	adc	r18, r19
    261a:	84 9f       	mul	r24, r20
    261c:	60 0d       	add	r22, r0
    261e:	21 1d       	adc	r18, r1
    2620:	82 2f       	mov	r24, r18
    2622:	76 2f       	mov	r23, r22
    2624:	6a 2f       	mov	r22, r26
    2626:	11 24       	eor	r1, r1
    2628:	9f 57       	subi	r25, 0x7F	; 127
    262a:	50 40       	sbci	r21, 0x00	; 0
    262c:	8a f0       	brmi	.+34     	; 0x2650 <__mulsf3_pse+0x84>
    262e:	e1 f0       	breq	.+56     	; 0x2668 <__mulsf3_pse+0x9c>
    2630:	88 23       	and	r24, r24
    2632:	4a f0       	brmi	.+18     	; 0x2646 <__mulsf3_pse+0x7a>
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	bb 1f       	adc	r27, r27
    263a:	66 1f       	adc	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	88 1f       	adc	r24, r24
    2640:	91 50       	subi	r25, 0x01	; 1
    2642:	50 40       	sbci	r21, 0x00	; 0
    2644:	a9 f7       	brne	.-22     	; 0x2630 <__mulsf3_pse+0x64>
    2646:	9e 3f       	cpi	r25, 0xFE	; 254
    2648:	51 05       	cpc	r21, r1
    264a:	70 f0       	brcs	.+28     	; 0x2668 <__mulsf3_pse+0x9c>
    264c:	40 cf       	rjmp	.-384    	; 0x24ce <__fp_inf>
    264e:	87 cf       	rjmp	.-242    	; 0x255e <__fp_szero>
    2650:	5f 3f       	cpi	r21, 0xFF	; 255
    2652:	ec f3       	brlt	.-6      	; 0x264e <__mulsf3_pse+0x82>
    2654:	98 3e       	cpi	r25, 0xE8	; 232
    2656:	dc f3       	brlt	.-10     	; 0x264e <__mulsf3_pse+0x82>
    2658:	86 95       	lsr	r24
    265a:	77 95       	ror	r23
    265c:	67 95       	ror	r22
    265e:	b7 95       	ror	r27
    2660:	f7 95       	ror	r31
    2662:	e7 95       	ror	r30
    2664:	9f 5f       	subi	r25, 0xFF	; 255
    2666:	c1 f7       	brne	.-16     	; 0x2658 <__mulsf3_pse+0x8c>
    2668:	fe 2b       	or	r31, r30
    266a:	88 0f       	add	r24, r24
    266c:	91 1d       	adc	r25, r1
    266e:	96 95       	lsr	r25
    2670:	87 95       	ror	r24
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <_exit>:
    2676:	f8 94       	cli

00002678 <__stop_program>:
    2678:	ff cf       	rjmp	.-2      	; 0x2678 <__stop_program>
