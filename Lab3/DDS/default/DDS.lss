
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000236  00800100  0000222a  000022be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000222a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019f  00800336  00800336  000024f4  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007e0  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f62  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014a8  00000000  00000000  00005df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c83  00000000  00000000  0000729e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00008f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000844  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001048  00000000  00000000  00009b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000abc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_9>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <LCDinit+0x2a>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDMainFrequency>:
      bb:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000c7 <LCDMainDecay>:
      c7:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000d4 <LCDMainRise>:
      d4:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000e0 <LCDFMFreq>:
      e0:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000ea <LCDFMDepth>:
      ea:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

000000f5 <LCDFMDecay>:
      f5:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

00000100 <LCDVoice>:
     100:	56 4f 49 43 45 20 00 00                             VOICE ..

00000108 <LcdCustomChar>:
     108:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     118:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     128:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     138:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	13 e0       	ldi	r17, 0x03	; 3
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	ea e2       	ldi	r30, 0x2A	; 42
     15c:	f2 e2       	ldi	r31, 0x22	; 34
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	a6 33       	cpi	r26, 0x36	; 54
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	14 e0       	ldi	r17, 0x04	; 4
     16c:	a6 e3       	ldi	r26, 0x36	; 54
     16e:	b3 e0       	ldi	r27, 0x03	; 3
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a5 3d       	cpi	r26, 0xD5	; 213
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 34 03 	call	0x668	; 0x668 <main>
     17e:	0c 94 13 11 	jmp	0x2226	; 0x2226 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <sample>:

//returns OCR0A
uint8_t sample(void) {
	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if (!(time & 0x0ff)) {
     186:	80 91 c2 04 	lds	r24, 0x04C2
     18a:	90 91 c3 04 	lds	r25, 0x04C3
     18e:	88 23       	and	r24, r24
     190:	09 f0       	breq	.+2      	; 0x194 <sample+0xe>
     192:	3f c0       	rjmp	.+126    	; 0x212 <sample+0x8c>
		amp_fall_main = amp_fall_main - (amp_fall_main>>decay_main) ;
     194:	20 91 9f 03 	lds	r18, 0x039F
     198:	30 91 a0 03 	lds	r19, 0x03A0
     19c:	80 91 9f 03 	lds	r24, 0x039F
     1a0:	90 91 a0 03 	lds	r25, 0x03A0
     1a4:	40 91 90 03 	lds	r20, 0x0390
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <sample+0x28>
     1aa:	96 95       	lsr	r25
     1ac:	87 95       	ror	r24
     1ae:	4a 95       	dec	r20
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <sample+0x24>
     1b2:	28 1b       	sub	r18, r24
     1b4:	39 0b       	sbc	r19, r25
     1b6:	30 93 a0 03 	sts	0x03A0, r19
     1ba:	20 93 9f 03 	sts	0x039F, r18
		rise_phase_main = rise_phase_main - (rise_phase_main>>rise_main);
     1be:	20 91 a4 04 	lds	r18, 0x04A4
     1c2:	30 91 a5 04 	lds	r19, 0x04A5
     1c6:	80 91 a4 04 	lds	r24, 0x04A4
     1ca:	90 91 a5 04 	lds	r25, 0x04A5
     1ce:	40 91 8d 03 	lds	r20, 0x038D
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <sample+0x52>
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	4a 95       	dec	r20
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <sample+0x4e>
     1dc:	28 1b       	sub	r18, r24
     1de:	39 0b       	sbc	r19, r25
     1e0:	30 93 a5 04 	sts	0x04A5, r19
     1e4:	20 93 a4 04 	sts	0x04A4, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1 = amp_fm1 - (amp_fm1>>decay_fm1) ;
     1e8:	20 91 94 03 	lds	r18, 0x0394
     1ec:	30 91 95 03 	lds	r19, 0x0395
     1f0:	80 91 94 03 	lds	r24, 0x0394
     1f4:	90 91 95 03 	lds	r25, 0x0395
     1f8:	40 91 c7 04 	lds	r20, 0x04C7
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <sample+0x7c>
     1fe:	96 95       	lsr	r25
     200:	87 95       	ror	r24
     202:	4a 95       	dec	r20
     204:	e2 f7       	brpl	.-8      	; 0x1fe <sample+0x78>
     206:	28 1b       	sub	r18, r24
     208:	39 0b       	sbc	r19, r25
     20a:	30 93 95 03 	sts	0x0395, r19
     20e:	20 93 94 03 	sts	0x0394, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main =  max_amp - rise_phase_main;
     212:	80 91 a4 04 	lds	r24, 0x04A4
     216:	90 91 a5 04 	lds	r25, 0x04A5
     21a:	4f ef       	ldi	r20, 0xFF	; 255
     21c:	5f e7       	ldi	r21, 0x7F	; 127
     21e:	9a 01       	movw	r18, r20
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	30 93 c6 04 	sts	0x04C6, r19
     228:	20 93 c5 04 	sts	0x04C5, r18
	// product of rise and fall exponentials is the amplitude envelope
	amp_main = (amp_rise_main>>8) * (amp_fall_main>>8) ;
     22c:	20 91 c5 04 	lds	r18, 0x04C5
     230:	30 91 c6 04 	lds	r19, 0x04C6
     234:	80 91 9f 03 	lds	r24, 0x039F
     238:	90 91 a0 03 	lds	r25, 0x03A0
     23c:	89 2f       	mov	r24, r25
     23e:	99 27       	eor	r25, r25
     240:	23 2f       	mov	r18, r19
     242:	33 27       	eor	r19, r19
     244:	bc 01       	movw	r22, r24
     246:	62 9f       	mul	r22, r18
     248:	c0 01       	movw	r24, r0
     24a:	63 9f       	mul	r22, r19
     24c:	90 0d       	add	r25, r0
     24e:	72 9f       	mul	r23, r18
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	90 93 be 04 	sts	0x04BE, r25
     258:	80 93 bd 04 	sts	0x04BD, r24

	// Init the synth
	if (pluck==1) {
     25c:	80 91 93 03 	lds	r24, 0x0393
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	d1 f4       	brne	.+52     	; 0x298 <sample+0x112>
		amp_fall_main = max_amp; 
     264:	50 93 a0 03 	sts	0x03A0, r21
     268:	40 93 9f 03 	sts	0x039F, r20
		rise_phase_main = max_amp ;
     26c:	50 93 a5 04 	sts	0x04A5, r21
     270:	40 93 a4 04 	sts	0x04A4, r20
		amp_rise_main = 0 ;
     274:	10 92 c6 04 	sts	0x04C6, r1
     278:	10 92 c5 04 	sts	0x04C5, r1
		amp_fm1 = max_amp ;
     27c:	50 93 95 03 	sts	0x0395, r21
     280:	40 93 94 03 	sts	0x0394, r20
		// phase lock the synth
		acc_fm1 = 0 ;
     284:	10 92 9b 03 	sts	0x039B, r1
     288:	10 92 9a 03 	sts	0x039A, r1
		acc_main = 0;
     28c:	10 92 8f 03 	sts	0x038F, r1
     290:	10 92 8e 03 	sts	0x038E, r1
		pluck = 0;
     294:	10 92 93 03 	sts	0x0393, r1
	}

	//the FM DDR -- feeds into final DDR
	acc_fm1 = acc_fm1 + inc_fm1 ;
     298:	20 91 9a 03 	lds	r18, 0x039A
     29c:	30 91 9b 03 	lds	r19, 0x039B
     2a0:	80 91 ba 04 	lds	r24, 0x04BA
     2a4:	90 91 bb 04 	lds	r25, 0x04BB
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	90 93 9b 03 	sts	0x039B, r25
     2b0:	80 93 9a 03 	sts	0x039A, r24
	high_fm1 = (char)(acc_fm1 >> 8) ;
     2b4:	80 91 9a 03 	lds	r24, 0x039A
     2b8:	90 91 9b 03 	lds	r25, 0x039B
     2bc:	90 93 ca 04 	sts	0x04CA, r25
	fm1 = sineTable[high_fm1] ;
     2c0:	e0 91 ca 04 	lds	r30, 0x04CA
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ec 55       	subi	r30, 0x5C	; 92
     2c8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ca:	40 81       	ld	r20, Z
     2cc:	40 93 9c 03 	sts	0x039C, r20

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main = acc_main + (inc_main + (fm1*(amp_fm1>>depth_fm1))) ;
     2d0:	60 91 8e 03 	lds	r22, 0x038E
     2d4:	70 91 8f 03 	lds	r23, 0x038F
     2d8:	20 91 97 03 	lds	r18, 0x0397
     2dc:	30 91 98 03 	lds	r19, 0x0398
     2e0:	80 91 94 03 	lds	r24, 0x0394
     2e4:	90 91 95 03 	lds	r25, 0x0395
     2e8:	e0 91 96 03 	lds	r30, 0x0396
     2ec:	26 0f       	add	r18, r22
     2ee:	37 1f       	adc	r19, r23
     2f0:	55 27       	eor	r21, r21
     2f2:	47 fd       	sbrc	r20, 7
     2f4:	50 95       	com	r21
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <sample+0x176>
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	ea 95       	dec	r30
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <sample+0x172>
     300:	bc 01       	movw	r22, r24
     302:	46 9f       	mul	r20, r22
     304:	c0 01       	movw	r24, r0
     306:	47 9f       	mul	r20, r23
     308:	90 0d       	add	r25, r0
     30a:	56 9f       	mul	r21, r22
     30c:	90 0d       	add	r25, r0
     30e:	11 24       	eor	r1, r1
     310:	28 0f       	add	r18, r24
     312:	39 1f       	adc	r19, r25
     314:	30 93 8f 03 	sts	0x038F, r19
     318:	20 93 8e 03 	sts	0x038E, r18
	high_main = (char)(acc_main >> 8) ;
     31c:	80 91 8e 03 	lds	r24, 0x038E
     320:	90 91 8f 03 	lds	r25, 0x038F
     324:	90 93 c0 04 	sts	0x04C0, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main>>8) * (int)sineTable[high_main])>>7) ;
     328:	20 91 bd 04 	lds	r18, 0x04BD
     32c:	30 91 be 04 	lds	r19, 0x04BE
     330:	e0 91 c0 04 	lds	r30, 0x04C0
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ec 55       	subi	r30, 0x5C	; 92
     338:	fc 4f       	sbci	r31, 0xFC	; 252
     33a:	80 81       	ld	r24, Z
     33c:	99 27       	eor	r25, r25
     33e:	87 fd       	sbrc	r24, 7
     340:	90 95       	com	r25
     342:	23 2f       	mov	r18, r19
     344:	33 27       	eor	r19, r19
     346:	ac 01       	movw	r20, r24
     348:	42 9f       	mul	r20, r18
     34a:	c0 01       	movw	r24, r0
     34c:	43 9f       	mul	r20, r19
     34e:	90 0d       	add	r25, r0
     350:	52 9f       	mul	r21, r18
     352:	90 0d       	add	r25, r0
     354:	11 24       	eor	r1, r1
     356:	88 0f       	add	r24, r24
     358:	89 2f       	mov	r24, r25
     35a:	88 1f       	adc	r24, r24
     35c:	99 0b       	sbc	r25, r25
     35e:	91 95       	neg	r25
}
     360:	80 58       	subi	r24, 0x80	; 128
     362:	08 95       	ret

00000364 <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 8000
{ 
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	ef 93       	push	r30
     384:	ff 93       	push	r31
	// turn on timer for profiling
	//TCNT2 = 0; TCCR2B = 1;

	// Set Sample
	OCR0A = sample();
     386:	0e 94 c3 00 	call	0x186	; 0x186 <sample>
     38a:	87 bd       	out	0x27, r24	; 39
	
	time++;     //ticks at 8 KHz 
     38c:	80 91 c2 04 	lds	r24, 0x04C2
     390:	90 91 c3 04 	lds	r25, 0x04C3
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	90 93 c3 04 	sts	0x04C3, r25
     39a:	80 93 c2 04 	sts	0x04C2, r24
	// profiling 
	//TCCR2B = 0;
} 
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <updateLCD>:

	CopyStringtoLCD(LCDVoice, 0, 0);
	LCDGotoXY(voiceStrLen, 0);
	sprintf(LCDBuffer, "%d", voice);
	LCDstring(LCDBuffer, 1);
}
     3c0:	08 95       	ret

000003c2 <updateManual>:

void updateManual(void){

}
     3c2:	08 95       	ret

000003c4 <setState>:

void setState(uint8_t s) {
	state = s;
     3c4:	80 93 9e 03 	sts	0x039E, r24
	updateLCD();
}
     3c8:	08 95       	ret

000003ca <setNextNote>:

//set the next note to play
void setNextNote(){
	switch (seqId){
     3ca:	80 91 b7 04 	lds	r24, 0x04B7
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	99 f4       	brne	.+38     	; 0x3f8 <setNextNote+0x2e>
		case 1:
			inc_main = markovFrequencies[curNote++ % NUM_NOTES];
     3d2:	80 91 cb 04 	lds	r24, 0x04CB
     3d6:	e8 2f       	mov	r30, r24
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	e7 70       	andi	r30, 0x07	; 7
     3dc:	f0 70       	andi	r31, 0x00	; 0
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	ed 5f       	subi	r30, 0xFD	; 253
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	20 81       	ld	r18, Z
     3e8:	31 81       	ldd	r19, Z+1	; 0x01
     3ea:	30 93 98 03 	sts	0x0398, r19
     3ee:	20 93 97 03 	sts	0x0397, r18
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 cb 04 	sts	0x04CB, r24
     3f8:	08 95       	ret

000003fa <nextState>:
	//uint8_t nextNote = (rand() % (RND_MAX - RND_MIN + 1)) + RND_MIN;
}

// update to next state if key is pressed
uint8_t waitingForInput = 0;
void nextState(void){
     3fa:	0f 93       	push	r16
	if(waitingForInput) {
		// output input to screen
	}
	uint8_t key = KeypadKey();
     3fc:	0e 94 21 04 	call	0x842	; 0x842 <KeypadKey>
     400:	08 2f       	mov	r16, r24
	if(key != 0) {
     402:	88 23       	and	r24, r24
     404:	e1 f1       	breq	.+120    	; 0x47e <nextState+0x84>
		//_delay_ms(1000);
		sprintf(LCDBuffer, "%d", key);
     406:	00 d0       	rcall	.+0      	; 0x408 <nextState+0xe>
     408:	00 d0       	rcall	.+0      	; 0x40a <nextState+0x10>
     40a:	00 d0       	rcall	.+0      	; 0x40c <nextState+0x12>
     40c:	ed b7       	in	r30, 0x3d	; 61
     40e:	fe b7       	in	r31, 0x3e	; 62
     410:	31 96       	adiw	r30, 0x01	; 1
     412:	86 ea       	ldi	r24, 0xA6	; 166
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	ad b7       	in	r26, 0x3d	; 61
     418:	be b7       	in	r27, 0x3e	; 62
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	11 97       	sbiw	r26, 0x01	; 1
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	93 83       	std	Z+3, r25	; 0x03
     428:	82 83       	std	Z+2, r24	; 0x02
     42a:	04 83       	std	Z+4, r16	; 0x04
     42c:	15 82       	std	Z+5, r1	; 0x05
     42e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <sprintf>
		//LCDGotoXY(0, 0);
		LCDstring(LCDBuffer, strlen(LCDBuffer));
     432:	e6 ea       	ldi	r30, 0xA6	; 166
     434:	f4 e0       	ldi	r31, 0x04	; 4
     436:	01 90       	ld	r0, Z+
     438:	00 20       	and	r0, r0
     43a:	e9 f7       	brne	.-6      	; 0x436 <nextState+0x3c>
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	e6 5a       	subi	r30, 0xA6	; 166
     440:	f4 40       	sbci	r31, 0x04	; 4
     442:	ad b7       	in	r26, 0x3d	; 61
     444:	be b7       	in	r27, 0x3e	; 62
     446:	16 96       	adiw	r26, 0x06	; 6
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	be bf       	out	0x3e, r27	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	ad bf       	out	0x3d, r26	; 61
     452:	86 ea       	ldi	r24, 0xA6	; 166
     454:	94 e0       	ldi	r25, 0x04	; 4
     456:	6e 2f       	mov	r22, r30
     458:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LCDstring>
	}
	switch(key) {
     45c:	0b 37       	cpi	r16, 0x7B	; 123
     45e:	19 f0       	breq	.+6      	; 0x466 <nextState+0x6c>
     460:	07 3e       	cpi	r16, 0xE7	; 231
     462:	69 f4       	brne	.+26     	; 0x47e <nextState+0x84>
     464:	02 c0       	rjmp	.+4      	; 0x46a <nextState+0x70>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	08 c0       	rjmp	.+16     	; 0x47a <nextState+0x80>
	switch(key) {
		case KEY_P:
			setState(MAN);
			break;
		case KEY_A:
			setState((state + 1) % 10);
     46a:	80 91 9e 03 	lds	r24, 0x039E
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	6a e0       	ldi	r22, 0x0A	; 10
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divmodhi4>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     47a:	80 93 9e 03 	sts	0x039E, r24
			break;
		case KEY_A:
			setState((state + 1) % 10);
			break;
	}
	switch (state) {
     47e:	80 91 9e 03 	lds	r24, 0x039E
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	41 f1       	breq	.+80     	; 0x4d6 <nextState+0xdc>
     486:	87 30       	cpi	r24, 0x07	; 7
     488:	40 f4       	brcc	.+16     	; 0x49a <nextState+0xa0>
     48a:	84 30       	cpi	r24, 0x04	; 4
     48c:	a1 f0       	breq	.+40     	; 0x4b6 <nextState+0xbc>
     48e:	85 30       	cpi	r24, 0x05	; 5
     490:	d8 f4       	brcc	.+54     	; 0x4c8 <nextState+0xce>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	09 f0       	breq	.+2      	; 0x498 <nextState+0x9e>
     496:	44 c0       	rjmp	.+136    	; 0x520 <nextState+0x126>
     498:	07 c0       	rjmp	.+14     	; 0x4a8 <nextState+0xae>
     49a:	88 30       	cpi	r24, 0x08	; 8
     49c:	61 f1       	breq	.+88     	; 0x4f6 <nextState+0xfc>
     49e:	88 30       	cpi	r24, 0x08	; 8
     4a0:	08 f1       	brcs	.+66     	; 0x4e4 <nextState+0xea>
     4a2:	89 30       	cpi	r24, 0x09	; 9
     4a4:	e9 f5       	brne	.+122    	; 0x520 <nextState+0x126>
     4a6:	2e c0       	rjmp	.+92     	; 0x504 <nextState+0x10a>
		case SET_SEQUENCE:
			if(key == KEY_D) {
     4a8:	07 37       	cpi	r16, 0x77	; 119
     4aa:	a9 f5       	brne	.+106    	; 0x516 <nextState+0x11c>
				seqId = KeypadInt();
     4ac:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4b0:	80 93 b7 04 	sts	0x04B7, r24
     4b4:	2d c0       	rjmp	.+90     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_MAIN:
			if(key == KEY_D) {
     4b6:	07 37       	cpi	r16, 0x77	; 119
     4b8:	71 f5       	brne	.+92     	; 0x516 <nextState+0x11c>
				inc_main = KeypadInt();
     4ba:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4be:	90 93 98 03 	sts	0x0398, r25
     4c2:	80 93 97 03 	sts	0x0397, r24
     4c6:	24 c0       	rjmp	.+72     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_MAIN:
			if(key == KEY_D) {
     4c8:	07 37       	cpi	r16, 0x77	; 119
     4ca:	29 f5       	brne	.+74     	; 0x516 <nextState+0x11c>
				decay_main = KeypadInt();
     4cc:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4d0:	80 93 90 03 	sts	0x0390, r24
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_RISE_MAIN:
			if(key == KEY_D) {
     4d6:	07 37       	cpi	r16, 0x77	; 119
     4d8:	f1 f4       	brne	.+60     	; 0x516 <nextState+0x11c>
				rise_main = KeypadInt();
     4da:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4de:	80 93 8d 03 	sts	0x038D, r24
     4e2:	16 c0       	rjmp	.+44     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_FM:
			if(key == KEY_D) {
     4e4:	07 37       	cpi	r16, 0x77	; 119
     4e6:	b9 f4       	brne	.+46     	; 0x516 <nextState+0x11c>
				inc_fm1 = KeypadInt();
     4e8:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4ec:	90 93 bb 04 	sts	0x04BB, r25
     4f0:	80 93 ba 04 	sts	0x04BA, r24
     4f4:	0d c0       	rjmp	.+26     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DEPTH_FM:
			if(key == KEY_D) {
     4f6:	07 37       	cpi	r16, 0x77	; 119
     4f8:	71 f4       	brne	.+28     	; 0x516 <nextState+0x11c>
				depth_fm1 = KeypadInt();
     4fa:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     4fe:	80 93 96 03 	sts	0x0396, r24
     502:	06 c0       	rjmp	.+12     	; 0x510 <nextState+0x116>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_FM:
			if(key == KEY_D) {
     504:	07 37       	cpi	r16, 0x77	; 119
     506:	39 f4       	brne	.+14     	; 0x516 <nextState+0x11c>
				decay_fm1 = KeypadInt();
     508:	0e 94 2b 04 	call	0x856	; 0x856 <KeypadInt>
     50c:	80 93 c7 04 	sts	0x04C7, r24
				waitingForInput = 0;
     510:	10 92 36 03 	sts	0x0336, r1
     514:	05 c0       	rjmp	.+10     	; 0x520 <nextState+0x126>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 9e 03 	sts	0x039E, r24
			if(key == KEY_D) {
				decay_fm1 = KeypadInt();
				waitingForInput = 0;
			} else {
				setState(MAIN_SCREEN);
				waitingForInput = 1;
     51c:	80 93 36 03 	sts	0x0336, r24
			}
			break;
		
	}
}
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     524:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDinit>
	LCDcursorOFF();
     528:	0e 94 40 05 	call	0xa80	; 0xa80 <LCDcursorOFF>
	LCDclr();				//clear the display
     52c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCDclr>
	LCDGotoXY(0,0);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	0e 94 8e 04 	call	0x91c	; 0x91c <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     538:	8e e8       	ldi	r24, 0x8E	; 142
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	0e 94 9d 04 	call	0x93a	; 0x93a <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     544:	8b e9       	ldi	r24, 0x9B	; 155
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	0e 94 9d 04 	call	0x93a	; 0x93a <CopyStringtoLCD>
}
     550:	08 95       	ret

00000552 <Initialize>:
	KeypadDebounce();
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
	// make B.3 an output
	DDRB = (1<<PINB3) ;
     55a:	88 e0       	ldi	r24, 0x08	; 8
     55c:	84 b9       	out	0x04, r24	; 4

	//Keypad
	DDRD=0x00;
     55e:	1a b8       	out	0x0a, r1	; 10
     560:	04 ea       	ldi	r16, 0xA4	; 164
     562:	13 e0       	ldi	r17, 0x03	; 3
     564:	c0 e0       	ldi	r28, 0x00	; 0
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	1f c0       	rjmp	.+62     	; 0x5a8 <Initialize+0x56>
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     56a:	be 01       	movw	r22, r28
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__floatunsisf>
     574:	26 e5       	ldi	r18, 0x56	; 86
     576:	3e e0       	ldi	r19, 0x0E	; 14
     578:	49 ec       	ldi	r20, 0xC9	; 201
     57a:	50 e4       	ldi	r21, 0x40	; 64
     57c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__mulsf3>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e8       	ldi	r20, 0x80	; 128
     586:	5b e3       	ldi	r21, 0x3B	; 59
     588:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__mulsf3>
     58c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sin>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	4e ef       	ldi	r20, 0xFE	; 254
     596:	52 e4       	ldi	r21, 0x42	; 66
     598:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__mulsf3>
     59c:	0e 94 94 06 	call	0xd28	; 0xd28 <__fixunssfsi>
     5a0:	f8 01       	movw	r30, r16
     5a2:	61 93       	st	Z+, r22
     5a4:	8f 01       	movw	r16, r30
     5a6:	21 96       	adiw	r28, 0x01	; 1
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
     5a8:	cf 3f       	cpi	r28, 0xFF	; 255
     5aa:	d1 05       	cpc	r29, r1
     5ac:	f1 f2       	breq	.-68     	; 0x56a <Initialize+0x18>
     5ae:	e8 f2       	brcs	.-70     	; 0x56a <Initialize+0x18>
     5b0:	d0 93 a3 03 	sts	0x03A3, r29
     5b4:	c0 93 a2 03 	sts	0x03A2, r28
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
	}  

	// init the time counter
	time=0;
     5b8:	10 92 c3 04 	sts	0x04C3, r1
     5bc:	10 92 c2 04 	sts	0x04C2, r1

	// timer 0 runs at full rate
	TCCR0B = 1 ;  
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	85 bd       	out	0x25, r24	; 37
	//turn off timer 0 overflow ISR
	TIMSK0 = 0 ;
     5c4:	10 92 6e 00 	sts	0x006E, r1
	// turn on PWM
	// turn on fast PWM and OC0A output
	// at full clock rate, toggle OC0A (pin B3) 
	// 16 microsec per PWM cycle sample time
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     5c8:	83 ec       	ldi	r24, 0xC3	; 195
     5ca:	84 bd       	out	0x24, r24	; 36
	OCR0A = 128 ; // set PWM to half full scale
     5cc:	80 e8       	ldi	r24, 0x80	; 128
     5ce:	87 bd       	out	0x27, r24	; 39

	// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	OCR1A = 1999 ; // 2000 ticks
     5d0:	8f ec       	ldi	r24, 0xCF	; 207
     5d2:	97 e0       	ldi	r25, 0x07	; 7
     5d4:	90 93 89 00 	sts	0x0089, r25
     5d8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     5e2:	29 e0       	ldi	r18, 0x09	; 9
     5e4:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0x00;	//turn off pwm and oc lines
     5e8:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 2 cmp match ISR
     5ec:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     5f0:	89 ef       	ldi	r24, 0xF9	; 249
     5f2:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     5f6:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	80 93 b1 00 	sts	0x00B1, r24


	seqStrLen = strlen(LCDSequenceId);
     600:	8c e0       	ldi	r24, 0x0C	; 12
     602:	80 93 9d 03 	sts	0x039D, r24
	mainFreqStrLen = strlen(LCDMainFrequency);
     606:	9a e0       	ldi	r25, 0x0A	; 10
     608:	90 93 b9 04 	sts	0x04B9, r25
	mainDecayStrLen = strlen(LCDMainDecay);
     60c:	8b e0       	ldi	r24, 0x0B	; 11
     60e:	80 93 92 03 	sts	0x0392, r24
	mainRiseStrLen = strlen(LCDMainRise);
     612:	90 93 c8 04 	sts	0x04C8, r25
	fmFreqStrLen = strlen(LCDFMFreq);
     616:	88 e0       	ldi	r24, 0x08	; 8
     618:	80 93 c1 04 	sts	0x04C1, r24
	fmDepthStrLen = strlen(LCDFMDepth);
     61c:	20 93 c9 04 	sts	0x04C9, r18
	fmDecayStrLen = strlen(LCDFMDecay);
     620:	20 93 99 03 	sts	0x0399, r18
	voiceStrLen = strlen(LCDVoice);
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	80 93 a1 03 	sts	0x03A1, r24

	initLCD();
     62a:	0e 94 92 02 	call	0x524	; 0x524 <initLCD>

	// turn on all ISRs
	sei() ;
     62e:	78 94       	sei
	///////////////////////////////////////////////////
	// Sound parameters
	///////////////////////////////////////////////////
	// Base frequency
	// 2^16/8000*freq = 8.192*freq
	inc_main = (int)(8.192 * 261) ; 
     630:	8a e5       	ldi	r24, 0x5A	; 90
     632:	98 e0       	ldi	r25, 0x08	; 8
     634:	90 93 98 03 	sts	0x0398, r25
     638:	80 93 97 03 	sts	0x0397, r24
	// rise and decay SHIFT factor  -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_main = 4 ;
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	80 93 90 03 	sts	0x0390, r24
	rise_main = 0 ;
     642:	10 92 8d 03 	sts	0x038D, r1
	//
	// FM modulation rate -- also a frequency
	inc_fm1 = (int)(8.192 * 65) ;
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	90 93 bb 04 	sts	0x04BB, r25
     64e:	80 93 ba 04 	sts	0x04BA, r24
	// FM modulation depth SHIFT factor 
	// bigger factor implies smaller FM!
	// useful range is 4 to 15
	depth_fm1 = 7 ;
     652:	87 e0       	ldi	r24, 0x07	; 7
     654:	80 93 96 03 	sts	0x0396, r24
	// decay SHIFT factor -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_fm1 = 6 ;
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	80 93 c7 04 	sts	0x04C7, r24
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <main>:
	}
}
/////////////////////////////////////////////////////
int main(void)
{ 
   Initialize();
     668:	0e 94 a9 02 	call	0x552	; 0x552 <Initialize>
				pushed = 0;
			}
		//	printf("%d\n\r", TCNT2);
		}
		*/
		nextState();
     66c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nextState>
     670:	fd cf       	rjmp	.-6      	; 0x66c <main+0x4>

00000672 <__vector_9>:
	// profiling 
	//TCCR2B = 0;
} 

// Every 1ms
ISR (TIMER2_COMPA_vect){
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	2f 93       	push	r18
     67e:	3f 93       	push	r19
     680:	4f 93       	push	r20
     682:	5f 93       	push	r21
     684:	6f 93       	push	r22
     686:	7f 93       	push	r23
     688:	8f 93       	push	r24
     68a:	9f 93       	push	r25
     68c:	af 93       	push	r26
     68e:	bf 93       	push	r27
     690:	ef 93       	push	r30
     692:	ff 93       	push	r31
	KeypadDebounce();
     694:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KeypadDebounce>
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRA = 0x0f;
     6ba:	2f e0       	ldi	r18, 0x0F	; 15
     6bc:	21 b9       	out	0x01, r18	; 1
	PORTA = 0xf0; 
     6be:	80 ef       	ldi	r24, 0xF0	; 240
     6c0:	82 b9       	out	0x02, r24	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6c2:	9a e1       	ldi	r25, 0x1A	; 26
     6c4:	39 2f       	mov	r19, r25
     6c6:	3a 95       	dec	r19
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <KeypadScan+0xc>
	_delay_us(5);
	key = PINA;
     6ca:	30 b1       	in	r19, 0x00	; 0
	
	//get upper nibble
	DDRA = 0xf0;
     6cc:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0f; 
     6ce:	22 b9       	out	0x02, r18	; 2
     6d0:	9a 95       	dec	r25
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PINA;
     6d4:	20 b1       	in	r18, 0x00	; 0
     6d6:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     6d8:	2f 3f       	cpi	r18, 0xFF	; 255
     6da:	61 f0       	breq	.+24     	; 0x6f4 <KeypadScan+0x3a>
     6dc:	e5 e1       	ldi	r30, 0x15	; 21
     6de:	f2 e0       	ldi	r31, 0x02	; 2
     6e0:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     6e2:	80 81       	ld	r24, Z
     6e4:	9f 5f       	subi	r25, 0xFF	; 255
     6e6:	82 17       	cp	r24, r18
     6e8:	11 f4       	brne	.+4      	; 0x6ee <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     6ea:	89 2f       	mov	r24, r25
     6ec:	08 95       	ret
	_delay_us(5);
	key = key | PINA;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     6ee:	31 96       	adiw	r30, 0x01	; 1
     6f0:	90 31       	cpi	r25, 0x10	; 16
     6f2:	b9 f7       	brne	.-18     	; 0x6e2 <KeypadScan+0x28>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     6f6:	08 95       	ret

000006f8 <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     6f8:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     6fa:	80 91 39 03 	lds	r24, 0x0339
     6fe:	81 30       	cpi	r24, 0x01	; 1
     700:	31 f4       	brne	.+12     	; 0x70e <KeypadAppend+0x16>
		KeypadFinished = 0;
     702:	10 92 39 03 	sts	0x0339, r1
		KeypadInput = 0;
     706:	10 92 38 03 	sts	0x0338, r1
     70a:	10 92 37 03 	sts	0x0337, r1
	}
	switch(key) {
     70e:	97 3d       	cpi	r25, 0xD7	; 215
     710:	b9 f1       	breq	.+110    	; 0x780 <KeypadAppend+0x88>
     712:	98 3d       	cpi	r25, 0xD8	; 216
     714:	98 f4       	brcc	.+38     	; 0x73c <KeypadAppend+0x44>
     716:	97 3b       	cpi	r25, 0xB7	; 183
     718:	99 f1       	breq	.+102    	; 0x780 <KeypadAppend+0x88>
     71a:	98 3b       	cpi	r25, 0xB8	; 184
     71c:	40 f4       	brcc	.+16     	; 0x72e <KeypadAppend+0x36>
     71e:	9b 37       	cpi	r25, 0x7B	; 123
     720:	79 f1       	breq	.+94     	; 0x780 <KeypadAppend+0x88>
     722:	9e 37       	cpi	r25, 0x7E	; 126
     724:	69 f1       	breq	.+90     	; 0x780 <KeypadAppend+0x88>
     726:	97 37       	cpi	r25, 0x77	; 119
     728:	09 f0       	breq	.+2      	; 0x72c <KeypadAppend+0x34>
     72a:	43 c0       	rjmp	.+134    	; 0x7b2 <KeypadAppend+0xba>
     72c:	29 c0       	rjmp	.+82     	; 0x780 <KeypadAppend+0x88>
     72e:	9d 3b       	cpi	r25, 0xBD	; 189
     730:	19 f1       	breq	.+70     	; 0x778 <KeypadAppend+0x80>
     732:	9e 3b       	cpi	r25, 0xBE	; 190
     734:	f9 f0       	breq	.+62     	; 0x774 <KeypadAppend+0x7c>
     736:	9b 3b       	cpi	r25, 0xBB	; 187
     738:	e1 f5       	brne	.+120    	; 0x7b2 <KeypadAppend+0xba>
     73a:	20 c0       	rjmp	.+64     	; 0x77c <KeypadAppend+0x84>
     73c:	97 3e       	cpi	r25, 0xE7	; 231
     73e:	01 f1       	breq	.+64     	; 0x780 <KeypadAppend+0x88>
     740:	98 3e       	cpi	r25, 0xE8	; 232
     742:	38 f4       	brcc	.+14     	; 0x752 <KeypadAppend+0x5a>
     744:	9d 3d       	cpi	r25, 0xDD	; 221
     746:	91 f0       	breq	.+36     	; 0x76c <KeypadAppend+0x74>
     748:	9e 3d       	cpi	r25, 0xDE	; 222
     74a:	71 f0       	breq	.+28     	; 0x768 <KeypadAppend+0x70>
     74c:	9b 3d       	cpi	r25, 0xDB	; 219
     74e:	89 f5       	brne	.+98     	; 0x7b2 <KeypadAppend+0xba>
     750:	0f c0       	rjmp	.+30     	; 0x770 <KeypadAppend+0x78>
     752:	9d 3e       	cpi	r25, 0xED	; 237
     754:	29 f0       	breq	.+10     	; 0x760 <KeypadAppend+0x68>
     756:	9e 3e       	cpi	r25, 0xEE	; 238
     758:	b9 f0       	breq	.+46     	; 0x788 <KeypadAppend+0x90>
     75a:	9b 3e       	cpi	r25, 0xEB	; 235
     75c:	51 f5       	brne	.+84     	; 0x7b2 <KeypadAppend+0xba>
     75e:	02 c0       	rjmp	.+4      	; 0x764 <KeypadAppend+0x6c>
     760:	42 e0       	ldi	r20, 0x02	; 2
     762:	13 c0       	rjmp	.+38     	; 0x78a <KeypadAppend+0x92>
     764:	43 e0       	ldi	r20, 0x03	; 3
     766:	11 c0       	rjmp	.+34     	; 0x78a <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     768:	44 e0       	ldi	r20, 0x04	; 4
     76a:	0f c0       	rjmp	.+30     	; 0x78a <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     76c:	45 e0       	ldi	r20, 0x05	; 5
     76e:	0d c0       	rjmp	.+26     	; 0x78a <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     770:	46 e0       	ldi	r20, 0x06	; 6
     772:	0b c0       	rjmp	.+22     	; 0x78a <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     774:	47 e0       	ldi	r20, 0x07	; 7
     776:	09 c0       	rjmp	.+18     	; 0x78a <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     778:	48 e0       	ldi	r20, 0x08	; 8
     77a:	07 c0       	rjmp	.+14     	; 0x78a <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     77c:	49 e0       	ldi	r20, 0x09	; 9
     77e:	05 c0       	rjmp	.+10     	; 0x78a <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 39 03 	sts	0x0339, r24
     786:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     788:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     78a:	80 91 37 03 	lds	r24, 0x0337
     78e:	90 91 38 03 	lds	r25, 0x0338
     792:	9c 01       	movw	r18, r24
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	22 0f       	add	r18, r18
     798:	33 1f       	adc	r19, r19
     79a:	6a 95       	dec	r22
     79c:	e1 f7       	brne	.-8      	; 0x796 <KeypadAppend+0x9e>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	28 0f       	add	r18, r24
     7a4:	39 1f       	adc	r19, r25
     7a6:	24 0f       	add	r18, r20
     7a8:	31 1d       	adc	r19, r1
     7aa:	30 93 38 03 	sts	0x0338, r19
     7ae:	20 93 37 03 	sts	0x0337, r18
     7b2:	08 95       	ret

000007b4 <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	debounceTime--;
     7b4:	80 91 cd 04 	lds	r24, 0x04CD
     7b8:	81 50       	subi	r24, 0x01	; 1
     7ba:	80 93 cd 04 	sts	0x04CD, r24
	uint8_t key = KeypadScan(); //Scan the keypad
     7be:	0e 94 5d 03 	call	0x6ba	; 0x6ba <KeypadScan>
     7c2:	98 2f       	mov	r25, r24
	switch(keyState){
     7c4:	80 91 3a 03 	lds	r24, 0x033A
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	91 f0       	breq	.+36     	; 0x7f0 <KeypadDebounce+0x3c>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	28 f0       	brcs	.+10     	; 0x7da <KeypadDebounce+0x26>
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	09 f1       	breq	.+66     	; 0x816 <KeypadDebounce+0x62>
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	a1 f5       	brne	.+104    	; 0x840 <KeypadDebounce+0x8c>
     7d8:	27 c0       	rjmp	.+78     	; 0x828 <KeypadDebounce+0x74>
	
		case RELEASED:
			if (key){
     7da:	99 23       	and	r25, r25
     7dc:	89 f1       	breq	.+98     	; 0x840 <KeypadDebounce+0x8c>
				keyState = MAYBEPUSHED;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 3a 03 	sts	0x033A, r24
				debounceTime = DEBOUNCE_TIME;
     7e4:	8e e1       	ldi	r24, 0x1E	; 30
     7e6:	80 93 cd 04 	sts	0x04CD, r24
				checkKey = key;
     7ea:	90 93 ce 04 	sts	0x04CE, r25
     7ee:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     7f0:	80 91 cd 04 	lds	r24, 0x04CD
     7f4:	88 23       	and	r24, r24
     7f6:	21 f5       	brne	.+72     	; 0x840 <KeypadDebounce+0x8c>
				if (key && key == checkKey) {
     7f8:	99 23       	and	r25, r25
     7fa:	e1 f0       	breq	.+56     	; 0x834 <KeypadDebounce+0x80>
     7fc:	80 91 ce 04 	lds	r24, 0x04CE
     800:	98 17       	cp	r25, r24
     802:	c1 f4       	brne	.+48     	; 0x834 <KeypadDebounce+0x80>
					keyState = PUSHED;
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	80 93 3a 03 	sts	0x033A, r24
					curKey = key;
     80a:	90 93 cc 04 	sts	0x04CC, r25
					KeypadAppend(key);
     80e:	89 2f       	mov	r24, r25
     810:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <KeypadAppend>
     814:	08 95       	ret
					keyState = RELEASED;
				}
			}
			break;
		case PUSHED:
			if (key == 0){
     816:	99 23       	and	r25, r25
     818:	99 f4       	brne	.+38     	; 0x840 <KeypadDebounce+0x8c>
				keyState = MAYBERELEASED;
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	80 93 3a 03 	sts	0x033A, r24
				debounceTime = DEBOUNCE_TIME;
     820:	8e e1       	ldi	r24, 0x1E	; 30
     822:	80 93 cd 04 	sts	0x04CD, r24
     826:	08 95       	ret
				//curKey = 0;
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     828:	80 91 cd 04 	lds	r24, 0x04CD
     82c:	88 23       	and	r24, r24
     82e:	41 f4       	brne	.+16     	; 0x840 <KeypadDebounce+0x8c>
				if (key != 0) {
     830:	99 23       	and	r25, r25
     832:	19 f0       	breq	.+6      	; 0x83a <KeypadDebounce+0x86>
					keyState = RELEASED;
     834:	10 92 3a 03 	sts	0x033A, r1
     838:	08 95       	ret
				} else {
					keyState = PUSHED;
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	80 93 3a 03 	sts	0x033A, r24
     840:	08 95       	ret

00000842 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     842:	90 91 cc 04 	lds	r25, 0x04CC
	if (curKey){
     846:	80 91 cc 04 	lds	r24, 0x04CC
     84a:	88 23       	and	r24, r24
     84c:	11 f0       	breq	.+4      	; 0x852 <KeypadKey+0x10>
		curKey = 0;
     84e:	10 92 cc 04 	sts	0x04CC, r1
	}
	return tmpKey;
}
     852:	89 2f       	mov	r24, r25
     854:	08 95       	ret

00000856 <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	return KeypadInput;
}
     856:	80 91 37 03 	lds	r24, 0x0337
     85a:	90 91 38 03 	lds	r25, 0x0338
     85e:	08 95       	ret

00000860 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     860:	80 91 39 03 	lds	r24, 0x0339
     864:	08 95       	ret

00000866 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     866:	28 2f       	mov	r18, r24
     868:	20 7f       	andi	r18, 0xF0	; 240
     86a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     86c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     86e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     870:	20 ea       	ldi	r18, 0xA0	; 160
     872:	3f e0       	ldi	r19, 0x0F	; 15
     874:	f9 01       	movw	r30, r18
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     87a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     87c:	40 98       	cbi	0x08, 0	; 8
     87e:	f9 01       	movw	r30, r18
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	44 e0       	ldi	r20, 0x04	; 4
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	4a 95       	dec	r20
     88e:	e1 f7       	brne	.-8      	; 0x888 <LCDsendChar+0x22>
     890:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     892:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     894:	42 9a       	sbi	0x08, 2	; 8
     896:	c9 01       	movw	r24, r18
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     89c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     89e:	40 98       	cbi	0x08, 0	; 8
     8a0:	c9 01       	movw	r24, r18
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     8a6:	08 95       	ret

000008a8 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     8a8:	28 2f       	mov	r18, r24
     8aa:	20 7f       	andi	r18, 0xF0	; 240
     8ac:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     8ae:	42 9a       	sbi	0x08, 2	; 8
     8b0:	20 ea       	ldi	r18, 0xA0	; 160
     8b2:	3f e0       	ldi	r19, 0x0F	; 15
     8b4:	f9 01       	movw	r30, r18
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     8ba:	42 98       	cbi	0x08, 2	; 8
     8bc:	f9 01       	movw	r30, r18
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	54 e0       	ldi	r21, 0x04	; 4
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	5a 95       	dec	r21
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <LCDsendCommand+0x1e>
     8ce:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     8d0:	42 9a       	sbi	0x08, 2	; 8
     8d2:	c9 01       	movw	r24, r18
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     8d8:	42 98       	cbi	0x08, 2	; 8
     8da:	c9 01       	movw	r24, r18
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     8e0:	08 95       	ret

000008e2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     8e8:	08 95       	ret

000008ea <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     8f0:	08 95       	ret

000008f2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	49 f0       	breq	.+18     	; 0x912 <LCDstring+0x20>
     900:	ec 01       	movw	r28, r24
     902:	10 e0       	ldi	r17, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     906:	89 91       	ld	r24, Y+
     908:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     90c:	1f 5f       	subi	r17, 0xFF	; 255
     90e:	10 17       	cp	r17, r16
     910:	d0 f3       	brcs	.-12     	; 0x906 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret

0000091c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     91c:	62 30       	cpi	r22, 0x02	; 2
     91e:	31 f0       	breq	.+12     	; 0x92c <LCDGotoXY+0x10>
     920:	63 30       	cpi	r22, 0x03	; 3
     922:	31 f0       	breq	.+12     	; 0x930 <LCDGotoXY+0x14>
     924:	61 30       	cpi	r22, 0x01	; 1
     926:	29 f4       	brne	.+10     	; 0x932 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     928:	80 5c       	subi	r24, 0xC0	; 192
     92a:	03 c0       	rjmp	.+6      	; 0x932 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     92c:	8c 5e       	subi	r24, 0xEC	; 236
     92e:	01 c0       	rjmp	.+2      	; 0x932 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     930:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     932:	80 68       	ori	r24, 0x80	; 128
     934:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
	
}
     938:	08 95       	ret

0000093a <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     944:	64 2f       	mov	r22, r20
     946:	0e 94 8e 04 	call	0x91c	; 0x91c <LCDGotoXY>
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	03 c0       	rjmp	.+6      	; 0x954 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     94e:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     952:	1f 5f       	subi	r17, 0xFF	; 255
     954:	fe 01       	movw	r30, r28
     956:	e1 0f       	add	r30, r17
     958:	f1 1d       	adc	r31, r1
     95a:	84 91       	lpm	r24, Z+
     95c:	88 23       	and	r24, r24
     95e:	b9 f7       	brne	.-18     	; 0x94e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	08 95       	ret

00000968 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	7c 01       	movw	r14, r24
     976:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     978:	11 0f       	add	r17, r17
     97a:	11 0f       	add	r17, r17
     97c:	11 0f       	add	r17, r17
     97e:	10 64       	ori	r17, 0x40	; 64
     980:	c0 e0       	ldi	r28, 0x00	; 0
     982:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     984:	f7 01       	movw	r30, r14
     986:	ec 0f       	add	r30, r28
     988:	fd 1f       	adc	r31, r29
     98a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     98c:	81 2f       	mov	r24, r17
     98e:	8c 0f       	add	r24, r28
     990:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
		LCDsendChar(pcc);
     994:	80 2f       	mov	r24, r16
     996:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	c8 30       	cpi	r28, 0x08	; 8
     99e:	d1 05       	cpc	r29, r1
     9a0:	89 f7       	brne	.-30     	; 0x984 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	80 e6       	ldi	r24, 0x60	; 96
     9b8:	9a ee       	ldi	r25, 0xEA	; 234
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     9be:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     9c0:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     9c2:	87 b1       	in	r24, 0x07	; 7
     9c4:	80 6f       	ori	r24, 0xF0	; 240
     9c6:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     9c8:	87 b1       	in	r24, 0x07	; 7
     9ca:	87 60       	ori	r24, 0x07	; 7
     9cc:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     9ce:	80 e3       	ldi	r24, 0x30	; 48
     9d0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     9d2:	42 9a       	sbi	0x08, 2	; 8
     9d4:	20 ea       	ldi	r18, 0xA0	; 160
     9d6:	3f e0       	ldi	r19, 0x0F	; 15
     9d8:	f9 01       	movw	r30, r18
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     9de:	42 98       	cbi	0x08, 2	; 8
     9e0:	f9 01       	movw	r30, r18
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     9e6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     9e8:	42 9a       	sbi	0x08, 2	; 8
     9ea:	c9 01       	movw	r24, r18
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     9f0:	42 98       	cbi	0x08, 2	; 8
     9f2:	c9 01       	movw	r24, r18
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     9f8:	80 e2       	ldi	r24, 0x20	; 32
     9fa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     9fc:	42 9a       	sbi	0x08, 2	; 8
     9fe:	c9 01       	movw	r24, r18
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a04:	42 98       	cbi	0x08, 2	; 8
     a06:	c9 01       	movw	r24, r18
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     a0c:	88 e2       	ldi	r24, 0x28	; 40
     a0e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     a12:	8c e0       	ldi	r24, 0x0C	; 12
     a14:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
     a18:	c8 e0       	ldi	r28, 0x08	; 8
     a1a:	d1 e0       	ldi	r29, 0x01	; 1
     a1c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     a1e:	16 2f       	mov	r17, r22
     a20:	1f 5f       	subi	r17, 0xFF	; 255
     a22:	ce 01       	movw	r24, r28
     a24:	0e 94 b4 04 	call	0x968	; 0x968 <LCDdefinechar>
     a28:	28 96       	adiw	r28, 0x08	; 8
     a2a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     a2c:	18 30       	cpi	r17, 0x08	; 8
     a2e:	b9 f7       	brne	.-18     	; 0xa1e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	08 95       	ret

00000a38 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	08 2f       	mov	r16, r24
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     a48:	1f 5f       	subi	r17, 0xFF	; 255
     a4a:	10 17       	cp	r17, r16
     a4c:	d0 f3       	brcs	.-12     	; 0xa42 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	08 2f       	mov	r16, r24
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     a64:	1f 5f       	subi	r17, 0xFF	; 255
     a66:	10 17       	cp	r17, r16
     a68:	d0 f3       	brcs	.-12     	; 0xa5e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     a70:	8e e0       	ldi	r24, 0x0E	; 14
     a72:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     a76:	08 95       	ret

00000a78 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     a78:	8f e0       	ldi	r24, 0x0F	; 15
     a7a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     a7e:	08 95       	ret

00000a80 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     a80:	8c e0       	ldi	r24, 0x0C	; 12
     a82:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     a86:	08 95       	ret

00000a88 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     a8e:	08 95       	ret

00000a90 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     a90:	8c e0       	ldi	r24, 0x0C	; 12
     a92:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
}
     a96:	08 95       	ret

00000a98 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	08 2f       	mov	r16, r24
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     aa2:	80 e1       	ldi	r24, 0x10	; 16
     aa4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     aa8:	1f 5f       	subi	r17, 0xFF	; 255
     aaa:	10 17       	cp	r17, r16
     aac:	d0 f3       	brcs	.-12     	; 0xaa2 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	08 95       	ret

00000ab4 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	08 2f       	mov	r16, r24
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     abe:	84 e1       	ldi	r24, 0x14	; 20
     ac0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     ac4:	1f 5f       	subi	r17, 0xFF	; 255
     ac6:	10 17       	cp	r17, r16
     ac8:	d0 f3       	brcs	.-12     	; 0xabe <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     ae0:	96 e0       	ldi	r25, 0x06	; 6
     ae2:	89 9f       	mul	r24, r25
     ae4:	c0 01       	movw	r24, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	24 2f       	mov	r18, r20
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	ac 01       	movw	r20, r24
     aee:	42 9f       	mul	r20, r18
     af0:	c0 01       	movw	r24, r0
     af2:	43 9f       	mul	r20, r19
     af4:	90 0d       	add	r25, r0
     af6:	52 9f       	mul	r21, r18
     af8:	90 0d       	add	r25, r0
     afa:	11 24       	eor	r1, r1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divmodhi4>
     b02:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     b04:	cb 01       	movw	r24, r22
     b06:	66 e0       	ldi	r22, 0x06	; 6
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__udivmodhi4>
     b0e:	e8 2e       	mov	r14, r24
     b10:	ff 24       	eor	r15, r15
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	12 c0       	rjmp	.+36     	; 0xb3c <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     b18:	c8 01       	movw	r24, r16
     b1a:	05 96       	adiw	r24, 0x05	; 5
     b1c:	c8 17       	cp	r28, r24
     b1e:	d9 07       	cpc	r29, r25
     b20:	10 f0       	brcs	.+4      	; 0xb26 <LCDprogressBar+0x56>
     b22:	85 e0       	ldi	r24, 0x05	; 5
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     b26:	c0 17       	cp	r28, r16
     b28:	d1 07       	cpc	r29, r17
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <LCDprogressBar+0x60>
     b2c:	8e 2d       	mov	r24, r14
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <LCDprogressBar+0x62>
     b30:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     b32:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     b36:	f3 94       	inc	r15
     b38:	0a 5f       	subi	r16, 0xFA	; 250
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	fd 14       	cp	r15, r13
     b3e:	60 f3       	brcs	.-40     	; 0xb18 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	08 95       	ret

00000b50 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     b50:	87 e6       	ldi	r24, 0x67	; 103
     b52:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	80 93 c1 00 	sts	0x00C1, r24
}
     b5c:	08 95       	ret

00000b5e <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     b5e:	1f 93       	push	r17
     b60:	18 2f       	mov	r17, r24

  if (c == '\a')
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	49 f4       	brne	.+18     	; 0xb78 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     b66:	60 91 d3 04 	lds	r22, 0x04D3
     b6a:	70 91 d4 04 	lds	r23, 0x04D4
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputs>
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	19 f4       	brne	.+6      	; 0xb82 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     b7c:	8d e0       	ldi	r24, 0x0D	; 13
     b7e:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     b82:	80 91 c0 00 	lds	r24, 0x00C0
     b86:	85 ff       	sbrs	r24, 5
     b88:	fc cf       	rjmp	.-8      	; 0xb82 <uart_putchar+0x24>
  UDR0 = c;
     b8a:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	1f 91       	pop	r17
     b94:	08 95       	ret

00000b96 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     ba4:	80 91 3b 03 	lds	r24, 0x033B
     ba8:	90 91 3c 03 	lds	r25, 0x033C
     bac:	89 2b       	or	r24, r25
     bae:	09 f0       	breq	.+2      	; 0xbb2 <uart_getchar+0x1c>
     bb0:	9f c0       	rjmp	.+318    	; 0xcf0 <uart_getchar+0x15a>
     bb2:	0d e3       	ldi	r16, 0x3D	; 61
     bb4:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     bb6:	80 91 c0 00 	lds	r24, 0x00C0
     bba:	87 ff       	sbrs	r24, 7
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     bbe:	80 91 c0 00 	lds	r24, 0x00C0
     bc2:	84 ff       	sbrs	r24, 4
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <uart_getchar+0x36>
     bc6:	2e ef       	ldi	r18, 0xFE	; 254
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	a6 c0       	rjmp	.+332    	; 0xd18 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     bcc:	80 91 c0 00 	lds	r24, 0x00C0
     bd0:	83 fd       	sbrc	r24, 3
     bd2:	a0 c0       	rjmp	.+320    	; 0xd14 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     bd4:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     bd8:	9d 30       	cpi	r25, 0x0D	; 13
     bda:	11 f0       	breq	.+4      	; 0xbe0 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     bdc:	9a 30       	cpi	r25, 0x0A	; 10
     bde:	69 f4       	brne	.+26     	; 0xbfa <uart_getchar+0x64>
	  {
	    *cp = c;
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	f8 01       	movw	r30, r16
     be4:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     be6:	b7 01       	movw	r22, r14
     be8:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
	    rxp = b;
     bec:	8d e3       	ldi	r24, 0x3D	; 61
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	90 93 3c 03 	sts	0x033C, r25
     bf4:	80 93 3b 03 	sts	0x033B, r24
     bf8:	7b c0       	rjmp	.+246    	; 0xcf0 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     bfa:	99 30       	cpi	r25, 0x09	; 9
     bfc:	09 f4       	brne	.+2      	; 0xc00 <uart_getchar+0x6a>
     bfe:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     c00:	89 2f       	mov	r24, r25
     c02:	80 52       	subi	r24, 0x20	; 32
     c04:	8f 35       	cpi	r24, 0x5F	; 95
     c06:	10 f0       	brcs	.+4      	; 0xc0c <uart_getchar+0x76>
     c08:	90 3a       	cpi	r25, 0xA0	; 160
     c0a:	70 f0       	brcs	.+28     	; 0xc28 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     c0c:	f3 e0       	ldi	r31, 0x03	; 3
     c0e:	0c 38       	cpi	r16, 0x8C	; 140
     c10:	1f 07       	cpc	r17, r31
     c12:	11 f4       	brne	.+4      	; 0xc18 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     c14:	87 e0       	ldi	r24, 0x07	; 7
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     c18:	f8 01       	movw	r30, r16
     c1a:	91 93       	st	Z+, r25
     c1c:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     c1e:	89 2f       	mov	r24, r25
     c20:	b7 01       	movw	r22, r14
     c22:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
     c26:	c7 cf       	rjmp	.-114    	; 0xbb6 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     c28:	92 31       	cpi	r25, 0x12	; 18
     c2a:	39 f1       	breq	.+78     	; 0xc7a <uart_getchar+0xe4>
     c2c:	93 31       	cpi	r25, 0x13	; 19
     c2e:	38 f4       	brcc	.+14     	; 0xc3e <uart_getchar+0xa8>
     c30:	93 30       	cpi	r25, 0x03	; 3
     c32:	09 f4       	brne	.+2      	; 0xc36 <uart_getchar+0xa0>
     c34:	6f c0       	rjmp	.+222    	; 0xd14 <uart_getchar+0x17e>
     c36:	98 30       	cpi	r25, 0x08	; 8
     c38:	09 f0       	breq	.+2      	; 0xc3c <uart_getchar+0xa6>
     c3a:	bd cf       	rjmp	.-134    	; 0xbb6 <uart_getchar+0x20>
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <uart_getchar+0xba>
     c3e:	97 31       	cpi	r25, 0x17	; 23
     c40:	09 f4       	brne	.+2      	; 0xc44 <uart_getchar+0xae>
     c42:	4b c0       	rjmp	.+150    	; 0xcda <uart_getchar+0x144>
     c44:	9f 37       	cpi	r25, 0x7F	; 127
     c46:	21 f0       	breq	.+8      	; 0xc50 <uart_getchar+0xba>
     c48:	95 31       	cpi	r25, 0x15	; 21
     c4a:	09 f0       	breq	.+2      	; 0xc4e <uart_getchar+0xb8>
     c4c:	b4 cf       	rjmp	.-152    	; 0xbb6 <uart_getchar+0x20>
     c4e:	32 c0       	rjmp	.+100    	; 0xcb4 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     c50:	f3 e0       	ldi	r31, 0x03	; 3
     c52:	0d 33       	cpi	r16, 0x3D	; 61
     c54:	1f 07       	cpc	r17, r31
     c56:	09 f0       	breq	.+2      	; 0xc5a <uart_getchar+0xc4>
     c58:	08 f4       	brcc	.+2      	; 0xc5c <uart_getchar+0xc6>
     c5a:	ad cf       	rjmp	.-166    	; 0xbb6 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	b7 01       	movw	r22, r14
     c60:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar(' ', stream);
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	b7 01       	movw	r22, r14
     c68:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar('\b', stream);
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	b7 01       	movw	r22, r14
     c70:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		cp--;
     c74:	01 50       	subi	r16, 0x01	; 1
     c76:	10 40       	sbci	r17, 0x00	; 0
     c78:	9e cf       	rjmp	.-196    	; 0xbb6 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     c7a:	8d e0       	ldi	r24, 0x0D	; 13
     c7c:	b7 01       	movw	r22, r14
     c7e:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
     c82:	cd e3       	ldi	r28, 0x3D	; 61
     c84:	d3 e0       	ldi	r29, 0x03	; 3
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     c88:	89 91       	ld	r24, Y+
     c8a:	b7 01       	movw	r22, r14
     c8c:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     c90:	c0 17       	cp	r28, r16
     c92:	d1 07       	cpc	r29, r17
     c94:	c8 f3       	brcs	.-14     	; 0xc88 <uart_getchar+0xf2>
     c96:	8f cf       	rjmp	.-226    	; 0xbb6 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	b7 01       	movw	r22, r14
     c9c:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar(' ', stream);
     ca0:	80 e2       	ldi	r24, 0x20	; 32
     ca2:	b7 01       	movw	r22, r14
     ca4:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar('\b', stream);
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	b7 01       	movw	r22, r14
     cac:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		cp--;
     cb0:	01 50       	subi	r16, 0x01	; 1
     cb2:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	0d 33       	cpi	r16, 0x3D	; 61
     cb8:	18 07       	cpc	r17, r24
     cba:	09 f0       	breq	.+2      	; 0xcbe <uart_getchar+0x128>
     cbc:	68 f7       	brcc	.-38     	; 0xc98 <uart_getchar+0x102>
     cbe:	7b cf       	rjmp	.-266    	; 0xbb6 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     cc0:	88 e0       	ldi	r24, 0x08	; 8
     cc2:	b7 01       	movw	r22, r14
     cc4:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar(' ', stream);
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	b7 01       	movw	r22, r14
     ccc:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
		uart_putchar('\b', stream);
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	b7 01       	movw	r22, r14
     cd4:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_putchar>
     cd8:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     cda:	e3 e0       	ldi	r30, 0x03	; 3
     cdc:	0d 33       	cpi	r16, 0x3D	; 61
     cde:	1e 07       	cpc	r17, r30
     ce0:	09 f0       	breq	.+2      	; 0xce4 <uart_getchar+0x14e>
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <uart_getchar+0x150>
     ce4:	68 cf       	rjmp	.-304    	; 0xbb6 <uart_getchar+0x20>
     ce6:	e8 01       	movw	r28, r16
     ce8:	8a 91       	ld	r24, -Y
     cea:	80 32       	cpi	r24, 0x20	; 32
     cec:	49 f7       	brne	.-46     	; 0xcc0 <uart_getchar+0x12a>
     cee:	63 cf       	rjmp	.-314    	; 0xbb6 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     cf0:	e0 91 3b 03 	lds	r30, 0x033B
     cf4:	f0 91 3c 03 	lds	r31, 0x033C
     cf8:	81 91       	ld	r24, Z+
     cfa:	f0 93 3c 03 	sts	0x033C, r31
     cfe:	e0 93 3b 03 	sts	0x033B, r30
  if (c == '\n')
     d02:	8a 30       	cpi	r24, 0x0A	; 10
     d04:	21 f4       	brne	.+8      	; 0xd0e <uart_getchar+0x178>
    rxp = 0;
     d06:	10 92 3c 03 	sts	0x033C, r1
     d0a:	10 92 3b 03 	sts	0x033B, r1

  return c;
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <uart_getchar+0x182>
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	3f ef       	ldi	r19, 0xFF	; 255
}
     d18:	c9 01       	movw	r24, r18
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	08 95       	ret

00000d28 <__fixunssfsi>:
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	7b 01       	movw	r14, r22
     d32:	8c 01       	movw	r16, r24
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	5f e4       	ldi	r21, 0x4F	; 79
     d3c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     d40:	88 23       	and	r24, r24
     d42:	8c f0       	brlt	.+34     	; 0xd66 <__fixunssfsi+0x3e>
     d44:	c8 01       	movw	r24, r16
     d46:	b7 01       	movw	r22, r14
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	5f e4       	ldi	r21, 0x4F	; 79
     d50:	0e 94 0c 08 	call	0x1018	; 0x1018 <__subsf3>
     d54:	0e 94 94 09 	call	0x1328	; 0x1328 <__fixsfsi>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
     d5c:	20 50       	subi	r18, 0x00	; 0
     d5e:	30 40       	sbci	r19, 0x00	; 0
     d60:	40 40       	sbci	r20, 0x00	; 0
     d62:	50 48       	sbci	r21, 0x80	; 128
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <__fixunssfsi+0x4a>
     d66:	c8 01       	movw	r24, r16
     d68:	b7 01       	movw	r22, r14
     d6a:	0e 94 94 09 	call	0x1328	; 0x1328 <__fixsfsi>
     d6e:	9b 01       	movw	r18, r22
     d70:	ac 01       	movw	r20, r24
     d72:	b9 01       	movw	r22, r18
     d74:	ca 01       	movw	r24, r20
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	08 95       	ret

00000d80 <_fpadd_parts>:
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 ec       	ldi	r30, 0xC6	; 198
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__>
     d8c:	dc 01       	movw	r26, r24
     d8e:	2b 01       	movw	r4, r22
     d90:	fa 01       	movw	r30, r20
     d92:	9c 91       	ld	r25, X
     d94:	92 30       	cpi	r25, 0x02	; 2
     d96:	08 f4       	brcc	.+2      	; 0xd9a <_fpadd_parts+0x1a>
     d98:	39 c1       	rjmp	.+626    	; 0x100c <_fpadd_parts+0x28c>
     d9a:	eb 01       	movw	r28, r22
     d9c:	88 81       	ld	r24, Y
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <_fpadd_parts+0x24>
     da2:	33 c1       	rjmp	.+614    	; 0x100a <_fpadd_parts+0x28a>
     da4:	94 30       	cpi	r25, 0x04	; 4
     da6:	69 f4       	brne	.+26     	; 0xdc2 <_fpadd_parts+0x42>
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	09 f0       	breq	.+2      	; 0xdae <_fpadd_parts+0x2e>
     dac:	2f c1       	rjmp	.+606    	; 0x100c <_fpadd_parts+0x28c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 91       	ld	r25, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	98 17       	cp	r25, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <_fpadd_parts+0x3c>
     dba:	28 c1       	rjmp	.+592    	; 0x100c <_fpadd_parts+0x28c>
     dbc:	ad e2       	ldi	r26, 0x2D	; 45
     dbe:	b2 e0       	ldi	r27, 0x02	; 2
     dc0:	25 c1       	rjmp	.+586    	; 0x100c <_fpadd_parts+0x28c>
     dc2:	84 30       	cpi	r24, 0x04	; 4
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <_fpadd_parts+0x48>
     dc6:	21 c1       	rjmp	.+578    	; 0x100a <_fpadd_parts+0x28a>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	a9 f4       	brne	.+42     	; 0xdf6 <_fpadd_parts+0x76>
     dcc:	92 30       	cpi	r25, 0x02	; 2
     dce:	09 f0       	breq	.+2      	; 0xdd2 <_fpadd_parts+0x52>
     dd0:	1d c1       	rjmp	.+570    	; 0x100c <_fpadd_parts+0x28c>
     dd2:	9a 01       	movw	r18, r20
     dd4:	ad 01       	movw	r20, r26
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	ea 01       	movw	r28, r20
     dda:	09 90       	ld	r0, Y+
     ddc:	ae 01       	movw	r20, r28
     dde:	e9 01       	movw	r28, r18
     de0:	09 92       	st	Y+, r0
     de2:	9e 01       	movw	r18, r28
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	c1 f7       	brne	.-16     	; 0xdd8 <_fpadd_parts+0x58>
     de8:	e2 01       	movw	r28, r4
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	9c 91       	ld	r25, X
     df0:	89 23       	and	r24, r25
     df2:	81 83       	std	Z+1, r24	; 0x01
     df4:	08 c1       	rjmp	.+528    	; 0x1006 <_fpadd_parts+0x286>
     df6:	92 30       	cpi	r25, 0x02	; 2
     df8:	09 f4       	brne	.+2      	; 0xdfc <_fpadd_parts+0x7c>
     dfa:	07 c1       	rjmp	.+526    	; 0x100a <_fpadd_parts+0x28a>
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	2d 90       	ld	r2, X+
     e00:	3c 90       	ld	r3, X
     e02:	13 97       	sbiw	r26, 0x03	; 3
     e04:	eb 01       	movw	r28, r22
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	9b 81       	ldd	r25, Y+3	; 0x03
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	ad 90       	ld	r10, X+
     e0e:	bd 90       	ld	r11, X+
     e10:	cd 90       	ld	r12, X+
     e12:	dc 90       	ld	r13, X
     e14:	17 97       	sbiw	r26, 0x07	; 7
     e16:	ec 80       	ldd	r14, Y+4	; 0x04
     e18:	fd 80       	ldd	r15, Y+5	; 0x05
     e1a:	0e 81       	ldd	r16, Y+6	; 0x06
     e1c:	1f 81       	ldd	r17, Y+7	; 0x07
     e1e:	91 01       	movw	r18, r2
     e20:	28 1b       	sub	r18, r24
     e22:	39 0b       	sbc	r19, r25
     e24:	b9 01       	movw	r22, r18
     e26:	37 ff       	sbrs	r19, 7
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <_fpadd_parts+0xb2>
     e2a:	66 27       	eor	r22, r22
     e2c:	77 27       	eor	r23, r23
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	60 32       	cpi	r22, 0x20	; 32
     e34:	71 05       	cpc	r23, r1
     e36:	0c f0       	brlt	.+2      	; 0xe3a <_fpadd_parts+0xba>
     e38:	61 c0       	rjmp	.+194    	; 0xefc <_fpadd_parts+0x17c>
     e3a:	12 16       	cp	r1, r18
     e3c:	13 06       	cpc	r1, r19
     e3e:	6c f5       	brge	.+90     	; 0xe9a <_fpadd_parts+0x11a>
     e40:	37 01       	movw	r6, r14
     e42:	48 01       	movw	r8, r16
     e44:	06 2e       	mov	r0, r22
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <_fpadd_parts+0xd0>
     e48:	96 94       	lsr	r9
     e4a:	87 94       	ror	r8
     e4c:	77 94       	ror	r7
     e4e:	67 94       	ror	r6
     e50:	0a 94       	dec	r0
     e52:	d2 f7       	brpl	.-12     	; 0xe48 <_fpadd_parts+0xc8>
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <_fpadd_parts+0xe6>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	6a 95       	dec	r22
     e68:	d2 f7       	brpl	.-12     	; 0xe5e <_fpadd_parts+0xde>
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	40 40       	sbci	r20, 0x00	; 0
     e70:	50 40       	sbci	r21, 0x00	; 0
     e72:	2e 21       	and	r18, r14
     e74:	3f 21       	and	r19, r15
     e76:	40 23       	and	r20, r16
     e78:	51 23       	and	r21, r17
     e7a:	21 15       	cp	r18, r1
     e7c:	31 05       	cpc	r19, r1
     e7e:	41 05       	cpc	r20, r1
     e80:	51 05       	cpc	r21, r1
     e82:	21 f0       	breq	.+8      	; 0xe8c <_fpadd_parts+0x10c>
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	79 01       	movw	r14, r18
     e8e:	8a 01       	movw	r16, r20
     e90:	e6 28       	or	r14, r6
     e92:	f7 28       	or	r15, r7
     e94:	08 29       	or	r16, r8
     e96:	19 29       	or	r17, r9
     e98:	3c c0       	rjmp	.+120    	; 0xf12 <_fpadd_parts+0x192>
     e9a:	23 2b       	or	r18, r19
     e9c:	d1 f1       	breq	.+116    	; 0xf12 <_fpadd_parts+0x192>
     e9e:	26 0e       	add	r2, r22
     ea0:	37 1e       	adc	r3, r23
     ea2:	35 01       	movw	r6, r10
     ea4:	46 01       	movw	r8, r12
     ea6:	06 2e       	mov	r0, r22
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <_fpadd_parts+0x132>
     eaa:	96 94       	lsr	r9
     eac:	87 94       	ror	r8
     eae:	77 94       	ror	r7
     eb0:	67 94       	ror	r6
     eb2:	0a 94       	dec	r0
     eb4:	d2 f7       	brpl	.-12     	; 0xeaa <_fpadd_parts+0x12a>
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <_fpadd_parts+0x148>
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	44 1f       	adc	r20, r20
     ec6:	55 1f       	adc	r21, r21
     ec8:	6a 95       	dec	r22
     eca:	d2 f7       	brpl	.-12     	; 0xec0 <_fpadd_parts+0x140>
     ecc:	21 50       	subi	r18, 0x01	; 1
     ece:	30 40       	sbci	r19, 0x00	; 0
     ed0:	40 40       	sbci	r20, 0x00	; 0
     ed2:	50 40       	sbci	r21, 0x00	; 0
     ed4:	2a 21       	and	r18, r10
     ed6:	3b 21       	and	r19, r11
     ed8:	4c 21       	and	r20, r12
     eda:	5d 21       	and	r21, r13
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	41 05       	cpc	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	21 f0       	breq	.+8      	; 0xeee <_fpadd_parts+0x16e>
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	59 01       	movw	r10, r18
     ef0:	6a 01       	movw	r12, r20
     ef2:	a6 28       	or	r10, r6
     ef4:	b7 28       	or	r11, r7
     ef6:	c8 28       	or	r12, r8
     ef8:	d9 28       	or	r13, r9
     efa:	0b c0       	rjmp	.+22     	; 0xf12 <_fpadd_parts+0x192>
     efc:	82 15       	cp	r24, r2
     efe:	93 05       	cpc	r25, r3
     f00:	2c f0       	brlt	.+10     	; 0xf0c <_fpadd_parts+0x18c>
     f02:	1c 01       	movw	r2, r24
     f04:	aa 24       	eor	r10, r10
     f06:	bb 24       	eor	r11, r11
     f08:	65 01       	movw	r12, r10
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <_fpadd_parts+0x192>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	9c 91       	ld	r25, X
     f16:	d2 01       	movw	r26, r4
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	8c 91       	ld	r24, X
     f1c:	98 17       	cp	r25, r24
     f1e:	09 f4       	brne	.+2      	; 0xf22 <_fpadd_parts+0x1a2>
     f20:	45 c0       	rjmp	.+138    	; 0xfac <_fpadd_parts+0x22c>
     f22:	99 23       	and	r25, r25
     f24:	39 f0       	breq	.+14     	; 0xf34 <_fpadd_parts+0x1b4>
     f26:	a8 01       	movw	r20, r16
     f28:	97 01       	movw	r18, r14
     f2a:	2a 19       	sub	r18, r10
     f2c:	3b 09       	sbc	r19, r11
     f2e:	4c 09       	sbc	r20, r12
     f30:	5d 09       	sbc	r21, r13
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <_fpadd_parts+0x1c0>
     f34:	a6 01       	movw	r20, r12
     f36:	95 01       	movw	r18, r10
     f38:	2e 19       	sub	r18, r14
     f3a:	3f 09       	sbc	r19, r15
     f3c:	40 0b       	sbc	r20, r16
     f3e:	51 0b       	sbc	r21, r17
     f40:	57 fd       	sbrc	r21, 7
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <_fpadd_parts+0x1d4>
     f44:	11 82       	std	Z+1, r1	; 0x01
     f46:	33 82       	std	Z+3, r3	; 0x03
     f48:	22 82       	std	Z+2, r2	; 0x02
     f4a:	24 83       	std	Z+4, r18	; 0x04
     f4c:	35 83       	std	Z+5, r19	; 0x05
     f4e:	46 83       	std	Z+6, r20	; 0x06
     f50:	57 83       	std	Z+7, r21	; 0x07
     f52:	1d c0       	rjmp	.+58     	; 0xf8e <_fpadd_parts+0x20e>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	81 83       	std	Z+1, r24	; 0x01
     f58:	33 82       	std	Z+3, r3	; 0x03
     f5a:	22 82       	std	Z+2, r2	; 0x02
     f5c:	88 27       	eor	r24, r24
     f5e:	99 27       	eor	r25, r25
     f60:	dc 01       	movw	r26, r24
     f62:	82 1b       	sub	r24, r18
     f64:	93 0b       	sbc	r25, r19
     f66:	a4 0b       	sbc	r26, r20
     f68:	b5 0b       	sbc	r27, r21
     f6a:	84 83       	std	Z+4, r24	; 0x04
     f6c:	95 83       	std	Z+5, r25	; 0x05
     f6e:	a6 83       	std	Z+6, r26	; 0x06
     f70:	b7 83       	std	Z+7, r27	; 0x07
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <_fpadd_parts+0x20e>
     f74:	22 0f       	add	r18, r18
     f76:	33 1f       	adc	r19, r19
     f78:	44 1f       	adc	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	24 83       	std	Z+4, r18	; 0x04
     f7e:	35 83       	std	Z+5, r19	; 0x05
     f80:	46 83       	std	Z+6, r20	; 0x06
     f82:	57 83       	std	Z+7, r21	; 0x07
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	93 81       	ldd	r25, Z+3	; 0x03
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	93 83       	std	Z+3, r25	; 0x03
     f8c:	82 83       	std	Z+2, r24	; 0x02
     f8e:	24 81       	ldd	r18, Z+4	; 0x04
     f90:	35 81       	ldd	r19, Z+5	; 0x05
     f92:	46 81       	ldd	r20, Z+6	; 0x06
     f94:	57 81       	ldd	r21, Z+7	; 0x07
     f96:	da 01       	movw	r26, r20
     f98:	c9 01       	movw	r24, r18
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	a1 09       	sbc	r26, r1
     f9e:	b1 09       	sbc	r27, r1
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	af 4f       	sbci	r26, 0xFF	; 255
     fa6:	bf 43       	sbci	r27, 0x3F	; 63
     fa8:	28 f3       	brcs	.-54     	; 0xf74 <_fpadd_parts+0x1f4>
     faa:	0b c0       	rjmp	.+22     	; 0xfc2 <_fpadd_parts+0x242>
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	33 82       	std	Z+3, r3	; 0x03
     fb0:	22 82       	std	Z+2, r2	; 0x02
     fb2:	ea 0c       	add	r14, r10
     fb4:	fb 1c       	adc	r15, r11
     fb6:	0c 1d       	adc	r16, r12
     fb8:	1d 1d       	adc	r17, r13
     fba:	e4 82       	std	Z+4, r14	; 0x04
     fbc:	f5 82       	std	Z+5, r15	; 0x05
     fbe:	06 83       	std	Z+6, r16	; 0x06
     fc0:	17 83       	std	Z+7, r17	; 0x07
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	80 83       	st	Z, r24
     fc6:	24 81       	ldd	r18, Z+4	; 0x04
     fc8:	35 81       	ldd	r19, Z+5	; 0x05
     fca:	46 81       	ldd	r20, Z+6	; 0x06
     fcc:	57 81       	ldd	r21, Z+7	; 0x07
     fce:	57 ff       	sbrs	r21, 7
     fd0:	1a c0       	rjmp	.+52     	; 0x1006 <_fpadd_parts+0x286>
     fd2:	c9 01       	movw	r24, r18
     fd4:	aa 27       	eor	r26, r26
     fd6:	97 fd       	sbrc	r25, 7
     fd8:	a0 95       	com	r26
     fda:	ba 2f       	mov	r27, r26
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	a0 70       	andi	r26, 0x00	; 0
     fe2:	b0 70       	andi	r27, 0x00	; 0
     fe4:	56 95       	lsr	r21
     fe6:	47 95       	ror	r20
     fe8:	37 95       	ror	r19
     fea:	27 95       	ror	r18
     fec:	82 2b       	or	r24, r18
     fee:	93 2b       	or	r25, r19
     ff0:	a4 2b       	or	r26, r20
     ff2:	b5 2b       	or	r27, r21
     ff4:	84 83       	std	Z+4, r24	; 0x04
     ff6:	95 83       	std	Z+5, r25	; 0x05
     ff8:	a6 83       	std	Z+6, r26	; 0x06
     ffa:	b7 83       	std	Z+7, r27	; 0x07
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	93 83       	std	Z+3, r25	; 0x03
    1004:	82 83       	std	Z+2, r24	; 0x02
    1006:	df 01       	movw	r26, r30
    1008:	01 c0       	rjmp	.+2      	; 0x100c <_fpadd_parts+0x28c>
    100a:	d2 01       	movw	r26, r4
    100c:	cd 01       	movw	r24, r26
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	e2 e1       	ldi	r30, 0x12	; 18
    1014:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__>

00001018 <__subsf3>:
    1018:	a0 e2       	ldi	r26, 0x20	; 32
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	f8 e0       	ldi	r31, 0x08	; 8
    1020:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__prologue_saves__+0x18>
    1024:	69 83       	std	Y+1, r22	; 0x01
    1026:	7a 83       	std	Y+2, r23	; 0x02
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	2d 83       	std	Y+5, r18	; 0x05
    102e:	3e 83       	std	Y+6, r19	; 0x06
    1030:	4f 83       	std	Y+7, r20	; 0x07
    1032:	58 87       	std	Y+8, r21	; 0x08
    1034:	e9 e0       	ldi	r30, 0x09	; 9
    1036:	ee 2e       	mov	r14, r30
    1038:	f1 2c       	mov	r15, r1
    103a:	ec 0e       	add	r14, r28
    103c:	fd 1e       	adc	r15, r29
    103e:	ce 01       	movw	r24, r28
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    1048:	8e 01       	movw	r16, r28
    104a:	0f 5e       	subi	r16, 0xEF	; 239
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	ce 01       	movw	r24, r28
    1050:	05 96       	adiw	r24, 0x05	; 5
    1052:	b8 01       	movw	r22, r16
    1054:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    1058:	8a 89       	ldd	r24, Y+18	; 0x12
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	89 27       	eor	r24, r25
    105e:	8a 8b       	std	Y+18, r24	; 0x12
    1060:	c7 01       	movw	r24, r14
    1062:	b8 01       	movw	r22, r16
    1064:	ae 01       	movw	r20, r28
    1066:	47 5e       	subi	r20, 0xE7	; 231
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	0e 94 c0 06 	call	0xd80	; 0xd80 <_fpadd_parts>
    106e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__pack_f>
    1072:	a0 96       	adiw	r28, 0x20	; 32
    1074:	e6 e0       	ldi	r30, 0x06	; 6
    1076:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__epilogue_restores__+0x18>

0000107a <__addsf3>:
    107a:	a0 e2       	ldi	r26, 0x20	; 32
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e3 e4       	ldi	r30, 0x43	; 67
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__prologue_saves__+0x18>
    1086:	69 83       	std	Y+1, r22	; 0x01
    1088:	7a 83       	std	Y+2, r23	; 0x02
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	2d 83       	std	Y+5, r18	; 0x05
    1090:	3e 83       	std	Y+6, r19	; 0x06
    1092:	4f 83       	std	Y+7, r20	; 0x07
    1094:	58 87       	std	Y+8, r21	; 0x08
    1096:	f9 e0       	ldi	r31, 0x09	; 9
    1098:	ef 2e       	mov	r14, r31
    109a:	f1 2c       	mov	r15, r1
    109c:	ec 0e       	add	r14, r28
    109e:	fd 1e       	adc	r15, r29
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	b7 01       	movw	r22, r14
    10a6:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    10aa:	8e 01       	movw	r16, r28
    10ac:	0f 5e       	subi	r16, 0xEF	; 239
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	ce 01       	movw	r24, r28
    10b2:	05 96       	adiw	r24, 0x05	; 5
    10b4:	b8 01       	movw	r22, r16
    10b6:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    10ba:	c7 01       	movw	r24, r14
    10bc:	b8 01       	movw	r22, r16
    10be:	ae 01       	movw	r20, r28
    10c0:	47 5e       	subi	r20, 0xE7	; 231
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	0e 94 c0 06 	call	0xd80	; 0xd80 <_fpadd_parts>
    10c8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__pack_f>
    10cc:	a0 96       	adiw	r28, 0x20	; 32
    10ce:	e6 e0       	ldi	r30, 0x06	; 6
    10d0:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__epilogue_restores__+0x18>

000010d4 <__mulsf3>:
    10d4:	a0 e2       	ldi	r26, 0x20	; 32
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e0 e7       	ldi	r30, 0x70	; 112
    10da:	f8 e0       	ldi	r31, 0x08	; 8
    10dc:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__>
    10e0:	69 83       	std	Y+1, r22	; 0x01
    10e2:	7a 83       	std	Y+2, r23	; 0x02
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	2d 83       	std	Y+5, r18	; 0x05
    10ea:	3e 83       	std	Y+6, r19	; 0x06
    10ec:	4f 83       	std	Y+7, r20	; 0x07
    10ee:	58 87       	std	Y+8, r21	; 0x08
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	be 01       	movw	r22, r28
    10f6:	67 5f       	subi	r22, 0xF7	; 247
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    10fe:	ce 01       	movw	r24, r28
    1100:	05 96       	adiw	r24, 0x05	; 5
    1102:	be 01       	movw	r22, r28
    1104:	6f 5e       	subi	r22, 0xEF	; 239
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    110c:	99 85       	ldd	r25, Y+9	; 0x09
    110e:	92 30       	cpi	r25, 0x02	; 2
    1110:	88 f0       	brcs	.+34     	; 0x1134 <__stack+0x35>
    1112:	89 89       	ldd	r24, Y+17	; 0x11
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	c8 f0       	brcs	.+50     	; 0x114a <__stack+0x4b>
    1118:	94 30       	cpi	r25, 0x04	; 4
    111a:	19 f4       	brne	.+6      	; 0x1122 <__stack+0x23>
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	51 f4       	brne	.+20     	; 0x1134 <__stack+0x35>
    1120:	04 c0       	rjmp	.+8      	; 0x112a <__stack+0x2b>
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	29 f4       	brne	.+10     	; 0x1130 <__stack+0x31>
    1126:	92 30       	cpi	r25, 0x02	; 2
    1128:	81 f4       	brne	.+32     	; 0x114a <__stack+0x4b>
    112a:	8d e2       	ldi	r24, 0x2D	; 45
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	c6 c0       	rjmp	.+396    	; 0x12bc <__stack+0x1bd>
    1130:	92 30       	cpi	r25, 0x02	; 2
    1132:	49 f4       	brne	.+18     	; 0x1146 <__stack+0x47>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	8a 89       	ldd	r24, Y+18	; 0x12
    113a:	98 13       	cpse	r25, r24
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	2a 87       	std	Y+10, r18	; 0x0a
    1140:	ce 01       	movw	r24, r28
    1142:	09 96       	adiw	r24, 0x09	; 9
    1144:	bb c0       	rjmp	.+374    	; 0x12bc <__stack+0x1bd>
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	49 f4       	brne	.+18     	; 0x115c <__stack+0x5d>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	9a 85       	ldd	r25, Y+10	; 0x0a
    114e:	8a 89       	ldd	r24, Y+18	; 0x12
    1150:	98 13       	cpse	r25, r24
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	2a 8b       	std	Y+18, r18	; 0x12
    1156:	ce 01       	movw	r24, r28
    1158:	41 96       	adiw	r24, 0x11	; 17
    115a:	b0 c0       	rjmp	.+352    	; 0x12bc <__stack+0x1bd>
    115c:	2d 84       	ldd	r2, Y+13	; 0x0d
    115e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1160:	4f 84       	ldd	r4, Y+15	; 0x0f
    1162:	58 88       	ldd	r5, Y+16	; 0x10
    1164:	6d 88       	ldd	r6, Y+21	; 0x15
    1166:	7e 88       	ldd	r7, Y+22	; 0x16
    1168:	8f 88       	ldd	r8, Y+23	; 0x17
    116a:	98 8c       	ldd	r9, Y+24	; 0x18
    116c:	ee 24       	eor	r14, r14
    116e:	ff 24       	eor	r15, r15
    1170:	87 01       	movw	r16, r14
    1172:	aa 24       	eor	r10, r10
    1174:	bb 24       	eor	r11, r11
    1176:	65 01       	movw	r12, r10
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	e0 e0       	ldi	r30, 0x00	; 0
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	c1 01       	movw	r24, r2
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	89 2b       	or	r24, r25
    118c:	e9 f0       	breq	.+58     	; 0x11c8 <__stack+0xc9>
    118e:	e6 0c       	add	r14, r6
    1190:	f7 1c       	adc	r15, r7
    1192:	08 1d       	adc	r16, r8
    1194:	19 1d       	adc	r17, r9
    1196:	9a 01       	movw	r18, r20
    1198:	ab 01       	movw	r20, r22
    119a:	2a 0d       	add	r18, r10
    119c:	3b 1d       	adc	r19, r11
    119e:	4c 1d       	adc	r20, r12
    11a0:	5d 1d       	adc	r21, r13
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e6 14       	cp	r14, r6
    11ac:	f7 04       	cpc	r15, r7
    11ae:	08 05       	cpc	r16, r8
    11b0:	19 05       	cpc	r17, r9
    11b2:	20 f4       	brcc	.+8      	; 0x11bc <__stack+0xbd>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ba 01       	movw	r22, r20
    11be:	a9 01       	movw	r20, r18
    11c0:	48 0f       	add	r20, r24
    11c2:	59 1f       	adc	r21, r25
    11c4:	6a 1f       	adc	r22, r26
    11c6:	7b 1f       	adc	r23, r27
    11c8:	aa 0c       	add	r10, r10
    11ca:	bb 1c       	adc	r11, r11
    11cc:	cc 1c       	adc	r12, r12
    11ce:	dd 1c       	adc	r13, r13
    11d0:	97 fe       	sbrs	r9, 7
    11d2:	08 c0       	rjmp	.+16     	; 0x11e4 <__stack+0xe5>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e0       	ldi	r26, 0x00	; 0
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	a8 2a       	or	r10, r24
    11de:	b9 2a       	or	r11, r25
    11e0:	ca 2a       	or	r12, r26
    11e2:	db 2a       	or	r13, r27
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	e0 32       	cpi	r30, 0x20	; 32
    11e8:	f1 05       	cpc	r31, r1
    11ea:	49 f0       	breq	.+18     	; 0x11fe <__stack+0xff>
    11ec:	66 0c       	add	r6, r6
    11ee:	77 1c       	adc	r7, r7
    11f0:	88 1c       	adc	r8, r8
    11f2:	99 1c       	adc	r9, r9
    11f4:	56 94       	lsr	r5
    11f6:	47 94       	ror	r4
    11f8:	37 94       	ror	r3
    11fa:	27 94       	ror	r2
    11fc:	c3 cf       	rjmp	.-122    	; 0x1184 <__stack+0x85>
    11fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1200:	ea 89       	ldd	r30, Y+18	; 0x12
    1202:	2b 89       	ldd	r18, Y+19	; 0x13
    1204:	3c 89       	ldd	r19, Y+20	; 0x14
    1206:	8b 85       	ldd	r24, Y+11	; 0x0b
    1208:	9c 85       	ldd	r25, Y+12	; 0x0c
    120a:	28 0f       	add	r18, r24
    120c:	39 1f       	adc	r19, r25
    120e:	2e 5f       	subi	r18, 0xFE	; 254
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	17 c0       	rjmp	.+46     	; 0x1242 <__stack+0x143>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	89 2b       	or	r24, r25
    121c:	61 f0       	breq	.+24     	; 0x1236 <__stack+0x137>
    121e:	16 95       	lsr	r17
    1220:	07 95       	ror	r16
    1222:	f7 94       	ror	r15
    1224:	e7 94       	ror	r14
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e8       	ldi	r27, 0x80	; 128
    122e:	e8 2a       	or	r14, r24
    1230:	f9 2a       	or	r15, r25
    1232:	0a 2b       	or	r16, r26
    1234:	1b 2b       	or	r17, r27
    1236:	76 95       	lsr	r23
    1238:	67 95       	ror	r22
    123a:	57 95       	ror	r21
    123c:	47 95       	ror	r20
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	77 fd       	sbrc	r23, 7
    1244:	e7 cf       	rjmp	.-50     	; 0x1214 <__stack+0x115>
    1246:	0c c0       	rjmp	.+24     	; 0x1260 <__stack+0x161>
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	66 1f       	adc	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	17 fd       	sbrc	r17, 7
    1252:	41 60       	ori	r20, 0x01	; 1
    1254:	ee 0c       	add	r14, r14
    1256:	ff 1c       	adc	r15, r15
    1258:	00 1f       	adc	r16, r16
    125a:	11 1f       	adc	r17, r17
    125c:	21 50       	subi	r18, 0x01	; 1
    125e:	30 40       	sbci	r19, 0x00	; 0
    1260:	40 30       	cpi	r20, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	59 07       	cpc	r21, r25
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	69 07       	cpc	r22, r25
    126a:	90 e4       	ldi	r25, 0x40	; 64
    126c:	79 07       	cpc	r23, r25
    126e:	60 f3       	brcs	.-40     	; 0x1248 <__stack+0x149>
    1270:	2b 8f       	std	Y+27, r18	; 0x1b
    1272:	3c 8f       	std	Y+28, r19	; 0x1c
    1274:	db 01       	movw	r26, r22
    1276:	ca 01       	movw	r24, r20
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	a0 70       	andi	r26, 0x00	; 0
    127e:	b0 70       	andi	r27, 0x00	; 0
    1280:	80 34       	cpi	r24, 0x40	; 64
    1282:	91 05       	cpc	r25, r1
    1284:	a1 05       	cpc	r26, r1
    1286:	b1 05       	cpc	r27, r1
    1288:	61 f4       	brne	.+24     	; 0x12a2 <__stack+0x1a3>
    128a:	47 fd       	sbrc	r20, 7
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <__stack+0x1a3>
    128e:	e1 14       	cp	r14, r1
    1290:	f1 04       	cpc	r15, r1
    1292:	01 05       	cpc	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	29 f0       	breq	.+10     	; 0x12a2 <__stack+0x1a3>
    1298:	40 5c       	subi	r20, 0xC0	; 192
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	6f 4f       	sbci	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	40 78       	andi	r20, 0x80	; 128
    12a2:	1a 8e       	std	Y+26, r1	; 0x1a
    12a4:	fe 17       	cp	r31, r30
    12a6:	11 f0       	breq	.+4      	; 0x12ac <__stack+0x1ad>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	8a 8f       	std	Y+26, r24	; 0x1a
    12ac:	4d 8f       	std	Y+29, r20	; 0x1d
    12ae:	5e 8f       	std	Y+30, r21	; 0x1e
    12b0:	6f 8f       	std	Y+31, r22	; 0x1f
    12b2:	78 a3       	std	Y+32, r23	; 0x20
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	89 8f       	std	Y+25, r24	; 0x19
    12b8:	ce 01       	movw	r24, r28
    12ba:	49 96       	adiw	r24, 0x19	; 25
    12bc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__pack_f>
    12c0:	a0 96       	adiw	r28, 0x20	; 32
    12c2:	e2 e1       	ldi	r30, 0x12	; 18
    12c4:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__>

000012c8 <__gesf2>:
    12c8:	a8 e1       	ldi	r26, 0x18	; 24
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ea e6       	ldi	r30, 0x6A	; 106
    12ce:	f9 e0       	ldi	r31, 0x09	; 9
    12d0:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__prologue_saves__+0x18>
    12d4:	69 83       	std	Y+1, r22	; 0x01
    12d6:	7a 83       	std	Y+2, r23	; 0x02
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	2d 83       	std	Y+5, r18	; 0x05
    12de:	3e 83       	std	Y+6, r19	; 0x06
    12e0:	4f 83       	std	Y+7, r20	; 0x07
    12e2:	58 87       	std	Y+8, r21	; 0x08
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	e8 2e       	mov	r14, r24
    12e8:	f1 2c       	mov	r15, r1
    12ea:	ec 0e       	add	r14, r28
    12ec:	fd 1e       	adc	r15, r29
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	b7 01       	movw	r22, r14
    12f4:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    12f8:	8e 01       	movw	r16, r28
    12fa:	0f 5e       	subi	r16, 0xEF	; 239
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	ce 01       	movw	r24, r28
    1300:	05 96       	adiw	r24, 0x05	; 5
    1302:	b8 01       	movw	r22, r16
    1304:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	40 f0       	brcs	.+16     	; 0x131e <__gesf2+0x56>
    130e:	89 89       	ldd	r24, Y+17	; 0x11
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	28 f0       	brcs	.+10     	; 0x131e <__gesf2+0x56>
    1314:	c7 01       	movw	r24, r14
    1316:	b8 01       	movw	r22, r16
    1318:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fpcmp_parts_f>
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <__gesf2+0x58>
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	68 96       	adiw	r28, 0x18	; 24
    1322:	e6 e0       	ldi	r30, 0x06	; 6
    1324:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__epilogue_restores__+0x18>

00001328 <__fixsfsi>:
    1328:	ac e0       	ldi	r26, 0x0C	; 12
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__+0x20>
    1334:	69 83       	std	Y+1, r22	; 0x01
    1336:	7a 83       	std	Y+2, r23	; 0x02
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	be 01       	movw	r22, r28
    1342:	6b 5f       	subi	r22, 0xFB	; 251
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	0e 94 85 0b 	call	0x170a	; 0x170a <__unpack_f>
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	61 f1       	breq	.+88     	; 0x13a8 <__fixsfsi+0x80>
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	50 f1       	brcs	.+84     	; 0x13a8 <__fixsfsi+0x80>
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	21 f4       	brne	.+8      	; 0x1360 <__fixsfsi+0x38>
    1358:	8e 81       	ldd	r24, Y+6	; 0x06
    135a:	88 23       	and	r24, r24
    135c:	51 f1       	breq	.+84     	; 0x13b2 <__fixsfsi+0x8a>
    135e:	2e c0       	rjmp	.+92     	; 0x13bc <__fixsfsi+0x94>
    1360:	2f 81       	ldd	r18, Y+7	; 0x07
    1362:	38 85       	ldd	r19, Y+8	; 0x08
    1364:	37 fd       	sbrc	r19, 7
    1366:	20 c0       	rjmp	.+64     	; 0x13a8 <__fixsfsi+0x80>
    1368:	6e 81       	ldd	r22, Y+6	; 0x06
    136a:	2f 31       	cpi	r18, 0x1F	; 31
    136c:	31 05       	cpc	r19, r1
    136e:	1c f0       	brlt	.+6      	; 0x1376 <__fixsfsi+0x4e>
    1370:	66 23       	and	r22, r22
    1372:	f9 f0       	breq	.+62     	; 0x13b2 <__fixsfsi+0x8a>
    1374:	23 c0       	rjmp	.+70     	; 0x13bc <__fixsfsi+0x94>
    1376:	8e e1       	ldi	r24, 0x1E	; 30
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	82 1b       	sub	r24, r18
    137c:	93 0b       	sbc	r25, r19
    137e:	29 85       	ldd	r18, Y+9	; 0x09
    1380:	3a 85       	ldd	r19, Y+10	; 0x0a
    1382:	4b 85       	ldd	r20, Y+11	; 0x0b
    1384:	5c 85       	ldd	r21, Y+12	; 0x0c
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__fixsfsi+0x68>
    1388:	56 95       	lsr	r21
    138a:	47 95       	ror	r20
    138c:	37 95       	ror	r19
    138e:	27 95       	ror	r18
    1390:	8a 95       	dec	r24
    1392:	d2 f7       	brpl	.-12     	; 0x1388 <__fixsfsi+0x60>
    1394:	66 23       	and	r22, r22
    1396:	b1 f0       	breq	.+44     	; 0x13c4 <__fixsfsi+0x9c>
    1398:	50 95       	com	r21
    139a:	40 95       	com	r20
    139c:	30 95       	com	r19
    139e:	21 95       	neg	r18
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	4f 4f       	sbci	r20, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <__fixsfsi+0x9c>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <__fixsfsi+0x9c>
    13b2:	2f ef       	ldi	r18, 0xFF	; 255
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f ef       	ldi	r20, 0xFF	; 255
    13b8:	5f e7       	ldi	r21, 0x7F	; 127
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <__fixsfsi+0x9c>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	50 e8       	ldi	r21, 0x80	; 128
    13c4:	b9 01       	movw	r22, r18
    13c6:	ca 01       	movw	r24, r20
    13c8:	2c 96       	adiw	r28, 0x0c	; 12
    13ca:	e2 e0       	ldi	r30, 0x02	; 2
    13cc:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__+0x20>

000013d0 <__floatunsisf>:
    13d0:	a8 e0       	ldi	r26, 0x08	; 8
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee ee       	ldi	r30, 0xEE	; 238
    13d6:	f9 e0       	ldi	r31, 0x09	; 9
    13d8:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__prologue_saves__+0x10>
    13dc:	7b 01       	movw	r14, r22
    13de:	8c 01       	movw	r16, r24
    13e0:	61 15       	cp	r22, r1
    13e2:	71 05       	cpc	r23, r1
    13e4:	81 05       	cpc	r24, r1
    13e6:	91 05       	cpc	r25, r1
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <__floatunsisf+0x20>
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	60 c0       	rjmp	.+192    	; 0x14b0 <__floatunsisf+0xe0>
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	8e e1       	ldi	r24, 0x1E	; 30
    13f6:	c8 2e       	mov	r12, r24
    13f8:	d1 2c       	mov	r13, r1
    13fa:	dc 82       	std	Y+4, r13	; 0x04
    13fc:	cb 82       	std	Y+3, r12	; 0x03
    13fe:	ed 82       	std	Y+5, r14	; 0x05
    1400:	fe 82       	std	Y+6, r15	; 0x06
    1402:	0f 83       	std	Y+7, r16	; 0x07
    1404:	18 87       	std	Y+8, r17	; 0x08
    1406:	c8 01       	movw	r24, r16
    1408:	b7 01       	movw	r22, r14
    140a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__clzsi2>
    140e:	fc 01       	movw	r30, r24
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	f7 ff       	sbrs	r31, 7
    1414:	3b c0       	rjmp	.+118    	; 0x148c <__floatunsisf+0xbc>
    1416:	22 27       	eor	r18, r18
    1418:	33 27       	eor	r19, r19
    141a:	2e 1b       	sub	r18, r30
    141c:	3f 0b       	sbc	r19, r31
    141e:	57 01       	movw	r10, r14
    1420:	68 01       	movw	r12, r16
    1422:	02 2e       	mov	r0, r18
    1424:	04 c0       	rjmp	.+8      	; 0x142e <__floatunsisf+0x5e>
    1426:	d6 94       	lsr	r13
    1428:	c7 94       	ror	r12
    142a:	b7 94       	ror	r11
    142c:	a7 94       	ror	r10
    142e:	0a 94       	dec	r0
    1430:	d2 f7       	brpl	.-12     	; 0x1426 <__floatunsisf+0x56>
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	04 c0       	rjmp	.+8      	; 0x144c <__floatunsisf+0x7c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	aa 1f       	adc	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	2a 95       	dec	r18
    144e:	d2 f7       	brpl	.-12     	; 0x1444 <__floatunsisf+0x74>
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	a1 09       	sbc	r26, r1
    1454:	b1 09       	sbc	r27, r1
    1456:	8e 21       	and	r24, r14
    1458:	9f 21       	and	r25, r15
    145a:	a0 23       	and	r26, r16
    145c:	b1 23       	and	r27, r17
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	a1 05       	cpc	r26, r1
    1462:	b1 05       	cpc	r27, r1
    1464:	21 f0       	breq	.+8      	; 0x146e <__floatunsisf+0x9e>
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	4a 29       	or	r20, r10
    1470:	5b 29       	or	r21, r11
    1472:	6c 29       	or	r22, r12
    1474:	7d 29       	or	r23, r13
    1476:	4d 83       	std	Y+5, r20	; 0x05
    1478:	5e 83       	std	Y+6, r21	; 0x06
    147a:	6f 83       	std	Y+7, r22	; 0x07
    147c:	78 87       	std	Y+8, r23	; 0x08
    147e:	8e e1       	ldi	r24, 0x1E	; 30
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	8e 1b       	sub	r24, r30
    1484:	9f 0b       	sbc	r25, r31
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	12 c0       	rjmp	.+36     	; 0x14b0 <__floatunsisf+0xe0>
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	81 f0       	breq	.+32     	; 0x14b0 <__floatunsisf+0xe0>
    1490:	0e 2e       	mov	r0, r30
    1492:	04 c0       	rjmp	.+8      	; 0x149c <__floatunsisf+0xcc>
    1494:	ee 0c       	add	r14, r14
    1496:	ff 1c       	adc	r15, r15
    1498:	00 1f       	adc	r16, r16
    149a:	11 1f       	adc	r17, r17
    149c:	0a 94       	dec	r0
    149e:	d2 f7       	brpl	.-12     	; 0x1494 <__floatunsisf+0xc4>
    14a0:	ed 82       	std	Y+5, r14	; 0x05
    14a2:	fe 82       	std	Y+6, r15	; 0x06
    14a4:	0f 83       	std	Y+7, r16	; 0x07
    14a6:	18 87       	std	Y+8, r17	; 0x08
    14a8:	ce 1a       	sub	r12, r30
    14aa:	df 0a       	sbc	r13, r31
    14ac:	dc 82       	std	Y+4, r13	; 0x04
    14ae:	cb 82       	std	Y+3, r12	; 0x03
    14b0:	1a 82       	std	Y+2, r1	; 0x02
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__pack_f>
    14ba:	28 96       	adiw	r28, 0x08	; 8
    14bc:	ea e0       	ldi	r30, 0x0A	; 10
    14be:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__epilogue_restores__+0x10>

000014c2 <__clzsi2>:
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	7b 01       	movw	r14, r22
    14cc:	8c 01       	movw	r16, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	e8 16       	cp	r14, r24
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	f8 06       	cpc	r15, r24
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	08 07       	cpc	r16, r24
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	18 07       	cpc	r17, r24
    14de:	88 f4       	brcc	.+34     	; 0x1502 <__clzsi2+0x40>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	e8 16       	cp	r14, r24
    14e4:	f1 04       	cpc	r15, r1
    14e6:	01 05       	cpc	r16, r1
    14e8:	11 05       	cpc	r17, r1
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <__clzsi2+0x36>
    14ec:	28 f0       	brcs	.+10     	; 0x14f8 <__clzsi2+0x36>
    14ee:	88 e0       	ldi	r24, 0x08	; 8
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <__clzsi2+0x64>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	12 c0       	rjmp	.+36     	; 0x1526 <__clzsi2+0x64>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	e8 16       	cp	r14, r24
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	f8 06       	cpc	r15, r24
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	08 07       	cpc	r16, r24
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	18 07       	cpc	r17, r24
    1512:	28 f0       	brcs	.+10     	; 0x151e <__clzsi2+0x5c>
    1514:	88 e1       	ldi	r24, 0x18	; 24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <__clzsi2+0x64>
    151e:	80 e1       	ldi	r24, 0x10	; 16
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	20 e2       	ldi	r18, 0x20	; 32
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	28 1b       	sub	r18, r24
    1530:	39 0b       	sbc	r19, r25
    1532:	4a 0b       	sbc	r20, r26
    1534:	5b 0b       	sbc	r21, r27
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <__clzsi2+0x7e>
    1538:	16 95       	lsr	r17
    153a:	07 95       	ror	r16
    153c:	f7 94       	ror	r15
    153e:	e7 94       	ror	r14
    1540:	8a 95       	dec	r24
    1542:	d2 f7       	brpl	.-12     	; 0x1538 <__clzsi2+0x76>
    1544:	f7 01       	movw	r30, r14
    1546:	eb 5c       	subi	r30, 0xCB	; 203
    1548:	fd 4f       	sbci	r31, 0xFD	; 253
    154a:	80 81       	ld	r24, Z
    154c:	28 1b       	sub	r18, r24
    154e:	31 09       	sbc	r19, r1
    1550:	41 09       	sbc	r20, r1
    1552:	51 09       	sbc	r21, r1
    1554:	c9 01       	movw	r24, r18
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	08 95       	ret

00001560 <__pack_f>:
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	fc 01       	movw	r30, r24
    156c:	e4 80       	ldd	r14, Z+4	; 0x04
    156e:	f5 80       	ldd	r15, Z+5	; 0x05
    1570:	06 81       	ldd	r16, Z+6	; 0x06
    1572:	17 81       	ldd	r17, Z+7	; 0x07
    1574:	d1 80       	ldd	r13, Z+1	; 0x01
    1576:	80 81       	ld	r24, Z
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	48 f4       	brcc	.+18     	; 0x158e <__pack_f+0x2e>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e1       	ldi	r26, 0x10	; 16
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 2a       	or	r14, r24
    1586:	f9 2a       	or	r15, r25
    1588:	0a 2b       	or	r16, r26
    158a:	1b 2b       	or	r17, r27
    158c:	a5 c0       	rjmp	.+330    	; 0x16d8 <__pack_f+0x178>
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	09 f4       	brne	.+2      	; 0x1594 <__pack_f+0x34>
    1592:	9f c0       	rjmp	.+318    	; 0x16d2 <__pack_f+0x172>
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	21 f4       	brne	.+8      	; 0x15a0 <__pack_f+0x40>
    1598:	ee 24       	eor	r14, r14
    159a:	ff 24       	eor	r15, r15
    159c:	87 01       	movw	r16, r14
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <__pack_f+0x4a>
    15a0:	e1 14       	cp	r14, r1
    15a2:	f1 04       	cpc	r15, r1
    15a4:	01 05       	cpc	r16, r1
    15a6:	11 05       	cpc	r17, r1
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <__pack_f+0x50>
    15aa:	e0 e0       	ldi	r30, 0x00	; 0
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	96 c0       	rjmp	.+300    	; 0x16dc <__pack_f+0x17c>
    15b0:	62 81       	ldd	r22, Z+2	; 0x02
    15b2:	73 81       	ldd	r23, Z+3	; 0x03
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	62 38       	cpi	r22, 0x82	; 130
    15b8:	79 07       	cpc	r23, r25
    15ba:	0c f0       	brlt	.+2      	; 0x15be <__pack_f+0x5e>
    15bc:	5b c0       	rjmp	.+182    	; 0x1674 <__pack_f+0x114>
    15be:	22 e8       	ldi	r18, 0x82	; 130
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	26 1b       	sub	r18, r22
    15c4:	37 0b       	sbc	r19, r23
    15c6:	2a 31       	cpi	r18, 0x1A	; 26
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f0       	brlt	.+10     	; 0x15d6 <__pack_f+0x76>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	2a c0       	rjmp	.+84     	; 0x162a <__pack_f+0xca>
    15d6:	b8 01       	movw	r22, r16
    15d8:	a7 01       	movw	r20, r14
    15da:	02 2e       	mov	r0, r18
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__pack_f+0x86>
    15de:	76 95       	lsr	r23
    15e0:	67 95       	ror	r22
    15e2:	57 95       	ror	r21
    15e4:	47 95       	ror	r20
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__pack_f+0x7e>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <__pack_f+0x9c>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	aa 1f       	adc	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	2a 95       	dec	r18
    15fe:	d2 f7       	brpl	.-12     	; 0x15f4 <__pack_f+0x94>
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	a1 09       	sbc	r26, r1
    1604:	b1 09       	sbc	r27, r1
    1606:	8e 21       	and	r24, r14
    1608:	9f 21       	and	r25, r15
    160a:	a0 23       	and	r26, r16
    160c:	b1 23       	and	r27, r17
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	a1 05       	cpc	r26, r1
    1612:	b1 05       	cpc	r27, r1
    1614:	21 f0       	breq	.+8      	; 0x161e <__pack_f+0xbe>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	9a 01       	movw	r18, r20
    1620:	ab 01       	movw	r20, r22
    1622:	28 2b       	or	r18, r24
    1624:	39 2b       	or	r19, r25
    1626:	4a 2b       	or	r20, r26
    1628:	5b 2b       	or	r21, r27
    162a:	da 01       	movw	r26, r20
    162c:	c9 01       	movw	r24, r18
    162e:	8f 77       	andi	r24, 0x7F	; 127
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	a0 70       	andi	r26, 0x00	; 0
    1634:	b0 70       	andi	r27, 0x00	; 0
    1636:	80 34       	cpi	r24, 0x40	; 64
    1638:	91 05       	cpc	r25, r1
    163a:	a1 05       	cpc	r26, r1
    163c:	b1 05       	cpc	r27, r1
    163e:	39 f4       	brne	.+14     	; 0x164e <__pack_f+0xee>
    1640:	27 ff       	sbrs	r18, 7
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <__pack_f+0xf6>
    1644:	20 5c       	subi	r18, 0xC0	; 192
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	4f 4f       	sbci	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <__pack_f+0xf6>
    164e:	21 5c       	subi	r18, 0xC1	; 193
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	4f 4f       	sbci	r20, 0xFF	; 255
    1654:	5f 4f       	sbci	r21, 0xFF	; 255
    1656:	e0 e0       	ldi	r30, 0x00	; 0
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	20 30       	cpi	r18, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	3a 07       	cpc	r19, r26
    1660:	a0 e0       	ldi	r26, 0x00	; 0
    1662:	4a 07       	cpc	r20, r26
    1664:	a0 e4       	ldi	r26, 0x40	; 64
    1666:	5a 07       	cpc	r21, r26
    1668:	10 f0       	brcs	.+4      	; 0x166e <__pack_f+0x10e>
    166a:	e1 e0       	ldi	r30, 0x01	; 1
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	79 01       	movw	r14, r18
    1670:	8a 01       	movw	r16, r20
    1672:	27 c0       	rjmp	.+78     	; 0x16c2 <__pack_f+0x162>
    1674:	60 38       	cpi	r22, 0x80	; 128
    1676:	71 05       	cpc	r23, r1
    1678:	64 f5       	brge	.+88     	; 0x16d2 <__pack_f+0x172>
    167a:	fb 01       	movw	r30, r22
    167c:	e1 58       	subi	r30, 0x81	; 129
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	d8 01       	movw	r26, r16
    1682:	c7 01       	movw	r24, r14
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	90 70       	andi	r25, 0x00	; 0
    1688:	a0 70       	andi	r26, 0x00	; 0
    168a:	b0 70       	andi	r27, 0x00	; 0
    168c:	80 34       	cpi	r24, 0x40	; 64
    168e:	91 05       	cpc	r25, r1
    1690:	a1 05       	cpc	r26, r1
    1692:	b1 05       	cpc	r27, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <__pack_f+0x144>
    1696:	e7 fe       	sbrs	r14, 7
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <__pack_f+0x154>
    169a:	80 e4       	ldi	r24, 0x40	; 64
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e0       	ldi	r26, 0x00	; 0
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__pack_f+0x14c>
    16a4:	8f e3       	ldi	r24, 0x3F	; 63
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 e0       	ldi	r26, 0x00	; 0
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e8 0e       	add	r14, r24
    16ae:	f9 1e       	adc	r15, r25
    16b0:	0a 1f       	adc	r16, r26
    16b2:	1b 1f       	adc	r17, r27
    16b4:	17 ff       	sbrs	r17, 7
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <__pack_f+0x162>
    16b8:	16 95       	lsr	r17
    16ba:	07 95       	ror	r16
    16bc:	f7 94       	ror	r15
    16be:	e7 94       	ror	r14
    16c0:	31 96       	adiw	r30, 0x01	; 1
    16c2:	87 e0       	ldi	r24, 0x07	; 7
    16c4:	16 95       	lsr	r17
    16c6:	07 95       	ror	r16
    16c8:	f7 94       	ror	r15
    16ca:	e7 94       	ror	r14
    16cc:	8a 95       	dec	r24
    16ce:	d1 f7       	brne	.-12     	; 0x16c4 <__pack_f+0x164>
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <__pack_f+0x17c>
    16d2:	ee 24       	eor	r14, r14
    16d4:	ff 24       	eor	r15, r15
    16d6:	87 01       	movw	r16, r14
    16d8:	ef ef       	ldi	r30, 0xFF	; 255
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	6e 2f       	mov	r22, r30
    16de:	67 95       	ror	r22
    16e0:	66 27       	eor	r22, r22
    16e2:	67 95       	ror	r22
    16e4:	90 2f       	mov	r25, r16
    16e6:	9f 77       	andi	r25, 0x7F	; 127
    16e8:	d7 94       	ror	r13
    16ea:	dd 24       	eor	r13, r13
    16ec:	d7 94       	ror	r13
    16ee:	8e 2f       	mov	r24, r30
    16f0:	86 95       	lsr	r24
    16f2:	49 2f       	mov	r20, r25
    16f4:	46 2b       	or	r20, r22
    16f6:	58 2f       	mov	r21, r24
    16f8:	5d 29       	or	r21, r13
    16fa:	b7 01       	movw	r22, r14
    16fc:	ca 01       	movw	r24, r20
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	08 95       	ret

0000170a <__unpack_f>:
    170a:	fc 01       	movw	r30, r24
    170c:	db 01       	movw	r26, r22
    170e:	40 81       	ld	r20, Z
    1710:	51 81       	ldd	r21, Z+1	; 0x01
    1712:	22 81       	ldd	r18, Z+2	; 0x02
    1714:	62 2f       	mov	r22, r18
    1716:	6f 77       	andi	r22, 0x7F	; 127
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	22 1f       	adc	r18, r18
    171c:	22 27       	eor	r18, r18
    171e:	22 1f       	adc	r18, r18
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	89 2f       	mov	r24, r25
    1724:	88 0f       	add	r24, r24
    1726:	82 2b       	or	r24, r18
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	99 1f       	adc	r25, r25
    172e:	99 27       	eor	r25, r25
    1730:	99 1f       	adc	r25, r25
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 93       	st	X, r25
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	21 15       	cp	r18, r1
    173a:	31 05       	cpc	r19, r1
    173c:	a9 f5       	brne	.+106    	; 0x17a8 <__unpack_f+0x9e>
    173e:	41 15       	cp	r20, r1
    1740:	51 05       	cpc	r21, r1
    1742:	61 05       	cpc	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	11 f4       	brne	.+4      	; 0x174c <__unpack_f+0x42>
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	37 c0       	rjmp	.+110    	; 0x17ba <__unpack_f+0xb0>
    174c:	82 e8       	ldi	r24, 0x82	; 130
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	13 96       	adiw	r26, 0x03	; 3
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
    1756:	12 97       	sbiw	r26, 0x02	; 2
    1758:	9a 01       	movw	r18, r20
    175a:	ab 01       	movw	r20, r22
    175c:	67 e0       	ldi	r22, 0x07	; 7
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	6a 95       	dec	r22
    1768:	d1 f7       	brne	.-12     	; 0x175e <__unpack_f+0x54>
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	8c 93       	st	X, r24
    176e:	0d c0       	rjmp	.+26     	; 0x178a <__unpack_f+0x80>
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	44 1f       	adc	r20, r20
    1776:	55 1f       	adc	r21, r21
    1778:	12 96       	adiw	r26, 0x02	; 2
    177a:	8d 91       	ld	r24, X+
    177c:	9c 91       	ld	r25, X
    177e:	13 97       	sbiw	r26, 0x03	; 3
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	13 96       	adiw	r26, 0x03	; 3
    1784:	9c 93       	st	X, r25
    1786:	8e 93       	st	-X, r24
    1788:	12 97       	sbiw	r26, 0x02	; 2
    178a:	20 30       	cpi	r18, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	38 07       	cpc	r19, r24
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	48 07       	cpc	r20, r24
    1794:	80 e4       	ldi	r24, 0x40	; 64
    1796:	58 07       	cpc	r21, r24
    1798:	58 f3       	brcs	.-42     	; 0x1770 <__unpack_f+0x66>
    179a:	14 96       	adiw	r26, 0x04	; 4
    179c:	2d 93       	st	X+, r18
    179e:	3d 93       	st	X+, r19
    17a0:	4d 93       	st	X+, r20
    17a2:	5c 93       	st	X, r21
    17a4:	17 97       	sbiw	r26, 0x07	; 7
    17a6:	08 95       	ret
    17a8:	2f 3f       	cpi	r18, 0xFF	; 255
    17aa:	31 05       	cpc	r19, r1
    17ac:	79 f4       	brne	.+30     	; 0x17cc <__unpack_f+0xc2>
    17ae:	41 15       	cp	r20, r1
    17b0:	51 05       	cpc	r21, r1
    17b2:	61 05       	cpc	r22, r1
    17b4:	71 05       	cpc	r23, r1
    17b6:	19 f4       	brne	.+6      	; 0x17be <__unpack_f+0xb4>
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	8c 93       	st	X, r24
    17bc:	08 95       	ret
    17be:	64 ff       	sbrs	r22, 4
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <__unpack_f+0xbe>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	8c 93       	st	X, r24
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <__unpack_f+0xe2>
    17c8:	1c 92       	st	X, r1
    17ca:	10 c0       	rjmp	.+32     	; 0x17ec <__unpack_f+0xe2>
    17cc:	2f 57       	subi	r18, 0x7F	; 127
    17ce:	30 40       	sbci	r19, 0x00	; 0
    17d0:	13 96       	adiw	r26, 0x03	; 3
    17d2:	3c 93       	st	X, r19
    17d4:	2e 93       	st	-X, r18
    17d6:	12 97       	sbiw	r26, 0x02	; 2
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	8c 93       	st	X, r24
    17dc:	87 e0       	ldi	r24, 0x07	; 7
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	8a 95       	dec	r24
    17e8:	d1 f7       	brne	.-12     	; 0x17de <__unpack_f+0xd4>
    17ea:	70 64       	ori	r23, 0x40	; 64
    17ec:	14 96       	adiw	r26, 0x04	; 4
    17ee:	4d 93       	st	X+, r20
    17f0:	5d 93       	st	X+, r21
    17f2:	6d 93       	st	X+, r22
    17f4:	7c 93       	st	X, r23
    17f6:	17 97       	sbiw	r26, 0x07	; 7
    17f8:	08 95       	ret

000017fa <__fpcmp_parts_f>:
    17fa:	1f 93       	push	r17
    17fc:	dc 01       	movw	r26, r24
    17fe:	fb 01       	movw	r30, r22
    1800:	9c 91       	ld	r25, X
    1802:	92 30       	cpi	r25, 0x02	; 2
    1804:	08 f4       	brcc	.+2      	; 0x1808 <__fpcmp_parts_f+0xe>
    1806:	47 c0       	rjmp	.+142    	; 0x1896 <__fpcmp_parts_f+0x9c>
    1808:	80 81       	ld	r24, Z
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	08 f4       	brcc	.+2      	; 0x1810 <__fpcmp_parts_f+0x16>
    180e:	43 c0       	rjmp	.+134    	; 0x1896 <__fpcmp_parts_f+0x9c>
    1810:	94 30       	cpi	r25, 0x04	; 4
    1812:	51 f4       	brne	.+20     	; 0x1828 <__fpcmp_parts_f+0x2e>
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	1c 91       	ld	r17, X
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	99 f5       	brne	.+102    	; 0x1882 <__fpcmp_parts_f+0x88>
    181c:	81 81       	ldd	r24, Z+1	; 0x01
    181e:	68 2f       	mov	r22, r24
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	61 1b       	sub	r22, r17
    1824:	71 09       	sbc	r23, r1
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <__fpcmp_parts_f+0xac>
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	21 f0       	breq	.+8      	; 0x1834 <__fpcmp_parts_f+0x3a>
    182c:	92 30       	cpi	r25, 0x02	; 2
    182e:	31 f4       	brne	.+12     	; 0x183c <__fpcmp_parts_f+0x42>
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	b9 f1       	breq	.+110    	; 0x18a2 <__fpcmp_parts_f+0xa8>
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	88 23       	and	r24, r24
    1838:	89 f1       	breq	.+98     	; 0x189c <__fpcmp_parts_f+0xa2>
    183a:	2d c0       	rjmp	.+90     	; 0x1896 <__fpcmp_parts_f+0x9c>
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	1c 91       	ld	r17, X
    1840:	11 97       	sbiw	r26, 0x01	; 1
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	f1 f0       	breq	.+60     	; 0x1882 <__fpcmp_parts_f+0x88>
    1846:	81 81       	ldd	r24, Z+1	; 0x01
    1848:	18 17       	cp	r17, r24
    184a:	d9 f4       	brne	.+54     	; 0x1882 <__fpcmp_parts_f+0x88>
    184c:	12 96       	adiw	r26, 0x02	; 2
    184e:	2d 91       	ld	r18, X+
    1850:	3c 91       	ld	r19, X
    1852:	13 97       	sbiw	r26, 0x03	; 3
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	82 17       	cp	r24, r18
    185a:	93 07       	cpc	r25, r19
    185c:	94 f0       	brlt	.+36     	; 0x1882 <__fpcmp_parts_f+0x88>
    185e:	28 17       	cp	r18, r24
    1860:	39 07       	cpc	r19, r25
    1862:	bc f0       	brlt	.+46     	; 0x1892 <__fpcmp_parts_f+0x98>
    1864:	14 96       	adiw	r26, 0x04	; 4
    1866:	8d 91       	ld	r24, X+
    1868:	9d 91       	ld	r25, X+
    186a:	0d 90       	ld	r0, X+
    186c:	bc 91       	ld	r27, X
    186e:	a0 2d       	mov	r26, r0
    1870:	24 81       	ldd	r18, Z+4	; 0x04
    1872:	35 81       	ldd	r19, Z+5	; 0x05
    1874:	46 81       	ldd	r20, Z+6	; 0x06
    1876:	57 81       	ldd	r21, Z+7	; 0x07
    1878:	28 17       	cp	r18, r24
    187a:	39 07       	cpc	r19, r25
    187c:	4a 07       	cpc	r20, r26
    187e:	5b 07       	cpc	r21, r27
    1880:	18 f4       	brcc	.+6      	; 0x1888 <__fpcmp_parts_f+0x8e>
    1882:	11 23       	and	r17, r17
    1884:	41 f0       	breq	.+16     	; 0x1896 <__fpcmp_parts_f+0x9c>
    1886:	0a c0       	rjmp	.+20     	; 0x189c <__fpcmp_parts_f+0xa2>
    1888:	82 17       	cp	r24, r18
    188a:	93 07       	cpc	r25, r19
    188c:	a4 07       	cpc	r26, r20
    188e:	b5 07       	cpc	r27, r21
    1890:	40 f4       	brcc	.+16     	; 0x18a2 <__fpcmp_parts_f+0xa8>
    1892:	11 23       	and	r17, r17
    1894:	19 f0       	breq	.+6      	; 0x189c <__fpcmp_parts_f+0xa2>
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <__fpcmp_parts_f+0xac>
    189c:	6f ef       	ldi	r22, 0xFF	; 255
    189e:	7f ef       	ldi	r23, 0xFF	; 255
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <__fpcmp_parts_f+0xac>
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	cb 01       	movw	r24, r22
    18a8:	1f 91       	pop	r17
    18aa:	08 95       	ret

000018ac <__udivmodhi4>:
    18ac:	aa 1b       	sub	r26, r26
    18ae:	bb 1b       	sub	r27, r27
    18b0:	51 e1       	ldi	r21, 0x11	; 17
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <__udivmodhi4_ep>

000018b4 <__udivmodhi4_loop>:
    18b4:	aa 1f       	adc	r26, r26
    18b6:	bb 1f       	adc	r27, r27
    18b8:	a6 17       	cp	r26, r22
    18ba:	b7 07       	cpc	r27, r23
    18bc:	10 f0       	brcs	.+4      	; 0x18c2 <__udivmodhi4_ep>
    18be:	a6 1b       	sub	r26, r22
    18c0:	b7 0b       	sbc	r27, r23

000018c2 <__udivmodhi4_ep>:
    18c2:	88 1f       	adc	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	5a 95       	dec	r21
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__udivmodhi4_loop>
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	08 95       	ret

000018d4 <__divmodhi4>:
    18d4:	97 fb       	bst	r25, 7
    18d6:	09 2e       	mov	r0, r25
    18d8:	07 26       	eor	r0, r23
    18da:	0a d0       	rcall	.+20     	; 0x18f0 <__divmodhi4_neg1>
    18dc:	77 fd       	sbrc	r23, 7
    18de:	04 d0       	rcall	.+8      	; 0x18e8 <__divmodhi4_neg2>
    18e0:	e5 df       	rcall	.-54     	; 0x18ac <__udivmodhi4>
    18e2:	06 d0       	rcall	.+12     	; 0x18f0 <__divmodhi4_neg1>
    18e4:	00 20       	and	r0, r0
    18e6:	1a f4       	brpl	.+6      	; 0x18ee <__divmodhi4_exit>

000018e8 <__divmodhi4_neg2>:
    18e8:	70 95       	com	r23
    18ea:	61 95       	neg	r22
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255

000018ee <__divmodhi4_exit>:
    18ee:	08 95       	ret

000018f0 <__divmodhi4_neg1>:
    18f0:	f6 f7       	brtc	.-4      	; 0x18ee <__divmodhi4_exit>
    18f2:	90 95       	com	r25
    18f4:	81 95       	neg	r24
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	08 95       	ret

000018fa <__prologue_saves__>:
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	ca 1b       	sub	r28, r26
    1924:	db 0b       	sbc	r29, r27
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	09 94       	ijmp

00001932 <__epilogue_restores__>:
    1932:	2a 88       	ldd	r2, Y+18	; 0x12
    1934:	39 88       	ldd	r3, Y+17	; 0x11
    1936:	48 88       	ldd	r4, Y+16	; 0x10
    1938:	5f 84       	ldd	r5, Y+15	; 0x0f
    193a:	6e 84       	ldd	r6, Y+14	; 0x0e
    193c:	7d 84       	ldd	r7, Y+13	; 0x0d
    193e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1940:	9b 84       	ldd	r9, Y+11	; 0x0b
    1942:	aa 84       	ldd	r10, Y+10	; 0x0a
    1944:	b9 84       	ldd	r11, Y+9	; 0x09
    1946:	c8 84       	ldd	r12, Y+8	; 0x08
    1948:	df 80       	ldd	r13, Y+7	; 0x07
    194a:	ee 80       	ldd	r14, Y+6	; 0x06
    194c:	fd 80       	ldd	r15, Y+5	; 0x05
    194e:	0c 81       	ldd	r16, Y+4	; 0x04
    1950:	1b 81       	ldd	r17, Y+3	; 0x03
    1952:	aa 81       	ldd	r26, Y+2	; 0x02
    1954:	b9 81       	ldd	r27, Y+1	; 0x01
    1956:	ce 0f       	add	r28, r30
    1958:	d1 1d       	adc	r29, r1
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	ed 01       	movw	r28, r26
    1966:	08 95       	ret

00001968 <fputs>:
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	7c 01       	movw	r14, r24
    1976:	8b 01       	movw	r16, r22
    1978:	db 01       	movw	r26, r22
    197a:	13 96       	adiw	r26, 0x03	; 3
    197c:	8c 91       	ld	r24, X
    197e:	81 fd       	sbrc	r24, 1
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <fputs+0x20>
    1982:	cf ef       	ldi	r28, 0xFF	; 255
    1984:	df ef       	ldi	r29, 0xFF	; 255
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <fputs+0x46>
    1988:	c0 e0       	ldi	r28, 0x00	; 0
    198a:	d0 e0       	ldi	r29, 0x00	; 0
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <fputs+0x3c>
    198e:	d8 01       	movw	r26, r16
    1990:	18 96       	adiw	r26, 0x08	; 8
    1992:	ed 91       	ld	r30, X+
    1994:	fc 91       	ld	r31, X
    1996:	19 97       	sbiw	r26, 0x09	; 9
    1998:	b8 01       	movw	r22, r16
    199a:	09 95       	icall
    199c:	89 2b       	or	r24, r25
    199e:	11 f0       	breq	.+4      	; 0x19a4 <fputs+0x3c>
    19a0:	cf ef       	ldi	r28, 0xFF	; 255
    19a2:	df ef       	ldi	r29, 0xFF	; 255
    19a4:	f7 01       	movw	r30, r14
    19a6:	81 91       	ld	r24, Z+
    19a8:	7f 01       	movw	r14, r30
    19aa:	88 23       	and	r24, r24
    19ac:	81 f7       	brne	.-32     	; 0x198e <fputs+0x26>
    19ae:	ce 01       	movw	r24, r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	e6 e0       	ldi	r30, 0x06	; 6
    19b6:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__epilogue_restores__+0x18>

000019ba <sprintf>:
    19ba:	ae e0       	ldi	r26, 0x0E	; 14
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e3 ee       	ldi	r30, 0xE3	; 227
    19c0:	fc e0       	ldi	r31, 0x0C	; 12
    19c2:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__prologue_saves__+0x1c>
    19c6:	0d 89       	ldd	r16, Y+21	; 0x15
    19c8:	1e 89       	ldd	r17, Y+22	; 0x16
    19ca:	86 e0       	ldi	r24, 0x06	; 6
    19cc:	8c 83       	std	Y+4, r24	; 0x04
    19ce:	1a 83       	std	Y+2, r17	; 0x02
    19d0:	09 83       	std	Y+1, r16	; 0x01
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f e7       	ldi	r25, 0x7F	; 127
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	9e 01       	movw	r18, r28
    19dc:	27 5e       	subi	r18, 0xE7	; 231
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	ce 01       	movw	r24, r28
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	6f 89       	ldd	r22, Y+23	; 0x17
    19e6:	78 8d       	ldd	r23, Y+24	; 0x18
    19e8:	a9 01       	movw	r20, r18
    19ea:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vfprintf>
    19ee:	2f 81       	ldd	r18, Y+7	; 0x07
    19f0:	38 85       	ldd	r19, Y+8	; 0x08
    19f2:	02 0f       	add	r16, r18
    19f4:	13 1f       	adc	r17, r19
    19f6:	f8 01       	movw	r30, r16
    19f8:	10 82       	st	Z, r1
    19fa:	2e 96       	adiw	r28, 0x0e	; 14
    19fc:	e4 e0       	ldi	r30, 0x04	; 4
    19fe:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__epilogue_restores__+0x1c>

00001a02 <sin>:
    1a02:	9f 93       	push	r25
    1a04:	82 d2       	rcall	.+1284   	; 0x1f0a <__fp_rempio2>
    1a06:	0f 90       	pop	r0
    1a08:	07 fc       	sbrc	r0, 7
    1a0a:	ee 5f       	subi	r30, 0xFE	; 254
    1a0c:	a5 c2       	rjmp	.+1354   	; 0x1f58 <__fp_sinus>

00001a0e <vfprintf>:
    1a0e:	ab e0       	ldi	r26, 0x0B	; 11
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ed e0       	ldi	r30, 0x0D	; 13
    1a14:	fd e0       	ldi	r31, 0x0D	; 13
    1a16:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__>
    1a1a:	3c 01       	movw	r6, r24
    1a1c:	2b 01       	movw	r4, r22
    1a1e:	5a 01       	movw	r10, r20
    1a20:	fc 01       	movw	r30, r24
    1a22:	17 82       	std	Z+7, r1	; 0x07
    1a24:	16 82       	std	Z+6, r1	; 0x06
    1a26:	83 81       	ldd	r24, Z+3	; 0x03
    1a28:	81 fd       	sbrc	r24, 1
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <vfprintf+0x24>
    1a2c:	6f ef       	ldi	r22, 0xFF	; 255
    1a2e:	7f ef       	ldi	r23, 0xFF	; 255
    1a30:	c6 c1       	rjmp	.+908    	; 0x1dbe <vfprintf+0x3b0>
    1a32:	9a e0       	ldi	r25, 0x0A	; 10
    1a34:	89 2e       	mov	r8, r25
    1a36:	1e 01       	movw	r2, r28
    1a38:	08 94       	sec
    1a3a:	21 1c       	adc	r2, r1
    1a3c:	31 1c       	adc	r3, r1
    1a3e:	f3 01       	movw	r30, r6
    1a40:	23 81       	ldd	r18, Z+3	; 0x03
    1a42:	f2 01       	movw	r30, r4
    1a44:	23 fd       	sbrc	r18, 3
    1a46:	85 91       	lpm	r24, Z+
    1a48:	23 ff       	sbrs	r18, 3
    1a4a:	81 91       	ld	r24, Z+
    1a4c:	2f 01       	movw	r4, r30
    1a4e:	88 23       	and	r24, r24
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <vfprintf+0x46>
    1a52:	b2 c1       	rjmp	.+868    	; 0x1db8 <vfprintf+0x3aa>
    1a54:	85 32       	cpi	r24, 0x25	; 37
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <vfprintf+0x58>
    1a58:	23 fd       	sbrc	r18, 3
    1a5a:	85 91       	lpm	r24, Z+
    1a5c:	23 ff       	sbrs	r18, 3
    1a5e:	81 91       	ld	r24, Z+
    1a60:	2f 01       	movw	r4, r30
    1a62:	85 32       	cpi	r24, 0x25	; 37
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <vfprintf+0x62>
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	b3 01       	movw	r22, r6
    1a6a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1a6e:	e7 cf       	rjmp	.-50     	; 0x1a3e <vfprintf+0x30>
    1a70:	98 2f       	mov	r25, r24
    1a72:	ff 24       	eor	r15, r15
    1a74:	ee 24       	eor	r14, r14
    1a76:	99 24       	eor	r9, r9
    1a78:	ff e1       	ldi	r31, 0x1F	; 31
    1a7a:	ff 15       	cp	r31, r15
    1a7c:	d0 f0       	brcs	.+52     	; 0x1ab2 <vfprintf+0xa4>
    1a7e:	9b 32       	cpi	r25, 0x2B	; 43
    1a80:	69 f0       	breq	.+26     	; 0x1a9c <vfprintf+0x8e>
    1a82:	9c 32       	cpi	r25, 0x2C	; 44
    1a84:	28 f4       	brcc	.+10     	; 0x1a90 <vfprintf+0x82>
    1a86:	90 32       	cpi	r25, 0x20	; 32
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <vfprintf+0x92>
    1a8a:	93 32       	cpi	r25, 0x23	; 35
    1a8c:	91 f4       	brne	.+36     	; 0x1ab2 <vfprintf+0xa4>
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <vfprintf+0x9e>
    1a90:	9d 32       	cpi	r25, 0x2D	; 45
    1a92:	49 f0       	breq	.+18     	; 0x1aa6 <vfprintf+0x98>
    1a94:	90 33       	cpi	r25, 0x30	; 48
    1a96:	69 f4       	brne	.+26     	; 0x1ab2 <vfprintf+0xa4>
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	24 c0       	rjmp	.+72     	; 0x1ae4 <vfprintf+0xd6>
    1a9c:	52 e0       	ldi	r21, 0x02	; 2
    1a9e:	f5 2a       	or	r15, r21
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	f8 2a       	or	r15, r24
    1aa4:	28 c0       	rjmp	.+80     	; 0x1af6 <vfprintf+0xe8>
    1aa6:	98 e0       	ldi	r25, 0x08	; 8
    1aa8:	f9 2a       	or	r15, r25
    1aaa:	25 c0       	rjmp	.+74     	; 0x1af6 <vfprintf+0xe8>
    1aac:	e0 e1       	ldi	r30, 0x10	; 16
    1aae:	fe 2a       	or	r15, r30
    1ab0:	22 c0       	rjmp	.+68     	; 0x1af6 <vfprintf+0xe8>
    1ab2:	f7 fc       	sbrc	r15, 7
    1ab4:	29 c0       	rjmp	.+82     	; 0x1b08 <vfprintf+0xfa>
    1ab6:	89 2f       	mov	r24, r25
    1ab8:	80 53       	subi	r24, 0x30	; 48
    1aba:	8a 30       	cpi	r24, 0x0A	; 10
    1abc:	70 f4       	brcc	.+28     	; 0x1ada <vfprintf+0xcc>
    1abe:	f6 fe       	sbrs	r15, 6
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <vfprintf+0xbe>
    1ac2:	98 9c       	mul	r9, r8
    1ac4:	90 2c       	mov	r9, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	98 0e       	add	r9, r24
    1aca:	15 c0       	rjmp	.+42     	; 0x1af6 <vfprintf+0xe8>
    1acc:	e8 9c       	mul	r14, r8
    1ace:	e0 2c       	mov	r14, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	e8 0e       	add	r14, r24
    1ad4:	f0 e2       	ldi	r31, 0x20	; 32
    1ad6:	ff 2a       	or	r15, r31
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <vfprintf+0xe8>
    1ada:	9e 32       	cpi	r25, 0x2E	; 46
    1adc:	29 f4       	brne	.+10     	; 0x1ae8 <vfprintf+0xda>
    1ade:	f6 fc       	sbrc	r15, 6
    1ae0:	6b c1       	rjmp	.+726    	; 0x1db8 <vfprintf+0x3aa>
    1ae2:	40 e4       	ldi	r20, 0x40	; 64
    1ae4:	f4 2a       	or	r15, r20
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <vfprintf+0xe8>
    1ae8:	9c 36       	cpi	r25, 0x6C	; 108
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <vfprintf+0xe4>
    1aec:	50 e8       	ldi	r21, 0x80	; 128
    1aee:	f5 2a       	or	r15, r21
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0xe8>
    1af2:	98 36       	cpi	r25, 0x68	; 104
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <vfprintf+0xfa>
    1af6:	f2 01       	movw	r30, r4
    1af8:	23 fd       	sbrc	r18, 3
    1afa:	95 91       	lpm	r25, Z+
    1afc:	23 ff       	sbrs	r18, 3
    1afe:	91 91       	ld	r25, Z+
    1b00:	2f 01       	movw	r4, r30
    1b02:	99 23       	and	r25, r25
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <vfprintf+0xfa>
    1b06:	b8 cf       	rjmp	.-144    	; 0x1a78 <vfprintf+0x6a>
    1b08:	89 2f       	mov	r24, r25
    1b0a:	85 54       	subi	r24, 0x45	; 69
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	18 f0       	brcs	.+6      	; 0x1b16 <vfprintf+0x108>
    1b10:	80 52       	subi	r24, 0x20	; 32
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	38 f4       	brcc	.+14     	; 0x1b24 <vfprintf+0x116>
    1b16:	44 e0       	ldi	r20, 0x04	; 4
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	a4 0e       	add	r10, r20
    1b1c:	b5 1e       	adc	r11, r21
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	59 83       	std	Y+1, r21	; 0x01
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <vfprintf+0x134>
    1b24:	93 36       	cpi	r25, 0x63	; 99
    1b26:	31 f0       	breq	.+12     	; 0x1b34 <vfprintf+0x126>
    1b28:	93 37       	cpi	r25, 0x73	; 115
    1b2a:	79 f0       	breq	.+30     	; 0x1b4a <vfprintf+0x13c>
    1b2c:	93 35       	cpi	r25, 0x53	; 83
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <vfprintf+0x124>
    1b30:	56 c0       	rjmp	.+172    	; 0x1bde <vfprintf+0x1d0>
    1b32:	20 c0       	rjmp	.+64     	; 0x1b74 <vfprintf+0x166>
    1b34:	f5 01       	movw	r30, r10
    1b36:	80 81       	ld	r24, Z
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	42 e0       	ldi	r20, 0x02	; 2
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	a4 0e       	add	r10, r20
    1b40:	b5 1e       	adc	r11, r21
    1b42:	61 01       	movw	r12, r2
    1b44:	01 e0       	ldi	r16, 0x01	; 1
    1b46:	10 e0       	ldi	r17, 0x00	; 0
    1b48:	12 c0       	rjmp	.+36     	; 0x1b6e <vfprintf+0x160>
    1b4a:	f5 01       	movw	r30, r10
    1b4c:	c0 80       	ld	r12, Z
    1b4e:	d1 80       	ldd	r13, Z+1	; 0x01
    1b50:	f6 fc       	sbrc	r15, 6
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <vfprintf+0x14c>
    1b54:	6f ef       	ldi	r22, 0xFF	; 255
    1b56:	7f ef       	ldi	r23, 0xFF	; 255
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0x150>
    1b5a:	69 2d       	mov	r22, r9
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	a4 0e       	add	r10, r20
    1b64:	b5 1e       	adc	r11, r21
    1b66:	c6 01       	movw	r24, r12
    1b68:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <strnlen>
    1b6c:	8c 01       	movw	r16, r24
    1b6e:	5f e7       	ldi	r21, 0x7F	; 127
    1b70:	f5 22       	and	r15, r21
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <vfprintf+0x18e>
    1b74:	f5 01       	movw	r30, r10
    1b76:	c0 80       	ld	r12, Z
    1b78:	d1 80       	ldd	r13, Z+1	; 0x01
    1b7a:	f6 fc       	sbrc	r15, 6
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <vfprintf+0x176>
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	7f ef       	ldi	r23, 0xFF	; 255
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <vfprintf+0x17a>
    1b84:	69 2d       	mov	r22, r9
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	a4 0e       	add	r10, r20
    1b8e:	b5 1e       	adc	r11, r21
    1b90:	c6 01       	movw	r24, r12
    1b92:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <strnlen_P>
    1b96:	8c 01       	movw	r16, r24
    1b98:	50 e8       	ldi	r21, 0x80	; 128
    1b9a:	f5 2a       	or	r15, r21
    1b9c:	f3 fe       	sbrs	r15, 3
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <vfprintf+0x1a0>
    1ba0:	1a c0       	rjmp	.+52     	; 0x1bd6 <vfprintf+0x1c8>
    1ba2:	80 e2       	ldi	r24, 0x20	; 32
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	b3 01       	movw	r22, r6
    1ba8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1bac:	ea 94       	dec	r14
    1bae:	8e 2d       	mov	r24, r14
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	08 17       	cp	r16, r24
    1bb4:	19 07       	cpc	r17, r25
    1bb6:	a8 f3       	brcs	.-22     	; 0x1ba2 <vfprintf+0x194>
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <vfprintf+0x1c8>
    1bba:	f6 01       	movw	r30, r12
    1bbc:	f7 fc       	sbrc	r15, 7
    1bbe:	85 91       	lpm	r24, Z+
    1bc0:	f7 fe       	sbrs	r15, 7
    1bc2:	81 91       	ld	r24, Z+
    1bc4:	6f 01       	movw	r12, r30
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	b3 01       	movw	r22, r6
    1bca:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1bce:	e1 10       	cpse	r14, r1
    1bd0:	ea 94       	dec	r14
    1bd2:	01 50       	subi	r16, 0x01	; 1
    1bd4:	10 40       	sbci	r17, 0x00	; 0
    1bd6:	01 15       	cp	r16, r1
    1bd8:	11 05       	cpc	r17, r1
    1bda:	79 f7       	brne	.-34     	; 0x1bba <vfprintf+0x1ac>
    1bdc:	ea c0       	rjmp	.+468    	; 0x1db2 <vfprintf+0x3a4>
    1bde:	94 36       	cpi	r25, 0x64	; 100
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <vfprintf+0x1d8>
    1be2:	99 36       	cpi	r25, 0x69	; 105
    1be4:	69 f5       	brne	.+90     	; 0x1c40 <vfprintf+0x232>
    1be6:	f7 fe       	sbrs	r15, 7
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <vfprintf+0x1ec>
    1bea:	f5 01       	movw	r30, r10
    1bec:	20 81       	ld	r18, Z
    1bee:	31 81       	ldd	r19, Z+1	; 0x01
    1bf0:	42 81       	ldd	r20, Z+2	; 0x02
    1bf2:	53 81       	ldd	r21, Z+3	; 0x03
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0a c0       	rjmp	.+20     	; 0x1c0e <vfprintf+0x200>
    1bfa:	f5 01       	movw	r30, r10
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	9c 01       	movw	r18, r24
    1c02:	44 27       	eor	r20, r20
    1c04:	37 fd       	sbrc	r19, 7
    1c06:	40 95       	com	r20
    1c08:	54 2f       	mov	r21, r20
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a8 0e       	add	r10, r24
    1c10:	b9 1e       	adc	r11, r25
    1c12:	9f e6       	ldi	r25, 0x6F	; 111
    1c14:	f9 22       	and	r15, r25
    1c16:	57 ff       	sbrs	r21, 7
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <vfprintf+0x21e>
    1c1a:	50 95       	com	r21
    1c1c:	40 95       	com	r20
    1c1e:	30 95       	com	r19
    1c20:	21 95       	neg	r18
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	4f 4f       	sbci	r20, 0xFF	; 255
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	e0 e8       	ldi	r30, 0x80	; 128
    1c2a:	fe 2a       	or	r15, r30
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	b9 01       	movw	r22, r18
    1c30:	a1 01       	movw	r20, r2
    1c32:	2a e0       	ldi	r18, 0x0A	; 10
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__ultoa_invert>
    1c3a:	d8 2e       	mov	r13, r24
    1c3c:	d2 18       	sub	r13, r2
    1c3e:	40 c0       	rjmp	.+128    	; 0x1cc0 <vfprintf+0x2b2>
    1c40:	95 37       	cpi	r25, 0x75	; 117
    1c42:	29 f4       	brne	.+10     	; 0x1c4e <vfprintf+0x240>
    1c44:	1f 2d       	mov	r17, r15
    1c46:	1f 7e       	andi	r17, 0xEF	; 239
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	1d c0       	rjmp	.+58     	; 0x1c88 <vfprintf+0x27a>
    1c4e:	1f 2d       	mov	r17, r15
    1c50:	19 7f       	andi	r17, 0xF9	; 249
    1c52:	9f 36       	cpi	r25, 0x6F	; 111
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <vfprintf+0x260>
    1c56:	90 37       	cpi	r25, 0x70	; 112
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <vfprintf+0x254>
    1c5a:	98 35       	cpi	r25, 0x58	; 88
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <vfprintf+0x252>
    1c5e:	ac c0       	rjmp	.+344    	; 0x1db8 <vfprintf+0x3aa>
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <vfprintf+0x272>
    1c62:	90 37       	cpi	r25, 0x70	; 112
    1c64:	39 f0       	breq	.+14     	; 0x1c74 <vfprintf+0x266>
    1c66:	98 37       	cpi	r25, 0x78	; 120
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <vfprintf+0x25e>
    1c6a:	a6 c0       	rjmp	.+332    	; 0x1db8 <vfprintf+0x3aa>
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <vfprintf+0x268>
    1c6e:	28 e0       	ldi	r18, 0x08	; 8
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	0a c0       	rjmp	.+20     	; 0x1c88 <vfprintf+0x27a>
    1c74:	10 61       	ori	r17, 0x10	; 16
    1c76:	14 fd       	sbrc	r17, 4
    1c78:	14 60       	ori	r17, 0x04	; 4
    1c7a:	20 e1       	ldi	r18, 0x10	; 16
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <vfprintf+0x27a>
    1c80:	14 fd       	sbrc	r17, 4
    1c82:	16 60       	ori	r17, 0x06	; 6
    1c84:	20 e1       	ldi	r18, 0x10	; 16
    1c86:	32 e0       	ldi	r19, 0x02	; 2
    1c88:	17 ff       	sbrs	r17, 7
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <vfprintf+0x28e>
    1c8c:	f5 01       	movw	r30, r10
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	44 e0       	ldi	r20, 0x04	; 4
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <vfprintf+0x29e>
    1c9c:	f5 01       	movw	r30, r10
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	42 e0       	ldi	r20, 0x02	; 2
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	a4 0e       	add	r10, r20
    1cae:	b5 1e       	adc	r11, r21
    1cb0:	a1 01       	movw	r20, r2
    1cb2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__ultoa_invert>
    1cb6:	d8 2e       	mov	r13, r24
    1cb8:	d2 18       	sub	r13, r2
    1cba:	8f e7       	ldi	r24, 0x7F	; 127
    1cbc:	f8 2e       	mov	r15, r24
    1cbe:	f1 22       	and	r15, r17
    1cc0:	f6 fe       	sbrs	r15, 6
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <vfprintf+0x2cc>
    1cc4:	5e ef       	ldi	r21, 0xFE	; 254
    1cc6:	f5 22       	and	r15, r21
    1cc8:	d9 14       	cp	r13, r9
    1cca:	38 f4       	brcc	.+14     	; 0x1cda <vfprintf+0x2cc>
    1ccc:	f4 fe       	sbrs	r15, 4
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <vfprintf+0x2d0>
    1cd0:	f2 fc       	sbrc	r15, 2
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <vfprintf+0x2d0>
    1cd4:	8f ee       	ldi	r24, 0xEF	; 239
    1cd6:	f8 22       	and	r15, r24
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x2d0>
    1cda:	1d 2d       	mov	r17, r13
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <vfprintf+0x2d2>
    1cde:	19 2d       	mov	r17, r9
    1ce0:	f4 fe       	sbrs	r15, 4
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <vfprintf+0x2f0>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ed 0d       	add	r30, r13
    1ce8:	f1 1d       	adc	r31, r1
    1cea:	80 81       	ld	r24, Z
    1cec:	80 33       	cpi	r24, 0x30	; 48
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <vfprintf+0x2e8>
    1cf0:	99 ee       	ldi	r25, 0xE9	; 233
    1cf2:	f9 22       	and	r15, r25
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <vfprintf+0x2f8>
    1cf6:	1f 5f       	subi	r17, 0xFF	; 255
    1cf8:	f2 fe       	sbrs	r15, 2
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <vfprintf+0x2f8>
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <vfprintf+0x2f6>
    1cfe:	8f 2d       	mov	r24, r15
    1d00:	86 78       	andi	r24, 0x86	; 134
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <vfprintf+0x2f8>
    1d04:	1f 5f       	subi	r17, 0xFF	; 255
    1d06:	0f 2d       	mov	r16, r15
    1d08:	f3 fc       	sbrc	r15, 3
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <vfprintf+0x326>
    1d0c:	f0 fe       	sbrs	r15, 0
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <vfprintf+0x320>
    1d10:	1e 15       	cp	r17, r14
    1d12:	10 f0       	brcs	.+4      	; 0x1d18 <vfprintf+0x30a>
    1d14:	9d 2c       	mov	r9, r13
    1d16:	0b c0       	rjmp	.+22     	; 0x1d2e <vfprintf+0x320>
    1d18:	9d 2c       	mov	r9, r13
    1d1a:	9e 0c       	add	r9, r14
    1d1c:	91 1a       	sub	r9, r17
    1d1e:	1e 2d       	mov	r17, r14
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0x320>
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	b3 01       	movw	r22, r6
    1d28:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1d2c:	1f 5f       	subi	r17, 0xFF	; 255
    1d2e:	1e 15       	cp	r17, r14
    1d30:	c0 f3       	brcs	.-16     	; 0x1d22 <vfprintf+0x314>
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <vfprintf+0x32e>
    1d34:	1e 15       	cp	r17, r14
    1d36:	10 f4       	brcc	.+4      	; 0x1d3c <vfprintf+0x32e>
    1d38:	e1 1a       	sub	r14, r17
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <vfprintf+0x330>
    1d3c:	ee 24       	eor	r14, r14
    1d3e:	04 ff       	sbrs	r16, 4
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <vfprintf+0x352>
    1d42:	80 e3       	ldi	r24, 0x30	; 48
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	b3 01       	movw	r22, r6
    1d48:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1d4c:	02 ff       	sbrs	r16, 2
    1d4e:	1d c0       	rjmp	.+58     	; 0x1d8a <vfprintf+0x37c>
    1d50:	01 fd       	sbrc	r16, 1
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <vfprintf+0x34c>
    1d54:	88 e7       	ldi	r24, 0x78	; 120
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <vfprintf+0x368>
    1d5a:	88 e5       	ldi	r24, 0x58	; 88
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0b c0       	rjmp	.+22     	; 0x1d76 <vfprintf+0x368>
    1d60:	80 2f       	mov	r24, r16
    1d62:	86 78       	andi	r24, 0x86	; 134
    1d64:	91 f0       	breq	.+36     	; 0x1d8a <vfprintf+0x37c>
    1d66:	01 ff       	sbrs	r16, 1
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x360>
    1d6a:	8b e2       	ldi	r24, 0x2B	; 43
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <vfprintf+0x362>
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	f7 fc       	sbrc	r15, 7
    1d72:	8d e2       	ldi	r24, 0x2D	; 45
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	b3 01       	movw	r22, r6
    1d78:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <vfprintf+0x37c>
    1d7e:	80 e3       	ldi	r24, 0x30	; 48
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	b3 01       	movw	r22, r6
    1d84:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1d88:	9a 94       	dec	r9
    1d8a:	d9 14       	cp	r13, r9
    1d8c:	c0 f3       	brcs	.-16     	; 0x1d7e <vfprintf+0x370>
    1d8e:	da 94       	dec	r13
    1d90:	f1 01       	movw	r30, r2
    1d92:	ed 0d       	add	r30, r13
    1d94:	f1 1d       	adc	r31, r1
    1d96:	80 81       	ld	r24, Z
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	b3 01       	movw	r22, r6
    1d9c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1da0:	dd 20       	and	r13, r13
    1da2:	a9 f7       	brne	.-22     	; 0x1d8e <vfprintf+0x380>
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <vfprintf+0x3a4>
    1da6:	80 e2       	ldi	r24, 0x20	; 32
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	b3 01       	movw	r22, r6
    1dac:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <fputc>
    1db0:	ea 94       	dec	r14
    1db2:	ee 20       	and	r14, r14
    1db4:	c1 f7       	brne	.-16     	; 0x1da6 <vfprintf+0x398>
    1db6:	43 ce       	rjmp	.-890    	; 0x1a3e <vfprintf+0x30>
    1db8:	f3 01       	movw	r30, r6
    1dba:	66 81       	ldd	r22, Z+6	; 0x06
    1dbc:	77 81       	ldd	r23, Z+7	; 0x07
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	2b 96       	adiw	r28, 0x0b	; 11
    1dc2:	e2 e1       	ldi	r30, 0x12	; 18
    1dc4:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__>

00001dc8 <strnlen_P>:
    1dc8:	fc 01       	movw	r30, r24
    1dca:	05 90       	lpm	r0, Z+
    1dcc:	61 50       	subi	r22, 0x01	; 1
    1dce:	70 40       	sbci	r23, 0x00	; 0
    1dd0:	01 10       	cpse	r0, r1
    1dd2:	d8 f7       	brcc	.-10     	; 0x1dca <strnlen_P+0x2>
    1dd4:	80 95       	com	r24
    1dd6:	90 95       	com	r25
    1dd8:	8e 0f       	add	r24, r30
    1dda:	9f 1f       	adc	r25, r31
    1ddc:	08 95       	ret

00001dde <strnlen>:
    1dde:	fc 01       	movw	r30, r24
    1de0:	61 50       	subi	r22, 0x01	; 1
    1de2:	70 40       	sbci	r23, 0x00	; 0
    1de4:	01 90       	ld	r0, Z+
    1de6:	01 10       	cpse	r0, r1
    1de8:	d8 f7       	brcc	.-10     	; 0x1de0 <strnlen+0x2>
    1dea:	80 95       	com	r24
    1dec:	90 95       	com	r25
    1dee:	8e 0f       	add	r24, r30
    1df0:	9f 1f       	adc	r25, r31
    1df2:	08 95       	ret

00001df4 <fputc>:
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	eb 01       	movw	r28, r22
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	81 ff       	sbrs	r24, 1
    1e04:	1b c0       	rjmp	.+54     	; 0x1e3c <fputc+0x48>
    1e06:	82 ff       	sbrs	r24, 2
    1e08:	0d c0       	rjmp	.+26     	; 0x1e24 <fputc+0x30>
    1e0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	28 17       	cp	r18, r24
    1e14:	39 07       	cpc	r19, r25
    1e16:	64 f4       	brge	.+24     	; 0x1e30 <fputc+0x3c>
    1e18:	e8 81       	ld	r30, Y
    1e1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e1c:	01 93       	st	Z+, r16
    1e1e:	f9 83       	std	Y+1, r31	; 0x01
    1e20:	e8 83       	st	Y, r30
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <fputc+0x3c>
    1e24:	e8 85       	ldd	r30, Y+8	; 0x08
    1e26:	f9 85       	ldd	r31, Y+9	; 0x09
    1e28:	80 2f       	mov	r24, r16
    1e2a:	09 95       	icall
    1e2c:	89 2b       	or	r24, r25
    1e2e:	31 f4       	brne	.+12     	; 0x1e3c <fputc+0x48>
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	9f 81       	ldd	r25, Y+7	; 0x07
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	9f 83       	std	Y+7, r25	; 0x07
    1e38:	8e 83       	std	Y+6, r24	; 0x06
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <fputc+0x4c>
    1e3c:	0f ef       	ldi	r16, 0xFF	; 255
    1e3e:	1f ef       	ldi	r17, 0xFF	; 255
    1e40:	c8 01       	movw	r24, r16
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <__ultoa_invert>:
    1e4c:	fa 01       	movw	r30, r20
    1e4e:	aa 27       	eor	r26, r26
    1e50:	28 30       	cpi	r18, 0x08	; 8
    1e52:	51 f1       	breq	.+84     	; 0x1ea8 <__ultoa_invert+0x5c>
    1e54:	20 31       	cpi	r18, 0x10	; 16
    1e56:	81 f1       	breq	.+96     	; 0x1eb8 <__ultoa_invert+0x6c>
    1e58:	e8 94       	clt
    1e5a:	6f 93       	push	r22
    1e5c:	6e 7f       	andi	r22, 0xFE	; 254
    1e5e:	6e 5f       	subi	r22, 0xFE	; 254
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	8f 4f       	sbci	r24, 0xFF	; 255
    1e64:	9f 4f       	sbci	r25, 0xFF	; 255
    1e66:	af 4f       	sbci	r26, 0xFF	; 255
    1e68:	b1 e0       	ldi	r27, 0x01	; 1
    1e6a:	3e d0       	rcall	.+124    	; 0x1ee8 <__ultoa_invert+0x9c>
    1e6c:	b4 e0       	ldi	r27, 0x04	; 4
    1e6e:	3c d0       	rcall	.+120    	; 0x1ee8 <__ultoa_invert+0x9c>
    1e70:	67 0f       	add	r22, r23
    1e72:	78 1f       	adc	r23, r24
    1e74:	89 1f       	adc	r24, r25
    1e76:	9a 1f       	adc	r25, r26
    1e78:	a1 1d       	adc	r26, r1
    1e7a:	68 0f       	add	r22, r24
    1e7c:	79 1f       	adc	r23, r25
    1e7e:	8a 1f       	adc	r24, r26
    1e80:	91 1d       	adc	r25, r1
    1e82:	a1 1d       	adc	r26, r1
    1e84:	6a 0f       	add	r22, r26
    1e86:	71 1d       	adc	r23, r1
    1e88:	81 1d       	adc	r24, r1
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	a1 1d       	adc	r26, r1
    1e8e:	20 d0       	rcall	.+64     	; 0x1ed0 <__ultoa_invert+0x84>
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <__ultoa_invert+0x48>
    1e92:	68 94       	set
    1e94:	3f 91       	pop	r19
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	26 9f       	mul	r18, r22
    1e9a:	11 24       	eor	r1, r1
    1e9c:	30 19       	sub	r19, r0
    1e9e:	30 5d       	subi	r19, 0xD0	; 208
    1ea0:	31 93       	st	Z+, r19
    1ea2:	de f6       	brtc	.-74     	; 0x1e5a <__ultoa_invert+0xe>
    1ea4:	cf 01       	movw	r24, r30
    1ea6:	08 95       	ret
    1ea8:	46 2f       	mov	r20, r22
    1eaa:	47 70       	andi	r20, 0x07	; 7
    1eac:	40 5d       	subi	r20, 0xD0	; 208
    1eae:	41 93       	st	Z+, r20
    1eb0:	b3 e0       	ldi	r27, 0x03	; 3
    1eb2:	0f d0       	rcall	.+30     	; 0x1ed2 <__ultoa_invert+0x86>
    1eb4:	c9 f7       	brne	.-14     	; 0x1ea8 <__ultoa_invert+0x5c>
    1eb6:	f6 cf       	rjmp	.-20     	; 0x1ea4 <__ultoa_invert+0x58>
    1eb8:	46 2f       	mov	r20, r22
    1eba:	4f 70       	andi	r20, 0x0F	; 15
    1ebc:	40 5d       	subi	r20, 0xD0	; 208
    1ebe:	4a 33       	cpi	r20, 0x3A	; 58
    1ec0:	18 f0       	brcs	.+6      	; 0x1ec8 <__ultoa_invert+0x7c>
    1ec2:	49 5d       	subi	r20, 0xD9	; 217
    1ec4:	31 fd       	sbrc	r19, 1
    1ec6:	40 52       	subi	r20, 0x20	; 32
    1ec8:	41 93       	st	Z+, r20
    1eca:	02 d0       	rcall	.+4      	; 0x1ed0 <__ultoa_invert+0x84>
    1ecc:	a9 f7       	brne	.-22     	; 0x1eb8 <__ultoa_invert+0x6c>
    1ece:	ea cf       	rjmp	.-44     	; 0x1ea4 <__ultoa_invert+0x58>
    1ed0:	b4 e0       	ldi	r27, 0x04	; 4
    1ed2:	a6 95       	lsr	r26
    1ed4:	97 95       	ror	r25
    1ed6:	87 95       	ror	r24
    1ed8:	77 95       	ror	r23
    1eda:	67 95       	ror	r22
    1edc:	ba 95       	dec	r27
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__ultoa_invert+0x86>
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	61 05       	cpc	r22, r1
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	08 95       	ret
    1ee8:	9b 01       	movw	r18, r22
    1eea:	ac 01       	movw	r20, r24
    1eec:	0a 2e       	mov	r0, r26
    1eee:	06 94       	lsr	r0
    1ef0:	57 95       	ror	r21
    1ef2:	47 95       	ror	r20
    1ef4:	37 95       	ror	r19
    1ef6:	27 95       	ror	r18
    1ef8:	ba 95       	dec	r27
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__ultoa_invert+0xa2>
    1efc:	62 0f       	add	r22, r18
    1efe:	73 1f       	adc	r23, r19
    1f00:	84 1f       	adc	r24, r20
    1f02:	95 1f       	adc	r25, r21
    1f04:	a0 1d       	adc	r26, r0
    1f06:	08 95       	ret
    1f08:	ce c0       	rjmp	.+412    	; 0x20a6 <__fp_nan>

00001f0a <__fp_rempio2>:
    1f0a:	3f d0       	rcall	.+126    	; 0x1f8a <__fp_splitA>
    1f0c:	e8 f3       	brcs	.-6      	; 0x1f08 <__ultoa_invert+0xbc>
    1f0e:	e8 94       	clt
    1f10:	e0 e0       	ldi	r30, 0x00	; 0
    1f12:	bb 27       	eor	r27, r27
    1f14:	9f 57       	subi	r25, 0x7F	; 127
    1f16:	f0 f0       	brcs	.+60     	; 0x1f54 <__fp_rempio2+0x4a>
    1f18:	2a ed       	ldi	r18, 0xDA	; 218
    1f1a:	3f e0       	ldi	r19, 0x0F	; 15
    1f1c:	49 ec       	ldi	r20, 0xC9	; 201
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <__fp_rempio2+0x22>
    1f20:	ee 0f       	add	r30, r30
    1f22:	bb 0f       	add	r27, r27
    1f24:	66 1f       	adc	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	28 f0       	brcs	.+10     	; 0x1f36 <__fp_rempio2+0x2c>
    1f2c:	b2 3a       	cpi	r27, 0xA2	; 162
    1f2e:	62 07       	cpc	r22, r18
    1f30:	73 07       	cpc	r23, r19
    1f32:	84 07       	cpc	r24, r20
    1f34:	28 f0       	brcs	.+10     	; 0x1f40 <__fp_rempio2+0x36>
    1f36:	b2 5a       	subi	r27, 0xA2	; 162
    1f38:	62 0b       	sbc	r22, r18
    1f3a:	73 0b       	sbc	r23, r19
    1f3c:	84 0b       	sbc	r24, r20
    1f3e:	e3 95       	inc	r30
    1f40:	9a 95       	dec	r25
    1f42:	72 f7       	brpl	.-36     	; 0x1f20 <__fp_rempio2+0x16>
    1f44:	80 38       	cpi	r24, 0x80	; 128
    1f46:	30 f4       	brcc	.+12     	; 0x1f54 <__fp_rempio2+0x4a>
    1f48:	9a 95       	dec	r25
    1f4a:	bb 0f       	add	r27, r27
    1f4c:	66 1f       	adc	r22, r22
    1f4e:	77 1f       	adc	r23, r23
    1f50:	88 1f       	adc	r24, r24
    1f52:	d2 f7       	brpl	.-12     	; 0x1f48 <__fp_rempio2+0x3e>
    1f54:	90 48       	sbci	r25, 0x80	; 128
    1f56:	9b c0       	rjmp	.+310    	; 0x208e <__fp_mpack_finite>

00001f58 <__fp_sinus>:
    1f58:	ef 93       	push	r30
    1f5a:	e0 ff       	sbrs	r30, 0
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <__fp_sinus+0x12>
    1f5e:	a2 ea       	ldi	r26, 0xA2	; 162
    1f60:	2a ed       	ldi	r18, 0xDA	; 218
    1f62:	3f e0       	ldi	r19, 0x0F	; 15
    1f64:	49 ec       	ldi	r20, 0xC9	; 201
    1f66:	5f eb       	ldi	r21, 0xBF	; 191
    1f68:	37 d0       	rcall	.+110    	; 0x1fd8 <__addsf3x>
    1f6a:	bf d0       	rcall	.+382    	; 0x20ea <__fp_round>
    1f6c:	0f 90       	pop	r0
    1f6e:	03 94       	inc	r0
    1f70:	01 fc       	sbrc	r0, 1
    1f72:	90 58       	subi	r25, 0x80	; 128
    1f74:	e0 e7       	ldi	r30, 0x70	; 112
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	99 c0       	rjmp	.+306    	; 0x20ac <__fp_powsodd>

00001f7a <__fp_split3>:
    1f7a:	57 fd       	sbrc	r21, 7
    1f7c:	90 58       	subi	r25, 0x80	; 128
    1f7e:	44 0f       	add	r20, r20
    1f80:	55 1f       	adc	r21, r21
    1f82:	59 f0       	breq	.+22     	; 0x1f9a <__fp_splitA+0x10>
    1f84:	5f 3f       	cpi	r21, 0xFF	; 255
    1f86:	71 f0       	breq	.+28     	; 0x1fa4 <__fp_splitA+0x1a>
    1f88:	47 95       	ror	r20

00001f8a <__fp_splitA>:
    1f8a:	88 0f       	add	r24, r24
    1f8c:	97 fb       	bst	r25, 7
    1f8e:	99 1f       	adc	r25, r25
    1f90:	61 f0       	breq	.+24     	; 0x1faa <__fp_splitA+0x20>
    1f92:	9f 3f       	cpi	r25, 0xFF	; 255
    1f94:	79 f0       	breq	.+30     	; 0x1fb4 <__fp_splitA+0x2a>
    1f96:	87 95       	ror	r24
    1f98:	08 95       	ret
    1f9a:	12 16       	cp	r1, r18
    1f9c:	13 06       	cpc	r1, r19
    1f9e:	14 06       	cpc	r1, r20
    1fa0:	55 1f       	adc	r21, r21
    1fa2:	f2 cf       	rjmp	.-28     	; 0x1f88 <__fp_split3+0xe>
    1fa4:	46 95       	lsr	r20
    1fa6:	f1 df       	rcall	.-30     	; 0x1f8a <__fp_splitA>
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <__fp_splitA+0x30>
    1faa:	16 16       	cp	r1, r22
    1fac:	17 06       	cpc	r1, r23
    1fae:	18 06       	cpc	r1, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	f1 cf       	rjmp	.-30     	; 0x1f96 <__fp_splitA+0xc>
    1fb4:	86 95       	lsr	r24
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	61 05       	cpc	r22, r1
    1fba:	08 94       	sec
    1fbc:	08 95       	ret
    1fbe:	87 d0       	rcall	.+270    	; 0x20ce <__fp_pscA>
    1fc0:	30 f0       	brcs	.+12     	; 0x1fce <__fp_splitA+0x44>
    1fc2:	8c d0       	rcall	.+280    	; 0x20dc <__fp_pscB>
    1fc4:	20 f0       	brcs	.+8      	; 0x1fce <__fp_splitA+0x44>
    1fc6:	31 f4       	brne	.+12     	; 0x1fd4 <__fp_splitA+0x4a>
    1fc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1fca:	11 f4       	brne	.+4      	; 0x1fd0 <__fp_splitA+0x46>
    1fcc:	1e f4       	brtc	.+6      	; 0x1fd4 <__fp_splitA+0x4a>
    1fce:	6b c0       	rjmp	.+214    	; 0x20a6 <__fp_nan>
    1fd0:	0e f4       	brtc	.+2      	; 0x1fd4 <__fp_splitA+0x4a>
    1fd2:	e0 95       	com	r30
    1fd4:	e7 fb       	bst	r30, 7
    1fd6:	53 c0       	rjmp	.+166    	; 0x207e <__fp_inf>

00001fd8 <__addsf3x>:
    1fd8:	e9 2f       	mov	r30, r25
    1fda:	cf df       	rcall	.-98     	; 0x1f7a <__fp_split3>
    1fdc:	80 f3       	brcs	.-32     	; 0x1fbe <__fp_splitA+0x34>
    1fde:	ba 17       	cp	r27, r26
    1fe0:	62 07       	cpc	r22, r18
    1fe2:	73 07       	cpc	r23, r19
    1fe4:	84 07       	cpc	r24, r20
    1fe6:	95 07       	cpc	r25, r21
    1fe8:	18 f0       	brcs	.+6      	; 0x1ff0 <__addsf3x+0x18>
    1fea:	71 f4       	brne	.+28     	; 0x2008 <__addsf3x+0x30>
    1fec:	9e f5       	brtc	.+102    	; 0x2054 <__addsf3x+0x7c>
    1fee:	8e c0       	rjmp	.+284    	; 0x210c <__fp_zero>
    1ff0:	0e f4       	brtc	.+2      	; 0x1ff4 <__addsf3x+0x1c>
    1ff2:	e0 95       	com	r30
    1ff4:	0b 2e       	mov	r0, r27
    1ff6:	ba 2f       	mov	r27, r26
    1ff8:	a0 2d       	mov	r26, r0
    1ffa:	0b 01       	movw	r0, r22
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	90 01       	movw	r18, r0
    2000:	0c 01       	movw	r0, r24
    2002:	ca 01       	movw	r24, r20
    2004:	a0 01       	movw	r20, r0
    2006:	11 24       	eor	r1, r1
    2008:	ff 27       	eor	r31, r31
    200a:	59 1b       	sub	r21, r25
    200c:	99 f0       	breq	.+38     	; 0x2034 <__addsf3x+0x5c>
    200e:	59 3f       	cpi	r21, 0xF9	; 249
    2010:	50 f4       	brcc	.+20     	; 0x2026 <__addsf3x+0x4e>
    2012:	50 3e       	cpi	r21, 0xE0	; 224
    2014:	68 f1       	brcs	.+90     	; 0x2070 <__addsf3x+0x98>
    2016:	1a 16       	cp	r1, r26
    2018:	f0 40       	sbci	r31, 0x00	; 0
    201a:	a2 2f       	mov	r26, r18
    201c:	23 2f       	mov	r18, r19
    201e:	34 2f       	mov	r19, r20
    2020:	44 27       	eor	r20, r20
    2022:	58 5f       	subi	r21, 0xF8	; 248
    2024:	f3 cf       	rjmp	.-26     	; 0x200c <__addsf3x+0x34>
    2026:	46 95       	lsr	r20
    2028:	37 95       	ror	r19
    202a:	27 95       	ror	r18
    202c:	a7 95       	ror	r26
    202e:	f0 40       	sbci	r31, 0x00	; 0
    2030:	53 95       	inc	r21
    2032:	c9 f7       	brne	.-14     	; 0x2026 <__addsf3x+0x4e>
    2034:	7e f4       	brtc	.+30     	; 0x2054 <__addsf3x+0x7c>
    2036:	1f 16       	cp	r1, r31
    2038:	ba 0b       	sbc	r27, r26
    203a:	62 0b       	sbc	r22, r18
    203c:	73 0b       	sbc	r23, r19
    203e:	84 0b       	sbc	r24, r20
    2040:	ba f0       	brmi	.+46     	; 0x2070 <__addsf3x+0x98>
    2042:	91 50       	subi	r25, 0x01	; 1
    2044:	a1 f0       	breq	.+40     	; 0x206e <__addsf3x+0x96>
    2046:	ff 0f       	add	r31, r31
    2048:	bb 1f       	adc	r27, r27
    204a:	66 1f       	adc	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	88 1f       	adc	r24, r24
    2050:	c2 f7       	brpl	.-16     	; 0x2042 <__addsf3x+0x6a>
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <__addsf3x+0x98>
    2054:	ba 0f       	add	r27, r26
    2056:	62 1f       	adc	r22, r18
    2058:	73 1f       	adc	r23, r19
    205a:	84 1f       	adc	r24, r20
    205c:	48 f4       	brcc	.+18     	; 0x2070 <__addsf3x+0x98>
    205e:	87 95       	ror	r24
    2060:	77 95       	ror	r23
    2062:	67 95       	ror	r22
    2064:	b7 95       	ror	r27
    2066:	f7 95       	ror	r31
    2068:	9e 3f       	cpi	r25, 0xFE	; 254
    206a:	08 f0       	brcs	.+2      	; 0x206e <__addsf3x+0x96>
    206c:	b3 cf       	rjmp	.-154    	; 0x1fd4 <__fp_splitA+0x4a>
    206e:	93 95       	inc	r25
    2070:	88 0f       	add	r24, r24
    2072:	08 f0       	brcs	.+2      	; 0x2076 <__addsf3x+0x9e>
    2074:	99 27       	eor	r25, r25
    2076:	ee 0f       	add	r30, r30
    2078:	97 95       	ror	r25
    207a:	87 95       	ror	r24
    207c:	08 95       	ret

0000207e <__fp_inf>:
    207e:	97 f9       	bld	r25, 7
    2080:	9f 67       	ori	r25, 0x7F	; 127
    2082:	80 e8       	ldi	r24, 0x80	; 128
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	08 95       	ret

0000208a <__fp_mpack>:
    208a:	9f 3f       	cpi	r25, 0xFF	; 255
    208c:	31 f0       	breq	.+12     	; 0x209a <__fp_mpack_finite+0xc>

0000208e <__fp_mpack_finite>:
    208e:	91 50       	subi	r25, 0x01	; 1
    2090:	20 f4       	brcc	.+8      	; 0x209a <__fp_mpack_finite+0xc>
    2092:	87 95       	ror	r24
    2094:	77 95       	ror	r23
    2096:	67 95       	ror	r22
    2098:	b7 95       	ror	r27
    209a:	88 0f       	add	r24, r24
    209c:	91 1d       	adc	r25, r1
    209e:	96 95       	lsr	r25
    20a0:	87 95       	ror	r24
    20a2:	97 f9       	bld	r25, 7
    20a4:	08 95       	ret

000020a6 <__fp_nan>:
    20a6:	9f ef       	ldi	r25, 0xFF	; 255
    20a8:	80 ec       	ldi	r24, 0xC0	; 192
    20aa:	08 95       	ret

000020ac <__fp_powsodd>:
    20ac:	9f 93       	push	r25
    20ae:	8f 93       	push	r24
    20b0:	7f 93       	push	r23
    20b2:	6f 93       	push	r22
    20b4:	ff 93       	push	r31
    20b6:	ef 93       	push	r30
    20b8:	9b 01       	movw	r18, r22
    20ba:	ac 01       	movw	r20, r24
    20bc:	0b d8       	rcall	.-4074   	; 0x10d4 <__mulsf3>
    20be:	ef 91       	pop	r30
    20c0:	ff 91       	pop	r31
    20c2:	2b d0       	rcall	.+86     	; 0x211a <__fp_powser>
    20c4:	2f 91       	pop	r18
    20c6:	3f 91       	pop	r19
    20c8:	4f 91       	pop	r20
    20ca:	5f 91       	pop	r21
    20cc:	03 c8       	rjmp	.-4090   	; 0x10d4 <__mulsf3>

000020ce <__fp_pscA>:
    20ce:	00 24       	eor	r0, r0
    20d0:	0a 94       	dec	r0
    20d2:	16 16       	cp	r1, r22
    20d4:	17 06       	cpc	r1, r23
    20d6:	18 06       	cpc	r1, r24
    20d8:	09 06       	cpc	r0, r25
    20da:	08 95       	ret

000020dc <__fp_pscB>:
    20dc:	00 24       	eor	r0, r0
    20de:	0a 94       	dec	r0
    20e0:	12 16       	cp	r1, r18
    20e2:	13 06       	cpc	r1, r19
    20e4:	14 06       	cpc	r1, r20
    20e6:	05 06       	cpc	r0, r21
    20e8:	08 95       	ret

000020ea <__fp_round>:
    20ea:	09 2e       	mov	r0, r25
    20ec:	03 94       	inc	r0
    20ee:	00 0c       	add	r0, r0
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <__fp_round+0xc>
    20f2:	88 23       	and	r24, r24
    20f4:	52 f0       	brmi	.+20     	; 0x210a <__fp_round+0x20>
    20f6:	bb 0f       	add	r27, r27
    20f8:	40 f4       	brcc	.+16     	; 0x210a <__fp_round+0x20>
    20fa:	bf 2b       	or	r27, r31
    20fc:	11 f4       	brne	.+4      	; 0x2102 <__fp_round+0x18>
    20fe:	60 ff       	sbrs	r22, 0
    2100:	04 c0       	rjmp	.+8      	; 0x210a <__fp_round+0x20>
    2102:	6f 5f       	subi	r22, 0xFF	; 255
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	8f 4f       	sbci	r24, 0xFF	; 255
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	08 95       	ret

0000210c <__fp_zero>:
    210c:	e8 94       	clt

0000210e <__fp_szero>:
    210e:	bb 27       	eor	r27, r27
    2110:	66 27       	eor	r22, r22
    2112:	77 27       	eor	r23, r23
    2114:	cb 01       	movw	r24, r22
    2116:	97 f9       	bld	r25, 7
    2118:	08 95       	ret

0000211a <__fp_powser>:
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	1f 93       	push	r17
    2120:	0f 93       	push	r16
    2122:	ff 92       	push	r15
    2124:	ef 92       	push	r14
    2126:	df 92       	push	r13
    2128:	7b 01       	movw	r14, r22
    212a:	8c 01       	movw	r16, r24
    212c:	68 94       	set
    212e:	05 c0       	rjmp	.+10     	; 0x213a <__fp_powser+0x20>
    2130:	da 2e       	mov	r13, r26
    2132:	ef 01       	movw	r28, r30
    2134:	21 d0       	rcall	.+66     	; 0x2178 <__mulsf3x>
    2136:	fe 01       	movw	r30, r28
    2138:	e8 94       	clt
    213a:	a5 91       	lpm	r26, Z+
    213c:	25 91       	lpm	r18, Z+
    213e:	35 91       	lpm	r19, Z+
    2140:	45 91       	lpm	r20, Z+
    2142:	55 91       	lpm	r21, Z+
    2144:	ae f3       	brts	.-22     	; 0x2130 <__fp_powser+0x16>
    2146:	ef 01       	movw	r28, r30
    2148:	47 df       	rcall	.-370    	; 0x1fd8 <__addsf3x>
    214a:	fe 01       	movw	r30, r28
    214c:	97 01       	movw	r18, r14
    214e:	a8 01       	movw	r20, r16
    2150:	da 94       	dec	r13
    2152:	79 f7       	brne	.-34     	; 0x2132 <__fp_powser+0x18>
    2154:	df 90       	pop	r13
    2156:	ef 90       	pop	r14
    2158:	ff 90       	pop	r15
    215a:	0f 91       	pop	r16
    215c:	1f 91       	pop	r17
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret
    2164:	b4 df       	rcall	.-152    	; 0x20ce <__fp_pscA>
    2166:	28 f0       	brcs	.+10     	; 0x2172 <__fp_powser+0x58>
    2168:	b9 df       	rcall	.-142    	; 0x20dc <__fp_pscB>
    216a:	18 f0       	brcs	.+6      	; 0x2172 <__fp_powser+0x58>
    216c:	95 23       	and	r25, r21
    216e:	09 f0       	breq	.+2      	; 0x2172 <__fp_powser+0x58>
    2170:	86 cf       	rjmp	.-244    	; 0x207e <__fp_inf>
    2172:	99 cf       	rjmp	.-206    	; 0x20a6 <__fp_nan>
    2174:	11 24       	eor	r1, r1
    2176:	cb cf       	rjmp	.-106    	; 0x210e <__fp_szero>

00002178 <__mulsf3x>:
    2178:	00 df       	rcall	.-512    	; 0x1f7a <__fp_split3>
    217a:	a0 f3       	brcs	.-24     	; 0x2164 <__fp_powser+0x4a>

0000217c <__mulsf3_pse>:
    217c:	95 9f       	mul	r25, r21
    217e:	d1 f3       	breq	.-12     	; 0x2174 <__fp_powser+0x5a>
    2180:	95 0f       	add	r25, r21
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	55 1f       	adc	r21, r21
    2186:	62 9f       	mul	r22, r18
    2188:	f0 01       	movw	r30, r0
    218a:	72 9f       	mul	r23, r18
    218c:	bb 27       	eor	r27, r27
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	63 9f       	mul	r22, r19
    2194:	aa 27       	eor	r26, r26
    2196:	f0 0d       	add	r31, r0
    2198:	b1 1d       	adc	r27, r1
    219a:	aa 1f       	adc	r26, r26
    219c:	64 9f       	mul	r22, r20
    219e:	66 27       	eor	r22, r22
    21a0:	b0 0d       	add	r27, r0
    21a2:	a1 1d       	adc	r26, r1
    21a4:	66 1f       	adc	r22, r22
    21a6:	82 9f       	mul	r24, r18
    21a8:	22 27       	eor	r18, r18
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	73 9f       	mul	r23, r19
    21b2:	b0 0d       	add	r27, r0
    21b4:	a1 1d       	adc	r26, r1
    21b6:	62 1f       	adc	r22, r18
    21b8:	83 9f       	mul	r24, r19
    21ba:	a0 0d       	add	r26, r0
    21bc:	61 1d       	adc	r22, r1
    21be:	22 1f       	adc	r18, r18
    21c0:	74 9f       	mul	r23, r20
    21c2:	33 27       	eor	r19, r19
    21c4:	a0 0d       	add	r26, r0
    21c6:	61 1d       	adc	r22, r1
    21c8:	23 1f       	adc	r18, r19
    21ca:	84 9f       	mul	r24, r20
    21cc:	60 0d       	add	r22, r0
    21ce:	21 1d       	adc	r18, r1
    21d0:	82 2f       	mov	r24, r18
    21d2:	76 2f       	mov	r23, r22
    21d4:	6a 2f       	mov	r22, r26
    21d6:	11 24       	eor	r1, r1
    21d8:	9f 57       	subi	r25, 0x7F	; 127
    21da:	50 40       	sbci	r21, 0x00	; 0
    21dc:	8a f0       	brmi	.+34     	; 0x2200 <__mulsf3_pse+0x84>
    21de:	e1 f0       	breq	.+56     	; 0x2218 <__mulsf3_pse+0x9c>
    21e0:	88 23       	and	r24, r24
    21e2:	4a f0       	brmi	.+18     	; 0x21f6 <__mulsf3_pse+0x7a>
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	91 50       	subi	r25, 0x01	; 1
    21f2:	50 40       	sbci	r21, 0x00	; 0
    21f4:	a9 f7       	brne	.-22     	; 0x21e0 <__mulsf3_pse+0x64>
    21f6:	9e 3f       	cpi	r25, 0xFE	; 254
    21f8:	51 05       	cpc	r21, r1
    21fa:	70 f0       	brcs	.+28     	; 0x2218 <__mulsf3_pse+0x9c>
    21fc:	40 cf       	rjmp	.-384    	; 0x207e <__fp_inf>
    21fe:	87 cf       	rjmp	.-242    	; 0x210e <__fp_szero>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	ec f3       	brlt	.-6      	; 0x21fe <__mulsf3_pse+0x82>
    2204:	98 3e       	cpi	r25, 0xE8	; 232
    2206:	dc f3       	brlt	.-10     	; 0x21fe <__mulsf3_pse+0x82>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	e7 95       	ror	r30
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	c1 f7       	brne	.-16     	; 0x2208 <__mulsf3_pse+0x8c>
    2218:	fe 2b       	or	r31, r30
    221a:	88 0f       	add	r24, r24
    221c:	91 1d       	adc	r25, r1
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <_exit>:
    2226:	f8 94       	cli

00002228 <__stop_program>:
    2228:	ff cf       	rjmp	.-2      	; 0x2228 <__stop_program>
