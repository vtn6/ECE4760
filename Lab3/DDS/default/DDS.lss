
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000236  00800100  000025ca  0000265e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020e  00800336  00800336  00002894  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007e9  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003028  00000000  00000000  0000323d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001506  00000000  00000000  00006265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001dce  00000000  00000000  0000776b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000953c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000858  00000000  00000000  0000994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000109f  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__vector_9>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <Initialize+0xf6>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDMainFrequency>:
      bb:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000c7 <LCDMainDecay>:
      c7:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000d4 <LCDMainRise>:
      d4:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000e0 <LCDFMFreq>:
      e0:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000ea <LCDFMDepth>:
      ea:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

000000f5 <LCDFMDecay>:
      f5:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

00000100 <LCDVoice>:
     100:	56 4f 49 43 45 20 00 00                             VOICE ..

00000108 <LcdCustomChar>:
     108:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     118:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     128:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     138:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	13 e0       	ldi	r17, 0x03	; 3
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	ea ec       	ldi	r30, 0xCA	; 202
     15c:	f5 e2       	ldi	r31, 0x25	; 37
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	a6 33       	cpi	r26, 0x36	; 54
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	15 e0       	ldi	r17, 0x05	; 5
     16c:	a6 e3       	ldi	r26, 0x36	; 54
     16e:	b3 e0       	ldi	r27, 0x03	; 3
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a4 34       	cpi	r26, 0x44	; 68
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <main>
     17e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <sample>:
void setState(uint8_t);
void nextState(void);
uint8_t sample(uint8_t);

//returns OCR0A
uint8_t sample(uint8_t idx) {
     186:	df 92       	push	r13
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	d8 2e       	mov	r13, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if (!(time & 0x0ff)) {
     196:	80 91 22 05 	lds	r24, 0x0522
     19a:	90 91 23 05 	lds	r25, 0x0523
     19e:	88 23       	and	r24, r24
     1a0:	09 f0       	breq	.+2      	; 0x1a4 <sample+0x1e>
     1a2:	47 c0       	rjmp	.+142    	; 0x232 <sample+0xac>
		amp_fall_main[idx] = amp_fall_main[idx] - (amp_fall_main[idx]>>decay_main[idx]);
     1a4:	0d 2d       	mov	r16, r13
     1a6:	10 e0       	ldi	r17, 0x00	; 0
     1a8:	a8 01       	movw	r20, r16
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	da 01       	movw	r26, r20
     1b0:	a9 52       	subi	r26, 0x29	; 41
     1b2:	bc 4f       	sbci	r27, 0xFC	; 252
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	11 97       	sbiw	r26, 0x01	; 1
     1ba:	8d 91       	ld	r24, X+
     1bc:	9c 91       	ld	r25, X
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	f8 01       	movw	r30, r16
     1c2:	e0 56       	subi	r30, 0x60	; 96
     1c4:	fc 4f       	sbci	r31, 0xFC	; 252
     1c6:	60 81       	ld	r22, Z
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <sample+0x48>
     1ca:	96 95       	lsr	r25
     1cc:	87 95       	ror	r24
     1ce:	6a 95       	dec	r22
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <sample+0x44>
     1d2:	28 1b       	sub	r18, r24
     1d4:	39 0b       	sbc	r19, r25
     1d6:	11 96       	adiw	r26, 0x01	; 1
     1d8:	3c 93       	st	X, r19
     1da:	2e 93       	st	-X, r18
		rise_phase_main[idx] = rise_phase_main[idx] - (rise_phase_main[idx]>>rise_main[idx]);
     1dc:	da 01       	movw	r26, r20
     1de:	aa 51       	subi	r26, 0x1A	; 26
     1e0:	bb 4f       	sbci	r27, 0xFB	; 251
     1e2:	2d 91       	ld	r18, X+
     1e4:	3c 91       	ld	r19, X
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	8d 91       	ld	r24, X+
     1ea:	9c 91       	ld	r25, X
     1ec:	11 97       	sbiw	r26, 0x01	; 1
     1ee:	f8 01       	movw	r30, r16
     1f0:	e2 57       	subi	r30, 0x72	; 114
     1f2:	fc 4f       	sbci	r31, 0xFC	; 252
     1f4:	60 81       	ld	r22, Z
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <sample+0x76>
     1f8:	96 95       	lsr	r25
     1fa:	87 95       	ror	r24
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <sample+0x72>
     200:	28 1b       	sub	r18, r24
     202:	39 0b       	sbc	r19, r25
     204:	11 96       	adiw	r26, 0x01	; 1
     206:	3c 93       	st	X, r19
     208:	2e 93       	st	-X, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1[idx] = amp_fm1[idx] - (amp_fm1[idx]>>decay_fm1[idx]) ;
     20a:	47 55       	subi	r20, 0x57	; 87
     20c:	5c 4f       	sbci	r21, 0xFC	; 252
     20e:	ea 01       	movw	r28, r20
     210:	28 81       	ld	r18, Y
     212:	39 81       	ldd	r19, Y+1	; 0x01
     214:	88 81       	ld	r24, Y
     216:	99 81       	ldd	r25, Y+1	; 0x01
     218:	0f 5c       	subi	r16, 0xCF	; 207
     21a:	1a 4f       	sbci	r17, 0xFA	; 250
     21c:	f8 01       	movw	r30, r16
     21e:	60 81       	ld	r22, Z
     220:	02 c0       	rjmp	.+4      	; 0x226 <sample+0xa0>
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	6a 95       	dec	r22
     228:	e2 f7       	brpl	.-8      	; 0x222 <sample+0x9c>
     22a:	28 1b       	sub	r18, r24
     22c:	39 0b       	sbc	r19, r25
     22e:	39 83       	std	Y+1, r19	; 0x01
     230:	28 83       	st	Y, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main[idx] =  max_amp - rise_phase_main[idx];
     232:	ed 2c       	mov	r14, r13
     234:	ff 24       	eor	r15, r15
     236:	d7 01       	movw	r26, r14
     238:	aa 0f       	add	r26, r26
     23a:	bb 1f       	adc	r27, r27
     23c:	8d 01       	movw	r16, r26
     23e:	0a 51       	subi	r16, 0x1A	; 26
     240:	1b 4f       	sbci	r17, 0xFB	; 251
     242:	e8 01       	movw	r28, r16
     244:	88 81       	ld	r24, Y
     246:	99 81       	ldd	r25, Y+1	; 0x01
     248:	6f ef       	ldi	r22, 0xFF	; 255
     24a:	7f e7       	ldi	r23, 0x7F	; 127
     24c:	fb 01       	movw	r30, r22
     24e:	e8 1b       	sub	r30, r24
     250:	f9 0b       	sbc	r31, r25
     252:	ed 01       	movw	r28, r26
     254:	cb 5d       	subi	r28, 0xDB	; 219
     256:	da 4f       	sbci	r29, 0xFA	; 250
     258:	f9 83       	std	Y+1, r31	; 0x01
     25a:	e8 83       	st	Y, r30
	// product of rise and fall exponentials is the amplitude envelope
	amp_main[idx] = (amp_rise_main[idx]>>8) * (amp_fall_main[idx]>>8) ;
     25c:	28 81       	ld	r18, Y
     25e:	39 81       	ldd	r19, Y+1	; 0x01
     260:	ad 01       	movw	r20, r26
     262:	49 52       	subi	r20, 0x29	; 41
     264:	5c 4f       	sbci	r21, 0xFC	; 252
     266:	fa 01       	movw	r30, r20
     268:	80 81       	ld	r24, Z
     26a:	91 81       	ldd	r25, Z+1	; 0x01
     26c:	89 2f       	mov	r24, r25
     26e:	99 27       	eor	r25, r25
     270:	23 2f       	mov	r18, r19
     272:	33 27       	eor	r19, r19
     274:	fc 01       	movw	r30, r24
     276:	e2 9f       	mul	r30, r18
     278:	c0 01       	movw	r24, r0
     27a:	e3 9f       	mul	r30, r19
     27c:	90 0d       	add	r25, r0
     27e:	f2 9f       	mul	r31, r18
     280:	90 0d       	add	r25, r0
     282:	11 24       	eor	r1, r1
     284:	fd 01       	movw	r30, r26
     286:	ed 5e       	subi	r30, 0xED	; 237
     288:	fa 4f       	sbci	r31, 0xFA	; 250
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24

	// Init the synth
	if (pluck==1) {
     28e:	80 91 a8 03 	lds	r24, 0x03A8
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	e1 f4       	brne	.+56     	; 0x2ce <sample+0x148>
		amp_fall_main[idx] = max_amp; 
     296:	fa 01       	movw	r30, r20
     298:	71 83       	std	Z+1, r23	; 0x01
     29a:	60 83       	st	Z, r22
		rise_phase_main[idx] = max_amp ;
     29c:	f8 01       	movw	r30, r16
     29e:	71 83       	std	Z+1, r23	; 0x01
     2a0:	60 83       	st	Z, r22
		amp_rise_main[idx] = 0 ;
     2a2:	19 82       	std	Y+1, r1	; 0x01
     2a4:	18 82       	st	Y, r1
		amp_fm1[idx] = max_amp ;
     2a6:	fd 01       	movw	r30, r26
     2a8:	e7 55       	subi	r30, 0x57	; 87
     2aa:	fc 4f       	sbci	r31, 0xFC	; 252
     2ac:	71 83       	std	Z+1, r23	; 0x01
     2ae:	60 83       	st	Z, r22
		// phase lock the synth
		acc_fm1[idx] = 0 ;
     2b0:	fd 01       	movw	r30, r26
     2b2:	e8 53       	subi	r30, 0x38	; 56
     2b4:	fc 4f       	sbci	r31, 0xFC	; 252
     2b6:	11 82       	std	Z+1, r1	; 0x01
     2b8:	10 82       	st	Z, r1
		acc_main[idx] = 0;
     2ba:	ac 56       	subi	r26, 0x6C	; 108
     2bc:	bc 4f       	sbci	r27, 0xFC	; 252
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	1c 92       	st	X, r1
     2c2:	1e 92       	st	-X, r1
		
		//DIRTY UGLY HACK FIX THIS STUPID
		if (idx == (NUM_VOICES - 1)) {
     2c4:	f5 e0       	ldi	r31, 0x05	; 5
     2c6:	df 16       	cp	r13, r31
     2c8:	11 f4       	brne	.+4      	; 0x2ce <sample+0x148>
			pluck = 0;
     2ca:	10 92 a8 03 	sts	0x03A8, r1
		}

	}

	//the FM DDR -- feeds into final DDR
	acc_fm1[idx] = acc_fm1[idx] + inc_fm1[idx] ;
     2ce:	a7 01       	movw	r20, r14
     2d0:	44 0f       	add	r20, r20
     2d2:	55 1f       	adc	r21, r21
     2d4:	da 01       	movw	r26, r20
     2d6:	a8 53       	subi	r26, 0x38	; 56
     2d8:	bc 4f       	sbci	r27, 0xFC	; 252
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	11 97       	sbiw	r26, 0x01	; 1
     2e0:	fa 01       	movw	r30, r20
     2e2:	ea 5f       	subi	r30, 0xFA	; 250
     2e4:	fa 4f       	sbci	r31, 0xFA	; 250
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	82 0f       	add	r24, r18
     2ec:	93 1f       	adc	r25, r19
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	9c 93       	st	X, r25
     2f2:	8e 93       	st	-X, r24
	high_fm1 = (char)(acc_fm1[idx] >> 8) ;
     2f4:	8d 91       	ld	r24, X+
     2f6:	9c 91       	ld	r25, X
     2f8:	90 93 39 05 	sts	0x0539, r25
	fm1 = sineTable[high_fm1] ;
     2fc:	e0 91 39 05 	lds	r30, 0x0539
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ea 51       	subi	r30, 0x1A	; 26
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	60 81       	ld	r22, Z
     308:	60 93 d4 03 	sts	0x03D4, r22

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main[idx] = acc_main[idx] + (inc_main[idx] + (fm1*(amp_fm1[idx]>>depth_fm1[idx]))) ;
     30c:	da 01       	movw	r26, r20
     30e:	ac 56       	subi	r26, 0x6C	; 108
     310:	bc 4f       	sbci	r27, 0xFC	; 252
     312:	0d 91       	ld	r16, X+
     314:	1c 91       	ld	r17, X
     316:	11 97       	sbiw	r26, 0x01	; 1
     318:	fa 01       	movw	r30, r20
     31a:	e5 54       	subi	r30, 0x45	; 69
     31c:	fc 4f       	sbci	r31, 0xFC	; 252
     31e:	20 81       	ld	r18, Z
     320:	31 81       	ldd	r19, Z+1	; 0x01
     322:	fa 01       	movw	r30, r20
     324:	e7 55       	subi	r30, 0x57	; 87
     326:	fc 4f       	sbci	r31, 0xFC	; 252
     328:	80 81       	ld	r24, Z
     32a:	91 81       	ldd	r25, Z+1	; 0x01
     32c:	c5 eb       	ldi	r28, 0xB5	; 181
     32e:	d3 e0       	ldi	r29, 0x03	; 3
     330:	ec 0e       	add	r14, r28
     332:	fd 1e       	adc	r15, r29
     334:	e7 01       	movw	r28, r14
     336:	e8 81       	ld	r30, Y
     338:	20 0f       	add	r18, r16
     33a:	31 1f       	adc	r19, r17
     33c:	02 c0       	rjmp	.+4      	; 0x342 <sample+0x1bc>
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	ea 95       	dec	r30
     344:	e2 f7       	brpl	.-8      	; 0x33e <sample+0x1b8>
     346:	77 27       	eor	r23, r23
     348:	67 fd       	sbrc	r22, 7
     34a:	70 95       	com	r23
     34c:	fc 01       	movw	r30, r24
     34e:	e6 9f       	mul	r30, r22
     350:	c0 01       	movw	r24, r0
     352:	e7 9f       	mul	r30, r23
     354:	90 0d       	add	r25, r0
     356:	f6 9f       	mul	r31, r22
     358:	90 0d       	add	r25, r0
     35a:	11 24       	eor	r1, r1
     35c:	28 0f       	add	r18, r24
     35e:	39 1f       	adc	r19, r25
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	3c 93       	st	X, r19
     364:	2e 93       	st	-X, r18
	high_main = (char)(acc_main[idx] >> 8) ;
     366:	8d 91       	ld	r24, X+
     368:	9c 91       	ld	r25, X
     36a:	90 93 20 05 	sts	0x0520, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main[idx]>>8) * (int)sineTable[high_main])>>7) ;
     36e:	4d 5e       	subi	r20, 0xED	; 237
     370:	5a 4f       	sbci	r21, 0xFA	; 250
     372:	ea 01       	movw	r28, r20
     374:	28 81       	ld	r18, Y
     376:	39 81       	ldd	r19, Y+1	; 0x01
     378:	e0 91 20 05 	lds	r30, 0x0520
     37c:	23 2f       	mov	r18, r19
     37e:	33 27       	eor	r19, r19
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ea 51       	subi	r30, 0x1A	; 26
     384:	fc 4f       	sbci	r31, 0xFC	; 252
     386:	80 81       	ld	r24, Z
     388:	99 27       	eor	r25, r25
     38a:	87 fd       	sbrc	r24, 7
     38c:	90 95       	com	r25
     38e:	fc 01       	movw	r30, r24
     390:	2e 9f       	mul	r18, r30
     392:	c0 01       	movw	r24, r0
     394:	2f 9f       	mul	r18, r31
     396:	90 0d       	add	r25, r0
     398:	3e 9f       	mul	r19, r30
     39a:	90 0d       	add	r25, r0
     39c:	11 24       	eor	r1, r1
     39e:	88 0f       	add	r24, r24
     3a0:	89 2f       	mov	r24, r25
     3a2:	88 1f       	adc	r24, r24
     3a4:	99 0b       	sbc	r25, r25
     3a6:	91 95       	neg	r25
}
     3a8:	80 58       	subi	r24, 0x80	; 128
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	08 95       	ret

000003ba <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 8000
{ 
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	6f 93       	push	r22
     3d2:	7f 93       	push	r23
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	af 93       	push	r26
     3da:	bf 93       	push	r27
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	00 e0       	ldi	r16, 0x00	; 0

	// Set Sample
	uint8_t idx;
	uint8_t voiceAccum = 0;
	for (idx=0; idx < NUM_VOICES; idx++){
		voiceAccum += sample(idx);
     3e4:	81 2f       	mov	r24, r17
     3e6:	0e 94 c3 00 	call	0x186	; 0x186 <sample>
     3ea:	08 0f       	add	r16, r24
	//TCNT2 = 0; TCCR2B = 1;

	// Set Sample
	uint8_t idx;
	uint8_t voiceAccum = 0;
	for (idx=0; idx < NUM_VOICES; idx++){
     3ec:	1f 5f       	subi	r17, 0xFF	; 255
     3ee:	16 30       	cpi	r17, 0x06	; 6
     3f0:	c9 f7       	brne	.-14     	; 0x3e4 <__vector_13+0x2a>
		voiceAccum += sample(idx);
	}
	OCR0A = voiceAccum;
     3f2:	07 bd       	out	0x27, r16	; 39
	
	time++;     //ticks at 8 KHz 
     3f4:	80 91 22 05 	lds	r24, 0x0522
     3f8:	90 91 23 05 	lds	r25, 0x0523
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	90 93 23 05 	sts	0x0523, r25
     402:	80 93 22 05 	sts	0x0522, r24
	// profiling 
	//TCCR2B = 0;
} 
     406:	ff 91       	pop	r31
     408:	ef 91       	pop	r30
     40a:	bf 91       	pop	r27
     40c:	af 91       	pop	r26
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	7f 91       	pop	r23
     414:	6f 91       	pop	r22
     416:	5f 91       	pop	r21
     418:	4f 91       	pop	r20
     41a:	3f 91       	pop	r19
     41c:	2f 91       	pop	r18
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <updateManual>:
	LCDstring(LCDBuffer, 1);
}

void updateManual(void){

}
     42c:	08 95       	ret

0000042e <setNextNote>:
	updateLCD();
}

//set the next note to play
void setNextNote(){
	switch (seqId){
     42e:	80 91 03 05 	lds	r24, 0x0503
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	99 f4       	brne	.+38     	; 0x45c <setNextNote+0x2e>
		case 1:
			inc_main[0] = markovFrequencies[curNote++ % NUM_NOTES];
     436:	80 91 3a 05 	lds	r24, 0x053A
     43a:	e8 2f       	mov	r30, r24
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e7 70       	andi	r30, 0x07	; 7
     440:	f0 70       	andi	r31, 0x00	; 0
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ed 5f       	subi	r30, 0xFD	; 253
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	20 81       	ld	r18, Z
     44c:	31 81       	ldd	r19, Z+1	; 0x01
     44e:	30 93 bc 03 	sts	0x03BC, r19
     452:	20 93 bb 03 	sts	0x03BB, r18
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	80 93 3a 05 	sts	0x053A, r24
     45c:	08 95       	ret

0000045e <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
	LCDclr();
     462:	0e 94 41 06 	call	0xc82	; 0xc82 <LCDclr>
	switch (state) {
     466:	80 91 d6 03 	lds	r24, 0x03D6
     46a:	86 30       	cpi	r24, 0x06	; 6
     46c:	09 f4       	brne	.+2      	; 0x470 <updateLCD+0x12>
     46e:	67 c0       	rjmp	.+206    	; 0x53e <updateLCD+0xe0>
     470:	87 30       	cpi	r24, 0x07	; 7
     472:	48 f4       	brcc	.+18     	; 0x486 <updateLCD+0x28>
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	09 f1       	breq	.+66     	; 0x4ba <updateLCD+0x5c>
     478:	85 30       	cpi	r24, 0x05	; 5
     47a:	09 f4       	brne	.+2      	; 0x47e <updateLCD+0x20>
     47c:	40 c0       	rjmp	.+128    	; 0x4fe <updateLCD+0xa0>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	09 f0       	breq	.+2      	; 0x484 <updateLCD+0x26>
     482:	13 c1       	rjmp	.+550    	; 0x6aa <updateLCD+0x24c>
     484:	0d c0       	rjmp	.+26     	; 0x4a0 <updateLCD+0x42>
     486:	88 30       	cpi	r24, 0x08	; 8
     488:	09 f4       	brne	.+2      	; 0x48c <updateLCD+0x2e>
     48a:	99 c0       	rjmp	.+306    	; 0x5be <updateLCD+0x160>
     48c:	88 30       	cpi	r24, 0x08	; 8
     48e:	08 f4       	brcc	.+2      	; 0x492 <updateLCD+0x34>
     490:	76 c0       	rjmp	.+236    	; 0x57e <updateLCD+0x120>
     492:	89 30       	cpi	r24, 0x09	; 9
     494:	09 f4       	brne	.+2      	; 0x498 <updateLCD+0x3a>
     496:	b3 c0       	rjmp	.+358    	; 0x5fe <updateLCD+0x1a0>
     498:	8a 30       	cpi	r24, 0x0A	; 10
     49a:	09 f0       	breq	.+2      	; 0x49e <updateLCD+0x40>
     49c:	06 c1       	rjmp	.+524    	; 0x6aa <updateLCD+0x24c>
     49e:	cf c0       	rjmp	.+414    	; 0x63e <updateLCD+0x1e0>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     4a0:	8e e8       	ldi	r24, 0x8E	; 142
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     4ac:	8b e9       	ldi	r24, 0x9B	; 155
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
     4b8:	f8 c0       	rjmp	.+496    	; 0x6aa <updateLCD+0x24c>
			break;
		case MAN:
			updateManual();
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     4ba:	8d ea       	ldi	r24, 0xAD	; 173
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     4c6:	80 91 d5 03 	lds	r24, 0x03D5
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     4d0:	20 91 03 05 	lds	r18, 0x0503
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <updateLCD+0x78>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <updateLCD+0x7a>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <updateLCD+0x7c>
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	02 ef       	ldi	r16, 0xF2	; 242
     4e2:	14 e0       	ldi	r17, 0x04	; 4
     4e4:	ad b7       	in	r26, 0x3d	; 61
     4e6:	be b7       	in	r27, 0x3e	; 62
     4e8:	12 96       	adiw	r26, 0x02	; 2
     4ea:	1c 93       	st	X, r17
     4ec:	0e 93       	st	-X, r16
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	93 83       	std	Z+3, r25	; 0x03
     4f6:	82 83       	std	Z+2, r24	; 0x02
     4f8:	24 83       	std	Z+4, r18	; 0x04
     4fa:	15 82       	std	Z+5, r1	; 0x05
     4fc:	c1 c0       	rjmp	.+386    	; 0x680 <updateLCD+0x222>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     4fe:	8b eb       	ldi	r24, 0xBB	; 187
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     50a:	80 91 05 05 	lds	r24, 0x0505
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     514:	00 d0       	rcall	.+0      	; 0x516 <updateLCD+0xb8>
     516:	00 d0       	rcall	.+0      	; 0x518 <updateLCD+0xba>
     518:	00 d0       	rcall	.+0      	; 0x51a <updateLCD+0xbc>
     51a:	ed b7       	in	r30, 0x3d	; 61
     51c:	fe b7       	in	r31, 0x3e	; 62
     51e:	31 96       	adiw	r30, 0x01	; 1
     520:	02 ef       	ldi	r16, 0xF2	; 242
     522:	14 e0       	ldi	r17, 0x04	; 4
     524:	ad b7       	in	r26, 0x3d	; 61
     526:	be b7       	in	r27, 0x3e	; 62
     528:	12 96       	adiw	r26, 0x02	; 2
     52a:	1c 93       	st	X, r17
     52c:	0e 93       	st	-X, r16
     52e:	11 97       	sbiw	r26, 0x01	; 1
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	93 83       	std	Z+3, r25	; 0x03
     536:	82 83       	std	Z+2, r24	; 0x02
     538:	8b eb       	ldi	r24, 0xBB	; 187
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	9f c0       	rjmp	.+318    	; 0x67c <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     53e:	87 ec       	ldi	r24, 0xC7	; 199
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     54a:	80 91 a7 03 	lds	r24, 0x03A7
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     554:	00 d0       	rcall	.+0      	; 0x556 <updateLCD+0xf8>
     556:	00 d0       	rcall	.+0      	; 0x558 <updateLCD+0xfa>
     558:	00 d0       	rcall	.+0      	; 0x55a <updateLCD+0xfc>
     55a:	ed b7       	in	r30, 0x3d	; 61
     55c:	fe b7       	in	r31, 0x3e	; 62
     55e:	31 96       	adiw	r30, 0x01	; 1
     560:	02 ef       	ldi	r16, 0xF2	; 242
     562:	14 e0       	ldi	r17, 0x04	; 4
     564:	ad b7       	in	r26, 0x3d	; 61
     566:	be b7       	in	r27, 0x3e	; 62
     568:	12 96       	adiw	r26, 0x02	; 2
     56a:	1c 93       	st	X, r17
     56c:	0e 93       	st	-X, r16
     56e:	11 97       	sbiw	r26, 0x01	; 1
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	93 83       	std	Z+3, r25	; 0x03
     576:	82 83       	std	Z+2, r24	; 0x02
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	7f c0       	rjmp	.+254    	; 0x67c <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     57e:	84 ed       	ldi	r24, 0xD4	; 212
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     58a:	80 91 37 05 	lds	r24, 0x0537
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     594:	00 d0       	rcall	.+0      	; 0x596 <updateLCD+0x138>
     596:	00 d0       	rcall	.+0      	; 0x598 <updateLCD+0x13a>
     598:	00 d0       	rcall	.+0      	; 0x59a <updateLCD+0x13c>
     59a:	ed b7       	in	r30, 0x3d	; 61
     59c:	fe b7       	in	r31, 0x3e	; 62
     59e:	31 96       	adiw	r30, 0x01	; 1
     5a0:	02 ef       	ldi	r16, 0xF2	; 242
     5a2:	14 e0       	ldi	r17, 0x04	; 4
     5a4:	ad b7       	in	r26, 0x3d	; 61
     5a6:	be b7       	in	r27, 0x3e	; 62
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	1c 93       	st	X, r17
     5ac:	0e 93       	st	-X, r16
     5ae:	11 97       	sbiw	r26, 0x01	; 1
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	93 83       	std	Z+3, r25	; 0x03
     5b6:	82 83       	std	Z+2, r24	; 0x02
     5b8:	8e e8       	ldi	r24, 0x8E	; 142
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	5f c0       	rjmp	.+190    	; 0x67c <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     5be:	80 ee       	ldi	r24, 0xE0	; 224
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     5ca:	80 91 21 05 	lds	r24, 0x0521
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <updateLCD+0x178>
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <updateLCD+0x17a>
     5d8:	00 d0       	rcall	.+0      	; 0x5da <updateLCD+0x17c>
     5da:	ed b7       	in	r30, 0x3d	; 61
     5dc:	fe b7       	in	r31, 0x3e	; 62
     5de:	31 96       	adiw	r30, 0x01	; 1
     5e0:	02 ef       	ldi	r16, 0xF2	; 242
     5e2:	14 e0       	ldi	r17, 0x04	; 4
     5e4:	ad b7       	in	r26, 0x3d	; 61
     5e6:	be b7       	in	r27, 0x3e	; 62
     5e8:	12 96       	adiw	r26, 0x02	; 2
     5ea:	1c 93       	st	X, r17
     5ec:	0e 93       	st	-X, r16
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	93 83       	std	Z+3, r25	; 0x03
     5f6:	82 83       	std	Z+2, r24	; 0x02
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	95 e0       	ldi	r25, 0x05	; 5
     5fc:	3f c0       	rjmp	.+126    	; 0x67c <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     5fe:	8a ee       	ldi	r24, 0xEA	; 234
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     60a:	80 91 38 05 	lds	r24, 0x0538
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     614:	00 d0       	rcall	.+0      	; 0x616 <updateLCD+0x1b8>
     616:	00 d0       	rcall	.+0      	; 0x618 <updateLCD+0x1ba>
     618:	00 d0       	rcall	.+0      	; 0x61a <updateLCD+0x1bc>
     61a:	ed b7       	in	r30, 0x3d	; 61
     61c:	fe b7       	in	r31, 0x3e	; 62
     61e:	31 96       	adiw	r30, 0x01	; 1
     620:	02 ef       	ldi	r16, 0xF2	; 242
     622:	14 e0       	ldi	r17, 0x04	; 4
     624:	ad b7       	in	r26, 0x3d	; 61
     626:	be b7       	in	r27, 0x3e	; 62
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	1c 93       	st	X, r17
     62c:	0e 93       	st	-X, r16
     62e:	11 97       	sbiw	r26, 0x01	; 1
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	93 83       	std	Z+3, r25	; 0x03
     636:	82 83       	std	Z+2, r24	; 0x02
     638:	85 eb       	ldi	r24, 0xB5	; 181
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	1f c0       	rjmp	.+62     	; 0x67c <updateLCD+0x21e>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     63e:	85 ef       	ldi	r24, 0xF5	; 245
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     64a:	80 91 c7 03 	lds	r24, 0x03C7
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     654:	00 d0       	rcall	.+0      	; 0x656 <updateLCD+0x1f8>
     656:	00 d0       	rcall	.+0      	; 0x658 <updateLCD+0x1fa>
     658:	00 d0       	rcall	.+0      	; 0x65a <updateLCD+0x1fc>
     65a:	ed b7       	in	r30, 0x3d	; 61
     65c:	fe b7       	in	r31, 0x3e	; 62
     65e:	31 96       	adiw	r30, 0x01	; 1
     660:	02 ef       	ldi	r16, 0xF2	; 242
     662:	14 e0       	ldi	r17, 0x04	; 4
     664:	ad b7       	in	r26, 0x3d	; 61
     666:	be b7       	in	r27, 0x3e	; 62
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	1c 93       	st	X, r17
     66c:	0e 93       	st	-X, r16
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	93 83       	std	Z+3, r25	; 0x03
     676:	82 83       	std	Z+2, r24	; 0x02
     678:	81 e3       	ldi	r24, 0x31	; 49
     67a:	95 e0       	ldi	r25, 0x05	; 5
     67c:	95 83       	std	Z+5, r25	; 0x05
     67e:	84 83       	std	Z+4, r24	; 0x04
     680:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     684:	f8 01       	movw	r30, r16
     686:	01 90       	ld	r0, Z+
     688:	00 20       	and	r0, r0
     68a:	e9 f7       	brne	.-6      	; 0x686 <updateLCD+0x228>
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	e0 1b       	sub	r30, r16
     690:	f1 0b       	sbc	r31, r17
     692:	8d b7       	in	r24, 0x3d	; 61
     694:	9e b7       	in	r25, 0x3e	; 62
     696:	06 96       	adiw	r24, 0x06	; 6
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	9e bf       	out	0x3e, r25	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	8d bf       	out	0x3d, r24	; 61
     6a2:	c8 01       	movw	r24, r16
     6a4:	6e 2f       	mov	r22, r30
     6a6:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
			break;
	}

	CopyStringtoLCD(LCDVoice, 0, 0);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
	LCDGotoXY(voiceStrLen, 0);
     6b6:	80 91 e3 03 	lds	r24, 0x03E3
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	sprintf(LCDBuffer, "%d", voice);
     6c0:	20 91 a6 03 	lds	r18, 0x03A6
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <updateLCD+0x268>
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <updateLCD+0x26a>
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <updateLCD+0x26c>
     6ca:	ed b7       	in	r30, 0x3d	; 61
     6cc:	fe b7       	in	r31, 0x3e	; 62
     6ce:	31 96       	adiw	r30, 0x01	; 1
     6d0:	02 ef       	ldi	r16, 0xF2	; 242
     6d2:	14 e0       	ldi	r17, 0x04	; 4
     6d4:	ad b7       	in	r26, 0x3d	; 61
     6d6:	be b7       	in	r27, 0x3e	; 62
     6d8:	12 96       	adiw	r26, 0x02	; 2
     6da:	1c 93       	st	X, r17
     6dc:	0e 93       	st	-X, r16
     6de:	11 97       	sbiw	r26, 0x01	; 1
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	93 83       	std	Z+3, r25	; 0x03
     6e6:	82 83       	std	Z+2, r24	; 0x02
     6e8:	24 83       	std	Z+4, r18	; 0x04
     6ea:	15 82       	std	Z+5, r1	; 0x05
     6ec:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sprintf>
	LCDstring(LCDBuffer, 1);
     6f0:	8d b7       	in	r24, 0x3d	; 61
     6f2:	9e b7       	in	r25, 0x3e	; 62
     6f4:	06 96       	adiw	r24, 0x06	; 6
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	9e bf       	out	0x3e, r25	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	8d bf       	out	0x3d, r24	; 61
     700:	c8 01       	movw	r24, r16
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
}
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <setState>:
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     70e:	80 93 d6 03 	sts	0x03D6, r24
	updateLCD();
     712:	0e 94 2f 02 	call	0x45e	; 0x45e <updateLCD>
}
     716:	08 95       	ret

00000718 <nextState>:
}

// update to next state if key is pressed
uint8_t waitingForInput = 0;
uint8_t vidx = 0;
void nextState(void){
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	if(waitingForInput) {
		// output input to screen
	}
	uint8_t key = KeypadKey();
     720:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <KeypadKey>
     724:	08 2f       	mov	r16, r24
	if(key != 0) {
     726:	88 23       	and	r24, r24
     728:	f1 f1       	breq	.+124    	; 0x7a6 <nextState+0x8e>
		//_delay_ms(1000);
		sprintf(LCDBuffer, "%d", key);
     72a:	00 d0       	rcall	.+0      	; 0x72c <nextState+0x14>
     72c:	00 d0       	rcall	.+0      	; 0x72e <nextState+0x16>
     72e:	00 d0       	rcall	.+0      	; 0x730 <nextState+0x18>
     730:	ed b7       	in	r30, 0x3d	; 61
     732:	fe b7       	in	r31, 0x3e	; 62
     734:	31 96       	adiw	r30, 0x01	; 1
     736:	82 ef       	ldi	r24, 0xF2	; 242
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	ad b7       	in	r26, 0x3d	; 61
     73c:	be b7       	in	r27, 0x3e	; 62
     73e:	12 96       	adiw	r26, 0x02	; 2
     740:	9c 93       	st	X, r25
     742:	8e 93       	st	-X, r24
     744:	11 97       	sbiw	r26, 0x01	; 1
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	93 83       	std	Z+3, r25	; 0x03
     74c:	82 83       	std	Z+2, r24	; 0x02
     74e:	04 83       	std	Z+4, r16	; 0x04
     750:	15 82       	std	Z+5, r1	; 0x05
     752:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sprintf>
		//LCDGotoXY(0, 0);
		LCDstring(LCDBuffer, strlen(LCDBuffer));
     756:	e2 ef       	ldi	r30, 0xF2	; 242
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	01 90       	ld	r0, Z+
     75c:	00 20       	and	r0, r0
     75e:	e9 f7       	brne	.-6      	; 0x75a <nextState+0x42>
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	e2 5f       	subi	r30, 0xF2	; 242
     764:	f4 40       	sbci	r31, 0x04	; 4
     766:	ad b7       	in	r26, 0x3d	; 61
     768:	be b7       	in	r27, 0x3e	; 62
     76a:	16 96       	adiw	r26, 0x06	; 6
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	be bf       	out	0x3e, r27	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	ad bf       	out	0x3d, r26	; 61
     776:	82 ef       	ldi	r24, 0xF2	; 242
     778:	94 e0       	ldi	r25, 0x04	; 4
     77a:	6e 2f       	mov	r22, r30
     77c:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
	}
	switch(key) {
     780:	0b 37       	cpi	r16, 0x7B	; 123
     782:	19 f0       	breq	.+6      	; 0x78a <nextState+0x72>
     784:	07 3e       	cpi	r16, 0xE7	; 231
     786:	79 f4       	brne	.+30     	; 0x7a6 <nextState+0x8e>
     788:	02 c0       	rjmp	.+4      	; 0x78e <nextState+0x76>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	08 c0       	rjmp	.+16     	; 0x79e <nextState+0x86>
	switch(key) {
		case KEY_P:
			setState(MAN);
			break;
		case KEY_A:
			setState((state + 1) % 10);
     78e:	80 91 d6 03 	lds	r24, 0x03D6
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	6a e0       	ldi	r22, 0x0A	; 10
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     79e:	80 93 d6 03 	sts	0x03D6, r24
	updateLCD();
     7a2:	0e 94 2f 02 	call	0x45e	; 0x45e <updateLCD>
			break;
		case KEY_A:
			setState((state + 1) % 10);
			break;
	}
	switch (state) {
     7a6:	80 91 d6 03 	lds	r24, 0x03D6
     7aa:	86 30       	cpi	r24, 0x06	; 6
     7ac:	c9 f1       	breq	.+114    	; 0x820 <nextState+0x108>
     7ae:	87 30       	cpi	r24, 0x07	; 7
     7b0:	40 f4       	brcc	.+16     	; 0x7c2 <nextState+0xaa>
     7b2:	84 30       	cpi	r24, 0x04	; 4
     7b4:	d1 f0       	breq	.+52     	; 0x7ea <nextState+0xd2>
     7b6:	85 30       	cpi	r24, 0x05	; 5
     7b8:	20 f5       	brcc	.+72     	; 0x802 <nextState+0xea>
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <nextState+0xa8>
     7be:	76 c0       	rjmp	.+236    	; 0x8ac <nextState+0x194>
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <nextState+0xc2>
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <nextState+0xb0>
     7c6:	42 c0       	rjmp	.+132    	; 0x84c <nextState+0x134>
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	a8 f1       	brcs	.+106    	; 0x836 <nextState+0x11e>
     7cc:	89 30       	cpi	r24, 0x09	; 9
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <nextState+0xba>
     7d0:	4d c0       	rjmp	.+154    	; 0x86c <nextState+0x154>
     7d2:	8a 30       	cpi	r24, 0x0A	; 10
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <nextState+0xc0>
     7d6:	6a c0       	rjmp	.+212    	; 0x8ac <nextState+0x194>
     7d8:	54 c0       	rjmp	.+168    	; 0x882 <nextState+0x16a>
		case SET_SEQUENCE:
			if(key == KEY_D) {
     7da:	07 37       	cpi	r16, 0x77	; 119
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <nextState+0xc8>
     7de:	5f c0       	rjmp	.+190    	; 0x89e <nextState+0x186>
				seqId = KeypadInt();
     7e0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     7e4:	80 93 03 05 	sts	0x0503, r24
     7e8:	57 c0       	rjmp	.+174    	; 0x898 <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_VIDX:
			if(key == KEY_D) {
     7ea:	07 37       	cpi	r16, 0x77	; 119
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <nextState+0xd8>
     7ee:	57 c0       	rjmp	.+174    	; 0x89e <nextState+0x186>
				vidx = KeypadInt() % NUM_VOICES;
     7f0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     7f4:	66 e0       	ldi	r22, 0x06	; 6
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
     7fc:	80 93 37 03 	sts	0x0337, r24
     800:	4b c0       	rjmp	.+150    	; 0x898 <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_MAIN:
			if(key == KEY_D) {
     802:	07 37       	cpi	r16, 0x77	; 119
     804:	09 f0       	breq	.+2      	; 0x808 <nextState+0xf0>
     806:	4b c0       	rjmp	.+150    	; 0x89e <nextState+0x186>
				inc_main[vidx] = KeypadInt();
     808:	80 91 37 03 	lds	r24, 0x0337
     80c:	c8 2f       	mov	r28, r24
     80e:	d0 e0       	ldi	r29, 0x00	; 0
     810:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     814:	9c 01       	movw	r18, r24
     816:	cc 0f       	add	r28, r28
     818:	dd 1f       	adc	r29, r29
     81a:	c5 54       	subi	r28, 0x45	; 69
     81c:	dc 4f       	sbci	r29, 0xFC	; 252
     81e:	23 c0       	rjmp	.+70     	; 0x866 <nextState+0x14e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_MAIN:
			if(key == KEY_D) {
     820:	07 37       	cpi	r16, 0x77	; 119
     822:	e9 f5       	brne	.+122    	; 0x89e <nextState+0x186>
				decay_main[vidx] = KeypadInt();
     824:	80 91 37 03 	lds	r24, 0x0337
     828:	c8 2f       	mov	r28, r24
     82a:	d0 e0       	ldi	r29, 0x00	; 0
     82c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     830:	c0 56       	subi	r28, 0x60	; 96
     832:	dc 4f       	sbci	r29, 0xFC	; 252
     834:	30 c0       	rjmp	.+96     	; 0x896 <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_RISE_MAIN:
			if(key == KEY_D) {
     836:	07 37       	cpi	r16, 0x77	; 119
     838:	91 f5       	brne	.+100    	; 0x89e <nextState+0x186>
				rise_main[vidx] = KeypadInt();
     83a:	80 91 37 03 	lds	r24, 0x0337
     83e:	c8 2f       	mov	r28, r24
     840:	d0 e0       	ldi	r29, 0x00	; 0
     842:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     846:	c2 57       	subi	r28, 0x72	; 114
     848:	dc 4f       	sbci	r29, 0xFC	; 252
     84a:	25 c0       	rjmp	.+74     	; 0x896 <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_INC_FM:
			if(key == KEY_D) {
     84c:	07 37       	cpi	r16, 0x77	; 119
     84e:	39 f5       	brne	.+78     	; 0x89e <nextState+0x186>
				inc_fm1[vidx] = KeypadInt();
     850:	80 91 37 03 	lds	r24, 0x0337
     854:	c8 2f       	mov	r28, r24
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     85c:	9c 01       	movw	r18, r24
     85e:	cc 0f       	add	r28, r28
     860:	dd 1f       	adc	r29, r29
     862:	ca 5f       	subi	r28, 0xFA	; 250
     864:	da 4f       	sbci	r29, 0xFA	; 250
     866:	39 83       	std	Y+1, r19	; 0x01
     868:	28 83       	st	Y, r18
     86a:	16 c0       	rjmp	.+44     	; 0x898 <nextState+0x180>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DEPTH_FM:
			if(key == KEY_D) {
     86c:	07 37       	cpi	r16, 0x77	; 119
     86e:	b9 f4       	brne	.+46     	; 0x89e <nextState+0x186>
				depth_fm1[vidx] = KeypadInt();
     870:	80 91 37 03 	lds	r24, 0x0337
     874:	c8 2f       	mov	r28, r24
     876:	d0 e0       	ldi	r29, 0x00	; 0
     878:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     87c:	cb 54       	subi	r28, 0x4B	; 75
     87e:	dc 4f       	sbci	r29, 0xFC	; 252
     880:	0a c0       	rjmp	.+20     	; 0x896 <nextState+0x17e>
				setState(MAIN_SCREEN);
				waitingForInput = 1;
			}
			break;
		case SET_DECAY_FM:
			if(key == KEY_D) {
     882:	07 37       	cpi	r16, 0x77	; 119
     884:	61 f4       	brne	.+24     	; 0x89e <nextState+0x186>
				decay_fm1[vidx] = KeypadInt();
     886:	80 91 37 03 	lds	r24, 0x0337
     88a:	c8 2f       	mov	r28, r24
     88c:	d0 e0       	ldi	r29, 0x00	; 0
     88e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeypadInt>
     892:	cf 5c       	subi	r28, 0xCF	; 207
     894:	da 4f       	sbci	r29, 0xFA	; 250
     896:	88 83       	st	Y, r24
				waitingForInput = 0;
     898:	10 92 36 03 	sts	0x0336, r1
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <nextState+0x194>
void updateManual(void){

}

void setState(uint8_t s) {
	state = s;
     89e:	11 e0       	ldi	r17, 0x01	; 1
     8a0:	10 93 d6 03 	sts	0x03D6, r17
	updateLCD();
     8a4:	0e 94 2f 02 	call	0x45e	; 0x45e <updateLCD>
			if(key == KEY_D) {
				decay_fm1[vidx] = KeypadInt();
				waitingForInput = 0;
			} else {
				setState(MAIN_SCREEN);
				waitingForInput = 1;
     8a8:	10 93 36 03 	sts	0x0336, r17
			}
			break;
		
	}
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     8b6:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDinit>
	LCDcursorOFF();
     8ba:	0e 94 10 07 	call	0xe20	; 0xe20 <LCDcursorOFF>
	LCDclr();				//clear the display
     8be:	0e 94 41 06 	call	0xc82	; 0xc82 <LCDclr>
	LCDGotoXY(0,0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     8ca:	8e e8       	ldi	r24, 0x8E	; 142
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     8d6:	8b e9       	ldi	r24, 0x9B	; 155
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
}
     8e2:	08 95       	ret

000008e4 <Initialize>:
	KeypadDebounce();
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
	// make B.3 an output
	DDRB = (1<<PINB3) ;
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	84 b9       	out	0x04, r24	; 4

	//Keypad
	DDRD=0x00;
     8f0:	1a b8       	out	0x0a, r1	; 10
     8f2:	06 ee       	ldi	r16, 0xE6	; 230
     8f4:	13 e0       	ldi	r17, 0x03	; 3
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
     8fa:	1f c0       	rjmp	.+62     	; 0x93a <Initialize+0x56>
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     8fc:	be 01       	movw	r22, r28
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__floatunsisf>
     906:	26 e5       	ldi	r18, 0x56	; 86
     908:	3e e0       	ldi	r19, 0x0E	; 14
     90a:	49 ec       	ldi	r20, 0xC9	; 201
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e8       	ldi	r20, 0x80	; 128
     918:	5b e3       	ldi	r21, 0x3B	; 59
     91a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
     91e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <sin>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4e ef       	ldi	r20, 0xFE	; 254
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3>
     92e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixunssfsi>
     932:	f8 01       	movw	r30, r16
     934:	61 93       	st	Z+, r22
     936:	8f 01       	movw	r16, r30
     938:	21 96       	adiw	r28, 0x01	; 1
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
     93a:	cf 3f       	cpi	r28, 0xFF	; 255
     93c:	d1 05       	cpc	r29, r1
     93e:	f1 f2       	breq	.-68     	; 0x8fc <Initialize+0x18>
     940:	e8 f2       	brcs	.-70     	; 0x8fc <Initialize+0x18>
     942:	d0 93 e5 03 	sts	0x03E5, r29
     946:	c0 93 e4 03 	sts	0x03E4, r28
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
	}  

	// init the time counter
	time=0;
     94a:	10 92 23 05 	sts	0x0523, r1
     94e:	10 92 22 05 	sts	0x0522, r1

	// timer 0 runs at full rate
	TCCR0B = 1 ;  
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	85 bd       	out	0x25, r24	; 37
	//turn off timer 0 overflow ISR
	TIMSK0 = 0 ;
     956:	10 92 6e 00 	sts	0x006E, r1
	// turn on PWM
	// turn on fast PWM and OC0A output
	// at full clock rate, toggle OC0A (pin B3) 
	// 16 microsec per PWM cycle sample time
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     95a:	83 ec       	ldi	r24, 0xC3	; 195
     95c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 128 ; // set PWM to half full scale
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	87 bd       	out	0x27, r24	; 39

	// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	OCR1A = 1999 ; // 2000 ticks
     962:	8f ec       	ldi	r24, 0xCF	; 207
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	90 93 89 00 	sts	0x0089, r25
     96a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     974:	29 e0       	ldi	r18, 0x09	; 9
     976:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0x00;	//turn off pwm and oc lines
     97a:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 2 cmp match ISR
     97e:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     982:	89 ef       	ldi	r24, 0xF9	; 249
     984:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     988:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	80 93 b1 00 	sts	0x00B1, r24


	seqStrLen = strlen(LCDSequenceId);
     992:	8c e0       	ldi	r24, 0x0C	; 12
     994:	80 93 d5 03 	sts	0x03D5, r24
	mainFreqStrLen = strlen(LCDMainFrequency);
     998:	9a e0       	ldi	r25, 0x0A	; 10
     99a:	90 93 05 05 	sts	0x0505, r25
	mainDecayStrLen = strlen(LCDMainDecay);
     99e:	8b e0       	ldi	r24, 0x0B	; 11
     9a0:	80 93 a7 03 	sts	0x03A7, r24
	mainRiseStrLen = strlen(LCDMainRise);
     9a4:	90 93 37 05 	sts	0x0537, r25
	fmFreqStrLen = strlen(LCDFMFreq);
     9a8:	88 e0       	ldi	r24, 0x08	; 8
     9aa:	80 93 21 05 	sts	0x0521, r24
	fmDepthStrLen = strlen(LCDFMDepth);
     9ae:	20 93 38 05 	sts	0x0538, r18
	fmDecayStrLen = strlen(LCDFMDecay);
     9b2:	20 93 c7 03 	sts	0x03C7, r18
	voiceStrLen = strlen(LCDVoice);
     9b6:	86 e0       	ldi	r24, 0x06	; 6
     9b8:	80 93 e3 03 	sts	0x03E3, r24

	initLCD();
     9bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <initLCD>

	// turn on all ISRs
	sei() ;
     9c0:	78 94       	sei
	///////////////////////////////////////////////////
	// Sound parameters
	///////////////////////////////////////////////////
	// Base frequency
	// 2^16/8000*freq = 8.192*freq
	inc_main[0] = (int)(8.192 * 261) ; 
     9c2:	8a e5       	ldi	r24, 0x5A	; 90
     9c4:	98 e0       	ldi	r25, 0x08	; 8
     9c6:	90 93 bc 03 	sts	0x03BC, r25
     9ca:	80 93 bb 03 	sts	0x03BB, r24
	// rise and decay SHIFT factor  -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_main[0] = 4 ;
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	80 93 a0 03 	sts	0x03A0, r24
	rise_main[0] = 0 ;
     9d4:	10 92 8e 03 	sts	0x038E, r1
	//
	// FM modulation rate -- also a frequency
	inc_fm1[0] = (int)(8.192 * 65) ;
     9d8:	84 e1       	ldi	r24, 0x14	; 20
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	90 93 07 05 	sts	0x0507, r25
     9e0:	80 93 06 05 	sts	0x0506, r24
	// FM modulation depth SHIFT factor 
	// bigger factor implies smaller FM!
	// useful range is 4 to 15
	depth_fm1[0] = 7 ;
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	80 93 b5 03 	sts	0x03B5, r24
	// decay SHIFT factor -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_fm1[0] = 6 ;
     9ea:	86 e0       	ldi	r24, 0x06	; 6
     9ec:	80 93 31 05 	sts	0x0531, r24
   inc_fm1 = (int)(8.192 * 600) ;
   depth_fm1 = 8 ;
   decay_fm1 = 6 ;

*/
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <main>:
	}
}
/////////////////////////////////////////////////////
int main(void)
{ 
   Initialize();
     9fa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Initialize>
				pushed = 0;
			}
		//	printf("%d\n\r", TCNT2);
		}
		*/
		nextState();
     9fe:	0e 94 8c 03 	call	0x718	; 0x718 <nextState>
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <main+0x4>

00000a04 <__vector_9>:
	// profiling 
	//TCCR2B = 0;
} 

// Every 1ms
ISR (TIMER2_COMPA_vect){
     a04:	1f 92       	push	r1
     a06:	0f 92       	push	r0
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	0f 92       	push	r0
     a0c:	11 24       	eor	r1, r1
     a0e:	2f 93       	push	r18
     a10:	3f 93       	push	r19
     a12:	4f 93       	push	r20
     a14:	5f 93       	push	r21
     a16:	6f 93       	push	r22
     a18:	7f 93       	push	r23
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	af 93       	push	r26
     a20:	bf 93       	push	r27
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
	KeypadDebounce();
     a26:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeypadDebounce>
}
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRA = 0x0f;
     a4c:	2f e0       	ldi	r18, 0x0F	; 15
     a4e:	21 b9       	out	0x01, r18	; 1
	PORTA = 0xf0; 
     a50:	80 ef       	ldi	r24, 0xF0	; 240
     a52:	82 b9       	out	0x02, r24	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a54:	9a e1       	ldi	r25, 0x1A	; 26
     a56:	39 2f       	mov	r19, r25
     a58:	3a 95       	dec	r19
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <KeypadScan+0xc>
	_delay_us(5);
	key = PINA;
     a5c:	30 b1       	in	r19, 0x00	; 0
	
	//get upper nibble
	DDRA = 0xf0;
     a5e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0f; 
     a60:	22 b9       	out	0x02, r18	; 2
     a62:	9a 95       	dec	r25
     a64:	f1 f7       	brne	.-4      	; 0xa62 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PINA;
     a66:	20 b1       	in	r18, 0x00	; 0
     a68:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     a6a:	2f 3f       	cpi	r18, 0xFF	; 255
     a6c:	61 f0       	breq	.+24     	; 0xa86 <KeypadScan+0x3a>
     a6e:	e5 e1       	ldi	r30, 0x15	; 21
     a70:	f2 e0       	ldi	r31, 0x02	; 2
     a72:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     a74:	80 81       	ld	r24, Z
     a76:	9f 5f       	subi	r25, 0xFF	; 255
     a78:	82 17       	cp	r24, r18
     a7a:	11 f4       	brne	.+4      	; 0xa80 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     a7c:	89 2f       	mov	r24, r25
     a7e:	08 95       	ret
	_delay_us(5);
	key = key | PINA;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     a80:	31 96       	adiw	r30, 0x01	; 1
     a82:	90 31       	cpi	r25, 0x10	; 16
     a84:	b9 f7       	brne	.-18     	; 0xa74 <KeypadScan+0x28>
     a86:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     a88:	08 95       	ret

00000a8a <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     a8a:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     a8c:	80 91 3a 03 	lds	r24, 0x033A
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	31 f4       	brne	.+12     	; 0xaa0 <KeypadAppend+0x16>
		KeypadFinished = 0;
     a94:	10 92 3a 03 	sts	0x033A, r1
		KeypadInput = 0;
     a98:	10 92 39 03 	sts	0x0339, r1
     a9c:	10 92 38 03 	sts	0x0338, r1
	}
	switch(key) {
     aa0:	97 3d       	cpi	r25, 0xD7	; 215
     aa2:	b9 f1       	breq	.+110    	; 0xb12 <KeypadAppend+0x88>
     aa4:	98 3d       	cpi	r25, 0xD8	; 216
     aa6:	98 f4       	brcc	.+38     	; 0xace <KeypadAppend+0x44>
     aa8:	97 3b       	cpi	r25, 0xB7	; 183
     aaa:	99 f1       	breq	.+102    	; 0xb12 <KeypadAppend+0x88>
     aac:	98 3b       	cpi	r25, 0xB8	; 184
     aae:	40 f4       	brcc	.+16     	; 0xac0 <KeypadAppend+0x36>
     ab0:	9b 37       	cpi	r25, 0x7B	; 123
     ab2:	79 f1       	breq	.+94     	; 0xb12 <KeypadAppend+0x88>
     ab4:	9e 37       	cpi	r25, 0x7E	; 126
     ab6:	69 f1       	breq	.+90     	; 0xb12 <KeypadAppend+0x88>
     ab8:	97 37       	cpi	r25, 0x77	; 119
     aba:	09 f0       	breq	.+2      	; 0xabe <KeypadAppend+0x34>
     abc:	43 c0       	rjmp	.+134    	; 0xb44 <KeypadAppend+0xba>
     abe:	29 c0       	rjmp	.+82     	; 0xb12 <KeypadAppend+0x88>
     ac0:	9d 3b       	cpi	r25, 0xBD	; 189
     ac2:	19 f1       	breq	.+70     	; 0xb0a <KeypadAppend+0x80>
     ac4:	9e 3b       	cpi	r25, 0xBE	; 190
     ac6:	f9 f0       	breq	.+62     	; 0xb06 <KeypadAppend+0x7c>
     ac8:	9b 3b       	cpi	r25, 0xBB	; 187
     aca:	e1 f5       	brne	.+120    	; 0xb44 <KeypadAppend+0xba>
     acc:	20 c0       	rjmp	.+64     	; 0xb0e <KeypadAppend+0x84>
     ace:	97 3e       	cpi	r25, 0xE7	; 231
     ad0:	01 f1       	breq	.+64     	; 0xb12 <KeypadAppend+0x88>
     ad2:	98 3e       	cpi	r25, 0xE8	; 232
     ad4:	38 f4       	brcc	.+14     	; 0xae4 <KeypadAppend+0x5a>
     ad6:	9d 3d       	cpi	r25, 0xDD	; 221
     ad8:	91 f0       	breq	.+36     	; 0xafe <KeypadAppend+0x74>
     ada:	9e 3d       	cpi	r25, 0xDE	; 222
     adc:	71 f0       	breq	.+28     	; 0xafa <KeypadAppend+0x70>
     ade:	9b 3d       	cpi	r25, 0xDB	; 219
     ae0:	89 f5       	brne	.+98     	; 0xb44 <KeypadAppend+0xba>
     ae2:	0f c0       	rjmp	.+30     	; 0xb02 <KeypadAppend+0x78>
     ae4:	9d 3e       	cpi	r25, 0xED	; 237
     ae6:	29 f0       	breq	.+10     	; 0xaf2 <KeypadAppend+0x68>
     ae8:	9e 3e       	cpi	r25, 0xEE	; 238
     aea:	b9 f0       	breq	.+46     	; 0xb1a <KeypadAppend+0x90>
     aec:	9b 3e       	cpi	r25, 0xEB	; 235
     aee:	51 f5       	brne	.+84     	; 0xb44 <KeypadAppend+0xba>
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <KeypadAppend+0x6c>
     af2:	42 e0       	ldi	r20, 0x02	; 2
     af4:	13 c0       	rjmp	.+38     	; 0xb1c <KeypadAppend+0x92>
     af6:	43 e0       	ldi	r20, 0x03	; 3
     af8:	11 c0       	rjmp	.+34     	; 0xb1c <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     afa:	44 e0       	ldi	r20, 0x04	; 4
     afc:	0f c0       	rjmp	.+30     	; 0xb1c <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     afe:	45 e0       	ldi	r20, 0x05	; 5
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     b02:	46 e0       	ldi	r20, 0x06	; 6
     b04:	0b c0       	rjmp	.+22     	; 0xb1c <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     b06:	47 e0       	ldi	r20, 0x07	; 7
     b08:	09 c0       	rjmp	.+18     	; 0xb1c <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     b0a:	48 e0       	ldi	r20, 0x08	; 8
     b0c:	07 c0       	rjmp	.+14     	; 0xb1c <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     b0e:	49 e0       	ldi	r20, 0x09	; 9
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 3a 03 	sts	0x033A, r24
     b18:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     b1a:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     b1c:	80 91 38 03 	lds	r24, 0x0338
     b20:	90 91 39 03 	lds	r25, 0x0339
     b24:	9c 01       	movw	r18, r24
     b26:	63 e0       	ldi	r22, 0x03	; 3
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	6a 95       	dec	r22
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <KeypadAppend+0x9e>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	28 0f       	add	r18, r24
     b36:	39 1f       	adc	r19, r25
     b38:	24 0f       	add	r18, r20
     b3a:	31 1d       	adc	r19, r1
     b3c:	30 93 39 03 	sts	0x0339, r19
     b40:	20 93 38 03 	sts	0x0338, r18
     b44:	08 95       	ret

00000b46 <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	if(debounceTime > 0) {
     b46:	80 91 3c 05 	lds	r24, 0x053C
     b4a:	88 23       	and	r24, r24
     b4c:	29 f0       	breq	.+10     	; 0xb58 <KeypadDebounce+0x12>
		debounceTime--;
     b4e:	80 91 3c 05 	lds	r24, 0x053C
     b52:	81 50       	subi	r24, 0x01	; 1
     b54:	80 93 3c 05 	sts	0x053C, r24
	}
	uint8_t key = KeypadScan(); //Scan the keypad
     b58:	0e 94 26 05 	call	0xa4c	; 0xa4c <KeypadScan>
     b5c:	98 2f       	mov	r25, r24
	switch(keyState){
     b5e:	80 91 3b 03 	lds	r24, 0x033B
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	91 f0       	breq	.+36     	; 0xb8a <KeypadDebounce+0x44>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	28 f0       	brcs	.+10     	; 0xb74 <KeypadDebounce+0x2e>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	21 f1       	breq	.+72     	; 0xbb6 <KeypadDebounce+0x70>
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	b9 f5       	brne	.+110    	; 0xbe0 <KeypadDebounce+0x9a>
     b72:	2a c0       	rjmp	.+84     	; 0xbc8 <KeypadDebounce+0x82>
	
		case RELEASED:
			if (key){
     b74:	99 23       	and	r25, r25
     b76:	a1 f1       	breq	.+104    	; 0xbe0 <KeypadDebounce+0x9a>
				keyState = MAYBEPUSHED;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 3b 03 	sts	0x033B, r24
				debounceTime = DEBOUNCE_TIME;
     b7e:	8e e1       	ldi	r24, 0x1E	; 30
     b80:	80 93 3c 05 	sts	0x053C, r24
				checkKey = key;
     b84:	90 93 3d 05 	sts	0x053D, r25
     b88:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     b8a:	80 91 3c 05 	lds	r24, 0x053C
     b8e:	88 23       	and	r24, r24
     b90:	39 f5       	brne	.+78     	; 0xbe0 <KeypadDebounce+0x9a>
				if (key && key == checkKey) {
     b92:	99 23       	and	r25, r25
     b94:	69 f0       	breq	.+26     	; 0xbb0 <KeypadDebounce+0x6a>
     b96:	80 91 3d 05 	lds	r24, 0x053D
     b9a:	98 17       	cp	r25, r24
     b9c:	49 f4       	brne	.+18     	; 0xbb0 <KeypadDebounce+0x6a>
					keyState = PUSHED;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	80 93 3b 03 	sts	0x033B, r24
					curKey = key;
     ba4:	90 93 3b 05 	sts	0x053B, r25
					KeypadAppend(key);
     ba8:	89 2f       	mov	r24, r25
     baa:	0e 94 45 05 	call	0xa8a	; 0xa8a <KeypadAppend>
     bae:	08 95       	ret
				} else {
					keyState = RELEASED;
     bb0:	10 92 3b 03 	sts	0x033B, r1
     bb4:	08 95       	ret
				}
			}
			break;
		case PUSHED:
			if (key == 0){
     bb6:	99 23       	and	r25, r25
     bb8:	99 f4       	brne	.+38     	; 0xbe0 <KeypadDebounce+0x9a>
				keyState = MAYBERELEASED;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	80 93 3b 03 	sts	0x033B, r24
				debounceTime = DEBOUNCE_TIME;
     bc0:	8e e1       	ldi	r24, 0x1E	; 30
     bc2:	80 93 3c 05 	sts	0x053C, r24
     bc6:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     bc8:	80 91 3c 05 	lds	r24, 0x053C
     bcc:	88 23       	and	r24, r24
     bce:	41 f4       	brne	.+16     	; 0xbe0 <KeypadDebounce+0x9a>
				if (key == 0) {
     bd0:	99 23       	and	r25, r25
     bd2:	21 f4       	brne	.+8      	; 0xbdc <KeypadDebounce+0x96>
					keyState = PUSHED;
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	80 93 3b 03 	sts	0x033B, r24
     bda:	08 95       	ret
				} else {
					keyState = RELEASED;
     bdc:	10 92 3b 03 	sts	0x033B, r1
     be0:	08 95       	ret

00000be2 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     be2:	90 91 3b 05 	lds	r25, 0x053B
	if (curKey){
     be6:	80 91 3b 05 	lds	r24, 0x053B
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <KeypadKey+0x10>
		curKey = 0;
     bee:	10 92 3b 05 	sts	0x053B, r1
	}
	return tmpKey;
}
     bf2:	89 2f       	mov	r24, r25
     bf4:	08 95       	ret

00000bf6 <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	return KeypadInput;
}
     bf6:	80 91 38 03 	lds	r24, 0x0338
     bfa:	90 91 39 03 	lds	r25, 0x0339
     bfe:	08 95       	ret

00000c00 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     c00:	80 91 3a 03 	lds	r24, 0x033A
     c04:	08 95       	ret

00000c06 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     c06:	28 2f       	mov	r18, r24
     c08:	20 7f       	andi	r18, 0xF0	; 240
     c0a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     c0c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c0e:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c10:	20 ea       	ldi	r18, 0xA0	; 160
     c12:	3f e0       	ldi	r19, 0x0F	; 15
     c14:	f9 01       	movw	r30, r18
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     c1a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c1c:	40 98       	cbi	0x08, 0	; 8
     c1e:	f9 01       	movw	r30, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	44 e0       	ldi	r20, 0x04	; 4
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	4a 95       	dec	r20
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <LCDsendChar+0x22>
     c30:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     c32:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c34:	42 9a       	sbi	0x08, 2	; 8
     c36:	c9 01       	movw	r24, r18
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     c3c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c3e:	40 98       	cbi	0x08, 0	; 8
     c40:	c9 01       	movw	r24, r18
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     c46:	08 95       	ret

00000c48 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     c48:	28 2f       	mov	r18, r24
     c4a:	20 7f       	andi	r18, 0xF0	; 240
     c4c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     c4e:	42 9a       	sbi	0x08, 2	; 8
     c50:	20 ea       	ldi	r18, 0xA0	; 160
     c52:	3f e0       	ldi	r19, 0x0F	; 15
     c54:	f9 01       	movw	r30, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c5a:	42 98       	cbi	0x08, 2	; 8
     c5c:	f9 01       	movw	r30, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	54 e0       	ldi	r21, 0x04	; 4
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	5a 95       	dec	r21
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <LCDsendCommand+0x1e>
     c6e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     c70:	42 9a       	sbi	0x08, 2	; 8
     c72:	c9 01       	movw	r24, r18
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c78:	42 98       	cbi	0x08, 2	; 8
     c7a:	c9 01       	movw	r24, r18
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     c80:	08 95       	ret

00000c82 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     c88:	08 95       	ret

00000c8a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     c90:	08 95       	ret

00000c92 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <LCDstring+0x20>
     ca0:	ec 01       	movw	r28, r24
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     ca6:	89 91       	ld	r24, Y+
     ca8:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     cac:	1f 5f       	subi	r17, 0xFF	; 255
     cae:	10 17       	cp	r17, r16
     cb0:	d0 f3       	brcs	.-12     	; 0xca6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     cbc:	62 30       	cpi	r22, 0x02	; 2
     cbe:	31 f0       	breq	.+12     	; 0xccc <LCDGotoXY+0x10>
     cc0:	63 30       	cpi	r22, 0x03	; 3
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <LCDGotoXY+0x14>
     cc4:	61 30       	cpi	r22, 0x01	; 1
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     cc8:	80 5c       	subi	r24, 0xC0	; 192
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     ccc:	8c 5e       	subi	r24, 0xEC	; 236
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     cd0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
	
}
     cd8:	08 95       	ret

00000cda <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ce4:	64 2f       	mov	r22, r20
     ce6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     cee:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     cf2:	1f 5f       	subi	r17, 0xFF	; 255
     cf4:	fe 01       	movw	r30, r28
     cf6:	e1 0f       	add	r30, r17
     cf8:	f1 1d       	adc	r31, r1
     cfa:	84 91       	lpm	r24, Z+
     cfc:	88 23       	and	r24, r24
     cfe:	b9 f7       	brne	.-18     	; 0xcee <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	08 95       	ret

00000d08 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	7c 01       	movw	r14, r24
     d16:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     d18:	11 0f       	add	r17, r17
     d1a:	11 0f       	add	r17, r17
     d1c:	11 0f       	add	r17, r17
     d1e:	10 64       	ori	r17, 0x40	; 64
     d20:	c0 e0       	ldi	r28, 0x00	; 0
     d22:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     d24:	f7 01       	movw	r30, r14
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     d2c:	81 2f       	mov	r24, r17
     d2e:	8c 0f       	add	r24, r28
     d30:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendChar(pcc);
     d34:	80 2f       	mov	r24, r16
     d36:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	c8 30       	cpi	r28, 0x08	; 8
     d3e:	d1 05       	cpc	r29, r1
     d40:	89 f7       	brne	.-30     	; 0xd24 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret

00000d50 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	80 e6       	ldi	r24, 0x60	; 96
     d58:	9a ee       	ldi	r25, 0xEA	; 234
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     d5e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     d60:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     d62:	87 b1       	in	r24, 0x07	; 7
     d64:	80 6f       	ori	r24, 0xF0	; 240
     d66:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     d68:	87 b1       	in	r24, 0x07	; 7
     d6a:	87 60       	ori	r24, 0x07	; 7
     d6c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d6e:	80 e3       	ldi	r24, 0x30	; 48
     d70:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d72:	42 9a       	sbi	0x08, 2	; 8
     d74:	20 ea       	ldi	r18, 0xA0	; 160
     d76:	3f e0       	ldi	r19, 0x0F	; 15
     d78:	f9 01       	movw	r30, r18
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d7e:	42 98       	cbi	0x08, 2	; 8
     d80:	f9 01       	movw	r30, r18
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d86:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d88:	42 9a       	sbi	0x08, 2	; 8
     d8a:	c9 01       	movw	r24, r18
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d90:	42 98       	cbi	0x08, 2	; 8
     d92:	c9 01       	movw	r24, r18
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d9c:	42 9a       	sbi	0x08, 2	; 8
     d9e:	c9 01       	movw	r24, r18
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     da4:	42 98       	cbi	0x08, 2	; 8
     da6:	c9 01       	movw	r24, r18
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     dac:	88 e2       	ldi	r24, 0x28	; 40
     dae:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     db2:	8c e0       	ldi	r24, 0x0C	; 12
     db4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
     db8:	c8 e0       	ldi	r28, 0x08	; 8
     dba:	d1 e0       	ldi	r29, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     dbe:	16 2f       	mov	r17, r22
     dc0:	1f 5f       	subi	r17, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDdefinechar>
     dc8:	28 96       	adiw	r28, 0x08	; 8
     dca:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     dcc:	18 30       	cpi	r17, 0x08	; 8
     dce:	b9 f7       	brne	.-18     	; 0xdbe <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	08 95       	ret

00000dd8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	08 2f       	mov	r16, r24
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	04 c0       	rjmp	.+8      	; 0xdea <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     de2:	8e e1       	ldi	r24, 0x1E	; 30
     de4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     de8:	1f 5f       	subi	r17, 0xFF	; 255
     dea:	10 17       	cp	r17, r16
     dec:	d0 f3       	brcs	.-12     	; 0xde2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	08 2f       	mov	r16, r24
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     dfe:	88 e1       	ldi	r24, 0x18	; 24
     e00:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     e04:	1f 5f       	subi	r17, 0xFF	; 255
     e06:	10 17       	cp	r17, r16
     e08:	d0 f3       	brcs	.-12     	; 0xdfe <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     e10:	8e e0       	ldi	r24, 0x0E	; 14
     e12:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e16:	08 95       	ret

00000e18 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e1e:	08 95       	ret

00000e20 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     e20:	8c e0       	ldi	r24, 0x0C	; 12
     e22:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e26:	08 95       	ret

00000e28 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e2e:	08 95       	ret

00000e30 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e36:	08 95       	ret

00000e38 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	08 2f       	mov	r16, r24
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     e42:	80 e1       	ldi	r24, 0x10	; 16
     e44:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e48:	1f 5f       	subi	r17, 0xFF	; 255
     e4a:	10 17       	cp	r17, r16
     e4c:	d0 f3       	brcs	.-12     	; 0xe42 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	08 2f       	mov	r16, r24
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     e5e:	84 e1       	ldi	r24, 0x14	; 20
     e60:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e64:	1f 5f       	subi	r17, 0xFF	; 255
     e66:	10 17       	cp	r17, r16
     e68:	d0 f3       	brcs	.-12     	; 0xe5e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     e80:	96 e0       	ldi	r25, 0x06	; 6
     e82:	89 9f       	mul	r24, r25
     e84:	c0 01       	movw	r24, r0
     e86:	11 24       	eor	r1, r1
     e88:	24 2f       	mov	r18, r20
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	ac 01       	movw	r20, r24
     e8e:	42 9f       	mul	r20, r18
     e90:	c0 01       	movw	r24, r0
     e92:	43 9f       	mul	r20, r19
     e94:	90 0d       	add	r25, r0
     e96:	52 9f       	mul	r21, r18
     e98:	90 0d       	add	r25, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
     ea2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ea4:	cb 01       	movw	r24, r22
     ea6:	66 e0       	ldi	r22, 0x06	; 6
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__udivmodhi4>
     eae:	e8 2e       	mov	r14, r24
     eb0:	ff 24       	eor	r15, r15
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     eb8:	c8 01       	movw	r24, r16
     eba:	05 96       	adiw	r24, 0x05	; 5
     ebc:	c8 17       	cp	r28, r24
     ebe:	d9 07       	cpc	r29, r25
     ec0:	10 f0       	brcs	.+4      	; 0xec6 <LCDprogressBar+0x56>
     ec2:	85 e0       	ldi	r24, 0x05	; 5
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ec6:	c0 17       	cp	r28, r16
     ec8:	d1 07       	cpc	r29, r17
     eca:	10 f0       	brcs	.+4      	; 0xed0 <LCDprogressBar+0x60>
     ecc:	8e 2d       	mov	r24, r14
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <LCDprogressBar+0x62>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     ed2:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     ed6:	f3 94       	inc	r15
     ed8:	0a 5f       	subi	r16, 0xFA	; 250
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fd 14       	cp	r15, r13
     ede:	60 f3       	brcs	.-40     	; 0xeb8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	08 95       	ret

00000ef0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     ef0:	87 e6       	ldi	r24, 0x67	; 103
     ef2:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	80 93 c1 00 	sts	0x00C1, r24
}
     efc:	08 95       	ret

00000efe <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     efe:	1f 93       	push	r17
     f00:	18 2f       	mov	r17, r24

  if (c == '\a')
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	49 f4       	brne	.+18     	; 0xf18 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     f06:	60 91 42 05 	lds	r22, 0x0542
     f0a:	70 91 43 05 	lds	r23, 0x0543
     f0e:	85 e2       	ldi	r24, 0x25	; 37
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <fputs>
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     f18:	8a 30       	cpi	r24, 0x0A	; 10
     f1a:	19 f4       	brne	.+6      	; 0xf22 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f1c:	8d e0       	ldi	r24, 0x0D	; 13
     f1e:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     f22:	80 91 c0 00 	lds	r24, 0x00C0
     f26:	85 ff       	sbrs	r24, 5
     f28:	fc cf       	rjmp	.-8      	; 0xf22 <uart_putchar+0x24>
  UDR0 = c;
     f2a:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f44:	80 91 3c 03 	lds	r24, 0x033C
     f48:	90 91 3d 03 	lds	r25, 0x033D
     f4c:	89 2b       	or	r24, r25
     f4e:	09 f0       	breq	.+2      	; 0xf52 <uart_getchar+0x1c>
     f50:	9f c0       	rjmp	.+318    	; 0x1090 <uart_getchar+0x15a>
     f52:	0e e3       	ldi	r16, 0x3E	; 62
     f54:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f56:	80 91 c0 00 	lds	r24, 0x00C0
     f5a:	87 ff       	sbrs	r24, 7
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     f5e:	80 91 c0 00 	lds	r24, 0x00C0
     f62:	84 ff       	sbrs	r24, 4
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <uart_getchar+0x36>
     f66:	2e ef       	ldi	r18, 0xFE	; 254
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	a6 c0       	rjmp	.+332    	; 0x10b8 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     f6c:	80 91 c0 00 	lds	r24, 0x00C0
     f70:	83 fd       	sbrc	r24, 3
     f72:	a0 c0       	rjmp	.+320    	; 0x10b4 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     f74:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     f78:	9d 30       	cpi	r25, 0x0D	; 13
     f7a:	11 f0       	breq	.+4      	; 0xf80 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     f7c:	9a 30       	cpi	r25, 0x0A	; 10
     f7e:	69 f4       	brne	.+26     	; 0xf9a <uart_getchar+0x64>
	  {
	    *cp = c;
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	f8 01       	movw	r30, r16
     f84:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     f86:	b7 01       	movw	r22, r14
     f88:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
	    rxp = b;
     f8c:	8e e3       	ldi	r24, 0x3E	; 62
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	90 93 3d 03 	sts	0x033D, r25
     f94:	80 93 3c 03 	sts	0x033C, r24
     f98:	7b c0       	rjmp	.+246    	; 0x1090 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     f9a:	99 30       	cpi	r25, 0x09	; 9
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <uart_getchar+0x6a>
     f9e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     fa0:	89 2f       	mov	r24, r25
     fa2:	80 52       	subi	r24, 0x20	; 32
     fa4:	8f 35       	cpi	r24, 0x5F	; 95
     fa6:	10 f0       	brcs	.+4      	; 0xfac <uart_getchar+0x76>
     fa8:	90 3a       	cpi	r25, 0xA0	; 160
     faa:	70 f0       	brcs	.+28     	; 0xfc8 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fac:	f3 e0       	ldi	r31, 0x03	; 3
     fae:	0d 38       	cpi	r16, 0x8D	; 141
     fb0:	1f 07       	cpc	r17, r31
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     fb4:	87 e0       	ldi	r24, 0x07	; 7
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     fb8:	f8 01       	movw	r30, r16
     fba:	91 93       	st	Z+, r25
     fbc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fbe:	89 2f       	mov	r24, r25
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
     fc6:	c7 cf       	rjmp	.-114    	; 0xf56 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     fc8:	92 31       	cpi	r25, 0x12	; 18
     fca:	39 f1       	breq	.+78     	; 0x101a <uart_getchar+0xe4>
     fcc:	93 31       	cpi	r25, 0x13	; 19
     fce:	38 f4       	brcc	.+14     	; 0xfde <uart_getchar+0xa8>
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <uart_getchar+0xa0>
     fd4:	6f c0       	rjmp	.+222    	; 0x10b4 <uart_getchar+0x17e>
     fd6:	98 30       	cpi	r25, 0x08	; 8
     fd8:	09 f0       	breq	.+2      	; 0xfdc <uart_getchar+0xa6>
     fda:	bd cf       	rjmp	.-134    	; 0xf56 <uart_getchar+0x20>
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <uart_getchar+0xba>
     fde:	97 31       	cpi	r25, 0x17	; 23
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <uart_getchar+0xae>
     fe2:	4b c0       	rjmp	.+150    	; 0x107a <uart_getchar+0x144>
     fe4:	9f 37       	cpi	r25, 0x7F	; 127
     fe6:	21 f0       	breq	.+8      	; 0xff0 <uart_getchar+0xba>
     fe8:	95 31       	cpi	r25, 0x15	; 21
     fea:	09 f0       	breq	.+2      	; 0xfee <uart_getchar+0xb8>
     fec:	b4 cf       	rjmp	.-152    	; 0xf56 <uart_getchar+0x20>
     fee:	32 c0       	rjmp	.+100    	; 0x1054 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ff0:	f3 e0       	ldi	r31, 0x03	; 3
     ff2:	0e 33       	cpi	r16, 0x3E	; 62
     ff4:	1f 07       	cpc	r17, r31
     ff6:	09 f0       	breq	.+2      	; 0xffa <uart_getchar+0xc4>
     ff8:	08 f4       	brcc	.+2      	; 0xffc <uart_getchar+0xc6>
     ffa:	ad cf       	rjmp	.-166    	; 0xf56 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	b7 01       	movw	r22, r14
    1000:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	b7 01       	movw	r22, r14
    1008:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	b7 01       	movw	r22, r14
    1010:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		cp--;
    1014:	01 50       	subi	r16, 0x01	; 1
    1016:	10 40       	sbci	r17, 0x00	; 0
    1018:	9e cf       	rjmp	.-196    	; 0xf56 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    101a:	8d e0       	ldi	r24, 0x0D	; 13
    101c:	b7 01       	movw	r22, r14
    101e:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
    1022:	ce e3       	ldi	r28, 0x3E	; 62
    1024:	d3 e0       	ldi	r29, 0x03	; 3
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1028:	89 91       	ld	r24, Y+
    102a:	b7 01       	movw	r22, r14
    102c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1030:	c0 17       	cp	r28, r16
    1032:	d1 07       	cpc	r29, r17
    1034:	c8 f3       	brcs	.-14     	; 0x1028 <uart_getchar+0xf2>
    1036:	8f cf       	rjmp	.-226    	; 0xf56 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	b7 01       	movw	r22, r14
    103c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    1048:	88 e0       	ldi	r24, 0x08	; 8
    104a:	b7 01       	movw	r22, r14
    104c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		cp--;
    1050:	01 50       	subi	r16, 0x01	; 1
    1052:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	0e 33       	cpi	r16, 0x3E	; 62
    1058:	18 07       	cpc	r17, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <uart_getchar+0x128>
    105c:	68 f7       	brcc	.-38     	; 0x1038 <uart_getchar+0x102>
    105e:	7b cf       	rjmp	.-266    	; 0xf56 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	b7 01       	movw	r22, r14
    1064:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	b7 01       	movw	r22, r14
    106c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	b7 01       	movw	r22, r14
    1074:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
    1078:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    107a:	e3 e0       	ldi	r30, 0x03	; 3
    107c:	0e 33       	cpi	r16, 0x3E	; 62
    107e:	1e 07       	cpc	r17, r30
    1080:	09 f0       	breq	.+2      	; 0x1084 <uart_getchar+0x14e>
    1082:	08 f4       	brcc	.+2      	; 0x1086 <uart_getchar+0x150>
    1084:	68 cf       	rjmp	.-304    	; 0xf56 <uart_getchar+0x20>
    1086:	e8 01       	movw	r28, r16
    1088:	8a 91       	ld	r24, -Y
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	49 f7       	brne	.-46     	; 0x1060 <uart_getchar+0x12a>
    108e:	63 cf       	rjmp	.-314    	; 0xf56 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1090:	e0 91 3c 03 	lds	r30, 0x033C
    1094:	f0 91 3d 03 	lds	r31, 0x033D
    1098:	81 91       	ld	r24, Z+
    109a:	f0 93 3d 03 	sts	0x033D, r31
    109e:	e0 93 3c 03 	sts	0x033C, r30
  if (c == '\n')
    10a2:	8a 30       	cpi	r24, 0x0A	; 10
    10a4:	21 f4       	brne	.+8      	; 0x10ae <uart_getchar+0x178>
    rxp = 0;
    10a6:	10 92 3d 03 	sts	0x033D, r1
    10aa:	10 92 3c 03 	sts	0x033C, r1

  return c;
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <uart_getchar+0x182>
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
}
    10b8:	c9 01       	movw	r24, r18
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <__fixunssfsi>:
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	7b 01       	movw	r14, r22
    10d2:	8c 01       	movw	r16, r24
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	5f e4       	ldi	r21, 0x4F	; 79
    10dc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
    10e0:	88 23       	and	r24, r24
    10e2:	8c f0       	brlt	.+34     	; 0x1106 <__stack+0x7>
    10e4:	c8 01       	movw	r24, r16
    10e6:	b7 01       	movw	r22, r14
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	5f e4       	ldi	r21, 0x4F	; 79
    10f0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__subsf3>
    10f4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fixsfsi>
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	20 50       	subi	r18, 0x00	; 0
    10fe:	30 40       	sbci	r19, 0x00	; 0
    1100:	40 40       	sbci	r20, 0x00	; 0
    1102:	50 48       	sbci	r21, 0x80	; 128
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <__stack+0x13>
    1106:	c8 01       	movw	r24, r16
    1108:	b7 01       	movw	r22, r14
    110a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fixsfsi>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	b9 01       	movw	r22, r18
    1114:	ca 01       	movw	r24, r20
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	08 95       	ret

00001120 <_fpadd_parts>:
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e6 e9       	ldi	r30, 0x96	; 150
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__prologue_saves__>
    112c:	dc 01       	movw	r26, r24
    112e:	2b 01       	movw	r4, r22
    1130:	fa 01       	movw	r30, r20
    1132:	9c 91       	ld	r25, X
    1134:	92 30       	cpi	r25, 0x02	; 2
    1136:	08 f4       	brcc	.+2      	; 0x113a <_fpadd_parts+0x1a>
    1138:	39 c1       	rjmp	.+626    	; 0x13ac <_fpadd_parts+0x28c>
    113a:	eb 01       	movw	r28, r22
    113c:	88 81       	ld	r24, Y
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	08 f4       	brcc	.+2      	; 0x1144 <_fpadd_parts+0x24>
    1142:	33 c1       	rjmp	.+614    	; 0x13aa <_fpadd_parts+0x28a>
    1144:	94 30       	cpi	r25, 0x04	; 4
    1146:	69 f4       	brne	.+26     	; 0x1162 <_fpadd_parts+0x42>
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	09 f0       	breq	.+2      	; 0x114e <_fpadd_parts+0x2e>
    114c:	2f c1       	rjmp	.+606    	; 0x13ac <_fpadd_parts+0x28c>
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	9c 91       	ld	r25, X
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	98 17       	cp	r25, r24
    1158:	09 f4       	brne	.+2      	; 0x115c <_fpadd_parts+0x3c>
    115a:	28 c1       	rjmp	.+592    	; 0x13ac <_fpadd_parts+0x28c>
    115c:	ad e2       	ldi	r26, 0x2D	; 45
    115e:	b2 e0       	ldi	r27, 0x02	; 2
    1160:	25 c1       	rjmp	.+586    	; 0x13ac <_fpadd_parts+0x28c>
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	09 f4       	brne	.+2      	; 0x1168 <_fpadd_parts+0x48>
    1166:	21 c1       	rjmp	.+578    	; 0x13aa <_fpadd_parts+0x28a>
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	a9 f4       	brne	.+42     	; 0x1196 <_fpadd_parts+0x76>
    116c:	92 30       	cpi	r25, 0x02	; 2
    116e:	09 f0       	breq	.+2      	; 0x1172 <_fpadd_parts+0x52>
    1170:	1d c1       	rjmp	.+570    	; 0x13ac <_fpadd_parts+0x28c>
    1172:	9a 01       	movw	r18, r20
    1174:	ad 01       	movw	r20, r26
    1176:	88 e0       	ldi	r24, 0x08	; 8
    1178:	ea 01       	movw	r28, r20
    117a:	09 90       	ld	r0, Y+
    117c:	ae 01       	movw	r20, r28
    117e:	e9 01       	movw	r28, r18
    1180:	09 92       	st	Y+, r0
    1182:	9e 01       	movw	r18, r28
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	c1 f7       	brne	.-16     	; 0x1178 <_fpadd_parts+0x58>
    1188:	e2 01       	movw	r28, r4
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	9c 91       	ld	r25, X
    1190:	89 23       	and	r24, r25
    1192:	81 83       	std	Z+1, r24	; 0x01
    1194:	08 c1       	rjmp	.+528    	; 0x13a6 <_fpadd_parts+0x286>
    1196:	92 30       	cpi	r25, 0x02	; 2
    1198:	09 f4       	brne	.+2      	; 0x119c <_fpadd_parts+0x7c>
    119a:	07 c1       	rjmp	.+526    	; 0x13aa <_fpadd_parts+0x28a>
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	2d 90       	ld	r2, X+
    11a0:	3c 90       	ld	r3, X
    11a2:	13 97       	sbiw	r26, 0x03	; 3
    11a4:	eb 01       	movw	r28, r22
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	14 96       	adiw	r26, 0x04	; 4
    11ac:	ad 90       	ld	r10, X+
    11ae:	bd 90       	ld	r11, X+
    11b0:	cd 90       	ld	r12, X+
    11b2:	dc 90       	ld	r13, X
    11b4:	17 97       	sbiw	r26, 0x07	; 7
    11b6:	ec 80       	ldd	r14, Y+4	; 0x04
    11b8:	fd 80       	ldd	r15, Y+5	; 0x05
    11ba:	0e 81       	ldd	r16, Y+6	; 0x06
    11bc:	1f 81       	ldd	r17, Y+7	; 0x07
    11be:	91 01       	movw	r18, r2
    11c0:	28 1b       	sub	r18, r24
    11c2:	39 0b       	sbc	r19, r25
    11c4:	b9 01       	movw	r22, r18
    11c6:	37 ff       	sbrs	r19, 7
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <_fpadd_parts+0xb2>
    11ca:	66 27       	eor	r22, r22
    11cc:	77 27       	eor	r23, r23
    11ce:	62 1b       	sub	r22, r18
    11d0:	73 0b       	sbc	r23, r19
    11d2:	60 32       	cpi	r22, 0x20	; 32
    11d4:	71 05       	cpc	r23, r1
    11d6:	0c f0       	brlt	.+2      	; 0x11da <_fpadd_parts+0xba>
    11d8:	61 c0       	rjmp	.+194    	; 0x129c <_fpadd_parts+0x17c>
    11da:	12 16       	cp	r1, r18
    11dc:	13 06       	cpc	r1, r19
    11de:	6c f5       	brge	.+90     	; 0x123a <_fpadd_parts+0x11a>
    11e0:	37 01       	movw	r6, r14
    11e2:	48 01       	movw	r8, r16
    11e4:	06 2e       	mov	r0, r22
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <_fpadd_parts+0xd0>
    11e8:	96 94       	lsr	r9
    11ea:	87 94       	ror	r8
    11ec:	77 94       	ror	r7
    11ee:	67 94       	ror	r6
    11f0:	0a 94       	dec	r0
    11f2:	d2 f7       	brpl	.-12     	; 0x11e8 <_fpadd_parts+0xc8>
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <_fpadd_parts+0xe6>
    11fe:	22 0f       	add	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	44 1f       	adc	r20, r20
    1204:	55 1f       	adc	r21, r21
    1206:	6a 95       	dec	r22
    1208:	d2 f7       	brpl	.-12     	; 0x11fe <_fpadd_parts+0xde>
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	30 40       	sbci	r19, 0x00	; 0
    120e:	40 40       	sbci	r20, 0x00	; 0
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	2e 21       	and	r18, r14
    1214:	3f 21       	and	r19, r15
    1216:	40 23       	and	r20, r16
    1218:	51 23       	and	r21, r17
    121a:	21 15       	cp	r18, r1
    121c:	31 05       	cpc	r19, r1
    121e:	41 05       	cpc	r20, r1
    1220:	51 05       	cpc	r21, r1
    1222:	21 f0       	breq	.+8      	; 0x122c <_fpadd_parts+0x10c>
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	79 01       	movw	r14, r18
    122e:	8a 01       	movw	r16, r20
    1230:	e6 28       	or	r14, r6
    1232:	f7 28       	or	r15, r7
    1234:	08 29       	or	r16, r8
    1236:	19 29       	or	r17, r9
    1238:	3c c0       	rjmp	.+120    	; 0x12b2 <_fpadd_parts+0x192>
    123a:	23 2b       	or	r18, r19
    123c:	d1 f1       	breq	.+116    	; 0x12b2 <_fpadd_parts+0x192>
    123e:	26 0e       	add	r2, r22
    1240:	37 1e       	adc	r3, r23
    1242:	35 01       	movw	r6, r10
    1244:	46 01       	movw	r8, r12
    1246:	06 2e       	mov	r0, r22
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <_fpadd_parts+0x132>
    124a:	96 94       	lsr	r9
    124c:	87 94       	ror	r8
    124e:	77 94       	ror	r7
    1250:	67 94       	ror	r6
    1252:	0a 94       	dec	r0
    1254:	d2 f7       	brpl	.-12     	; 0x124a <_fpadd_parts+0x12a>
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <_fpadd_parts+0x148>
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	44 1f       	adc	r20, r20
    1266:	55 1f       	adc	r21, r21
    1268:	6a 95       	dec	r22
    126a:	d2 f7       	brpl	.-12     	; 0x1260 <_fpadd_parts+0x140>
    126c:	21 50       	subi	r18, 0x01	; 1
    126e:	30 40       	sbci	r19, 0x00	; 0
    1270:	40 40       	sbci	r20, 0x00	; 0
    1272:	50 40       	sbci	r21, 0x00	; 0
    1274:	2a 21       	and	r18, r10
    1276:	3b 21       	and	r19, r11
    1278:	4c 21       	and	r20, r12
    127a:	5d 21       	and	r21, r13
    127c:	21 15       	cp	r18, r1
    127e:	31 05       	cpc	r19, r1
    1280:	41 05       	cpc	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	21 f0       	breq	.+8      	; 0x128e <_fpadd_parts+0x16e>
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	59 01       	movw	r10, r18
    1290:	6a 01       	movw	r12, r20
    1292:	a6 28       	or	r10, r6
    1294:	b7 28       	or	r11, r7
    1296:	c8 28       	or	r12, r8
    1298:	d9 28       	or	r13, r9
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <_fpadd_parts+0x192>
    129c:	82 15       	cp	r24, r2
    129e:	93 05       	cpc	r25, r3
    12a0:	2c f0       	brlt	.+10     	; 0x12ac <_fpadd_parts+0x18c>
    12a2:	1c 01       	movw	r2, r24
    12a4:	aa 24       	eor	r10, r10
    12a6:	bb 24       	eor	r11, r11
    12a8:	65 01       	movw	r12, r10
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_fpadd_parts+0x192>
    12ac:	ee 24       	eor	r14, r14
    12ae:	ff 24       	eor	r15, r15
    12b0:	87 01       	movw	r16, r14
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	9c 91       	ld	r25, X
    12b6:	d2 01       	movw	r26, r4
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	8c 91       	ld	r24, X
    12bc:	98 17       	cp	r25, r24
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_fpadd_parts+0x1a2>
    12c0:	45 c0       	rjmp	.+138    	; 0x134c <_fpadd_parts+0x22c>
    12c2:	99 23       	and	r25, r25
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <_fpadd_parts+0x1b4>
    12c6:	a8 01       	movw	r20, r16
    12c8:	97 01       	movw	r18, r14
    12ca:	2a 19       	sub	r18, r10
    12cc:	3b 09       	sbc	r19, r11
    12ce:	4c 09       	sbc	r20, r12
    12d0:	5d 09       	sbc	r21, r13
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <_fpadd_parts+0x1c0>
    12d4:	a6 01       	movw	r20, r12
    12d6:	95 01       	movw	r18, r10
    12d8:	2e 19       	sub	r18, r14
    12da:	3f 09       	sbc	r19, r15
    12dc:	40 0b       	sbc	r20, r16
    12de:	51 0b       	sbc	r21, r17
    12e0:	57 fd       	sbrc	r21, 7
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <_fpadd_parts+0x1d4>
    12e4:	11 82       	std	Z+1, r1	; 0x01
    12e6:	33 82       	std	Z+3, r3	; 0x03
    12e8:	22 82       	std	Z+2, r2	; 0x02
    12ea:	24 83       	std	Z+4, r18	; 0x04
    12ec:	35 83       	std	Z+5, r19	; 0x05
    12ee:	46 83       	std	Z+6, r20	; 0x06
    12f0:	57 83       	std	Z+7, r21	; 0x07
    12f2:	1d c0       	rjmp	.+58     	; 0x132e <_fpadd_parts+0x20e>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	81 83       	std	Z+1, r24	; 0x01
    12f8:	33 82       	std	Z+3, r3	; 0x03
    12fa:	22 82       	std	Z+2, r2	; 0x02
    12fc:	88 27       	eor	r24, r24
    12fe:	99 27       	eor	r25, r25
    1300:	dc 01       	movw	r26, r24
    1302:	82 1b       	sub	r24, r18
    1304:	93 0b       	sbc	r25, r19
    1306:	a4 0b       	sbc	r26, r20
    1308:	b5 0b       	sbc	r27, r21
    130a:	84 83       	std	Z+4, r24	; 0x04
    130c:	95 83       	std	Z+5, r25	; 0x05
    130e:	a6 83       	std	Z+6, r26	; 0x06
    1310:	b7 83       	std	Z+7, r27	; 0x07
    1312:	0d c0       	rjmp	.+26     	; 0x132e <_fpadd_parts+0x20e>
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	44 1f       	adc	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	24 83       	std	Z+4, r18	; 0x04
    131e:	35 83       	std	Z+5, r19	; 0x05
    1320:	46 83       	std	Z+6, r20	; 0x06
    1322:	57 83       	std	Z+7, r21	; 0x07
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	93 83       	std	Z+3, r25	; 0x03
    132c:	82 83       	std	Z+2, r24	; 0x02
    132e:	24 81       	ldd	r18, Z+4	; 0x04
    1330:	35 81       	ldd	r19, Z+5	; 0x05
    1332:	46 81       	ldd	r20, Z+6	; 0x06
    1334:	57 81       	ldd	r21, Z+7	; 0x07
    1336:	da 01       	movw	r26, r20
    1338:	c9 01       	movw	r24, r18
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	a1 09       	sbc	r26, r1
    133e:	b1 09       	sbc	r27, r1
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	af 4f       	sbci	r26, 0xFF	; 255
    1346:	bf 43       	sbci	r27, 0x3F	; 63
    1348:	28 f3       	brcs	.-54     	; 0x1314 <_fpadd_parts+0x1f4>
    134a:	0b c0       	rjmp	.+22     	; 0x1362 <_fpadd_parts+0x242>
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	33 82       	std	Z+3, r3	; 0x03
    1350:	22 82       	std	Z+2, r2	; 0x02
    1352:	ea 0c       	add	r14, r10
    1354:	fb 1c       	adc	r15, r11
    1356:	0c 1d       	adc	r16, r12
    1358:	1d 1d       	adc	r17, r13
    135a:	e4 82       	std	Z+4, r14	; 0x04
    135c:	f5 82       	std	Z+5, r15	; 0x05
    135e:	06 83       	std	Z+6, r16	; 0x06
    1360:	17 83       	std	Z+7, r17	; 0x07
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	80 83       	st	Z, r24
    1366:	24 81       	ldd	r18, Z+4	; 0x04
    1368:	35 81       	ldd	r19, Z+5	; 0x05
    136a:	46 81       	ldd	r20, Z+6	; 0x06
    136c:	57 81       	ldd	r21, Z+7	; 0x07
    136e:	57 ff       	sbrs	r21, 7
    1370:	1a c0       	rjmp	.+52     	; 0x13a6 <_fpadd_parts+0x286>
    1372:	c9 01       	movw	r24, r18
    1374:	aa 27       	eor	r26, r26
    1376:	97 fd       	sbrc	r25, 7
    1378:	a0 95       	com	r26
    137a:	ba 2f       	mov	r27, r26
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	a0 70       	andi	r26, 0x00	; 0
    1382:	b0 70       	andi	r27, 0x00	; 0
    1384:	56 95       	lsr	r21
    1386:	47 95       	ror	r20
    1388:	37 95       	ror	r19
    138a:	27 95       	ror	r18
    138c:	82 2b       	or	r24, r18
    138e:	93 2b       	or	r25, r19
    1390:	a4 2b       	or	r26, r20
    1392:	b5 2b       	or	r27, r21
    1394:	84 83       	std	Z+4, r24	; 0x04
    1396:	95 83       	std	Z+5, r25	; 0x05
    1398:	a6 83       	std	Z+6, r26	; 0x06
    139a:	b7 83       	std	Z+7, r27	; 0x07
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	93 83       	std	Z+3, r25	; 0x03
    13a4:	82 83       	std	Z+2, r24	; 0x02
    13a6:	df 01       	movw	r26, r30
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <_fpadd_parts+0x28c>
    13aa:	d2 01       	movw	r26, r4
    13ac:	cd 01       	movw	r24, r26
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	e2 e1       	ldi	r30, 0x12	; 18
    13b4:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__epilogue_restores__>

000013b8 <__subsf3>:
    13b8:	a0 e2       	ldi	r26, 0x20	; 32
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 ee       	ldi	r30, 0xE2	; 226
    13be:	f9 e0       	ldi	r31, 0x09	; 9
    13c0:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__prologue_saves__+0x18>
    13c4:	69 83       	std	Y+1, r22	; 0x01
    13c6:	7a 83       	std	Y+2, r23	; 0x02
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	2d 83       	std	Y+5, r18	; 0x05
    13ce:	3e 83       	std	Y+6, r19	; 0x06
    13d0:	4f 83       	std	Y+7, r20	; 0x07
    13d2:	58 87       	std	Y+8, r21	; 0x08
    13d4:	e9 e0       	ldi	r30, 0x09	; 9
    13d6:	ee 2e       	mov	r14, r30
    13d8:	f1 2c       	mov	r15, r1
    13da:	ec 0e       	add	r14, r28
    13dc:	fd 1e       	adc	r15, r29
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	b7 01       	movw	r22, r14
    13e4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    13e8:	8e 01       	movw	r16, r28
    13ea:	0f 5e       	subi	r16, 0xEF	; 239
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	ce 01       	movw	r24, r28
    13f0:	05 96       	adiw	r24, 0x05	; 5
    13f2:	b8 01       	movw	r22, r16
    13f4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    13f8:	8a 89       	ldd	r24, Y+18	; 0x12
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	89 27       	eor	r24, r25
    13fe:	8a 8b       	std	Y+18, r24	; 0x12
    1400:	c7 01       	movw	r24, r14
    1402:	b8 01       	movw	r22, r16
    1404:	ae 01       	movw	r20, r28
    1406:	47 5e       	subi	r20, 0xE7	; 231
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	0e 94 90 08 	call	0x1120	; 0x1120 <_fpadd_parts>
    140e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e6 e0       	ldi	r30, 0x06	; 6
    1416:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__epilogue_restores__+0x18>

0000141a <__addsf3>:
    141a:	a0 e2       	ldi	r26, 0x20	; 32
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	f9 e0       	ldi	r31, 0x09	; 9
    1438:	ef 2e       	mov	r14, r31
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    145a:	c7 01       	movw	r24, r14
    145c:	b8 01       	movw	r22, r16
    145e:	ae 01       	movw	r20, r28
    1460:	47 5e       	subi	r20, 0xE7	; 231
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	0e 94 90 08 	call	0x1120	; 0x1120 <_fpadd_parts>
    1468:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pack_f>
    146c:	a0 96       	adiw	r28, 0x20	; 32
    146e:	e6 e0       	ldi	r30, 0x06	; 6
    1470:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__epilogue_restores__+0x18>

00001474 <__mulsf3>:
    1474:	a0 e2       	ldi	r26, 0x20	; 32
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e0 e4       	ldi	r30, 0x40	; 64
    147a:	fa e0       	ldi	r31, 0x0A	; 10
    147c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__prologue_saves__>
    1480:	69 83       	std	Y+1, r22	; 0x01
    1482:	7a 83       	std	Y+2, r23	; 0x02
    1484:	8b 83       	std	Y+3, r24	; 0x03
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	2d 83       	std	Y+5, r18	; 0x05
    148a:	3e 83       	std	Y+6, r19	; 0x06
    148c:	4f 83       	std	Y+7, r20	; 0x07
    148e:	58 87       	std	Y+8, r21	; 0x08
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	be 01       	movw	r22, r28
    1496:	67 5f       	subi	r22, 0xF7	; 247
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    149e:	ce 01       	movw	r24, r28
    14a0:	05 96       	adiw	r24, 0x05	; 5
    14a2:	be 01       	movw	r22, r28
    14a4:	6f 5e       	subi	r22, 0xEF	; 239
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    14ac:	99 85       	ldd	r25, Y+9	; 0x09
    14ae:	92 30       	cpi	r25, 0x02	; 2
    14b0:	88 f0       	brcs	.+34     	; 0x14d4 <__mulsf3+0x60>
    14b2:	89 89       	ldd	r24, Y+17	; 0x11
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	c8 f0       	brcs	.+50     	; 0x14ea <__mulsf3+0x76>
    14b8:	94 30       	cpi	r25, 0x04	; 4
    14ba:	19 f4       	brne	.+6      	; 0x14c2 <__mulsf3+0x4e>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	51 f4       	brne	.+20     	; 0x14d4 <__mulsf3+0x60>
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <__mulsf3+0x56>
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <__mulsf3+0x5c>
    14c6:	92 30       	cpi	r25, 0x02	; 2
    14c8:	81 f4       	brne	.+32     	; 0x14ea <__mulsf3+0x76>
    14ca:	8d e2       	ldi	r24, 0x2D	; 45
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	c6 c0       	rjmp	.+396    	; 0x165c <__mulsf3+0x1e8>
    14d0:	92 30       	cpi	r25, 0x02	; 2
    14d2:	49 f4       	brne	.+18     	; 0x14e6 <__mulsf3+0x72>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	8a 89       	ldd	r24, Y+18	; 0x12
    14da:	98 13       	cpse	r25, r24
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	2a 87       	std	Y+10, r18	; 0x0a
    14e0:	ce 01       	movw	r24, r28
    14e2:	09 96       	adiw	r24, 0x09	; 9
    14e4:	bb c0       	rjmp	.+374    	; 0x165c <__mulsf3+0x1e8>
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	49 f4       	brne	.+18     	; 0x14fc <__mulsf3+0x88>
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	8a 89       	ldd	r24, Y+18	; 0x12
    14f0:	98 13       	cpse	r25, r24
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	2a 8b       	std	Y+18, r18	; 0x12
    14f6:	ce 01       	movw	r24, r28
    14f8:	41 96       	adiw	r24, 0x11	; 17
    14fa:	b0 c0       	rjmp	.+352    	; 0x165c <__mulsf3+0x1e8>
    14fc:	2d 84       	ldd	r2, Y+13	; 0x0d
    14fe:	3e 84       	ldd	r3, Y+14	; 0x0e
    1500:	4f 84       	ldd	r4, Y+15	; 0x0f
    1502:	58 88       	ldd	r5, Y+16	; 0x10
    1504:	6d 88       	ldd	r6, Y+21	; 0x15
    1506:	7e 88       	ldd	r7, Y+22	; 0x16
    1508:	8f 88       	ldd	r8, Y+23	; 0x17
    150a:	98 8c       	ldd	r9, Y+24	; 0x18
    150c:	ee 24       	eor	r14, r14
    150e:	ff 24       	eor	r15, r15
    1510:	87 01       	movw	r16, r14
    1512:	aa 24       	eor	r10, r10
    1514:	bb 24       	eor	r11, r11
    1516:	65 01       	movw	r12, r10
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	e0 e0       	ldi	r30, 0x00	; 0
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	c1 01       	movw	r24, r2
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	90 70       	andi	r25, 0x00	; 0
    152a:	89 2b       	or	r24, r25
    152c:	e9 f0       	breq	.+58     	; 0x1568 <__mulsf3+0xf4>
    152e:	e6 0c       	add	r14, r6
    1530:	f7 1c       	adc	r15, r7
    1532:	08 1d       	adc	r16, r8
    1534:	19 1d       	adc	r17, r9
    1536:	9a 01       	movw	r18, r20
    1538:	ab 01       	movw	r20, r22
    153a:	2a 0d       	add	r18, r10
    153c:	3b 1d       	adc	r19, r11
    153e:	4c 1d       	adc	r20, r12
    1540:	5d 1d       	adc	r21, r13
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e6 14       	cp	r14, r6
    154c:	f7 04       	cpc	r15, r7
    154e:	08 05       	cpc	r16, r8
    1550:	19 05       	cpc	r17, r9
    1552:	20 f4       	brcc	.+8      	; 0x155c <__mulsf3+0xe8>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ba 01       	movw	r22, r20
    155e:	a9 01       	movw	r20, r18
    1560:	48 0f       	add	r20, r24
    1562:	59 1f       	adc	r21, r25
    1564:	6a 1f       	adc	r22, r26
    1566:	7b 1f       	adc	r23, r27
    1568:	aa 0c       	add	r10, r10
    156a:	bb 1c       	adc	r11, r11
    156c:	cc 1c       	adc	r12, r12
    156e:	dd 1c       	adc	r13, r13
    1570:	97 fe       	sbrs	r9, 7
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <__mulsf3+0x110>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	a8 2a       	or	r10, r24
    157e:	b9 2a       	or	r11, r25
    1580:	ca 2a       	or	r12, r26
    1582:	db 2a       	or	r13, r27
    1584:	31 96       	adiw	r30, 0x01	; 1
    1586:	e0 32       	cpi	r30, 0x20	; 32
    1588:	f1 05       	cpc	r31, r1
    158a:	49 f0       	breq	.+18     	; 0x159e <__mulsf3+0x12a>
    158c:	66 0c       	add	r6, r6
    158e:	77 1c       	adc	r7, r7
    1590:	88 1c       	adc	r8, r8
    1592:	99 1c       	adc	r9, r9
    1594:	56 94       	lsr	r5
    1596:	47 94       	ror	r4
    1598:	37 94       	ror	r3
    159a:	27 94       	ror	r2
    159c:	c3 cf       	rjmp	.-122    	; 0x1524 <__mulsf3+0xb0>
    159e:	fa 85       	ldd	r31, Y+10	; 0x0a
    15a0:	ea 89       	ldd	r30, Y+18	; 0x12
    15a2:	2b 89       	ldd	r18, Y+19	; 0x13
    15a4:	3c 89       	ldd	r19, Y+20	; 0x14
    15a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15aa:	28 0f       	add	r18, r24
    15ac:	39 1f       	adc	r19, r25
    15ae:	2e 5f       	subi	r18, 0xFE	; 254
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <__mulsf3+0x16e>
    15b4:	ca 01       	movw	r24, r20
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	89 2b       	or	r24, r25
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <__mulsf3+0x162>
    15be:	16 95       	lsr	r17
    15c0:	07 95       	ror	r16
    15c2:	f7 94       	ror	r15
    15c4:	e7 94       	ror	r14
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e8       	ldi	r27, 0x80	; 128
    15ce:	e8 2a       	or	r14, r24
    15d0:	f9 2a       	or	r15, r25
    15d2:	0a 2b       	or	r16, r26
    15d4:	1b 2b       	or	r17, r27
    15d6:	76 95       	lsr	r23
    15d8:	67 95       	ror	r22
    15da:	57 95       	ror	r21
    15dc:	47 95       	ror	r20
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	77 fd       	sbrc	r23, 7
    15e4:	e7 cf       	rjmp	.-50     	; 0x15b4 <__mulsf3+0x140>
    15e6:	0c c0       	rjmp	.+24     	; 0x1600 <__mulsf3+0x18c>
    15e8:	44 0f       	add	r20, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	17 fd       	sbrc	r17, 7
    15f2:	41 60       	ori	r20, 0x01	; 1
    15f4:	ee 0c       	add	r14, r14
    15f6:	ff 1c       	adc	r15, r15
    15f8:	00 1f       	adc	r16, r16
    15fa:	11 1f       	adc	r17, r17
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	30 40       	sbci	r19, 0x00	; 0
    1600:	40 30       	cpi	r20, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	59 07       	cpc	r21, r25
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	69 07       	cpc	r22, r25
    160a:	90 e4       	ldi	r25, 0x40	; 64
    160c:	79 07       	cpc	r23, r25
    160e:	60 f3       	brcs	.-40     	; 0x15e8 <__mulsf3+0x174>
    1610:	2b 8f       	std	Y+27, r18	; 0x1b
    1612:	3c 8f       	std	Y+28, r19	; 0x1c
    1614:	db 01       	movw	r26, r22
    1616:	ca 01       	movw	r24, r20
    1618:	8f 77       	andi	r24, 0x7F	; 127
    161a:	90 70       	andi	r25, 0x00	; 0
    161c:	a0 70       	andi	r26, 0x00	; 0
    161e:	b0 70       	andi	r27, 0x00	; 0
    1620:	80 34       	cpi	r24, 0x40	; 64
    1622:	91 05       	cpc	r25, r1
    1624:	a1 05       	cpc	r26, r1
    1626:	b1 05       	cpc	r27, r1
    1628:	61 f4       	brne	.+24     	; 0x1642 <__mulsf3+0x1ce>
    162a:	47 fd       	sbrc	r20, 7
    162c:	0a c0       	rjmp	.+20     	; 0x1642 <__mulsf3+0x1ce>
    162e:	e1 14       	cp	r14, r1
    1630:	f1 04       	cpc	r15, r1
    1632:	01 05       	cpc	r16, r1
    1634:	11 05       	cpc	r17, r1
    1636:	29 f0       	breq	.+10     	; 0x1642 <__mulsf3+0x1ce>
    1638:	40 5c       	subi	r20, 0xC0	; 192
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	6f 4f       	sbci	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	40 78       	andi	r20, 0x80	; 128
    1642:	1a 8e       	std	Y+26, r1	; 0x1a
    1644:	fe 17       	cp	r31, r30
    1646:	11 f0       	breq	.+4      	; 0x164c <__mulsf3+0x1d8>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8a 8f       	std	Y+26, r24	; 0x1a
    164c:	4d 8f       	std	Y+29, r20	; 0x1d
    164e:	5e 8f       	std	Y+30, r21	; 0x1e
    1650:	6f 8f       	std	Y+31, r22	; 0x1f
    1652:	78 a3       	std	Y+32, r23	; 0x20
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	89 8f       	std	Y+25, r24	; 0x19
    1658:	ce 01       	movw	r24, r28
    165a:	49 96       	adiw	r24, 0x19	; 25
    165c:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pack_f>
    1660:	a0 96       	adiw	r28, 0x20	; 32
    1662:	e2 e1       	ldi	r30, 0x12	; 18
    1664:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__epilogue_restores__>

00001668 <__gesf2>:
    1668:	a8 e1       	ldi	r26, 0x18	; 24
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	fb e0       	ldi	r31, 0x0B	; 11
    1670:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__prologue_saves__+0x18>
    1674:	69 83       	std	Y+1, r22	; 0x01
    1676:	7a 83       	std	Y+2, r23	; 0x02
    1678:	8b 83       	std	Y+3, r24	; 0x03
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	2d 83       	std	Y+5, r18	; 0x05
    167e:	3e 83       	std	Y+6, r19	; 0x06
    1680:	4f 83       	std	Y+7, r20	; 0x07
    1682:	58 87       	std	Y+8, r21	; 0x08
    1684:	89 e0       	ldi	r24, 0x09	; 9
    1686:	e8 2e       	mov	r14, r24
    1688:	f1 2c       	mov	r15, r1
    168a:	ec 0e       	add	r14, r28
    168c:	fd 1e       	adc	r15, r29
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	b7 01       	movw	r22, r14
    1694:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    1698:	8e 01       	movw	r16, r28
    169a:	0f 5e       	subi	r16, 0xEF	; 239
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	ce 01       	movw	r24, r28
    16a0:	05 96       	adiw	r24, 0x05	; 5
    16a2:	b8 01       	movw	r22, r16
    16a4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	40 f0       	brcs	.+16     	; 0x16be <__gesf2+0x56>
    16ae:	89 89       	ldd	r24, Y+17	; 0x11
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	28 f0       	brcs	.+10     	; 0x16be <__gesf2+0x56>
    16b4:	c7 01       	movw	r24, r14
    16b6:	b8 01       	movw	r22, r16
    16b8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__fpcmp_parts_f>
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <__gesf2+0x58>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	68 96       	adiw	r28, 0x18	; 24
    16c2:	e6 e0       	ldi	r30, 0x06	; 6
    16c4:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__epilogue_restores__+0x18>

000016c8 <__fixsfsi>:
    16c8:	ac e0       	ldi	r26, 0x0C	; 12
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ea e6       	ldi	r30, 0x6A	; 106
    16ce:	fb e0       	ldi	r31, 0x0B	; 11
    16d0:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__prologue_saves__+0x20>
    16d4:	69 83       	std	Y+1, r22	; 0x01
    16d6:	7a 83       	std	Y+2, r23	; 0x02
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	be 01       	movw	r22, r28
    16e2:	6b 5f       	subi	r22, 0xFB	; 251
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__unpack_f>
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	61 f1       	breq	.+88     	; 0x1748 <__fixsfsi+0x80>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	50 f1       	brcs	.+84     	; 0x1748 <__fixsfsi+0x80>
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	21 f4       	brne	.+8      	; 0x1700 <__fixsfsi+0x38>
    16f8:	8e 81       	ldd	r24, Y+6	; 0x06
    16fa:	88 23       	and	r24, r24
    16fc:	51 f1       	breq	.+84     	; 0x1752 <__fixsfsi+0x8a>
    16fe:	2e c0       	rjmp	.+92     	; 0x175c <__fixsfsi+0x94>
    1700:	2f 81       	ldd	r18, Y+7	; 0x07
    1702:	38 85       	ldd	r19, Y+8	; 0x08
    1704:	37 fd       	sbrc	r19, 7
    1706:	20 c0       	rjmp	.+64     	; 0x1748 <__fixsfsi+0x80>
    1708:	6e 81       	ldd	r22, Y+6	; 0x06
    170a:	2f 31       	cpi	r18, 0x1F	; 31
    170c:	31 05       	cpc	r19, r1
    170e:	1c f0       	brlt	.+6      	; 0x1716 <__fixsfsi+0x4e>
    1710:	66 23       	and	r22, r22
    1712:	f9 f0       	breq	.+62     	; 0x1752 <__fixsfsi+0x8a>
    1714:	23 c0       	rjmp	.+70     	; 0x175c <__fixsfsi+0x94>
    1716:	8e e1       	ldi	r24, 0x1E	; 30
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	82 1b       	sub	r24, r18
    171c:	93 0b       	sbc	r25, r19
    171e:	29 85       	ldd	r18, Y+9	; 0x09
    1720:	3a 85       	ldd	r19, Y+10	; 0x0a
    1722:	4b 85       	ldd	r20, Y+11	; 0x0b
    1724:	5c 85       	ldd	r21, Y+12	; 0x0c
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__fixsfsi+0x68>
    1728:	56 95       	lsr	r21
    172a:	47 95       	ror	r20
    172c:	37 95       	ror	r19
    172e:	27 95       	ror	r18
    1730:	8a 95       	dec	r24
    1732:	d2 f7       	brpl	.-12     	; 0x1728 <__fixsfsi+0x60>
    1734:	66 23       	and	r22, r22
    1736:	b1 f0       	breq	.+44     	; 0x1764 <__fixsfsi+0x9c>
    1738:	50 95       	com	r21
    173a:	40 95       	com	r20
    173c:	30 95       	com	r19
    173e:	21 95       	neg	r18
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	4f 4f       	sbci	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <__fixsfsi+0x9c>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <__fixsfsi+0x9c>
    1752:	2f ef       	ldi	r18, 0xFF	; 255
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f ef       	ldi	r20, 0xFF	; 255
    1758:	5f e7       	ldi	r21, 0x7F	; 127
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <__fixsfsi+0x9c>
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e8       	ldi	r21, 0x80	; 128
    1764:	b9 01       	movw	r22, r18
    1766:	ca 01       	movw	r24, r20
    1768:	2c 96       	adiw	r28, 0x0c	; 12
    176a:	e2 e0       	ldi	r30, 0x02	; 2
    176c:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__epilogue_restores__+0x20>

00001770 <__floatunsisf>:
    1770:	a8 e0       	ldi	r26, 0x08	; 8
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ee eb       	ldi	r30, 0xBE	; 190
    1776:	fb e0       	ldi	r31, 0x0B	; 11
    1778:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__prologue_saves__+0x10>
    177c:	7b 01       	movw	r14, r22
    177e:	8c 01       	movw	r16, r24
    1780:	61 15       	cp	r22, r1
    1782:	71 05       	cpc	r23, r1
    1784:	81 05       	cpc	r24, r1
    1786:	91 05       	cpc	r25, r1
    1788:	19 f4       	brne	.+6      	; 0x1790 <__floatunsisf+0x20>
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	60 c0       	rjmp	.+192    	; 0x1850 <__floatunsisf+0xe0>
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	8e e1       	ldi	r24, 0x1E	; 30
    1796:	c8 2e       	mov	r12, r24
    1798:	d1 2c       	mov	r13, r1
    179a:	dc 82       	std	Y+4, r13	; 0x04
    179c:	cb 82       	std	Y+3, r12	; 0x03
    179e:	ed 82       	std	Y+5, r14	; 0x05
    17a0:	fe 82       	std	Y+6, r15	; 0x06
    17a2:	0f 83       	std	Y+7, r16	; 0x07
    17a4:	18 87       	std	Y+8, r17	; 0x08
    17a6:	c8 01       	movw	r24, r16
    17a8:	b7 01       	movw	r22, r14
    17aa:	0e 94 31 0c 	call	0x1862	; 0x1862 <__clzsi2>
    17ae:	fc 01       	movw	r30, r24
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	f7 ff       	sbrs	r31, 7
    17b4:	3b c0       	rjmp	.+118    	; 0x182c <__floatunsisf+0xbc>
    17b6:	22 27       	eor	r18, r18
    17b8:	33 27       	eor	r19, r19
    17ba:	2e 1b       	sub	r18, r30
    17bc:	3f 0b       	sbc	r19, r31
    17be:	57 01       	movw	r10, r14
    17c0:	68 01       	movw	r12, r16
    17c2:	02 2e       	mov	r0, r18
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <__floatunsisf+0x5e>
    17c6:	d6 94       	lsr	r13
    17c8:	c7 94       	ror	r12
    17ca:	b7 94       	ror	r11
    17cc:	a7 94       	ror	r10
    17ce:	0a 94       	dec	r0
    17d0:	d2 f7       	brpl	.-12     	; 0x17c6 <__floatunsisf+0x56>
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <__floatunsisf+0x7c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	2a 95       	dec	r18
    17ee:	d2 f7       	brpl	.-12     	; 0x17e4 <__floatunsisf+0x74>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	a1 09       	sbc	r26, r1
    17f4:	b1 09       	sbc	r27, r1
    17f6:	8e 21       	and	r24, r14
    17f8:	9f 21       	and	r25, r15
    17fa:	a0 23       	and	r26, r16
    17fc:	b1 23       	and	r27, r17
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	a1 05       	cpc	r26, r1
    1802:	b1 05       	cpc	r27, r1
    1804:	21 f0       	breq	.+8      	; 0x180e <__floatunsisf+0x9e>
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	4a 29       	or	r20, r10
    1810:	5b 29       	or	r21, r11
    1812:	6c 29       	or	r22, r12
    1814:	7d 29       	or	r23, r13
    1816:	4d 83       	std	Y+5, r20	; 0x05
    1818:	5e 83       	std	Y+6, r21	; 0x06
    181a:	6f 83       	std	Y+7, r22	; 0x07
    181c:	78 87       	std	Y+8, r23	; 0x08
    181e:	8e e1       	ldi	r24, 0x1E	; 30
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	8e 1b       	sub	r24, r30
    1824:	9f 0b       	sbc	r25, r31
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
    182a:	12 c0       	rjmp	.+36     	; 0x1850 <__floatunsisf+0xe0>
    182c:	30 97       	sbiw	r30, 0x00	; 0
    182e:	81 f0       	breq	.+32     	; 0x1850 <__floatunsisf+0xe0>
    1830:	0e 2e       	mov	r0, r30
    1832:	04 c0       	rjmp	.+8      	; 0x183c <__floatunsisf+0xcc>
    1834:	ee 0c       	add	r14, r14
    1836:	ff 1c       	adc	r15, r15
    1838:	00 1f       	adc	r16, r16
    183a:	11 1f       	adc	r17, r17
    183c:	0a 94       	dec	r0
    183e:	d2 f7       	brpl	.-12     	; 0x1834 <__floatunsisf+0xc4>
    1840:	ed 82       	std	Y+5, r14	; 0x05
    1842:	fe 82       	std	Y+6, r15	; 0x06
    1844:	0f 83       	std	Y+7, r16	; 0x07
    1846:	18 87       	std	Y+8, r17	; 0x08
    1848:	ce 1a       	sub	r12, r30
    184a:	df 0a       	sbc	r13, r31
    184c:	dc 82       	std	Y+4, r13	; 0x04
    184e:	cb 82       	std	Y+3, r12	; 0x03
    1850:	1a 82       	std	Y+2, r1	; 0x02
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pack_f>
    185a:	28 96       	adiw	r28, 0x08	; 8
    185c:	ea e0       	ldi	r30, 0x0A	; 10
    185e:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__epilogue_restores__+0x10>

00001862 <__clzsi2>:
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	7b 01       	movw	r14, r22
    186c:	8c 01       	movw	r16, r24
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	e8 16       	cp	r14, r24
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	f8 06       	cpc	r15, r24
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	08 07       	cpc	r16, r24
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	18 07       	cpc	r17, r24
    187e:	88 f4       	brcc	.+34     	; 0x18a2 <__clzsi2+0x40>
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	e8 16       	cp	r14, r24
    1884:	f1 04       	cpc	r15, r1
    1886:	01 05       	cpc	r16, r1
    1888:	11 05       	cpc	r17, r1
    188a:	31 f0       	breq	.+12     	; 0x1898 <__clzsi2+0x36>
    188c:	28 f0       	brcs	.+10     	; 0x1898 <__clzsi2+0x36>
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	17 c0       	rjmp	.+46     	; 0x18c6 <__clzsi2+0x64>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	12 c0       	rjmp	.+36     	; 0x18c6 <__clzsi2+0x64>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	e8 16       	cp	r14, r24
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	f8 06       	cpc	r15, r24
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	08 07       	cpc	r16, r24
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	18 07       	cpc	r17, r24
    18b2:	28 f0       	brcs	.+10     	; 0x18be <__clzsi2+0x5c>
    18b4:	88 e1       	ldi	r24, 0x18	; 24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__clzsi2+0x64>
    18be:	80 e1       	ldi	r24, 0x10	; 16
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a0 e0       	ldi	r26, 0x00	; 0
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	20 e2       	ldi	r18, 0x20	; 32
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	28 1b       	sub	r18, r24
    18d0:	39 0b       	sbc	r19, r25
    18d2:	4a 0b       	sbc	r20, r26
    18d4:	5b 0b       	sbc	r21, r27
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <__clzsi2+0x7e>
    18d8:	16 95       	lsr	r17
    18da:	07 95       	ror	r16
    18dc:	f7 94       	ror	r15
    18de:	e7 94       	ror	r14
    18e0:	8a 95       	dec	r24
    18e2:	d2 f7       	brpl	.-12     	; 0x18d8 <__clzsi2+0x76>
    18e4:	f7 01       	movw	r30, r14
    18e6:	eb 5c       	subi	r30, 0xCB	; 203
    18e8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ea:	80 81       	ld	r24, Z
    18ec:	28 1b       	sub	r18, r24
    18ee:	31 09       	sbc	r19, r1
    18f0:	41 09       	sbc	r20, r1
    18f2:	51 09       	sbc	r21, r1
    18f4:	c9 01       	movw	r24, r18
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	08 95       	ret

00001900 <__pack_f>:
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	fc 01       	movw	r30, r24
    190c:	e4 80       	ldd	r14, Z+4	; 0x04
    190e:	f5 80       	ldd	r15, Z+5	; 0x05
    1910:	06 81       	ldd	r16, Z+6	; 0x06
    1912:	17 81       	ldd	r17, Z+7	; 0x07
    1914:	d1 80       	ldd	r13, Z+1	; 0x01
    1916:	80 81       	ld	r24, Z
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	48 f4       	brcc	.+18     	; 0x192e <__pack_f+0x2e>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e1       	ldi	r26, 0x10	; 16
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 2a       	or	r14, r24
    1926:	f9 2a       	or	r15, r25
    1928:	0a 2b       	or	r16, r26
    192a:	1b 2b       	or	r17, r27
    192c:	a5 c0       	rjmp	.+330    	; 0x1a78 <__pack_f+0x178>
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	09 f4       	brne	.+2      	; 0x1934 <__pack_f+0x34>
    1932:	9f c0       	rjmp	.+318    	; 0x1a72 <__pack_f+0x172>
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	21 f4       	brne	.+8      	; 0x1940 <__pack_f+0x40>
    1938:	ee 24       	eor	r14, r14
    193a:	ff 24       	eor	r15, r15
    193c:	87 01       	movw	r16, r14
    193e:	05 c0       	rjmp	.+10     	; 0x194a <__pack_f+0x4a>
    1940:	e1 14       	cp	r14, r1
    1942:	f1 04       	cpc	r15, r1
    1944:	01 05       	cpc	r16, r1
    1946:	11 05       	cpc	r17, r1
    1948:	19 f4       	brne	.+6      	; 0x1950 <__pack_f+0x50>
    194a:	e0 e0       	ldi	r30, 0x00	; 0
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	96 c0       	rjmp	.+300    	; 0x1a7c <__pack_f+0x17c>
    1950:	62 81       	ldd	r22, Z+2	; 0x02
    1952:	73 81       	ldd	r23, Z+3	; 0x03
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	62 38       	cpi	r22, 0x82	; 130
    1958:	79 07       	cpc	r23, r25
    195a:	0c f0       	brlt	.+2      	; 0x195e <__pack_f+0x5e>
    195c:	5b c0       	rjmp	.+182    	; 0x1a14 <__pack_f+0x114>
    195e:	22 e8       	ldi	r18, 0x82	; 130
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	26 1b       	sub	r18, r22
    1964:	37 0b       	sbc	r19, r23
    1966:	2a 31       	cpi	r18, 0x1A	; 26
    1968:	31 05       	cpc	r19, r1
    196a:	2c f0       	brlt	.+10     	; 0x1976 <__pack_f+0x76>
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	2a c0       	rjmp	.+84     	; 0x19ca <__pack_f+0xca>
    1976:	b8 01       	movw	r22, r16
    1978:	a7 01       	movw	r20, r14
    197a:	02 2e       	mov	r0, r18
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <__pack_f+0x86>
    197e:	76 95       	lsr	r23
    1980:	67 95       	ror	r22
    1982:	57 95       	ror	r21
    1984:	47 95       	ror	r20
    1986:	0a 94       	dec	r0
    1988:	d2 f7       	brpl	.-12     	; 0x197e <__pack_f+0x7e>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <__pack_f+0x9c>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	aa 1f       	adc	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	2a 95       	dec	r18
    199e:	d2 f7       	brpl	.-12     	; 0x1994 <__pack_f+0x94>
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	a1 09       	sbc	r26, r1
    19a4:	b1 09       	sbc	r27, r1
    19a6:	8e 21       	and	r24, r14
    19a8:	9f 21       	and	r25, r15
    19aa:	a0 23       	and	r26, r16
    19ac:	b1 23       	and	r27, r17
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	a1 05       	cpc	r26, r1
    19b2:	b1 05       	cpc	r27, r1
    19b4:	21 f0       	breq	.+8      	; 0x19be <__pack_f+0xbe>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	9a 01       	movw	r18, r20
    19c0:	ab 01       	movw	r20, r22
    19c2:	28 2b       	or	r18, r24
    19c4:	39 2b       	or	r19, r25
    19c6:	4a 2b       	or	r20, r26
    19c8:	5b 2b       	or	r21, r27
    19ca:	da 01       	movw	r26, r20
    19cc:	c9 01       	movw	r24, r18
    19ce:	8f 77       	andi	r24, 0x7F	; 127
    19d0:	90 70       	andi	r25, 0x00	; 0
    19d2:	a0 70       	andi	r26, 0x00	; 0
    19d4:	b0 70       	andi	r27, 0x00	; 0
    19d6:	80 34       	cpi	r24, 0x40	; 64
    19d8:	91 05       	cpc	r25, r1
    19da:	a1 05       	cpc	r26, r1
    19dc:	b1 05       	cpc	r27, r1
    19de:	39 f4       	brne	.+14     	; 0x19ee <__pack_f+0xee>
    19e0:	27 ff       	sbrs	r18, 7
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <__pack_f+0xf6>
    19e4:	20 5c       	subi	r18, 0xC0	; 192
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	4f 4f       	sbci	r20, 0xFF	; 255
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__pack_f+0xf6>
    19ee:	21 5c       	subi	r18, 0xC1	; 193
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	4f 4f       	sbci	r20, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	e0 e0       	ldi	r30, 0x00	; 0
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	20 30       	cpi	r18, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	3a 07       	cpc	r19, r26
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	4a 07       	cpc	r20, r26
    1a04:	a0 e4       	ldi	r26, 0x40	; 64
    1a06:	5a 07       	cpc	r21, r26
    1a08:	10 f0       	brcs	.+4      	; 0x1a0e <__pack_f+0x10e>
    1a0a:	e1 e0       	ldi	r30, 0x01	; 1
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	79 01       	movw	r14, r18
    1a10:	8a 01       	movw	r16, r20
    1a12:	27 c0       	rjmp	.+78     	; 0x1a62 <__pack_f+0x162>
    1a14:	60 38       	cpi	r22, 0x80	; 128
    1a16:	71 05       	cpc	r23, r1
    1a18:	64 f5       	brge	.+88     	; 0x1a72 <__pack_f+0x172>
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	e1 58       	subi	r30, 0x81	; 129
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	d8 01       	movw	r26, r16
    1a22:	c7 01       	movw	r24, r14
    1a24:	8f 77       	andi	r24, 0x7F	; 127
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	a0 70       	andi	r26, 0x00	; 0
    1a2a:	b0 70       	andi	r27, 0x00	; 0
    1a2c:	80 34       	cpi	r24, 0x40	; 64
    1a2e:	91 05       	cpc	r25, r1
    1a30:	a1 05       	cpc	r26, r1
    1a32:	b1 05       	cpc	r27, r1
    1a34:	39 f4       	brne	.+14     	; 0x1a44 <__pack_f+0x144>
    1a36:	e7 fe       	sbrs	r14, 7
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <__pack_f+0x154>
    1a3a:	80 e4       	ldi	r24, 0x40	; 64
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <__pack_f+0x14c>
    1a44:	8f e3       	ldi	r24, 0x3F	; 63
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e0       	ldi	r26, 0x00	; 0
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e8 0e       	add	r14, r24
    1a4e:	f9 1e       	adc	r15, r25
    1a50:	0a 1f       	adc	r16, r26
    1a52:	1b 1f       	adc	r17, r27
    1a54:	17 ff       	sbrs	r17, 7
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <__pack_f+0x162>
    1a58:	16 95       	lsr	r17
    1a5a:	07 95       	ror	r16
    1a5c:	f7 94       	ror	r15
    1a5e:	e7 94       	ror	r14
    1a60:	31 96       	adiw	r30, 0x01	; 1
    1a62:	87 e0       	ldi	r24, 0x07	; 7
    1a64:	16 95       	lsr	r17
    1a66:	07 95       	ror	r16
    1a68:	f7 94       	ror	r15
    1a6a:	e7 94       	ror	r14
    1a6c:	8a 95       	dec	r24
    1a6e:	d1 f7       	brne	.-12     	; 0x1a64 <__pack_f+0x164>
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <__pack_f+0x17c>
    1a72:	ee 24       	eor	r14, r14
    1a74:	ff 24       	eor	r15, r15
    1a76:	87 01       	movw	r16, r14
    1a78:	ef ef       	ldi	r30, 0xFF	; 255
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	6e 2f       	mov	r22, r30
    1a7e:	67 95       	ror	r22
    1a80:	66 27       	eor	r22, r22
    1a82:	67 95       	ror	r22
    1a84:	90 2f       	mov	r25, r16
    1a86:	9f 77       	andi	r25, 0x7F	; 127
    1a88:	d7 94       	ror	r13
    1a8a:	dd 24       	eor	r13, r13
    1a8c:	d7 94       	ror	r13
    1a8e:	8e 2f       	mov	r24, r30
    1a90:	86 95       	lsr	r24
    1a92:	49 2f       	mov	r20, r25
    1a94:	46 2b       	or	r20, r22
    1a96:	58 2f       	mov	r21, r24
    1a98:	5d 29       	or	r21, r13
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	ca 01       	movw	r24, r20
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	08 95       	ret

00001aaa <__unpack_f>:
    1aaa:	fc 01       	movw	r30, r24
    1aac:	db 01       	movw	r26, r22
    1aae:	40 81       	ld	r20, Z
    1ab0:	51 81       	ldd	r21, Z+1	; 0x01
    1ab2:	22 81       	ldd	r18, Z+2	; 0x02
    1ab4:	62 2f       	mov	r22, r18
    1ab6:	6f 77       	andi	r22, 0x7F	; 127
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	22 1f       	adc	r18, r18
    1abc:	22 27       	eor	r18, r18
    1abe:	22 1f       	adc	r18, r18
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	88 0f       	add	r24, r24
    1ac6:	82 2b       	or	r24, r18
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	99 1f       	adc	r25, r25
    1ace:	99 27       	eor	r25, r25
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	21 15       	cp	r18, r1
    1ada:	31 05       	cpc	r19, r1
    1adc:	a9 f5       	brne	.+106    	; 0x1b48 <__unpack_f+0x9e>
    1ade:	41 15       	cp	r20, r1
    1ae0:	51 05       	cpc	r21, r1
    1ae2:	61 05       	cpc	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <__unpack_f+0x42>
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	37 c0       	rjmp	.+110    	; 0x1b5a <__unpack_f+0xb0>
    1aec:	82 e8       	ldi	r24, 0x82	; 130
    1aee:	9f ef       	ldi	r25, 0xFF	; 255
    1af0:	13 96       	adiw	r26, 0x03	; 3
    1af2:	9c 93       	st	X, r25
    1af4:	8e 93       	st	-X, r24
    1af6:	12 97       	sbiw	r26, 0x02	; 2
    1af8:	9a 01       	movw	r18, r20
    1afa:	ab 01       	movw	r20, r22
    1afc:	67 e0       	ldi	r22, 0x07	; 7
    1afe:	22 0f       	add	r18, r18
    1b00:	33 1f       	adc	r19, r19
    1b02:	44 1f       	adc	r20, r20
    1b04:	55 1f       	adc	r21, r21
    1b06:	6a 95       	dec	r22
    1b08:	d1 f7       	brne	.-12     	; 0x1afe <__unpack_f+0x54>
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	8c 93       	st	X, r24
    1b0e:	0d c0       	rjmp	.+26     	; 0x1b2a <__unpack_f+0x80>
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	44 1f       	adc	r20, r20
    1b16:	55 1f       	adc	r21, r21
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	8d 91       	ld	r24, X+
    1b1c:	9c 91       	ld	r25, X
    1b1e:	13 97       	sbiw	r26, 0x03	; 3
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	13 96       	adiw	r26, 0x03	; 3
    1b24:	9c 93       	st	X, r25
    1b26:	8e 93       	st	-X, r24
    1b28:	12 97       	sbiw	r26, 0x02	; 2
    1b2a:	20 30       	cpi	r18, 0x00	; 0
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	38 07       	cpc	r19, r24
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	48 07       	cpc	r20, r24
    1b34:	80 e4       	ldi	r24, 0x40	; 64
    1b36:	58 07       	cpc	r21, r24
    1b38:	58 f3       	brcs	.-42     	; 0x1b10 <__unpack_f+0x66>
    1b3a:	14 96       	adiw	r26, 0x04	; 4
    1b3c:	2d 93       	st	X+, r18
    1b3e:	3d 93       	st	X+, r19
    1b40:	4d 93       	st	X+, r20
    1b42:	5c 93       	st	X, r21
    1b44:	17 97       	sbiw	r26, 0x07	; 7
    1b46:	08 95       	ret
    1b48:	2f 3f       	cpi	r18, 0xFF	; 255
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	79 f4       	brne	.+30     	; 0x1b6c <__unpack_f+0xc2>
    1b4e:	41 15       	cp	r20, r1
    1b50:	51 05       	cpc	r21, r1
    1b52:	61 05       	cpc	r22, r1
    1b54:	71 05       	cpc	r23, r1
    1b56:	19 f4       	brne	.+6      	; 0x1b5e <__unpack_f+0xb4>
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	8c 93       	st	X, r24
    1b5c:	08 95       	ret
    1b5e:	64 ff       	sbrs	r22, 4
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <__unpack_f+0xbe>
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8c 93       	st	X, r24
    1b66:	12 c0       	rjmp	.+36     	; 0x1b8c <__unpack_f+0xe2>
    1b68:	1c 92       	st	X, r1
    1b6a:	10 c0       	rjmp	.+32     	; 0x1b8c <__unpack_f+0xe2>
    1b6c:	2f 57       	subi	r18, 0x7F	; 127
    1b6e:	30 40       	sbci	r19, 0x00	; 0
    1b70:	13 96       	adiw	r26, 0x03	; 3
    1b72:	3c 93       	st	X, r19
    1b74:	2e 93       	st	-X, r18
    1b76:	12 97       	sbiw	r26, 0x02	; 2
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	8c 93       	st	X, r24
    1b7c:	87 e0       	ldi	r24, 0x07	; 7
    1b7e:	44 0f       	add	r20, r20
    1b80:	55 1f       	adc	r21, r21
    1b82:	66 1f       	adc	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	8a 95       	dec	r24
    1b88:	d1 f7       	brne	.-12     	; 0x1b7e <__unpack_f+0xd4>
    1b8a:	70 64       	ori	r23, 0x40	; 64
    1b8c:	14 96       	adiw	r26, 0x04	; 4
    1b8e:	4d 93       	st	X+, r20
    1b90:	5d 93       	st	X+, r21
    1b92:	6d 93       	st	X+, r22
    1b94:	7c 93       	st	X, r23
    1b96:	17 97       	sbiw	r26, 0x07	; 7
    1b98:	08 95       	ret

00001b9a <__fpcmp_parts_f>:
    1b9a:	1f 93       	push	r17
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	fb 01       	movw	r30, r22
    1ba0:	9c 91       	ld	r25, X
    1ba2:	92 30       	cpi	r25, 0x02	; 2
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <__fpcmp_parts_f+0xe>
    1ba6:	47 c0       	rjmp	.+142    	; 0x1c36 <__fpcmp_parts_f+0x9c>
    1ba8:	80 81       	ld	r24, Z
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	08 f4       	brcc	.+2      	; 0x1bb0 <__fpcmp_parts_f+0x16>
    1bae:	43 c0       	rjmp	.+134    	; 0x1c36 <__fpcmp_parts_f+0x9c>
    1bb0:	94 30       	cpi	r25, 0x04	; 4
    1bb2:	51 f4       	brne	.+20     	; 0x1bc8 <__fpcmp_parts_f+0x2e>
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	1c 91       	ld	r17, X
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	99 f5       	brne	.+102    	; 0x1c22 <__fpcmp_parts_f+0x88>
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	68 2f       	mov	r22, r24
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	61 1b       	sub	r22, r17
    1bc4:	71 09       	sbc	r23, r1
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <__fpcmp_parts_f+0xac>
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	21 f0       	breq	.+8      	; 0x1bd4 <__fpcmp_parts_f+0x3a>
    1bcc:	92 30       	cpi	r25, 0x02	; 2
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <__fpcmp_parts_f+0x42>
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	b9 f1       	breq	.+110    	; 0x1c42 <__fpcmp_parts_f+0xa8>
    1bd4:	81 81       	ldd	r24, Z+1	; 0x01
    1bd6:	88 23       	and	r24, r24
    1bd8:	89 f1       	breq	.+98     	; 0x1c3c <__fpcmp_parts_f+0xa2>
    1bda:	2d c0       	rjmp	.+90     	; 0x1c36 <__fpcmp_parts_f+0x9c>
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	1c 91       	ld	r17, X
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	f1 f0       	breq	.+60     	; 0x1c22 <__fpcmp_parts_f+0x88>
    1be6:	81 81       	ldd	r24, Z+1	; 0x01
    1be8:	18 17       	cp	r17, r24
    1bea:	d9 f4       	brne	.+54     	; 0x1c22 <__fpcmp_parts_f+0x88>
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	2d 91       	ld	r18, X+
    1bf0:	3c 91       	ld	r19, X
    1bf2:	13 97       	sbiw	r26, 0x03	; 3
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	82 17       	cp	r24, r18
    1bfa:	93 07       	cpc	r25, r19
    1bfc:	94 f0       	brlt	.+36     	; 0x1c22 <__fpcmp_parts_f+0x88>
    1bfe:	28 17       	cp	r18, r24
    1c00:	39 07       	cpc	r19, r25
    1c02:	bc f0       	brlt	.+46     	; 0x1c32 <__fpcmp_parts_f+0x98>
    1c04:	14 96       	adiw	r26, 0x04	; 4
    1c06:	8d 91       	ld	r24, X+
    1c08:	9d 91       	ld	r25, X+
    1c0a:	0d 90       	ld	r0, X+
    1c0c:	bc 91       	ld	r27, X
    1c0e:	a0 2d       	mov	r26, r0
    1c10:	24 81       	ldd	r18, Z+4	; 0x04
    1c12:	35 81       	ldd	r19, Z+5	; 0x05
    1c14:	46 81       	ldd	r20, Z+6	; 0x06
    1c16:	57 81       	ldd	r21, Z+7	; 0x07
    1c18:	28 17       	cp	r18, r24
    1c1a:	39 07       	cpc	r19, r25
    1c1c:	4a 07       	cpc	r20, r26
    1c1e:	5b 07       	cpc	r21, r27
    1c20:	18 f4       	brcc	.+6      	; 0x1c28 <__fpcmp_parts_f+0x8e>
    1c22:	11 23       	and	r17, r17
    1c24:	41 f0       	breq	.+16     	; 0x1c36 <__fpcmp_parts_f+0x9c>
    1c26:	0a c0       	rjmp	.+20     	; 0x1c3c <__fpcmp_parts_f+0xa2>
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	a4 07       	cpc	r26, r20
    1c2e:	b5 07       	cpc	r27, r21
    1c30:	40 f4       	brcc	.+16     	; 0x1c42 <__fpcmp_parts_f+0xa8>
    1c32:	11 23       	and	r17, r17
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <__fpcmp_parts_f+0xa2>
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <__fpcmp_parts_f+0xac>
    1c3c:	6f ef       	ldi	r22, 0xFF	; 255
    1c3e:	7f ef       	ldi	r23, 0xFF	; 255
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <__fpcmp_parts_f+0xac>
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	cb 01       	movw	r24, r22
    1c48:	1f 91       	pop	r17
    1c4a:	08 95       	ret

00001c4c <__udivmodhi4>:
    1c4c:	aa 1b       	sub	r26, r26
    1c4e:	bb 1b       	sub	r27, r27
    1c50:	51 e1       	ldi	r21, 0x11	; 17
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <__udivmodhi4_ep>

00001c54 <__udivmodhi4_loop>:
    1c54:	aa 1f       	adc	r26, r26
    1c56:	bb 1f       	adc	r27, r27
    1c58:	a6 17       	cp	r26, r22
    1c5a:	b7 07       	cpc	r27, r23
    1c5c:	10 f0       	brcs	.+4      	; 0x1c62 <__udivmodhi4_ep>
    1c5e:	a6 1b       	sub	r26, r22
    1c60:	b7 0b       	sbc	r27, r23

00001c62 <__udivmodhi4_ep>:
    1c62:	88 1f       	adc	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	5a 95       	dec	r21
    1c68:	a9 f7       	brne	.-22     	; 0x1c54 <__udivmodhi4_loop>
    1c6a:	80 95       	com	r24
    1c6c:	90 95       	com	r25
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	08 95       	ret

00001c74 <__divmodhi4>:
    1c74:	97 fb       	bst	r25, 7
    1c76:	09 2e       	mov	r0, r25
    1c78:	07 26       	eor	r0, r23
    1c7a:	0a d0       	rcall	.+20     	; 0x1c90 <__divmodhi4_neg1>
    1c7c:	77 fd       	sbrc	r23, 7
    1c7e:	04 d0       	rcall	.+8      	; 0x1c88 <__divmodhi4_neg2>
    1c80:	e5 df       	rcall	.-54     	; 0x1c4c <__udivmodhi4>
    1c82:	06 d0       	rcall	.+12     	; 0x1c90 <__divmodhi4_neg1>
    1c84:	00 20       	and	r0, r0
    1c86:	1a f4       	brpl	.+6      	; 0x1c8e <__divmodhi4_exit>

00001c88 <__divmodhi4_neg2>:
    1c88:	70 95       	com	r23
    1c8a:	61 95       	neg	r22
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c8e <__divmodhi4_exit>:
    1c8e:	08 95       	ret

00001c90 <__divmodhi4_neg1>:
    1c90:	f6 f7       	brtc	.-4      	; 0x1c8e <__divmodhi4_exit>
    1c92:	90 95       	com	r25
    1c94:	81 95       	neg	r24
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	08 95       	ret

00001c9a <__prologue_saves__>:
    1c9a:	2f 92       	push	r2
    1c9c:	3f 92       	push	r3
    1c9e:	4f 92       	push	r4
    1ca0:	5f 92       	push	r5
    1ca2:	6f 92       	push	r6
    1ca4:	7f 92       	push	r7
    1ca6:	8f 92       	push	r8
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	ca 1b       	sub	r28, r26
    1cc4:	db 0b       	sbc	r29, r27
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	09 94       	ijmp

00001cd2 <__epilogue_restores__>:
    1cd2:	2a 88       	ldd	r2, Y+18	; 0x12
    1cd4:	39 88       	ldd	r3, Y+17	; 0x11
    1cd6:	48 88       	ldd	r4, Y+16	; 0x10
    1cd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cda:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cde:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ce0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ce4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ce6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ce8:	df 80       	ldd	r13, Y+7	; 0x07
    1cea:	ee 80       	ldd	r14, Y+6	; 0x06
    1cec:	fd 80       	ldd	r15, Y+5	; 0x05
    1cee:	0c 81       	ldd	r16, Y+4	; 0x04
    1cf0:	1b 81       	ldd	r17, Y+3	; 0x03
    1cf2:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf4:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf6:	ce 0f       	add	r28, r30
    1cf8:	d1 1d       	adc	r29, r1
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	ed 01       	movw	r28, r26
    1d06:	08 95       	ret

00001d08 <fputs>:
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	7c 01       	movw	r14, r24
    1d16:	8b 01       	movw	r16, r22
    1d18:	db 01       	movw	r26, r22
    1d1a:	13 96       	adiw	r26, 0x03	; 3
    1d1c:	8c 91       	ld	r24, X
    1d1e:	81 fd       	sbrc	r24, 1
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <fputs+0x20>
    1d22:	cf ef       	ldi	r28, 0xFF	; 255
    1d24:	df ef       	ldi	r29, 0xFF	; 255
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <fputs+0x46>
    1d28:	c0 e0       	ldi	r28, 0x00	; 0
    1d2a:	d0 e0       	ldi	r29, 0x00	; 0
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <fputs+0x3c>
    1d2e:	d8 01       	movw	r26, r16
    1d30:	18 96       	adiw	r26, 0x08	; 8
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	19 97       	sbiw	r26, 0x09	; 9
    1d38:	b8 01       	movw	r22, r16
    1d3a:	09 95       	icall
    1d3c:	89 2b       	or	r24, r25
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <fputs+0x3c>
    1d40:	cf ef       	ldi	r28, 0xFF	; 255
    1d42:	df ef       	ldi	r29, 0xFF	; 255
    1d44:	f7 01       	movw	r30, r14
    1d46:	81 91       	ld	r24, Z+
    1d48:	7f 01       	movw	r14, r30
    1d4a:	88 23       	and	r24, r24
    1d4c:	81 f7       	brne	.-32     	; 0x1d2e <fputs+0x26>
    1d4e:	ce 01       	movw	r24, r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	e6 e0       	ldi	r30, 0x06	; 6
    1d56:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__epilogue_restores__+0x18>

00001d5a <sprintf>:
    1d5a:	ae e0       	ldi	r26, 0x0E	; 14
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e3 eb       	ldi	r30, 0xB3	; 179
    1d60:	fe e0       	ldi	r31, 0x0E	; 14
    1d62:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__prologue_saves__+0x1c>
    1d66:	0d 89       	ldd	r16, Y+21	; 0x15
    1d68:	1e 89       	ldd	r17, Y+22	; 0x16
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	8c 83       	std	Y+4, r24	; 0x04
    1d6e:	1a 83       	std	Y+2, r17	; 0x02
    1d70:	09 83       	std	Y+1, r16	; 0x01
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	9f e7       	ldi	r25, 0x7F	; 127
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	9e 01       	movw	r18, r28
    1d7c:	27 5e       	subi	r18, 0xE7	; 231
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	ce 01       	movw	r24, r28
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	6f 89       	ldd	r22, Y+23	; 0x17
    1d86:	78 8d       	ldd	r23, Y+24	; 0x18
    1d88:	a9 01       	movw	r20, r18
    1d8a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vfprintf>
    1d8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d90:	38 85       	ldd	r19, Y+8	; 0x08
    1d92:	02 0f       	add	r16, r18
    1d94:	13 1f       	adc	r17, r19
    1d96:	f8 01       	movw	r30, r16
    1d98:	10 82       	st	Z, r1
    1d9a:	2e 96       	adiw	r28, 0x0e	; 14
    1d9c:	e4 e0       	ldi	r30, 0x04	; 4
    1d9e:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__epilogue_restores__+0x1c>

00001da2 <sin>:
    1da2:	9f 93       	push	r25
    1da4:	82 d2       	rcall	.+1284   	; 0x22aa <__fp_rempio2>
    1da6:	0f 90       	pop	r0
    1da8:	07 fc       	sbrc	r0, 7
    1daa:	ee 5f       	subi	r30, 0xFE	; 254
    1dac:	a5 c2       	rjmp	.+1354   	; 0x22f8 <__fp_sinus>

00001dae <vfprintf>:
    1dae:	ab e0       	ldi	r26, 0x0B	; 11
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__prologue_saves__>
    1dba:	3c 01       	movw	r6, r24
    1dbc:	2b 01       	movw	r4, r22
    1dbe:	5a 01       	movw	r10, r20
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	17 82       	std	Z+7, r1	; 0x07
    1dc4:	16 82       	std	Z+6, r1	; 0x06
    1dc6:	83 81       	ldd	r24, Z+3	; 0x03
    1dc8:	81 fd       	sbrc	r24, 1
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <vfprintf+0x24>
    1dcc:	6f ef       	ldi	r22, 0xFF	; 255
    1dce:	7f ef       	ldi	r23, 0xFF	; 255
    1dd0:	c6 c1       	rjmp	.+908    	; 0x215e <vfprintf+0x3b0>
    1dd2:	9a e0       	ldi	r25, 0x0A	; 10
    1dd4:	89 2e       	mov	r8, r25
    1dd6:	1e 01       	movw	r2, r28
    1dd8:	08 94       	sec
    1dda:	21 1c       	adc	r2, r1
    1ddc:	31 1c       	adc	r3, r1
    1dde:	f3 01       	movw	r30, r6
    1de0:	23 81       	ldd	r18, Z+3	; 0x03
    1de2:	f2 01       	movw	r30, r4
    1de4:	23 fd       	sbrc	r18, 3
    1de6:	85 91       	lpm	r24, Z+
    1de8:	23 ff       	sbrs	r18, 3
    1dea:	81 91       	ld	r24, Z+
    1dec:	2f 01       	movw	r4, r30
    1dee:	88 23       	and	r24, r24
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <vfprintf+0x46>
    1df2:	b2 c1       	rjmp	.+868    	; 0x2158 <vfprintf+0x3aa>
    1df4:	85 32       	cpi	r24, 0x25	; 37
    1df6:	39 f4       	brne	.+14     	; 0x1e06 <vfprintf+0x58>
    1df8:	23 fd       	sbrc	r18, 3
    1dfa:	85 91       	lpm	r24, Z+
    1dfc:	23 ff       	sbrs	r18, 3
    1dfe:	81 91       	ld	r24, Z+
    1e00:	2f 01       	movw	r4, r30
    1e02:	85 32       	cpi	r24, 0x25	; 37
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <vfprintf+0x62>
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	b3 01       	movw	r22, r6
    1e0a:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1e0e:	e7 cf       	rjmp	.-50     	; 0x1dde <vfprintf+0x30>
    1e10:	98 2f       	mov	r25, r24
    1e12:	ff 24       	eor	r15, r15
    1e14:	ee 24       	eor	r14, r14
    1e16:	99 24       	eor	r9, r9
    1e18:	ff e1       	ldi	r31, 0x1F	; 31
    1e1a:	ff 15       	cp	r31, r15
    1e1c:	d0 f0       	brcs	.+52     	; 0x1e52 <vfprintf+0xa4>
    1e1e:	9b 32       	cpi	r25, 0x2B	; 43
    1e20:	69 f0       	breq	.+26     	; 0x1e3c <vfprintf+0x8e>
    1e22:	9c 32       	cpi	r25, 0x2C	; 44
    1e24:	28 f4       	brcc	.+10     	; 0x1e30 <vfprintf+0x82>
    1e26:	90 32       	cpi	r25, 0x20	; 32
    1e28:	59 f0       	breq	.+22     	; 0x1e40 <vfprintf+0x92>
    1e2a:	93 32       	cpi	r25, 0x23	; 35
    1e2c:	91 f4       	brne	.+36     	; 0x1e52 <vfprintf+0xa4>
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <vfprintf+0x9e>
    1e30:	9d 32       	cpi	r25, 0x2D	; 45
    1e32:	49 f0       	breq	.+18     	; 0x1e46 <vfprintf+0x98>
    1e34:	90 33       	cpi	r25, 0x30	; 48
    1e36:	69 f4       	brne	.+26     	; 0x1e52 <vfprintf+0xa4>
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	24 c0       	rjmp	.+72     	; 0x1e84 <vfprintf+0xd6>
    1e3c:	52 e0       	ldi	r21, 0x02	; 2
    1e3e:	f5 2a       	or	r15, r21
    1e40:	84 e0       	ldi	r24, 0x04	; 4
    1e42:	f8 2a       	or	r15, r24
    1e44:	28 c0       	rjmp	.+80     	; 0x1e96 <vfprintf+0xe8>
    1e46:	98 e0       	ldi	r25, 0x08	; 8
    1e48:	f9 2a       	or	r15, r25
    1e4a:	25 c0       	rjmp	.+74     	; 0x1e96 <vfprintf+0xe8>
    1e4c:	e0 e1       	ldi	r30, 0x10	; 16
    1e4e:	fe 2a       	or	r15, r30
    1e50:	22 c0       	rjmp	.+68     	; 0x1e96 <vfprintf+0xe8>
    1e52:	f7 fc       	sbrc	r15, 7
    1e54:	29 c0       	rjmp	.+82     	; 0x1ea8 <vfprintf+0xfa>
    1e56:	89 2f       	mov	r24, r25
    1e58:	80 53       	subi	r24, 0x30	; 48
    1e5a:	8a 30       	cpi	r24, 0x0A	; 10
    1e5c:	70 f4       	brcc	.+28     	; 0x1e7a <vfprintf+0xcc>
    1e5e:	f6 fe       	sbrs	r15, 6
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <vfprintf+0xbe>
    1e62:	98 9c       	mul	r9, r8
    1e64:	90 2c       	mov	r9, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	98 0e       	add	r9, r24
    1e6a:	15 c0       	rjmp	.+42     	; 0x1e96 <vfprintf+0xe8>
    1e6c:	e8 9c       	mul	r14, r8
    1e6e:	e0 2c       	mov	r14, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	e8 0e       	add	r14, r24
    1e74:	f0 e2       	ldi	r31, 0x20	; 32
    1e76:	ff 2a       	or	r15, r31
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <vfprintf+0xe8>
    1e7a:	9e 32       	cpi	r25, 0x2E	; 46
    1e7c:	29 f4       	brne	.+10     	; 0x1e88 <vfprintf+0xda>
    1e7e:	f6 fc       	sbrc	r15, 6
    1e80:	6b c1       	rjmp	.+726    	; 0x2158 <vfprintf+0x3aa>
    1e82:	40 e4       	ldi	r20, 0x40	; 64
    1e84:	f4 2a       	or	r15, r20
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <vfprintf+0xe8>
    1e88:	9c 36       	cpi	r25, 0x6C	; 108
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <vfprintf+0xe4>
    1e8c:	50 e8       	ldi	r21, 0x80	; 128
    1e8e:	f5 2a       	or	r15, r21
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0xe8>
    1e92:	98 36       	cpi	r25, 0x68	; 104
    1e94:	49 f4       	brne	.+18     	; 0x1ea8 <vfprintf+0xfa>
    1e96:	f2 01       	movw	r30, r4
    1e98:	23 fd       	sbrc	r18, 3
    1e9a:	95 91       	lpm	r25, Z+
    1e9c:	23 ff       	sbrs	r18, 3
    1e9e:	91 91       	ld	r25, Z+
    1ea0:	2f 01       	movw	r4, r30
    1ea2:	99 23       	and	r25, r25
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <vfprintf+0xfa>
    1ea6:	b8 cf       	rjmp	.-144    	; 0x1e18 <vfprintf+0x6a>
    1ea8:	89 2f       	mov	r24, r25
    1eaa:	85 54       	subi	r24, 0x45	; 69
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	18 f0       	brcs	.+6      	; 0x1eb6 <vfprintf+0x108>
    1eb0:	80 52       	subi	r24, 0x20	; 32
    1eb2:	83 30       	cpi	r24, 0x03	; 3
    1eb4:	38 f4       	brcc	.+14     	; 0x1ec4 <vfprintf+0x116>
    1eb6:	44 e0       	ldi	r20, 0x04	; 4
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	a4 0e       	add	r10, r20
    1ebc:	b5 1e       	adc	r11, r21
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	59 83       	std	Y+1, r21	; 0x01
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <vfprintf+0x134>
    1ec4:	93 36       	cpi	r25, 0x63	; 99
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <vfprintf+0x126>
    1ec8:	93 37       	cpi	r25, 0x73	; 115
    1eca:	79 f0       	breq	.+30     	; 0x1eea <vfprintf+0x13c>
    1ecc:	93 35       	cpi	r25, 0x53	; 83
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <vfprintf+0x124>
    1ed0:	56 c0       	rjmp	.+172    	; 0x1f7e <vfprintf+0x1d0>
    1ed2:	20 c0       	rjmp	.+64     	; 0x1f14 <vfprintf+0x166>
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	80 81       	ld	r24, Z
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	42 e0       	ldi	r20, 0x02	; 2
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	a4 0e       	add	r10, r20
    1ee0:	b5 1e       	adc	r11, r21
    1ee2:	61 01       	movw	r12, r2
    1ee4:	01 e0       	ldi	r16, 0x01	; 1
    1ee6:	10 e0       	ldi	r17, 0x00	; 0
    1ee8:	12 c0       	rjmp	.+36     	; 0x1f0e <vfprintf+0x160>
    1eea:	f5 01       	movw	r30, r10
    1eec:	c0 80       	ld	r12, Z
    1eee:	d1 80       	ldd	r13, Z+1	; 0x01
    1ef0:	f6 fc       	sbrc	r15, 6
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x14c>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <vfprintf+0x150>
    1efa:	69 2d       	mov	r22, r9
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	a4 0e       	add	r10, r20
    1f04:	b5 1e       	adc	r11, r21
    1f06:	c6 01       	movw	r24, r12
    1f08:	0e 94 bf 10 	call	0x217e	; 0x217e <strnlen>
    1f0c:	8c 01       	movw	r16, r24
    1f0e:	5f e7       	ldi	r21, 0x7F	; 127
    1f10:	f5 22       	and	r15, r21
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <vfprintf+0x18e>
    1f14:	f5 01       	movw	r30, r10
    1f16:	c0 80       	ld	r12, Z
    1f18:	d1 80       	ldd	r13, Z+1	; 0x01
    1f1a:	f6 fc       	sbrc	r15, 6
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <vfprintf+0x176>
    1f1e:	6f ef       	ldi	r22, 0xFF	; 255
    1f20:	7f ef       	ldi	r23, 0xFF	; 255
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x17a>
    1f24:	69 2d       	mov	r22, r9
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	42 e0       	ldi	r20, 0x02	; 2
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	a4 0e       	add	r10, r20
    1f2e:	b5 1e       	adc	r11, r21
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 b4 10 	call	0x2168	; 0x2168 <strnlen_P>
    1f36:	8c 01       	movw	r16, r24
    1f38:	50 e8       	ldi	r21, 0x80	; 128
    1f3a:	f5 2a       	or	r15, r21
    1f3c:	f3 fe       	sbrs	r15, 3
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <vfprintf+0x1a0>
    1f40:	1a c0       	rjmp	.+52     	; 0x1f76 <vfprintf+0x1c8>
    1f42:	80 e2       	ldi	r24, 0x20	; 32
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	b3 01       	movw	r22, r6
    1f48:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f4c:	ea 94       	dec	r14
    1f4e:	8e 2d       	mov	r24, r14
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	08 17       	cp	r16, r24
    1f54:	19 07       	cpc	r17, r25
    1f56:	a8 f3       	brcs	.-22     	; 0x1f42 <vfprintf+0x194>
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <vfprintf+0x1c8>
    1f5a:	f6 01       	movw	r30, r12
    1f5c:	f7 fc       	sbrc	r15, 7
    1f5e:	85 91       	lpm	r24, Z+
    1f60:	f7 fe       	sbrs	r15, 7
    1f62:	81 91       	ld	r24, Z+
    1f64:	6f 01       	movw	r12, r30
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	b3 01       	movw	r22, r6
    1f6a:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f6e:	e1 10       	cpse	r14, r1
    1f70:	ea 94       	dec	r14
    1f72:	01 50       	subi	r16, 0x01	; 1
    1f74:	10 40       	sbci	r17, 0x00	; 0
    1f76:	01 15       	cp	r16, r1
    1f78:	11 05       	cpc	r17, r1
    1f7a:	79 f7       	brne	.-34     	; 0x1f5a <vfprintf+0x1ac>
    1f7c:	ea c0       	rjmp	.+468    	; 0x2152 <vfprintf+0x3a4>
    1f7e:	94 36       	cpi	r25, 0x64	; 100
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <vfprintf+0x1d8>
    1f82:	99 36       	cpi	r25, 0x69	; 105
    1f84:	69 f5       	brne	.+90     	; 0x1fe0 <vfprintf+0x232>
    1f86:	f7 fe       	sbrs	r15, 7
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <vfprintf+0x1ec>
    1f8a:	f5 01       	movw	r30, r10
    1f8c:	20 81       	ld	r18, Z
    1f8e:	31 81       	ldd	r19, Z+1	; 0x01
    1f90:	42 81       	ldd	r20, Z+2	; 0x02
    1f92:	53 81       	ldd	r21, Z+3	; 0x03
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0a c0       	rjmp	.+20     	; 0x1fae <vfprintf+0x200>
    1f9a:	f5 01       	movw	r30, r10
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	44 27       	eor	r20, r20
    1fa4:	37 fd       	sbrc	r19, 7
    1fa6:	40 95       	com	r20
    1fa8:	54 2f       	mov	r21, r20
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a8 0e       	add	r10, r24
    1fb0:	b9 1e       	adc	r11, r25
    1fb2:	9f e6       	ldi	r25, 0x6F	; 111
    1fb4:	f9 22       	and	r15, r25
    1fb6:	57 ff       	sbrs	r21, 7
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <vfprintf+0x21e>
    1fba:	50 95       	com	r21
    1fbc:	40 95       	com	r20
    1fbe:	30 95       	com	r19
    1fc0:	21 95       	neg	r18
    1fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc8:	e0 e8       	ldi	r30, 0x80	; 128
    1fca:	fe 2a       	or	r15, r30
    1fcc:	ca 01       	movw	r24, r20
    1fce:	b9 01       	movw	r22, r18
    1fd0:	a1 01       	movw	r20, r2
    1fd2:	2a e0       	ldi	r18, 0x0A	; 10
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__ultoa_invert>
    1fda:	d8 2e       	mov	r13, r24
    1fdc:	d2 18       	sub	r13, r2
    1fde:	40 c0       	rjmp	.+128    	; 0x2060 <vfprintf+0x2b2>
    1fe0:	95 37       	cpi	r25, 0x75	; 117
    1fe2:	29 f4       	brne	.+10     	; 0x1fee <vfprintf+0x240>
    1fe4:	1f 2d       	mov	r17, r15
    1fe6:	1f 7e       	andi	r17, 0xEF	; 239
    1fe8:	2a e0       	ldi	r18, 0x0A	; 10
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	1d c0       	rjmp	.+58     	; 0x2028 <vfprintf+0x27a>
    1fee:	1f 2d       	mov	r17, r15
    1ff0:	19 7f       	andi	r17, 0xF9	; 249
    1ff2:	9f 36       	cpi	r25, 0x6F	; 111
    1ff4:	61 f0       	breq	.+24     	; 0x200e <vfprintf+0x260>
    1ff6:	90 37       	cpi	r25, 0x70	; 112
    1ff8:	20 f4       	brcc	.+8      	; 0x2002 <vfprintf+0x254>
    1ffa:	98 35       	cpi	r25, 0x58	; 88
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <vfprintf+0x252>
    1ffe:	ac c0       	rjmp	.+344    	; 0x2158 <vfprintf+0x3aa>
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <vfprintf+0x272>
    2002:	90 37       	cpi	r25, 0x70	; 112
    2004:	39 f0       	breq	.+14     	; 0x2014 <vfprintf+0x266>
    2006:	98 37       	cpi	r25, 0x78	; 120
    2008:	09 f0       	breq	.+2      	; 0x200c <vfprintf+0x25e>
    200a:	a6 c0       	rjmp	.+332    	; 0x2158 <vfprintf+0x3aa>
    200c:	04 c0       	rjmp	.+8      	; 0x2016 <vfprintf+0x268>
    200e:	28 e0       	ldi	r18, 0x08	; 8
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	0a c0       	rjmp	.+20     	; 0x2028 <vfprintf+0x27a>
    2014:	10 61       	ori	r17, 0x10	; 16
    2016:	14 fd       	sbrc	r17, 4
    2018:	14 60       	ori	r17, 0x04	; 4
    201a:	20 e1       	ldi	r18, 0x10	; 16
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <vfprintf+0x27a>
    2020:	14 fd       	sbrc	r17, 4
    2022:	16 60       	ori	r17, 0x06	; 6
    2024:	20 e1       	ldi	r18, 0x10	; 16
    2026:	32 e0       	ldi	r19, 0x02	; 2
    2028:	17 ff       	sbrs	r17, 7
    202a:	08 c0       	rjmp	.+16     	; 0x203c <vfprintf+0x28e>
    202c:	f5 01       	movw	r30, r10
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	44 e0       	ldi	r20, 0x04	; 4
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	08 c0       	rjmp	.+16     	; 0x204c <vfprintf+0x29e>
    203c:	f5 01       	movw	r30, r10
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	bc 01       	movw	r22, r24
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	42 e0       	ldi	r20, 0x02	; 2
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	a4 0e       	add	r10, r20
    204e:	b5 1e       	adc	r11, r21
    2050:	a1 01       	movw	r20, r2
    2052:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__ultoa_invert>
    2056:	d8 2e       	mov	r13, r24
    2058:	d2 18       	sub	r13, r2
    205a:	8f e7       	ldi	r24, 0x7F	; 127
    205c:	f8 2e       	mov	r15, r24
    205e:	f1 22       	and	r15, r17
    2060:	f6 fe       	sbrs	r15, 6
    2062:	0b c0       	rjmp	.+22     	; 0x207a <vfprintf+0x2cc>
    2064:	5e ef       	ldi	r21, 0xFE	; 254
    2066:	f5 22       	and	r15, r21
    2068:	d9 14       	cp	r13, r9
    206a:	38 f4       	brcc	.+14     	; 0x207a <vfprintf+0x2cc>
    206c:	f4 fe       	sbrs	r15, 4
    206e:	07 c0       	rjmp	.+14     	; 0x207e <vfprintf+0x2d0>
    2070:	f2 fc       	sbrc	r15, 2
    2072:	05 c0       	rjmp	.+10     	; 0x207e <vfprintf+0x2d0>
    2074:	8f ee       	ldi	r24, 0xEF	; 239
    2076:	f8 22       	and	r15, r24
    2078:	02 c0       	rjmp	.+4      	; 0x207e <vfprintf+0x2d0>
    207a:	1d 2d       	mov	r17, r13
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <vfprintf+0x2d2>
    207e:	19 2d       	mov	r17, r9
    2080:	f4 fe       	sbrs	r15, 4
    2082:	0d c0       	rjmp	.+26     	; 0x209e <vfprintf+0x2f0>
    2084:	fe 01       	movw	r30, r28
    2086:	ed 0d       	add	r30, r13
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	80 33       	cpi	r24, 0x30	; 48
    208e:	19 f4       	brne	.+6      	; 0x2096 <vfprintf+0x2e8>
    2090:	99 ee       	ldi	r25, 0xE9	; 233
    2092:	f9 22       	and	r15, r25
    2094:	08 c0       	rjmp	.+16     	; 0x20a6 <vfprintf+0x2f8>
    2096:	1f 5f       	subi	r17, 0xFF	; 255
    2098:	f2 fe       	sbrs	r15, 2
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <vfprintf+0x2f8>
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <vfprintf+0x2f6>
    209e:	8f 2d       	mov	r24, r15
    20a0:	86 78       	andi	r24, 0x86	; 134
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <vfprintf+0x2f8>
    20a4:	1f 5f       	subi	r17, 0xFF	; 255
    20a6:	0f 2d       	mov	r16, r15
    20a8:	f3 fc       	sbrc	r15, 3
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <vfprintf+0x326>
    20ac:	f0 fe       	sbrs	r15, 0
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <vfprintf+0x320>
    20b0:	1e 15       	cp	r17, r14
    20b2:	10 f0       	brcs	.+4      	; 0x20b8 <vfprintf+0x30a>
    20b4:	9d 2c       	mov	r9, r13
    20b6:	0b c0       	rjmp	.+22     	; 0x20ce <vfprintf+0x320>
    20b8:	9d 2c       	mov	r9, r13
    20ba:	9e 0c       	add	r9, r14
    20bc:	91 1a       	sub	r9, r17
    20be:	1e 2d       	mov	r17, r14
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <vfprintf+0x320>
    20c2:	80 e2       	ldi	r24, 0x20	; 32
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	b3 01       	movw	r22, r6
    20c8:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20cc:	1f 5f       	subi	r17, 0xFF	; 255
    20ce:	1e 15       	cp	r17, r14
    20d0:	c0 f3       	brcs	.-16     	; 0x20c2 <vfprintf+0x314>
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <vfprintf+0x32e>
    20d4:	1e 15       	cp	r17, r14
    20d6:	10 f4       	brcc	.+4      	; 0x20dc <vfprintf+0x32e>
    20d8:	e1 1a       	sub	r14, r17
    20da:	01 c0       	rjmp	.+2      	; 0x20de <vfprintf+0x330>
    20dc:	ee 24       	eor	r14, r14
    20de:	04 ff       	sbrs	r16, 4
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <vfprintf+0x352>
    20e2:	80 e3       	ldi	r24, 0x30	; 48
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	b3 01       	movw	r22, r6
    20e8:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20ec:	02 ff       	sbrs	r16, 2
    20ee:	1d c0       	rjmp	.+58     	; 0x212a <vfprintf+0x37c>
    20f0:	01 fd       	sbrc	r16, 1
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x34c>
    20f4:	88 e7       	ldi	r24, 0x78	; 120
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e c0       	rjmp	.+28     	; 0x2116 <vfprintf+0x368>
    20fa:	88 e5       	ldi	r24, 0x58	; 88
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0b c0       	rjmp	.+22     	; 0x2116 <vfprintf+0x368>
    2100:	80 2f       	mov	r24, r16
    2102:	86 78       	andi	r24, 0x86	; 134
    2104:	91 f0       	breq	.+36     	; 0x212a <vfprintf+0x37c>
    2106:	01 ff       	sbrs	r16, 1
    2108:	02 c0       	rjmp	.+4      	; 0x210e <vfprintf+0x360>
    210a:	8b e2       	ldi	r24, 0x2B	; 43
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <vfprintf+0x362>
    210e:	80 e2       	ldi	r24, 0x20	; 32
    2110:	f7 fc       	sbrc	r15, 7
    2112:	8d e2       	ldi	r24, 0x2D	; 45
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	b3 01       	movw	r22, r6
    2118:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    211c:	06 c0       	rjmp	.+12     	; 0x212a <vfprintf+0x37c>
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	b3 01       	movw	r22, r6
    2124:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2128:	9a 94       	dec	r9
    212a:	d9 14       	cp	r13, r9
    212c:	c0 f3       	brcs	.-16     	; 0x211e <vfprintf+0x370>
    212e:	da 94       	dec	r13
    2130:	f1 01       	movw	r30, r2
    2132:	ed 0d       	add	r30, r13
    2134:	f1 1d       	adc	r31, r1
    2136:	80 81       	ld	r24, Z
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	b3 01       	movw	r22, r6
    213c:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2140:	dd 20       	and	r13, r13
    2142:	a9 f7       	brne	.-22     	; 0x212e <vfprintf+0x380>
    2144:	06 c0       	rjmp	.+12     	; 0x2152 <vfprintf+0x3a4>
    2146:	80 e2       	ldi	r24, 0x20	; 32
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	b3 01       	movw	r22, r6
    214c:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2150:	ea 94       	dec	r14
    2152:	ee 20       	and	r14, r14
    2154:	c1 f7       	brne	.-16     	; 0x2146 <vfprintf+0x398>
    2156:	43 ce       	rjmp	.-890    	; 0x1dde <vfprintf+0x30>
    2158:	f3 01       	movw	r30, r6
    215a:	66 81       	ldd	r22, Z+6	; 0x06
    215c:	77 81       	ldd	r23, Z+7	; 0x07
    215e:	cb 01       	movw	r24, r22
    2160:	2b 96       	adiw	r28, 0x0b	; 11
    2162:	e2 e1       	ldi	r30, 0x12	; 18
    2164:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__epilogue_restores__>

00002168 <strnlen_P>:
    2168:	fc 01       	movw	r30, r24
    216a:	05 90       	lpm	r0, Z+
    216c:	61 50       	subi	r22, 0x01	; 1
    216e:	70 40       	sbci	r23, 0x00	; 0
    2170:	01 10       	cpse	r0, r1
    2172:	d8 f7       	brcc	.-10     	; 0x216a <strnlen_P+0x2>
    2174:	80 95       	com	r24
    2176:	90 95       	com	r25
    2178:	8e 0f       	add	r24, r30
    217a:	9f 1f       	adc	r25, r31
    217c:	08 95       	ret

0000217e <strnlen>:
    217e:	fc 01       	movw	r30, r24
    2180:	61 50       	subi	r22, 0x01	; 1
    2182:	70 40       	sbci	r23, 0x00	; 0
    2184:	01 90       	ld	r0, Z+
    2186:	01 10       	cpse	r0, r1
    2188:	d8 f7       	brcc	.-10     	; 0x2180 <strnlen+0x2>
    218a:	80 95       	com	r24
    218c:	90 95       	com	r25
    218e:	8e 0f       	add	r24, r30
    2190:	9f 1f       	adc	r25, r31
    2192:	08 95       	ret

00002194 <fputc>:
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	8c 01       	movw	r16, r24
    219e:	eb 01       	movw	r28, r22
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	81 ff       	sbrs	r24, 1
    21a4:	1b c0       	rjmp	.+54     	; 0x21dc <fputc+0x48>
    21a6:	82 ff       	sbrs	r24, 2
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <fputc+0x30>
    21aa:	2e 81       	ldd	r18, Y+6	; 0x06
    21ac:	3f 81       	ldd	r19, Y+7	; 0x07
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	28 17       	cp	r18, r24
    21b4:	39 07       	cpc	r19, r25
    21b6:	64 f4       	brge	.+24     	; 0x21d0 <fputc+0x3c>
    21b8:	e8 81       	ld	r30, Y
    21ba:	f9 81       	ldd	r31, Y+1	; 0x01
    21bc:	01 93       	st	Z+, r16
    21be:	f9 83       	std	Y+1, r31	; 0x01
    21c0:	e8 83       	st	Y, r30
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <fputc+0x3c>
    21c4:	e8 85       	ldd	r30, Y+8	; 0x08
    21c6:	f9 85       	ldd	r31, Y+9	; 0x09
    21c8:	80 2f       	mov	r24, r16
    21ca:	09 95       	icall
    21cc:	89 2b       	or	r24, r25
    21ce:	31 f4       	brne	.+12     	; 0x21dc <fputc+0x48>
    21d0:	8e 81       	ldd	r24, Y+6	; 0x06
    21d2:	9f 81       	ldd	r25, Y+7	; 0x07
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	9f 83       	std	Y+7, r25	; 0x07
    21d8:	8e 83       	std	Y+6, r24	; 0x06
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <fputc+0x4c>
    21dc:	0f ef       	ldi	r16, 0xFF	; 255
    21de:	1f ef       	ldi	r17, 0xFF	; 255
    21e0:	c8 01       	movw	r24, r16
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	08 95       	ret

000021ec <__ultoa_invert>:
    21ec:	fa 01       	movw	r30, r20
    21ee:	aa 27       	eor	r26, r26
    21f0:	28 30       	cpi	r18, 0x08	; 8
    21f2:	51 f1       	breq	.+84     	; 0x2248 <__ultoa_invert+0x5c>
    21f4:	20 31       	cpi	r18, 0x10	; 16
    21f6:	81 f1       	breq	.+96     	; 0x2258 <__ultoa_invert+0x6c>
    21f8:	e8 94       	clt
    21fa:	6f 93       	push	r22
    21fc:	6e 7f       	andi	r22, 0xFE	; 254
    21fe:	6e 5f       	subi	r22, 0xFE	; 254
    2200:	7f 4f       	sbci	r23, 0xFF	; 255
    2202:	8f 4f       	sbci	r24, 0xFF	; 255
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	af 4f       	sbci	r26, 0xFF	; 255
    2208:	b1 e0       	ldi	r27, 0x01	; 1
    220a:	3e d0       	rcall	.+124    	; 0x2288 <__ultoa_invert+0x9c>
    220c:	b4 e0       	ldi	r27, 0x04	; 4
    220e:	3c d0       	rcall	.+120    	; 0x2288 <__ultoa_invert+0x9c>
    2210:	67 0f       	add	r22, r23
    2212:	78 1f       	adc	r23, r24
    2214:	89 1f       	adc	r24, r25
    2216:	9a 1f       	adc	r25, r26
    2218:	a1 1d       	adc	r26, r1
    221a:	68 0f       	add	r22, r24
    221c:	79 1f       	adc	r23, r25
    221e:	8a 1f       	adc	r24, r26
    2220:	91 1d       	adc	r25, r1
    2222:	a1 1d       	adc	r26, r1
    2224:	6a 0f       	add	r22, r26
    2226:	71 1d       	adc	r23, r1
    2228:	81 1d       	adc	r24, r1
    222a:	91 1d       	adc	r25, r1
    222c:	a1 1d       	adc	r26, r1
    222e:	20 d0       	rcall	.+64     	; 0x2270 <__ultoa_invert+0x84>
    2230:	09 f4       	brne	.+2      	; 0x2234 <__ultoa_invert+0x48>
    2232:	68 94       	set
    2234:	3f 91       	pop	r19
    2236:	2a e0       	ldi	r18, 0x0A	; 10
    2238:	26 9f       	mul	r18, r22
    223a:	11 24       	eor	r1, r1
    223c:	30 19       	sub	r19, r0
    223e:	30 5d       	subi	r19, 0xD0	; 208
    2240:	31 93       	st	Z+, r19
    2242:	de f6       	brtc	.-74     	; 0x21fa <__ultoa_invert+0xe>
    2244:	cf 01       	movw	r24, r30
    2246:	08 95       	ret
    2248:	46 2f       	mov	r20, r22
    224a:	47 70       	andi	r20, 0x07	; 7
    224c:	40 5d       	subi	r20, 0xD0	; 208
    224e:	41 93       	st	Z+, r20
    2250:	b3 e0       	ldi	r27, 0x03	; 3
    2252:	0f d0       	rcall	.+30     	; 0x2272 <__ultoa_invert+0x86>
    2254:	c9 f7       	brne	.-14     	; 0x2248 <__ultoa_invert+0x5c>
    2256:	f6 cf       	rjmp	.-20     	; 0x2244 <__ultoa_invert+0x58>
    2258:	46 2f       	mov	r20, r22
    225a:	4f 70       	andi	r20, 0x0F	; 15
    225c:	40 5d       	subi	r20, 0xD0	; 208
    225e:	4a 33       	cpi	r20, 0x3A	; 58
    2260:	18 f0       	brcs	.+6      	; 0x2268 <__ultoa_invert+0x7c>
    2262:	49 5d       	subi	r20, 0xD9	; 217
    2264:	31 fd       	sbrc	r19, 1
    2266:	40 52       	subi	r20, 0x20	; 32
    2268:	41 93       	st	Z+, r20
    226a:	02 d0       	rcall	.+4      	; 0x2270 <__ultoa_invert+0x84>
    226c:	a9 f7       	brne	.-22     	; 0x2258 <__ultoa_invert+0x6c>
    226e:	ea cf       	rjmp	.-44     	; 0x2244 <__ultoa_invert+0x58>
    2270:	b4 e0       	ldi	r27, 0x04	; 4
    2272:	a6 95       	lsr	r26
    2274:	97 95       	ror	r25
    2276:	87 95       	ror	r24
    2278:	77 95       	ror	r23
    227a:	67 95       	ror	r22
    227c:	ba 95       	dec	r27
    227e:	c9 f7       	brne	.-14     	; 0x2272 <__ultoa_invert+0x86>
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	61 05       	cpc	r22, r1
    2284:	71 05       	cpc	r23, r1
    2286:	08 95       	ret
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	0a 2e       	mov	r0, r26
    228e:	06 94       	lsr	r0
    2290:	57 95       	ror	r21
    2292:	47 95       	ror	r20
    2294:	37 95       	ror	r19
    2296:	27 95       	ror	r18
    2298:	ba 95       	dec	r27
    229a:	c9 f7       	brne	.-14     	; 0x228e <__ultoa_invert+0xa2>
    229c:	62 0f       	add	r22, r18
    229e:	73 1f       	adc	r23, r19
    22a0:	84 1f       	adc	r24, r20
    22a2:	95 1f       	adc	r25, r21
    22a4:	a0 1d       	adc	r26, r0
    22a6:	08 95       	ret
    22a8:	ce c0       	rjmp	.+412    	; 0x2446 <__fp_nan>

000022aa <__fp_rempio2>:
    22aa:	3f d0       	rcall	.+126    	; 0x232a <__fp_splitA>
    22ac:	e8 f3       	brcs	.-6      	; 0x22a8 <__ultoa_invert+0xbc>
    22ae:	e8 94       	clt
    22b0:	e0 e0       	ldi	r30, 0x00	; 0
    22b2:	bb 27       	eor	r27, r27
    22b4:	9f 57       	subi	r25, 0x7F	; 127
    22b6:	f0 f0       	brcs	.+60     	; 0x22f4 <__fp_rempio2+0x4a>
    22b8:	2a ed       	ldi	r18, 0xDA	; 218
    22ba:	3f e0       	ldi	r19, 0x0F	; 15
    22bc:	49 ec       	ldi	r20, 0xC9	; 201
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <__fp_rempio2+0x22>
    22c0:	ee 0f       	add	r30, r30
    22c2:	bb 0f       	add	r27, r27
    22c4:	66 1f       	adc	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	88 1f       	adc	r24, r24
    22ca:	28 f0       	brcs	.+10     	; 0x22d6 <__fp_rempio2+0x2c>
    22cc:	b2 3a       	cpi	r27, 0xA2	; 162
    22ce:	62 07       	cpc	r22, r18
    22d0:	73 07       	cpc	r23, r19
    22d2:	84 07       	cpc	r24, r20
    22d4:	28 f0       	brcs	.+10     	; 0x22e0 <__fp_rempio2+0x36>
    22d6:	b2 5a       	subi	r27, 0xA2	; 162
    22d8:	62 0b       	sbc	r22, r18
    22da:	73 0b       	sbc	r23, r19
    22dc:	84 0b       	sbc	r24, r20
    22de:	e3 95       	inc	r30
    22e0:	9a 95       	dec	r25
    22e2:	72 f7       	brpl	.-36     	; 0x22c0 <__fp_rempio2+0x16>
    22e4:	80 38       	cpi	r24, 0x80	; 128
    22e6:	30 f4       	brcc	.+12     	; 0x22f4 <__fp_rempio2+0x4a>
    22e8:	9a 95       	dec	r25
    22ea:	bb 0f       	add	r27, r27
    22ec:	66 1f       	adc	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	d2 f7       	brpl	.-12     	; 0x22e8 <__fp_rempio2+0x3e>
    22f4:	90 48       	sbci	r25, 0x80	; 128
    22f6:	9b c0       	rjmp	.+310    	; 0x242e <__fp_mpack_finite>

000022f8 <__fp_sinus>:
    22f8:	ef 93       	push	r30
    22fa:	e0 ff       	sbrs	r30, 0
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <__fp_sinus+0x12>
    22fe:	a2 ea       	ldi	r26, 0xA2	; 162
    2300:	2a ed       	ldi	r18, 0xDA	; 218
    2302:	3f e0       	ldi	r19, 0x0F	; 15
    2304:	49 ec       	ldi	r20, 0xC9	; 201
    2306:	5f eb       	ldi	r21, 0xBF	; 191
    2308:	37 d0       	rcall	.+110    	; 0x2378 <__addsf3x>
    230a:	bf d0       	rcall	.+382    	; 0x248a <__fp_round>
    230c:	0f 90       	pop	r0
    230e:	03 94       	inc	r0
    2310:	01 fc       	sbrc	r0, 1
    2312:	90 58       	subi	r25, 0x80	; 128
    2314:	e0 e7       	ldi	r30, 0x70	; 112
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	99 c0       	rjmp	.+306    	; 0x244c <__fp_powsodd>

0000231a <__fp_split3>:
    231a:	57 fd       	sbrc	r21, 7
    231c:	90 58       	subi	r25, 0x80	; 128
    231e:	44 0f       	add	r20, r20
    2320:	55 1f       	adc	r21, r21
    2322:	59 f0       	breq	.+22     	; 0x233a <__fp_splitA+0x10>
    2324:	5f 3f       	cpi	r21, 0xFF	; 255
    2326:	71 f0       	breq	.+28     	; 0x2344 <__fp_splitA+0x1a>
    2328:	47 95       	ror	r20

0000232a <__fp_splitA>:
    232a:	88 0f       	add	r24, r24
    232c:	97 fb       	bst	r25, 7
    232e:	99 1f       	adc	r25, r25
    2330:	61 f0       	breq	.+24     	; 0x234a <__fp_splitA+0x20>
    2332:	9f 3f       	cpi	r25, 0xFF	; 255
    2334:	79 f0       	breq	.+30     	; 0x2354 <__fp_splitA+0x2a>
    2336:	87 95       	ror	r24
    2338:	08 95       	ret
    233a:	12 16       	cp	r1, r18
    233c:	13 06       	cpc	r1, r19
    233e:	14 06       	cpc	r1, r20
    2340:	55 1f       	adc	r21, r21
    2342:	f2 cf       	rjmp	.-28     	; 0x2328 <__fp_split3+0xe>
    2344:	46 95       	lsr	r20
    2346:	f1 df       	rcall	.-30     	; 0x232a <__fp_splitA>
    2348:	08 c0       	rjmp	.+16     	; 0x235a <__fp_splitA+0x30>
    234a:	16 16       	cp	r1, r22
    234c:	17 06       	cpc	r1, r23
    234e:	18 06       	cpc	r1, r24
    2350:	99 1f       	adc	r25, r25
    2352:	f1 cf       	rjmp	.-30     	; 0x2336 <__fp_splitA+0xc>
    2354:	86 95       	lsr	r24
    2356:	71 05       	cpc	r23, r1
    2358:	61 05       	cpc	r22, r1
    235a:	08 94       	sec
    235c:	08 95       	ret
    235e:	87 d0       	rcall	.+270    	; 0x246e <__fp_pscA>
    2360:	30 f0       	brcs	.+12     	; 0x236e <__fp_splitA+0x44>
    2362:	8c d0       	rcall	.+280    	; 0x247c <__fp_pscB>
    2364:	20 f0       	brcs	.+8      	; 0x236e <__fp_splitA+0x44>
    2366:	31 f4       	brne	.+12     	; 0x2374 <__fp_splitA+0x4a>
    2368:	9f 3f       	cpi	r25, 0xFF	; 255
    236a:	11 f4       	brne	.+4      	; 0x2370 <__fp_splitA+0x46>
    236c:	1e f4       	brtc	.+6      	; 0x2374 <__fp_splitA+0x4a>
    236e:	6b c0       	rjmp	.+214    	; 0x2446 <__fp_nan>
    2370:	0e f4       	brtc	.+2      	; 0x2374 <__fp_splitA+0x4a>
    2372:	e0 95       	com	r30
    2374:	e7 fb       	bst	r30, 7
    2376:	53 c0       	rjmp	.+166    	; 0x241e <__fp_inf>

00002378 <__addsf3x>:
    2378:	e9 2f       	mov	r30, r25
    237a:	cf df       	rcall	.-98     	; 0x231a <__fp_split3>
    237c:	80 f3       	brcs	.-32     	; 0x235e <__fp_splitA+0x34>
    237e:	ba 17       	cp	r27, r26
    2380:	62 07       	cpc	r22, r18
    2382:	73 07       	cpc	r23, r19
    2384:	84 07       	cpc	r24, r20
    2386:	95 07       	cpc	r25, r21
    2388:	18 f0       	brcs	.+6      	; 0x2390 <__addsf3x+0x18>
    238a:	71 f4       	brne	.+28     	; 0x23a8 <__addsf3x+0x30>
    238c:	9e f5       	brtc	.+102    	; 0x23f4 <__addsf3x+0x7c>
    238e:	8e c0       	rjmp	.+284    	; 0x24ac <__fp_zero>
    2390:	0e f4       	brtc	.+2      	; 0x2394 <__addsf3x+0x1c>
    2392:	e0 95       	com	r30
    2394:	0b 2e       	mov	r0, r27
    2396:	ba 2f       	mov	r27, r26
    2398:	a0 2d       	mov	r26, r0
    239a:	0b 01       	movw	r0, r22
    239c:	b9 01       	movw	r22, r18
    239e:	90 01       	movw	r18, r0
    23a0:	0c 01       	movw	r0, r24
    23a2:	ca 01       	movw	r24, r20
    23a4:	a0 01       	movw	r20, r0
    23a6:	11 24       	eor	r1, r1
    23a8:	ff 27       	eor	r31, r31
    23aa:	59 1b       	sub	r21, r25
    23ac:	99 f0       	breq	.+38     	; 0x23d4 <__addsf3x+0x5c>
    23ae:	59 3f       	cpi	r21, 0xF9	; 249
    23b0:	50 f4       	brcc	.+20     	; 0x23c6 <__addsf3x+0x4e>
    23b2:	50 3e       	cpi	r21, 0xE0	; 224
    23b4:	68 f1       	brcs	.+90     	; 0x2410 <__addsf3x+0x98>
    23b6:	1a 16       	cp	r1, r26
    23b8:	f0 40       	sbci	r31, 0x00	; 0
    23ba:	a2 2f       	mov	r26, r18
    23bc:	23 2f       	mov	r18, r19
    23be:	34 2f       	mov	r19, r20
    23c0:	44 27       	eor	r20, r20
    23c2:	58 5f       	subi	r21, 0xF8	; 248
    23c4:	f3 cf       	rjmp	.-26     	; 0x23ac <__addsf3x+0x34>
    23c6:	46 95       	lsr	r20
    23c8:	37 95       	ror	r19
    23ca:	27 95       	ror	r18
    23cc:	a7 95       	ror	r26
    23ce:	f0 40       	sbci	r31, 0x00	; 0
    23d0:	53 95       	inc	r21
    23d2:	c9 f7       	brne	.-14     	; 0x23c6 <__addsf3x+0x4e>
    23d4:	7e f4       	brtc	.+30     	; 0x23f4 <__addsf3x+0x7c>
    23d6:	1f 16       	cp	r1, r31
    23d8:	ba 0b       	sbc	r27, r26
    23da:	62 0b       	sbc	r22, r18
    23dc:	73 0b       	sbc	r23, r19
    23de:	84 0b       	sbc	r24, r20
    23e0:	ba f0       	brmi	.+46     	; 0x2410 <__addsf3x+0x98>
    23e2:	91 50       	subi	r25, 0x01	; 1
    23e4:	a1 f0       	breq	.+40     	; 0x240e <__addsf3x+0x96>
    23e6:	ff 0f       	add	r31, r31
    23e8:	bb 1f       	adc	r27, r27
    23ea:	66 1f       	adc	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	88 1f       	adc	r24, r24
    23f0:	c2 f7       	brpl	.-16     	; 0x23e2 <__addsf3x+0x6a>
    23f2:	0e c0       	rjmp	.+28     	; 0x2410 <__addsf3x+0x98>
    23f4:	ba 0f       	add	r27, r26
    23f6:	62 1f       	adc	r22, r18
    23f8:	73 1f       	adc	r23, r19
    23fa:	84 1f       	adc	r24, r20
    23fc:	48 f4       	brcc	.+18     	; 0x2410 <__addsf3x+0x98>
    23fe:	87 95       	ror	r24
    2400:	77 95       	ror	r23
    2402:	67 95       	ror	r22
    2404:	b7 95       	ror	r27
    2406:	f7 95       	ror	r31
    2408:	9e 3f       	cpi	r25, 0xFE	; 254
    240a:	08 f0       	brcs	.+2      	; 0x240e <__addsf3x+0x96>
    240c:	b3 cf       	rjmp	.-154    	; 0x2374 <__fp_splitA+0x4a>
    240e:	93 95       	inc	r25
    2410:	88 0f       	add	r24, r24
    2412:	08 f0       	brcs	.+2      	; 0x2416 <__addsf3x+0x9e>
    2414:	99 27       	eor	r25, r25
    2416:	ee 0f       	add	r30, r30
    2418:	97 95       	ror	r25
    241a:	87 95       	ror	r24
    241c:	08 95       	ret

0000241e <__fp_inf>:
    241e:	97 f9       	bld	r25, 7
    2420:	9f 67       	ori	r25, 0x7F	; 127
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	08 95       	ret

0000242a <__fp_mpack>:
    242a:	9f 3f       	cpi	r25, 0xFF	; 255
    242c:	31 f0       	breq	.+12     	; 0x243a <__fp_mpack_finite+0xc>

0000242e <__fp_mpack_finite>:
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	20 f4       	brcc	.+8      	; 0x243a <__fp_mpack_finite+0xc>
    2432:	87 95       	ror	r24
    2434:	77 95       	ror	r23
    2436:	67 95       	ror	r22
    2438:	b7 95       	ror	r27
    243a:	88 0f       	add	r24, r24
    243c:	91 1d       	adc	r25, r1
    243e:	96 95       	lsr	r25
    2440:	87 95       	ror	r24
    2442:	97 f9       	bld	r25, 7
    2444:	08 95       	ret

00002446 <__fp_nan>:
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	80 ec       	ldi	r24, 0xC0	; 192
    244a:	08 95       	ret

0000244c <__fp_powsodd>:
    244c:	9f 93       	push	r25
    244e:	8f 93       	push	r24
    2450:	7f 93       	push	r23
    2452:	6f 93       	push	r22
    2454:	ff 93       	push	r31
    2456:	ef 93       	push	r30
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	0b d8       	rcall	.-4074   	; 0x1474 <__mulsf3>
    245e:	ef 91       	pop	r30
    2460:	ff 91       	pop	r31
    2462:	2b d0       	rcall	.+86     	; 0x24ba <__fp_powser>
    2464:	2f 91       	pop	r18
    2466:	3f 91       	pop	r19
    2468:	4f 91       	pop	r20
    246a:	5f 91       	pop	r21
    246c:	03 c8       	rjmp	.-4090   	; 0x1474 <__mulsf3>

0000246e <__fp_pscA>:
    246e:	00 24       	eor	r0, r0
    2470:	0a 94       	dec	r0
    2472:	16 16       	cp	r1, r22
    2474:	17 06       	cpc	r1, r23
    2476:	18 06       	cpc	r1, r24
    2478:	09 06       	cpc	r0, r25
    247a:	08 95       	ret

0000247c <__fp_pscB>:
    247c:	00 24       	eor	r0, r0
    247e:	0a 94       	dec	r0
    2480:	12 16       	cp	r1, r18
    2482:	13 06       	cpc	r1, r19
    2484:	14 06       	cpc	r1, r20
    2486:	05 06       	cpc	r0, r21
    2488:	08 95       	ret

0000248a <__fp_round>:
    248a:	09 2e       	mov	r0, r25
    248c:	03 94       	inc	r0
    248e:	00 0c       	add	r0, r0
    2490:	11 f4       	brne	.+4      	; 0x2496 <__fp_round+0xc>
    2492:	88 23       	and	r24, r24
    2494:	52 f0       	brmi	.+20     	; 0x24aa <__fp_round+0x20>
    2496:	bb 0f       	add	r27, r27
    2498:	40 f4       	brcc	.+16     	; 0x24aa <__fp_round+0x20>
    249a:	bf 2b       	or	r27, r31
    249c:	11 f4       	brne	.+4      	; 0x24a2 <__fp_round+0x18>
    249e:	60 ff       	sbrs	r22, 0
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <__fp_round+0x20>
    24a2:	6f 5f       	subi	r22, 0xFF	; 255
    24a4:	7f 4f       	sbci	r23, 0xFF	; 255
    24a6:	8f 4f       	sbci	r24, 0xFF	; 255
    24a8:	9f 4f       	sbci	r25, 0xFF	; 255
    24aa:	08 95       	ret

000024ac <__fp_zero>:
    24ac:	e8 94       	clt

000024ae <__fp_szero>:
    24ae:	bb 27       	eor	r27, r27
    24b0:	66 27       	eor	r22, r22
    24b2:	77 27       	eor	r23, r23
    24b4:	cb 01       	movw	r24, r22
    24b6:	97 f9       	bld	r25, 7
    24b8:	08 95       	ret

000024ba <__fp_powser>:
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	1f 93       	push	r17
    24c0:	0f 93       	push	r16
    24c2:	ff 92       	push	r15
    24c4:	ef 92       	push	r14
    24c6:	df 92       	push	r13
    24c8:	7b 01       	movw	r14, r22
    24ca:	8c 01       	movw	r16, r24
    24cc:	68 94       	set
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <__fp_powser+0x20>
    24d0:	da 2e       	mov	r13, r26
    24d2:	ef 01       	movw	r28, r30
    24d4:	21 d0       	rcall	.+66     	; 0x2518 <__mulsf3x>
    24d6:	fe 01       	movw	r30, r28
    24d8:	e8 94       	clt
    24da:	a5 91       	lpm	r26, Z+
    24dc:	25 91       	lpm	r18, Z+
    24de:	35 91       	lpm	r19, Z+
    24e0:	45 91       	lpm	r20, Z+
    24e2:	55 91       	lpm	r21, Z+
    24e4:	ae f3       	brts	.-22     	; 0x24d0 <__fp_powser+0x16>
    24e6:	ef 01       	movw	r28, r30
    24e8:	47 df       	rcall	.-370    	; 0x2378 <__addsf3x>
    24ea:	fe 01       	movw	r30, r28
    24ec:	97 01       	movw	r18, r14
    24ee:	a8 01       	movw	r20, r16
    24f0:	da 94       	dec	r13
    24f2:	79 f7       	brne	.-34     	; 0x24d2 <__fp_powser+0x18>
    24f4:	df 90       	pop	r13
    24f6:	ef 90       	pop	r14
    24f8:	ff 90       	pop	r15
    24fa:	0f 91       	pop	r16
    24fc:	1f 91       	pop	r17
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret
    2504:	b4 df       	rcall	.-152    	; 0x246e <__fp_pscA>
    2506:	28 f0       	brcs	.+10     	; 0x2512 <__fp_powser+0x58>
    2508:	b9 df       	rcall	.-142    	; 0x247c <__fp_pscB>
    250a:	18 f0       	brcs	.+6      	; 0x2512 <__fp_powser+0x58>
    250c:	95 23       	and	r25, r21
    250e:	09 f0       	breq	.+2      	; 0x2512 <__fp_powser+0x58>
    2510:	86 cf       	rjmp	.-244    	; 0x241e <__fp_inf>
    2512:	99 cf       	rjmp	.-206    	; 0x2446 <__fp_nan>
    2514:	11 24       	eor	r1, r1
    2516:	cb cf       	rjmp	.-106    	; 0x24ae <__fp_szero>

00002518 <__mulsf3x>:
    2518:	00 df       	rcall	.-512    	; 0x231a <__fp_split3>
    251a:	a0 f3       	brcs	.-24     	; 0x2504 <__fp_powser+0x4a>

0000251c <__mulsf3_pse>:
    251c:	95 9f       	mul	r25, r21
    251e:	d1 f3       	breq	.-12     	; 0x2514 <__fp_powser+0x5a>
    2520:	95 0f       	add	r25, r21
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	55 1f       	adc	r21, r21
    2526:	62 9f       	mul	r22, r18
    2528:	f0 01       	movw	r30, r0
    252a:	72 9f       	mul	r23, r18
    252c:	bb 27       	eor	r27, r27
    252e:	f0 0d       	add	r31, r0
    2530:	b1 1d       	adc	r27, r1
    2532:	63 9f       	mul	r22, r19
    2534:	aa 27       	eor	r26, r26
    2536:	f0 0d       	add	r31, r0
    2538:	b1 1d       	adc	r27, r1
    253a:	aa 1f       	adc	r26, r26
    253c:	64 9f       	mul	r22, r20
    253e:	66 27       	eor	r22, r22
    2540:	b0 0d       	add	r27, r0
    2542:	a1 1d       	adc	r26, r1
    2544:	66 1f       	adc	r22, r22
    2546:	82 9f       	mul	r24, r18
    2548:	22 27       	eor	r18, r18
    254a:	b0 0d       	add	r27, r0
    254c:	a1 1d       	adc	r26, r1
    254e:	62 1f       	adc	r22, r18
    2550:	73 9f       	mul	r23, r19
    2552:	b0 0d       	add	r27, r0
    2554:	a1 1d       	adc	r26, r1
    2556:	62 1f       	adc	r22, r18
    2558:	83 9f       	mul	r24, r19
    255a:	a0 0d       	add	r26, r0
    255c:	61 1d       	adc	r22, r1
    255e:	22 1f       	adc	r18, r18
    2560:	74 9f       	mul	r23, r20
    2562:	33 27       	eor	r19, r19
    2564:	a0 0d       	add	r26, r0
    2566:	61 1d       	adc	r22, r1
    2568:	23 1f       	adc	r18, r19
    256a:	84 9f       	mul	r24, r20
    256c:	60 0d       	add	r22, r0
    256e:	21 1d       	adc	r18, r1
    2570:	82 2f       	mov	r24, r18
    2572:	76 2f       	mov	r23, r22
    2574:	6a 2f       	mov	r22, r26
    2576:	11 24       	eor	r1, r1
    2578:	9f 57       	subi	r25, 0x7F	; 127
    257a:	50 40       	sbci	r21, 0x00	; 0
    257c:	8a f0       	brmi	.+34     	; 0x25a0 <__mulsf3_pse+0x84>
    257e:	e1 f0       	breq	.+56     	; 0x25b8 <__mulsf3_pse+0x9c>
    2580:	88 23       	and	r24, r24
    2582:	4a f0       	brmi	.+18     	; 0x2596 <__mulsf3_pse+0x7a>
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	bb 1f       	adc	r27, r27
    258a:	66 1f       	adc	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	88 1f       	adc	r24, r24
    2590:	91 50       	subi	r25, 0x01	; 1
    2592:	50 40       	sbci	r21, 0x00	; 0
    2594:	a9 f7       	brne	.-22     	; 0x2580 <__mulsf3_pse+0x64>
    2596:	9e 3f       	cpi	r25, 0xFE	; 254
    2598:	51 05       	cpc	r21, r1
    259a:	70 f0       	brcs	.+28     	; 0x25b8 <__mulsf3_pse+0x9c>
    259c:	40 cf       	rjmp	.-384    	; 0x241e <__fp_inf>
    259e:	87 cf       	rjmp	.-242    	; 0x24ae <__fp_szero>
    25a0:	5f 3f       	cpi	r21, 0xFF	; 255
    25a2:	ec f3       	brlt	.-6      	; 0x259e <__mulsf3_pse+0x82>
    25a4:	98 3e       	cpi	r25, 0xE8	; 232
    25a6:	dc f3       	brlt	.-10     	; 0x259e <__mulsf3_pse+0x82>
    25a8:	86 95       	lsr	r24
    25aa:	77 95       	ror	r23
    25ac:	67 95       	ror	r22
    25ae:	b7 95       	ror	r27
    25b0:	f7 95       	ror	r31
    25b2:	e7 95       	ror	r30
    25b4:	9f 5f       	subi	r25, 0xFF	; 255
    25b6:	c1 f7       	brne	.-16     	; 0x25a8 <__mulsf3_pse+0x8c>
    25b8:	fe 2b       	or	r31, r30
    25ba:	88 0f       	add	r24, r24
    25bc:	91 1d       	adc	r25, r1
    25be:	96 95       	lsr	r25
    25c0:	87 95       	ror	r24
    25c2:	97 f9       	bld	r25, 7
    25c4:	08 95       	ret

000025c6 <_exit>:
    25c6:	f8 94       	cli

000025c8 <__stop_program>:
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <__stop_program>
