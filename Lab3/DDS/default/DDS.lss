
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  0000215a  000021ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000215a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  00800224  00800224  00002312  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d4  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bdd  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013eb  00000000  00000000  00005683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bab  00000000  00000000  00006a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  0000861c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ca  00000000  00000000  000089cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001048  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a0de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 00 	jmp	0xee	; 0xee <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_13>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <uart_getchar+0xca>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LcdCustomChar>:
      ad:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      bd:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      cd:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      dd:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d0 e1       	ldi	r29, 0x10	; 16
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	ea e5       	ldi	r30, 0x5A	; 90
     102:	f1 e2       	ldi	r31, 0x21	; 33
     104:	02 c0       	rjmp	.+4      	; 0x10a <.do_copy_data_start>

00000106 <.do_copy_data_loop>:
     106:	05 90       	lpm	r0, Z+
     108:	0d 92       	st	X+, r0

0000010a <.do_copy_data_start>:
     10a:	a4 32       	cpi	r26, 0x24	; 36
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <.do_copy_data_loop>

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a4 e2       	ldi	r26, 0x24	; 36
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a8 3b       	cpi	r26, 0xB8	; 184
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 b4 01 	call	0x368	; 0x368 <main>
     124:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__vector_13>:
void initLCD(void);
void updateLCD();
void updateManual(void);

ISR (TIMER1_COMPA_vect) // Fs = 8000
{ 
     12c:	1f 92       	push	r1
     12e:	0f 92       	push	r0
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	0f 92       	push	r0
     134:	11 24       	eor	r1, r1
     136:	2f 93       	push	r18
     138:	3f 93       	push	r19
     13a:	4f 93       	push	r20
     13c:	5f 93       	push	r21
     13e:	6f 93       	push	r22
     140:	7f 93       	push	r23
     142:	8f 93       	push	r24
     144:	9f 93       	push	r25
     146:	ef 93       	push	r30
     148:	ff 93       	push	r31
	// turn on timer for profiling
	TCNT2 = 0; TCCR2B = 1;
     14a:	10 92 b2 00 	sts	0x00B2, r1
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	80 93 b1 00 	sts	0x00B1, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if ((time & 0x0ff) == 0) {
     154:	80 91 a8 03 	lds	r24, 0x03A8
     158:	90 91 a9 03 	lds	r25, 0x03A9
     15c:	88 23       	and	r24, r24
     15e:	09 f0       	breq	.+2      	; 0x162 <__vector_13+0x36>
     160:	3f c0       	rjmp	.+126    	; 0x1e0 <__vector_13+0xb4>
		amp_fall_main = amp_fall_main - (amp_fall_main>>decay_main) ;
     162:	20 91 89 02 	lds	r18, 0x0289
     166:	30 91 8a 02 	lds	r19, 0x028A
     16a:	80 91 89 02 	lds	r24, 0x0289
     16e:	90 91 8a 02 	lds	r25, 0x028A
     172:	40 91 7d 02 	lds	r20, 0x027D
     176:	02 c0       	rjmp	.+4      	; 0x17c <__vector_13+0x50>
     178:	96 95       	lsr	r25
     17a:	87 95       	ror	r24
     17c:	4a 95       	dec	r20
     17e:	e2 f7       	brpl	.-8      	; 0x178 <__vector_13+0x4c>
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	30 93 8a 02 	sts	0x028A, r19
     188:	20 93 89 02 	sts	0x0289, r18
		rise_phase_main = rise_phase_main - (rise_phase_main>>rise_main);
     18c:	20 91 8d 03 	lds	r18, 0x038D
     190:	30 91 8e 03 	lds	r19, 0x038E
     194:	80 91 8d 03 	lds	r24, 0x038D
     198:	90 91 8e 03 	lds	r25, 0x038E
     19c:	40 91 7a 02 	lds	r20, 0x027A
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_13+0x7a>
     1a2:	96 95       	lsr	r25
     1a4:	87 95       	ror	r24
     1a6:	4a 95       	dec	r20
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <__vector_13+0x76>
     1aa:	28 1b       	sub	r18, r24
     1ac:	39 0b       	sbc	r19, r25
     1ae:	30 93 8e 03 	sts	0x038E, r19
     1b2:	20 93 8d 03 	sts	0x038D, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1 = amp_fm1 - (amp_fm1>>decay_fm1) ;
     1b6:	20 91 80 02 	lds	r18, 0x0280
     1ba:	30 91 81 02 	lds	r19, 0x0281
     1be:	80 91 80 02 	lds	r24, 0x0280
     1c2:	90 91 81 02 	lds	r25, 0x0281
     1c6:	40 91 ad 03 	lds	r20, 0x03AD
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__vector_13+0xa4>
     1cc:	96 95       	lsr	r25
     1ce:	87 95       	ror	r24
     1d0:	4a 95       	dec	r20
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <__vector_13+0xa0>
     1d4:	28 1b       	sub	r18, r24
     1d6:	39 0b       	sbc	r19, r25
     1d8:	30 93 81 02 	sts	0x0281, r19
     1dc:	20 93 80 02 	sts	0x0280, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main =  max_amp - rise_phase_main;
     1e0:	80 91 8d 03 	lds	r24, 0x038D
     1e4:	90 91 8e 03 	lds	r25, 0x038E
     1e8:	4f ef       	ldi	r20, 0xFF	; 255
     1ea:	5f e7       	ldi	r21, 0x7F	; 127
     1ec:	9a 01       	movw	r18, r20
     1ee:	28 1b       	sub	r18, r24
     1f0:	39 0b       	sbc	r19, r25
     1f2:	30 93 ac 03 	sts	0x03AC, r19
     1f6:	20 93 ab 03 	sts	0x03AB, r18
	// product of rise and fall exponentials is the amplitude envelope
	amp_main = (amp_rise_main>>8) * (amp_fall_main>>8) ;
     1fa:	20 91 ab 03 	lds	r18, 0x03AB
     1fe:	30 91 ac 03 	lds	r19, 0x03AC
     202:	80 91 89 02 	lds	r24, 0x0289
     206:	90 91 8a 02 	lds	r25, 0x028A
     20a:	89 2f       	mov	r24, r25
     20c:	99 27       	eor	r25, r25
     20e:	23 2f       	mov	r18, r19
     210:	33 27       	eor	r19, r19
     212:	bc 01       	movw	r22, r24
     214:	62 9f       	mul	r22, r18
     216:	c0 01       	movw	r24, r0
     218:	63 9f       	mul	r22, r19
     21a:	90 0d       	add	r25, r0
     21c:	72 9f       	mul	r23, r18
     21e:	90 0d       	add	r25, r0
     220:	11 24       	eor	r1, r1
     222:	90 93 a6 03 	sts	0x03A6, r25
     226:	80 93 a5 03 	sts	0x03A5, r24

	// Init the synth
	if (pluck==1) {
     22a:	80 91 7f 02 	lds	r24, 0x027F
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	d1 f4       	brne	.+52     	; 0x266 <__vector_13+0x13a>
		amp_fall_main = max_amp; 
     232:	50 93 8a 02 	sts	0x028A, r21
     236:	40 93 89 02 	sts	0x0289, r20
		rise_phase_main = max_amp ;
     23a:	50 93 8e 03 	sts	0x038E, r21
     23e:	40 93 8d 03 	sts	0x038D, r20
		amp_rise_main = 0 ;
     242:	10 92 ac 03 	sts	0x03AC, r1
     246:	10 92 ab 03 	sts	0x03AB, r1
		amp_fm1 = max_amp ;
     24a:	50 93 81 02 	sts	0x0281, r21
     24e:	40 93 80 02 	sts	0x0280, r20
		// phase lock the synth
		acc_fm1 = 0 ;
     252:	10 92 86 02 	sts	0x0286, r1
     256:	10 92 85 02 	sts	0x0285, r1
		acc_main = 0;
     25a:	10 92 7c 02 	sts	0x027C, r1
     25e:	10 92 7b 02 	sts	0x027B, r1
		pluck = 0;
     262:	10 92 7f 02 	sts	0x027F, r1
	}

	//the FM DDR -- feeds into final DDR
	acc_fm1 = acc_fm1 + inc_fm1 ;
     266:	20 91 85 02 	lds	r18, 0x0285
     26a:	30 91 86 02 	lds	r19, 0x0286
     26e:	80 91 a2 03 	lds	r24, 0x03A2
     272:	90 91 a3 03 	lds	r25, 0x03A3
     276:	82 0f       	add	r24, r18
     278:	93 1f       	adc	r25, r19
     27a:	90 93 86 02 	sts	0x0286, r25
     27e:	80 93 85 02 	sts	0x0285, r24
	high_fm1 = (char)(acc_fm1 >> 8) ;
     282:	80 91 85 02 	lds	r24, 0x0285
     286:	90 91 86 02 	lds	r25, 0x0286
     28a:	90 93 ae 03 	sts	0x03AE, r25
	fm1 = sineTable[high_fm1] ;
     28e:	e0 91 ae 03 	lds	r30, 0x03AE
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	e3 57       	subi	r30, 0x73	; 115
     296:	fd 4f       	sbci	r31, 0xFD	; 253
     298:	40 81       	ld	r20, Z
     29a:	40 93 87 02 	sts	0x0287, r20

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main = acc_main + (inc_main + (fm1*(amp_fm1>>depth_fm1))) ;
     29e:	60 91 7b 02 	lds	r22, 0x027B
     2a2:	70 91 7c 02 	lds	r23, 0x027C
     2a6:	20 91 83 02 	lds	r18, 0x0283
     2aa:	30 91 84 02 	lds	r19, 0x0284
     2ae:	80 91 80 02 	lds	r24, 0x0280
     2b2:	90 91 81 02 	lds	r25, 0x0281
     2b6:	e0 91 82 02 	lds	r30, 0x0282
     2ba:	26 0f       	add	r18, r22
     2bc:	37 1f       	adc	r19, r23
     2be:	55 27       	eor	r21, r21
     2c0:	47 fd       	sbrc	r20, 7
     2c2:	50 95       	com	r21
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_13+0x19e>
     2c6:	96 95       	lsr	r25
     2c8:	87 95       	ror	r24
     2ca:	ea 95       	dec	r30
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <__vector_13+0x19a>
     2ce:	bc 01       	movw	r22, r24
     2d0:	46 9f       	mul	r20, r22
     2d2:	c0 01       	movw	r24, r0
     2d4:	47 9f       	mul	r20, r23
     2d6:	90 0d       	add	r25, r0
     2d8:	56 9f       	mul	r21, r22
     2da:	90 0d       	add	r25, r0
     2dc:	11 24       	eor	r1, r1
     2de:	28 0f       	add	r18, r24
     2e0:	39 1f       	adc	r19, r25
     2e2:	30 93 7c 02 	sts	0x027C, r19
     2e6:	20 93 7b 02 	sts	0x027B, r18
	high_main = (char)(acc_main >> 8) ;
     2ea:	80 91 7b 02 	lds	r24, 0x027B
     2ee:	90 91 7c 02 	lds	r25, 0x027C
     2f2:	90 93 a7 03 	sts	0x03A7, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	OCR0A = 128 + (((amp_main>>8) * (int)sineTable[high_main])>>7) ;
     2f6:	20 91 a5 03 	lds	r18, 0x03A5
     2fa:	30 91 a6 03 	lds	r19, 0x03A6
     2fe:	e0 91 a7 03 	lds	r30, 0x03A7
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	e3 57       	subi	r30, 0x73	; 115
     306:	fd 4f       	sbci	r31, 0xFD	; 253
     308:	80 81       	ld	r24, Z
     30a:	99 27       	eor	r25, r25
     30c:	87 fd       	sbrc	r24, 7
     30e:	90 95       	com	r25
     310:	23 2f       	mov	r18, r19
     312:	33 27       	eor	r19, r19
     314:	ac 01       	movw	r20, r24
     316:	42 9f       	mul	r20, r18
     318:	c0 01       	movw	r24, r0
     31a:	43 9f       	mul	r20, r19
     31c:	90 0d       	add	r25, r0
     31e:	52 9f       	mul	r21, r18
     320:	90 0d       	add	r25, r0
     322:	11 24       	eor	r1, r1
     324:	88 0f       	add	r24, r24
     326:	89 2f       	mov	r24, r25
     328:	88 1f       	adc	r24, r24
     32a:	99 0b       	sbc	r25, r25
     32c:	91 95       	neg	r25
     32e:	80 58       	subi	r24, 0x80	; 128
     330:	87 bd       	out	0x27, r24	; 39
	
	time++;     //ticks at 8 KHz 
     332:	80 91 a8 03 	lds	r24, 0x03A8
     336:	90 91 a9 03 	lds	r25, 0x03A9
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 a9 03 	sts	0x03A9, r25
     340:	80 93 a8 03 	sts	0x03A8, r24
	// profiling 
	TCCR2B = 0;
     344:	10 92 b1 00 	sts	0x00B1, r1
} 
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <updateManual>:
	}
}

void updateManual(void){

}
     366:	08 95       	ret

00000368 <main>:
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
			if ((~PINC & 0x01) && !pushed) {
				 pluck = 1;
     368:	21 e0       	ldi	r18, 0x01	; 1

   while(1) {  
		// Check pushbutton to pluck string
		// and oneshot it
		//  
		if ((time & 0xff) == 0) {
     36a:	80 91 a8 03 	lds	r24, 0x03A8
     36e:	90 91 a9 03 	lds	r25, 0x03A9
     372:	88 23       	and	r24, r24
     374:	d1 f7       	brne	.-12     	; 0x36a <main+0x2>
			if ((~PINC & 0x01) && !pushed) {
     376:	30 99       	sbic	0x06, 0	; 6
     378:	08 c0       	rjmp	.+16     	; 0x38a <main+0x22>
     37a:	80 91 a4 03 	lds	r24, 0x03A4
     37e:	88 23       	and	r24, r24
     380:	21 f4       	brne	.+8      	; 0x38a <main+0x22>
				 pluck = 1;
     382:	20 93 7f 02 	sts	0x027F, r18
				 pushed = 1;
     386:	20 93 a4 03 	sts	0x03A4, r18
 			}
			if (!(~PINC & 0x01)  && pushed) {
     38a:	30 9b       	sbis	0x06, 0	; 6
     38c:	ee cf       	rjmp	.-36     	; 0x36a <main+0x2>
     38e:	80 91 a4 03 	lds	r24, 0x03A4
     392:	88 23       	and	r24, r24
     394:	51 f3       	breq	.-44     	; 0x36a <main+0x2>
				pushed = 0;
     396:	10 92 a4 03 	sts	0x03A4, r1
     39a:	e7 cf       	rjmp	.-50     	; 0x36a <main+0x2>

0000039c <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
	switch (state) {
     3a0:	80 91 88 02 	lds	r24, 0x0288
     3a4:	85 30       	cpi	r24, 0x05	; 5
     3a6:	b1 f1       	breq	.+108    	; 0x414 <updateLCD+0x78>
     3a8:	86 30       	cpi	r24, 0x06	; 6
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <updateLCD+0x20>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	01 f1       	breq	.+64     	; 0x3f0 <updateLCD+0x54>
     3b0:	84 30       	cpi	r24, 0x04	; 4
     3b2:	38 f5       	brcc	.+78     	; 0x402 <updateLCD+0x66>
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <updateLCD+0x1e>
     3b8:	8e c0       	rjmp	.+284    	; 0x4d6 <updateLCD+0x13a>
     3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <updateLCD+0x36>
     3bc:	87 30       	cpi	r24, 0x07	; 7
     3be:	c1 f1       	breq	.+112    	; 0x430 <updateLCD+0x94>
     3c0:	87 30       	cpi	r24, 0x07	; 7
     3c2:	78 f1       	brcs	.+94     	; 0x422 <updateLCD+0x86>
     3c4:	88 30       	cpi	r24, 0x08	; 8
     3c6:	09 f4       	brne	.+2      	; 0x3ca <updateLCD+0x2e>
     3c8:	50 c0       	rjmp	.+160    	; 0x46a <updateLCD+0xce>
     3ca:	89 30       	cpi	r24, 0x09	; 9
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <updateLCD+0x34>
     3ce:	83 c0       	rjmp	.+262    	; 0x4d6 <updateLCD+0x13a>
     3d0:	53 c0       	rjmp	.+166    	; 0x478 <updateLCD+0xdc>
	 	case MAIN_SCREEN:
			LCDclr();
     3d2:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDclr>
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     3d6:	8e e8       	ldi	r24, 0x8E	; 142
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     3e2:	8b e9       	ldi	r24, 0x9B	; 155
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <CopyStringtoLCD>
     3ee:	73 c0       	rjmp	.+230    	; 0x4d6 <updateLCD+0x13a>
			break;
		case MAN:
			updateManual();
			break;
		case SET_SEQUENCE:
			LCDclr();
     3f0:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDclr>
//			CopyStringtoLCD(
			LCDGotoXY(0, 1);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     3fc:	20 91 a0 03 	lds	r18, 0x03A0
     400:	41 c0       	rjmp	.+130    	; 0x484 <updateLCD+0xe8>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			LCDGotoXY(0, 1);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     40a:	20 91 83 02 	lds	r18, 0x0283
     40e:	30 91 84 02 	lds	r19, 0x0284
     412:	16 c0       	rjmp	.+44     	; 0x440 <updateLCD+0xa4>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			LCDGotoXY(0, 1);
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     41c:	20 91 7d 02 	lds	r18, 0x027D
     420:	31 c0       	rjmp	.+98     	; 0x484 <updateLCD+0xe8>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			LCDGotoXY(0, 1);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     42a:	20 91 7a 02 	lds	r18, 0x027A
     42e:	2a c0       	rjmp	.+84     	; 0x484 <updateLCD+0xe8>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			LCDGotoXY(0, 1);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     438:	20 91 a2 03 	lds	r18, 0x03A2
     43c:	30 91 a3 03 	lds	r19, 0x03A3
     440:	00 d0       	rcall	.+0      	; 0x442 <updateLCD+0xa6>
     442:	00 d0       	rcall	.+0      	; 0x444 <updateLCD+0xa8>
     444:	00 d0       	rcall	.+0      	; 0x446 <updateLCD+0xaa>
     446:	ed b7       	in	r30, 0x3d	; 61
     448:	fe b7       	in	r31, 0x3e	; 62
     44a:	31 96       	adiw	r30, 0x01	; 1
     44c:	0f e8       	ldi	r16, 0x8F	; 143
     44e:	13 e0       	ldi	r17, 0x03	; 3
     450:	ad b7       	in	r26, 0x3d	; 61
     452:	be b7       	in	r27, 0x3e	; 62
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	1c 93       	st	X, r17
     458:	0e 93       	st	-X, r16
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	93 83       	std	Z+3, r25	; 0x03
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	35 83       	std	Z+5, r19	; 0x05
     466:	24 83       	std	Z+4, r18	; 0x04
     468:	21 c0       	rjmp	.+66     	; 0x4ac <updateLCD+0x110>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			LCDGotoXY(0, 1);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     472:	20 91 82 02 	lds	r18, 0x0282
     476:	06 c0       	rjmp	.+12     	; 0x484 <updateLCD+0xe8>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			LCDGotoXY(0, 1);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     480:	20 91 ad 03 	lds	r18, 0x03AD
     484:	00 d0       	rcall	.+0      	; 0x486 <updateLCD+0xea>
     486:	00 d0       	rcall	.+0      	; 0x488 <updateLCD+0xec>
     488:	00 d0       	rcall	.+0      	; 0x48a <updateLCD+0xee>
     48a:	ed b7       	in	r30, 0x3d	; 61
     48c:	fe b7       	in	r31, 0x3e	; 62
     48e:	31 96       	adiw	r30, 0x01	; 1
     490:	0f e8       	ldi	r16, 0x8F	; 143
     492:	13 e0       	ldi	r17, 0x03	; 3
     494:	ad b7       	in	r26, 0x3d	; 61
     496:	be b7       	in	r27, 0x3e	; 62
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	1c 93       	st	X, r17
     49c:	0e 93       	st	-X, r16
     49e:	11 97       	sbiw	r26, 0x01	; 1
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	93 83       	std	Z+3, r25	; 0x03
     4a6:	82 83       	std	Z+2, r24	; 0x02
     4a8:	24 83       	std	Z+4, r18	; 0x04
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	0e 94 75 0c 	call	0x18ea	; 0x18ea <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     4b0:	f8 01       	movw	r30, r16
     4b2:	01 90       	ld	r0, Z+
     4b4:	00 20       	and	r0, r0
     4b6:	e9 f7       	brne	.-6      	; 0x4b2 <updateLCD+0x116>
     4b8:	31 97       	sbiw	r30, 0x01	; 1
     4ba:	e0 1b       	sub	r30, r16
     4bc:	f1 0b       	sbc	r31, r17
     4be:	8d b7       	in	r24, 0x3d	; 61
     4c0:	9e b7       	in	r25, 0x3e	; 62
     4c2:	06 96       	adiw	r24, 0x06	; 6
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	9e bf       	out	0x3e, r25	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	8d bf       	out	0x3d, r24	; 61
     4ce:	c8 01       	movw	r24, r16
     4d0:	6e 2f       	mov	r22, r30
     4d2:	0e 94 36 03 	call	0x66c	; 0x66c <LCDstring>
			break;
	}
}
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     4dc:	0e 94 95 03 	call	0x72a	; 0x72a <LCDinit>
	LCDcursorOFF();
     4e0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCDcursorOFF>
	LCDclr();				//clear the display
     4e4:	0e 94 2e 03 	call	0x65c	; 0x65c <LCDclr>
	LCDGotoXY(0,0);
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     4f0:	8e e8       	ldi	r24, 0x8E	; 142
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     4fc:	8b e9       	ldi	r24, 0x9B	; 155
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <CopyStringtoLCD>
}
     508:	08 95       	ret

0000050a <Initialize>:
	TCCR2B = 0;
} 
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
   // make B.3 an output
   DDRB = (1<<PINB3) ;
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	84 b9       	out	0x04, r24	; 4
     516:	0d e8       	ldi	r16, 0x8D	; 141
     518:	12 e0       	ldi	r17, 0x02	; 2
     51a:	c0 e0       	ldi	r28, 0x00	; 0
     51c:	d0 e0       	ldi	r29, 0x00	; 0
     51e:	1f c0       	rjmp	.+62     	; 0x55e <Initialize+0x54>
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     520:	be 01       	movw	r22, r28
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 80 09 	call	0x1300	; 0x1300 <__floatunsisf>
     52a:	26 e5       	ldi	r18, 0x56	; 86
     52c:	3e e0       	ldi	r19, 0x0E	; 14
     52e:	49 ec       	ldi	r20, 0xC9	; 201
     530:	50 e4       	ldi	r21, 0x40	; 64
     532:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	5b e3       	ldi	r21, 0x3B	; 59
     53e:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     542:	0e 94 99 0c 	call	0x1932	; 0x1932 <sin>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	4e ef       	ldi	r20, 0xFE	; 254
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	0e 94 02 08 	call	0x1004	; 0x1004 <__mulsf3>
     552:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fixunssfsi>
     556:	f8 01       	movw	r30, r16
     558:	61 93       	st	Z+, r22
     55a:	8f 01       	movw	r16, r30
     55c:	21 96       	adiw	r28, 0x01	; 1
  //	uart_init();
  //	stdout = stdin = stderr = &uart_str;
  //	fprintf(stdout,"Starting...\n\r");

   // init the sine table
   for (i=0; i<256; i++)
     55e:	cf 3f       	cpi	r28, 0xFF	; 255
     560:	d1 05       	cpc	r29, r1
     562:	f1 f2       	breq	.-68     	; 0x520 <Initialize+0x16>
     564:	e8 f2       	brcs	.-70     	; 0x520 <Initialize+0x16>
     566:	d0 93 8c 02 	sts	0x028C, r29
     56a:	c0 93 8b 02 	sts	0x028B, r28
   {
   		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
   }  

   // init the time counter
   time=0;
     56e:	10 92 a9 03 	sts	0x03A9, r1
     572:	10 92 a8 03 	sts	0x03A8, r1

   // timer 0 runs at full rate
   TCCR0B = 1 ;  
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	85 bd       	out	0x25, r24	; 37
   //turn off timer 0 overflow ISR
   TIMSK0 = 0 ;
     57a:	10 92 6e 00 	sts	0x006E, r1
   // turn on PWM
   // turn on fast PWM and OC0A output
   // at full clock rate, toggle OC0A (pin B3) 
   // 16 microsec per PWM cycle sample time
   TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     57e:	83 ec       	ldi	r24, 0xC3	; 195
     580:	84 bd       	out	0x24, r24	; 36
   OCR0A = 128 ; // set PWM to half full scale
     582:	80 e8       	ldi	r24, 0x80	; 128
     584:	87 bd       	out	0x27, r24	; 39
	
	// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	OCR1A = 1999 ; // 2000 ticks
     586:	8f ec       	ldi	r24, 0xCF	; 207
     588:	97 e0       	ldi	r25, 0x07	; 7
     58a:	90 93 89 00 	sts	0x0089, r25
     58e:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = 0x09; 	//full speed; clear-on-match
     598:	89 e0       	ldi	r24, 0x09	; 9
     59a:	80 93 81 00 	sts	0x0081, r24
  	TCCR1A = 0x00;	//turn off pwm and oc lines
     59e:	10 92 80 00 	sts	0x0080, r1

	initLCD();
     5a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <initLCD>
	
   // turn on all ISRs
   sei() ;
     5a6:	78 94       	sei
   ///////////////////////////////////////////////////
   // Sound parameters
   ///////////////////////////////////////////////////
   // Base frequency
   // 2^16/8000*freq = 8.192*freq
   inc_main = (int)(8.192 * 261) ; 
     5a8:	8a e5       	ldi	r24, 0x5A	; 90
     5aa:	98 e0       	ldi	r25, 0x08	; 8
     5ac:	90 93 84 02 	sts	0x0284, r25
     5b0:	80 93 83 02 	sts	0x0283, r24
   // rise and decay SHIFT factor  -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_main = 4 ;
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	80 93 7d 02 	sts	0x027D, r24
   rise_main = 0 ;
     5ba:	10 92 7a 02 	sts	0x027A, r1
   //
   // FM modulation rate -- also a frequency
   inc_fm1 = (int)(8.192 * 65) ;
     5be:	84 e1       	ldi	r24, 0x14	; 20
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	90 93 a3 03 	sts	0x03A3, r25
     5c6:	80 93 a2 03 	sts	0x03A2, r24
   // FM modulation depth SHIFT factor 
   // bigger factor implies smaller FM!
   // useful range is 4 to 15
   depth_fm1 = 7 ;
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	80 93 82 02 	sts	0x0282, r24
   // decay SHIFT factor -- bigger is slower
   // 6 implies tau of 64 cycles
   // 8 implies tau of 256 cycles
   // max value is 8
   decay_fm1 = 6 ;
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	80 93 ad 03 	sts	0x03AD, r24
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     5e0:	28 2f       	mov	r18, r24
     5e2:	20 7f       	andi	r18, 0xF0	; 240
     5e4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     5e6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     5e8:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ea:	20 ea       	ldi	r18, 0xA0	; 160
     5ec:	3f e0       	ldi	r19, 0x0F	; 15
     5ee:	f9 01       	movw	r30, r18
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     5f4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     5f6:	40 98       	cbi	0x08, 0	; 8
     5f8:	f9 01       	movw	r30, r18
     5fa:	31 97       	sbiw	r30, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	44 e0       	ldi	r20, 0x04	; 4
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	4a 95       	dec	r20
     608:	e1 f7       	brne	.-8      	; 0x602 <LCDsendChar+0x22>
     60a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     60c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     60e:	42 9a       	sbi	0x08, 2	; 8
     610:	c9 01       	movw	r24, r18
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     616:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     618:	40 98       	cbi	0x08, 0	; 8
     61a:	c9 01       	movw	r24, r18
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     620:	08 95       	ret

00000622 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     622:	28 2f       	mov	r18, r24
     624:	20 7f       	andi	r18, 0xF0	; 240
     626:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     628:	42 9a       	sbi	0x08, 2	; 8
     62a:	20 ea       	ldi	r18, 0xA0	; 160
     62c:	3f e0       	ldi	r19, 0x0F	; 15
     62e:	f9 01       	movw	r30, r18
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     634:	42 98       	cbi	0x08, 2	; 8
     636:	f9 01       	movw	r30, r18
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	54 e0       	ldi	r21, 0x04	; 4
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	5a 95       	dec	r21
     646:	e1 f7       	brne	.-8      	; 0x640 <LCDsendCommand+0x1e>
     648:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     64a:	42 9a       	sbi	0x08, 2	; 8
     64c:	c9 01       	movw	r24, r18
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     652:	42 98       	cbi	0x08, 2	; 8
     654:	c9 01       	movw	r24, r18
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     65a:	08 95       	ret

0000065c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     662:	08 95       	ret

00000664 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     66a:	08 95       	ret

0000066c <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	49 f0       	breq	.+18     	; 0x68c <LCDstring+0x20>
     67a:	ec 01       	movw	r28, r24
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	04 c0       	rjmp	.+8      	; 0x688 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     680:	89 91       	ld	r24, Y+
     682:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     686:	1f 5f       	subi	r17, 0xFF	; 255
     688:	10 17       	cp	r17, r16
     68a:	d0 f3       	brcs	.-12     	; 0x680 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     696:	62 30       	cpi	r22, 0x02	; 2
     698:	31 f0       	breq	.+12     	; 0x6a6 <LCDGotoXY+0x10>
     69a:	63 30       	cpi	r22, 0x03	; 3
     69c:	31 f0       	breq	.+12     	; 0x6aa <LCDGotoXY+0x14>
     69e:	61 30       	cpi	r22, 0x01	; 1
     6a0:	29 f4       	brne	.+10     	; 0x6ac <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     6a2:	80 5c       	subi	r24, 0xC0	; 192
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     6a6:	8c 5e       	subi	r24, 0xEC	; 236
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     6aa:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     6ac:	80 68       	ori	r24, 0x80	; 128
     6ae:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
	
}
     6b2:	08 95       	ret

000006b4 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     6be:	64 2f       	mov	r22, r20
     6c0:	0e 94 4b 03 	call	0x696	; 0x696 <LCDGotoXY>
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     6c8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     6cc:	1f 5f       	subi	r17, 0xFF	; 255
     6ce:	fe 01       	movw	r30, r28
     6d0:	e1 0f       	add	r30, r17
     6d2:	f1 1d       	adc	r31, r1
     6d4:	84 91       	lpm	r24, Z+
     6d6:	88 23       	and	r24, r24
     6d8:	b9 f7       	brne	.-18     	; 0x6c8 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	08 95       	ret

000006e2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	7c 01       	movw	r14, r24
     6f0:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     6f2:	11 0f       	add	r17, r17
     6f4:	11 0f       	add	r17, r17
     6f6:	11 0f       	add	r17, r17
     6f8:	10 64       	ori	r17, 0x40	; 64
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     6fe:	f7 01       	movw	r30, r14
     700:	ec 0f       	add	r30, r28
     702:	fd 1f       	adc	r31, r29
     704:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     706:	81 2f       	mov	r24, r17
     708:	8c 0f       	add	r24, r28
     70a:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendChar(pcc);
     70e:	80 2f       	mov	r24, r16
     710:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     714:	21 96       	adiw	r28, 0x01	; 1
     716:	c8 30       	cpi	r28, 0x08	; 8
     718:	d1 05       	cpc	r29, r1
     71a:	89 f7       	brne	.-30     	; 0x6fe <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	08 95       	ret

0000072a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	80 e6       	ldi	r24, 0x60	; 96
     732:	9a ee       	ldi	r25, 0xEA	; 234
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     738:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     73a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     73c:	87 b1       	in	r24, 0x07	; 7
     73e:	80 6f       	ori	r24, 0xF0	; 240
     740:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     742:	87 b1       	in	r24, 0x07	; 7
     744:	87 60       	ori	r24, 0x07	; 7
     746:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     748:	80 e3       	ldi	r24, 0x30	; 48
     74a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     74c:	42 9a       	sbi	0x08, 2	; 8
     74e:	20 ea       	ldi	r18, 0xA0	; 160
     750:	3f e0       	ldi	r19, 0x0F	; 15
     752:	f9 01       	movw	r30, r18
     754:	31 97       	sbiw	r30, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     758:	42 98       	cbi	0x08, 2	; 8
     75a:	f9 01       	movw	r30, r18
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     760:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     762:	42 9a       	sbi	0x08, 2	; 8
     764:	c9 01       	movw	r24, r18
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     76a:	42 98       	cbi	0x08, 2	; 8
     76c:	c9 01       	movw	r24, r18
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     772:	80 e2       	ldi	r24, 0x20	; 32
     774:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     776:	42 9a       	sbi	0x08, 2	; 8
     778:	c9 01       	movw	r24, r18
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     77e:	42 98       	cbi	0x08, 2	; 8
     780:	c9 01       	movw	r24, r18
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     786:	88 e2       	ldi	r24, 0x28	; 40
     788:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     78c:	8c e0       	ldi	r24, 0x0C	; 12
     78e:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
     792:	cd ea       	ldi	r28, 0xAD	; 173
     794:	d0 e0       	ldi	r29, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     798:	16 2f       	mov	r17, r22
     79a:	1f 5f       	subi	r17, 0xFF	; 255
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCDdefinechar>
     7a2:	28 96       	adiw	r28, 0x08	; 8
     7a4:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     7a6:	18 30       	cpi	r17, 0x08	; 8
     7a8:	b9 f7       	brne	.-18     	; 0x798 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	08 95       	ret

000007b2 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	08 2f       	mov	r16, r24
     7b8:	10 e0       	ldi	r17, 0x00	; 0
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     7bc:	8e e1       	ldi	r24, 0x1E	; 30
     7be:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     7c2:	1f 5f       	subi	r17, 0xFF	; 255
     7c4:	10 17       	cp	r17, r16
     7c6:	d0 f3       	brcs	.-12     	; 0x7bc <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	08 2f       	mov	r16, r24
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     7d8:	88 e1       	ldi	r24, 0x18	; 24
     7da:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     7de:	1f 5f       	subi	r17, 0xFF	; 255
     7e0:	10 17       	cp	r17, r16
     7e2:	d0 f3       	brcs	.-12     	; 0x7d8 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     7ea:	8e e0       	ldi	r24, 0x0E	; 14
     7ec:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     7f0:	08 95       	ret

000007f2 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     7f2:	8f e0       	ldi	r24, 0x0F	; 15
     7f4:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     7f8:	08 95       	ret

000007fa <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     7fa:	8c e0       	ldi	r24, 0x0C	; 12
     7fc:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     800:	08 95       	ret

00000802 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     802:	88 e0       	ldi	r24, 0x08	; 8
     804:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     808:	08 95       	ret

0000080a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     80a:	8c e0       	ldi	r24, 0x0C	; 12
     80c:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
}
     810:	08 95       	ret

00000812 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	08 2f       	mov	r16, r24
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	04 c0       	rjmp	.+8      	; 0x824 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     81c:	80 e1       	ldi	r24, 0x10	; 16
     81e:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     822:	1f 5f       	subi	r17, 0xFF	; 255
     824:	10 17       	cp	r17, r16
     826:	d0 f3       	brcs	.-12     	; 0x81c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	08 2f       	mov	r16, r24
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	04 c0       	rjmp	.+8      	; 0x840 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     838:	84 e1       	ldi	r24, 0x14	; 20
     83a:	0e 94 11 03 	call	0x622	; 0x622 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     83e:	1f 5f       	subi	r17, 0xFF	; 255
     840:	10 17       	cp	r17, r16
     842:	d0 f3       	brcs	.-12     	; 0x838 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     85a:	96 e0       	ldi	r25, 0x06	; 6
     85c:	89 9f       	mul	r24, r25
     85e:	c0 01       	movw	r24, r0
     860:	11 24       	eor	r1, r1
     862:	24 2f       	mov	r18, r20
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	ac 01       	movw	r20, r24
     868:	42 9f       	mul	r20, r18
     86a:	c0 01       	movw	r24, r0
     86c:	43 9f       	mul	r20, r19
     86e:	90 0d       	add	r25, r0
     870:	52 9f       	mul	r21, r18
     872:	90 0d       	add	r25, r0
     874:	11 24       	eor	r1, r1
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 02 0c 	call	0x1804	; 0x1804 <__divmodhi4>
     87c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     87e:	cb 01       	movw	r24, r22
     880:	66 e0       	ldi	r22, 0x06	; 6
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__udivmodhi4>
     888:	e8 2e       	mov	r14, r24
     88a:	ff 24       	eor	r15, r15
     88c:	00 e0       	ldi	r16, 0x00	; 0
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	12 c0       	rjmp	.+36     	; 0x8b6 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     892:	c8 01       	movw	r24, r16
     894:	05 96       	adiw	r24, 0x05	; 5
     896:	c8 17       	cp	r28, r24
     898:	d9 07       	cpc	r29, r25
     89a:	10 f0       	brcs	.+4      	; 0x8a0 <LCDprogressBar+0x56>
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     8a0:	c0 17       	cp	r28, r16
     8a2:	d1 07       	cpc	r29, r17
     8a4:	10 f0       	brcs	.+4      	; 0x8aa <LCDprogressBar+0x60>
     8a6:	8e 2d       	mov	r24, r14
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <LCDprogressBar+0x62>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     8ac:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     8b0:	f3 94       	inc	r15
     8b2:	0a 5f       	subi	r16, 0xFA	; 250
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	fd 14       	cp	r15, r13
     8b8:	60 f3       	brcs	.-40     	; 0x892 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	08 95       	ret

000008ca <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     8ca:	87 e6       	ldi	r24, 0x67	; 103
     8cc:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     8d0:	88 e1       	ldi	r24, 0x18	; 24
     8d2:	80 93 c1 00 	sts	0x00C1, r24
}
     8d6:	08 95       	ret

000008d8 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     8d8:	1f 93       	push	r17
     8da:	18 2f       	mov	r17, r24

  if (c == '\a')
     8dc:	87 30       	cpi	r24, 0x07	; 7
     8de:	49 f4       	brne	.+18     	; 0x8f2 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     8e0:	60 91 b6 03 	lds	r22, 0x03B6
     8e4:	70 91 b7 03 	lds	r23, 0x03B7
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <fputs>
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     8f2:	8a 30       	cpi	r24, 0x0A	; 10
     8f4:	19 f4       	brne	.+6      	; 0x8fc <uart_putchar+0x24>
    uart_putchar('\r', stream);
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     8fc:	80 91 c0 00 	lds	r24, 0x00C0
     900:	85 ff       	sbrs	r24, 5
     902:	fc cf       	rjmp	.-8      	; 0x8fc <uart_putchar+0x24>
  UDR0 = c;
     904:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	1f 91       	pop	r17
     90e:	08 95       	ret

00000910 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     91e:	80 91 24 02 	lds	r24, 0x0224
     922:	90 91 25 02 	lds	r25, 0x0225
     926:	89 2b       	or	r24, r25
     928:	09 f0       	breq	.+2      	; 0x92c <uart_getchar+0x1c>
     92a:	9f c0       	rjmp	.+318    	; 0xa6a <uart_getchar+0x15a>
     92c:	06 e2       	ldi	r16, 0x26	; 38
     92e:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     930:	80 91 c0 00 	lds	r24, 0x00C0
     934:	87 ff       	sbrs	r24, 7
     936:	fc cf       	rjmp	.-8      	; 0x930 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     938:	80 91 c0 00 	lds	r24, 0x00C0
     93c:	84 ff       	sbrs	r24, 4
     93e:	03 c0       	rjmp	.+6      	; 0x946 <uart_getchar+0x36>
     940:	2e ef       	ldi	r18, 0xFE	; 254
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	a6 c0       	rjmp	.+332    	; 0xa92 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     946:	80 91 c0 00 	lds	r24, 0x00C0
     94a:	83 fd       	sbrc	r24, 3
     94c:	a0 c0       	rjmp	.+320    	; 0xa8e <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     94e:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     952:	9d 30       	cpi	r25, 0x0D	; 13
     954:	11 f0       	breq	.+4      	; 0x95a <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     956:	9a 30       	cpi	r25, 0x0A	; 10
     958:	69 f4       	brne	.+26     	; 0x974 <uart_getchar+0x64>
	  {
	    *cp = c;
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	f8 01       	movw	r30, r16
     95e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     960:	b7 01       	movw	r22, r14
     962:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
	    rxp = b;
     966:	86 e2       	ldi	r24, 0x26	; 38
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	90 93 25 02 	sts	0x0225, r25
     96e:	80 93 24 02 	sts	0x0224, r24
     972:	7b c0       	rjmp	.+246    	; 0xa6a <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     974:	99 30       	cpi	r25, 0x09	; 9
     976:	09 f4       	brne	.+2      	; 0x97a <uart_getchar+0x6a>
     978:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     97a:	89 2f       	mov	r24, r25
     97c:	80 52       	subi	r24, 0x20	; 32
     97e:	8f 35       	cpi	r24, 0x5F	; 95
     980:	10 f0       	brcs	.+4      	; 0x986 <uart_getchar+0x76>
     982:	90 3a       	cpi	r25, 0xA0	; 160
     984:	70 f0       	brcs	.+28     	; 0x9a2 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     986:	f2 e0       	ldi	r31, 0x02	; 2
     988:	05 37       	cpi	r16, 0x75	; 117
     98a:	1f 07       	cpc	r17, r31
     98c:	11 f4       	brne	.+4      	; 0x992 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     98e:	87 e0       	ldi	r24, 0x07	; 7
     990:	04 c0       	rjmp	.+8      	; 0x99a <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     992:	f8 01       	movw	r30, r16
     994:	91 93       	st	Z+, r25
     996:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     998:	89 2f       	mov	r24, r25
     99a:	b7 01       	movw	r22, r14
     99c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
     9a0:	c7 cf       	rjmp	.-114    	; 0x930 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     9a2:	92 31       	cpi	r25, 0x12	; 18
     9a4:	39 f1       	breq	.+78     	; 0x9f4 <uart_getchar+0xe4>
     9a6:	93 31       	cpi	r25, 0x13	; 19
     9a8:	38 f4       	brcc	.+14     	; 0x9b8 <uart_getchar+0xa8>
     9aa:	93 30       	cpi	r25, 0x03	; 3
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <uart_getchar+0xa0>
     9ae:	6f c0       	rjmp	.+222    	; 0xa8e <uart_getchar+0x17e>
     9b0:	98 30       	cpi	r25, 0x08	; 8
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <uart_getchar+0xa6>
     9b4:	bd cf       	rjmp	.-134    	; 0x930 <uart_getchar+0x20>
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <uart_getchar+0xba>
     9b8:	97 31       	cpi	r25, 0x17	; 23
     9ba:	09 f4       	brne	.+2      	; 0x9be <uart_getchar+0xae>
     9bc:	4b c0       	rjmp	.+150    	; 0xa54 <uart_getchar+0x144>
     9be:	9f 37       	cpi	r25, 0x7F	; 127
     9c0:	21 f0       	breq	.+8      	; 0x9ca <uart_getchar+0xba>
     9c2:	95 31       	cpi	r25, 0x15	; 21
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <uart_getchar+0xb8>
     9c6:	b4 cf       	rjmp	.-152    	; 0x930 <uart_getchar+0x20>
     9c8:	32 c0       	rjmp	.+100    	; 0xa2e <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     9ca:	f2 e0       	ldi	r31, 0x02	; 2
     9cc:	06 32       	cpi	r16, 0x26	; 38
     9ce:	1f 07       	cpc	r17, r31
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <uart_getchar+0xc4>
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <uart_getchar+0xc6>
     9d4:	ad cf       	rjmp	.-166    	; 0x930 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar(' ', stream);
     9de:	80 e2       	ldi	r24, 0x20	; 32
     9e0:	b7 01       	movw	r22, r14
     9e2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar('\b', stream);
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	b7 01       	movw	r22, r14
     9ea:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		cp--;
     9ee:	01 50       	subi	r16, 0x01	; 1
     9f0:	10 40       	sbci	r17, 0x00	; 0
     9f2:	9e cf       	rjmp	.-196    	; 0x930 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     9f4:	8d e0       	ldi	r24, 0x0D	; 13
     9f6:	b7 01       	movw	r22, r14
     9f8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
     9fc:	c6 e2       	ldi	r28, 0x26	; 38
     9fe:	d2 e0       	ldi	r29, 0x02	; 2
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     a02:	89 91       	ld	r24, Y+
     a04:	b7 01       	movw	r22, r14
     a06:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     a0a:	c0 17       	cp	r28, r16
     a0c:	d1 07       	cpc	r29, r17
     a0e:	c8 f3       	brcs	.-14     	; 0xa02 <uart_getchar+0xf2>
     a10:	8f cf       	rjmp	.-226    	; 0x930 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     a12:	88 e0       	ldi	r24, 0x08	; 8
     a14:	b7 01       	movw	r22, r14
     a16:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar(' ', stream);
     a1a:	80 e2       	ldi	r24, 0x20	; 32
     a1c:	b7 01       	movw	r22, r14
     a1e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar('\b', stream);
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	b7 01       	movw	r22, r14
     a26:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		cp--;
     a2a:	01 50       	subi	r16, 0x01	; 1
     a2c:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	06 32       	cpi	r16, 0x26	; 38
     a32:	18 07       	cpc	r17, r24
     a34:	09 f0       	breq	.+2      	; 0xa38 <uart_getchar+0x128>
     a36:	68 f7       	brcc	.-38     	; 0xa12 <uart_getchar+0x102>
     a38:	7b cf       	rjmp	.-266    	; 0x930 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	b7 01       	movw	r22, r14
     a3e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar(' ', stream);
     a42:	80 e2       	ldi	r24, 0x20	; 32
     a44:	b7 01       	movw	r22, r14
     a46:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
		uart_putchar('\b', stream);
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_putchar>
     a52:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a54:	e2 e0       	ldi	r30, 0x02	; 2
     a56:	06 32       	cpi	r16, 0x26	; 38
     a58:	1e 07       	cpc	r17, r30
     a5a:	09 f0       	breq	.+2      	; 0xa5e <uart_getchar+0x14e>
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <uart_getchar+0x150>
     a5e:	68 cf       	rjmp	.-304    	; 0x930 <uart_getchar+0x20>
     a60:	e8 01       	movw	r28, r16
     a62:	8a 91       	ld	r24, -Y
     a64:	80 32       	cpi	r24, 0x20	; 32
     a66:	49 f7       	brne	.-46     	; 0xa3a <uart_getchar+0x12a>
     a68:	63 cf       	rjmp	.-314    	; 0x930 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a6a:	e0 91 24 02 	lds	r30, 0x0224
     a6e:	f0 91 25 02 	lds	r31, 0x0225
     a72:	81 91       	ld	r24, Z+
     a74:	f0 93 25 02 	sts	0x0225, r31
     a78:	e0 93 24 02 	sts	0x0224, r30
  if (c == '\n')
     a7c:	8a 30       	cpi	r24, 0x0A	; 10
     a7e:	21 f4       	brne	.+8      	; 0xa88 <uart_getchar+0x178>
    rxp = 0;
     a80:	10 92 25 02 	sts	0x0225, r1
     a84:	10 92 24 02 	sts	0x0224, r1

  return c;
     a88:	28 2f       	mov	r18, r24
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <uart_getchar+0x182>
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	3f ef       	ldi	r19, 0xFF	; 255
}
     a92:	c9 01       	movw	r24, r18
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	08 95       	ret

00000aa2 <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRD = 0x0f;
     aa2:	2f e0       	ldi	r18, 0x0F	; 15
     aa4:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0xf0; 
     aa6:	80 ef       	ldi	r24, 0xF0	; 240
     aa8:	8b b9       	out	0x0b, r24	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aaa:	9a e1       	ldi	r25, 0x1A	; 26
     aac:	39 2f       	mov	r19, r25
     aae:	3a 95       	dec	r19
     ab0:	f1 f7       	brne	.-4      	; 0xaae <KeypadScan+0xc>
	_delay_us(5);
	key = PIND;
     ab2:	39 b1       	in	r19, 0x09	; 9
	
	//get upper nibble
	DDRD = 0xf0;
     ab4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0f; 
     ab6:	2b b9       	out	0x0b, r18	; 11
     ab8:	9a 95       	dec	r25
     aba:	f1 f7       	brne	.-4      	; 0xab8 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PIND;
     abc:	29 b1       	in	r18, 0x09	; 9
     abe:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     ac0:	2f 3f       	cpi	r18, 0xFF	; 255
     ac2:	61 f0       	breq	.+24     	; 0xadc <KeypadScan+0x3a>
     ac4:	eb e0       	ldi	r30, 0x0B	; 11
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     aca:	80 81       	ld	r24, Z
     acc:	9f 5f       	subi	r25, 0xFF	; 255
     ace:	82 17       	cp	r24, r18
     ad0:	11 f4       	brne	.+4      	; 0xad6 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     ad2:	89 2f       	mov	r24, r25
     ad4:	08 95       	ret
	_delay_us(5);
	key = key | PIND;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     ad6:	31 96       	adiw	r30, 0x01	; 1
     ad8:	90 31       	cpi	r25, 0x10	; 16
     ada:	b9 f7       	brne	.-18     	; 0xaca <KeypadScan+0x28>
     adc:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     ade:	08 95       	ret

00000ae0 <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     ae0:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     ae2:	80 91 78 02 	lds	r24, 0x0278
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	31 f4       	brne	.+12     	; 0xaf6 <KeypadAppend+0x16>
		KeypadFinished = 0;
     aea:	10 92 78 02 	sts	0x0278, r1
		KeypadInput = 0;
     aee:	10 92 77 02 	sts	0x0277, r1
     af2:	10 92 76 02 	sts	0x0276, r1
	}
	switch(key) {
     af6:	97 3d       	cpi	r25, 0xD7	; 215
     af8:	b9 f1       	breq	.+110    	; 0xb68 <KeypadAppend+0x88>
     afa:	98 3d       	cpi	r25, 0xD8	; 216
     afc:	98 f4       	brcc	.+38     	; 0xb24 <KeypadAppend+0x44>
     afe:	97 3b       	cpi	r25, 0xB7	; 183
     b00:	99 f1       	breq	.+102    	; 0xb68 <KeypadAppend+0x88>
     b02:	98 3b       	cpi	r25, 0xB8	; 184
     b04:	40 f4       	brcc	.+16     	; 0xb16 <KeypadAppend+0x36>
     b06:	9b 37       	cpi	r25, 0x7B	; 123
     b08:	79 f1       	breq	.+94     	; 0xb68 <KeypadAppend+0x88>
     b0a:	9e 37       	cpi	r25, 0x7E	; 126
     b0c:	69 f1       	breq	.+90     	; 0xb68 <KeypadAppend+0x88>
     b0e:	97 37       	cpi	r25, 0x77	; 119
     b10:	09 f0       	breq	.+2      	; 0xb14 <KeypadAppend+0x34>
     b12:	43 c0       	rjmp	.+134    	; 0xb9a <KeypadAppend+0xba>
     b14:	29 c0       	rjmp	.+82     	; 0xb68 <KeypadAppend+0x88>
     b16:	9d 3b       	cpi	r25, 0xBD	; 189
     b18:	19 f1       	breq	.+70     	; 0xb60 <KeypadAppend+0x80>
     b1a:	9e 3b       	cpi	r25, 0xBE	; 190
     b1c:	f9 f0       	breq	.+62     	; 0xb5c <KeypadAppend+0x7c>
     b1e:	9b 3b       	cpi	r25, 0xBB	; 187
     b20:	e1 f5       	brne	.+120    	; 0xb9a <KeypadAppend+0xba>
     b22:	20 c0       	rjmp	.+64     	; 0xb64 <KeypadAppend+0x84>
     b24:	97 3e       	cpi	r25, 0xE7	; 231
     b26:	01 f1       	breq	.+64     	; 0xb68 <KeypadAppend+0x88>
     b28:	98 3e       	cpi	r25, 0xE8	; 232
     b2a:	38 f4       	brcc	.+14     	; 0xb3a <KeypadAppend+0x5a>
     b2c:	9d 3d       	cpi	r25, 0xDD	; 221
     b2e:	91 f0       	breq	.+36     	; 0xb54 <KeypadAppend+0x74>
     b30:	9e 3d       	cpi	r25, 0xDE	; 222
     b32:	71 f0       	breq	.+28     	; 0xb50 <KeypadAppend+0x70>
     b34:	9b 3d       	cpi	r25, 0xDB	; 219
     b36:	89 f5       	brne	.+98     	; 0xb9a <KeypadAppend+0xba>
     b38:	0f c0       	rjmp	.+30     	; 0xb58 <KeypadAppend+0x78>
     b3a:	9d 3e       	cpi	r25, 0xED	; 237
     b3c:	29 f0       	breq	.+10     	; 0xb48 <KeypadAppend+0x68>
     b3e:	9e 3e       	cpi	r25, 0xEE	; 238
     b40:	b9 f0       	breq	.+46     	; 0xb70 <KeypadAppend+0x90>
     b42:	9b 3e       	cpi	r25, 0xEB	; 235
     b44:	51 f5       	brne	.+84     	; 0xb9a <KeypadAppend+0xba>
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <KeypadAppend+0x6c>
     b48:	42 e0       	ldi	r20, 0x02	; 2
     b4a:	13 c0       	rjmp	.+38     	; 0xb72 <KeypadAppend+0x92>
     b4c:	43 e0       	ldi	r20, 0x03	; 3
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <KeypadAppend+0x92>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     b50:	44 e0       	ldi	r20, 0x04	; 4
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <KeypadAppend+0x92>
		case KEY_4:
			c = 4;
			break;
     b54:	45 e0       	ldi	r20, 0x05	; 5
     b56:	0d c0       	rjmp	.+26     	; 0xb72 <KeypadAppend+0x92>
		case KEY_5:
			c = 5;
			break;
     b58:	46 e0       	ldi	r20, 0x06	; 6
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <KeypadAppend+0x92>
		case KEY_6:
			c = 6;
			break;
     b5c:	47 e0       	ldi	r20, 0x07	; 7
     b5e:	09 c0       	rjmp	.+18     	; 0xb72 <KeypadAppend+0x92>
		case KEY_7:
			c = 7;
			break;
     b60:	48 e0       	ldi	r20, 0x08	; 8
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <KeypadAppend+0x92>
		case KEY_8:
			c = 8;
			break;
     b64:	49 e0       	ldi	r20, 0x09	; 9
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <KeypadAppend+0x92>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 78 02 	sts	0x0278, r24
     b6e:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     b70:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     b72:	80 91 76 02 	lds	r24, 0x0276
     b76:	90 91 77 02 	lds	r25, 0x0277
     b7a:	9c 01       	movw	r18, r24
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	22 0f       	add	r18, r18
     b80:	33 1f       	adc	r19, r19
     b82:	6a 95       	dec	r22
     b84:	e1 f7       	brne	.-8      	; 0xb7e <KeypadAppend+0x9e>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	28 0f       	add	r18, r24
     b8c:	39 1f       	adc	r19, r25
     b8e:	24 0f       	add	r18, r20
     b90:	31 1d       	adc	r19, r1
     b92:	30 93 77 02 	sts	0x0277, r19
     b96:	20 93 76 02 	sts	0x0276, r18
     b9a:	08 95       	ret

00000b9c <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	debounceTime--;
     b9c:	80 91 b0 03 	lds	r24, 0x03B0
     ba0:	81 50       	subi	r24, 0x01	; 1
     ba2:	80 93 b0 03 	sts	0x03B0, r24
	uint8_t key = KeypadScan(); //Scan the keypad
     ba6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <KeypadScan>
     baa:	98 2f       	mov	r25, r24
	switch(keyState){
     bac:	80 91 79 02 	lds	r24, 0x0279
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	91 f0       	breq	.+36     	; 0xbd8 <KeypadDebounce+0x3c>
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	28 f0       	brcs	.+10     	; 0xbc2 <KeypadDebounce+0x26>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f1       	breq	.+66     	; 0xbfe <KeypadDebounce+0x62>
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	a1 f5       	brne	.+104    	; 0xc28 <KeypadDebounce+0x8c>
     bc0:	27 c0       	rjmp	.+78     	; 0xc10 <KeypadDebounce+0x74>
	
		case RELEASED:
			if (key){
     bc2:	99 23       	and	r25, r25
     bc4:	89 f1       	breq	.+98     	; 0xc28 <KeypadDebounce+0x8c>
				keyState = MAYBEPUSHED;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 79 02 	sts	0x0279, r24
				debounceTime = DEBOUNCE_TIME;
     bcc:	8e e1       	ldi	r24, 0x1E	; 30
     bce:	80 93 b0 03 	sts	0x03B0, r24
				checkKey = key;
     bd2:	90 93 b1 03 	sts	0x03B1, r25
     bd6:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     bd8:	80 91 b0 03 	lds	r24, 0x03B0
     bdc:	88 23       	and	r24, r24
     bde:	21 f5       	brne	.+72     	; 0xc28 <KeypadDebounce+0x8c>
				if (key && key == checkKey) {
     be0:	99 23       	and	r25, r25
     be2:	e1 f0       	breq	.+56     	; 0xc1c <KeypadDebounce+0x80>
     be4:	80 91 b1 03 	lds	r24, 0x03B1
     be8:	98 17       	cp	r25, r24
     bea:	c1 f4       	brne	.+48     	; 0xc1c <KeypadDebounce+0x80>
					keyState = PUSHED;
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	80 93 79 02 	sts	0x0279, r24
					curKey = key;
     bf2:	90 93 af 03 	sts	0x03AF, r25
					KeypadAppend(key);
     bf6:	89 2f       	mov	r24, r25
     bf8:	0e 94 70 05 	call	0xae0	; 0xae0 <KeypadAppend>
     bfc:	08 95       	ret
					keyState = RELEASED;
				}
			}
			break;
		case PUSHED:
			if (!key){
     bfe:	99 23       	and	r25, r25
     c00:	99 f4       	brne	.+38     	; 0xc28 <KeypadDebounce+0x8c>
				keyState = MAYBERELEASED;
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	80 93 79 02 	sts	0x0279, r24
				debounceTime = DEBOUNCE_TIME;
     c08:	8e e1       	ldi	r24, 0x1E	; 30
     c0a:	80 93 b0 03 	sts	0x03B0, r24
     c0e:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     c10:	80 91 b0 03 	lds	r24, 0x03B0
     c14:	88 23       	and	r24, r24
     c16:	41 f4       	brne	.+16     	; 0xc28 <KeypadDebounce+0x8c>
				if (!key) {
     c18:	99 23       	and	r25, r25
     c1a:	19 f4       	brne	.+6      	; 0xc22 <KeypadDebounce+0x86>
					keyState = RELEASED;
     c1c:	10 92 79 02 	sts	0x0279, r1
     c20:	08 95       	ret
				} else {
					keyState = PUSHED;
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 79 02 	sts	0x0279, r24
     c28:	08 95       	ret

00000c2a <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     c2a:	90 91 af 03 	lds	r25, 0x03AF
	if (curKey){
     c2e:	80 91 af 03 	lds	r24, 0x03AF
     c32:	88 23       	and	r24, r24
     c34:	11 f0       	breq	.+4      	; 0xc3a <KeypadKey+0x10>
		curKey = 0;
     c36:	10 92 af 03 	sts	0x03AF, r1
	}
	return tmpKey;
}
     c3a:	89 2f       	mov	r24, r25
     c3c:	08 95       	ret

00000c3e <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
int KeypadInt(void) {
	if (KeypadFinished) {
     c3e:	80 91 78 02 	lds	r24, 0x0278
     c42:	88 23       	and	r24, r24
     c44:	19 f4       	brne	.+6      	; 0xc4c <KeypadInt+0xe>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <KeypadInt+0x16>
		return KeypadInput;
     c4c:	20 91 76 02 	lds	r18, 0x0276
     c50:	30 91 77 02 	lds	r19, 0x0277
	} else {
		return 0;
	}
}
     c54:	c9 01       	movw	r24, r18
     c56:	08 95       	ret

00000c58 <__fixunssfsi>:
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	7b 01       	movw	r14, r22
     c62:	8c 01       	movw	r16, r24
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	5f e4       	ldi	r21, 0x4F	; 79
     c6c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__gesf2>
     c70:	88 23       	and	r24, r24
     c72:	8c f0       	brlt	.+34     	; 0xc96 <__fixunssfsi+0x3e>
     c74:	c8 01       	movw	r24, r16
     c76:	b7 01       	movw	r22, r14
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	5f e4       	ldi	r21, 0x4F	; 79
     c80:	0e 94 a4 07 	call	0xf48	; 0xf48 <__subsf3>
     c84:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixsfsi>
     c88:	9b 01       	movw	r18, r22
     c8a:	ac 01       	movw	r20, r24
     c8c:	20 50       	subi	r18, 0x00	; 0
     c8e:	30 40       	sbci	r19, 0x00	; 0
     c90:	40 40       	sbci	r20, 0x00	; 0
     c92:	50 48       	sbci	r21, 0x80	; 128
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <__fixunssfsi+0x4a>
     c96:	c8 01       	movw	r24, r16
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixsfsi>
     c9e:	9b 01       	movw	r18, r22
     ca0:	ac 01       	movw	r20, r24
     ca2:	b9 01       	movw	r22, r18
     ca4:	ca 01       	movw	r24, r20
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	08 95       	ret

00000cb0 <_fpadd_parts>:
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ee e5       	ldi	r30, 0x5E	; 94
     cb6:	f6 e0       	ldi	r31, 0x06	; 6
     cb8:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__prologue_saves__>
     cbc:	dc 01       	movw	r26, r24
     cbe:	2b 01       	movw	r4, r22
     cc0:	fa 01       	movw	r30, r20
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <_fpadd_parts+0x1a>
     cc8:	39 c1       	rjmp	.+626    	; 0xf3c <_fpadd_parts+0x28c>
     cca:	eb 01       	movw	r28, r22
     ccc:	88 81       	ld	r24, Y
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <_fpadd_parts+0x24>
     cd2:	33 c1       	rjmp	.+614    	; 0xf3a <_fpadd_parts+0x28a>
     cd4:	94 30       	cpi	r25, 0x04	; 4
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <_fpadd_parts+0x42>
     cd8:	84 30       	cpi	r24, 0x04	; 4
     cda:	09 f0       	breq	.+2      	; 0xcde <_fpadd_parts+0x2e>
     cdc:	2f c1       	rjmp	.+606    	; 0xf3c <_fpadd_parts+0x28c>
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 91       	ld	r25, X
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	98 17       	cp	r25, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <_fpadd_parts+0x3c>
     cea:	28 c1       	rjmp	.+592    	; 0xf3c <_fpadd_parts+0x28c>
     cec:	ab e1       	ldi	r26, 0x1B	; 27
     cee:	b1 e0       	ldi	r27, 0x01	; 1
     cf0:	25 c1       	rjmp	.+586    	; 0xf3c <_fpadd_parts+0x28c>
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <_fpadd_parts+0x48>
     cf6:	21 c1       	rjmp	.+578    	; 0xf3a <_fpadd_parts+0x28a>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	a9 f4       	brne	.+42     	; 0xd26 <_fpadd_parts+0x76>
     cfc:	92 30       	cpi	r25, 0x02	; 2
     cfe:	09 f0       	breq	.+2      	; 0xd02 <_fpadd_parts+0x52>
     d00:	1d c1       	rjmp	.+570    	; 0xf3c <_fpadd_parts+0x28c>
     d02:	9a 01       	movw	r18, r20
     d04:	ad 01       	movw	r20, r26
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	ea 01       	movw	r28, r20
     d0a:	09 90       	ld	r0, Y+
     d0c:	ae 01       	movw	r20, r28
     d0e:	e9 01       	movw	r28, r18
     d10:	09 92       	st	Y+, r0
     d12:	9e 01       	movw	r18, r28
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	c1 f7       	brne	.-16     	; 0xd08 <_fpadd_parts+0x58>
     d18:	e2 01       	movw	r28, r4
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	9c 91       	ld	r25, X
     d20:	89 23       	and	r24, r25
     d22:	81 83       	std	Z+1, r24	; 0x01
     d24:	08 c1       	rjmp	.+528    	; 0xf36 <_fpadd_parts+0x286>
     d26:	92 30       	cpi	r25, 0x02	; 2
     d28:	09 f4       	brne	.+2      	; 0xd2c <_fpadd_parts+0x7c>
     d2a:	07 c1       	rjmp	.+526    	; 0xf3a <_fpadd_parts+0x28a>
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	2d 90       	ld	r2, X+
     d30:	3c 90       	ld	r3, X
     d32:	13 97       	sbiw	r26, 0x03	; 3
     d34:	eb 01       	movw	r28, r22
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	ad 90       	ld	r10, X+
     d3e:	bd 90       	ld	r11, X+
     d40:	cd 90       	ld	r12, X+
     d42:	dc 90       	ld	r13, X
     d44:	17 97       	sbiw	r26, 0x07	; 7
     d46:	ec 80       	ldd	r14, Y+4	; 0x04
     d48:	fd 80       	ldd	r15, Y+5	; 0x05
     d4a:	0e 81       	ldd	r16, Y+6	; 0x06
     d4c:	1f 81       	ldd	r17, Y+7	; 0x07
     d4e:	91 01       	movw	r18, r2
     d50:	28 1b       	sub	r18, r24
     d52:	39 0b       	sbc	r19, r25
     d54:	b9 01       	movw	r22, r18
     d56:	37 ff       	sbrs	r19, 7
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <_fpadd_parts+0xb2>
     d5a:	66 27       	eor	r22, r22
     d5c:	77 27       	eor	r23, r23
     d5e:	62 1b       	sub	r22, r18
     d60:	73 0b       	sbc	r23, r19
     d62:	60 32       	cpi	r22, 0x20	; 32
     d64:	71 05       	cpc	r23, r1
     d66:	0c f0       	brlt	.+2      	; 0xd6a <_fpadd_parts+0xba>
     d68:	61 c0       	rjmp	.+194    	; 0xe2c <_fpadd_parts+0x17c>
     d6a:	12 16       	cp	r1, r18
     d6c:	13 06       	cpc	r1, r19
     d6e:	6c f5       	brge	.+90     	; 0xdca <_fpadd_parts+0x11a>
     d70:	37 01       	movw	r6, r14
     d72:	48 01       	movw	r8, r16
     d74:	06 2e       	mov	r0, r22
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <_fpadd_parts+0xd0>
     d78:	96 94       	lsr	r9
     d7a:	87 94       	ror	r8
     d7c:	77 94       	ror	r7
     d7e:	67 94       	ror	r6
     d80:	0a 94       	dec	r0
     d82:	d2 f7       	brpl	.-12     	; 0xd78 <_fpadd_parts+0xc8>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <_fpadd_parts+0xe6>
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	44 1f       	adc	r20, r20
     d94:	55 1f       	adc	r21, r21
     d96:	6a 95       	dec	r22
     d98:	d2 f7       	brpl	.-12     	; 0xd8e <_fpadd_parts+0xde>
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	30 40       	sbci	r19, 0x00	; 0
     d9e:	40 40       	sbci	r20, 0x00	; 0
     da0:	50 40       	sbci	r21, 0x00	; 0
     da2:	2e 21       	and	r18, r14
     da4:	3f 21       	and	r19, r15
     da6:	40 23       	and	r20, r16
     da8:	51 23       	and	r21, r17
     daa:	21 15       	cp	r18, r1
     dac:	31 05       	cpc	r19, r1
     dae:	41 05       	cpc	r20, r1
     db0:	51 05       	cpc	r21, r1
     db2:	21 f0       	breq	.+8      	; 0xdbc <_fpadd_parts+0x10c>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	79 01       	movw	r14, r18
     dbe:	8a 01       	movw	r16, r20
     dc0:	e6 28       	or	r14, r6
     dc2:	f7 28       	or	r15, r7
     dc4:	08 29       	or	r16, r8
     dc6:	19 29       	or	r17, r9
     dc8:	3c c0       	rjmp	.+120    	; 0xe42 <_fpadd_parts+0x192>
     dca:	23 2b       	or	r18, r19
     dcc:	d1 f1       	breq	.+116    	; 0xe42 <_fpadd_parts+0x192>
     dce:	26 0e       	add	r2, r22
     dd0:	37 1e       	adc	r3, r23
     dd2:	35 01       	movw	r6, r10
     dd4:	46 01       	movw	r8, r12
     dd6:	06 2e       	mov	r0, r22
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <_fpadd_parts+0x132>
     dda:	96 94       	lsr	r9
     ddc:	87 94       	ror	r8
     dde:	77 94       	ror	r7
     de0:	67 94       	ror	r6
     de2:	0a 94       	dec	r0
     de4:	d2 f7       	brpl	.-12     	; 0xdda <_fpadd_parts+0x12a>
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <_fpadd_parts+0x148>
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	44 1f       	adc	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	6a 95       	dec	r22
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <_fpadd_parts+0x140>
     dfc:	21 50       	subi	r18, 0x01	; 1
     dfe:	30 40       	sbci	r19, 0x00	; 0
     e00:	40 40       	sbci	r20, 0x00	; 0
     e02:	50 40       	sbci	r21, 0x00	; 0
     e04:	2a 21       	and	r18, r10
     e06:	3b 21       	and	r19, r11
     e08:	4c 21       	and	r20, r12
     e0a:	5d 21       	and	r21, r13
     e0c:	21 15       	cp	r18, r1
     e0e:	31 05       	cpc	r19, r1
     e10:	41 05       	cpc	r20, r1
     e12:	51 05       	cpc	r21, r1
     e14:	21 f0       	breq	.+8      	; 0xe1e <_fpadd_parts+0x16e>
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	59 01       	movw	r10, r18
     e20:	6a 01       	movw	r12, r20
     e22:	a6 28       	or	r10, r6
     e24:	b7 28       	or	r11, r7
     e26:	c8 28       	or	r12, r8
     e28:	d9 28       	or	r13, r9
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <_fpadd_parts+0x192>
     e2c:	82 15       	cp	r24, r2
     e2e:	93 05       	cpc	r25, r3
     e30:	2c f0       	brlt	.+10     	; 0xe3c <_fpadd_parts+0x18c>
     e32:	1c 01       	movw	r2, r24
     e34:	aa 24       	eor	r10, r10
     e36:	bb 24       	eor	r11, r11
     e38:	65 01       	movw	r12, r10
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <_fpadd_parts+0x192>
     e3c:	ee 24       	eor	r14, r14
     e3e:	ff 24       	eor	r15, r15
     e40:	87 01       	movw	r16, r14
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 91       	ld	r25, X
     e46:	d2 01       	movw	r26, r4
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	8c 91       	ld	r24, X
     e4c:	98 17       	cp	r25, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <_fpadd_parts+0x1a2>
     e50:	45 c0       	rjmp	.+138    	; 0xedc <_fpadd_parts+0x22c>
     e52:	99 23       	and	r25, r25
     e54:	39 f0       	breq	.+14     	; 0xe64 <_fpadd_parts+0x1b4>
     e56:	a8 01       	movw	r20, r16
     e58:	97 01       	movw	r18, r14
     e5a:	2a 19       	sub	r18, r10
     e5c:	3b 09       	sbc	r19, r11
     e5e:	4c 09       	sbc	r20, r12
     e60:	5d 09       	sbc	r21, r13
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <_fpadd_parts+0x1c0>
     e64:	a6 01       	movw	r20, r12
     e66:	95 01       	movw	r18, r10
     e68:	2e 19       	sub	r18, r14
     e6a:	3f 09       	sbc	r19, r15
     e6c:	40 0b       	sbc	r20, r16
     e6e:	51 0b       	sbc	r21, r17
     e70:	57 fd       	sbrc	r21, 7
     e72:	08 c0       	rjmp	.+16     	; 0xe84 <_fpadd_parts+0x1d4>
     e74:	11 82       	std	Z+1, r1	; 0x01
     e76:	33 82       	std	Z+3, r3	; 0x03
     e78:	22 82       	std	Z+2, r2	; 0x02
     e7a:	24 83       	std	Z+4, r18	; 0x04
     e7c:	35 83       	std	Z+5, r19	; 0x05
     e7e:	46 83       	std	Z+6, r20	; 0x06
     e80:	57 83       	std	Z+7, r21	; 0x07
     e82:	1d c0       	rjmp	.+58     	; 0xebe <_fpadd_parts+0x20e>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	81 83       	std	Z+1, r24	; 0x01
     e88:	33 82       	std	Z+3, r3	; 0x03
     e8a:	22 82       	std	Z+2, r2	; 0x02
     e8c:	88 27       	eor	r24, r24
     e8e:	99 27       	eor	r25, r25
     e90:	dc 01       	movw	r26, r24
     e92:	82 1b       	sub	r24, r18
     e94:	93 0b       	sbc	r25, r19
     e96:	a4 0b       	sbc	r26, r20
     e98:	b5 0b       	sbc	r27, r21
     e9a:	84 83       	std	Z+4, r24	; 0x04
     e9c:	95 83       	std	Z+5, r25	; 0x05
     e9e:	a6 83       	std	Z+6, r26	; 0x06
     ea0:	b7 83       	std	Z+7, r27	; 0x07
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <_fpadd_parts+0x20e>
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	44 1f       	adc	r20, r20
     eaa:	55 1f       	adc	r21, r21
     eac:	24 83       	std	Z+4, r18	; 0x04
     eae:	35 83       	std	Z+5, r19	; 0x05
     eb0:	46 83       	std	Z+6, r20	; 0x06
     eb2:	57 83       	std	Z+7, r21	; 0x07
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	93 83       	std	Z+3, r25	; 0x03
     ebc:	82 83       	std	Z+2, r24	; 0x02
     ebe:	24 81       	ldd	r18, Z+4	; 0x04
     ec0:	35 81       	ldd	r19, Z+5	; 0x05
     ec2:	46 81       	ldd	r20, Z+6	; 0x06
     ec4:	57 81       	ldd	r21, Z+7	; 0x07
     ec6:	da 01       	movw	r26, r20
     ec8:	c9 01       	movw	r24, r18
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	a1 09       	sbc	r26, r1
     ece:	b1 09       	sbc	r27, r1
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	af 4f       	sbci	r26, 0xFF	; 255
     ed6:	bf 43       	sbci	r27, 0x3F	; 63
     ed8:	28 f3       	brcs	.-54     	; 0xea4 <_fpadd_parts+0x1f4>
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <_fpadd_parts+0x242>
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	33 82       	std	Z+3, r3	; 0x03
     ee0:	22 82       	std	Z+2, r2	; 0x02
     ee2:	ea 0c       	add	r14, r10
     ee4:	fb 1c       	adc	r15, r11
     ee6:	0c 1d       	adc	r16, r12
     ee8:	1d 1d       	adc	r17, r13
     eea:	e4 82       	std	Z+4, r14	; 0x04
     eec:	f5 82       	std	Z+5, r15	; 0x05
     eee:	06 83       	std	Z+6, r16	; 0x06
     ef0:	17 83       	std	Z+7, r17	; 0x07
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	80 83       	st	Z, r24
     ef6:	24 81       	ldd	r18, Z+4	; 0x04
     ef8:	35 81       	ldd	r19, Z+5	; 0x05
     efa:	46 81       	ldd	r20, Z+6	; 0x06
     efc:	57 81       	ldd	r21, Z+7	; 0x07
     efe:	57 ff       	sbrs	r21, 7
     f00:	1a c0       	rjmp	.+52     	; 0xf36 <_fpadd_parts+0x286>
     f02:	c9 01       	movw	r24, r18
     f04:	aa 27       	eor	r26, r26
     f06:	97 fd       	sbrc	r25, 7
     f08:	a0 95       	com	r26
     f0a:	ba 2f       	mov	r27, r26
     f0c:	81 70       	andi	r24, 0x01	; 1
     f0e:	90 70       	andi	r25, 0x00	; 0
     f10:	a0 70       	andi	r26, 0x00	; 0
     f12:	b0 70       	andi	r27, 0x00	; 0
     f14:	56 95       	lsr	r21
     f16:	47 95       	ror	r20
     f18:	37 95       	ror	r19
     f1a:	27 95       	ror	r18
     f1c:	82 2b       	or	r24, r18
     f1e:	93 2b       	or	r25, r19
     f20:	a4 2b       	or	r26, r20
     f22:	b5 2b       	or	r27, r21
     f24:	84 83       	std	Z+4, r24	; 0x04
     f26:	95 83       	std	Z+5, r25	; 0x05
     f28:	a6 83       	std	Z+6, r26	; 0x06
     f2a:	b7 83       	std	Z+7, r27	; 0x07
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	93 83       	std	Z+3, r25	; 0x03
     f34:	82 83       	std	Z+2, r24	; 0x02
     f36:	df 01       	movw	r26, r30
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <_fpadd_parts+0x28c>
     f3a:	d2 01       	movw	r26, r4
     f3c:	cd 01       	movw	r24, r26
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	e2 e1       	ldi	r30, 0x12	; 18
     f44:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__epilogue_restores__>

00000f48 <__subsf3>:
     f48:	a0 e2       	ldi	r26, 0x20	; 32
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea ea       	ldi	r30, 0xAA	; 170
     f4e:	f7 e0       	ldi	r31, 0x07	; 7
     f50:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__prologue_saves__+0x18>
     f54:	69 83       	std	Y+1, r22	; 0x01
     f56:	7a 83       	std	Y+2, r23	; 0x02
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	2d 83       	std	Y+5, r18	; 0x05
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	4f 83       	std	Y+7, r20	; 0x07
     f62:	58 87       	std	Y+8, r21	; 0x08
     f64:	e9 e0       	ldi	r30, 0x09	; 9
     f66:	ee 2e       	mov	r14, r30
     f68:	f1 2c       	mov	r15, r1
     f6a:	ec 0e       	add	r14, r28
     f6c:	fd 1e       	adc	r15, r29
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	b7 01       	movw	r22, r14
     f74:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
     f78:	8e 01       	movw	r16, r28
     f7a:	0f 5e       	subi	r16, 0xEF	; 239
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ce 01       	movw	r24, r28
     f80:	05 96       	adiw	r24, 0x05	; 5
     f82:	b8 01       	movw	r22, r16
     f84:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
     f88:	8a 89       	ldd	r24, Y+18	; 0x12
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	89 27       	eor	r24, r25
     f8e:	8a 8b       	std	Y+18, r24	; 0x12
     f90:	c7 01       	movw	r24, r14
     f92:	b8 01       	movw	r22, r16
     f94:	ae 01       	movw	r20, r28
     f96:	47 5e       	subi	r20, 0xE7	; 231
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_fpadd_parts>
     f9e:	0e 94 48 0a 	call	0x1490	; 0x1490 <__pack_f>
     fa2:	a0 96       	adiw	r28, 0x20	; 32
     fa4:	e6 e0       	ldi	r30, 0x06	; 6
     fa6:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0x18>

00000faa <__addsf3>:
     faa:	a0 e2       	ldi	r26, 0x20	; 32
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	eb ed       	ldi	r30, 0xDB	; 219
     fb0:	f7 e0       	ldi	r31, 0x07	; 7
     fb2:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__prologue_saves__+0x18>
     fb6:	69 83       	std	Y+1, r22	; 0x01
     fb8:	7a 83       	std	Y+2, r23	; 0x02
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	2d 83       	std	Y+5, r18	; 0x05
     fc0:	3e 83       	std	Y+6, r19	; 0x06
     fc2:	4f 83       	std	Y+7, r20	; 0x07
     fc4:	58 87       	std	Y+8, r21	; 0x08
     fc6:	f9 e0       	ldi	r31, 0x09	; 9
     fc8:	ef 2e       	mov	r14, r31
     fca:	f1 2c       	mov	r15, r1
     fcc:	ec 0e       	add	r14, r28
     fce:	fd 1e       	adc	r15, r29
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	b7 01       	movw	r22, r14
     fd6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
     fda:	8e 01       	movw	r16, r28
     fdc:	0f 5e       	subi	r16, 0xEF	; 239
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	ce 01       	movw	r24, r28
     fe2:	05 96       	adiw	r24, 0x05	; 5
     fe4:	b8 01       	movw	r22, r16
     fe6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
     fea:	c7 01       	movw	r24, r14
     fec:	b8 01       	movw	r22, r16
     fee:	ae 01       	movw	r20, r28
     ff0:	47 5e       	subi	r20, 0xE7	; 231
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_fpadd_parts>
     ff8:	0e 94 48 0a 	call	0x1490	; 0x1490 <__pack_f>
     ffc:	a0 96       	adiw	r28, 0x20	; 32
     ffe:	e6 e0       	ldi	r30, 0x06	; 6
    1000:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0x18>

00001004 <__mulsf3>:
    1004:	a0 e2       	ldi	r26, 0x20	; 32
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e0       	ldi	r30, 0x08	; 8
    100a:	f8 e0       	ldi	r31, 0x08	; 8
    100c:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__prologue_saves__>
    1010:	69 83       	std	Y+1, r22	; 0x01
    1012:	7a 83       	std	Y+2, r23	; 0x02
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	2d 83       	std	Y+5, r18	; 0x05
    101a:	3e 83       	std	Y+6, r19	; 0x06
    101c:	4f 83       	std	Y+7, r20	; 0x07
    101e:	58 87       	std	Y+8, r21	; 0x08
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	be 01       	movw	r22, r28
    1026:	67 5f       	subi	r22, 0xF7	; 247
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
    102e:	ce 01       	movw	r24, r28
    1030:	05 96       	adiw	r24, 0x05	; 5
    1032:	be 01       	movw	r22, r28
    1034:	6f 5e       	subi	r22, 0xEF	; 239
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
    103c:	99 85       	ldd	r25, Y+9	; 0x09
    103e:	92 30       	cpi	r25, 0x02	; 2
    1040:	88 f0       	brcs	.+34     	; 0x1064 <__mulsf3+0x60>
    1042:	89 89       	ldd	r24, Y+17	; 0x11
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	c8 f0       	brcs	.+50     	; 0x107a <__mulsf3+0x76>
    1048:	94 30       	cpi	r25, 0x04	; 4
    104a:	19 f4       	brne	.+6      	; 0x1052 <__mulsf3+0x4e>
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	51 f4       	brne	.+20     	; 0x1064 <__mulsf3+0x60>
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__mulsf3+0x56>
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	29 f4       	brne	.+10     	; 0x1060 <__mulsf3+0x5c>
    1056:	92 30       	cpi	r25, 0x02	; 2
    1058:	81 f4       	brne	.+32     	; 0x107a <__mulsf3+0x76>
    105a:	8b e1       	ldi	r24, 0x1B	; 27
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	c6 c0       	rjmp	.+396    	; 0x11ec <__stack+0xed>
    1060:	92 30       	cpi	r25, 0x02	; 2
    1062:	49 f4       	brne	.+18     	; 0x1076 <__mulsf3+0x72>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	8a 89       	ldd	r24, Y+18	; 0x12
    106a:	98 13       	cpse	r25, r24
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	2a 87       	std	Y+10, r18	; 0x0a
    1070:	ce 01       	movw	r24, r28
    1072:	09 96       	adiw	r24, 0x09	; 9
    1074:	bb c0       	rjmp	.+374    	; 0x11ec <__stack+0xed>
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	49 f4       	brne	.+18     	; 0x108c <__mulsf3+0x88>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	98 13       	cpse	r25, r24
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	2a 8b       	std	Y+18, r18	; 0x12
    1086:	ce 01       	movw	r24, r28
    1088:	41 96       	adiw	r24, 0x11	; 17
    108a:	b0 c0       	rjmp	.+352    	; 0x11ec <__stack+0xed>
    108c:	2d 84       	ldd	r2, Y+13	; 0x0d
    108e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1090:	4f 84       	ldd	r4, Y+15	; 0x0f
    1092:	58 88       	ldd	r5, Y+16	; 0x10
    1094:	6d 88       	ldd	r6, Y+21	; 0x15
    1096:	7e 88       	ldd	r7, Y+22	; 0x16
    1098:	8f 88       	ldd	r8, Y+23	; 0x17
    109a:	98 8c       	ldd	r9, Y+24	; 0x18
    109c:	ee 24       	eor	r14, r14
    109e:	ff 24       	eor	r15, r15
    10a0:	87 01       	movw	r16, r14
    10a2:	aa 24       	eor	r10, r10
    10a4:	bb 24       	eor	r11, r11
    10a6:	65 01       	movw	r12, r10
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	c1 01       	movw	r24, r2
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	89 2b       	or	r24, r25
    10bc:	e9 f0       	breq	.+58     	; 0x10f8 <__mulsf3+0xf4>
    10be:	e6 0c       	add	r14, r6
    10c0:	f7 1c       	adc	r15, r7
    10c2:	08 1d       	adc	r16, r8
    10c4:	19 1d       	adc	r17, r9
    10c6:	9a 01       	movw	r18, r20
    10c8:	ab 01       	movw	r20, r22
    10ca:	2a 0d       	add	r18, r10
    10cc:	3b 1d       	adc	r19, r11
    10ce:	4c 1d       	adc	r20, r12
    10d0:	5d 1d       	adc	r21, r13
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 14       	cp	r14, r6
    10dc:	f7 04       	cpc	r15, r7
    10de:	08 05       	cpc	r16, r8
    10e0:	19 05       	cpc	r17, r9
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <__mulsf3+0xe8>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ba 01       	movw	r22, r20
    10ee:	a9 01       	movw	r20, r18
    10f0:	48 0f       	add	r20, r24
    10f2:	59 1f       	adc	r21, r25
    10f4:	6a 1f       	adc	r22, r26
    10f6:	7b 1f       	adc	r23, r27
    10f8:	aa 0c       	add	r10, r10
    10fa:	bb 1c       	adc	r11, r11
    10fc:	cc 1c       	adc	r12, r12
    10fe:	dd 1c       	adc	r13, r13
    1100:	97 fe       	sbrs	r9, 7
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <__stack+0x15>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	a8 2a       	or	r10, r24
    110e:	b9 2a       	or	r11, r25
    1110:	ca 2a       	or	r12, r26
    1112:	db 2a       	or	r13, r27
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	e0 32       	cpi	r30, 0x20	; 32
    1118:	f1 05       	cpc	r31, r1
    111a:	49 f0       	breq	.+18     	; 0x112e <__stack+0x2f>
    111c:	66 0c       	add	r6, r6
    111e:	77 1c       	adc	r7, r7
    1120:	88 1c       	adc	r8, r8
    1122:	99 1c       	adc	r9, r9
    1124:	56 94       	lsr	r5
    1126:	47 94       	ror	r4
    1128:	37 94       	ror	r3
    112a:	27 94       	ror	r2
    112c:	c3 cf       	rjmp	.-122    	; 0x10b4 <__mulsf3+0xb0>
    112e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1130:	ea 89       	ldd	r30, Y+18	; 0x12
    1132:	2b 89       	ldd	r18, Y+19	; 0x13
    1134:	3c 89       	ldd	r19, Y+20	; 0x14
    1136:	8b 85       	ldd	r24, Y+11	; 0x0b
    1138:	9c 85       	ldd	r25, Y+12	; 0x0c
    113a:	28 0f       	add	r18, r24
    113c:	39 1f       	adc	r19, r25
    113e:	2e 5f       	subi	r18, 0xFE	; 254
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	17 c0       	rjmp	.+46     	; 0x1172 <__stack+0x73>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	89 2b       	or	r24, r25
    114c:	61 f0       	breq	.+24     	; 0x1166 <__stack+0x67>
    114e:	16 95       	lsr	r17
    1150:	07 95       	ror	r16
    1152:	f7 94       	ror	r15
    1154:	e7 94       	ror	r14
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e8       	ldi	r27, 0x80	; 128
    115e:	e8 2a       	or	r14, r24
    1160:	f9 2a       	or	r15, r25
    1162:	0a 2b       	or	r16, r26
    1164:	1b 2b       	or	r17, r27
    1166:	76 95       	lsr	r23
    1168:	67 95       	ror	r22
    116a:	57 95       	ror	r21
    116c:	47 95       	ror	r20
    116e:	2f 5f       	subi	r18, 0xFF	; 255
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	77 fd       	sbrc	r23, 7
    1174:	e7 cf       	rjmp	.-50     	; 0x1144 <__stack+0x45>
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <__stack+0x91>
    1178:	44 0f       	add	r20, r20
    117a:	55 1f       	adc	r21, r21
    117c:	66 1f       	adc	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	17 fd       	sbrc	r17, 7
    1182:	41 60       	ori	r20, 0x01	; 1
    1184:	ee 0c       	add	r14, r14
    1186:	ff 1c       	adc	r15, r15
    1188:	00 1f       	adc	r16, r16
    118a:	11 1f       	adc	r17, r17
    118c:	21 50       	subi	r18, 0x01	; 1
    118e:	30 40       	sbci	r19, 0x00	; 0
    1190:	40 30       	cpi	r20, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	59 07       	cpc	r21, r25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	69 07       	cpc	r22, r25
    119a:	90 e4       	ldi	r25, 0x40	; 64
    119c:	79 07       	cpc	r23, r25
    119e:	60 f3       	brcs	.-40     	; 0x1178 <__stack+0x79>
    11a0:	2b 8f       	std	Y+27, r18	; 0x1b
    11a2:	3c 8f       	std	Y+28, r19	; 0x1c
    11a4:	db 01       	movw	r26, r22
    11a6:	ca 01       	movw	r24, r20
    11a8:	8f 77       	andi	r24, 0x7F	; 127
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	a0 70       	andi	r26, 0x00	; 0
    11ae:	b0 70       	andi	r27, 0x00	; 0
    11b0:	80 34       	cpi	r24, 0x40	; 64
    11b2:	91 05       	cpc	r25, r1
    11b4:	a1 05       	cpc	r26, r1
    11b6:	b1 05       	cpc	r27, r1
    11b8:	61 f4       	brne	.+24     	; 0x11d2 <__stack+0xd3>
    11ba:	47 fd       	sbrc	r20, 7
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <__stack+0xd3>
    11be:	e1 14       	cp	r14, r1
    11c0:	f1 04       	cpc	r15, r1
    11c2:	01 05       	cpc	r16, r1
    11c4:	11 05       	cpc	r17, r1
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <__stack+0xd3>
    11c8:	40 5c       	subi	r20, 0xC0	; 192
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	6f 4f       	sbci	r22, 0xFF	; 255
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	40 78       	andi	r20, 0x80	; 128
    11d2:	1a 8e       	std	Y+26, r1	; 0x1a
    11d4:	fe 17       	cp	r31, r30
    11d6:	11 f0       	breq	.+4      	; 0x11dc <__stack+0xdd>
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8a 8f       	std	Y+26, r24	; 0x1a
    11dc:	4d 8f       	std	Y+29, r20	; 0x1d
    11de:	5e 8f       	std	Y+30, r21	; 0x1e
    11e0:	6f 8f       	std	Y+31, r22	; 0x1f
    11e2:	78 a3       	std	Y+32, r23	; 0x20
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	89 8f       	std	Y+25, r24	; 0x19
    11e8:	ce 01       	movw	r24, r28
    11ea:	49 96       	adiw	r24, 0x19	; 25
    11ec:	0e 94 48 0a 	call	0x1490	; 0x1490 <__pack_f>
    11f0:	a0 96       	adiw	r28, 0x20	; 32
    11f2:	e2 e1       	ldi	r30, 0x12	; 18
    11f4:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__epilogue_restores__>

000011f8 <__gesf2>:
    11f8:	a8 e1       	ldi	r26, 0x18	; 24
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e2 e0       	ldi	r30, 0x02	; 2
    11fe:	f9 e0       	ldi	r31, 0x09	; 9
    1200:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__prologue_saves__+0x18>
    1204:	69 83       	std	Y+1, r22	; 0x01
    1206:	7a 83       	std	Y+2, r23	; 0x02
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	2d 83       	std	Y+5, r18	; 0x05
    120e:	3e 83       	std	Y+6, r19	; 0x06
    1210:	4f 83       	std	Y+7, r20	; 0x07
    1212:	58 87       	std	Y+8, r21	; 0x08
    1214:	89 e0       	ldi	r24, 0x09	; 9
    1216:	e8 2e       	mov	r14, r24
    1218:	f1 2c       	mov	r15, r1
    121a:	ec 0e       	add	r14, r28
    121c:	fd 1e       	adc	r15, r29
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	b7 01       	movw	r22, r14
    1224:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
    1228:	8e 01       	movw	r16, r28
    122a:	0f 5e       	subi	r16, 0xEF	; 239
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	ce 01       	movw	r24, r28
    1230:	05 96       	adiw	r24, 0x05	; 5
    1232:	b8 01       	movw	r22, r16
    1234:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	40 f0       	brcs	.+16     	; 0x124e <__gesf2+0x56>
    123e:	89 89       	ldd	r24, Y+17	; 0x11
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	28 f0       	brcs	.+10     	; 0x124e <__gesf2+0x56>
    1244:	c7 01       	movw	r24, r14
    1246:	b8 01       	movw	r22, r16
    1248:	0e 94 95 0b 	call	0x172a	; 0x172a <__fpcmp_parts_f>
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <__gesf2+0x58>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	68 96       	adiw	r28, 0x18	; 24
    1252:	e6 e0       	ldi	r30, 0x06	; 6
    1254:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0x18>

00001258 <__fixsfsi>:
    1258:	ac e0       	ldi	r26, 0x0C	; 12
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f9 e0       	ldi	r31, 0x09	; 9
    1260:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__prologue_saves__+0x20>
    1264:	69 83       	std	Y+1, r22	; 0x01
    1266:	7a 83       	std	Y+2, r23	; 0x02
    1268:	8b 83       	std	Y+3, r24	; 0x03
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	be 01       	movw	r22, r28
    1272:	6b 5f       	subi	r22, 0xFB	; 251
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	0e 94 1d 0b 	call	0x163a	; 0x163a <__unpack_f>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	61 f1       	breq	.+88     	; 0x12d8 <__fixsfsi+0x80>
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	50 f1       	brcs	.+84     	; 0x12d8 <__fixsfsi+0x80>
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	21 f4       	brne	.+8      	; 0x1290 <__fixsfsi+0x38>
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	88 23       	and	r24, r24
    128c:	51 f1       	breq	.+84     	; 0x12e2 <__fixsfsi+0x8a>
    128e:	2e c0       	rjmp	.+92     	; 0x12ec <__fixsfsi+0x94>
    1290:	2f 81       	ldd	r18, Y+7	; 0x07
    1292:	38 85       	ldd	r19, Y+8	; 0x08
    1294:	37 fd       	sbrc	r19, 7
    1296:	20 c0       	rjmp	.+64     	; 0x12d8 <__fixsfsi+0x80>
    1298:	6e 81       	ldd	r22, Y+6	; 0x06
    129a:	2f 31       	cpi	r18, 0x1F	; 31
    129c:	31 05       	cpc	r19, r1
    129e:	1c f0       	brlt	.+6      	; 0x12a6 <__fixsfsi+0x4e>
    12a0:	66 23       	and	r22, r22
    12a2:	f9 f0       	breq	.+62     	; 0x12e2 <__fixsfsi+0x8a>
    12a4:	23 c0       	rjmp	.+70     	; 0x12ec <__fixsfsi+0x94>
    12a6:	8e e1       	ldi	r24, 0x1E	; 30
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	82 1b       	sub	r24, r18
    12ac:	93 0b       	sbc	r25, r19
    12ae:	29 85       	ldd	r18, Y+9	; 0x09
    12b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    12b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <__fixsfsi+0x68>
    12b8:	56 95       	lsr	r21
    12ba:	47 95       	ror	r20
    12bc:	37 95       	ror	r19
    12be:	27 95       	ror	r18
    12c0:	8a 95       	dec	r24
    12c2:	d2 f7       	brpl	.-12     	; 0x12b8 <__fixsfsi+0x60>
    12c4:	66 23       	and	r22, r22
    12c6:	b1 f0       	breq	.+44     	; 0x12f4 <__fixsfsi+0x9c>
    12c8:	50 95       	com	r21
    12ca:	40 95       	com	r20
    12cc:	30 95       	com	r19
    12ce:	21 95       	neg	r18
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	4f 4f       	sbci	r20, 0xFF	; 255
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <__fixsfsi+0x9c>
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <__fixsfsi+0x9c>
    12e2:	2f ef       	ldi	r18, 0xFF	; 255
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f ef       	ldi	r20, 0xFF	; 255
    12e8:	5f e7       	ldi	r21, 0x7F	; 127
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <__fixsfsi+0x9c>
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	50 e8       	ldi	r21, 0x80	; 128
    12f4:	b9 01       	movw	r22, r18
    12f6:	ca 01       	movw	r24, r20
    12f8:	2c 96       	adiw	r28, 0x0c	; 12
    12fa:	e2 e0       	ldi	r30, 0x02	; 2
    12fc:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__epilogue_restores__+0x20>

00001300 <__floatunsisf>:
    1300:	a8 e0       	ldi	r26, 0x08	; 8
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e8       	ldi	r30, 0x86	; 134
    1306:	f9 e0       	ldi	r31, 0x09	; 9
    1308:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__prologue_saves__+0x10>
    130c:	7b 01       	movw	r14, r22
    130e:	8c 01       	movw	r16, r24
    1310:	61 15       	cp	r22, r1
    1312:	71 05       	cpc	r23, r1
    1314:	81 05       	cpc	r24, r1
    1316:	91 05       	cpc	r25, r1
    1318:	19 f4       	brne	.+6      	; 0x1320 <__floatunsisf+0x20>
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	60 c0       	rjmp	.+192    	; 0x13e0 <__floatunsisf+0xe0>
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	8e e1       	ldi	r24, 0x1E	; 30
    1326:	c8 2e       	mov	r12, r24
    1328:	d1 2c       	mov	r13, r1
    132a:	dc 82       	std	Y+4, r13	; 0x04
    132c:	cb 82       	std	Y+3, r12	; 0x03
    132e:	ed 82       	std	Y+5, r14	; 0x05
    1330:	fe 82       	std	Y+6, r15	; 0x06
    1332:	0f 83       	std	Y+7, r16	; 0x07
    1334:	18 87       	std	Y+8, r17	; 0x08
    1336:	c8 01       	movw	r24, r16
    1338:	b7 01       	movw	r22, r14
    133a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__clzsi2>
    133e:	fc 01       	movw	r30, r24
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	f7 ff       	sbrs	r31, 7
    1344:	3b c0       	rjmp	.+118    	; 0x13bc <__floatunsisf+0xbc>
    1346:	22 27       	eor	r18, r18
    1348:	33 27       	eor	r19, r19
    134a:	2e 1b       	sub	r18, r30
    134c:	3f 0b       	sbc	r19, r31
    134e:	57 01       	movw	r10, r14
    1350:	68 01       	movw	r12, r16
    1352:	02 2e       	mov	r0, r18
    1354:	04 c0       	rjmp	.+8      	; 0x135e <__floatunsisf+0x5e>
    1356:	d6 94       	lsr	r13
    1358:	c7 94       	ror	r12
    135a:	b7 94       	ror	r11
    135c:	a7 94       	ror	r10
    135e:	0a 94       	dec	r0
    1360:	d2 f7       	brpl	.-12     	; 0x1356 <__floatunsisf+0x56>
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	04 c0       	rjmp	.+8      	; 0x137c <__floatunsisf+0x7c>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	aa 1f       	adc	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	2a 95       	dec	r18
    137e:	d2 f7       	brpl	.-12     	; 0x1374 <__floatunsisf+0x74>
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	a1 09       	sbc	r26, r1
    1384:	b1 09       	sbc	r27, r1
    1386:	8e 21       	and	r24, r14
    1388:	9f 21       	and	r25, r15
    138a:	a0 23       	and	r26, r16
    138c:	b1 23       	and	r27, r17
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	a1 05       	cpc	r26, r1
    1392:	b1 05       	cpc	r27, r1
    1394:	21 f0       	breq	.+8      	; 0x139e <__floatunsisf+0x9e>
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	4a 29       	or	r20, r10
    13a0:	5b 29       	or	r21, r11
    13a2:	6c 29       	or	r22, r12
    13a4:	7d 29       	or	r23, r13
    13a6:	4d 83       	std	Y+5, r20	; 0x05
    13a8:	5e 83       	std	Y+6, r21	; 0x06
    13aa:	6f 83       	std	Y+7, r22	; 0x07
    13ac:	78 87       	std	Y+8, r23	; 0x08
    13ae:	8e e1       	ldi	r24, 0x1E	; 30
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	8e 1b       	sub	r24, r30
    13b4:	9f 0b       	sbc	r25, r31
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	12 c0       	rjmp	.+36     	; 0x13e0 <__floatunsisf+0xe0>
    13bc:	30 97       	sbiw	r30, 0x00	; 0
    13be:	81 f0       	breq	.+32     	; 0x13e0 <__floatunsisf+0xe0>
    13c0:	0e 2e       	mov	r0, r30
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <__floatunsisf+0xcc>
    13c4:	ee 0c       	add	r14, r14
    13c6:	ff 1c       	adc	r15, r15
    13c8:	00 1f       	adc	r16, r16
    13ca:	11 1f       	adc	r17, r17
    13cc:	0a 94       	dec	r0
    13ce:	d2 f7       	brpl	.-12     	; 0x13c4 <__floatunsisf+0xc4>
    13d0:	ed 82       	std	Y+5, r14	; 0x05
    13d2:	fe 82       	std	Y+6, r15	; 0x06
    13d4:	0f 83       	std	Y+7, r16	; 0x07
    13d6:	18 87       	std	Y+8, r17	; 0x08
    13d8:	ce 1a       	sub	r12, r30
    13da:	df 0a       	sbc	r13, r31
    13dc:	dc 82       	std	Y+4, r13	; 0x04
    13de:	cb 82       	std	Y+3, r12	; 0x03
    13e0:	1a 82       	std	Y+2, r1	; 0x02
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	0e 94 48 0a 	call	0x1490	; 0x1490 <__pack_f>
    13ea:	28 96       	adiw	r28, 0x08	; 8
    13ec:	ea e0       	ldi	r30, 0x0A	; 10
    13ee:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__epilogue_restores__+0x10>

000013f2 <__clzsi2>:
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	7b 01       	movw	r14, r22
    13fc:	8c 01       	movw	r16, r24
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	e8 16       	cp	r14, r24
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	f8 06       	cpc	r15, r24
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	08 07       	cpc	r16, r24
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	18 07       	cpc	r17, r24
    140e:	88 f4       	brcc	.+34     	; 0x1432 <__clzsi2+0x40>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	e8 16       	cp	r14, r24
    1414:	f1 04       	cpc	r15, r1
    1416:	01 05       	cpc	r16, r1
    1418:	11 05       	cpc	r17, r1
    141a:	31 f0       	breq	.+12     	; 0x1428 <__clzsi2+0x36>
    141c:	28 f0       	brcs	.+10     	; 0x1428 <__clzsi2+0x36>
    141e:	88 e0       	ldi	r24, 0x08	; 8
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a0 e0       	ldi	r26, 0x00	; 0
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	17 c0       	rjmp	.+46     	; 0x1456 <__clzsi2+0x64>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <__clzsi2+0x64>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	e8 16       	cp	r14, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	f8 06       	cpc	r15, r24
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	08 07       	cpc	r16, r24
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	18 07       	cpc	r17, r24
    1442:	28 f0       	brcs	.+10     	; 0x144e <__clzsi2+0x5c>
    1444:	88 e1       	ldi	r24, 0x18	; 24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <__clzsi2+0x64>
    144e:	80 e1       	ldi	r24, 0x10	; 16
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	20 e2       	ldi	r18, 0x20	; 32
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	28 1b       	sub	r18, r24
    1460:	39 0b       	sbc	r19, r25
    1462:	4a 0b       	sbc	r20, r26
    1464:	5b 0b       	sbc	r21, r27
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__clzsi2+0x7e>
    1468:	16 95       	lsr	r17
    146a:	07 95       	ror	r16
    146c:	f7 94       	ror	r15
    146e:	e7 94       	ror	r14
    1470:	8a 95       	dec	r24
    1472:	d2 f7       	brpl	.-12     	; 0x1468 <__clzsi2+0x76>
    1474:	f7 01       	movw	r30, r14
    1476:	ed 5d       	subi	r30, 0xDD	; 221
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	80 81       	ld	r24, Z
    147c:	28 1b       	sub	r18, r24
    147e:	31 09       	sbc	r19, r1
    1480:	41 09       	sbc	r20, r1
    1482:	51 09       	sbc	r21, r1
    1484:	c9 01       	movw	r24, r18
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	08 95       	ret

00001490 <__pack_f>:
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	fc 01       	movw	r30, r24
    149c:	e4 80       	ldd	r14, Z+4	; 0x04
    149e:	f5 80       	ldd	r15, Z+5	; 0x05
    14a0:	06 81       	ldd	r16, Z+6	; 0x06
    14a2:	17 81       	ldd	r17, Z+7	; 0x07
    14a4:	d1 80       	ldd	r13, Z+1	; 0x01
    14a6:	80 81       	ld	r24, Z
    14a8:	82 30       	cpi	r24, 0x02	; 2
    14aa:	48 f4       	brcc	.+18     	; 0x14be <__pack_f+0x2e>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 e1       	ldi	r26, 0x10	; 16
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e8 2a       	or	r14, r24
    14b6:	f9 2a       	or	r15, r25
    14b8:	0a 2b       	or	r16, r26
    14ba:	1b 2b       	or	r17, r27
    14bc:	a5 c0       	rjmp	.+330    	; 0x1608 <__pack_f+0x178>
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__pack_f+0x34>
    14c2:	9f c0       	rjmp	.+318    	; 0x1602 <__pack_f+0x172>
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <__pack_f+0x40>
    14c8:	ee 24       	eor	r14, r14
    14ca:	ff 24       	eor	r15, r15
    14cc:	87 01       	movw	r16, r14
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <__pack_f+0x4a>
    14d0:	e1 14       	cp	r14, r1
    14d2:	f1 04       	cpc	r15, r1
    14d4:	01 05       	cpc	r16, r1
    14d6:	11 05       	cpc	r17, r1
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <__pack_f+0x50>
    14da:	e0 e0       	ldi	r30, 0x00	; 0
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	96 c0       	rjmp	.+300    	; 0x160c <__pack_f+0x17c>
    14e0:	62 81       	ldd	r22, Z+2	; 0x02
    14e2:	73 81       	ldd	r23, Z+3	; 0x03
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    14e6:	62 38       	cpi	r22, 0x82	; 130
    14e8:	79 07       	cpc	r23, r25
    14ea:	0c f0       	brlt	.+2      	; 0x14ee <__pack_f+0x5e>
    14ec:	5b c0       	rjmp	.+182    	; 0x15a4 <__pack_f+0x114>
    14ee:	22 e8       	ldi	r18, 0x82	; 130
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	26 1b       	sub	r18, r22
    14f4:	37 0b       	sbc	r19, r23
    14f6:	2a 31       	cpi	r18, 0x1A	; 26
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f0       	brlt	.+10     	; 0x1506 <__pack_f+0x76>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	2a c0       	rjmp	.+84     	; 0x155a <__pack_f+0xca>
    1506:	b8 01       	movw	r22, r16
    1508:	a7 01       	movw	r20, r14
    150a:	02 2e       	mov	r0, r18
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <__pack_f+0x86>
    150e:	76 95       	lsr	r23
    1510:	67 95       	ror	r22
    1512:	57 95       	ror	r21
    1514:	47 95       	ror	r20
    1516:	0a 94       	dec	r0
    1518:	d2 f7       	brpl	.-12     	; 0x150e <__pack_f+0x7e>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__pack_f+0x9c>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	aa 1f       	adc	r26, r26
    152a:	bb 1f       	adc	r27, r27
    152c:	2a 95       	dec	r18
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__pack_f+0x94>
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	a1 09       	sbc	r26, r1
    1534:	b1 09       	sbc	r27, r1
    1536:	8e 21       	and	r24, r14
    1538:	9f 21       	and	r25, r15
    153a:	a0 23       	and	r26, r16
    153c:	b1 23       	and	r27, r17
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	a1 05       	cpc	r26, r1
    1542:	b1 05       	cpc	r27, r1
    1544:	21 f0       	breq	.+8      	; 0x154e <__pack_f+0xbe>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a0 e0       	ldi	r26, 0x00	; 0
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	9a 01       	movw	r18, r20
    1550:	ab 01       	movw	r20, r22
    1552:	28 2b       	or	r18, r24
    1554:	39 2b       	or	r19, r25
    1556:	4a 2b       	or	r20, r26
    1558:	5b 2b       	or	r21, r27
    155a:	da 01       	movw	r26, r20
    155c:	c9 01       	movw	r24, r18
    155e:	8f 77       	andi	r24, 0x7F	; 127
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	a0 70       	andi	r26, 0x00	; 0
    1564:	b0 70       	andi	r27, 0x00	; 0
    1566:	80 34       	cpi	r24, 0x40	; 64
    1568:	91 05       	cpc	r25, r1
    156a:	a1 05       	cpc	r26, r1
    156c:	b1 05       	cpc	r27, r1
    156e:	39 f4       	brne	.+14     	; 0x157e <__pack_f+0xee>
    1570:	27 ff       	sbrs	r18, 7
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <__pack_f+0xf6>
    1574:	20 5c       	subi	r18, 0xC0	; 192
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	4f 4f       	sbci	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <__pack_f+0xf6>
    157e:	21 5c       	subi	r18, 0xC1	; 193
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	4f 4f       	sbci	r20, 0xFF	; 255
    1584:	5f 4f       	sbci	r21, 0xFF	; 255
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	20 30       	cpi	r18, 0x00	; 0
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	3a 07       	cpc	r19, r26
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	4a 07       	cpc	r20, r26
    1594:	a0 e4       	ldi	r26, 0x40	; 64
    1596:	5a 07       	cpc	r21, r26
    1598:	10 f0       	brcs	.+4      	; 0x159e <__pack_f+0x10e>
    159a:	e1 e0       	ldi	r30, 0x01	; 1
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	79 01       	movw	r14, r18
    15a0:	8a 01       	movw	r16, r20
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <__pack_f+0x162>
    15a4:	60 38       	cpi	r22, 0x80	; 128
    15a6:	71 05       	cpc	r23, r1
    15a8:	64 f5       	brge	.+88     	; 0x1602 <__pack_f+0x172>
    15aa:	fb 01       	movw	r30, r22
    15ac:	e1 58       	subi	r30, 0x81	; 129
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	d8 01       	movw	r26, r16
    15b2:	c7 01       	movw	r24, r14
    15b4:	8f 77       	andi	r24, 0x7F	; 127
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	a0 70       	andi	r26, 0x00	; 0
    15ba:	b0 70       	andi	r27, 0x00	; 0
    15bc:	80 34       	cpi	r24, 0x40	; 64
    15be:	91 05       	cpc	r25, r1
    15c0:	a1 05       	cpc	r26, r1
    15c2:	b1 05       	cpc	r27, r1
    15c4:	39 f4       	brne	.+14     	; 0x15d4 <__pack_f+0x144>
    15c6:	e7 fe       	sbrs	r14, 7
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <__pack_f+0x154>
    15ca:	80 e4       	ldi	r24, 0x40	; 64
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <__pack_f+0x14c>
    15d4:	8f e3       	ldi	r24, 0x3F	; 63
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 e0       	ldi	r26, 0x00	; 0
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 0e       	add	r14, r24
    15de:	f9 1e       	adc	r15, r25
    15e0:	0a 1f       	adc	r16, r26
    15e2:	1b 1f       	adc	r17, r27
    15e4:	17 ff       	sbrs	r17, 7
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__pack_f+0x162>
    15e8:	16 95       	lsr	r17
    15ea:	07 95       	ror	r16
    15ec:	f7 94       	ror	r15
    15ee:	e7 94       	ror	r14
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	87 e0       	ldi	r24, 0x07	; 7
    15f4:	16 95       	lsr	r17
    15f6:	07 95       	ror	r16
    15f8:	f7 94       	ror	r15
    15fa:	e7 94       	ror	r14
    15fc:	8a 95       	dec	r24
    15fe:	d1 f7       	brne	.-12     	; 0x15f4 <__pack_f+0x164>
    1600:	05 c0       	rjmp	.+10     	; 0x160c <__pack_f+0x17c>
    1602:	ee 24       	eor	r14, r14
    1604:	ff 24       	eor	r15, r15
    1606:	87 01       	movw	r16, r14
    1608:	ef ef       	ldi	r30, 0xFF	; 255
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	6e 2f       	mov	r22, r30
    160e:	67 95       	ror	r22
    1610:	66 27       	eor	r22, r22
    1612:	67 95       	ror	r22
    1614:	90 2f       	mov	r25, r16
    1616:	9f 77       	andi	r25, 0x7F	; 127
    1618:	d7 94       	ror	r13
    161a:	dd 24       	eor	r13, r13
    161c:	d7 94       	ror	r13
    161e:	8e 2f       	mov	r24, r30
    1620:	86 95       	lsr	r24
    1622:	49 2f       	mov	r20, r25
    1624:	46 2b       	or	r20, r22
    1626:	58 2f       	mov	r21, r24
    1628:	5d 29       	or	r21, r13
    162a:	b7 01       	movw	r22, r14
    162c:	ca 01       	movw	r24, r20
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	08 95       	ret

0000163a <__unpack_f>:
    163a:	fc 01       	movw	r30, r24
    163c:	db 01       	movw	r26, r22
    163e:	40 81       	ld	r20, Z
    1640:	51 81       	ldd	r21, Z+1	; 0x01
    1642:	22 81       	ldd	r18, Z+2	; 0x02
    1644:	62 2f       	mov	r22, r18
    1646:	6f 77       	andi	r22, 0x7F	; 127
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	22 1f       	adc	r18, r18
    164c:	22 27       	eor	r18, r18
    164e:	22 1f       	adc	r18, r18
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	89 2f       	mov	r24, r25
    1654:	88 0f       	add	r24, r24
    1656:	82 2b       	or	r24, r18
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	99 1f       	adc	r25, r25
    165e:	99 27       	eor	r25, r25
    1660:	99 1f       	adc	r25, r25
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	9c 93       	st	X, r25
    1666:	11 97       	sbiw	r26, 0x01	; 1
    1668:	21 15       	cp	r18, r1
    166a:	31 05       	cpc	r19, r1
    166c:	a9 f5       	brne	.+106    	; 0x16d8 <__unpack_f+0x9e>
    166e:	41 15       	cp	r20, r1
    1670:	51 05       	cpc	r21, r1
    1672:	61 05       	cpc	r22, r1
    1674:	71 05       	cpc	r23, r1
    1676:	11 f4       	brne	.+4      	; 0x167c <__unpack_f+0x42>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	37 c0       	rjmp	.+110    	; 0x16ea <__unpack_f+0xb0>
    167c:	82 e8       	ldi	r24, 0x82	; 130
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	13 96       	adiw	r26, 0x03	; 3
    1682:	9c 93       	st	X, r25
    1684:	8e 93       	st	-X, r24
    1686:	12 97       	sbiw	r26, 0x02	; 2
    1688:	9a 01       	movw	r18, r20
    168a:	ab 01       	movw	r20, r22
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	44 1f       	adc	r20, r20
    1694:	55 1f       	adc	r21, r21
    1696:	6a 95       	dec	r22
    1698:	d1 f7       	brne	.-12     	; 0x168e <__unpack_f+0x54>
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	8c 93       	st	X, r24
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <__unpack_f+0x80>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	44 1f       	adc	r20, r20
    16a6:	55 1f       	adc	r21, r21
    16a8:	12 96       	adiw	r26, 0x02	; 2
    16aa:	8d 91       	ld	r24, X+
    16ac:	9c 91       	ld	r25, X
    16ae:	13 97       	sbiw	r26, 0x03	; 3
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	13 96       	adiw	r26, 0x03	; 3
    16b4:	9c 93       	st	X, r25
    16b6:	8e 93       	st	-X, r24
    16b8:	12 97       	sbiw	r26, 0x02	; 2
    16ba:	20 30       	cpi	r18, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	38 07       	cpc	r19, r24
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	48 07       	cpc	r20, r24
    16c4:	80 e4       	ldi	r24, 0x40	; 64
    16c6:	58 07       	cpc	r21, r24
    16c8:	58 f3       	brcs	.-42     	; 0x16a0 <__unpack_f+0x66>
    16ca:	14 96       	adiw	r26, 0x04	; 4
    16cc:	2d 93       	st	X+, r18
    16ce:	3d 93       	st	X+, r19
    16d0:	4d 93       	st	X+, r20
    16d2:	5c 93       	st	X, r21
    16d4:	17 97       	sbiw	r26, 0x07	; 7
    16d6:	08 95       	ret
    16d8:	2f 3f       	cpi	r18, 0xFF	; 255
    16da:	31 05       	cpc	r19, r1
    16dc:	79 f4       	brne	.+30     	; 0x16fc <__unpack_f+0xc2>
    16de:	41 15       	cp	r20, r1
    16e0:	51 05       	cpc	r21, r1
    16e2:	61 05       	cpc	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	19 f4       	brne	.+6      	; 0x16ee <__unpack_f+0xb4>
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	8c 93       	st	X, r24
    16ec:	08 95       	ret
    16ee:	64 ff       	sbrs	r22, 4
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <__unpack_f+0xbe>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	8c 93       	st	X, r24
    16f6:	12 c0       	rjmp	.+36     	; 0x171c <__unpack_f+0xe2>
    16f8:	1c 92       	st	X, r1
    16fa:	10 c0       	rjmp	.+32     	; 0x171c <__unpack_f+0xe2>
    16fc:	2f 57       	subi	r18, 0x7F	; 127
    16fe:	30 40       	sbci	r19, 0x00	; 0
    1700:	13 96       	adiw	r26, 0x03	; 3
    1702:	3c 93       	st	X, r19
    1704:	2e 93       	st	-X, r18
    1706:	12 97       	sbiw	r26, 0x02	; 2
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	8c 93       	st	X, r24
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	66 1f       	adc	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	8a 95       	dec	r24
    1718:	d1 f7       	brne	.-12     	; 0x170e <__unpack_f+0xd4>
    171a:	70 64       	ori	r23, 0x40	; 64
    171c:	14 96       	adiw	r26, 0x04	; 4
    171e:	4d 93       	st	X+, r20
    1720:	5d 93       	st	X+, r21
    1722:	6d 93       	st	X+, r22
    1724:	7c 93       	st	X, r23
    1726:	17 97       	sbiw	r26, 0x07	; 7
    1728:	08 95       	ret

0000172a <__fpcmp_parts_f>:
    172a:	1f 93       	push	r17
    172c:	dc 01       	movw	r26, r24
    172e:	fb 01       	movw	r30, r22
    1730:	9c 91       	ld	r25, X
    1732:	92 30       	cpi	r25, 0x02	; 2
    1734:	08 f4       	brcc	.+2      	; 0x1738 <__fpcmp_parts_f+0xe>
    1736:	47 c0       	rjmp	.+142    	; 0x17c6 <__fpcmp_parts_f+0x9c>
    1738:	80 81       	ld	r24, Z
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	08 f4       	brcc	.+2      	; 0x1740 <__fpcmp_parts_f+0x16>
    173e:	43 c0       	rjmp	.+134    	; 0x17c6 <__fpcmp_parts_f+0x9c>
    1740:	94 30       	cpi	r25, 0x04	; 4
    1742:	51 f4       	brne	.+20     	; 0x1758 <__fpcmp_parts_f+0x2e>
    1744:	11 96       	adiw	r26, 0x01	; 1
    1746:	1c 91       	ld	r17, X
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	99 f5       	brne	.+102    	; 0x17b2 <__fpcmp_parts_f+0x88>
    174c:	81 81       	ldd	r24, Z+1	; 0x01
    174e:	68 2f       	mov	r22, r24
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	61 1b       	sub	r22, r17
    1754:	71 09       	sbc	r23, r1
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <__fpcmp_parts_f+0xac>
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	21 f0       	breq	.+8      	; 0x1764 <__fpcmp_parts_f+0x3a>
    175c:	92 30       	cpi	r25, 0x02	; 2
    175e:	31 f4       	brne	.+12     	; 0x176c <__fpcmp_parts_f+0x42>
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	b9 f1       	breq	.+110    	; 0x17d2 <__fpcmp_parts_f+0xa8>
    1764:	81 81       	ldd	r24, Z+1	; 0x01
    1766:	88 23       	and	r24, r24
    1768:	89 f1       	breq	.+98     	; 0x17cc <__fpcmp_parts_f+0xa2>
    176a:	2d c0       	rjmp	.+90     	; 0x17c6 <__fpcmp_parts_f+0x9c>
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	1c 91       	ld	r17, X
    1770:	11 97       	sbiw	r26, 0x01	; 1
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	f1 f0       	breq	.+60     	; 0x17b2 <__fpcmp_parts_f+0x88>
    1776:	81 81       	ldd	r24, Z+1	; 0x01
    1778:	18 17       	cp	r17, r24
    177a:	d9 f4       	brne	.+54     	; 0x17b2 <__fpcmp_parts_f+0x88>
    177c:	12 96       	adiw	r26, 0x02	; 2
    177e:	2d 91       	ld	r18, X+
    1780:	3c 91       	ld	r19, X
    1782:	13 97       	sbiw	r26, 0x03	; 3
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	82 17       	cp	r24, r18
    178a:	93 07       	cpc	r25, r19
    178c:	94 f0       	brlt	.+36     	; 0x17b2 <__fpcmp_parts_f+0x88>
    178e:	28 17       	cp	r18, r24
    1790:	39 07       	cpc	r19, r25
    1792:	bc f0       	brlt	.+46     	; 0x17c2 <__fpcmp_parts_f+0x98>
    1794:	14 96       	adiw	r26, 0x04	; 4
    1796:	8d 91       	ld	r24, X+
    1798:	9d 91       	ld	r25, X+
    179a:	0d 90       	ld	r0, X+
    179c:	bc 91       	ld	r27, X
    179e:	a0 2d       	mov	r26, r0
    17a0:	24 81       	ldd	r18, Z+4	; 0x04
    17a2:	35 81       	ldd	r19, Z+5	; 0x05
    17a4:	46 81       	ldd	r20, Z+6	; 0x06
    17a6:	57 81       	ldd	r21, Z+7	; 0x07
    17a8:	28 17       	cp	r18, r24
    17aa:	39 07       	cpc	r19, r25
    17ac:	4a 07       	cpc	r20, r26
    17ae:	5b 07       	cpc	r21, r27
    17b0:	18 f4       	brcc	.+6      	; 0x17b8 <__fpcmp_parts_f+0x8e>
    17b2:	11 23       	and	r17, r17
    17b4:	41 f0       	breq	.+16     	; 0x17c6 <__fpcmp_parts_f+0x9c>
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <__fpcmp_parts_f+0xa2>
    17b8:	82 17       	cp	r24, r18
    17ba:	93 07       	cpc	r25, r19
    17bc:	a4 07       	cpc	r26, r20
    17be:	b5 07       	cpc	r27, r21
    17c0:	40 f4       	brcc	.+16     	; 0x17d2 <__fpcmp_parts_f+0xa8>
    17c2:	11 23       	and	r17, r17
    17c4:	19 f0       	breq	.+6      	; 0x17cc <__fpcmp_parts_f+0xa2>
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__fpcmp_parts_f+0xac>
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	7f ef       	ldi	r23, 0xFF	; 255
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <__fpcmp_parts_f+0xac>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	cb 01       	movw	r24, r22
    17d8:	1f 91       	pop	r17
    17da:	08 95       	ret

000017dc <__udivmodhi4>:
    17dc:	aa 1b       	sub	r26, r26
    17de:	bb 1b       	sub	r27, r27
    17e0:	51 e1       	ldi	r21, 0x11	; 17
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <__udivmodhi4_ep>

000017e4 <__udivmodhi4_loop>:
    17e4:	aa 1f       	adc	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	a6 17       	cp	r26, r22
    17ea:	b7 07       	cpc	r27, r23
    17ec:	10 f0       	brcs	.+4      	; 0x17f2 <__udivmodhi4_ep>
    17ee:	a6 1b       	sub	r26, r22
    17f0:	b7 0b       	sbc	r27, r23

000017f2 <__udivmodhi4_ep>:
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	5a 95       	dec	r21
    17f8:	a9 f7       	brne	.-22     	; 0x17e4 <__udivmodhi4_loop>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	08 95       	ret

00001804 <__divmodhi4>:
    1804:	97 fb       	bst	r25, 7
    1806:	09 2e       	mov	r0, r25
    1808:	07 26       	eor	r0, r23
    180a:	0a d0       	rcall	.+20     	; 0x1820 <__divmodhi4_neg1>
    180c:	77 fd       	sbrc	r23, 7
    180e:	04 d0       	rcall	.+8      	; 0x1818 <__divmodhi4_neg2>
    1810:	e5 df       	rcall	.-54     	; 0x17dc <__udivmodhi4>
    1812:	06 d0       	rcall	.+12     	; 0x1820 <__divmodhi4_neg1>
    1814:	00 20       	and	r0, r0
    1816:	1a f4       	brpl	.+6      	; 0x181e <__divmodhi4_exit>

00001818 <__divmodhi4_neg2>:
    1818:	70 95       	com	r23
    181a:	61 95       	neg	r22
    181c:	7f 4f       	sbci	r23, 0xFF	; 255

0000181e <__divmodhi4_exit>:
    181e:	08 95       	ret

00001820 <__divmodhi4_neg1>:
    1820:	f6 f7       	brtc	.-4      	; 0x181e <__divmodhi4_exit>
    1822:	90 95       	com	r25
    1824:	81 95       	neg	r24
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	08 95       	ret

0000182a <__prologue_saves__>:
    182a:	2f 92       	push	r2
    182c:	3f 92       	push	r3
    182e:	4f 92       	push	r4
    1830:	5f 92       	push	r5
    1832:	6f 92       	push	r6
    1834:	7f 92       	push	r7
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	ca 1b       	sub	r28, r26
    1854:	db 0b       	sbc	r29, r27
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	09 94       	ijmp

00001862 <__epilogue_restores__>:
    1862:	2a 88       	ldd	r2, Y+18	; 0x12
    1864:	39 88       	ldd	r3, Y+17	; 0x11
    1866:	48 88       	ldd	r4, Y+16	; 0x10
    1868:	5f 84       	ldd	r5, Y+15	; 0x0f
    186a:	6e 84       	ldd	r6, Y+14	; 0x0e
    186c:	7d 84       	ldd	r7, Y+13	; 0x0d
    186e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1870:	9b 84       	ldd	r9, Y+11	; 0x0b
    1872:	aa 84       	ldd	r10, Y+10	; 0x0a
    1874:	b9 84       	ldd	r11, Y+9	; 0x09
    1876:	c8 84       	ldd	r12, Y+8	; 0x08
    1878:	df 80       	ldd	r13, Y+7	; 0x07
    187a:	ee 80       	ldd	r14, Y+6	; 0x06
    187c:	fd 80       	ldd	r15, Y+5	; 0x05
    187e:	0c 81       	ldd	r16, Y+4	; 0x04
    1880:	1b 81       	ldd	r17, Y+3	; 0x03
    1882:	aa 81       	ldd	r26, Y+2	; 0x02
    1884:	b9 81       	ldd	r27, Y+1	; 0x01
    1886:	ce 0f       	add	r28, r30
    1888:	d1 1d       	adc	r29, r1
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	ed 01       	movw	r28, r26
    1896:	08 95       	ret

00001898 <fputs>:
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	7c 01       	movw	r14, r24
    18a6:	8b 01       	movw	r16, r22
    18a8:	db 01       	movw	r26, r22
    18aa:	13 96       	adiw	r26, 0x03	; 3
    18ac:	8c 91       	ld	r24, X
    18ae:	81 fd       	sbrc	r24, 1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <fputs+0x20>
    18b2:	cf ef       	ldi	r28, 0xFF	; 255
    18b4:	df ef       	ldi	r29, 0xFF	; 255
    18b6:	13 c0       	rjmp	.+38     	; 0x18de <fputs+0x46>
    18b8:	c0 e0       	ldi	r28, 0x00	; 0
    18ba:	d0 e0       	ldi	r29, 0x00	; 0
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <fputs+0x3c>
    18be:	d8 01       	movw	r26, r16
    18c0:	18 96       	adiw	r26, 0x08	; 8
    18c2:	ed 91       	ld	r30, X+
    18c4:	fc 91       	ld	r31, X
    18c6:	19 97       	sbiw	r26, 0x09	; 9
    18c8:	b8 01       	movw	r22, r16
    18ca:	09 95       	icall
    18cc:	89 2b       	or	r24, r25
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <fputs+0x3c>
    18d0:	cf ef       	ldi	r28, 0xFF	; 255
    18d2:	df ef       	ldi	r29, 0xFF	; 255
    18d4:	f7 01       	movw	r30, r14
    18d6:	81 91       	ld	r24, Z+
    18d8:	7f 01       	movw	r14, r30
    18da:	88 23       	and	r24, r24
    18dc:	81 f7       	brne	.-32     	; 0x18be <fputs+0x26>
    18de:	ce 01       	movw	r24, r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	e6 e0       	ldi	r30, 0x06	; 6
    18e6:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0x18>

000018ea <sprintf>:
    18ea:	ae e0       	ldi	r26, 0x0E	; 14
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e7       	ldi	r30, 0x7B	; 123
    18f0:	fc e0       	ldi	r31, 0x0C	; 12
    18f2:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__prologue_saves__+0x1c>
    18f6:	0d 89       	ldd	r16, Y+21	; 0x15
    18f8:	1e 89       	ldd	r17, Y+22	; 0x16
    18fa:	86 e0       	ldi	r24, 0x06	; 6
    18fc:	8c 83       	std	Y+4, r24	; 0x04
    18fe:	1a 83       	std	Y+2, r17	; 0x02
    1900:	09 83       	std	Y+1, r16	; 0x01
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f e7       	ldi	r25, 0x7F	; 127
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	9e 01       	movw	r18, r28
    190c:	27 5e       	subi	r18, 0xE7	; 231
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	6f 89       	ldd	r22, Y+23	; 0x17
    1916:	78 8d       	ldd	r23, Y+24	; 0x18
    1918:	a9 01       	movw	r20, r18
    191a:	0e 94 9f 0c 	call	0x193e	; 0x193e <vfprintf>
    191e:	2f 81       	ldd	r18, Y+7	; 0x07
    1920:	38 85       	ldd	r19, Y+8	; 0x08
    1922:	02 0f       	add	r16, r18
    1924:	13 1f       	adc	r17, r19
    1926:	f8 01       	movw	r30, r16
    1928:	10 82       	st	Z, r1
    192a:	2e 96       	adiw	r28, 0x0e	; 14
    192c:	e4 e0       	ldi	r30, 0x04	; 4
    192e:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__epilogue_restores__+0x1c>

00001932 <sin>:
    1932:	9f 93       	push	r25
    1934:	82 d2       	rcall	.+1284   	; 0x1e3a <__fp_rempio2>
    1936:	0f 90       	pop	r0
    1938:	07 fc       	sbrc	r0, 7
    193a:	ee 5f       	subi	r30, 0xFE	; 254
    193c:	a5 c2       	rjmp	.+1354   	; 0x1e88 <__fp_sinus>

0000193e <vfprintf>:
    193e:	ab e0       	ldi	r26, 0x0B	; 11
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 ea       	ldi	r30, 0xA5	; 165
    1944:	fc e0       	ldi	r31, 0x0C	; 12
    1946:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__prologue_saves__>
    194a:	3c 01       	movw	r6, r24
    194c:	2b 01       	movw	r4, r22
    194e:	5a 01       	movw	r10, r20
    1950:	fc 01       	movw	r30, r24
    1952:	17 82       	std	Z+7, r1	; 0x07
    1954:	16 82       	std	Z+6, r1	; 0x06
    1956:	83 81       	ldd	r24, Z+3	; 0x03
    1958:	81 fd       	sbrc	r24, 1
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x24>
    195c:	6f ef       	ldi	r22, 0xFF	; 255
    195e:	7f ef       	ldi	r23, 0xFF	; 255
    1960:	c6 c1       	rjmp	.+908    	; 0x1cee <vfprintf+0x3b0>
    1962:	9a e0       	ldi	r25, 0x0A	; 10
    1964:	89 2e       	mov	r8, r25
    1966:	1e 01       	movw	r2, r28
    1968:	08 94       	sec
    196a:	21 1c       	adc	r2, r1
    196c:	31 1c       	adc	r3, r1
    196e:	f3 01       	movw	r30, r6
    1970:	23 81       	ldd	r18, Z+3	; 0x03
    1972:	f2 01       	movw	r30, r4
    1974:	23 fd       	sbrc	r18, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	23 ff       	sbrs	r18, 3
    197a:	81 91       	ld	r24, Z+
    197c:	2f 01       	movw	r4, r30
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <vfprintf+0x46>
    1982:	b2 c1       	rjmp	.+868    	; 0x1ce8 <vfprintf+0x3aa>
    1984:	85 32       	cpi	r24, 0x25	; 37
    1986:	39 f4       	brne	.+14     	; 0x1996 <vfprintf+0x58>
    1988:	23 fd       	sbrc	r18, 3
    198a:	85 91       	lpm	r24, Z+
    198c:	23 ff       	sbrs	r18, 3
    198e:	81 91       	ld	r24, Z+
    1990:	2f 01       	movw	r4, r30
    1992:	85 32       	cpi	r24, 0x25	; 37
    1994:	29 f4       	brne	.+10     	; 0x19a0 <vfprintf+0x62>
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b3 01       	movw	r22, r6
    199a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    199e:	e7 cf       	rjmp	.-50     	; 0x196e <vfprintf+0x30>
    19a0:	98 2f       	mov	r25, r24
    19a2:	ff 24       	eor	r15, r15
    19a4:	ee 24       	eor	r14, r14
    19a6:	99 24       	eor	r9, r9
    19a8:	ff e1       	ldi	r31, 0x1F	; 31
    19aa:	ff 15       	cp	r31, r15
    19ac:	d0 f0       	brcs	.+52     	; 0x19e2 <vfprintf+0xa4>
    19ae:	9b 32       	cpi	r25, 0x2B	; 43
    19b0:	69 f0       	breq	.+26     	; 0x19cc <vfprintf+0x8e>
    19b2:	9c 32       	cpi	r25, 0x2C	; 44
    19b4:	28 f4       	brcc	.+10     	; 0x19c0 <vfprintf+0x82>
    19b6:	90 32       	cpi	r25, 0x20	; 32
    19b8:	59 f0       	breq	.+22     	; 0x19d0 <vfprintf+0x92>
    19ba:	93 32       	cpi	r25, 0x23	; 35
    19bc:	91 f4       	brne	.+36     	; 0x19e2 <vfprintf+0xa4>
    19be:	0e c0       	rjmp	.+28     	; 0x19dc <vfprintf+0x9e>
    19c0:	9d 32       	cpi	r25, 0x2D	; 45
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <vfprintf+0x98>
    19c4:	90 33       	cpi	r25, 0x30	; 48
    19c6:	69 f4       	brne	.+26     	; 0x19e2 <vfprintf+0xa4>
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	24 c0       	rjmp	.+72     	; 0x1a14 <vfprintf+0xd6>
    19cc:	52 e0       	ldi	r21, 0x02	; 2
    19ce:	f5 2a       	or	r15, r21
    19d0:	84 e0       	ldi	r24, 0x04	; 4
    19d2:	f8 2a       	or	r15, r24
    19d4:	28 c0       	rjmp	.+80     	; 0x1a26 <vfprintf+0xe8>
    19d6:	98 e0       	ldi	r25, 0x08	; 8
    19d8:	f9 2a       	or	r15, r25
    19da:	25 c0       	rjmp	.+74     	; 0x1a26 <vfprintf+0xe8>
    19dc:	e0 e1       	ldi	r30, 0x10	; 16
    19de:	fe 2a       	or	r15, r30
    19e0:	22 c0       	rjmp	.+68     	; 0x1a26 <vfprintf+0xe8>
    19e2:	f7 fc       	sbrc	r15, 7
    19e4:	29 c0       	rjmp	.+82     	; 0x1a38 <vfprintf+0xfa>
    19e6:	89 2f       	mov	r24, r25
    19e8:	80 53       	subi	r24, 0x30	; 48
    19ea:	8a 30       	cpi	r24, 0x0A	; 10
    19ec:	70 f4       	brcc	.+28     	; 0x1a0a <vfprintf+0xcc>
    19ee:	f6 fe       	sbrs	r15, 6
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <vfprintf+0xbe>
    19f2:	98 9c       	mul	r9, r8
    19f4:	90 2c       	mov	r9, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	98 0e       	add	r9, r24
    19fa:	15 c0       	rjmp	.+42     	; 0x1a26 <vfprintf+0xe8>
    19fc:	e8 9c       	mul	r14, r8
    19fe:	e0 2c       	mov	r14, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	e8 0e       	add	r14, r24
    1a04:	f0 e2       	ldi	r31, 0x20	; 32
    1a06:	ff 2a       	or	r15, r31
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <vfprintf+0xe8>
    1a0a:	9e 32       	cpi	r25, 0x2E	; 46
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <vfprintf+0xda>
    1a0e:	f6 fc       	sbrc	r15, 6
    1a10:	6b c1       	rjmp	.+726    	; 0x1ce8 <vfprintf+0x3aa>
    1a12:	40 e4       	ldi	r20, 0x40	; 64
    1a14:	f4 2a       	or	r15, r20
    1a16:	07 c0       	rjmp	.+14     	; 0x1a26 <vfprintf+0xe8>
    1a18:	9c 36       	cpi	r25, 0x6C	; 108
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <vfprintf+0xe4>
    1a1c:	50 e8       	ldi	r21, 0x80	; 128
    1a1e:	f5 2a       	or	r15, r21
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0xe8>
    1a22:	98 36       	cpi	r25, 0x68	; 104
    1a24:	49 f4       	brne	.+18     	; 0x1a38 <vfprintf+0xfa>
    1a26:	f2 01       	movw	r30, r4
    1a28:	23 fd       	sbrc	r18, 3
    1a2a:	95 91       	lpm	r25, Z+
    1a2c:	23 ff       	sbrs	r18, 3
    1a2e:	91 91       	ld	r25, Z+
    1a30:	2f 01       	movw	r4, r30
    1a32:	99 23       	and	r25, r25
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <vfprintf+0xfa>
    1a36:	b8 cf       	rjmp	.-144    	; 0x19a8 <vfprintf+0x6a>
    1a38:	89 2f       	mov	r24, r25
    1a3a:	85 54       	subi	r24, 0x45	; 69
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	18 f0       	brcs	.+6      	; 0x1a46 <vfprintf+0x108>
    1a40:	80 52       	subi	r24, 0x20	; 32
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	38 f4       	brcc	.+14     	; 0x1a54 <vfprintf+0x116>
    1a46:	44 e0       	ldi	r20, 0x04	; 4
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	a4 0e       	add	r10, r20
    1a4c:	b5 1e       	adc	r11, r21
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	59 83       	std	Y+1, r21	; 0x01
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <vfprintf+0x134>
    1a54:	93 36       	cpi	r25, 0x63	; 99
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <vfprintf+0x126>
    1a58:	93 37       	cpi	r25, 0x73	; 115
    1a5a:	79 f0       	breq	.+30     	; 0x1a7a <vfprintf+0x13c>
    1a5c:	93 35       	cpi	r25, 0x53	; 83
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <vfprintf+0x124>
    1a60:	56 c0       	rjmp	.+172    	; 0x1b0e <vfprintf+0x1d0>
    1a62:	20 c0       	rjmp	.+64     	; 0x1aa4 <vfprintf+0x166>
    1a64:	f5 01       	movw	r30, r10
    1a66:	80 81       	ld	r24, Z
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	42 e0       	ldi	r20, 0x02	; 2
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	a4 0e       	add	r10, r20
    1a70:	b5 1e       	adc	r11, r21
    1a72:	61 01       	movw	r12, r2
    1a74:	01 e0       	ldi	r16, 0x01	; 1
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	12 c0       	rjmp	.+36     	; 0x1a9e <vfprintf+0x160>
    1a7a:	f5 01       	movw	r30, r10
    1a7c:	c0 80       	ld	r12, Z
    1a7e:	d1 80       	ldd	r13, Z+1	; 0x01
    1a80:	f6 fc       	sbrc	r15, 6
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <vfprintf+0x14c>
    1a84:	6f ef       	ldi	r22, 0xFF	; 255
    1a86:	7f ef       	ldi	r23, 0xFF	; 255
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x150>
    1a8a:	69 2d       	mov	r22, r9
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	42 e0       	ldi	r20, 0x02	; 2
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	a4 0e       	add	r10, r20
    1a94:	b5 1e       	adc	r11, r21
    1a96:	c6 01       	movw	r24, r12
    1a98:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <strnlen>
    1a9c:	8c 01       	movw	r16, r24
    1a9e:	5f e7       	ldi	r21, 0x7F	; 127
    1aa0:	f5 22       	and	r15, r21
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <vfprintf+0x18e>
    1aa4:	f5 01       	movw	r30, r10
    1aa6:	c0 80       	ld	r12, Z
    1aa8:	d1 80       	ldd	r13, Z+1	; 0x01
    1aaa:	f6 fc       	sbrc	r15, 6
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <vfprintf+0x176>
    1aae:	6f ef       	ldi	r22, 0xFF	; 255
    1ab0:	7f ef       	ldi	r23, 0xFF	; 255
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <vfprintf+0x17a>
    1ab4:	69 2d       	mov	r22, r9
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	42 e0       	ldi	r20, 0x02	; 2
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	a4 0e       	add	r10, r20
    1abe:	b5 1e       	adc	r11, r21
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <strnlen_P>
    1ac6:	8c 01       	movw	r16, r24
    1ac8:	50 e8       	ldi	r21, 0x80	; 128
    1aca:	f5 2a       	or	r15, r21
    1acc:	f3 fe       	sbrs	r15, 3
    1ace:	07 c0       	rjmp	.+14     	; 0x1ade <vfprintf+0x1a0>
    1ad0:	1a c0       	rjmp	.+52     	; 0x1b06 <vfprintf+0x1c8>
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	b3 01       	movw	r22, r6
    1ad8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1adc:	ea 94       	dec	r14
    1ade:	8e 2d       	mov	r24, r14
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	08 17       	cp	r16, r24
    1ae4:	19 07       	cpc	r17, r25
    1ae6:	a8 f3       	brcs	.-22     	; 0x1ad2 <vfprintf+0x194>
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <vfprintf+0x1c8>
    1aea:	f6 01       	movw	r30, r12
    1aec:	f7 fc       	sbrc	r15, 7
    1aee:	85 91       	lpm	r24, Z+
    1af0:	f7 fe       	sbrs	r15, 7
    1af2:	81 91       	ld	r24, Z+
    1af4:	6f 01       	movw	r12, r30
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	b3 01       	movw	r22, r6
    1afa:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1afe:	e1 10       	cpse	r14, r1
    1b00:	ea 94       	dec	r14
    1b02:	01 50       	subi	r16, 0x01	; 1
    1b04:	10 40       	sbci	r17, 0x00	; 0
    1b06:	01 15       	cp	r16, r1
    1b08:	11 05       	cpc	r17, r1
    1b0a:	79 f7       	brne	.-34     	; 0x1aea <vfprintf+0x1ac>
    1b0c:	ea c0       	rjmp	.+468    	; 0x1ce2 <vfprintf+0x3a4>
    1b0e:	94 36       	cpi	r25, 0x64	; 100
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <vfprintf+0x1d8>
    1b12:	99 36       	cpi	r25, 0x69	; 105
    1b14:	69 f5       	brne	.+90     	; 0x1b70 <vfprintf+0x232>
    1b16:	f7 fe       	sbrs	r15, 7
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <vfprintf+0x1ec>
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	20 81       	ld	r18, Z
    1b1e:	31 81       	ldd	r19, Z+1	; 0x01
    1b20:	42 81       	ldd	r20, Z+2	; 0x02
    1b22:	53 81       	ldd	r21, Z+3	; 0x03
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <vfprintf+0x200>
    1b2a:	f5 01       	movw	r30, r10
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	9c 01       	movw	r18, r24
    1b32:	44 27       	eor	r20, r20
    1b34:	37 fd       	sbrc	r19, 7
    1b36:	40 95       	com	r20
    1b38:	54 2f       	mov	r21, r20
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a8 0e       	add	r10, r24
    1b40:	b9 1e       	adc	r11, r25
    1b42:	9f e6       	ldi	r25, 0x6F	; 111
    1b44:	f9 22       	and	r15, r25
    1b46:	57 ff       	sbrs	r21, 7
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <vfprintf+0x21e>
    1b4a:	50 95       	com	r21
    1b4c:	40 95       	com	r20
    1b4e:	30 95       	com	r19
    1b50:	21 95       	neg	r18
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	4f 4f       	sbci	r20, 0xFF	; 255
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	e0 e8       	ldi	r30, 0x80	; 128
    1b5a:	fe 2a       	or	r15, r30
    1b5c:	ca 01       	movw	r24, r20
    1b5e:	b9 01       	movw	r22, r18
    1b60:	a1 01       	movw	r20, r2
    1b62:	2a e0       	ldi	r18, 0x0A	; 10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__ultoa_invert>
    1b6a:	d8 2e       	mov	r13, r24
    1b6c:	d2 18       	sub	r13, r2
    1b6e:	40 c0       	rjmp	.+128    	; 0x1bf0 <vfprintf+0x2b2>
    1b70:	95 37       	cpi	r25, 0x75	; 117
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <vfprintf+0x240>
    1b74:	1f 2d       	mov	r17, r15
    1b76:	1f 7e       	andi	r17, 0xEF	; 239
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	1d c0       	rjmp	.+58     	; 0x1bb8 <vfprintf+0x27a>
    1b7e:	1f 2d       	mov	r17, r15
    1b80:	19 7f       	andi	r17, 0xF9	; 249
    1b82:	9f 36       	cpi	r25, 0x6F	; 111
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <vfprintf+0x260>
    1b86:	90 37       	cpi	r25, 0x70	; 112
    1b88:	20 f4       	brcc	.+8      	; 0x1b92 <vfprintf+0x254>
    1b8a:	98 35       	cpi	r25, 0x58	; 88
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <vfprintf+0x252>
    1b8e:	ac c0       	rjmp	.+344    	; 0x1ce8 <vfprintf+0x3aa>
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <vfprintf+0x272>
    1b92:	90 37       	cpi	r25, 0x70	; 112
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <vfprintf+0x266>
    1b96:	98 37       	cpi	r25, 0x78	; 120
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <vfprintf+0x25e>
    1b9a:	a6 c0       	rjmp	.+332    	; 0x1ce8 <vfprintf+0x3aa>
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <vfprintf+0x268>
    1b9e:	28 e0       	ldi	r18, 0x08	; 8
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	0a c0       	rjmp	.+20     	; 0x1bb8 <vfprintf+0x27a>
    1ba4:	10 61       	ori	r17, 0x10	; 16
    1ba6:	14 fd       	sbrc	r17, 4
    1ba8:	14 60       	ori	r17, 0x04	; 4
    1baa:	20 e1       	ldi	r18, 0x10	; 16
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <vfprintf+0x27a>
    1bb0:	14 fd       	sbrc	r17, 4
    1bb2:	16 60       	ori	r17, 0x06	; 6
    1bb4:	20 e1       	ldi	r18, 0x10	; 16
    1bb6:	32 e0       	ldi	r19, 0x02	; 2
    1bb8:	17 ff       	sbrs	r17, 7
    1bba:	08 c0       	rjmp	.+16     	; 0x1bcc <vfprintf+0x28e>
    1bbc:	f5 01       	movw	r30, r10
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	44 e0       	ldi	r20, 0x04	; 4
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	08 c0       	rjmp	.+16     	; 0x1bdc <vfprintf+0x29e>
    1bcc:	f5 01       	movw	r30, r10
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	42 e0       	ldi	r20, 0x02	; 2
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	a4 0e       	add	r10, r20
    1bde:	b5 1e       	adc	r11, r21
    1be0:	a1 01       	movw	r20, r2
    1be2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__ultoa_invert>
    1be6:	d8 2e       	mov	r13, r24
    1be8:	d2 18       	sub	r13, r2
    1bea:	8f e7       	ldi	r24, 0x7F	; 127
    1bec:	f8 2e       	mov	r15, r24
    1bee:	f1 22       	and	r15, r17
    1bf0:	f6 fe       	sbrs	r15, 6
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <vfprintf+0x2cc>
    1bf4:	5e ef       	ldi	r21, 0xFE	; 254
    1bf6:	f5 22       	and	r15, r21
    1bf8:	d9 14       	cp	r13, r9
    1bfa:	38 f4       	brcc	.+14     	; 0x1c0a <vfprintf+0x2cc>
    1bfc:	f4 fe       	sbrs	r15, 4
    1bfe:	07 c0       	rjmp	.+14     	; 0x1c0e <vfprintf+0x2d0>
    1c00:	f2 fc       	sbrc	r15, 2
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <vfprintf+0x2d0>
    1c04:	8f ee       	ldi	r24, 0xEF	; 239
    1c06:	f8 22       	and	r15, r24
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <vfprintf+0x2d0>
    1c0a:	1d 2d       	mov	r17, r13
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <vfprintf+0x2d2>
    1c0e:	19 2d       	mov	r17, r9
    1c10:	f4 fe       	sbrs	r15, 4
    1c12:	0d c0       	rjmp	.+26     	; 0x1c2e <vfprintf+0x2f0>
    1c14:	fe 01       	movw	r30, r28
    1c16:	ed 0d       	add	r30, r13
    1c18:	f1 1d       	adc	r31, r1
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 33       	cpi	r24, 0x30	; 48
    1c1e:	19 f4       	brne	.+6      	; 0x1c26 <vfprintf+0x2e8>
    1c20:	99 ee       	ldi	r25, 0xE9	; 233
    1c22:	f9 22       	and	r15, r25
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <vfprintf+0x2f8>
    1c26:	1f 5f       	subi	r17, 0xFF	; 255
    1c28:	f2 fe       	sbrs	r15, 2
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <vfprintf+0x2f8>
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <vfprintf+0x2f6>
    1c2e:	8f 2d       	mov	r24, r15
    1c30:	86 78       	andi	r24, 0x86	; 134
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <vfprintf+0x2f8>
    1c34:	1f 5f       	subi	r17, 0xFF	; 255
    1c36:	0f 2d       	mov	r16, r15
    1c38:	f3 fc       	sbrc	r15, 3
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <vfprintf+0x326>
    1c3c:	f0 fe       	sbrs	r15, 0
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <vfprintf+0x320>
    1c40:	1e 15       	cp	r17, r14
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <vfprintf+0x30a>
    1c44:	9d 2c       	mov	r9, r13
    1c46:	0b c0       	rjmp	.+22     	; 0x1c5e <vfprintf+0x320>
    1c48:	9d 2c       	mov	r9, r13
    1c4a:	9e 0c       	add	r9, r14
    1c4c:	91 1a       	sub	r9, r17
    1c4e:	1e 2d       	mov	r17, r14
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <vfprintf+0x320>
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	b3 01       	movw	r22, r6
    1c58:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1c5c:	1f 5f       	subi	r17, 0xFF	; 255
    1c5e:	1e 15       	cp	r17, r14
    1c60:	c0 f3       	brcs	.-16     	; 0x1c52 <vfprintf+0x314>
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <vfprintf+0x32e>
    1c64:	1e 15       	cp	r17, r14
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <vfprintf+0x32e>
    1c68:	e1 1a       	sub	r14, r17
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <vfprintf+0x330>
    1c6c:	ee 24       	eor	r14, r14
    1c6e:	04 ff       	sbrs	r16, 4
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <vfprintf+0x352>
    1c72:	80 e3       	ldi	r24, 0x30	; 48
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	b3 01       	movw	r22, r6
    1c78:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1c7c:	02 ff       	sbrs	r16, 2
    1c7e:	1d c0       	rjmp	.+58     	; 0x1cba <vfprintf+0x37c>
    1c80:	01 fd       	sbrc	r16, 1
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <vfprintf+0x34c>
    1c84:	88 e7       	ldi	r24, 0x78	; 120
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <vfprintf+0x368>
    1c8a:	88 e5       	ldi	r24, 0x58	; 88
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <vfprintf+0x368>
    1c90:	80 2f       	mov	r24, r16
    1c92:	86 78       	andi	r24, 0x86	; 134
    1c94:	91 f0       	breq	.+36     	; 0x1cba <vfprintf+0x37c>
    1c96:	01 ff       	sbrs	r16, 1
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfprintf+0x360>
    1c9a:	8b e2       	ldi	r24, 0x2B	; 43
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <vfprintf+0x362>
    1c9e:	80 e2       	ldi	r24, 0x20	; 32
    1ca0:	f7 fc       	sbrc	r15, 7
    1ca2:	8d e2       	ldi	r24, 0x2D	; 45
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	b3 01       	movw	r22, r6
    1ca8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1cac:	06 c0       	rjmp	.+12     	; 0x1cba <vfprintf+0x37c>
    1cae:	80 e3       	ldi	r24, 0x30	; 48
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	b3 01       	movw	r22, r6
    1cb4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1cb8:	9a 94       	dec	r9
    1cba:	d9 14       	cp	r13, r9
    1cbc:	c0 f3       	brcs	.-16     	; 0x1cae <vfprintf+0x370>
    1cbe:	da 94       	dec	r13
    1cc0:	f1 01       	movw	r30, r2
    1cc2:	ed 0d       	add	r30, r13
    1cc4:	f1 1d       	adc	r31, r1
    1cc6:	80 81       	ld	r24, Z
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	b3 01       	movw	r22, r6
    1ccc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1cd0:	dd 20       	and	r13, r13
    1cd2:	a9 f7       	brne	.-22     	; 0x1cbe <vfprintf+0x380>
    1cd4:	06 c0       	rjmp	.+12     	; 0x1ce2 <vfprintf+0x3a4>
    1cd6:	80 e2       	ldi	r24, 0x20	; 32
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	b3 01       	movw	r22, r6
    1cdc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <fputc>
    1ce0:	ea 94       	dec	r14
    1ce2:	ee 20       	and	r14, r14
    1ce4:	c1 f7       	brne	.-16     	; 0x1cd6 <vfprintf+0x398>
    1ce6:	43 ce       	rjmp	.-890    	; 0x196e <vfprintf+0x30>
    1ce8:	f3 01       	movw	r30, r6
    1cea:	66 81       	ldd	r22, Z+6	; 0x06
    1cec:	77 81       	ldd	r23, Z+7	; 0x07
    1cee:	cb 01       	movw	r24, r22
    1cf0:	2b 96       	adiw	r28, 0x0b	; 11
    1cf2:	e2 e1       	ldi	r30, 0x12	; 18
    1cf4:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__epilogue_restores__>

00001cf8 <strnlen_P>:
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	05 90       	lpm	r0, Z+
    1cfc:	61 50       	subi	r22, 0x01	; 1
    1cfe:	70 40       	sbci	r23, 0x00	; 0
    1d00:	01 10       	cpse	r0, r1
    1d02:	d8 f7       	brcc	.-10     	; 0x1cfa <strnlen_P+0x2>
    1d04:	80 95       	com	r24
    1d06:	90 95       	com	r25
    1d08:	8e 0f       	add	r24, r30
    1d0a:	9f 1f       	adc	r25, r31
    1d0c:	08 95       	ret

00001d0e <strnlen>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	61 50       	subi	r22, 0x01	; 1
    1d12:	70 40       	sbci	r23, 0x00	; 0
    1d14:	01 90       	ld	r0, Z+
    1d16:	01 10       	cpse	r0, r1
    1d18:	d8 f7       	brcc	.-10     	; 0x1d10 <strnlen+0x2>
    1d1a:	80 95       	com	r24
    1d1c:	90 95       	com	r25
    1d1e:	8e 0f       	add	r24, r30
    1d20:	9f 1f       	adc	r25, r31
    1d22:	08 95       	ret

00001d24 <fputc>:
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	8c 01       	movw	r16, r24
    1d2e:	eb 01       	movw	r28, r22
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	81 ff       	sbrs	r24, 1
    1d34:	1b c0       	rjmp	.+54     	; 0x1d6c <fputc+0x48>
    1d36:	82 ff       	sbrs	r24, 2
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <fputc+0x30>
    1d3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	28 17       	cp	r18, r24
    1d44:	39 07       	cpc	r19, r25
    1d46:	64 f4       	brge	.+24     	; 0x1d60 <fputc+0x3c>
    1d48:	e8 81       	ld	r30, Y
    1d4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d4c:	01 93       	st	Z+, r16
    1d4e:	f9 83       	std	Y+1, r31	; 0x01
    1d50:	e8 83       	st	Y, r30
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <fputc+0x3c>
    1d54:	e8 85       	ldd	r30, Y+8	; 0x08
    1d56:	f9 85       	ldd	r31, Y+9	; 0x09
    1d58:	80 2f       	mov	r24, r16
    1d5a:	09 95       	icall
    1d5c:	89 2b       	or	r24, r25
    1d5e:	31 f4       	brne	.+12     	; 0x1d6c <fputc+0x48>
    1d60:	8e 81       	ldd	r24, Y+6	; 0x06
    1d62:	9f 81       	ldd	r25, Y+7	; 0x07
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	9f 83       	std	Y+7, r25	; 0x07
    1d68:	8e 83       	std	Y+6, r24	; 0x06
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <fputc+0x4c>
    1d6c:	0f ef       	ldi	r16, 0xFF	; 255
    1d6e:	1f ef       	ldi	r17, 0xFF	; 255
    1d70:	c8 01       	movw	r24, r16
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <__ultoa_invert>:
    1d7c:	fa 01       	movw	r30, r20
    1d7e:	aa 27       	eor	r26, r26
    1d80:	28 30       	cpi	r18, 0x08	; 8
    1d82:	51 f1       	breq	.+84     	; 0x1dd8 <__ultoa_invert+0x5c>
    1d84:	20 31       	cpi	r18, 0x10	; 16
    1d86:	81 f1       	breq	.+96     	; 0x1de8 <__ultoa_invert+0x6c>
    1d88:	e8 94       	clt
    1d8a:	6f 93       	push	r22
    1d8c:	6e 7f       	andi	r22, 0xFE	; 254
    1d8e:	6e 5f       	subi	r22, 0xFE	; 254
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8f 4f       	sbci	r24, 0xFF	; 255
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	af 4f       	sbci	r26, 0xFF	; 255
    1d98:	b1 e0       	ldi	r27, 0x01	; 1
    1d9a:	3e d0       	rcall	.+124    	; 0x1e18 <__ultoa_invert+0x9c>
    1d9c:	b4 e0       	ldi	r27, 0x04	; 4
    1d9e:	3c d0       	rcall	.+120    	; 0x1e18 <__ultoa_invert+0x9c>
    1da0:	67 0f       	add	r22, r23
    1da2:	78 1f       	adc	r23, r24
    1da4:	89 1f       	adc	r24, r25
    1da6:	9a 1f       	adc	r25, r26
    1da8:	a1 1d       	adc	r26, r1
    1daa:	68 0f       	add	r22, r24
    1dac:	79 1f       	adc	r23, r25
    1dae:	8a 1f       	adc	r24, r26
    1db0:	91 1d       	adc	r25, r1
    1db2:	a1 1d       	adc	r26, r1
    1db4:	6a 0f       	add	r22, r26
    1db6:	71 1d       	adc	r23, r1
    1db8:	81 1d       	adc	r24, r1
    1dba:	91 1d       	adc	r25, r1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	20 d0       	rcall	.+64     	; 0x1e00 <__ultoa_invert+0x84>
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__ultoa_invert+0x48>
    1dc2:	68 94       	set
    1dc4:	3f 91       	pop	r19
    1dc6:	2a e0       	ldi	r18, 0x0A	; 10
    1dc8:	26 9f       	mul	r18, r22
    1dca:	11 24       	eor	r1, r1
    1dcc:	30 19       	sub	r19, r0
    1dce:	30 5d       	subi	r19, 0xD0	; 208
    1dd0:	31 93       	st	Z+, r19
    1dd2:	de f6       	brtc	.-74     	; 0x1d8a <__ultoa_invert+0xe>
    1dd4:	cf 01       	movw	r24, r30
    1dd6:	08 95       	ret
    1dd8:	46 2f       	mov	r20, r22
    1dda:	47 70       	andi	r20, 0x07	; 7
    1ddc:	40 5d       	subi	r20, 0xD0	; 208
    1dde:	41 93       	st	Z+, r20
    1de0:	b3 e0       	ldi	r27, 0x03	; 3
    1de2:	0f d0       	rcall	.+30     	; 0x1e02 <__ultoa_invert+0x86>
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x5c>
    1de6:	f6 cf       	rjmp	.-20     	; 0x1dd4 <__ultoa_invert+0x58>
    1de8:	46 2f       	mov	r20, r22
    1dea:	4f 70       	andi	r20, 0x0F	; 15
    1dec:	40 5d       	subi	r20, 0xD0	; 208
    1dee:	4a 33       	cpi	r20, 0x3A	; 58
    1df0:	18 f0       	brcs	.+6      	; 0x1df8 <__ultoa_invert+0x7c>
    1df2:	49 5d       	subi	r20, 0xD9	; 217
    1df4:	31 fd       	sbrc	r19, 1
    1df6:	40 52       	subi	r20, 0x20	; 32
    1df8:	41 93       	st	Z+, r20
    1dfa:	02 d0       	rcall	.+4      	; 0x1e00 <__ultoa_invert+0x84>
    1dfc:	a9 f7       	brne	.-22     	; 0x1de8 <__ultoa_invert+0x6c>
    1dfe:	ea cf       	rjmp	.-44     	; 0x1dd4 <__ultoa_invert+0x58>
    1e00:	b4 e0       	ldi	r27, 0x04	; 4
    1e02:	a6 95       	lsr	r26
    1e04:	97 95       	ror	r25
    1e06:	87 95       	ror	r24
    1e08:	77 95       	ror	r23
    1e0a:	67 95       	ror	r22
    1e0c:	ba 95       	dec	r27
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <__ultoa_invert+0x86>
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	61 05       	cpc	r22, r1
    1e14:	71 05       	cpc	r23, r1
    1e16:	08 95       	ret
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	0a 2e       	mov	r0, r26
    1e1e:	06 94       	lsr	r0
    1e20:	57 95       	ror	r21
    1e22:	47 95       	ror	r20
    1e24:	37 95       	ror	r19
    1e26:	27 95       	ror	r18
    1e28:	ba 95       	dec	r27
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__ultoa_invert+0xa2>
    1e2c:	62 0f       	add	r22, r18
    1e2e:	73 1f       	adc	r23, r19
    1e30:	84 1f       	adc	r24, r20
    1e32:	95 1f       	adc	r25, r21
    1e34:	a0 1d       	adc	r26, r0
    1e36:	08 95       	ret
    1e38:	ce c0       	rjmp	.+412    	; 0x1fd6 <__fp_nan>

00001e3a <__fp_rempio2>:
    1e3a:	3f d0       	rcall	.+126    	; 0x1eba <__fp_splitA>
    1e3c:	e8 f3       	brcs	.-6      	; 0x1e38 <__ultoa_invert+0xbc>
    1e3e:	e8 94       	clt
    1e40:	e0 e0       	ldi	r30, 0x00	; 0
    1e42:	bb 27       	eor	r27, r27
    1e44:	9f 57       	subi	r25, 0x7F	; 127
    1e46:	f0 f0       	brcs	.+60     	; 0x1e84 <__fp_rempio2+0x4a>
    1e48:	2a ed       	ldi	r18, 0xDA	; 218
    1e4a:	3f e0       	ldi	r19, 0x0F	; 15
    1e4c:	49 ec       	ldi	r20, 0xC9	; 201
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <__fp_rempio2+0x22>
    1e50:	ee 0f       	add	r30, r30
    1e52:	bb 0f       	add	r27, r27
    1e54:	66 1f       	adc	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	28 f0       	brcs	.+10     	; 0x1e66 <__fp_rempio2+0x2c>
    1e5c:	b2 3a       	cpi	r27, 0xA2	; 162
    1e5e:	62 07       	cpc	r22, r18
    1e60:	73 07       	cpc	r23, r19
    1e62:	84 07       	cpc	r24, r20
    1e64:	28 f0       	brcs	.+10     	; 0x1e70 <__fp_rempio2+0x36>
    1e66:	b2 5a       	subi	r27, 0xA2	; 162
    1e68:	62 0b       	sbc	r22, r18
    1e6a:	73 0b       	sbc	r23, r19
    1e6c:	84 0b       	sbc	r24, r20
    1e6e:	e3 95       	inc	r30
    1e70:	9a 95       	dec	r25
    1e72:	72 f7       	brpl	.-36     	; 0x1e50 <__fp_rempio2+0x16>
    1e74:	80 38       	cpi	r24, 0x80	; 128
    1e76:	30 f4       	brcc	.+12     	; 0x1e84 <__fp_rempio2+0x4a>
    1e78:	9a 95       	dec	r25
    1e7a:	bb 0f       	add	r27, r27
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	d2 f7       	brpl	.-12     	; 0x1e78 <__fp_rempio2+0x3e>
    1e84:	90 48       	sbci	r25, 0x80	; 128
    1e86:	9b c0       	rjmp	.+310    	; 0x1fbe <__fp_mpack_finite>

00001e88 <__fp_sinus>:
    1e88:	ef 93       	push	r30
    1e8a:	e0 ff       	sbrs	r30, 0
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <__fp_sinus+0x12>
    1e8e:	a2 ea       	ldi	r26, 0xA2	; 162
    1e90:	2a ed       	ldi	r18, 0xDA	; 218
    1e92:	3f e0       	ldi	r19, 0x0F	; 15
    1e94:	49 ec       	ldi	r20, 0xC9	; 201
    1e96:	5f eb       	ldi	r21, 0xBF	; 191
    1e98:	37 d0       	rcall	.+110    	; 0x1f08 <__addsf3x>
    1e9a:	bf d0       	rcall	.+382    	; 0x201a <__fp_round>
    1e9c:	0f 90       	pop	r0
    1e9e:	03 94       	inc	r0
    1ea0:	01 fc       	sbrc	r0, 1
    1ea2:	90 58       	subi	r25, 0x80	; 128
    1ea4:	e0 e7       	ldi	r30, 0x70	; 112
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	99 c0       	rjmp	.+306    	; 0x1fdc <__fp_powsodd>

00001eaa <__fp_split3>:
    1eaa:	57 fd       	sbrc	r21, 7
    1eac:	90 58       	subi	r25, 0x80	; 128
    1eae:	44 0f       	add	r20, r20
    1eb0:	55 1f       	adc	r21, r21
    1eb2:	59 f0       	breq	.+22     	; 0x1eca <__fp_splitA+0x10>
    1eb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <__fp_splitA+0x1a>
    1eb8:	47 95       	ror	r20

00001eba <__fp_splitA>:
    1eba:	88 0f       	add	r24, r24
    1ebc:	97 fb       	bst	r25, 7
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	61 f0       	breq	.+24     	; 0x1eda <__fp_splitA+0x20>
    1ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <__fp_splitA+0x2a>
    1ec6:	87 95       	ror	r24
    1ec8:	08 95       	ret
    1eca:	12 16       	cp	r1, r18
    1ecc:	13 06       	cpc	r1, r19
    1ece:	14 06       	cpc	r1, r20
    1ed0:	55 1f       	adc	r21, r21
    1ed2:	f2 cf       	rjmp	.-28     	; 0x1eb8 <__fp_split3+0xe>
    1ed4:	46 95       	lsr	r20
    1ed6:	f1 df       	rcall	.-30     	; 0x1eba <__fp_splitA>
    1ed8:	08 c0       	rjmp	.+16     	; 0x1eea <__fp_splitA+0x30>
    1eda:	16 16       	cp	r1, r22
    1edc:	17 06       	cpc	r1, r23
    1ede:	18 06       	cpc	r1, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	f1 cf       	rjmp	.-30     	; 0x1ec6 <__fp_splitA+0xc>
    1ee4:	86 95       	lsr	r24
    1ee6:	71 05       	cpc	r23, r1
    1ee8:	61 05       	cpc	r22, r1
    1eea:	08 94       	sec
    1eec:	08 95       	ret
    1eee:	87 d0       	rcall	.+270    	; 0x1ffe <__fp_pscA>
    1ef0:	30 f0       	brcs	.+12     	; 0x1efe <__fp_splitA+0x44>
    1ef2:	8c d0       	rcall	.+280    	; 0x200c <__fp_pscB>
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__fp_splitA+0x44>
    1ef6:	31 f4       	brne	.+12     	; 0x1f04 <__fp_splitA+0x4a>
    1ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <__fp_splitA+0x46>
    1efc:	1e f4       	brtc	.+6      	; 0x1f04 <__fp_splitA+0x4a>
    1efe:	6b c0       	rjmp	.+214    	; 0x1fd6 <__fp_nan>
    1f00:	0e f4       	brtc	.+2      	; 0x1f04 <__fp_splitA+0x4a>
    1f02:	e0 95       	com	r30
    1f04:	e7 fb       	bst	r30, 7
    1f06:	53 c0       	rjmp	.+166    	; 0x1fae <__fp_inf>

00001f08 <__addsf3x>:
    1f08:	e9 2f       	mov	r30, r25
    1f0a:	cf df       	rcall	.-98     	; 0x1eaa <__fp_split3>
    1f0c:	80 f3       	brcs	.-32     	; 0x1eee <__fp_splitA+0x34>
    1f0e:	ba 17       	cp	r27, r26
    1f10:	62 07       	cpc	r22, r18
    1f12:	73 07       	cpc	r23, r19
    1f14:	84 07       	cpc	r24, r20
    1f16:	95 07       	cpc	r25, r21
    1f18:	18 f0       	brcs	.+6      	; 0x1f20 <__addsf3x+0x18>
    1f1a:	71 f4       	brne	.+28     	; 0x1f38 <__addsf3x+0x30>
    1f1c:	9e f5       	brtc	.+102    	; 0x1f84 <__addsf3x+0x7c>
    1f1e:	8e c0       	rjmp	.+284    	; 0x203c <__fp_zero>
    1f20:	0e f4       	brtc	.+2      	; 0x1f24 <__addsf3x+0x1c>
    1f22:	e0 95       	com	r30
    1f24:	0b 2e       	mov	r0, r27
    1f26:	ba 2f       	mov	r27, r26
    1f28:	a0 2d       	mov	r26, r0
    1f2a:	0b 01       	movw	r0, r22
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	90 01       	movw	r18, r0
    1f30:	0c 01       	movw	r0, r24
    1f32:	ca 01       	movw	r24, r20
    1f34:	a0 01       	movw	r20, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	ff 27       	eor	r31, r31
    1f3a:	59 1b       	sub	r21, r25
    1f3c:	99 f0       	breq	.+38     	; 0x1f64 <__addsf3x+0x5c>
    1f3e:	59 3f       	cpi	r21, 0xF9	; 249
    1f40:	50 f4       	brcc	.+20     	; 0x1f56 <__addsf3x+0x4e>
    1f42:	50 3e       	cpi	r21, 0xE0	; 224
    1f44:	68 f1       	brcs	.+90     	; 0x1fa0 <__addsf3x+0x98>
    1f46:	1a 16       	cp	r1, r26
    1f48:	f0 40       	sbci	r31, 0x00	; 0
    1f4a:	a2 2f       	mov	r26, r18
    1f4c:	23 2f       	mov	r18, r19
    1f4e:	34 2f       	mov	r19, r20
    1f50:	44 27       	eor	r20, r20
    1f52:	58 5f       	subi	r21, 0xF8	; 248
    1f54:	f3 cf       	rjmp	.-26     	; 0x1f3c <__addsf3x+0x34>
    1f56:	46 95       	lsr	r20
    1f58:	37 95       	ror	r19
    1f5a:	27 95       	ror	r18
    1f5c:	a7 95       	ror	r26
    1f5e:	f0 40       	sbci	r31, 0x00	; 0
    1f60:	53 95       	inc	r21
    1f62:	c9 f7       	brne	.-14     	; 0x1f56 <__addsf3x+0x4e>
    1f64:	7e f4       	brtc	.+30     	; 0x1f84 <__addsf3x+0x7c>
    1f66:	1f 16       	cp	r1, r31
    1f68:	ba 0b       	sbc	r27, r26
    1f6a:	62 0b       	sbc	r22, r18
    1f6c:	73 0b       	sbc	r23, r19
    1f6e:	84 0b       	sbc	r24, r20
    1f70:	ba f0       	brmi	.+46     	; 0x1fa0 <__addsf3x+0x98>
    1f72:	91 50       	subi	r25, 0x01	; 1
    1f74:	a1 f0       	breq	.+40     	; 0x1f9e <__addsf3x+0x96>
    1f76:	ff 0f       	add	r31, r31
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	66 1f       	adc	r22, r22
    1f7c:	77 1f       	adc	r23, r23
    1f7e:	88 1f       	adc	r24, r24
    1f80:	c2 f7       	brpl	.-16     	; 0x1f72 <__addsf3x+0x6a>
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <__addsf3x+0x98>
    1f84:	ba 0f       	add	r27, r26
    1f86:	62 1f       	adc	r22, r18
    1f88:	73 1f       	adc	r23, r19
    1f8a:	84 1f       	adc	r24, r20
    1f8c:	48 f4       	brcc	.+18     	; 0x1fa0 <__addsf3x+0x98>
    1f8e:	87 95       	ror	r24
    1f90:	77 95       	ror	r23
    1f92:	67 95       	ror	r22
    1f94:	b7 95       	ror	r27
    1f96:	f7 95       	ror	r31
    1f98:	9e 3f       	cpi	r25, 0xFE	; 254
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <__addsf3x+0x96>
    1f9c:	b3 cf       	rjmp	.-154    	; 0x1f04 <__fp_splitA+0x4a>
    1f9e:	93 95       	inc	r25
    1fa0:	88 0f       	add	r24, r24
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <__addsf3x+0x9e>
    1fa4:	99 27       	eor	r25, r25
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	97 95       	ror	r25
    1faa:	87 95       	ror	r24
    1fac:	08 95       	ret

00001fae <__fp_inf>:
    1fae:	97 f9       	bld	r25, 7
    1fb0:	9f 67       	ori	r25, 0x7F	; 127
    1fb2:	80 e8       	ldi	r24, 0x80	; 128
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	08 95       	ret

00001fba <__fp_mpack>:
    1fba:	9f 3f       	cpi	r25, 0xFF	; 255
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <__fp_mpack_finite+0xc>

00001fbe <__fp_mpack_finite>:
    1fbe:	91 50       	subi	r25, 0x01	; 1
    1fc0:	20 f4       	brcc	.+8      	; 0x1fca <__fp_mpack_finite+0xc>
    1fc2:	87 95       	ror	r24
    1fc4:	77 95       	ror	r23
    1fc6:	67 95       	ror	r22
    1fc8:	b7 95       	ror	r27
    1fca:	88 0f       	add	r24, r24
    1fcc:	91 1d       	adc	r25, r1
    1fce:	96 95       	lsr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	97 f9       	bld	r25, 7
    1fd4:	08 95       	ret

00001fd6 <__fp_nan>:
    1fd6:	9f ef       	ldi	r25, 0xFF	; 255
    1fd8:	80 ec       	ldi	r24, 0xC0	; 192
    1fda:	08 95       	ret

00001fdc <__fp_powsodd>:
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	7f 93       	push	r23
    1fe2:	6f 93       	push	r22
    1fe4:	ff 93       	push	r31
    1fe6:	ef 93       	push	r30
    1fe8:	9b 01       	movw	r18, r22
    1fea:	ac 01       	movw	r20, r24
    1fec:	0b d8       	rcall	.-4074   	; 0x1004 <__mulsf3>
    1fee:	ef 91       	pop	r30
    1ff0:	ff 91       	pop	r31
    1ff2:	2b d0       	rcall	.+86     	; 0x204a <__fp_powser>
    1ff4:	2f 91       	pop	r18
    1ff6:	3f 91       	pop	r19
    1ff8:	4f 91       	pop	r20
    1ffa:	5f 91       	pop	r21
    1ffc:	03 c8       	rjmp	.-4090   	; 0x1004 <__mulsf3>

00001ffe <__fp_pscA>:
    1ffe:	00 24       	eor	r0, r0
    2000:	0a 94       	dec	r0
    2002:	16 16       	cp	r1, r22
    2004:	17 06       	cpc	r1, r23
    2006:	18 06       	cpc	r1, r24
    2008:	09 06       	cpc	r0, r25
    200a:	08 95       	ret

0000200c <__fp_pscB>:
    200c:	00 24       	eor	r0, r0
    200e:	0a 94       	dec	r0
    2010:	12 16       	cp	r1, r18
    2012:	13 06       	cpc	r1, r19
    2014:	14 06       	cpc	r1, r20
    2016:	05 06       	cpc	r0, r21
    2018:	08 95       	ret

0000201a <__fp_round>:
    201a:	09 2e       	mov	r0, r25
    201c:	03 94       	inc	r0
    201e:	00 0c       	add	r0, r0
    2020:	11 f4       	brne	.+4      	; 0x2026 <__fp_round+0xc>
    2022:	88 23       	and	r24, r24
    2024:	52 f0       	brmi	.+20     	; 0x203a <__fp_round+0x20>
    2026:	bb 0f       	add	r27, r27
    2028:	40 f4       	brcc	.+16     	; 0x203a <__fp_round+0x20>
    202a:	bf 2b       	or	r27, r31
    202c:	11 f4       	brne	.+4      	; 0x2032 <__fp_round+0x18>
    202e:	60 ff       	sbrs	r22, 0
    2030:	04 c0       	rjmp	.+8      	; 0x203a <__fp_round+0x20>
    2032:	6f 5f       	subi	r22, 0xFF	; 255
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	8f 4f       	sbci	r24, 0xFF	; 255
    2038:	9f 4f       	sbci	r25, 0xFF	; 255
    203a:	08 95       	ret

0000203c <__fp_zero>:
    203c:	e8 94       	clt

0000203e <__fp_szero>:
    203e:	bb 27       	eor	r27, r27
    2040:	66 27       	eor	r22, r22
    2042:	77 27       	eor	r23, r23
    2044:	cb 01       	movw	r24, r22
    2046:	97 f9       	bld	r25, 7
    2048:	08 95       	ret

0000204a <__fp_powser>:
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	1f 93       	push	r17
    2050:	0f 93       	push	r16
    2052:	ff 92       	push	r15
    2054:	ef 92       	push	r14
    2056:	df 92       	push	r13
    2058:	7b 01       	movw	r14, r22
    205a:	8c 01       	movw	r16, r24
    205c:	68 94       	set
    205e:	05 c0       	rjmp	.+10     	; 0x206a <__fp_powser+0x20>
    2060:	da 2e       	mov	r13, r26
    2062:	ef 01       	movw	r28, r30
    2064:	21 d0       	rcall	.+66     	; 0x20a8 <__mulsf3x>
    2066:	fe 01       	movw	r30, r28
    2068:	e8 94       	clt
    206a:	a5 91       	lpm	r26, Z+
    206c:	25 91       	lpm	r18, Z+
    206e:	35 91       	lpm	r19, Z+
    2070:	45 91       	lpm	r20, Z+
    2072:	55 91       	lpm	r21, Z+
    2074:	ae f3       	brts	.-22     	; 0x2060 <__fp_powser+0x16>
    2076:	ef 01       	movw	r28, r30
    2078:	47 df       	rcall	.-370    	; 0x1f08 <__addsf3x>
    207a:	fe 01       	movw	r30, r28
    207c:	97 01       	movw	r18, r14
    207e:	a8 01       	movw	r20, r16
    2080:	da 94       	dec	r13
    2082:	79 f7       	brne	.-34     	; 0x2062 <__fp_powser+0x18>
    2084:	df 90       	pop	r13
    2086:	ef 90       	pop	r14
    2088:	ff 90       	pop	r15
    208a:	0f 91       	pop	r16
    208c:	1f 91       	pop	r17
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret
    2094:	b4 df       	rcall	.-152    	; 0x1ffe <__fp_pscA>
    2096:	28 f0       	brcs	.+10     	; 0x20a2 <__fp_powser+0x58>
    2098:	b9 df       	rcall	.-142    	; 0x200c <__fp_pscB>
    209a:	18 f0       	brcs	.+6      	; 0x20a2 <__fp_powser+0x58>
    209c:	95 23       	and	r25, r21
    209e:	09 f0       	breq	.+2      	; 0x20a2 <__fp_powser+0x58>
    20a0:	86 cf       	rjmp	.-244    	; 0x1fae <__fp_inf>
    20a2:	99 cf       	rjmp	.-206    	; 0x1fd6 <__fp_nan>
    20a4:	11 24       	eor	r1, r1
    20a6:	cb cf       	rjmp	.-106    	; 0x203e <__fp_szero>

000020a8 <__mulsf3x>:
    20a8:	00 df       	rcall	.-512    	; 0x1eaa <__fp_split3>
    20aa:	a0 f3       	brcs	.-24     	; 0x2094 <__fp_powser+0x4a>

000020ac <__mulsf3_pse>:
    20ac:	95 9f       	mul	r25, r21
    20ae:	d1 f3       	breq	.-12     	; 0x20a4 <__fp_powser+0x5a>
    20b0:	95 0f       	add	r25, r21
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	55 1f       	adc	r21, r21
    20b6:	62 9f       	mul	r22, r18
    20b8:	f0 01       	movw	r30, r0
    20ba:	72 9f       	mul	r23, r18
    20bc:	bb 27       	eor	r27, r27
    20be:	f0 0d       	add	r31, r0
    20c0:	b1 1d       	adc	r27, r1
    20c2:	63 9f       	mul	r22, r19
    20c4:	aa 27       	eor	r26, r26
    20c6:	f0 0d       	add	r31, r0
    20c8:	b1 1d       	adc	r27, r1
    20ca:	aa 1f       	adc	r26, r26
    20cc:	64 9f       	mul	r22, r20
    20ce:	66 27       	eor	r22, r22
    20d0:	b0 0d       	add	r27, r0
    20d2:	a1 1d       	adc	r26, r1
    20d4:	66 1f       	adc	r22, r22
    20d6:	82 9f       	mul	r24, r18
    20d8:	22 27       	eor	r18, r18
    20da:	b0 0d       	add	r27, r0
    20dc:	a1 1d       	adc	r26, r1
    20de:	62 1f       	adc	r22, r18
    20e0:	73 9f       	mul	r23, r19
    20e2:	b0 0d       	add	r27, r0
    20e4:	a1 1d       	adc	r26, r1
    20e6:	62 1f       	adc	r22, r18
    20e8:	83 9f       	mul	r24, r19
    20ea:	a0 0d       	add	r26, r0
    20ec:	61 1d       	adc	r22, r1
    20ee:	22 1f       	adc	r18, r18
    20f0:	74 9f       	mul	r23, r20
    20f2:	33 27       	eor	r19, r19
    20f4:	a0 0d       	add	r26, r0
    20f6:	61 1d       	adc	r22, r1
    20f8:	23 1f       	adc	r18, r19
    20fa:	84 9f       	mul	r24, r20
    20fc:	60 0d       	add	r22, r0
    20fe:	21 1d       	adc	r18, r1
    2100:	82 2f       	mov	r24, r18
    2102:	76 2f       	mov	r23, r22
    2104:	6a 2f       	mov	r22, r26
    2106:	11 24       	eor	r1, r1
    2108:	9f 57       	subi	r25, 0x7F	; 127
    210a:	50 40       	sbci	r21, 0x00	; 0
    210c:	8a f0       	brmi	.+34     	; 0x2130 <__mulsf3_pse+0x84>
    210e:	e1 f0       	breq	.+56     	; 0x2148 <__mulsf3_pse+0x9c>
    2110:	88 23       	and	r24, r24
    2112:	4a f0       	brmi	.+18     	; 0x2126 <__mulsf3_pse+0x7a>
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	bb 1f       	adc	r27, r27
    211a:	66 1f       	adc	r22, r22
    211c:	77 1f       	adc	r23, r23
    211e:	88 1f       	adc	r24, r24
    2120:	91 50       	subi	r25, 0x01	; 1
    2122:	50 40       	sbci	r21, 0x00	; 0
    2124:	a9 f7       	brne	.-22     	; 0x2110 <__mulsf3_pse+0x64>
    2126:	9e 3f       	cpi	r25, 0xFE	; 254
    2128:	51 05       	cpc	r21, r1
    212a:	70 f0       	brcs	.+28     	; 0x2148 <__mulsf3_pse+0x9c>
    212c:	40 cf       	rjmp	.-384    	; 0x1fae <__fp_inf>
    212e:	87 cf       	rjmp	.-242    	; 0x203e <__fp_szero>
    2130:	5f 3f       	cpi	r21, 0xFF	; 255
    2132:	ec f3       	brlt	.-6      	; 0x212e <__mulsf3_pse+0x82>
    2134:	98 3e       	cpi	r25, 0xE8	; 232
    2136:	dc f3       	brlt	.-10     	; 0x212e <__mulsf3_pse+0x82>
    2138:	86 95       	lsr	r24
    213a:	77 95       	ror	r23
    213c:	67 95       	ror	r22
    213e:	b7 95       	ror	r27
    2140:	f7 95       	ror	r31
    2142:	e7 95       	ror	r30
    2144:	9f 5f       	subi	r25, 0xFF	; 255
    2146:	c1 f7       	brne	.-16     	; 0x2138 <__mulsf3_pse+0x8c>
    2148:	fe 2b       	or	r31, r30
    214a:	88 0f       	add	r24, r24
    214c:	91 1d       	adc	r25, r1
    214e:	96 95       	lsr	r25
    2150:	87 95       	ror	r24
    2152:	97 f9       	bld	r25, 7
    2154:	08 95       	ret

00002156 <_exit>:
    2156:	f8 94       	cli

00002158 <__stop_program>:
    2158:	ff cf       	rjmp	.-2      	; 0x2158 <__stop_program>
