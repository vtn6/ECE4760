
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  000027f2  00002886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e7  0080033a  0080033a  00002ac0  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000835  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000309f  00000000  00000000  000034b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b1  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f6d  00000000  00000000  00007a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00009974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008a3  00000000  00000000  00009d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000110c  00000000  00000000  0000a637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__ctors_end>
       4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      14:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      18:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      20:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      24:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_9>
      28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      30:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      34:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_13>
      38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      3c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      44:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      4c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      50:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      54:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      58:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      5c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      60:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      64:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      68:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      6c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <nextState+0x16a>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDVoiceId>:
      bb:	56 4f 49 43 45 20 49 44 20 00 00                    VOICE ID ..

000000c6 <LCDMainFrequency>:
      c6:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000d2 <LCDMainDecay>:
      d2:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000df <LCDMainRise>:
      df:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000eb <LCDFMFreq>:
      eb:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000f5 <LCDFMDepth>:
      f5:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

00000100 <LCDFMDecay>:
     100:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

0000010b <LcdCustomChar>:
     10b:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     11b:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     12b:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     13b:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	13 e0       	ldi	r17, 0x03	; 3
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e2 ef       	ldi	r30, 0xF2	; 242
     160:	f7 e2       	ldi	r31, 0x27	; 39
     162:	02 c0       	rjmp	.+4      	; 0x168 <.do_copy_data_start>

00000164 <.do_copy_data_loop>:
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0

00000168 <.do_copy_data_start>:
     168:	aa 33       	cpi	r26, 0x3A	; 58
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <.do_copy_data_loop>

0000016e <__do_clear_bss>:
     16e:	15 e0       	ldi	r17, 0x05	; 5
     170:	aa e3       	ldi	r26, 0x3A	; 58
     172:	b3 e0       	ldi	r27, 0x03	; 3
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a1 32       	cpi	r26, 0x21	; 33
     17a:	b1 07       	cpc	r27, r17
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 01 06 	call	0xc02	; 0xc02 <main>
     182:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <_exit>

00000186 <__bad_interrupt>:
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018a <random8Bits>:
	sprintf(LCDBuffer, "%d", voice);
	LCDstring(LCDBuffer, 1);
	*/
}

uint8_t random8Bits(void){
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
	bit0 = (noiseGen & bit27) > 0;
     192:	80 91 14 02 	lds	r24, 0x0214
     196:	90 91 15 02 	lds	r25, 0x0215
     19a:	a0 91 16 02 	lds	r26, 0x0216
     19e:	b0 91 17 02 	lds	r27, 0x0217
     1a2:	7c 01       	movw	r14, r24
     1a4:	8d 01       	movw	r16, r26
     1a6:	7b e0       	ldi	r23, 0x0B	; 11
     1a8:	16 95       	lsr	r17
     1aa:	07 95       	ror	r16
     1ac:	f7 94       	ror	r15
     1ae:	e7 94       	ror	r14
     1b0:	7a 95       	dec	r23
     1b2:	d1 f7       	brne	.-12     	; 0x1a8 <random8Bits+0x1e>
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	e2 22       	and	r14, r18
     1b8:	e0 92 03 05 	sts	0x0503, r14
	bit1 = (noiseGen & bit30) > 0;
     1bc:	9c 01       	movw	r18, r24
     1be:	ad 01       	movw	r20, r26
     1c0:	6e e0       	ldi	r22, 0x0E	; 14
     1c2:	56 95       	lsr	r21
     1c4:	47 95       	ror	r20
     1c6:	37 95       	ror	r19
     1c8:	27 95       	ror	r18
     1ca:	6a 95       	dec	r22
     1cc:	d1 f7       	brne	.-12     	; 0x1c2 <random8Bits+0x38>
     1ce:	21 70       	andi	r18, 0x01	; 1
     1d0:	20 93 bd 03 	sts	0x03BD, r18
	noiseGen <<= 1;
	noiseGen += bit0 ^ bit1;
     1d4:	2e 25       	eor	r18, r14
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	aa 1f       	adc	r26, r26
     1dc:	bb 1f       	adc	r27, r27
     1de:	82 0f       	add	r24, r18
     1e0:	91 1d       	adc	r25, r1
     1e2:	a1 1d       	adc	r26, r1
     1e4:	b1 1d       	adc	r27, r1
     1e6:	80 93 14 02 	sts	0x0214, r24
     1ea:	90 93 15 02 	sts	0x0215, r25
     1ee:	a0 93 16 02 	sts	0x0216, r26
     1f2:	b0 93 17 02 	sts	0x0217, r27
	return noiseGen & 0x7f;

}
     1f6:	8f 77       	andi	r24, 0x7F	; 127
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	08 95       	ret

00000202 <updateManual>:

void updateManual(void){

}
     202:	08 95       	ret

00000204 <setNextNote>:
	updateLCD();
	sampling = (state == MAIN_SCREEN);
}

//set the next note to play
void setNextNote(void){
     204:	1f 93       	push	r17
	uint8_t nextNote = 0;
	uint8_t rnd = random8Bits();
     206:	0e 94 c5 00 	call	0x18a	; 0x18a <random8Bits>
     20a:	98 2f       	mov	r25, r24
	uint8_t nextNoteFound = 0;
	switch (seqId){
     20c:	80 91 3b 03 	lds	r24, 0x033B
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	11 f1       	breq	.+68     	; 0x258 <setNextNote+0x54>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	68 f1       	brcs	.+90     	; 0x272 <setNextNote+0x6e>
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	89 f0       	breq	.+34     	; 0x23e <setNextNote+0x3a>
     21c:	83 30       	cpi	r24, 0x03	; 3
     21e:	11 f0       	breq	.+4      	; 0x224 <setNextNote+0x20>
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	53 c0       	rjmp	.+166    	; 0x2ca <setNextNote+0xc6>
			}
			break;
		
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
     224:	80 91 17 05 	lds	r24, 0x0517
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	43 e0       	ldi	r20, 0x03	; 3
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	4a 95       	dec	r20
     234:	e1 f7       	brne	.-8      	; 0x22e <setNextNote+0x2a>
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2c 56       	subi	r18, 0x6C	; 108
     23a:	3e 4f       	sbci	r19, 0xFE	; 254
     23c:	40 c0       	rjmp	.+128    	; 0x2be <setNextNote+0xba>
			}
			break;

		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
     23e:	80 91 17 05 	lds	r24, 0x0517
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	8a 95       	dec	r24
     24e:	e1 f7       	brne	.-8      	; 0x248 <setNextNote+0x44>
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	2c 5a       	subi	r18, 0xAC	; 172
     254:	3e 4f       	sbci	r19, 0xFE	; 254
     256:	2b c0       	rjmp	.+86     	; 0x2ae <setNextNote+0xaa>
			}
			break;

		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
     258:	80 91 17 05 	lds	r24, 0x0517
     25c:	28 2f       	mov	r18, r24
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	13 e0       	ldi	r17, 0x03	; 3
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	1a 95       	dec	r17
     268:	e1 f7       	brne	.-8      	; 0x262 <setNextNote+0x5e>
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	2c 52       	subi	r18, 0x2C	; 44
     26e:	3e 4f       	sbci	r19, 0xFE	; 254
     270:	16 c0       	rjmp	.+44     	; 0x29e <setNextNote+0x9a>
	uint8_t rnd = random8Bits();
	uint8_t nextNoteFound = 0;
	switch (seqId){
		case 0:
			while (!nextNoteFound){
				if (rnd <= ascendingMarkov[curNote * 8 + nextNote]){
     272:	80 91 17 05 	lds	r24, 0x0517
     276:	28 2f       	mov	r18, r24
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	b3 e0       	ldi	r27, 0x03	; 3
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	ba 95       	dec	r27
     282:	e1 f7       	brne	.-8      	; 0x27c <setNextNote+0x78>
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	2c 5e       	subi	r18, 0xEC	; 236
     288:	3e 4f       	sbci	r19, 0xFE	; 254
     28a:	01 c0       	rjmp	.+2      	; 0x28e <setNextNote+0x8a>
					nextNoteFound = 1;
				} else {
					nextNote++;
     28c:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t rnd = random8Bits();
	uint8_t nextNoteFound = 0;
	switch (seqId){
		case 0:
			while (!nextNoteFound){
				if (rnd <= ascendingMarkov[curNote * 8 + nextNote]){
     28e:	f9 01       	movw	r30, r18
     290:	e1 0f       	add	r30, r17
     292:	f1 1d       	adc	r31, r1
     294:	80 81       	ld	r24, Z
     296:	89 17       	cp	r24, r25
     298:	c0 f4       	brcc	.+48     	; 0x2ca <setNextNote+0xc6>
     29a:	f8 cf       	rjmp	.-16     	; 0x28c <setNextNote+0x88>
		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     29c:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;

		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
     29e:	f9 01       	movw	r30, r18
     2a0:	e1 0f       	add	r30, r17
     2a2:	f1 1d       	adc	r31, r1
     2a4:	80 81       	ld	r24, Z
     2a6:	89 17       	cp	r24, r25
     2a8:	80 f4       	brcc	.+32     	; 0x2ca <setNextNote+0xc6>
     2aa:	f8 cf       	rjmp	.-16     	; 0x29c <setNextNote+0x98>
		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     2ac:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;

		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
     2ae:	f9 01       	movw	r30, r18
     2b0:	e1 0f       	add	r30, r17
     2b2:	f1 1d       	adc	r31, r1
     2b4:	80 81       	ld	r24, Z
     2b6:	89 17       	cp	r24, r25
     2b8:	40 f4       	brcc	.+16     	; 0x2ca <setNextNote+0xc6>
     2ba:	f8 cf       	rjmp	.-16     	; 0x2ac <setNextNote+0xa8>
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     2bc:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;
		
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
     2be:	f9 01       	movw	r30, r18
     2c0:	e1 0f       	add	r30, r17
     2c2:	f1 1d       	adc	r31, r1
     2c4:	80 81       	ld	r24, Z
     2c6:	89 17       	cp	r24, r25
     2c8:	c8 f3       	brcs	.-14     	; 0x2bc <setNextNote+0xb8>
				}
			}
			break;
	}
	for(uint8_t i = 0; i < NUM_VOICES; i++) {
		inc_main[i] = (int)(8.192 * markovFrequencies[nextNote]);
     2ca:	e1 2f       	mov	r30, r17
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	ee 0f       	add	r30, r30
     2d0:	ff 1f       	adc	r31, r31
     2d2:	ec 5f       	subi	r30, 0xFC	; 252
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	60 81       	ld	r22, Z
     2d8:	71 81       	ldd	r23, Z+1	; 0x01
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
     2e2:	2f e6       	ldi	r18, 0x6F	; 111
     2e4:	32 e1       	ldi	r19, 0x12	; 18
     2e6:	43 e0       	ldi	r20, 0x03	; 3
     2e8:	51 e4       	ldi	r21, 0x41	; 65
     2ea:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     2ee:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fixsfsi>
     2f2:	70 93 b6 03 	sts	0x03B6, r23
     2f6:	60 93 b5 03 	sts	0x03B5, r22
     2fa:	70 93 b8 03 	sts	0x03B8, r23
     2fe:	60 93 b7 03 	sts	0x03B7, r22
     302:	70 93 ba 03 	sts	0x03BA, r23
     306:	60 93 b9 03 	sts	0x03B9, r22
     30a:	70 93 bc 03 	sts	0x03BC, r23
     30e:	60 93 bb 03 	sts	0x03BB, r22
	}
	curNote = nextNote;
     312:	10 93 17 05 	sts	0x0517, r17
}
     316:	1f 91       	pop	r17
     318:	08 95       	ret

0000031a <sample>:
void nextState(void);
uint8_t sample(uint8_t);
uint8_t random8Bits(void);

//returns OCR0A
uint8_t sample(uint8_t idx) {
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	f8 2e       	mov	r15, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if (!(time & 0x0ff)) {
     326:	80 91 05 05 	lds	r24, 0x0505
     32a:	90 91 06 05 	lds	r25, 0x0506
     32e:	88 23       	and	r24, r24
     330:	09 f0       	breq	.+2      	; 0x334 <sample+0x1a>
     332:	48 c0       	rjmp	.+144    	; 0x3c4 <sample+0xaa>
		amp_fall_main[idx] = amp_fall_main[idx] - (amp_fall_main[idx]>>decay_main[idx]);
     334:	0f 2d       	mov	r16, r15
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	a8 01       	movw	r20, r16
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	da 01       	movw	r26, r20
     340:	a6 53       	subi	r26, 0x36	; 54
     342:	bc 4f       	sbci	r27, 0xFC	; 252
     344:	2d 91       	ld	r18, X+
     346:	3c 91       	ld	r19, X
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	8d 91       	ld	r24, X+
     34c:	9c 91       	ld	r25, X
     34e:	11 97       	sbiw	r26, 0x01	; 1
     350:	f8 01       	movw	r30, r16
     352:	ed 55       	subi	r30, 0x5D	; 93
     354:	fc 4f       	sbci	r31, 0xFC	; 252
     356:	60 81       	ld	r22, Z
     358:	02 c0       	rjmp	.+4      	; 0x35e <sample+0x44>
     35a:	96 95       	lsr	r25
     35c:	87 95       	ror	r24
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <sample+0x40>
     362:	28 1b       	sub	r18, r24
     364:	39 0b       	sbc	r19, r25
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	3c 93       	st	X, r19
     36a:	2e 93       	st	-X, r18
		rise_phase_main[idx] = rise_phase_main[idx] - (rise_phase_main[idx]>>rise_main[idx]);
     36c:	da 01       	movw	r26, r20
     36e:	ab 52       	subi	r26, 0x2B	; 43
     370:	bb 4f       	sbci	r27, 0xFB	; 251
     372:	2d 91       	ld	r18, X+
     374:	3c 91       	ld	r19, X
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	8d 91       	ld	r24, X+
     37a:	9c 91       	ld	r25, X
     37c:	11 97       	sbiw	r26, 0x01	; 1
     37e:	f8 01       	movw	r30, r16
     380:	e9 56       	subi	r30, 0x69	; 105
     382:	fc 4f       	sbci	r31, 0xFC	; 252
     384:	60 81       	ld	r22, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <sample+0x72>
     388:	96 95       	lsr	r25
     38a:	87 95       	ror	r24
     38c:	6a 95       	dec	r22
     38e:	e2 f7       	brpl	.-8      	; 0x388 <sample+0x6e>
     390:	28 1b       	sub	r18, r24
     392:	39 0b       	sbc	r19, r25
     394:	11 96       	adiw	r26, 0x01	; 1
     396:	3c 93       	st	X, r19
     398:	2e 93       	st	-X, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1[idx] = amp_fm1[idx] - (amp_fm1[idx]>>decay_fm1[idx]) ;
     39a:	47 55       	subi	r20, 0x57	; 87
     39c:	5c 4f       	sbci	r21, 0xFC	; 252
     39e:	fa 01       	movw	r30, r20
     3a0:	20 81       	ld	r18, Z
     3a2:	31 81       	ldd	r19, Z+1	; 0x01
     3a4:	80 81       	ld	r24, Z
     3a6:	91 81       	ldd	r25, Z+1	; 0x01
     3a8:	00 5f       	subi	r16, 0xF0	; 240
     3aa:	1a 4f       	sbci	r17, 0xFA	; 250
     3ac:	f8 01       	movw	r30, r16
     3ae:	60 81       	ld	r22, Z
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <sample+0x9c>
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <sample+0x98>
     3ba:	28 1b       	sub	r18, r24
     3bc:	39 0b       	sbc	r19, r25
     3be:	fa 01       	movw	r30, r20
     3c0:	31 83       	std	Z+1, r19	; 0x01
     3c2:	20 83       	st	Z, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main[idx] =  max_amp - rise_phase_main[idx];
     3c4:	cf 2d       	mov	r28, r15
     3c6:	d0 e0       	ldi	r29, 0x00	; 0
     3c8:	de 01       	movw	r26, r28
     3ca:	aa 0f       	add	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	fd 01       	movw	r30, r26
     3d0:	eb 52       	subi	r30, 0x2B	; 43
     3d2:	fb 4f       	sbci	r31, 0xFB	; 251
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	9f e7       	ldi	r25, 0x7F	; 127
     3dc:	82 1b       	sub	r24, r18
     3de:	93 0b       	sbc	r25, r19
     3e0:	fd 01       	movw	r30, r26
     3e2:	e8 5f       	subi	r30, 0xF8	; 248
     3e4:	fa 4f       	sbci	r31, 0xFA	; 250
     3e6:	91 83       	std	Z+1, r25	; 0x01
     3e8:	80 83       	st	Z, r24
	// product of rise and fall exponentials is the amplitude envelope
	amp_main[idx] = (amp_rise_main[idx]>>8) * (amp_fall_main[idx]>>8) ;
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	fd 01       	movw	r30, r26
     3f0:	e6 53       	subi	r30, 0x36	; 54
     3f2:	fc 4f       	sbci	r31, 0xFC	; 252
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	89 2f       	mov	r24, r25
     3fa:	99 27       	eor	r25, r25
     3fc:	23 2f       	mov	r18, r19
     3fe:	33 27       	eor	r19, r19
     400:	ac 01       	movw	r20, r24
     402:	42 9f       	mul	r20, r18
     404:	c0 01       	movw	r24, r0
     406:	43 9f       	mul	r20, r19
     408:	90 0d       	add	r25, r0
     40a:	52 9f       	mul	r21, r18
     40c:	90 0d       	add	r25, r0
     40e:	11 24       	eor	r1, r1
     410:	a7 50       	subi	r26, 0x07	; 7
     412:	bb 4f       	sbci	r27, 0xFB	; 251
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	9c 93       	st	X, r25
     418:	8e 93       	st	-X, r24

	// Init the synth
	if (pluck==1) {
     41a:	80 91 a8 03 	lds	r24, 0x03A8
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	81 f5       	brne	.+96     	; 0x482 <sample+0x168>
		if(idx == 0) {
     422:	ff 20       	and	r15, r15
     424:	11 f4       	brne	.+4      	; 0x42a <sample+0x110>
			setNextNote();
     426:	0e 94 02 01 	call	0x204	; 0x204 <setNextNote>
		}
		amp_fall_main[idx] = max_amp; 
     42a:	fe 01       	movw	r30, r28
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	df 01       	movw	r26, r30
     432:	a6 53       	subi	r26, 0x36	; 54
     434:	bc 4f       	sbci	r27, 0xFC	; 252
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	9f e7       	ldi	r25, 0x7F	; 127
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	9c 93       	st	X, r25
     43e:	8e 93       	st	-X, r24
		rise_phase_main[idx] = max_amp ;
     440:	df 01       	movw	r26, r30
     442:	ab 52       	subi	r26, 0x2B	; 43
     444:	bb 4f       	sbci	r27, 0xFB	; 251
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
		amp_rise_main[idx] = 0 ;
     44c:	df 01       	movw	r26, r30
     44e:	a8 5f       	subi	r26, 0xF8	; 248
     450:	ba 4f       	sbci	r27, 0xFA	; 250
     452:	11 96       	adiw	r26, 0x01	; 1
     454:	1c 92       	st	X, r1
     456:	1e 92       	st	-X, r1
		amp_fm1[idx] = max_amp ;
     458:	df 01       	movw	r26, r30
     45a:	a7 55       	subi	r26, 0x57	; 87
     45c:	bc 4f       	sbci	r27, 0xFC	; 252
     45e:	11 96       	adiw	r26, 0x01	; 1
     460:	9c 93       	st	X, r25
     462:	8e 93       	st	-X, r24
		// phase lock the synth
		acc_fm1[idx] = 0 ;
     464:	df 01       	movw	r26, r30
     466:	a1 54       	subi	r26, 0x41	; 65
     468:	bc 4f       	sbci	r27, 0xFC	; 252
     46a:	11 96       	adiw	r26, 0x01	; 1
     46c:	1c 92       	st	X, r1
     46e:	1e 92       	st	-X, r1
		acc_main[idx] = 0;
     470:	e5 56       	subi	r30, 0x65	; 101
     472:	fc 4f       	sbci	r31, 0xFC	; 252
     474:	11 82       	std	Z+1, r1	; 0x01
     476:	10 82       	st	Z, r1

		//DIRTY UGLY HACK FIX THIS STUPID
		if (idx == (NUM_VOICES - 1)) {
     478:	53 e0       	ldi	r21, 0x03	; 3
     47a:	f5 16       	cp	r15, r21
     47c:	11 f4       	brne	.+4      	; 0x482 <sample+0x168>
			pluck = 0;
     47e:	10 92 a8 03 	sts	0x03A8, r1
		}

	}

	//the FM DDR -- feeds into final DDR
	acc_fm1[idx] = acc_fm1[idx] + inc_fm1[idx] ;
     482:	ae 01       	movw	r20, r28
     484:	44 0f       	add	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	da 01       	movw	r26, r20
     48a:	a1 54       	subi	r26, 0x41	; 65
     48c:	bc 4f       	sbci	r27, 0xFC	; 252
     48e:	2d 91       	ld	r18, X+
     490:	3c 91       	ld	r19, X
     492:	11 97       	sbiw	r26, 0x01	; 1
     494:	fa 01       	movw	r30, r20
     496:	e0 51       	subi	r30, 0x10	; 16
     498:	fb 4f       	sbci	r31, 0xFB	; 251
     49a:	80 81       	ld	r24, Z
     49c:	91 81       	ldd	r25, Z+1	; 0x01
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	11 96       	adiw	r26, 0x01	; 1
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
	high_fm1 = (char)(acc_fm1[idx] >> 8) ;
     4a8:	8d 91       	ld	r24, X+
     4aa:	9c 91       	ld	r25, X
     4ac:	90 93 16 05 	sts	0x0516, r25
	fm1 = sineTable[high_fm1] ;
     4b0:	e0 91 16 05 	lds	r30, 0x0516
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	eb 52       	subi	r30, 0x2B	; 43
     4b8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ba:	60 81       	ld	r22, Z
     4bc:	60 93 c7 03 	sts	0x03C7, r22

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main[idx] = acc_main[idx] + (inc_main[idx] + (fm1*(amp_fm1[idx]>>depth_fm1[idx]))) ;
     4c0:	da 01       	movw	r26, r20
     4c2:	a5 56       	subi	r26, 0x65	; 101
     4c4:	bc 4f       	sbci	r27, 0xFC	; 252
     4c6:	0d 91       	ld	r16, X+
     4c8:	1c 91       	ld	r17, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	fa 01       	movw	r30, r20
     4ce:	eb 54       	subi	r30, 0x4B	; 75
     4d0:	fc 4f       	sbci	r31, 0xFC	; 252
     4d2:	20 81       	ld	r18, Z
     4d4:	31 81       	ldd	r19, Z+1	; 0x01
     4d6:	fa 01       	movw	r30, r20
     4d8:	e7 55       	subi	r30, 0x57	; 87
     4da:	fc 4f       	sbci	r31, 0xFC	; 252
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	cf 54       	subi	r28, 0x4F	; 79
     4e2:	dc 4f       	sbci	r29, 0xFC	; 252
     4e4:	e8 81       	ld	r30, Y
     4e6:	20 0f       	add	r18, r16
     4e8:	31 1f       	adc	r19, r17
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <sample+0x1d6>
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	ea 95       	dec	r30
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <sample+0x1d2>
     4f4:	77 27       	eor	r23, r23
     4f6:	67 fd       	sbrc	r22, 7
     4f8:	70 95       	com	r23
     4fa:	fc 01       	movw	r30, r24
     4fc:	e6 9f       	mul	r30, r22
     4fe:	c0 01       	movw	r24, r0
     500:	e7 9f       	mul	r30, r23
     502:	90 0d       	add	r25, r0
     504:	f6 9f       	mul	r31, r22
     506:	90 0d       	add	r25, r0
     508:	11 24       	eor	r1, r1
     50a:	28 0f       	add	r18, r24
     50c:	39 1f       	adc	r19, r25
     50e:	11 96       	adiw	r26, 0x01	; 1
     510:	3c 93       	st	X, r19
     512:	2e 93       	st	-X, r18
	high_main = (char)(acc_main[idx] >> 8) ;
     514:	8d 91       	ld	r24, X+
     516:	9c 91       	ld	r25, X
     518:	90 93 02 05 	sts	0x0502, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main[idx]>>8) * (int)sineTable[high_main])>>7) ;
     51c:	47 50       	subi	r20, 0x07	; 7
     51e:	5b 4f       	sbci	r21, 0xFB	; 251
     520:	fa 01       	movw	r30, r20
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	e0 91 02 05 	lds	r30, 0x0502
     52a:	23 2f       	mov	r18, r19
     52c:	33 27       	eor	r19, r19
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	eb 52       	subi	r30, 0x2B	; 43
     532:	fc 4f       	sbci	r31, 0xFC	; 252
     534:	80 81       	ld	r24, Z
     536:	99 27       	eor	r25, r25
     538:	87 fd       	sbrc	r24, 7
     53a:	90 95       	com	r25
     53c:	ac 01       	movw	r20, r24
     53e:	24 9f       	mul	r18, r20
     540:	c0 01       	movw	r24, r0
     542:	25 9f       	mul	r18, r21
     544:	90 0d       	add	r25, r0
     546:	34 9f       	mul	r19, r20
     548:	90 0d       	add	r25, r0
     54a:	11 24       	eor	r1, r1
     54c:	88 0f       	add	r24, r24
     54e:	89 2f       	mov	r24, r25
     550:	88 1f       	adc	r24, r24
     552:	99 0b       	sbc	r25, r25
     554:	91 95       	neg	r25
}
     556:	80 58       	subi	r24, 0x80	; 128
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	08 95       	ret

00000564 <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 12000
{ 
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
	// turn on timer for profiling
	//TCNT2 = 0; TCCR2B = 1;
	
	if(sampling) {
     58a:	80 91 03 01 	lds	r24, 0x0103
     58e:	88 23       	and	r24, r24
     590:	61 f0       	breq	.+24     	; 0x5aa <__vector_13+0x46>
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	00 e0       	ldi	r16, 0x00	; 0
		// Set Sample
		uint8_t idx;
		uint8_t voiceAccum = 0;
		for (idx=0; idx < NUM_VOICES; idx++){
			voiceAccum += sample(idx) >> 2;
     596:	81 2f       	mov	r24, r17
     598:	0e 94 8d 01 	call	0x31a	; 0x31a <sample>
     59c:	86 95       	lsr	r24
     59e:	86 95       	lsr	r24
     5a0:	08 0f       	add	r16, r24
	
	if(sampling) {
		// Set Sample
		uint8_t idx;
		uint8_t voiceAccum = 0;
		for (idx=0; idx < NUM_VOICES; idx++){
     5a2:	1f 5f       	subi	r17, 0xFF	; 255
     5a4:	14 30       	cpi	r17, 0x04	; 4
     5a6:	b9 f7       	brne	.-18     	; 0x596 <__vector_13+0x32>
			voiceAccum += sample(idx) >> 2;
		}
		OCR0A = voiceAccum;
     5a8:	07 bd       	out	0x27, r16	; 39
		//OCR0A = sample(1);
	}
	
	time++;     //ticks at 12 KHz 
     5aa:	80 91 05 05 	lds	r24, 0x0505
     5ae:	90 91 06 05 	lds	r25, 0x0506
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	90 93 06 05 	sts	0x0506, r25
     5b8:	80 93 05 05 	sts	0x0505, r24
	// profiling 
	//TCCR2B = 0;
} 
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	bf 91       	pop	r27
     5c2:	af 91       	pop	r26
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	7f 91       	pop	r23
     5ca:	6f 91       	pop	r22
     5cc:	5f 91       	pop	r21
     5ce:	4f 91       	pop	r20
     5d0:	3f 91       	pop	r19
     5d2:	2f 91       	pop	r18
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
	LCDclr();
     5e6:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDclr>
	switch (state) {
     5ea:	80 91 c9 03 	lds	r24, 0x03C9
     5ee:	84 30       	cpi	r24, 0x04	; 4
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <updateLCD+0x12>
     5f2:	76 c0       	rjmp	.+236    	; 0x6e0 <updateLCD+0xfe>
     5f4:	85 30       	cpi	r24, 0x05	; 5
     5f6:	50 f4       	brcc	.+20     	; 0x60c <updateLCD+0x2a>
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	11 f1       	breq	.+68     	; 0x640 <updateLCD+0x5e>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	98 f0       	brcs	.+38     	; 0x626 <updateLCD+0x44>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	61 f1       	breq	.+88     	; 0x65c <updateLCD+0x7a>
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	09 f0       	breq	.+2      	; 0x60a <updateLCD+0x28>
     608:	21 c1       	rjmp	.+578    	; 0x84c <updateLCD+0x26a>
     60a:	4a c0       	rjmp	.+148    	; 0x6a0 <updateLCD+0xbe>
     60c:	86 30       	cpi	r24, 0x06	; 6
     60e:	09 f4       	brne	.+2      	; 0x612 <updateLCD+0x30>
     610:	a7 c0       	rjmp	.+334    	; 0x760 <updateLCD+0x17e>
     612:	86 30       	cpi	r24, 0x06	; 6
     614:	08 f4       	brcc	.+2      	; 0x618 <updateLCD+0x36>
     616:	84 c0       	rjmp	.+264    	; 0x720 <updateLCD+0x13e>
     618:	87 30       	cpi	r24, 0x07	; 7
     61a:	09 f4       	brne	.+2      	; 0x61e <updateLCD+0x3c>
     61c:	c1 c0       	rjmp	.+386    	; 0x7a0 <updateLCD+0x1be>
     61e:	88 30       	cpi	r24, 0x08	; 8
     620:	09 f0       	breq	.+2      	; 0x624 <updateLCD+0x42>
     622:	14 c1       	rjmp	.+552    	; 0x84c <updateLCD+0x26a>
     624:	dd c0       	rjmp	.+442    	; 0x7e0 <updateLCD+0x1fe>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     626:	8e e8       	ldi	r24, 0x8E	; 142
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     632:	8b e9       	ldi	r24, 0x9B	; 155
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	41 e0       	ldi	r20, 0x01	; 1
     63a:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
     63e:	06 c1       	rjmp	.+524    	; 0x84c <updateLCD+0x26a>
			break;
		case SET_VIDX:
			CopyStringtoLCD(LCDVoiceId, 0, 1);
     640:	8b eb       	ldi	r24, 0xBB	; 187
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(voiceStrLen, 1);
     64c:	80 91 d2 03 	lds	r24, 0x03D2
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", vidx);
     656:	20 91 3a 03 	lds	r18, 0x033A
     65a:	0d c0       	rjmp	.+26     	; 0x676 <updateLCD+0x94>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     65c:	8d ea       	ldi	r24, 0xAD	; 173
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     668:	80 91 c8 03 	lds	r24, 0x03C8
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     672:	20 91 3b 03 	lds	r18, 0x033B
     676:	00 d0       	rcall	.+0      	; 0x678 <updateLCD+0x96>
     678:	00 d0       	rcall	.+0      	; 0x67a <updateLCD+0x98>
     67a:	00 d0       	rcall	.+0      	; 0x67c <updateLCD+0x9a>
     67c:	ed b7       	in	r30, 0x3d	; 61
     67e:	fe b7       	in	r31, 0x3e	; 62
     680:	31 96       	adiw	r30, 0x01	; 1
     682:	0d ed       	ldi	r16, 0xDD	; 221
     684:	14 e0       	ldi	r17, 0x04	; 4
     686:	ad b7       	in	r26, 0x3d	; 61
     688:	be b7       	in	r27, 0x3e	; 62
     68a:	12 96       	adiw	r26, 0x02	; 2
     68c:	1c 93       	st	X, r17
     68e:	0e 93       	st	-X, r16
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	93 83       	std	Z+3, r25	; 0x03
     698:	82 83       	std	Z+2, r24	; 0x02
     69a:	24 83       	std	Z+4, r18	; 0x04
     69c:	15 82       	std	Z+5, r1	; 0x05
     69e:	c1 c0       	rjmp	.+386    	; 0x822 <updateLCD+0x240>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     6a0:	86 ec       	ldi	r24, 0xC6	; 198
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     6ac:	80 91 ef 04 	lds	r24, 0x04EF
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <updateLCD+0xd6>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <updateLCD+0xd8>
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <updateLCD+0xda>
     6bc:	ed b7       	in	r30, 0x3d	; 61
     6be:	fe b7       	in	r31, 0x3e	; 62
     6c0:	31 96       	adiw	r30, 0x01	; 1
     6c2:	0d ed       	ldi	r16, 0xDD	; 221
     6c4:	14 e0       	ldi	r17, 0x04	; 4
     6c6:	ad b7       	in	r26, 0x3d	; 61
     6c8:	be b7       	in	r27, 0x3e	; 62
     6ca:	12 96       	adiw	r26, 0x02	; 2
     6cc:	1c 93       	st	X, r17
     6ce:	0e 93       	st	-X, r16
     6d0:	11 97       	sbiw	r26, 0x01	; 1
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	93 83       	std	Z+3, r25	; 0x03
     6d8:	82 83       	std	Z+2, r24	; 0x02
     6da:	85 eb       	ldi	r24, 0xB5	; 181
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	9f c0       	rjmp	.+318    	; 0x81e <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     6e0:	82 ed       	ldi	r24, 0xD2	; 210
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     6ec:	80 91 a7 03 	lds	r24, 0x03A7
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <updateLCD+0x116>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <updateLCD+0x118>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <updateLCD+0x11a>
     6fc:	ed b7       	in	r30, 0x3d	; 61
     6fe:	fe b7       	in	r31, 0x3e	; 62
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	0d ed       	ldi	r16, 0xDD	; 221
     704:	14 e0       	ldi	r17, 0x04	; 4
     706:	ad b7       	in	r26, 0x3d	; 61
     708:	be b7       	in	r27, 0x3e	; 62
     70a:	12 96       	adiw	r26, 0x02	; 2
     70c:	1c 93       	st	X, r17
     70e:	0e 93       	st	-X, r16
     710:	11 97       	sbiw	r26, 0x01	; 1
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	93 83       	std	Z+3, r25	; 0x03
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	83 ea       	ldi	r24, 0xA3	; 163
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	7f c0       	rjmp	.+254    	; 0x81e <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     720:	8f ed       	ldi	r24, 0xDF	; 223
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	41 e0       	ldi	r20, 0x01	; 1
     728:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     72c:	80 91 14 05 	lds	r24, 0x0514
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     736:	00 d0       	rcall	.+0      	; 0x738 <updateLCD+0x156>
     738:	00 d0       	rcall	.+0      	; 0x73a <updateLCD+0x158>
     73a:	00 d0       	rcall	.+0      	; 0x73c <updateLCD+0x15a>
     73c:	ed b7       	in	r30, 0x3d	; 61
     73e:	fe b7       	in	r31, 0x3e	; 62
     740:	31 96       	adiw	r30, 0x01	; 1
     742:	0d ed       	ldi	r16, 0xDD	; 221
     744:	14 e0       	ldi	r17, 0x04	; 4
     746:	ad b7       	in	r26, 0x3d	; 61
     748:	be b7       	in	r27, 0x3e	; 62
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	1c 93       	st	X, r17
     74e:	0e 93       	st	-X, r16
     750:	11 97       	sbiw	r26, 0x01	; 1
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	93 83       	std	Z+3, r25	; 0x03
     758:	82 83       	std	Z+2, r24	; 0x02
     75a:	87 e9       	ldi	r24, 0x97	; 151
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	5f c0       	rjmp	.+190    	; 0x81e <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     760:	8b ee       	ldi	r24, 0xEB	; 235
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     76c:	80 91 04 05 	lds	r24, 0x0504
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     776:	00 d0       	rcall	.+0      	; 0x778 <updateLCD+0x196>
     778:	00 d0       	rcall	.+0      	; 0x77a <updateLCD+0x198>
     77a:	00 d0       	rcall	.+0      	; 0x77c <updateLCD+0x19a>
     77c:	ed b7       	in	r30, 0x3d	; 61
     77e:	fe b7       	in	r31, 0x3e	; 62
     780:	31 96       	adiw	r30, 0x01	; 1
     782:	0d ed       	ldi	r16, 0xDD	; 221
     784:	14 e0       	ldi	r17, 0x04	; 4
     786:	ad b7       	in	r26, 0x3d	; 61
     788:	be b7       	in	r27, 0x3e	; 62
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	1c 93       	st	X, r17
     78e:	0e 93       	st	-X, r16
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	93 83       	std	Z+3, r25	; 0x03
     798:	82 83       	std	Z+2, r24	; 0x02
     79a:	80 ef       	ldi	r24, 0xF0	; 240
     79c:	94 e0       	ldi	r25, 0x04	; 4
     79e:	3f c0       	rjmp	.+126    	; 0x81e <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     7a0:	85 ef       	ldi	r24, 0xF5	; 245
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     7ac:	80 91 15 05 	lds	r24, 0x0515
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <updateLCD+0x1d6>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <updateLCD+0x1d8>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <updateLCD+0x1da>
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	0d ed       	ldi	r16, 0xDD	; 221
     7c4:	14 e0       	ldi	r17, 0x04	; 4
     7c6:	ad b7       	in	r26, 0x3d	; 61
     7c8:	be b7       	in	r27, 0x3e	; 62
     7ca:	12 96       	adiw	r26, 0x02	; 2
     7cc:	1c 93       	st	X, r17
     7ce:	0e 93       	st	-X, r16
     7d0:	11 97       	sbiw	r26, 0x01	; 1
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	93 83       	std	Z+3, r25	; 0x03
     7d8:	82 83       	std	Z+2, r24	; 0x02
     7da:	81 eb       	ldi	r24, 0xB1	; 177
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	1f c0       	rjmp	.+62     	; 0x81e <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     7ec:	80 91 be 03 	lds	r24, 0x03BE
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <updateLCD+0x216>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <updateLCD+0x218>
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <updateLCD+0x21a>
     7fc:	ed b7       	in	r30, 0x3d	; 61
     7fe:	fe b7       	in	r31, 0x3e	; 62
     800:	31 96       	adiw	r30, 0x01	; 1
     802:	0d ed       	ldi	r16, 0xDD	; 221
     804:	14 e0       	ldi	r17, 0x04	; 4
     806:	ad b7       	in	r26, 0x3d	; 61
     808:	be b7       	in	r27, 0x3e	; 62
     80a:	12 96       	adiw	r26, 0x02	; 2
     80c:	1c 93       	st	X, r17
     80e:	0e 93       	st	-X, r16
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	93 83       	std	Z+3, r25	; 0x03
     818:	82 83       	std	Z+2, r24	; 0x02
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	95 e0       	ldi	r25, 0x05	; 5
     81e:	95 83       	std	Z+5, r25	; 0x05
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     826:	f8 01       	movw	r30, r16
     828:	01 90       	ld	r0, Z+
     82a:	00 20       	and	r0, r0
     82c:	e9 f7       	brne	.-6      	; 0x828 <updateLCD+0x246>
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	e0 1b       	sub	r30, r16
     832:	f1 0b       	sbc	r31, r17
     834:	8d b7       	in	r24, 0x3d	; 61
     836:	9e b7       	in	r25, 0x3e	; 62
     838:	06 96       	adiw	r24, 0x06	; 6
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	9e bf       	out	0x3e, r25	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	8d bf       	out	0x3d, r24	; 61
     844:	c8 01       	movw	r24, r16
     846:	6e 2f       	mov	r22, r30
     848:	0e 94 5d 07 	call	0xeba	; 0xeba <LCDstring>
	CopyStringtoLCD(LCDVoice, 0, 0);
	LCDGotoXY(voiceStrLen, 0);
	sprintf(LCDBuffer, "%d", voice);
	LCDstring(LCDBuffer, 1);
	*/
}
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <setState>:
void updateManual(void){

}

void setState(uint8_t s) {
	sampling = 0; // disable sampling when switching states
     852:	10 92 03 01 	sts	0x0103, r1
	state = s;
     856:	80 93 c9 03 	sts	0x03C9, r24
	updateLCD();
     85a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <updateLCD>
	sampling = (state == MAIN_SCREEN);
     85e:	80 91 c9 03 	lds	r24, 0x03C9
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	88 23       	and	r24, r24
     866:	09 f4       	brne	.+2      	; 0x86a <setState+0x18>
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 03 01 	sts	0x0103, r25
}
     86e:	08 95       	ret

00000870 <nextState>:
}

// update to next state if key is pressed
uint8_t waitingForInput = 0;
unsigned int lastInt = 0;
void nextState(void){
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
	if(waitingForInput) {
     878:	80 91 3e 03 	lds	r24, 0x033E
     87c:	88 23       	and	r24, r24
     87e:	b9 f1       	breq	.+110    	; 0x8ee <nextState+0x7e>
		// output input to screen
		unsigned int in = KeypadInt();
     880:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     884:	ec 01       	movw	r28, r24
		if(lastInt != in) {
     886:	80 91 3f 03 	lds	r24, 0x033F
     88a:	90 91 40 03 	lds	r25, 0x0340
     88e:	8c 17       	cp	r24, r28
     890:	9d 07       	cpc	r25, r29
     892:	69 f1       	breq	.+90     	; 0x8ee <nextState+0x7e>
			LCDGotoXY(0, 0);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", in);
     89c:	00 d0       	rcall	.+0      	; 0x89e <nextState+0x2e>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <nextState+0x30>
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <nextState+0x32>
     8a2:	ed b7       	in	r30, 0x3d	; 61
     8a4:	fe b7       	in	r31, 0x3e	; 62
     8a6:	31 96       	adiw	r30, 0x01	; 1
     8a8:	0d ed       	ldi	r16, 0xDD	; 221
     8aa:	14 e0       	ldi	r17, 0x04	; 4
     8ac:	ad b7       	in	r26, 0x3d	; 61
     8ae:	be b7       	in	r27, 0x3e	; 62
     8b0:	12 96       	adiw	r26, 0x02	; 2
     8b2:	1c 93       	st	X, r17
     8b4:	0e 93       	st	-X, r16
     8b6:	11 97       	sbiw	r26, 0x01	; 1
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	d5 83       	std	Z+5, r29	; 0x05
     8c2:	c4 83       	std	Z+4, r28	; 0x04
     8c4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     8c8:	f8 01       	movw	r30, r16
     8ca:	01 90       	ld	r0, Z+
     8cc:	00 20       	and	r0, r0
     8ce:	e9 f7       	brne	.-6      	; 0x8ca <nextState+0x5a>
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	e0 1b       	sub	r30, r16
     8d4:	f1 0b       	sbc	r31, r17
     8d6:	8d b7       	in	r24, 0x3d	; 61
     8d8:	9e b7       	in	r25, 0x3e	; 62
     8da:	06 96       	adiw	r24, 0x06	; 6
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	9e bf       	out	0x3e, r25	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	8d bf       	out	0x3d, r24	; 61
     8e6:	c8 01       	movw	r24, r16
     8e8:	6e 2f       	mov	r22, r30
     8ea:	0e 94 5d 07 	call	0xeba	; 0xeba <LCDstring>
		}
	}
	uint8_t key = KeypadKey();
     8ee:	0e 94 05 07 	call	0xe0a	; 0xe0a <KeypadKey>
     8f2:	08 2f       	mov	r16, r24
		//_delay_ms(1000);
		//sprintf(LCDBuffer, "%d", key);
		//LCDGotoXY(0, 0);
		//LCDstring(LCDBuffer, strlen(LCDBuffer));
	}*/
	switch(key) {
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	69 f4       	brne	.+26     	; 0x912 <nextState+0xa2>
		case KEY_A:
			waitingForInput = 0;
     8f8:	10 92 3e 03 	sts	0x033E, r1
			setState((state + 1) % 9);
     8fc:	80 91 c9 03 	lds	r24, 0x03C9
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	69 e0       	ldi	r22, 0x09	; 9
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
     90c:	0e 94 29 04 	call	0x852	; 0x852 <setState>
     910:	03 c0       	rjmp	.+6      	; 0x918 <nextState+0xa8>
			break;
	}
	if(key) {
     912:	88 23       	and	r24, r24
     914:	09 f4       	brne	.+2      	; 0x918 <nextState+0xa8>
     916:	7d c0       	rjmp	.+250    	; 0xa12 <nextState+0x1a2>
		switch (state) {
     918:	80 91 c9 03 	lds	r24, 0x03C9
     91c:	84 30       	cpi	r24, 0x04	; 4
     91e:	a1 f1       	breq	.+104    	; 0x988 <nextState+0x118>
     920:	85 30       	cpi	r24, 0x05	; 5
     922:	40 f4       	brcc	.+16     	; 0x934 <nextState+0xc4>
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	d1 f0       	breq	.+52     	; 0x95c <nextState+0xec>
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	00 f5       	brcc	.+64     	; 0x96c <nextState+0xfc>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	09 f0       	breq	.+2      	; 0x932 <nextState+0xc2>
     930:	70 c0       	rjmp	.+224    	; 0xa12 <nextState+0x1a2>
     932:	0b c0       	rjmp	.+22     	; 0x94a <nextState+0xda>
     934:	86 30       	cpi	r24, 0x06	; 6
     936:	f9 f1       	breq	.+126    	; 0x9b6 <nextState+0x146>
     938:	86 30       	cpi	r24, 0x06	; 6
     93a:	90 f1       	brcs	.+100    	; 0x9a0 <nextState+0x130>
     93c:	87 30       	cpi	r24, 0x07	; 7
     93e:	09 f4       	brne	.+2      	; 0x942 <nextState+0xd2>
     940:	49 c0       	rjmp	.+146    	; 0x9d4 <nextState+0x164>
     942:	88 30       	cpi	r24, 0x08	; 8
     944:	09 f0       	breq	.+2      	; 0x948 <nextState+0xd8>
     946:	65 c0       	rjmp	.+202    	; 0xa12 <nextState+0x1a2>
     948:	50 c0       	rjmp	.+160    	; 0x9ea <nextState+0x17a>
			case SET_VIDX:
				if(key == KEY_D) {
     94a:	00 31       	cpi	r16, 0x10	; 16
     94c:	09 f0       	breq	.+2      	; 0x950 <nextState+0xe0>
     94e:	5f c0       	rjmp	.+190    	; 0xa0e <nextState+0x19e>
					vidx = KeypadInt() % NUM_VOICES;
     950:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     954:	83 70       	andi	r24, 0x03	; 3
     956:	80 93 3a 03 	sts	0x033A, r24
     95a:	52 c0       	rjmp	.+164    	; 0xa00 <nextState+0x190>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_SEQUENCE:
				if(key == KEY_D) {
     95c:	00 31       	cpi	r16, 0x10	; 16
     95e:	09 f0       	breq	.+2      	; 0x962 <nextState+0xf2>
     960:	55 c0       	rjmp	.+170    	; 0xa0c <nextState+0x19c>
					seqId = KeypadInt();
     962:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     966:	80 93 3b 03 	sts	0x033B, r24
     96a:	4a c0       	rjmp	.+148    	; 0xa00 <nextState+0x190>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_INC_MAIN:
				if(key == KEY_D) {
     96c:	00 31       	cpi	r16, 0x10	; 16
     96e:	09 f0       	breq	.+2      	; 0x972 <nextState+0x102>
     970:	4d c0       	rjmp	.+154    	; 0xa0c <nextState+0x19c>
					inc_main[vidx] = KeypadInt();
     972:	80 91 3a 03 	lds	r24, 0x033A
     976:	c8 2f       	mov	r28, r24
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     97e:	cc 0f       	add	r28, r28
     980:	dd 1f       	adc	r29, r29
     982:	cb 54       	subi	r28, 0x4B	; 75
     984:	dc 4f       	sbci	r29, 0xFC	; 252
     986:	23 c0       	rjmp	.+70     	; 0x9ce <nextState+0x15e>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_DECAY_MAIN:
				if(key == KEY_D) {
     988:	00 31       	cpi	r16, 0x10	; 16
     98a:	09 f0       	breq	.+2      	; 0x98e <nextState+0x11e>
     98c:	3f c0       	rjmp	.+126    	; 0xa0c <nextState+0x19c>
					decay_main[vidx] = KeypadInt();
     98e:	80 91 3a 03 	lds	r24, 0x033A
     992:	c8 2f       	mov	r28, r24
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     99a:	cd 55       	subi	r28, 0x5D	; 93
     99c:	dc 4f       	sbci	r29, 0xFC	; 252
     99e:	2f c0       	rjmp	.+94     	; 0x9fe <nextState+0x18e>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_RISE_MAIN:
				if(key == KEY_D) {
     9a0:	00 31       	cpi	r16, 0x10	; 16
     9a2:	a1 f5       	brne	.+104    	; 0xa0c <nextState+0x19c>
					rise_main[vidx] = KeypadInt();
     9a4:	80 91 3a 03 	lds	r24, 0x033A
     9a8:	c8 2f       	mov	r28, r24
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     9b0:	c9 56       	subi	r28, 0x69	; 105
     9b2:	dc 4f       	sbci	r29, 0xFC	; 252
     9b4:	24 c0       	rjmp	.+72     	; 0x9fe <nextState+0x18e>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_INC_FM:
				if(key == KEY_D) {
     9b6:	00 31       	cpi	r16, 0x10	; 16
     9b8:	49 f5       	brne	.+82     	; 0xa0c <nextState+0x19c>
					inc_fm1[vidx] = KeypadInt();
     9ba:	80 91 3a 03 	lds	r24, 0x033A
     9be:	c8 2f       	mov	r28, r24
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
     9c2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     9c6:	cc 0f       	add	r28, r28
     9c8:	dd 1f       	adc	r29, r29
     9ca:	c0 51       	subi	r28, 0x10	; 16
     9cc:	db 4f       	sbci	r29, 0xFB	; 251
     9ce:	99 83       	std	Y+1, r25	; 0x01
     9d0:	88 83       	st	Y, r24
     9d2:	16 c0       	rjmp	.+44     	; 0xa00 <nextState+0x190>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_DEPTH_FM:
				if(key == KEY_D) {
     9d4:	00 31       	cpi	r16, 0x10	; 16
     9d6:	d1 f4       	brne	.+52     	; 0xa0c <nextState+0x19c>
					depth_fm1[vidx] = KeypadInt();
     9d8:	80 91 3a 03 	lds	r24, 0x033A
     9dc:	c8 2f       	mov	r28, r24
     9de:	d0 e0       	ldi	r29, 0x00	; 0
     9e0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     9e4:	cf 54       	subi	r28, 0x4F	; 79
     9e6:	dc 4f       	sbci	r29, 0xFC	; 252
     9e8:	0a c0       	rjmp	.+20     	; 0x9fe <nextState+0x18e>
				} else {
					waitingForInput = 1;
				}
				break;
			case SET_DECAY_FM:
				if(key == KEY_D) {
     9ea:	00 31       	cpi	r16, 0x10	; 16
     9ec:	79 f4       	brne	.+30     	; 0xa0c <nextState+0x19c>
					decay_fm1[vidx] = KeypadInt();
     9ee:	80 91 3a 03 	lds	r24, 0x033A
     9f2:	c8 2f       	mov	r28, r24
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
     9f6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <KeypadInt>
     9fa:	c0 5f       	subi	r28, 0xF0	; 240
     9fc:	da 4f       	sbci	r29, 0xFA	; 250
     9fe:	88 83       	st	Y, r24
					waitingForInput = 0;
     a00:	10 92 3e 03 	sts	0x033E, r1
					setState(MAIN_SCREEN);
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 29 04 	call	0x852	; 0x852 <setState>
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <nextState+0x1a2>
				} else {
					waitingForInput = 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 3e 03 	sts	0x033E, r24
				}
				break;
		
		}
	}
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     a1c:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCDinit>
	LCDcursorOFF();
     a20:	0e 94 24 08 	call	0x1048	; 0x1048 <LCDcursorOFF>
	LCDclr();				//clear the display
     a24:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCDclr>
	LCDGotoXY(0,0);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     a30:	8e e8       	ldi	r24, 0x8E	; 142
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     a3c:	8b e9       	ldi	r24, 0x9B	; 155
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	0e 94 81 07 	call	0xf02	; 0xf02 <CopyStringtoLCD>
}
     a48:	08 95       	ret

00000a4a <Initialize>:
	}
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
	// make B.3 an output
	DDRB = (1<<PINB3) ;
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	84 b9       	out	0x04, r24	; 4

	//Keypad
	DDRD=0x00;
     a56:	1a b8       	out	0x0a, r1	; 10
     a58:	05 ed       	ldi	r16, 0xD5	; 213
     a5a:	13 e0       	ldi	r17, 0x03	; 3
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	1f c0       	rjmp	.+62     	; 0xaa0 <Initialize+0x56>
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     a62:	be 01       	movw	r22, r28
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
     a6c:	26 e5       	ldi	r18, 0x56	; 86
     a6e:	3e e0       	ldi	r19, 0x0E	; 14
     a70:	49 ec       	ldi	r20, 0xC9	; 201
     a72:	50 e4       	ldi	r21, 0x40	; 64
     a74:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e8       	ldi	r20, 0x80	; 128
     a7e:	5b e3       	ldi	r21, 0x3B	; 59
     a80:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     a84:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <sin>
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	4e ef       	ldi	r20, 0xFE	; 254
     a8e:	52 e4       	ldi	r21, 0x42	; 66
     a90:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     a94:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fixunssfsi>
     a98:	f8 01       	movw	r30, r16
     a9a:	61 93       	st	Z+, r22
     a9c:	8f 01       	movw	r16, r30
     a9e:	21 96       	adiw	r28, 0x01	; 1
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
     aa0:	cf 3f       	cpi	r28, 0xFF	; 255
     aa2:	d1 05       	cpc	r29, r1
     aa4:	f1 f2       	breq	.-68     	; 0xa62 <Initialize+0x18>
     aa6:	e8 f2       	brcs	.-70     	; 0xa62 <Initialize+0x18>
     aa8:	d0 93 d4 03 	sts	0x03D4, r29
     aac:	c0 93 d3 03 	sts	0x03D3, r28
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
	}  

	// init the time counter
	time=0;
     ab0:	10 92 06 05 	sts	0x0506, r1
     ab4:	10 92 05 05 	sts	0x0505, r1

	// timer 0 runs at full rate
	TCCR0B = 1 ;  
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	85 bd       	out	0x25, r24	; 37
	//turn off timer 0 overflow ISR
	TIMSK0 = 0 ;
     abc:	10 92 6e 00 	sts	0x006E, r1
	// turn on PWM
	// turn on fast PWM and OC0A output
	// at full clock rate, toggle OC0A (pin B3) 
	// 16 microsec per PWM cycle sample time
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     ac0:	83 ec       	ldi	r24, 0xC3	; 195
     ac2:	84 bd       	out	0x24, r24	; 36
	OCR0A = 128 ; // set PWM to half full scale
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	87 bd       	out	0x27, r24	; 39

	/////////// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	// timer 1 ticks at 12000 Hz = 1333 ticks
	OCR1A = 1332 ; // 2000 ticks
     ac8:	84 e3       	ldi	r24, 0x34	; 52
     aca:	95 e0       	ldi	r25, 0x05	; 5
     acc:	90 93 89 00 	sts	0x0089, r25
     ad0:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     ada:	29 e0       	ldi	r18, 0x09	; 9
     adc:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0x00;	//turn off pwm and oc lines
     ae0:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 2 cmp match ISR
     ae4:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     ae8:	89 ef       	ldi	r24, 0xF9	; 249
     aea:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     aee:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	80 93 b1 00 	sts	0x00B1, r24


	seqStrLen = strlen(LCDSequenceId);
     af8:	8c e0       	ldi	r24, 0x0C	; 12
     afa:	80 93 c8 03 	sts	0x03C8, r24
	voiceStrLen = strlen(LCDVoiceId);
     afe:	20 93 d2 03 	sts	0x03D2, r18
	mainFreqStrLen = strlen(LCDMainFrequency);
     b02:	9a e0       	ldi	r25, 0x0A	; 10
     b04:	90 93 ef 04 	sts	0x04EF, r25
	mainDecayStrLen = strlen(LCDMainDecay);
     b08:	8b e0       	ldi	r24, 0x0B	; 11
     b0a:	80 93 a7 03 	sts	0x03A7, r24
	mainRiseStrLen = strlen(LCDMainRise);
     b0e:	90 93 14 05 	sts	0x0514, r25
	fmFreqStrLen = strlen(LCDFMFreq);
     b12:	88 e0       	ldi	r24, 0x08	; 8
     b14:	80 93 04 05 	sts	0x0504, r24
	fmDepthStrLen = strlen(LCDFMDepth);
     b18:	20 93 15 05 	sts	0x0515, r18
	fmDecayStrLen = strlen(LCDFMDecay);
     b1c:	20 93 be 03 	sts	0x03BE, r18

	initLCD();
     b20:	0e 94 0e 05 	call	0xa1c	; 0xa1c <initLCD>

	// turn on all ISRs
	sei() ;
     b24:	78 94       	sei
	///////////////////////////////////////////////////
	// Sound parameters
	///////////////////////////////////////////////////
	// Base frequency
	// 2^16/8000*freq = 8.192*freq
	inc_main[0] = (int)(8.192 * 261) ; 
     b26:	6a e5       	ldi	r22, 0x5A	; 90
     b28:	78 e0       	ldi	r23, 0x08	; 8
     b2a:	70 93 b6 03 	sts	0x03B6, r23
     b2e:	60 93 b5 03 	sts	0x03B5, r22
	// rise and decay SHIFT factor  -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_main[0] = 4 ;
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	80 93 a3 03 	sts	0x03A3, r24
	rise_main[0] = 0 ;
     b38:	10 92 97 03 	sts	0x0397, r1
	//
	// FM modulation rate -- also a frequency
	inc_fm1[0] = (int)(8.192 * 65) ;
     b3c:	84 e1       	ldi	r24, 0x14	; 20
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	90 93 f1 04 	sts	0x04F1, r25
     b44:	80 93 f0 04 	sts	0x04F0, r24
	// FM modulation depth SHIFT factor 
	// bigger factor implies smaller FM!
	// useful range is 4 to 15
	depth_fm1[0] = 7 ;
     b48:	87 e0       	ldi	r24, 0x07	; 7
     b4a:	80 93 b1 03 	sts	0x03B1, r24
	// decay SHIFT factor -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_fm1[0] = 6 ;
     b4e:	26 e0       	ldi	r18, 0x06	; 6
     b50:	20 93 10 05 	sts	0x0510, r18

//Bell/chime
   inc_main[0] = (int)(8.192 * 1440) ; 
     b54:	e4 e1       	ldi	r30, 0x14	; 20
     b56:	fe e2       	ldi	r31, 0x2E	; 46
     b58:	f0 93 b6 03 	sts	0x03B6, r31
     b5c:	e0 93 b5 03 	sts	0x03B5, r30
   decay_main[0] = 5 ;
     b60:	45 e0       	ldi	r20, 0x05	; 5
     b62:	40 93 a3 03 	sts	0x03A3, r20
   rise_main[0] = 1 ;
     b66:	31 e0       	ldi	r19, 0x01	; 1
     b68:	30 93 97 03 	sts	0x0397, r19
   inc_fm1[0] = (int)(8.192 * 600) ;
     b6c:	83 e3       	ldi	r24, 0x33	; 51
     b6e:	93 e1       	ldi	r25, 0x13	; 19
     b70:	90 93 f1 04 	sts	0x04F1, r25
     b74:	80 93 f0 04 	sts	0x04F0, r24
   depth_fm1[0] = 8 ;
     b78:	58 e0       	ldi	r21, 0x08	; 8
     b7a:	50 93 b1 03 	sts	0x03B1, r21
   decay_fm1[0] = 6 ;
     b7e:	20 93 10 05 	sts	0x0510, r18

//Chime:
	inc_main[1] = (int)(8.192 * 261.0) ; 
     b82:	70 93 b8 03 	sts	0x03B8, r23
     b86:	60 93 b7 03 	sts	0x03B7, r22
	decay_main[1] = 5 ;
     b8a:	40 93 a4 03 	sts	0x03A4, r20
	rise_main[1] = 1 ;
     b8e:	30 93 98 03 	sts	0x0398, r19
	inc_fm1[1] = (int)(8.192 * 350.0) ;
     b92:	83 e3       	ldi	r24, 0x33	; 51
     b94:	9b e0       	ldi	r25, 0x0B	; 11
     b96:	90 93 f3 04 	sts	0x04F3, r25
     b9a:	80 93 f2 04 	sts	0x04F2, r24
	depth_fm1[1] = 9 ;
     b9e:	89 e0       	ldi	r24, 0x09	; 9
     ba0:	80 93 b2 03 	sts	0x03B2, r24
	decay_fm1[1] = 5 ;
     ba4:	40 93 11 05 	sts	0x0511, r20

//Plucked String:
	inc_main[2] = (int)(8.192 * 500.0) ; 
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e1       	ldi	r25, 0x10	; 16
     bac:	90 93 ba 03 	sts	0x03BA, r25
     bb0:	80 93 b9 03 	sts	0x03B9, r24
	decay_main[2] = 3 ;
     bb4:	23 e0       	ldi	r18, 0x03	; 3
     bb6:	20 93 a5 03 	sts	0x03A5, r18
	rise_main[2] = 1 ;
     bba:	30 93 99 03 	sts	0x0399, r19
	inc_fm1[2] = (int)(8.192 * 750.0) ;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	98 e1       	ldi	r25, 0x18	; 24
     bc2:	90 93 f5 04 	sts	0x04F5, r25
     bc6:	80 93 f4 04 	sts	0x04F4, r24
	depth_fm1[2] = 8 ;
     bca:	50 93 b3 03 	sts	0x03B3, r21
	decay_fm1[2] = 3 ;
     bce:	20 93 12 05 	sts	0x0512, r18

//Small, stiff rod
	inc_main[3] = (int)(8.192 * 1440) ;   
     bd2:	f0 93 bc 03 	sts	0x03BC, r31
     bd6:	e0 93 bb 03 	sts	0x03BB, r30
	decay_main[3] = 3 ;
     bda:	20 93 a6 03 	sts	0x03A6, r18
	rise_main[3] = 1 ;   
     bde:	30 93 9a 03 	sts	0x039A, r19
	inc_fm1[3] = (int)(8.192 * 50) ; // at 100 get stiff string; at 200 get hollow pipe
     be2:	89 e9       	ldi	r24, 0x99	; 153
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	90 93 f7 04 	sts	0x04F7, r25
     bea:	80 93 f6 04 	sts	0x04F6, r24
	depth_fm1[3] = 10 ; //or 9
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	80 93 b4 03 	sts	0x03B4, r24
	decay_fm1[3] = 5 ;
     bf4:	40 93 13 05 	sts	0x0513, r20
	decay_main[5] = 5 ;
	rise_main[5] = 0 ;
	inc_fm1[5] = (int)(8.192 * 1000) ;
	depth_fm1[5] = 8 ;
	decay_fm1[5] = 6 ;*/
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <main>:
	}
}
/////////////////////////////////////////////////////
int main(void)
{ 
   Initialize();
     c02:	0e 94 25 05 	call	0xa4a	; 0xa4a <Initialize>
				pushed = 0;
			}
		//	printf("%d\n\r", TCNT2);
		}
		*/
		random8Bits();
     c06:	0e 94 c5 00 	call	0x18a	; 0x18a <random8Bits>
		nextState();
     c0a:	0e 94 38 04 	call	0x870	; 0x870 <nextState>
     c0e:	fb cf       	rjmp	.-10     	; 0xc06 <main+0x4>

00000c10 <__vector_9>:
	//TCCR2B = 0;
} 

// Every 1ms
volatile uint16_t mscount = 0;
ISR (TIMER2_COMPA_vect){
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
	KeypadDebounce();
     c32:	0e 94 b7 06 	call	0xd6e	; 0xd6e <KeypadDebounce>
	mscount++;
     c36:	80 91 3c 03 	lds	r24, 0x033C
     c3a:	90 91 3d 03 	lds	r25, 0x033D
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	90 93 3d 03 	sts	0x033D, r25
     c44:	80 93 3c 03 	sts	0x033C, r24
	if(!(mscount % 1100)) {
     c48:	80 91 3c 03 	lds	r24, 0x033C
     c4c:	90 91 3d 03 	lds	r25, 0x033D
     c50:	6c e4       	ldi	r22, 0x4C	; 76
     c52:	74 e0       	ldi	r23, 0x04	; 4
     c54:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
     c58:	89 2b       	or	r24, r25
     c5a:	19 f4       	brne	.+6      	; 0xc62 <__vector_9+0x52>
		pluck = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 a8 03 	sts	0x03A8, r24
	}
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRA = 0x0f;
     c84:	2f e0       	ldi	r18, 0x0F	; 15
     c86:	21 b9       	out	0x01, r18	; 1
	PORTA = 0xf0; 
     c88:	80 ef       	ldi	r24, 0xF0	; 240
     c8a:	82 b9       	out	0x02, r24	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c8c:	9a e1       	ldi	r25, 0x1A	; 26
     c8e:	39 2f       	mov	r19, r25
     c90:	3a 95       	dec	r19
     c92:	f1 f7       	brne	.-4      	; 0xc90 <KeypadScan+0xc>
	_delay_us(5);
	key = PINA;
     c94:	30 b1       	in	r19, 0x00	; 0
	
	//get upper nibble
	DDRA = 0xf0;
     c96:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0f; 
     c98:	22 b9       	out	0x02, r18	; 2
     c9a:	9a 95       	dec	r25
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <KeypadScan+0x16>
	_delay_us(5);
	key = key | PINA;
     c9e:	20 b1       	in	r18, 0x00	; 0
     ca0:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     ca2:	2f 3f       	cpi	r18, 0xFF	; 255
     ca4:	61 f0       	breq	.+24     	; 0xcbe <KeypadScan+0x3a>
     ca6:	ea e1       	ldi	r30, 0x1A	; 26
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     cac:	80 81       	ld	r24, Z
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	82 17       	cp	r24, r18
     cb2:	11 f4       	brne	.+4      	; 0xcb8 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     cb4:	89 2f       	mov	r24, r25
     cb6:	08 95       	ret
	_delay_us(5);
	key = key | PINA;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	90 31       	cpi	r25, 0x10	; 16
     cbc:	b9 f7       	brne	.-18     	; 0xcac <KeypadScan+0x28>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     cc0:	08 95       	ret

00000cc2 <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     cc2:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     cc4:	80 91 43 03 	lds	r24, 0x0343
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	31 f4       	brne	.+12     	; 0xcd8 <KeypadAppend+0x16>
		KeypadFinished = 0;
     ccc:	10 92 43 03 	sts	0x0343, r1
		KeypadInput = 0;
     cd0:	10 92 42 03 	sts	0x0342, r1
     cd4:	10 92 41 03 	sts	0x0341, r1
	}
	switch(key) {
     cd8:	98 30       	cpi	r25, 0x08	; 8
     cda:	79 f1       	breq	.+94     	; 0xd3a <KeypadAppend+0x78>
     cdc:	99 30       	cpi	r25, 0x09	; 9
     cde:	80 f4       	brcc	.+32     	; 0xd00 <KeypadAppend+0x3e>
     ce0:	94 30       	cpi	r25, 0x04	; 4
     ce2:	59 f1       	breq	.+86     	; 0xd3a <KeypadAppend+0x78>
     ce4:	95 30       	cpi	r25, 0x05	; 5
     ce6:	38 f4       	brcc	.+14     	; 0xcf6 <KeypadAppend+0x34>
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	b9 f0       	breq	.+46     	; 0xd1a <KeypadAppend+0x58>
     cec:	93 30       	cpi	r25, 0x03	; 3
     cee:	b8 f4       	brcc	.+46     	; 0xd1e <KeypadAppend+0x5c>
     cf0:	91 30       	cpi	r25, 0x01	; 1
     cf2:	e1 f5       	brne	.+120    	; 0xd6c <KeypadAppend+0xaa>
     cf4:	26 c0       	rjmp	.+76     	; 0xd42 <KeypadAppend+0x80>
     cf6:	96 30       	cpi	r25, 0x06	; 6
     cf8:	b1 f0       	breq	.+44     	; 0xd26 <KeypadAppend+0x64>
     cfa:	97 30       	cpi	r25, 0x07	; 7
     cfc:	b0 f4       	brcc	.+44     	; 0xd2a <KeypadAppend+0x68>
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <KeypadAppend+0x60>
     d00:	9e 30       	cpi	r25, 0x0E	; 14
     d02:	38 f4       	brcc	.+14     	; 0xd12 <KeypadAppend+0x50>
     d04:	9c 30       	cpi	r25, 0x0C	; 12
     d06:	c8 f4       	brcc	.+50     	; 0xd3a <KeypadAppend+0x78>
     d08:	9a 30       	cpi	r25, 0x0A	; 10
     d0a:	99 f0       	breq	.+38     	; 0xd32 <KeypadAppend+0x70>
     d0c:	9b 30       	cpi	r25, 0x0B	; 11
     d0e:	98 f4       	brcc	.+38     	; 0xd36 <KeypadAppend+0x74>
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <KeypadAppend+0x6c>
     d12:	9f 50       	subi	r25, 0x0F	; 15
     d14:	92 30       	cpi	r25, 0x02	; 2
     d16:	50 f5       	brcc	.+84     	; 0xd6c <KeypadAppend+0xaa>
     d18:	10 c0       	rjmp	.+32     	; 0xd3a <KeypadAppend+0x78>
     d1a:	42 e0       	ldi	r20, 0x02	; 2
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <KeypadAppend+0x82>
     d1e:	43 e0       	ldi	r20, 0x03	; 3
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <KeypadAppend+0x82>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     d22:	44 e0       	ldi	r20, 0x04	; 4
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <KeypadAppend+0x82>
		case KEY_4:
			c = 4;
			break;
     d26:	45 e0       	ldi	r20, 0x05	; 5
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <KeypadAppend+0x82>
		case KEY_5:
			c = 5;
			break;
     d2a:	46 e0       	ldi	r20, 0x06	; 6
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <KeypadAppend+0x82>
		case KEY_6:
			c = 6;
			break;
     d2e:	47 e0       	ldi	r20, 0x07	; 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <KeypadAppend+0x82>
		case KEY_7:
			c = 7;
			break;
     d32:	48 e0       	ldi	r20, 0x08	; 8
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <KeypadAppend+0x82>
		case KEY_8:
			c = 8;
			break;
     d36:	49 e0       	ldi	r20, 0x09	; 9
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <KeypadAppend+0x82>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 43 03 	sts	0x0343, r24
     d40:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     d42:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     d44:	80 91 41 03 	lds	r24, 0x0341
     d48:	90 91 42 03 	lds	r25, 0x0342
     d4c:	9c 01       	movw	r18, r24
     d4e:	63 e0       	ldi	r22, 0x03	; 3
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	6a 95       	dec	r22
     d56:	e1 f7       	brne	.-8      	; 0xd50 <KeypadAppend+0x8e>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	28 0f       	add	r18, r24
     d5e:	39 1f       	adc	r19, r25
     d60:	24 0f       	add	r18, r20
     d62:	31 1d       	adc	r19, r1
     d64:	30 93 42 03 	sts	0x0342, r19
     d68:	20 93 41 03 	sts	0x0341, r18
     d6c:	08 95       	ret

00000d6e <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	if(debounceTime > 0) {
     d6e:	80 91 19 05 	lds	r24, 0x0519
     d72:	88 23       	and	r24, r24
     d74:	29 f0       	breq	.+10     	; 0xd80 <KeypadDebounce+0x12>
		debounceTime--;
     d76:	80 91 19 05 	lds	r24, 0x0519
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	80 93 19 05 	sts	0x0519, r24
	}
	uint8_t key = KeypadScan(); //Scan the keypad
     d80:	0e 94 42 06 	call	0xc84	; 0xc84 <KeypadScan>
     d84:	98 2f       	mov	r25, r24
	switch(keyState){
     d86:	80 91 44 03 	lds	r24, 0x0344
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 f0       	breq	.+36     	; 0xdb2 <KeypadDebounce+0x44>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	28 f0       	brcs	.+10     	; 0xd9c <KeypadDebounce+0x2e>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	21 f1       	breq	.+72     	; 0xdde <KeypadDebounce+0x70>
     d96:	83 30       	cpi	r24, 0x03	; 3
     d98:	b9 f5       	brne	.+110    	; 0xe08 <KeypadDebounce+0x9a>
     d9a:	2a c0       	rjmp	.+84     	; 0xdf0 <KeypadDebounce+0x82>
	
		case RELEASED:
			if (key){
     d9c:	99 23       	and	r25, r25
     d9e:	a1 f1       	breq	.+104    	; 0xe08 <KeypadDebounce+0x9a>
				keyState = MAYBEPUSHED;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 44 03 	sts	0x0344, r24
				debounceTime = DEBOUNCE_TIME;
     da6:	8e e1       	ldi	r24, 0x1E	; 30
     da8:	80 93 19 05 	sts	0x0519, r24
				checkKey = key;
     dac:	90 93 1a 05 	sts	0x051A, r25
     db0:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     db2:	80 91 19 05 	lds	r24, 0x0519
     db6:	88 23       	and	r24, r24
     db8:	39 f5       	brne	.+78     	; 0xe08 <KeypadDebounce+0x9a>
				if (key && key == checkKey) {
     dba:	99 23       	and	r25, r25
     dbc:	69 f0       	breq	.+26     	; 0xdd8 <KeypadDebounce+0x6a>
     dbe:	80 91 1a 05 	lds	r24, 0x051A
     dc2:	98 17       	cp	r25, r24
     dc4:	49 f4       	brne	.+18     	; 0xdd8 <KeypadDebounce+0x6a>
					keyState = PUSHED;
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	80 93 44 03 	sts	0x0344, r24
					curKey = key;
     dcc:	90 93 18 05 	sts	0x0518, r25
					KeypadAppend(key);
     dd0:	89 2f       	mov	r24, r25
     dd2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <KeypadAppend>
     dd6:	08 95       	ret
				} else {
					keyState = RELEASED;
     dd8:	10 92 44 03 	sts	0x0344, r1
     ddc:	08 95       	ret
				}
			}
			break;
		case PUSHED:
			if (key == 0){
     dde:	99 23       	and	r25, r25
     de0:	99 f4       	brne	.+38     	; 0xe08 <KeypadDebounce+0x9a>
				keyState = MAYBERELEASED;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	80 93 44 03 	sts	0x0344, r24
				debounceTime = DEBOUNCE_TIME;
     de8:	8e e1       	ldi	r24, 0x1E	; 30
     dea:	80 93 19 05 	sts	0x0519, r24
     dee:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     df0:	80 91 19 05 	lds	r24, 0x0519
     df4:	88 23       	and	r24, r24
     df6:	41 f4       	brne	.+16     	; 0xe08 <KeypadDebounce+0x9a>
				if (key == 0) {
     df8:	99 23       	and	r25, r25
     dfa:	21 f4       	brne	.+8      	; 0xe04 <KeypadDebounce+0x96>
					keyState = PUSHED;
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	80 93 44 03 	sts	0x0344, r24
     e02:	08 95       	ret
				} else {
					keyState = RELEASED;
     e04:	10 92 44 03 	sts	0x0344, r1
     e08:	08 95       	ret

00000e0a <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     e0a:	90 91 18 05 	lds	r25, 0x0518
	if (curKey){
     e0e:	80 91 18 05 	lds	r24, 0x0518
     e12:	88 23       	and	r24, r24
     e14:	11 f0       	breq	.+4      	; 0xe1a <KeypadKey+0x10>
		curKey = 0;
     e16:	10 92 18 05 	sts	0x0518, r1
	}
	return tmpKey;
}
     e1a:	89 2f       	mov	r24, r25
     e1c:	08 95       	ret

00000e1e <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
unsigned int KeypadInt(void) {
	return KeypadInput;
}
     e1e:	80 91 41 03 	lds	r24, 0x0341
     e22:	90 91 42 03 	lds	r25, 0x0342
     e26:	08 95       	ret

00000e28 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     e28:	80 91 43 03 	lds	r24, 0x0343
     e2c:	08 95       	ret

00000e2e <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     e2e:	28 2f       	mov	r18, r24
     e30:	20 7f       	andi	r18, 0xF0	; 240
     e32:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     e34:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     e36:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e38:	20 ea       	ldi	r18, 0xA0	; 160
     e3a:	3f e0       	ldi	r19, 0x0F	; 15
     e3c:	f9 01       	movw	r30, r18
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     e42:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     e44:	40 98       	cbi	0x08, 0	; 8
     e46:	f9 01       	movw	r30, r18
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	44 e0       	ldi	r20, 0x04	; 4
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	4a 95       	dec	r20
     e56:	e1 f7       	brne	.-8      	; 0xe50 <LCDsendChar+0x22>
     e58:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     e5a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     e5c:	42 9a       	sbi	0x08, 2	; 8
     e5e:	c9 01       	movw	r24, r18
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     e64:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     e66:	40 98       	cbi	0x08, 0	; 8
     e68:	c9 01       	movw	r24, r18
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     e6e:	08 95       	ret

00000e70 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     e70:	28 2f       	mov	r18, r24
     e72:	20 7f       	andi	r18, 0xF0	; 240
     e74:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     e76:	42 9a       	sbi	0x08, 2	; 8
     e78:	20 ea       	ldi	r18, 0xA0	; 160
     e7a:	3f e0       	ldi	r19, 0x0F	; 15
     e7c:	f9 01       	movw	r30, r18
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e82:	42 98       	cbi	0x08, 2	; 8
     e84:	f9 01       	movw	r30, r18
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	54 e0       	ldi	r21, 0x04	; 4
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	5a 95       	dec	r21
     e94:	e1 f7       	brne	.-8      	; 0xe8e <LCDsendCommand+0x1e>
     e96:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     e98:	42 9a       	sbi	0x08, 2	; 8
     e9a:	c9 01       	movw	r24, r18
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ea0:	42 98       	cbi	0x08, 2	; 8
     ea2:	c9 01       	movw	r24, r18
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     ea8:	08 95       	ret

00000eaa <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
     eb0:	08 95       	ret

00000eb2 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
     eb8:	08 95       	ret

00000eba <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	49 f0       	breq	.+18     	; 0xeda <LCDstring+0x20>
     ec8:	ec 01       	movw	r28, r24
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     ece:	89 91       	ld	r24, Y+
     ed0:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     ed4:	1f 5f       	subi	r17, 0xFF	; 255
     ed6:	10 17       	cp	r17, r16
     ed8:	d0 f3       	brcs	.-12     	; 0xece <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     ee4:	62 30       	cpi	r22, 0x02	; 2
     ee6:	31 f0       	breq	.+12     	; 0xef4 <LCDGotoXY+0x10>
     ee8:	63 30       	cpi	r22, 0x03	; 3
     eea:	31 f0       	breq	.+12     	; 0xef8 <LCDGotoXY+0x14>
     eec:	61 30       	cpi	r22, 0x01	; 1
     eee:	29 f4       	brne	.+10     	; 0xefa <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     ef0:	80 5c       	subi	r24, 0xC0	; 192
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     ef4:	8c 5e       	subi	r24, 0xEC	; 236
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ef8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
	
}
     f00:	08 95       	ret

00000f02 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     f0c:	64 2f       	mov	r22, r20
     f0e:	0e 94 72 07 	call	0xee4	; 0xee4 <LCDGotoXY>
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     f16:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     f1a:	1f 5f       	subi	r17, 0xFF	; 255
     f1c:	fe 01       	movw	r30, r28
     f1e:	e1 0f       	add	r30, r17
     f20:	f1 1d       	adc	r31, r1
     f22:	84 91       	lpm	r24, Z+
     f24:	88 23       	and	r24, r24
     f26:	b9 f7       	brne	.-18     	; 0xf16 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	08 95       	ret

00000f30 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	7c 01       	movw	r14, r24
     f3e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     f40:	11 0f       	add	r17, r17
     f42:	11 0f       	add	r17, r17
     f44:	11 0f       	add	r17, r17
     f46:	10 64       	ori	r17, 0x40	; 64
     f48:	c0 e0       	ldi	r28, 0x00	; 0
     f4a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     f4c:	f7 01       	movw	r30, r14
     f4e:	ec 0f       	add	r30, r28
     f50:	fd 1f       	adc	r31, r29
     f52:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     f54:	81 2f       	mov	r24, r17
     f56:	8c 0f       	add	r24, r28
     f58:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
		LCDsendChar(pcc);
     f5c:	80 2f       	mov	r24, r16
     f5e:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     f62:	21 96       	adiw	r28, 0x01	; 1
     f64:	c8 30       	cpi	r28, 0x08	; 8
     f66:	d1 05       	cpc	r29, r1
     f68:	89 f7       	brne	.-30     	; 0xf4c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	80 e6       	ldi	r24, 0x60	; 96
     f80:	9a ee       	ldi	r25, 0xEA	; 234
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     f86:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     f88:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     f8a:	87 b1       	in	r24, 0x07	; 7
     f8c:	80 6f       	ori	r24, 0xF0	; 240
     f8e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     f90:	87 b1       	in	r24, 0x07	; 7
     f92:	87 60       	ori	r24, 0x07	; 7
     f94:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f96:	80 e3       	ldi	r24, 0x30	; 48
     f98:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f9a:	42 9a       	sbi	0x08, 2	; 8
     f9c:	20 ea       	ldi	r18, 0xA0	; 160
     f9e:	3f e0       	ldi	r19, 0x0F	; 15
     fa0:	f9 01       	movw	r30, r18
     fa2:	31 97       	sbiw	r30, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fa6:	42 98       	cbi	0x08, 2	; 8
     fa8:	f9 01       	movw	r30, r18
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     fae:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     fb0:	42 9a       	sbi	0x08, 2	; 8
     fb2:	c9 01       	movw	r24, r18
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fb8:	42 98       	cbi	0x08, 2	; 8
     fba:	c9 01       	movw	r24, r18
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     fc4:	42 9a       	sbi	0x08, 2	; 8
     fc6:	c9 01       	movw	r24, r18
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     fcc:	42 98       	cbi	0x08, 2	; 8
     fce:	c9 01       	movw	r24, r18
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     fd4:	88 e2       	ldi	r24, 0x28	; 40
     fd6:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     fda:	8c e0       	ldi	r24, 0x0C	; 12
     fdc:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
     fe0:	cb e0       	ldi	r28, 0x0B	; 11
     fe2:	d1 e0       	ldi	r29, 0x01	; 1
     fe4:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     fe6:	16 2f       	mov	r17, r22
     fe8:	1f 5f       	subi	r17, 0xFF	; 255
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 98 07 	call	0xf30	; 0xf30 <LCDdefinechar>
     ff0:	28 96       	adiw	r28, 0x08	; 8
     ff2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     ff4:	18 30       	cpi	r17, 0x08	; 8
     ff6:	b9 f7       	brne	.-18     	; 0xfe6 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	08 95       	ret

00001000 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	08 2f       	mov	r16, r24
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    100a:	8e e1       	ldi	r24, 0x1E	; 30
    100c:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1010:	1f 5f       	subi	r17, 0xFF	; 255
    1012:	10 17       	cp	r17, r16
    1014:	d0 f3       	brcs	.-12     	; 0x100a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	08 2f       	mov	r16, r24
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	04 c0       	rjmp	.+8      	; 0x102e <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1026:	88 e1       	ldi	r24, 0x18	; 24
    1028:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    102c:	1f 5f       	subi	r17, 0xFF	; 255
    102e:	10 17       	cp	r17, r16
    1030:	d0 f3       	brcs	.-12     	; 0x1026 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1038:	8e e0       	ldi	r24, 0x0E	; 14
    103a:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
    103e:	08 95       	ret

00001040 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1040:	8f e0       	ldi	r24, 0x0F	; 15
    1042:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
    1046:	08 95       	ret

00001048 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1048:	8c e0       	ldi	r24, 0x0C	; 12
    104a:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
    104e:	08 95       	ret

00001050 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
    1056:	08 95       	ret

00001058 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1058:	8c e0       	ldi	r24, 0x0C	; 12
    105a:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
}
    105e:	08 95       	ret

00001060 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	08 2f       	mov	r16, r24
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    106a:	80 e1       	ldi	r24, 0x10	; 16
    106c:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1070:	1f 5f       	subi	r17, 0xFF	; 255
    1072:	10 17       	cp	r17, r16
    1074:	d0 f3       	brcs	.-12     	; 0x106a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	08 2f       	mov	r16, r24
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1086:	84 e1       	ldi	r24, 0x14	; 20
    1088:	0e 94 38 07 	call	0xe70	; 0xe70 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    108c:	1f 5f       	subi	r17, 0xFF	; 255
    108e:	10 17       	cp	r17, r16
    1090:	d0 f3       	brcs	.-12     	; 0x1086 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	08 95       	ret

00001098 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    10a8:	96 e0       	ldi	r25, 0x06	; 6
    10aa:	89 9f       	mul	r24, r25
    10ac:	c0 01       	movw	r24, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	24 2f       	mov	r18, r20
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	ac 01       	movw	r20, r24
    10b6:	42 9f       	mul	r20, r18
    10b8:	c0 01       	movw	r24, r0
    10ba:	43 9f       	mul	r20, r19
    10bc:	90 0d       	add	r25, r0
    10be:	52 9f       	mul	r21, r18
    10c0:	90 0d       	add	r25, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__divmodhi4>
    10ca:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    10cc:	cb 01       	movw	r24, r22
    10ce:	66 e0       	ldi	r22, 0x06	; 6
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__udivmodhi4>
    10d6:	e8 2e       	mov	r14, r24
    10d8:	ff 24       	eor	r15, r15
    10da:	00 e0       	ldi	r16, 0x00	; 0
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	12 c0       	rjmp	.+36     	; 0x1104 <__stack+0x5>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    10e0:	c8 01       	movw	r24, r16
    10e2:	05 96       	adiw	r24, 0x05	; 5
    10e4:	c8 17       	cp	r28, r24
    10e6:	d9 07       	cpc	r29, r25
    10e8:	10 f0       	brcs	.+4      	; 0x10ee <LCDprogressBar+0x56>
    10ea:	85 e0       	ldi	r24, 0x05	; 5
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    10ee:	c0 17       	cp	r28, r16
    10f0:	d1 07       	cpc	r29, r17
    10f2:	10 f0       	brcs	.+4      	; 0x10f8 <LCDprogressBar+0x60>
    10f4:	8e 2d       	mov	r24, r14
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <LCDprogressBar+0x62>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    10fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    10fe:	f3 94       	inc	r15
    1100:	0a 5f       	subi	r16, 0xFA	; 250
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	fd 14       	cp	r15, r13
    1106:	60 f3       	brcs	.-40     	; 0x10e0 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	08 95       	ret

00001118 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1118:	87 e6       	ldi	r24, 0x67	; 103
    111a:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    111e:	88 e1       	ldi	r24, 0x18	; 24
    1120:	80 93 c1 00 	sts	0x00C1, r24
}
    1124:	08 95       	ret

00001126 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1126:	1f 93       	push	r17
    1128:	18 2f       	mov	r17, r24

  if (c == '\a')
    112a:	87 30       	cpi	r24, 0x07	; 7
    112c:	49 f4       	brne	.+18     	; 0x1140 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    112e:	60 91 1f 05 	lds	r22, 0x051F
    1132:	70 91 20 05 	lds	r23, 0x0520
    1136:	8a e2       	ldi	r24, 0x2A	; 42
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <fputs>
    113e:	0b c0       	rjmp	.+22     	; 0x1156 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1140:	8a 30       	cpi	r24, 0x0A	; 10
    1142:	19 f4       	brne	.+6      	; 0x114a <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1144:	8d e0       	ldi	r24, 0x0D	; 13
    1146:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    114a:	80 91 c0 00 	lds	r24, 0x00C0
    114e:	85 ff       	sbrs	r24, 5
    1150:	fc cf       	rjmp	.-8      	; 0x114a <uart_putchar+0x24>
  UDR0 = c;
    1152:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	1f 91       	pop	r17
    115c:	08 95       	ret

0000115e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    116c:	80 91 45 03 	lds	r24, 0x0345
    1170:	90 91 46 03 	lds	r25, 0x0346
    1174:	89 2b       	or	r24, r25
    1176:	09 f0       	breq	.+2      	; 0x117a <uart_getchar+0x1c>
    1178:	9f c0       	rjmp	.+318    	; 0x12b8 <uart_getchar+0x15a>
    117a:	07 e4       	ldi	r16, 0x47	; 71
    117c:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    117e:	80 91 c0 00 	lds	r24, 0x00C0
    1182:	87 ff       	sbrs	r24, 7
    1184:	fc cf       	rjmp	.-8      	; 0x117e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1186:	80 91 c0 00 	lds	r24, 0x00C0
    118a:	84 ff       	sbrs	r24, 4
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <uart_getchar+0x36>
    118e:	2e ef       	ldi	r18, 0xFE	; 254
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	a6 c0       	rjmp	.+332    	; 0x12e0 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1194:	80 91 c0 00 	lds	r24, 0x00C0
    1198:	83 fd       	sbrc	r24, 3
    119a:	a0 c0       	rjmp	.+320    	; 0x12dc <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    119c:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    11a0:	9d 30       	cpi	r25, 0x0D	; 13
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    11a4:	9a 30       	cpi	r25, 0x0A	; 10
    11a6:	69 f4       	brne	.+26     	; 0x11c2 <uart_getchar+0x64>
	  {
	    *cp = c;
    11a8:	8a e0       	ldi	r24, 0x0A	; 10
    11aa:	f8 01       	movw	r30, r16
    11ac:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    11ae:	b7 01       	movw	r22, r14
    11b0:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
	    rxp = b;
    11b4:	87 e4       	ldi	r24, 0x47	; 71
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	90 93 46 03 	sts	0x0346, r25
    11bc:	80 93 45 03 	sts	0x0345, r24
    11c0:	7b c0       	rjmp	.+246    	; 0x12b8 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    11c2:	99 30       	cpi	r25, 0x09	; 9
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <uart_getchar+0x6a>
    11c6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    11c8:	89 2f       	mov	r24, r25
    11ca:	80 52       	subi	r24, 0x20	; 32
    11cc:	8f 35       	cpi	r24, 0x5F	; 95
    11ce:	10 f0       	brcs	.+4      	; 0x11d4 <uart_getchar+0x76>
    11d0:	90 3a       	cpi	r25, 0xA0	; 160
    11d2:	70 f0       	brcs	.+28     	; 0x11f0 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    11d4:	f3 e0       	ldi	r31, 0x03	; 3
    11d6:	06 39       	cpi	r16, 0x96	; 150
    11d8:	1f 07       	cpc	r17, r31
    11da:	11 f4       	brne	.+4      	; 0x11e0 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    11dc:	87 e0       	ldi	r24, 0x07	; 7
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    11e0:	f8 01       	movw	r30, r16
    11e2:	91 93       	st	Z+, r25
    11e4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    11e6:	89 2f       	mov	r24, r25
    11e8:	b7 01       	movw	r22, r14
    11ea:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
    11ee:	c7 cf       	rjmp	.-114    	; 0x117e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    11f0:	92 31       	cpi	r25, 0x12	; 18
    11f2:	39 f1       	breq	.+78     	; 0x1242 <uart_getchar+0xe4>
    11f4:	93 31       	cpi	r25, 0x13	; 19
    11f6:	38 f4       	brcc	.+14     	; 0x1206 <uart_getchar+0xa8>
    11f8:	93 30       	cpi	r25, 0x03	; 3
    11fa:	09 f4       	brne	.+2      	; 0x11fe <uart_getchar+0xa0>
    11fc:	6f c0       	rjmp	.+222    	; 0x12dc <uart_getchar+0x17e>
    11fe:	98 30       	cpi	r25, 0x08	; 8
    1200:	09 f0       	breq	.+2      	; 0x1204 <uart_getchar+0xa6>
    1202:	bd cf       	rjmp	.-134    	; 0x117e <uart_getchar+0x20>
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <uart_getchar+0xba>
    1206:	97 31       	cpi	r25, 0x17	; 23
    1208:	09 f4       	brne	.+2      	; 0x120c <uart_getchar+0xae>
    120a:	4b c0       	rjmp	.+150    	; 0x12a2 <uart_getchar+0x144>
    120c:	9f 37       	cpi	r25, 0x7F	; 127
    120e:	21 f0       	breq	.+8      	; 0x1218 <uart_getchar+0xba>
    1210:	95 31       	cpi	r25, 0x15	; 21
    1212:	09 f0       	breq	.+2      	; 0x1216 <uart_getchar+0xb8>
    1214:	b4 cf       	rjmp	.-152    	; 0x117e <uart_getchar+0x20>
    1216:	32 c0       	rjmp	.+100    	; 0x127c <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1218:	f3 e0       	ldi	r31, 0x03	; 3
    121a:	07 34       	cpi	r16, 0x47	; 71
    121c:	1f 07       	cpc	r17, r31
    121e:	09 f0       	breq	.+2      	; 0x1222 <uart_getchar+0xc4>
    1220:	08 f4       	brcc	.+2      	; 0x1224 <uart_getchar+0xc6>
    1222:	ad cf       	rjmp	.-166    	; 0x117e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1224:	88 e0       	ldi	r24, 0x08	; 8
    1226:	b7 01       	movw	r22, r14
    1228:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar(' ', stream);
    122c:	80 e2       	ldi	r24, 0x20	; 32
    122e:	b7 01       	movw	r22, r14
    1230:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar('\b', stream);
    1234:	88 e0       	ldi	r24, 0x08	; 8
    1236:	b7 01       	movw	r22, r14
    1238:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		cp--;
    123c:	01 50       	subi	r16, 0x01	; 1
    123e:	10 40       	sbci	r17, 0x00	; 0
    1240:	9e cf       	rjmp	.-196    	; 0x117e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1242:	8d e0       	ldi	r24, 0x0D	; 13
    1244:	b7 01       	movw	r22, r14
    1246:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
    124a:	c7 e4       	ldi	r28, 0x47	; 71
    124c:	d3 e0       	ldi	r29, 0x03	; 3
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1250:	89 91       	ld	r24, Y+
    1252:	b7 01       	movw	r22, r14
    1254:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1258:	c0 17       	cp	r28, r16
    125a:	d1 07       	cpc	r29, r17
    125c:	c8 f3       	brcs	.-14     	; 0x1250 <uart_getchar+0xf2>
    125e:	8f cf       	rjmp	.-226    	; 0x117e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1260:	88 e0       	ldi	r24, 0x08	; 8
    1262:	b7 01       	movw	r22, r14
    1264:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar(' ', stream);
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	b7 01       	movw	r22, r14
    126c:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar('\b', stream);
    1270:	88 e0       	ldi	r24, 0x08	; 8
    1272:	b7 01       	movw	r22, r14
    1274:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		cp--;
    1278:	01 50       	subi	r16, 0x01	; 1
    127a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	07 34       	cpi	r16, 0x47	; 71
    1280:	18 07       	cpc	r17, r24
    1282:	09 f0       	breq	.+2      	; 0x1286 <uart_getchar+0x128>
    1284:	68 f7       	brcc	.-38     	; 0x1260 <uart_getchar+0x102>
    1286:	7b cf       	rjmp	.-266    	; 0x117e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1288:	88 e0       	ldi	r24, 0x08	; 8
    128a:	b7 01       	movw	r22, r14
    128c:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar(' ', stream);
    1290:	80 e2       	ldi	r24, 0x20	; 32
    1292:	b7 01       	movw	r22, r14
    1294:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
		uart_putchar('\b', stream);
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	b7 01       	movw	r22, r14
    129c:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_putchar>
    12a0:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    12a2:	e3 e0       	ldi	r30, 0x03	; 3
    12a4:	07 34       	cpi	r16, 0x47	; 71
    12a6:	1e 07       	cpc	r17, r30
    12a8:	09 f0       	breq	.+2      	; 0x12ac <uart_getchar+0x14e>
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <uart_getchar+0x150>
    12ac:	68 cf       	rjmp	.-304    	; 0x117e <uart_getchar+0x20>
    12ae:	e8 01       	movw	r28, r16
    12b0:	8a 91       	ld	r24, -Y
    12b2:	80 32       	cpi	r24, 0x20	; 32
    12b4:	49 f7       	brne	.-46     	; 0x1288 <uart_getchar+0x12a>
    12b6:	63 cf       	rjmp	.-314    	; 0x117e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    12b8:	e0 91 45 03 	lds	r30, 0x0345
    12bc:	f0 91 46 03 	lds	r31, 0x0346
    12c0:	81 91       	ld	r24, Z+
    12c2:	f0 93 46 03 	sts	0x0346, r31
    12c6:	e0 93 45 03 	sts	0x0345, r30
  if (c == '\n')
    12ca:	8a 30       	cpi	r24, 0x0A	; 10
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <uart_getchar+0x178>
    rxp = 0;
    12ce:	10 92 46 03 	sts	0x0346, r1
    12d2:	10 92 45 03 	sts	0x0345, r1

  return c;
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <uart_getchar+0x182>
    12dc:	2f ef       	ldi	r18, 0xFF	; 255
    12de:	3f ef       	ldi	r19, 0xFF	; 255
}
    12e0:	c9 01       	movw	r24, r18
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	08 95       	ret

000012f0 <__fixunssfsi>:
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	7b 01       	movw	r14, r22
    12fa:	8c 01       	movw	r16, r24
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	5f e4       	ldi	r21, 0x4F	; 79
    1304:	0e 94 48 0c 	call	0x1890	; 0x1890 <__gesf2>
    1308:	88 23       	and	r24, r24
    130a:	8c f0       	brlt	.+34     	; 0x132e <__fixunssfsi+0x3e>
    130c:	c8 01       	movw	r24, r16
    130e:	b7 01       	movw	r22, r14
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	5f e4       	ldi	r21, 0x4F	; 79
    1318:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__subsf3>
    131c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fixsfsi>
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	20 50       	subi	r18, 0x00	; 0
    1326:	30 40       	sbci	r19, 0x00	; 0
    1328:	40 40       	sbci	r20, 0x00	; 0
    132a:	50 48       	sbci	r21, 0x80	; 128
    132c:	06 c0       	rjmp	.+12     	; 0x133a <__fixunssfsi+0x4a>
    132e:	c8 01       	movw	r24, r16
    1330:	b7 01       	movw	r22, r14
    1332:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fixsfsi>
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	b9 01       	movw	r22, r18
    133c:	ca 01       	movw	r24, r20
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	08 95       	ret

00001348 <_fpadd_parts>:
    1348:	a0 e0       	ldi	r26, 0x00	; 0
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ea ea       	ldi	r30, 0xAA	; 170
    134e:	f9 e0       	ldi	r31, 0x09	; 9
    1350:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__>
    1354:	dc 01       	movw	r26, r24
    1356:	2b 01       	movw	r4, r22
    1358:	fa 01       	movw	r30, r20
    135a:	9c 91       	ld	r25, X
    135c:	92 30       	cpi	r25, 0x02	; 2
    135e:	08 f4       	brcc	.+2      	; 0x1362 <_fpadd_parts+0x1a>
    1360:	39 c1       	rjmp	.+626    	; 0x15d4 <_fpadd_parts+0x28c>
    1362:	eb 01       	movw	r28, r22
    1364:	88 81       	ld	r24, Y
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	08 f4       	brcc	.+2      	; 0x136c <_fpadd_parts+0x24>
    136a:	33 c1       	rjmp	.+614    	; 0x15d2 <_fpadd_parts+0x28a>
    136c:	94 30       	cpi	r25, 0x04	; 4
    136e:	69 f4       	brne	.+26     	; 0x138a <_fpadd_parts+0x42>
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	09 f0       	breq	.+2      	; 0x1376 <_fpadd_parts+0x2e>
    1374:	2f c1       	rjmp	.+606    	; 0x15d4 <_fpadd_parts+0x28c>
    1376:	11 96       	adiw	r26, 0x01	; 1
    1378:	9c 91       	ld	r25, X
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	98 17       	cp	r25, r24
    1380:	09 f4       	brne	.+2      	; 0x1384 <_fpadd_parts+0x3c>
    1382:	28 c1       	rjmp	.+592    	; 0x15d4 <_fpadd_parts+0x28c>
    1384:	a2 e3       	ldi	r26, 0x32	; 50
    1386:	b2 e0       	ldi	r27, 0x02	; 2
    1388:	25 c1       	rjmp	.+586    	; 0x15d4 <_fpadd_parts+0x28c>
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	09 f4       	brne	.+2      	; 0x1390 <_fpadd_parts+0x48>
    138e:	21 c1       	rjmp	.+578    	; 0x15d2 <_fpadd_parts+0x28a>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	a9 f4       	brne	.+42     	; 0x13be <_fpadd_parts+0x76>
    1394:	92 30       	cpi	r25, 0x02	; 2
    1396:	09 f0       	breq	.+2      	; 0x139a <_fpadd_parts+0x52>
    1398:	1d c1       	rjmp	.+570    	; 0x15d4 <_fpadd_parts+0x28c>
    139a:	9a 01       	movw	r18, r20
    139c:	ad 01       	movw	r20, r26
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	ea 01       	movw	r28, r20
    13a2:	09 90       	ld	r0, Y+
    13a4:	ae 01       	movw	r20, r28
    13a6:	e9 01       	movw	r28, r18
    13a8:	09 92       	st	Y+, r0
    13aa:	9e 01       	movw	r18, r28
    13ac:	81 50       	subi	r24, 0x01	; 1
    13ae:	c1 f7       	brne	.-16     	; 0x13a0 <_fpadd_parts+0x58>
    13b0:	e2 01       	movw	r28, r4
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	9c 91       	ld	r25, X
    13b8:	89 23       	and	r24, r25
    13ba:	81 83       	std	Z+1, r24	; 0x01
    13bc:	08 c1       	rjmp	.+528    	; 0x15ce <_fpadd_parts+0x286>
    13be:	92 30       	cpi	r25, 0x02	; 2
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <_fpadd_parts+0x7c>
    13c2:	07 c1       	rjmp	.+526    	; 0x15d2 <_fpadd_parts+0x28a>
    13c4:	12 96       	adiw	r26, 0x02	; 2
    13c6:	2d 90       	ld	r2, X+
    13c8:	3c 90       	ld	r3, X
    13ca:	13 97       	sbiw	r26, 0x03	; 3
    13cc:	eb 01       	movw	r28, r22
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	14 96       	adiw	r26, 0x04	; 4
    13d4:	ad 90       	ld	r10, X+
    13d6:	bd 90       	ld	r11, X+
    13d8:	cd 90       	ld	r12, X+
    13da:	dc 90       	ld	r13, X
    13dc:	17 97       	sbiw	r26, 0x07	; 7
    13de:	ec 80       	ldd	r14, Y+4	; 0x04
    13e0:	fd 80       	ldd	r15, Y+5	; 0x05
    13e2:	0e 81       	ldd	r16, Y+6	; 0x06
    13e4:	1f 81       	ldd	r17, Y+7	; 0x07
    13e6:	91 01       	movw	r18, r2
    13e8:	28 1b       	sub	r18, r24
    13ea:	39 0b       	sbc	r19, r25
    13ec:	b9 01       	movw	r22, r18
    13ee:	37 ff       	sbrs	r19, 7
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <_fpadd_parts+0xb2>
    13f2:	66 27       	eor	r22, r22
    13f4:	77 27       	eor	r23, r23
    13f6:	62 1b       	sub	r22, r18
    13f8:	73 0b       	sbc	r23, r19
    13fa:	60 32       	cpi	r22, 0x20	; 32
    13fc:	71 05       	cpc	r23, r1
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <_fpadd_parts+0xba>
    1400:	61 c0       	rjmp	.+194    	; 0x14c4 <_fpadd_parts+0x17c>
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	6c f5       	brge	.+90     	; 0x1462 <_fpadd_parts+0x11a>
    1408:	37 01       	movw	r6, r14
    140a:	48 01       	movw	r8, r16
    140c:	06 2e       	mov	r0, r22
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <_fpadd_parts+0xd0>
    1410:	96 94       	lsr	r9
    1412:	87 94       	ror	r8
    1414:	77 94       	ror	r7
    1416:	67 94       	ror	r6
    1418:	0a 94       	dec	r0
    141a:	d2 f7       	brpl	.-12     	; 0x1410 <_fpadd_parts+0xc8>
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	04 c0       	rjmp	.+8      	; 0x142e <_fpadd_parts+0xe6>
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	44 1f       	adc	r20, r20
    142c:	55 1f       	adc	r21, r21
    142e:	6a 95       	dec	r22
    1430:	d2 f7       	brpl	.-12     	; 0x1426 <_fpadd_parts+0xde>
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	30 40       	sbci	r19, 0x00	; 0
    1436:	40 40       	sbci	r20, 0x00	; 0
    1438:	50 40       	sbci	r21, 0x00	; 0
    143a:	2e 21       	and	r18, r14
    143c:	3f 21       	and	r19, r15
    143e:	40 23       	and	r20, r16
    1440:	51 23       	and	r21, r17
    1442:	21 15       	cp	r18, r1
    1444:	31 05       	cpc	r19, r1
    1446:	41 05       	cpc	r20, r1
    1448:	51 05       	cpc	r21, r1
    144a:	21 f0       	breq	.+8      	; 0x1454 <_fpadd_parts+0x10c>
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	79 01       	movw	r14, r18
    1456:	8a 01       	movw	r16, r20
    1458:	e6 28       	or	r14, r6
    145a:	f7 28       	or	r15, r7
    145c:	08 29       	or	r16, r8
    145e:	19 29       	or	r17, r9
    1460:	3c c0       	rjmp	.+120    	; 0x14da <_fpadd_parts+0x192>
    1462:	23 2b       	or	r18, r19
    1464:	d1 f1       	breq	.+116    	; 0x14da <_fpadd_parts+0x192>
    1466:	26 0e       	add	r2, r22
    1468:	37 1e       	adc	r3, r23
    146a:	35 01       	movw	r6, r10
    146c:	46 01       	movw	r8, r12
    146e:	06 2e       	mov	r0, r22
    1470:	04 c0       	rjmp	.+8      	; 0x147a <_fpadd_parts+0x132>
    1472:	96 94       	lsr	r9
    1474:	87 94       	ror	r8
    1476:	77 94       	ror	r7
    1478:	67 94       	ror	r6
    147a:	0a 94       	dec	r0
    147c:	d2 f7       	brpl	.-12     	; 0x1472 <_fpadd_parts+0x12a>
    147e:	21 e0       	ldi	r18, 0x01	; 1
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <_fpadd_parts+0x148>
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	44 1f       	adc	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	6a 95       	dec	r22
    1492:	d2 f7       	brpl	.-12     	; 0x1488 <_fpadd_parts+0x140>
    1494:	21 50       	subi	r18, 0x01	; 1
    1496:	30 40       	sbci	r19, 0x00	; 0
    1498:	40 40       	sbci	r20, 0x00	; 0
    149a:	50 40       	sbci	r21, 0x00	; 0
    149c:	2a 21       	and	r18, r10
    149e:	3b 21       	and	r19, r11
    14a0:	4c 21       	and	r20, r12
    14a2:	5d 21       	and	r21, r13
    14a4:	21 15       	cp	r18, r1
    14a6:	31 05       	cpc	r19, r1
    14a8:	41 05       	cpc	r20, r1
    14aa:	51 05       	cpc	r21, r1
    14ac:	21 f0       	breq	.+8      	; 0x14b6 <_fpadd_parts+0x16e>
    14ae:	21 e0       	ldi	r18, 0x01	; 1
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	59 01       	movw	r10, r18
    14b8:	6a 01       	movw	r12, r20
    14ba:	a6 28       	or	r10, r6
    14bc:	b7 28       	or	r11, r7
    14be:	c8 28       	or	r12, r8
    14c0:	d9 28       	or	r13, r9
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <_fpadd_parts+0x192>
    14c4:	82 15       	cp	r24, r2
    14c6:	93 05       	cpc	r25, r3
    14c8:	2c f0       	brlt	.+10     	; 0x14d4 <_fpadd_parts+0x18c>
    14ca:	1c 01       	movw	r2, r24
    14cc:	aa 24       	eor	r10, r10
    14ce:	bb 24       	eor	r11, r11
    14d0:	65 01       	movw	r12, r10
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <_fpadd_parts+0x192>
    14d4:	ee 24       	eor	r14, r14
    14d6:	ff 24       	eor	r15, r15
    14d8:	87 01       	movw	r16, r14
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	9c 91       	ld	r25, X
    14de:	d2 01       	movw	r26, r4
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	8c 91       	ld	r24, X
    14e4:	98 17       	cp	r25, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_fpadd_parts+0x1a2>
    14e8:	45 c0       	rjmp	.+138    	; 0x1574 <_fpadd_parts+0x22c>
    14ea:	99 23       	and	r25, r25
    14ec:	39 f0       	breq	.+14     	; 0x14fc <_fpadd_parts+0x1b4>
    14ee:	a8 01       	movw	r20, r16
    14f0:	97 01       	movw	r18, r14
    14f2:	2a 19       	sub	r18, r10
    14f4:	3b 09       	sbc	r19, r11
    14f6:	4c 09       	sbc	r20, r12
    14f8:	5d 09       	sbc	r21, r13
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <_fpadd_parts+0x1c0>
    14fc:	a6 01       	movw	r20, r12
    14fe:	95 01       	movw	r18, r10
    1500:	2e 19       	sub	r18, r14
    1502:	3f 09       	sbc	r19, r15
    1504:	40 0b       	sbc	r20, r16
    1506:	51 0b       	sbc	r21, r17
    1508:	57 fd       	sbrc	r21, 7
    150a:	08 c0       	rjmp	.+16     	; 0x151c <_fpadd_parts+0x1d4>
    150c:	11 82       	std	Z+1, r1	; 0x01
    150e:	33 82       	std	Z+3, r3	; 0x03
    1510:	22 82       	std	Z+2, r2	; 0x02
    1512:	24 83       	std	Z+4, r18	; 0x04
    1514:	35 83       	std	Z+5, r19	; 0x05
    1516:	46 83       	std	Z+6, r20	; 0x06
    1518:	57 83       	std	Z+7, r21	; 0x07
    151a:	1d c0       	rjmp	.+58     	; 0x1556 <_fpadd_parts+0x20e>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	81 83       	std	Z+1, r24	; 0x01
    1520:	33 82       	std	Z+3, r3	; 0x03
    1522:	22 82       	std	Z+2, r2	; 0x02
    1524:	88 27       	eor	r24, r24
    1526:	99 27       	eor	r25, r25
    1528:	dc 01       	movw	r26, r24
    152a:	82 1b       	sub	r24, r18
    152c:	93 0b       	sbc	r25, r19
    152e:	a4 0b       	sbc	r26, r20
    1530:	b5 0b       	sbc	r27, r21
    1532:	84 83       	std	Z+4, r24	; 0x04
    1534:	95 83       	std	Z+5, r25	; 0x05
    1536:	a6 83       	std	Z+6, r26	; 0x06
    1538:	b7 83       	std	Z+7, r27	; 0x07
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <_fpadd_parts+0x20e>
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
    1540:	44 1f       	adc	r20, r20
    1542:	55 1f       	adc	r21, r21
    1544:	24 83       	std	Z+4, r18	; 0x04
    1546:	35 83       	std	Z+5, r19	; 0x05
    1548:	46 83       	std	Z+6, r20	; 0x06
    154a:	57 83       	std	Z+7, r21	; 0x07
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	93 83       	std	Z+3, r25	; 0x03
    1554:	82 83       	std	Z+2, r24	; 0x02
    1556:	24 81       	ldd	r18, Z+4	; 0x04
    1558:	35 81       	ldd	r19, Z+5	; 0x05
    155a:	46 81       	ldd	r20, Z+6	; 0x06
    155c:	57 81       	ldd	r21, Z+7	; 0x07
    155e:	da 01       	movw	r26, r20
    1560:	c9 01       	movw	r24, r18
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	a1 09       	sbc	r26, r1
    1566:	b1 09       	sbc	r27, r1
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	af 4f       	sbci	r26, 0xFF	; 255
    156e:	bf 43       	sbci	r27, 0x3F	; 63
    1570:	28 f3       	brcs	.-54     	; 0x153c <_fpadd_parts+0x1f4>
    1572:	0b c0       	rjmp	.+22     	; 0x158a <_fpadd_parts+0x242>
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	33 82       	std	Z+3, r3	; 0x03
    1578:	22 82       	std	Z+2, r2	; 0x02
    157a:	ea 0c       	add	r14, r10
    157c:	fb 1c       	adc	r15, r11
    157e:	0c 1d       	adc	r16, r12
    1580:	1d 1d       	adc	r17, r13
    1582:	e4 82       	std	Z+4, r14	; 0x04
    1584:	f5 82       	std	Z+5, r15	; 0x05
    1586:	06 83       	std	Z+6, r16	; 0x06
    1588:	17 83       	std	Z+7, r17	; 0x07
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	80 83       	st	Z, r24
    158e:	24 81       	ldd	r18, Z+4	; 0x04
    1590:	35 81       	ldd	r19, Z+5	; 0x05
    1592:	46 81       	ldd	r20, Z+6	; 0x06
    1594:	57 81       	ldd	r21, Z+7	; 0x07
    1596:	57 ff       	sbrs	r21, 7
    1598:	1a c0       	rjmp	.+52     	; 0x15ce <_fpadd_parts+0x286>
    159a:	c9 01       	movw	r24, r18
    159c:	aa 27       	eor	r26, r26
    159e:	97 fd       	sbrc	r25, 7
    15a0:	a0 95       	com	r26
    15a2:	ba 2f       	mov	r27, r26
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	90 70       	andi	r25, 0x00	; 0
    15a8:	a0 70       	andi	r26, 0x00	; 0
    15aa:	b0 70       	andi	r27, 0x00	; 0
    15ac:	56 95       	lsr	r21
    15ae:	47 95       	ror	r20
    15b0:	37 95       	ror	r19
    15b2:	27 95       	ror	r18
    15b4:	82 2b       	or	r24, r18
    15b6:	93 2b       	or	r25, r19
    15b8:	a4 2b       	or	r26, r20
    15ba:	b5 2b       	or	r27, r21
    15bc:	84 83       	std	Z+4, r24	; 0x04
    15be:	95 83       	std	Z+5, r25	; 0x05
    15c0:	a6 83       	std	Z+6, r26	; 0x06
    15c2:	b7 83       	std	Z+7, r27	; 0x07
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	93 83       	std	Z+3, r25	; 0x03
    15cc:	82 83       	std	Z+2, r24	; 0x02
    15ce:	df 01       	movw	r26, r30
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <_fpadd_parts+0x28c>
    15d2:	d2 01       	movw	r26, r4
    15d4:	cd 01       	movw	r24, r26
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	e2 e1       	ldi	r30, 0x12	; 18
    15dc:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__epilogue_restores__>

000015e0 <__subsf3>:
    15e0:	a0 e2       	ldi	r26, 0x20	; 32
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 ef       	ldi	r30, 0xF6	; 246
    15e6:	fa e0       	ldi	r31, 0x0A	; 10
    15e8:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    15ec:	69 83       	std	Y+1, r22	; 0x01
    15ee:	7a 83       	std	Y+2, r23	; 0x02
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	2d 83       	std	Y+5, r18	; 0x05
    15f6:	3e 83       	std	Y+6, r19	; 0x06
    15f8:	4f 83       	std	Y+7, r20	; 0x07
    15fa:	58 87       	std	Y+8, r21	; 0x08
    15fc:	e9 e0       	ldi	r30, 0x09	; 9
    15fe:	ee 2e       	mov	r14, r30
    1600:	f1 2c       	mov	r15, r1
    1602:	ec 0e       	add	r14, r28
    1604:	fd 1e       	adc	r15, r29
    1606:	ce 01       	movw	r24, r28
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	b7 01       	movw	r22, r14
    160c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    1610:	8e 01       	movw	r16, r28
    1612:	0f 5e       	subi	r16, 0xEF	; 239
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	ce 01       	movw	r24, r28
    1618:	05 96       	adiw	r24, 0x05	; 5
    161a:	b8 01       	movw	r22, r16
    161c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    1620:	8a 89       	ldd	r24, Y+18	; 0x12
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	89 27       	eor	r24, r25
    1626:	8a 8b       	std	Y+18, r24	; 0x12
    1628:	c7 01       	movw	r24, r14
    162a:	b8 01       	movw	r22, r16
    162c:	ae 01       	movw	r20, r28
    162e:	47 5e       	subi	r20, 0xE7	; 231
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	0e 94 a4 09 	call	0x1348	; 0x1348 <_fpadd_parts>
    1636:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__pack_f>
    163a:	a0 96       	adiw	r28, 0x20	; 32
    163c:	e6 e0       	ldi	r30, 0x06	; 6
    163e:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__epilogue_restores__+0x18>

00001642 <__addsf3>:
    1642:	a0 e2       	ldi	r26, 0x20	; 32
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e7 e2       	ldi	r30, 0x27	; 39
    1648:	fb e0       	ldi	r31, 0x0B	; 11
    164a:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    164e:	69 83       	std	Y+1, r22	; 0x01
    1650:	7a 83       	std	Y+2, r23	; 0x02
    1652:	8b 83       	std	Y+3, r24	; 0x03
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	2d 83       	std	Y+5, r18	; 0x05
    1658:	3e 83       	std	Y+6, r19	; 0x06
    165a:	4f 83       	std	Y+7, r20	; 0x07
    165c:	58 87       	std	Y+8, r21	; 0x08
    165e:	f9 e0       	ldi	r31, 0x09	; 9
    1660:	ef 2e       	mov	r14, r31
    1662:	f1 2c       	mov	r15, r1
    1664:	ec 0e       	add	r14, r28
    1666:	fd 1e       	adc	r15, r29
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	b7 01       	movw	r22, r14
    166e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    1672:	8e 01       	movw	r16, r28
    1674:	0f 5e       	subi	r16, 0xEF	; 239
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	05 96       	adiw	r24, 0x05	; 5
    167c:	b8 01       	movw	r22, r16
    167e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    1682:	c7 01       	movw	r24, r14
    1684:	b8 01       	movw	r22, r16
    1686:	ae 01       	movw	r20, r28
    1688:	47 5e       	subi	r20, 0xE7	; 231
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	0e 94 a4 09 	call	0x1348	; 0x1348 <_fpadd_parts>
    1690:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__pack_f>
    1694:	a0 96       	adiw	r28, 0x20	; 32
    1696:	e6 e0       	ldi	r30, 0x06	; 6
    1698:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__epilogue_restores__+0x18>

0000169c <__mulsf3>:
    169c:	a0 e2       	ldi	r26, 0x20	; 32
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e4 e5       	ldi	r30, 0x54	; 84
    16a2:	fb e0       	ldi	r31, 0x0B	; 11
    16a4:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__>
    16a8:	69 83       	std	Y+1, r22	; 0x01
    16aa:	7a 83       	std	Y+2, r23	; 0x02
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	2d 83       	std	Y+5, r18	; 0x05
    16b2:	3e 83       	std	Y+6, r19	; 0x06
    16b4:	4f 83       	std	Y+7, r20	; 0x07
    16b6:	58 87       	std	Y+8, r21	; 0x08
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	be 01       	movw	r22, r28
    16be:	67 5f       	subi	r22, 0xF7	; 247
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    16c6:	ce 01       	movw	r24, r28
    16c8:	05 96       	adiw	r24, 0x05	; 5
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5e       	subi	r22, 0xEF	; 239
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    16d4:	99 85       	ldd	r25, Y+9	; 0x09
    16d6:	92 30       	cpi	r25, 0x02	; 2
    16d8:	88 f0       	brcs	.+34     	; 0x16fc <__mulsf3+0x60>
    16da:	89 89       	ldd	r24, Y+17	; 0x11
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	c8 f0       	brcs	.+50     	; 0x1712 <__mulsf3+0x76>
    16e0:	94 30       	cpi	r25, 0x04	; 4
    16e2:	19 f4       	brne	.+6      	; 0x16ea <__mulsf3+0x4e>
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	51 f4       	brne	.+20     	; 0x16fc <__mulsf3+0x60>
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__mulsf3+0x56>
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <__mulsf3+0x5c>
    16ee:	92 30       	cpi	r25, 0x02	; 2
    16f0:	81 f4       	brne	.+32     	; 0x1712 <__mulsf3+0x76>
    16f2:	82 e3       	ldi	r24, 0x32	; 50
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	c6 c0       	rjmp	.+396    	; 0x1884 <__mulsf3+0x1e8>
    16f8:	92 30       	cpi	r25, 0x02	; 2
    16fa:	49 f4       	brne	.+18     	; 0x170e <__mulsf3+0x72>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	8a 89       	ldd	r24, Y+18	; 0x12
    1702:	98 13       	cpse	r25, r24
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	2a 87       	std	Y+10, r18	; 0x0a
    1708:	ce 01       	movw	r24, r28
    170a:	09 96       	adiw	r24, 0x09	; 9
    170c:	bb c0       	rjmp	.+374    	; 0x1884 <__mulsf3+0x1e8>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	49 f4       	brne	.+18     	; 0x1724 <__mulsf3+0x88>
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	8a 89       	ldd	r24, Y+18	; 0x12
    1718:	98 13       	cpse	r25, r24
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	2a 8b       	std	Y+18, r18	; 0x12
    171e:	ce 01       	movw	r24, r28
    1720:	41 96       	adiw	r24, 0x11	; 17
    1722:	b0 c0       	rjmp	.+352    	; 0x1884 <__mulsf3+0x1e8>
    1724:	2d 84       	ldd	r2, Y+13	; 0x0d
    1726:	3e 84       	ldd	r3, Y+14	; 0x0e
    1728:	4f 84       	ldd	r4, Y+15	; 0x0f
    172a:	58 88       	ldd	r5, Y+16	; 0x10
    172c:	6d 88       	ldd	r6, Y+21	; 0x15
    172e:	7e 88       	ldd	r7, Y+22	; 0x16
    1730:	8f 88       	ldd	r8, Y+23	; 0x17
    1732:	98 8c       	ldd	r9, Y+24	; 0x18
    1734:	ee 24       	eor	r14, r14
    1736:	ff 24       	eor	r15, r15
    1738:	87 01       	movw	r16, r14
    173a:	aa 24       	eor	r10, r10
    173c:	bb 24       	eor	r11, r11
    173e:	65 01       	movw	r12, r10
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	e0 e0       	ldi	r30, 0x00	; 0
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	c1 01       	movw	r24, r2
    174e:	81 70       	andi	r24, 0x01	; 1
    1750:	90 70       	andi	r25, 0x00	; 0
    1752:	89 2b       	or	r24, r25
    1754:	e9 f0       	breq	.+58     	; 0x1790 <__mulsf3+0xf4>
    1756:	e6 0c       	add	r14, r6
    1758:	f7 1c       	adc	r15, r7
    175a:	08 1d       	adc	r16, r8
    175c:	19 1d       	adc	r17, r9
    175e:	9a 01       	movw	r18, r20
    1760:	ab 01       	movw	r20, r22
    1762:	2a 0d       	add	r18, r10
    1764:	3b 1d       	adc	r19, r11
    1766:	4c 1d       	adc	r20, r12
    1768:	5d 1d       	adc	r21, r13
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e0       	ldi	r26, 0x00	; 0
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e6 14       	cp	r14, r6
    1774:	f7 04       	cpc	r15, r7
    1776:	08 05       	cpc	r16, r8
    1778:	19 05       	cpc	r17, r9
    177a:	20 f4       	brcc	.+8      	; 0x1784 <__mulsf3+0xe8>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ba 01       	movw	r22, r20
    1786:	a9 01       	movw	r20, r18
    1788:	48 0f       	add	r20, r24
    178a:	59 1f       	adc	r21, r25
    178c:	6a 1f       	adc	r22, r26
    178e:	7b 1f       	adc	r23, r27
    1790:	aa 0c       	add	r10, r10
    1792:	bb 1c       	adc	r11, r11
    1794:	cc 1c       	adc	r12, r12
    1796:	dd 1c       	adc	r13, r13
    1798:	97 fe       	sbrs	r9, 7
    179a:	08 c0       	rjmp	.+16     	; 0x17ac <__mulsf3+0x110>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	a8 2a       	or	r10, r24
    17a6:	b9 2a       	or	r11, r25
    17a8:	ca 2a       	or	r12, r26
    17aa:	db 2a       	or	r13, r27
    17ac:	31 96       	adiw	r30, 0x01	; 1
    17ae:	e0 32       	cpi	r30, 0x20	; 32
    17b0:	f1 05       	cpc	r31, r1
    17b2:	49 f0       	breq	.+18     	; 0x17c6 <__mulsf3+0x12a>
    17b4:	66 0c       	add	r6, r6
    17b6:	77 1c       	adc	r7, r7
    17b8:	88 1c       	adc	r8, r8
    17ba:	99 1c       	adc	r9, r9
    17bc:	56 94       	lsr	r5
    17be:	47 94       	ror	r4
    17c0:	37 94       	ror	r3
    17c2:	27 94       	ror	r2
    17c4:	c3 cf       	rjmp	.-122    	; 0x174c <__mulsf3+0xb0>
    17c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    17c8:	ea 89       	ldd	r30, Y+18	; 0x12
    17ca:	2b 89       	ldd	r18, Y+19	; 0x13
    17cc:	3c 89       	ldd	r19, Y+20	; 0x14
    17ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d2:	28 0f       	add	r18, r24
    17d4:	39 1f       	adc	r19, r25
    17d6:	2e 5f       	subi	r18, 0xFE	; 254
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	17 c0       	rjmp	.+46     	; 0x180a <__mulsf3+0x16e>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	89 2b       	or	r24, r25
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__mulsf3+0x162>
    17e6:	16 95       	lsr	r17
    17e8:	07 95       	ror	r16
    17ea:	f7 94       	ror	r15
    17ec:	e7 94       	ror	r14
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e8       	ldi	r27, 0x80	; 128
    17f6:	e8 2a       	or	r14, r24
    17f8:	f9 2a       	or	r15, r25
    17fa:	0a 2b       	or	r16, r26
    17fc:	1b 2b       	or	r17, r27
    17fe:	76 95       	lsr	r23
    1800:	67 95       	ror	r22
    1802:	57 95       	ror	r21
    1804:	47 95       	ror	r20
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	77 fd       	sbrc	r23, 7
    180c:	e7 cf       	rjmp	.-50     	; 0x17dc <__mulsf3+0x140>
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <__mulsf3+0x18c>
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	66 1f       	adc	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	17 fd       	sbrc	r17, 7
    181a:	41 60       	ori	r20, 0x01	; 1
    181c:	ee 0c       	add	r14, r14
    181e:	ff 1c       	adc	r15, r15
    1820:	00 1f       	adc	r16, r16
    1822:	11 1f       	adc	r17, r17
    1824:	21 50       	subi	r18, 0x01	; 1
    1826:	30 40       	sbci	r19, 0x00	; 0
    1828:	40 30       	cpi	r20, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	59 07       	cpc	r21, r25
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	69 07       	cpc	r22, r25
    1832:	90 e4       	ldi	r25, 0x40	; 64
    1834:	79 07       	cpc	r23, r25
    1836:	60 f3       	brcs	.-40     	; 0x1810 <__mulsf3+0x174>
    1838:	2b 8f       	std	Y+27, r18	; 0x1b
    183a:	3c 8f       	std	Y+28, r19	; 0x1c
    183c:	db 01       	movw	r26, r22
    183e:	ca 01       	movw	r24, r20
    1840:	8f 77       	andi	r24, 0x7F	; 127
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	a0 70       	andi	r26, 0x00	; 0
    1846:	b0 70       	andi	r27, 0x00	; 0
    1848:	80 34       	cpi	r24, 0x40	; 64
    184a:	91 05       	cpc	r25, r1
    184c:	a1 05       	cpc	r26, r1
    184e:	b1 05       	cpc	r27, r1
    1850:	61 f4       	brne	.+24     	; 0x186a <__mulsf3+0x1ce>
    1852:	47 fd       	sbrc	r20, 7
    1854:	0a c0       	rjmp	.+20     	; 0x186a <__mulsf3+0x1ce>
    1856:	e1 14       	cp	r14, r1
    1858:	f1 04       	cpc	r15, r1
    185a:	01 05       	cpc	r16, r1
    185c:	11 05       	cpc	r17, r1
    185e:	29 f0       	breq	.+10     	; 0x186a <__mulsf3+0x1ce>
    1860:	40 5c       	subi	r20, 0xC0	; 192
    1862:	5f 4f       	sbci	r21, 0xFF	; 255
    1864:	6f 4f       	sbci	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	40 78       	andi	r20, 0x80	; 128
    186a:	1a 8e       	std	Y+26, r1	; 0x1a
    186c:	fe 17       	cp	r31, r30
    186e:	11 f0       	breq	.+4      	; 0x1874 <__mulsf3+0x1d8>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	8a 8f       	std	Y+26, r24	; 0x1a
    1874:	4d 8f       	std	Y+29, r20	; 0x1d
    1876:	5e 8f       	std	Y+30, r21	; 0x1e
    1878:	6f 8f       	std	Y+31, r22	; 0x1f
    187a:	78 a3       	std	Y+32, r23	; 0x20
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	89 8f       	std	Y+25, r24	; 0x19
    1880:	ce 01       	movw	r24, r28
    1882:	49 96       	adiw	r24, 0x19	; 25
    1884:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__pack_f>
    1888:	a0 96       	adiw	r28, 0x20	; 32
    188a:	e2 e1       	ldi	r30, 0x12	; 18
    188c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__epilogue_restores__>

00001890 <__gesf2>:
    1890:	a8 e1       	ldi	r26, 0x18	; 24
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ee e4       	ldi	r30, 0x4E	; 78
    1896:	fc e0       	ldi	r31, 0x0C	; 12
    1898:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__prologue_saves__+0x18>
    189c:	69 83       	std	Y+1, r22	; 0x01
    189e:	7a 83       	std	Y+2, r23	; 0x02
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	3e 83       	std	Y+6, r19	; 0x06
    18a8:	4f 83       	std	Y+7, r20	; 0x07
    18aa:	58 87       	std	Y+8, r21	; 0x08
    18ac:	89 e0       	ldi	r24, 0x09	; 9
    18ae:	e8 2e       	mov	r14, r24
    18b0:	f1 2c       	mov	r15, r1
    18b2:	ec 0e       	add	r14, r28
    18b4:	fd 1e       	adc	r15, r29
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	b7 01       	movw	r22, r14
    18bc:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    18c0:	8e 01       	movw	r16, r28
    18c2:	0f 5e       	subi	r16, 0xEF	; 239
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	ce 01       	movw	r24, r28
    18c8:	05 96       	adiw	r24, 0x05	; 5
    18ca:	b8 01       	movw	r22, r16
    18cc:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	40 f0       	brcs	.+16     	; 0x18e6 <__gesf2+0x56>
    18d6:	89 89       	ldd	r24, Y+17	; 0x11
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	28 f0       	brcs	.+10     	; 0x18e6 <__gesf2+0x56>
    18dc:	c7 01       	movw	r24, r14
    18de:	b8 01       	movw	r22, r16
    18e0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fpcmp_parts_f>
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <__gesf2+0x58>
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	68 96       	adiw	r28, 0x18	; 24
    18ea:	e6 e0       	ldi	r30, 0x06	; 6
    18ec:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__epilogue_restores__+0x18>

000018f0 <__fixsfsi>:
    18f0:	ac e0       	ldi	r26, 0x0C	; 12
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ee e7       	ldi	r30, 0x7E	; 126
    18f6:	fc e0       	ldi	r31, 0x0C	; 12
    18f8:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x20>
    18fc:	69 83       	std	Y+1, r22	; 0x01
    18fe:	7a 83       	std	Y+2, r23	; 0x02
    1900:	8b 83       	std	Y+3, r24	; 0x03
    1902:	9c 83       	std	Y+4, r25	; 0x04
    1904:	ce 01       	movw	r24, r28
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	be 01       	movw	r22, r28
    190a:	6b 5f       	subi	r22, 0xFB	; 251
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__unpack_f>
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	61 f1       	breq	.+88     	; 0x1970 <__fixsfsi+0x80>
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	50 f1       	brcs	.+84     	; 0x1970 <__fixsfsi+0x80>
    191c:	84 30       	cpi	r24, 0x04	; 4
    191e:	21 f4       	brne	.+8      	; 0x1928 <__fixsfsi+0x38>
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	88 23       	and	r24, r24
    1924:	51 f1       	breq	.+84     	; 0x197a <__fixsfsi+0x8a>
    1926:	2e c0       	rjmp	.+92     	; 0x1984 <__fixsfsi+0x94>
    1928:	2f 81       	ldd	r18, Y+7	; 0x07
    192a:	38 85       	ldd	r19, Y+8	; 0x08
    192c:	37 fd       	sbrc	r19, 7
    192e:	20 c0       	rjmp	.+64     	; 0x1970 <__fixsfsi+0x80>
    1930:	6e 81       	ldd	r22, Y+6	; 0x06
    1932:	2f 31       	cpi	r18, 0x1F	; 31
    1934:	31 05       	cpc	r19, r1
    1936:	1c f0       	brlt	.+6      	; 0x193e <__fixsfsi+0x4e>
    1938:	66 23       	and	r22, r22
    193a:	f9 f0       	breq	.+62     	; 0x197a <__fixsfsi+0x8a>
    193c:	23 c0       	rjmp	.+70     	; 0x1984 <__fixsfsi+0x94>
    193e:	8e e1       	ldi	r24, 0x1E	; 30
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	82 1b       	sub	r24, r18
    1944:	93 0b       	sbc	r25, r19
    1946:	29 85       	ldd	r18, Y+9	; 0x09
    1948:	3a 85       	ldd	r19, Y+10	; 0x0a
    194a:	4b 85       	ldd	r20, Y+11	; 0x0b
    194c:	5c 85       	ldd	r21, Y+12	; 0x0c
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <__fixsfsi+0x68>
    1950:	56 95       	lsr	r21
    1952:	47 95       	ror	r20
    1954:	37 95       	ror	r19
    1956:	27 95       	ror	r18
    1958:	8a 95       	dec	r24
    195a:	d2 f7       	brpl	.-12     	; 0x1950 <__fixsfsi+0x60>
    195c:	66 23       	and	r22, r22
    195e:	b1 f0       	breq	.+44     	; 0x198c <__fixsfsi+0x9c>
    1960:	50 95       	com	r21
    1962:	40 95       	com	r20
    1964:	30 95       	com	r19
    1966:	21 95       	neg	r18
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	4f 4f       	sbci	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	0e c0       	rjmp	.+28     	; 0x198c <__fixsfsi+0x9c>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	09 c0       	rjmp	.+18     	; 0x198c <__fixsfsi+0x9c>
    197a:	2f ef       	ldi	r18, 0xFF	; 255
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f e7       	ldi	r21, 0x7F	; 127
    1982:	04 c0       	rjmp	.+8      	; 0x198c <__fixsfsi+0x9c>
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e8       	ldi	r21, 0x80	; 128
    198c:	b9 01       	movw	r22, r18
    198e:	ca 01       	movw	r24, r20
    1990:	2c 96       	adiw	r28, 0x0c	; 12
    1992:	e2 e0       	ldi	r30, 0x02	; 2
    1994:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x20>

00001998 <__floatunsisf>:
    1998:	a8 e0       	ldi	r26, 0x08	; 8
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 ed       	ldi	r30, 0xD2	; 210
    199e:	fc e0       	ldi	r31, 0x0C	; 12
    19a0:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__prologue_saves__+0x10>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	61 15       	cp	r22, r1
    19aa:	71 05       	cpc	r23, r1
    19ac:	81 05       	cpc	r24, r1
    19ae:	91 05       	cpc	r25, r1
    19b0:	19 f4       	brne	.+6      	; 0x19b8 <__floatunsisf+0x20>
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	60 c0       	rjmp	.+192    	; 0x1a78 <__floatunsisf+0xe0>
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	8e e1       	ldi	r24, 0x1E	; 30
    19be:	c8 2e       	mov	r12, r24
    19c0:	d1 2c       	mov	r13, r1
    19c2:	dc 82       	std	Y+4, r13	; 0x04
    19c4:	cb 82       	std	Y+3, r12	; 0x03
    19c6:	ed 82       	std	Y+5, r14	; 0x05
    19c8:	fe 82       	std	Y+6, r15	; 0x06
    19ca:	0f 83       	std	Y+7, r16	; 0x07
    19cc:	18 87       	std	Y+8, r17	; 0x08
    19ce:	c8 01       	movw	r24, r16
    19d0:	b7 01       	movw	r22, r14
    19d2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__clzsi2>
    19d6:	fc 01       	movw	r30, r24
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	f7 ff       	sbrs	r31, 7
    19dc:	3b c0       	rjmp	.+118    	; 0x1a54 <__floatunsisf+0xbc>
    19de:	22 27       	eor	r18, r18
    19e0:	33 27       	eor	r19, r19
    19e2:	2e 1b       	sub	r18, r30
    19e4:	3f 0b       	sbc	r19, r31
    19e6:	57 01       	movw	r10, r14
    19e8:	68 01       	movw	r12, r16
    19ea:	02 2e       	mov	r0, r18
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__floatunsisf+0x5e>
    19ee:	d6 94       	lsr	r13
    19f0:	c7 94       	ror	r12
    19f2:	b7 94       	ror	r11
    19f4:	a7 94       	ror	r10
    19f6:	0a 94       	dec	r0
    19f8:	d2 f7       	brpl	.-12     	; 0x19ee <__floatunsisf+0x56>
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <__floatunsisf+0x7c>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	aa 1f       	adc	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	2a 95       	dec	r18
    1a16:	d2 f7       	brpl	.-12     	; 0x1a0c <__floatunsisf+0x74>
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	a1 09       	sbc	r26, r1
    1a1c:	b1 09       	sbc	r27, r1
    1a1e:	8e 21       	and	r24, r14
    1a20:	9f 21       	and	r25, r15
    1a22:	a0 23       	and	r26, r16
    1a24:	b1 23       	and	r27, r17
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	a1 05       	cpc	r26, r1
    1a2a:	b1 05       	cpc	r27, r1
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <__floatunsisf+0x9e>
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	4a 29       	or	r20, r10
    1a38:	5b 29       	or	r21, r11
    1a3a:	6c 29       	or	r22, r12
    1a3c:	7d 29       	or	r23, r13
    1a3e:	4d 83       	std	Y+5, r20	; 0x05
    1a40:	5e 83       	std	Y+6, r21	; 0x06
    1a42:	6f 83       	std	Y+7, r22	; 0x07
    1a44:	78 87       	std	Y+8, r23	; 0x08
    1a46:	8e e1       	ldi	r24, 0x1E	; 30
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	8e 1b       	sub	r24, r30
    1a4c:	9f 0b       	sbc	r25, r31
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	12 c0       	rjmp	.+36     	; 0x1a78 <__floatunsisf+0xe0>
    1a54:	30 97       	sbiw	r30, 0x00	; 0
    1a56:	81 f0       	breq	.+32     	; 0x1a78 <__floatunsisf+0xe0>
    1a58:	0e 2e       	mov	r0, r30
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <__floatunsisf+0xcc>
    1a5c:	ee 0c       	add	r14, r14
    1a5e:	ff 1c       	adc	r15, r15
    1a60:	00 1f       	adc	r16, r16
    1a62:	11 1f       	adc	r17, r17
    1a64:	0a 94       	dec	r0
    1a66:	d2 f7       	brpl	.-12     	; 0x1a5c <__floatunsisf+0xc4>
    1a68:	ed 82       	std	Y+5, r14	; 0x05
    1a6a:	fe 82       	std	Y+6, r15	; 0x06
    1a6c:	0f 83       	std	Y+7, r16	; 0x07
    1a6e:	18 87       	std	Y+8, r17	; 0x08
    1a70:	ce 1a       	sub	r12, r30
    1a72:	df 0a       	sbc	r13, r31
    1a74:	dc 82       	std	Y+4, r13	; 0x04
    1a76:	cb 82       	std	Y+3, r12	; 0x03
    1a78:	1a 82       	std	Y+2, r1	; 0x02
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__pack_f>
    1a82:	28 96       	adiw	r28, 0x08	; 8
    1a84:	ea e0       	ldi	r30, 0x0A	; 10
    1a86:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__epilogue_restores__+0x10>

00001a8a <__clzsi2>:
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	7b 01       	movw	r14, r22
    1a94:	8c 01       	movw	r16, r24
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	e8 16       	cp	r14, r24
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	f8 06       	cpc	r15, r24
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	08 07       	cpc	r16, r24
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	18 07       	cpc	r17, r24
    1aa6:	88 f4       	brcc	.+34     	; 0x1aca <__clzsi2+0x40>
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	e8 16       	cp	r14, r24
    1aac:	f1 04       	cpc	r15, r1
    1aae:	01 05       	cpc	r16, r1
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	31 f0       	breq	.+12     	; 0x1ac0 <__clzsi2+0x36>
    1ab4:	28 f0       	brcs	.+10     	; 0x1ac0 <__clzsi2+0x36>
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	17 c0       	rjmp	.+46     	; 0x1aee <__clzsi2+0x64>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a0 e0       	ldi	r26, 0x00	; 0
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <__clzsi2+0x64>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	e8 16       	cp	r14, r24
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	f8 06       	cpc	r15, r24
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 07       	cpc	r16, r24
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	18 07       	cpc	r17, r24
    1ada:	28 f0       	brcs	.+10     	; 0x1ae6 <__clzsi2+0x5c>
    1adc:	88 e1       	ldi	r24, 0x18	; 24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <__clzsi2+0x64>
    1ae6:	80 e1       	ldi	r24, 0x10	; 16
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e0       	ldi	r26, 0x00	; 0
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	20 e2       	ldi	r18, 0x20	; 32
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	28 1b       	sub	r18, r24
    1af8:	39 0b       	sbc	r19, r25
    1afa:	4a 0b       	sbc	r20, r26
    1afc:	5b 0b       	sbc	r21, r27
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <__clzsi2+0x7e>
    1b00:	16 95       	lsr	r17
    1b02:	07 95       	ror	r16
    1b04:	f7 94       	ror	r15
    1b06:	e7 94       	ror	r14
    1b08:	8a 95       	dec	r24
    1b0a:	d2 f7       	brpl	.-12     	; 0x1b00 <__clzsi2+0x76>
    1b0c:	f7 01       	movw	r30, r14
    1b0e:	e6 5c       	subi	r30, 0xC6	; 198
    1b10:	fd 4f       	sbci	r31, 0xFD	; 253
    1b12:	80 81       	ld	r24, Z
    1b14:	28 1b       	sub	r18, r24
    1b16:	31 09       	sbc	r19, r1
    1b18:	41 09       	sbc	r20, r1
    1b1a:	51 09       	sbc	r21, r1
    1b1c:	c9 01       	movw	r24, r18
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	08 95       	ret

00001b28 <__pack_f>:
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	fc 01       	movw	r30, r24
    1b34:	e4 80       	ldd	r14, Z+4	; 0x04
    1b36:	f5 80       	ldd	r15, Z+5	; 0x05
    1b38:	06 81       	ldd	r16, Z+6	; 0x06
    1b3a:	17 81       	ldd	r17, Z+7	; 0x07
    1b3c:	d1 80       	ldd	r13, Z+1	; 0x01
    1b3e:	80 81       	ld	r24, Z
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	48 f4       	brcc	.+18     	; 0x1b56 <__pack_f+0x2e>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e1       	ldi	r26, 0x10	; 16
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e8 2a       	or	r14, r24
    1b4e:	f9 2a       	or	r15, r25
    1b50:	0a 2b       	or	r16, r26
    1b52:	1b 2b       	or	r17, r27
    1b54:	a5 c0       	rjmp	.+330    	; 0x1ca0 <__pack_f+0x178>
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__pack_f+0x34>
    1b5a:	9f c0       	rjmp	.+318    	; 0x1c9a <__pack_f+0x172>
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <__pack_f+0x40>
    1b60:	ee 24       	eor	r14, r14
    1b62:	ff 24       	eor	r15, r15
    1b64:	87 01       	movw	r16, r14
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <__pack_f+0x4a>
    1b68:	e1 14       	cp	r14, r1
    1b6a:	f1 04       	cpc	r15, r1
    1b6c:	01 05       	cpc	r16, r1
    1b6e:	11 05       	cpc	r17, r1
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <__pack_f+0x50>
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	96 c0       	rjmp	.+300    	; 0x1ca4 <__pack_f+0x17c>
    1b78:	62 81       	ldd	r22, Z+2	; 0x02
    1b7a:	73 81       	ldd	r23, Z+3	; 0x03
    1b7c:	9f ef       	ldi	r25, 0xFF	; 255
    1b7e:	62 38       	cpi	r22, 0x82	; 130
    1b80:	79 07       	cpc	r23, r25
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <__pack_f+0x5e>
    1b84:	5b c0       	rjmp	.+182    	; 0x1c3c <__pack_f+0x114>
    1b86:	22 e8       	ldi	r18, 0x82	; 130
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	26 1b       	sub	r18, r22
    1b8c:	37 0b       	sbc	r19, r23
    1b8e:	2a 31       	cpi	r18, 0x1A	; 26
    1b90:	31 05       	cpc	r19, r1
    1b92:	2c f0       	brlt	.+10     	; 0x1b9e <__pack_f+0x76>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	2a c0       	rjmp	.+84     	; 0x1bf2 <__pack_f+0xca>
    1b9e:	b8 01       	movw	r22, r16
    1ba0:	a7 01       	movw	r20, r14
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <__pack_f+0x86>
    1ba6:	76 95       	lsr	r23
    1ba8:	67 95       	ror	r22
    1baa:	57 95       	ror	r21
    1bac:	47 95       	ror	r20
    1bae:	0a 94       	dec	r0
    1bb0:	d2 f7       	brpl	.-12     	; 0x1ba6 <__pack_f+0x7e>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <__pack_f+0x9c>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	2a 95       	dec	r18
    1bc6:	d2 f7       	brpl	.-12     	; 0x1bbc <__pack_f+0x94>
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	a1 09       	sbc	r26, r1
    1bcc:	b1 09       	sbc	r27, r1
    1bce:	8e 21       	and	r24, r14
    1bd0:	9f 21       	and	r25, r15
    1bd2:	a0 23       	and	r26, r16
    1bd4:	b1 23       	and	r27, r17
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	a1 05       	cpc	r26, r1
    1bda:	b1 05       	cpc	r27, r1
    1bdc:	21 f0       	breq	.+8      	; 0x1be6 <__pack_f+0xbe>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	9a 01       	movw	r18, r20
    1be8:	ab 01       	movw	r20, r22
    1bea:	28 2b       	or	r18, r24
    1bec:	39 2b       	or	r19, r25
    1bee:	4a 2b       	or	r20, r26
    1bf0:	5b 2b       	or	r21, r27
    1bf2:	da 01       	movw	r26, r20
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	8f 77       	andi	r24, 0x7F	; 127
    1bf8:	90 70       	andi	r25, 0x00	; 0
    1bfa:	a0 70       	andi	r26, 0x00	; 0
    1bfc:	b0 70       	andi	r27, 0x00	; 0
    1bfe:	80 34       	cpi	r24, 0x40	; 64
    1c00:	91 05       	cpc	r25, r1
    1c02:	a1 05       	cpc	r26, r1
    1c04:	b1 05       	cpc	r27, r1
    1c06:	39 f4       	brne	.+14     	; 0x1c16 <__pack_f+0xee>
    1c08:	27 ff       	sbrs	r18, 7
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <__pack_f+0xf6>
    1c0c:	20 5c       	subi	r18, 0xC0	; 192
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	4f 4f       	sbci	r20, 0xFF	; 255
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <__pack_f+0xf6>
    1c16:	21 5c       	subi	r18, 0xC1	; 193
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1e:	e0 e0       	ldi	r30, 0x00	; 0
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	20 30       	cpi	r18, 0x00	; 0
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	3a 07       	cpc	r19, r26
    1c28:	a0 e0       	ldi	r26, 0x00	; 0
    1c2a:	4a 07       	cpc	r20, r26
    1c2c:	a0 e4       	ldi	r26, 0x40	; 64
    1c2e:	5a 07       	cpc	r21, r26
    1c30:	10 f0       	brcs	.+4      	; 0x1c36 <__pack_f+0x10e>
    1c32:	e1 e0       	ldi	r30, 0x01	; 1
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	79 01       	movw	r14, r18
    1c38:	8a 01       	movw	r16, r20
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <__pack_f+0x162>
    1c3c:	60 38       	cpi	r22, 0x80	; 128
    1c3e:	71 05       	cpc	r23, r1
    1c40:	64 f5       	brge	.+88     	; 0x1c9a <__pack_f+0x172>
    1c42:	fb 01       	movw	r30, r22
    1c44:	e1 58       	subi	r30, 0x81	; 129
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	d8 01       	movw	r26, r16
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	8f 77       	andi	r24, 0x7F	; 127
    1c4e:	90 70       	andi	r25, 0x00	; 0
    1c50:	a0 70       	andi	r26, 0x00	; 0
    1c52:	b0 70       	andi	r27, 0x00	; 0
    1c54:	80 34       	cpi	r24, 0x40	; 64
    1c56:	91 05       	cpc	r25, r1
    1c58:	a1 05       	cpc	r26, r1
    1c5a:	b1 05       	cpc	r27, r1
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <__pack_f+0x144>
    1c5e:	e7 fe       	sbrs	r14, 7
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <__pack_f+0x154>
    1c62:	80 e4       	ldi	r24, 0x40	; 64
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <__pack_f+0x14c>
    1c6c:	8f e3       	ldi	r24, 0x3F	; 63
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e8 0e       	add	r14, r24
    1c76:	f9 1e       	adc	r15, r25
    1c78:	0a 1f       	adc	r16, r26
    1c7a:	1b 1f       	adc	r17, r27
    1c7c:	17 ff       	sbrs	r17, 7
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <__pack_f+0x162>
    1c80:	16 95       	lsr	r17
    1c82:	07 95       	ror	r16
    1c84:	f7 94       	ror	r15
    1c86:	e7 94       	ror	r14
    1c88:	31 96       	adiw	r30, 0x01	; 1
    1c8a:	87 e0       	ldi	r24, 0x07	; 7
    1c8c:	16 95       	lsr	r17
    1c8e:	07 95       	ror	r16
    1c90:	f7 94       	ror	r15
    1c92:	e7 94       	ror	r14
    1c94:	8a 95       	dec	r24
    1c96:	d1 f7       	brne	.-12     	; 0x1c8c <__pack_f+0x164>
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <__pack_f+0x17c>
    1c9a:	ee 24       	eor	r14, r14
    1c9c:	ff 24       	eor	r15, r15
    1c9e:	87 01       	movw	r16, r14
    1ca0:	ef ef       	ldi	r30, 0xFF	; 255
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	6e 2f       	mov	r22, r30
    1ca6:	67 95       	ror	r22
    1ca8:	66 27       	eor	r22, r22
    1caa:	67 95       	ror	r22
    1cac:	90 2f       	mov	r25, r16
    1cae:	9f 77       	andi	r25, 0x7F	; 127
    1cb0:	d7 94       	ror	r13
    1cb2:	dd 24       	eor	r13, r13
    1cb4:	d7 94       	ror	r13
    1cb6:	8e 2f       	mov	r24, r30
    1cb8:	86 95       	lsr	r24
    1cba:	49 2f       	mov	r20, r25
    1cbc:	46 2b       	or	r20, r22
    1cbe:	58 2f       	mov	r21, r24
    1cc0:	5d 29       	or	r21, r13
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	08 95       	ret

00001cd2 <__unpack_f>:
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	db 01       	movw	r26, r22
    1cd6:	40 81       	ld	r20, Z
    1cd8:	51 81       	ldd	r21, Z+1	; 0x01
    1cda:	22 81       	ldd	r18, Z+2	; 0x02
    1cdc:	62 2f       	mov	r22, r18
    1cde:	6f 77       	andi	r22, 0x7F	; 127
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	22 1f       	adc	r18, r18
    1ce4:	22 27       	eor	r18, r18
    1ce6:	22 1f       	adc	r18, r18
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	89 2f       	mov	r24, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	82 2b       	or	r24, r18
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	99 27       	eor	r25, r25
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	11 96       	adiw	r26, 0x01	; 1
    1cfc:	9c 93       	st	X, r25
    1cfe:	11 97       	sbiw	r26, 0x01	; 1
    1d00:	21 15       	cp	r18, r1
    1d02:	31 05       	cpc	r19, r1
    1d04:	a9 f5       	brne	.+106    	; 0x1d70 <__unpack_f+0x9e>
    1d06:	41 15       	cp	r20, r1
    1d08:	51 05       	cpc	r21, r1
    1d0a:	61 05       	cpc	r22, r1
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <__unpack_f+0x42>
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	37 c0       	rjmp	.+110    	; 0x1d82 <__unpack_f+0xb0>
    1d14:	82 e8       	ldi	r24, 0x82	; 130
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	13 96       	adiw	r26, 0x03	; 3
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
    1d1e:	12 97       	sbiw	r26, 0x02	; 2
    1d20:	9a 01       	movw	r18, r20
    1d22:	ab 01       	movw	r20, r22
    1d24:	67 e0       	ldi	r22, 0x07	; 7
    1d26:	22 0f       	add	r18, r18
    1d28:	33 1f       	adc	r19, r19
    1d2a:	44 1f       	adc	r20, r20
    1d2c:	55 1f       	adc	r21, r21
    1d2e:	6a 95       	dec	r22
    1d30:	d1 f7       	brne	.-12     	; 0x1d26 <__unpack_f+0x54>
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	8c 93       	st	X, r24
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__unpack_f+0x80>
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	44 1f       	adc	r20, r20
    1d3e:	55 1f       	adc	r21, r21
    1d40:	12 96       	adiw	r26, 0x02	; 2
    1d42:	8d 91       	ld	r24, X+
    1d44:	9c 91       	ld	r25, X
    1d46:	13 97       	sbiw	r26, 0x03	; 3
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	13 96       	adiw	r26, 0x03	; 3
    1d4c:	9c 93       	st	X, r25
    1d4e:	8e 93       	st	-X, r24
    1d50:	12 97       	sbiw	r26, 0x02	; 2
    1d52:	20 30       	cpi	r18, 0x00	; 0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	38 07       	cpc	r19, r24
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	48 07       	cpc	r20, r24
    1d5c:	80 e4       	ldi	r24, 0x40	; 64
    1d5e:	58 07       	cpc	r21, r24
    1d60:	58 f3       	brcs	.-42     	; 0x1d38 <__unpack_f+0x66>
    1d62:	14 96       	adiw	r26, 0x04	; 4
    1d64:	2d 93       	st	X+, r18
    1d66:	3d 93       	st	X+, r19
    1d68:	4d 93       	st	X+, r20
    1d6a:	5c 93       	st	X, r21
    1d6c:	17 97       	sbiw	r26, 0x07	; 7
    1d6e:	08 95       	ret
    1d70:	2f 3f       	cpi	r18, 0xFF	; 255
    1d72:	31 05       	cpc	r19, r1
    1d74:	79 f4       	brne	.+30     	; 0x1d94 <__unpack_f+0xc2>
    1d76:	41 15       	cp	r20, r1
    1d78:	51 05       	cpc	r21, r1
    1d7a:	61 05       	cpc	r22, r1
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <__unpack_f+0xb4>
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	8c 93       	st	X, r24
    1d84:	08 95       	ret
    1d86:	64 ff       	sbrs	r22, 4
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <__unpack_f+0xbe>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	8c 93       	st	X, r24
    1d8e:	12 c0       	rjmp	.+36     	; 0x1db4 <__unpack_f+0xe2>
    1d90:	1c 92       	st	X, r1
    1d92:	10 c0       	rjmp	.+32     	; 0x1db4 <__unpack_f+0xe2>
    1d94:	2f 57       	subi	r18, 0x7F	; 127
    1d96:	30 40       	sbci	r19, 0x00	; 0
    1d98:	13 96       	adiw	r26, 0x03	; 3
    1d9a:	3c 93       	st	X, r19
    1d9c:	2e 93       	st	-X, r18
    1d9e:	12 97       	sbiw	r26, 0x02	; 2
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	8c 93       	st	X, r24
    1da4:	87 e0       	ldi	r24, 0x07	; 7
    1da6:	44 0f       	add	r20, r20
    1da8:	55 1f       	adc	r21, r21
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	8a 95       	dec	r24
    1db0:	d1 f7       	brne	.-12     	; 0x1da6 <__unpack_f+0xd4>
    1db2:	70 64       	ori	r23, 0x40	; 64
    1db4:	14 96       	adiw	r26, 0x04	; 4
    1db6:	4d 93       	st	X+, r20
    1db8:	5d 93       	st	X+, r21
    1dba:	6d 93       	st	X+, r22
    1dbc:	7c 93       	st	X, r23
    1dbe:	17 97       	sbiw	r26, 0x07	; 7
    1dc0:	08 95       	ret

00001dc2 <__fpcmp_parts_f>:
    1dc2:	1f 93       	push	r17
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	fb 01       	movw	r30, r22
    1dc8:	9c 91       	ld	r25, X
    1dca:	92 30       	cpi	r25, 0x02	; 2
    1dcc:	08 f4       	brcc	.+2      	; 0x1dd0 <__fpcmp_parts_f+0xe>
    1dce:	47 c0       	rjmp	.+142    	; 0x1e5e <__fpcmp_parts_f+0x9c>
    1dd0:	80 81       	ld	r24, Z
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	08 f4       	brcc	.+2      	; 0x1dd8 <__fpcmp_parts_f+0x16>
    1dd6:	43 c0       	rjmp	.+134    	; 0x1e5e <__fpcmp_parts_f+0x9c>
    1dd8:	94 30       	cpi	r25, 0x04	; 4
    1dda:	51 f4       	brne	.+20     	; 0x1df0 <__fpcmp_parts_f+0x2e>
    1ddc:	11 96       	adiw	r26, 0x01	; 1
    1dde:	1c 91       	ld	r17, X
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	99 f5       	brne	.+102    	; 0x1e4a <__fpcmp_parts_f+0x88>
    1de4:	81 81       	ldd	r24, Z+1	; 0x01
    1de6:	68 2f       	mov	r22, r24
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	61 1b       	sub	r22, r17
    1dec:	71 09       	sbc	r23, r1
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <__fpcmp_parts_f+0xac>
    1df0:	84 30       	cpi	r24, 0x04	; 4
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <__fpcmp_parts_f+0x3a>
    1df4:	92 30       	cpi	r25, 0x02	; 2
    1df6:	31 f4       	brne	.+12     	; 0x1e04 <__fpcmp_parts_f+0x42>
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	b9 f1       	breq	.+110    	; 0x1e6a <__fpcmp_parts_f+0xa8>
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	88 23       	and	r24, r24
    1e00:	89 f1       	breq	.+98     	; 0x1e64 <__fpcmp_parts_f+0xa2>
    1e02:	2d c0       	rjmp	.+90     	; 0x1e5e <__fpcmp_parts_f+0x9c>
    1e04:	11 96       	adiw	r26, 0x01	; 1
    1e06:	1c 91       	ld	r17, X
    1e08:	11 97       	sbiw	r26, 0x01	; 1
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	f1 f0       	breq	.+60     	; 0x1e4a <__fpcmp_parts_f+0x88>
    1e0e:	81 81       	ldd	r24, Z+1	; 0x01
    1e10:	18 17       	cp	r17, r24
    1e12:	d9 f4       	brne	.+54     	; 0x1e4a <__fpcmp_parts_f+0x88>
    1e14:	12 96       	adiw	r26, 0x02	; 2
    1e16:	2d 91       	ld	r18, X+
    1e18:	3c 91       	ld	r19, X
    1e1a:	13 97       	sbiw	r26, 0x03	; 3
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	82 17       	cp	r24, r18
    1e22:	93 07       	cpc	r25, r19
    1e24:	94 f0       	brlt	.+36     	; 0x1e4a <__fpcmp_parts_f+0x88>
    1e26:	28 17       	cp	r18, r24
    1e28:	39 07       	cpc	r19, r25
    1e2a:	bc f0       	brlt	.+46     	; 0x1e5a <__fpcmp_parts_f+0x98>
    1e2c:	14 96       	adiw	r26, 0x04	; 4
    1e2e:	8d 91       	ld	r24, X+
    1e30:	9d 91       	ld	r25, X+
    1e32:	0d 90       	ld	r0, X+
    1e34:	bc 91       	ld	r27, X
    1e36:	a0 2d       	mov	r26, r0
    1e38:	24 81       	ldd	r18, Z+4	; 0x04
    1e3a:	35 81       	ldd	r19, Z+5	; 0x05
    1e3c:	46 81       	ldd	r20, Z+6	; 0x06
    1e3e:	57 81       	ldd	r21, Z+7	; 0x07
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	4a 07       	cpc	r20, r26
    1e46:	5b 07       	cpc	r21, r27
    1e48:	18 f4       	brcc	.+6      	; 0x1e50 <__fpcmp_parts_f+0x8e>
    1e4a:	11 23       	and	r17, r17
    1e4c:	41 f0       	breq	.+16     	; 0x1e5e <__fpcmp_parts_f+0x9c>
    1e4e:	0a c0       	rjmp	.+20     	; 0x1e64 <__fpcmp_parts_f+0xa2>
    1e50:	82 17       	cp	r24, r18
    1e52:	93 07       	cpc	r25, r19
    1e54:	a4 07       	cpc	r26, r20
    1e56:	b5 07       	cpc	r27, r21
    1e58:	40 f4       	brcc	.+16     	; 0x1e6a <__fpcmp_parts_f+0xa8>
    1e5a:	11 23       	and	r17, r17
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <__fpcmp_parts_f+0xa2>
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <__fpcmp_parts_f+0xac>
    1e64:	6f ef       	ldi	r22, 0xFF	; 255
    1e66:	7f ef       	ldi	r23, 0xFF	; 255
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <__fpcmp_parts_f+0xac>
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	cb 01       	movw	r24, r22
    1e70:	1f 91       	pop	r17
    1e72:	08 95       	ret

00001e74 <__udivmodhi4>:
    1e74:	aa 1b       	sub	r26, r26
    1e76:	bb 1b       	sub	r27, r27
    1e78:	51 e1       	ldi	r21, 0x11	; 17
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <__udivmodhi4_ep>

00001e7c <__udivmodhi4_loop>:
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	a6 17       	cp	r26, r22
    1e82:	b7 07       	cpc	r27, r23
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__udivmodhi4_ep>
    1e86:	a6 1b       	sub	r26, r22
    1e88:	b7 0b       	sbc	r27, r23

00001e8a <__udivmodhi4_ep>:
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	5a 95       	dec	r21
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__udivmodhi4_loop>
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	08 95       	ret

00001e9c <__divmodhi4>:
    1e9c:	97 fb       	bst	r25, 7
    1e9e:	09 2e       	mov	r0, r25
    1ea0:	07 26       	eor	r0, r23
    1ea2:	0a d0       	rcall	.+20     	; 0x1eb8 <__divmodhi4_neg1>
    1ea4:	77 fd       	sbrc	r23, 7
    1ea6:	04 d0       	rcall	.+8      	; 0x1eb0 <__divmodhi4_neg2>
    1ea8:	e5 df       	rcall	.-54     	; 0x1e74 <__udivmodhi4>
    1eaa:	06 d0       	rcall	.+12     	; 0x1eb8 <__divmodhi4_neg1>
    1eac:	00 20       	and	r0, r0
    1eae:	1a f4       	brpl	.+6      	; 0x1eb6 <__divmodhi4_exit>

00001eb0 <__divmodhi4_neg2>:
    1eb0:	70 95       	com	r23
    1eb2:	61 95       	neg	r22
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255

00001eb6 <__divmodhi4_exit>:
    1eb6:	08 95       	ret

00001eb8 <__divmodhi4_neg1>:
    1eb8:	f6 f7       	brtc	.-4      	; 0x1eb6 <__divmodhi4_exit>
    1eba:	90 95       	com	r25
    1ebc:	81 95       	neg	r24
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	08 95       	ret

00001ec2 <__prologue_saves__>:
    1ec2:	2f 92       	push	r2
    1ec4:	3f 92       	push	r3
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	ca 1b       	sub	r28, r26
    1eec:	db 0b       	sbc	r29, r27
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	09 94       	ijmp

00001efa <__epilogue_restores__>:
    1efa:	2a 88       	ldd	r2, Y+18	; 0x12
    1efc:	39 88       	ldd	r3, Y+17	; 0x11
    1efe:	48 88       	ldd	r4, Y+16	; 0x10
    1f00:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f02:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f04:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f06:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f08:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f0c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f0e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f10:	df 80       	ldd	r13, Y+7	; 0x07
    1f12:	ee 80       	ldd	r14, Y+6	; 0x06
    1f14:	fd 80       	ldd	r15, Y+5	; 0x05
    1f16:	0c 81       	ldd	r16, Y+4	; 0x04
    1f18:	1b 81       	ldd	r17, Y+3	; 0x03
    1f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f1e:	ce 0f       	add	r28, r30
    1f20:	d1 1d       	adc	r29, r1
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	ed 01       	movw	r28, r26
    1f2e:	08 95       	ret

00001f30 <fputs>:
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	8b 01       	movw	r16, r22
    1f40:	db 01       	movw	r26, r22
    1f42:	13 96       	adiw	r26, 0x03	; 3
    1f44:	8c 91       	ld	r24, X
    1f46:	81 fd       	sbrc	r24, 1
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <fputs+0x20>
    1f4a:	cf ef       	ldi	r28, 0xFF	; 255
    1f4c:	df ef       	ldi	r29, 0xFF	; 255
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <fputs+0x46>
    1f50:	c0 e0       	ldi	r28, 0x00	; 0
    1f52:	d0 e0       	ldi	r29, 0x00	; 0
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <fputs+0x3c>
    1f56:	d8 01       	movw	r26, r16
    1f58:	18 96       	adiw	r26, 0x08	; 8
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	19 97       	sbiw	r26, 0x09	; 9
    1f60:	b8 01       	movw	r22, r16
    1f62:	09 95       	icall
    1f64:	89 2b       	or	r24, r25
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <fputs+0x3c>
    1f68:	cf ef       	ldi	r28, 0xFF	; 255
    1f6a:	df ef       	ldi	r29, 0xFF	; 255
    1f6c:	f7 01       	movw	r30, r14
    1f6e:	81 91       	ld	r24, Z+
    1f70:	7f 01       	movw	r14, r30
    1f72:	88 23       	and	r24, r24
    1f74:	81 f7       	brne	.-32     	; 0x1f56 <fputs+0x26>
    1f76:	ce 01       	movw	r24, r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	e6 e0       	ldi	r30, 0x06	; 6
    1f7e:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__epilogue_restores__+0x18>

00001f82 <sprintf>:
    1f82:	ae e0       	ldi	r26, 0x0E	; 14
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e7 ec       	ldi	r30, 0xC7	; 199
    1f88:	ff e0       	ldi	r31, 0x0F	; 15
    1f8a:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__prologue_saves__+0x1c>
    1f8e:	0d 89       	ldd	r16, Y+21	; 0x15
    1f90:	1e 89       	ldd	r17, Y+22	; 0x16
    1f92:	86 e0       	ldi	r24, 0x06	; 6
    1f94:	8c 83       	std	Y+4, r24	; 0x04
    1f96:	1a 83       	std	Y+2, r17	; 0x02
    1f98:	09 83       	std	Y+1, r16	; 0x01
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	9f e7       	ldi	r25, 0x7F	; 127
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	9e 01       	movw	r18, r28
    1fa4:	27 5e       	subi	r18, 0xE7	; 231
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	6f 89       	ldd	r22, Y+23	; 0x17
    1fae:	78 8d       	ldd	r23, Y+24	; 0x18
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <vfprintf>
    1fb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb8:	38 85       	ldd	r19, Y+8	; 0x08
    1fba:	02 0f       	add	r16, r18
    1fbc:	13 1f       	adc	r17, r19
    1fbe:	f8 01       	movw	r30, r16
    1fc0:	10 82       	st	Z, r1
    1fc2:	2e 96       	adiw	r28, 0x0e	; 14
    1fc4:	e4 e0       	ldi	r30, 0x04	; 4
    1fc6:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__+0x1c>

00001fca <sin>:
    1fca:	9f 93       	push	r25
    1fcc:	82 d2       	rcall	.+1284   	; 0x24d2 <__fp_rempio2>
    1fce:	0f 90       	pop	r0
    1fd0:	07 fc       	sbrc	r0, 7
    1fd2:	ee 5f       	subi	r30, 0xFE	; 254
    1fd4:	a5 c2       	rjmp	.+1354   	; 0x2520 <__fp_sinus>

00001fd6 <vfprintf>:
    1fd6:	ab e0       	ldi	r26, 0x0B	; 11
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e1 ef       	ldi	r30, 0xF1	; 241
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__prologue_saves__>
    1fe2:	3c 01       	movw	r6, r24
    1fe4:	2b 01       	movw	r4, r22
    1fe6:	5a 01       	movw	r10, r20
    1fe8:	fc 01       	movw	r30, r24
    1fea:	17 82       	std	Z+7, r1	; 0x07
    1fec:	16 82       	std	Z+6, r1	; 0x06
    1fee:	83 81       	ldd	r24, Z+3	; 0x03
    1ff0:	81 fd       	sbrc	r24, 1
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <vfprintf+0x24>
    1ff4:	6f ef       	ldi	r22, 0xFF	; 255
    1ff6:	7f ef       	ldi	r23, 0xFF	; 255
    1ff8:	c6 c1       	rjmp	.+908    	; 0x2386 <vfprintf+0x3b0>
    1ffa:	9a e0       	ldi	r25, 0x0A	; 10
    1ffc:	89 2e       	mov	r8, r25
    1ffe:	1e 01       	movw	r2, r28
    2000:	08 94       	sec
    2002:	21 1c       	adc	r2, r1
    2004:	31 1c       	adc	r3, r1
    2006:	f3 01       	movw	r30, r6
    2008:	23 81       	ldd	r18, Z+3	; 0x03
    200a:	f2 01       	movw	r30, r4
    200c:	23 fd       	sbrc	r18, 3
    200e:	85 91       	lpm	r24, Z+
    2010:	23 ff       	sbrs	r18, 3
    2012:	81 91       	ld	r24, Z+
    2014:	2f 01       	movw	r4, r30
    2016:	88 23       	and	r24, r24
    2018:	09 f4       	brne	.+2      	; 0x201c <vfprintf+0x46>
    201a:	b2 c1       	rjmp	.+868    	; 0x2380 <vfprintf+0x3aa>
    201c:	85 32       	cpi	r24, 0x25	; 37
    201e:	39 f4       	brne	.+14     	; 0x202e <vfprintf+0x58>
    2020:	23 fd       	sbrc	r18, 3
    2022:	85 91       	lpm	r24, Z+
    2024:	23 ff       	sbrs	r18, 3
    2026:	81 91       	ld	r24, Z+
    2028:	2f 01       	movw	r4, r30
    202a:	85 32       	cpi	r24, 0x25	; 37
    202c:	29 f4       	brne	.+10     	; 0x2038 <vfprintf+0x62>
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	b3 01       	movw	r22, r6
    2032:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2036:	e7 cf       	rjmp	.-50     	; 0x2006 <vfprintf+0x30>
    2038:	98 2f       	mov	r25, r24
    203a:	ff 24       	eor	r15, r15
    203c:	ee 24       	eor	r14, r14
    203e:	99 24       	eor	r9, r9
    2040:	ff e1       	ldi	r31, 0x1F	; 31
    2042:	ff 15       	cp	r31, r15
    2044:	d0 f0       	brcs	.+52     	; 0x207a <vfprintf+0xa4>
    2046:	9b 32       	cpi	r25, 0x2B	; 43
    2048:	69 f0       	breq	.+26     	; 0x2064 <vfprintf+0x8e>
    204a:	9c 32       	cpi	r25, 0x2C	; 44
    204c:	28 f4       	brcc	.+10     	; 0x2058 <vfprintf+0x82>
    204e:	90 32       	cpi	r25, 0x20	; 32
    2050:	59 f0       	breq	.+22     	; 0x2068 <vfprintf+0x92>
    2052:	93 32       	cpi	r25, 0x23	; 35
    2054:	91 f4       	brne	.+36     	; 0x207a <vfprintf+0xa4>
    2056:	0e c0       	rjmp	.+28     	; 0x2074 <vfprintf+0x9e>
    2058:	9d 32       	cpi	r25, 0x2D	; 45
    205a:	49 f0       	breq	.+18     	; 0x206e <vfprintf+0x98>
    205c:	90 33       	cpi	r25, 0x30	; 48
    205e:	69 f4       	brne	.+26     	; 0x207a <vfprintf+0xa4>
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	24 c0       	rjmp	.+72     	; 0x20ac <vfprintf+0xd6>
    2064:	52 e0       	ldi	r21, 0x02	; 2
    2066:	f5 2a       	or	r15, r21
    2068:	84 e0       	ldi	r24, 0x04	; 4
    206a:	f8 2a       	or	r15, r24
    206c:	28 c0       	rjmp	.+80     	; 0x20be <vfprintf+0xe8>
    206e:	98 e0       	ldi	r25, 0x08	; 8
    2070:	f9 2a       	or	r15, r25
    2072:	25 c0       	rjmp	.+74     	; 0x20be <vfprintf+0xe8>
    2074:	e0 e1       	ldi	r30, 0x10	; 16
    2076:	fe 2a       	or	r15, r30
    2078:	22 c0       	rjmp	.+68     	; 0x20be <vfprintf+0xe8>
    207a:	f7 fc       	sbrc	r15, 7
    207c:	29 c0       	rjmp	.+82     	; 0x20d0 <vfprintf+0xfa>
    207e:	89 2f       	mov	r24, r25
    2080:	80 53       	subi	r24, 0x30	; 48
    2082:	8a 30       	cpi	r24, 0x0A	; 10
    2084:	70 f4       	brcc	.+28     	; 0x20a2 <vfprintf+0xcc>
    2086:	f6 fe       	sbrs	r15, 6
    2088:	05 c0       	rjmp	.+10     	; 0x2094 <vfprintf+0xbe>
    208a:	98 9c       	mul	r9, r8
    208c:	90 2c       	mov	r9, r0
    208e:	11 24       	eor	r1, r1
    2090:	98 0e       	add	r9, r24
    2092:	15 c0       	rjmp	.+42     	; 0x20be <vfprintf+0xe8>
    2094:	e8 9c       	mul	r14, r8
    2096:	e0 2c       	mov	r14, r0
    2098:	11 24       	eor	r1, r1
    209a:	e8 0e       	add	r14, r24
    209c:	f0 e2       	ldi	r31, 0x20	; 32
    209e:	ff 2a       	or	r15, r31
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <vfprintf+0xe8>
    20a2:	9e 32       	cpi	r25, 0x2E	; 46
    20a4:	29 f4       	brne	.+10     	; 0x20b0 <vfprintf+0xda>
    20a6:	f6 fc       	sbrc	r15, 6
    20a8:	6b c1       	rjmp	.+726    	; 0x2380 <vfprintf+0x3aa>
    20aa:	40 e4       	ldi	r20, 0x40	; 64
    20ac:	f4 2a       	or	r15, r20
    20ae:	07 c0       	rjmp	.+14     	; 0x20be <vfprintf+0xe8>
    20b0:	9c 36       	cpi	r25, 0x6C	; 108
    20b2:	19 f4       	brne	.+6      	; 0x20ba <vfprintf+0xe4>
    20b4:	50 e8       	ldi	r21, 0x80	; 128
    20b6:	f5 2a       	or	r15, r21
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <vfprintf+0xe8>
    20ba:	98 36       	cpi	r25, 0x68	; 104
    20bc:	49 f4       	brne	.+18     	; 0x20d0 <vfprintf+0xfa>
    20be:	f2 01       	movw	r30, r4
    20c0:	23 fd       	sbrc	r18, 3
    20c2:	95 91       	lpm	r25, Z+
    20c4:	23 ff       	sbrs	r18, 3
    20c6:	91 91       	ld	r25, Z+
    20c8:	2f 01       	movw	r4, r30
    20ca:	99 23       	and	r25, r25
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <vfprintf+0xfa>
    20ce:	b8 cf       	rjmp	.-144    	; 0x2040 <vfprintf+0x6a>
    20d0:	89 2f       	mov	r24, r25
    20d2:	85 54       	subi	r24, 0x45	; 69
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	18 f0       	brcs	.+6      	; 0x20de <vfprintf+0x108>
    20d8:	80 52       	subi	r24, 0x20	; 32
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	38 f4       	brcc	.+14     	; 0x20ec <vfprintf+0x116>
    20de:	44 e0       	ldi	r20, 0x04	; 4
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	a4 0e       	add	r10, r20
    20e4:	b5 1e       	adc	r11, r21
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	59 83       	std	Y+1, r21	; 0x01
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <vfprintf+0x134>
    20ec:	93 36       	cpi	r25, 0x63	; 99
    20ee:	31 f0       	breq	.+12     	; 0x20fc <vfprintf+0x126>
    20f0:	93 37       	cpi	r25, 0x73	; 115
    20f2:	79 f0       	breq	.+30     	; 0x2112 <vfprintf+0x13c>
    20f4:	93 35       	cpi	r25, 0x53	; 83
    20f6:	09 f0       	breq	.+2      	; 0x20fa <vfprintf+0x124>
    20f8:	56 c0       	rjmp	.+172    	; 0x21a6 <vfprintf+0x1d0>
    20fa:	20 c0       	rjmp	.+64     	; 0x213c <vfprintf+0x166>
    20fc:	f5 01       	movw	r30, r10
    20fe:	80 81       	ld	r24, Z
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	42 e0       	ldi	r20, 0x02	; 2
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	a4 0e       	add	r10, r20
    2108:	b5 1e       	adc	r11, r21
    210a:	61 01       	movw	r12, r2
    210c:	01 e0       	ldi	r16, 0x01	; 1
    210e:	10 e0       	ldi	r17, 0x00	; 0
    2110:	12 c0       	rjmp	.+36     	; 0x2136 <vfprintf+0x160>
    2112:	f5 01       	movw	r30, r10
    2114:	c0 80       	ld	r12, Z
    2116:	d1 80       	ldd	r13, Z+1	; 0x01
    2118:	f6 fc       	sbrc	r15, 6
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <vfprintf+0x14c>
    211c:	6f ef       	ldi	r22, 0xFF	; 255
    211e:	7f ef       	ldi	r23, 0xFF	; 255
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0x150>
    2122:	69 2d       	mov	r22, r9
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	42 e0       	ldi	r20, 0x02	; 2
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	a4 0e       	add	r10, r20
    212c:	b5 1e       	adc	r11, r21
    212e:	c6 01       	movw	r24, r12
    2130:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <strnlen>
    2134:	8c 01       	movw	r16, r24
    2136:	5f e7       	ldi	r21, 0x7F	; 127
    2138:	f5 22       	and	r15, r21
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <vfprintf+0x18e>
    213c:	f5 01       	movw	r30, r10
    213e:	c0 80       	ld	r12, Z
    2140:	d1 80       	ldd	r13, Z+1	; 0x01
    2142:	f6 fc       	sbrc	r15, 6
    2144:	03 c0       	rjmp	.+6      	; 0x214c <vfprintf+0x176>
    2146:	6f ef       	ldi	r22, 0xFF	; 255
    2148:	7f ef       	ldi	r23, 0xFF	; 255
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <vfprintf+0x17a>
    214c:	69 2d       	mov	r22, r9
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	42 e0       	ldi	r20, 0x02	; 2
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	a4 0e       	add	r10, r20
    2156:	b5 1e       	adc	r11, r21
    2158:	c6 01       	movw	r24, r12
    215a:	0e 94 c8 11 	call	0x2390	; 0x2390 <strnlen_P>
    215e:	8c 01       	movw	r16, r24
    2160:	50 e8       	ldi	r21, 0x80	; 128
    2162:	f5 2a       	or	r15, r21
    2164:	f3 fe       	sbrs	r15, 3
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <vfprintf+0x1a0>
    2168:	1a c0       	rjmp	.+52     	; 0x219e <vfprintf+0x1c8>
    216a:	80 e2       	ldi	r24, 0x20	; 32
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	b3 01       	movw	r22, r6
    2170:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2174:	ea 94       	dec	r14
    2176:	8e 2d       	mov	r24, r14
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	08 17       	cp	r16, r24
    217c:	19 07       	cpc	r17, r25
    217e:	a8 f3       	brcs	.-22     	; 0x216a <vfprintf+0x194>
    2180:	0e c0       	rjmp	.+28     	; 0x219e <vfprintf+0x1c8>
    2182:	f6 01       	movw	r30, r12
    2184:	f7 fc       	sbrc	r15, 7
    2186:	85 91       	lpm	r24, Z+
    2188:	f7 fe       	sbrs	r15, 7
    218a:	81 91       	ld	r24, Z+
    218c:	6f 01       	movw	r12, r30
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	b3 01       	movw	r22, r6
    2192:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2196:	e1 10       	cpse	r14, r1
    2198:	ea 94       	dec	r14
    219a:	01 50       	subi	r16, 0x01	; 1
    219c:	10 40       	sbci	r17, 0x00	; 0
    219e:	01 15       	cp	r16, r1
    21a0:	11 05       	cpc	r17, r1
    21a2:	79 f7       	brne	.-34     	; 0x2182 <vfprintf+0x1ac>
    21a4:	ea c0       	rjmp	.+468    	; 0x237a <vfprintf+0x3a4>
    21a6:	94 36       	cpi	r25, 0x64	; 100
    21a8:	11 f0       	breq	.+4      	; 0x21ae <vfprintf+0x1d8>
    21aa:	99 36       	cpi	r25, 0x69	; 105
    21ac:	69 f5       	brne	.+90     	; 0x2208 <vfprintf+0x232>
    21ae:	f7 fe       	sbrs	r15, 7
    21b0:	08 c0       	rjmp	.+16     	; 0x21c2 <vfprintf+0x1ec>
    21b2:	f5 01       	movw	r30, r10
    21b4:	20 81       	ld	r18, Z
    21b6:	31 81       	ldd	r19, Z+1	; 0x01
    21b8:	42 81       	ldd	r20, Z+2	; 0x02
    21ba:	53 81       	ldd	r21, Z+3	; 0x03
    21bc:	84 e0       	ldi	r24, 0x04	; 4
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0a c0       	rjmp	.+20     	; 0x21d6 <vfprintf+0x200>
    21c2:	f5 01       	movw	r30, r10
    21c4:	80 81       	ld	r24, Z
    21c6:	91 81       	ldd	r25, Z+1	; 0x01
    21c8:	9c 01       	movw	r18, r24
    21ca:	44 27       	eor	r20, r20
    21cc:	37 fd       	sbrc	r19, 7
    21ce:	40 95       	com	r20
    21d0:	54 2f       	mov	r21, r20
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a8 0e       	add	r10, r24
    21d8:	b9 1e       	adc	r11, r25
    21da:	9f e6       	ldi	r25, 0x6F	; 111
    21dc:	f9 22       	and	r15, r25
    21de:	57 ff       	sbrs	r21, 7
    21e0:	09 c0       	rjmp	.+18     	; 0x21f4 <vfprintf+0x21e>
    21e2:	50 95       	com	r21
    21e4:	40 95       	com	r20
    21e6:	30 95       	com	r19
    21e8:	21 95       	neg	r18
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	4f 4f       	sbci	r20, 0xFF	; 255
    21ee:	5f 4f       	sbci	r21, 0xFF	; 255
    21f0:	e0 e8       	ldi	r30, 0x80	; 128
    21f2:	fe 2a       	or	r15, r30
    21f4:	ca 01       	movw	r24, r20
    21f6:	b9 01       	movw	r22, r18
    21f8:	a1 01       	movw	r20, r2
    21fa:	2a e0       	ldi	r18, 0x0A	; 10
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	0e 94 0a 12 	call	0x2414	; 0x2414 <__ultoa_invert>
    2202:	d8 2e       	mov	r13, r24
    2204:	d2 18       	sub	r13, r2
    2206:	40 c0       	rjmp	.+128    	; 0x2288 <vfprintf+0x2b2>
    2208:	95 37       	cpi	r25, 0x75	; 117
    220a:	29 f4       	brne	.+10     	; 0x2216 <vfprintf+0x240>
    220c:	1f 2d       	mov	r17, r15
    220e:	1f 7e       	andi	r17, 0xEF	; 239
    2210:	2a e0       	ldi	r18, 0x0A	; 10
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	1d c0       	rjmp	.+58     	; 0x2250 <vfprintf+0x27a>
    2216:	1f 2d       	mov	r17, r15
    2218:	19 7f       	andi	r17, 0xF9	; 249
    221a:	9f 36       	cpi	r25, 0x6F	; 111
    221c:	61 f0       	breq	.+24     	; 0x2236 <vfprintf+0x260>
    221e:	90 37       	cpi	r25, 0x70	; 112
    2220:	20 f4       	brcc	.+8      	; 0x222a <vfprintf+0x254>
    2222:	98 35       	cpi	r25, 0x58	; 88
    2224:	09 f0       	breq	.+2      	; 0x2228 <vfprintf+0x252>
    2226:	ac c0       	rjmp	.+344    	; 0x2380 <vfprintf+0x3aa>
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <vfprintf+0x272>
    222a:	90 37       	cpi	r25, 0x70	; 112
    222c:	39 f0       	breq	.+14     	; 0x223c <vfprintf+0x266>
    222e:	98 37       	cpi	r25, 0x78	; 120
    2230:	09 f0       	breq	.+2      	; 0x2234 <vfprintf+0x25e>
    2232:	a6 c0       	rjmp	.+332    	; 0x2380 <vfprintf+0x3aa>
    2234:	04 c0       	rjmp	.+8      	; 0x223e <vfprintf+0x268>
    2236:	28 e0       	ldi	r18, 0x08	; 8
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <vfprintf+0x27a>
    223c:	10 61       	ori	r17, 0x10	; 16
    223e:	14 fd       	sbrc	r17, 4
    2240:	14 60       	ori	r17, 0x04	; 4
    2242:	20 e1       	ldi	r18, 0x10	; 16
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <vfprintf+0x27a>
    2248:	14 fd       	sbrc	r17, 4
    224a:	16 60       	ori	r17, 0x06	; 6
    224c:	20 e1       	ldi	r18, 0x10	; 16
    224e:	32 e0       	ldi	r19, 0x02	; 2
    2250:	17 ff       	sbrs	r17, 7
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <vfprintf+0x28e>
    2254:	f5 01       	movw	r30, r10
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	44 e0       	ldi	r20, 0x04	; 4
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	08 c0       	rjmp	.+16     	; 0x2274 <vfprintf+0x29e>
    2264:	f5 01       	movw	r30, r10
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	bc 01       	movw	r22, r24
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	42 e0       	ldi	r20, 0x02	; 2
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	a4 0e       	add	r10, r20
    2276:	b5 1e       	adc	r11, r21
    2278:	a1 01       	movw	r20, r2
    227a:	0e 94 0a 12 	call	0x2414	; 0x2414 <__ultoa_invert>
    227e:	d8 2e       	mov	r13, r24
    2280:	d2 18       	sub	r13, r2
    2282:	8f e7       	ldi	r24, 0x7F	; 127
    2284:	f8 2e       	mov	r15, r24
    2286:	f1 22       	and	r15, r17
    2288:	f6 fe       	sbrs	r15, 6
    228a:	0b c0       	rjmp	.+22     	; 0x22a2 <vfprintf+0x2cc>
    228c:	5e ef       	ldi	r21, 0xFE	; 254
    228e:	f5 22       	and	r15, r21
    2290:	d9 14       	cp	r13, r9
    2292:	38 f4       	brcc	.+14     	; 0x22a2 <vfprintf+0x2cc>
    2294:	f4 fe       	sbrs	r15, 4
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <vfprintf+0x2d0>
    2298:	f2 fc       	sbrc	r15, 2
    229a:	05 c0       	rjmp	.+10     	; 0x22a6 <vfprintf+0x2d0>
    229c:	8f ee       	ldi	r24, 0xEF	; 239
    229e:	f8 22       	and	r15, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <vfprintf+0x2d0>
    22a2:	1d 2d       	mov	r17, r13
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <vfprintf+0x2d2>
    22a6:	19 2d       	mov	r17, r9
    22a8:	f4 fe       	sbrs	r15, 4
    22aa:	0d c0       	rjmp	.+26     	; 0x22c6 <vfprintf+0x2f0>
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 0d       	add	r30, r13
    22b0:	f1 1d       	adc	r31, r1
    22b2:	80 81       	ld	r24, Z
    22b4:	80 33       	cpi	r24, 0x30	; 48
    22b6:	19 f4       	brne	.+6      	; 0x22be <vfprintf+0x2e8>
    22b8:	99 ee       	ldi	r25, 0xE9	; 233
    22ba:	f9 22       	and	r15, r25
    22bc:	08 c0       	rjmp	.+16     	; 0x22ce <vfprintf+0x2f8>
    22be:	1f 5f       	subi	r17, 0xFF	; 255
    22c0:	f2 fe       	sbrs	r15, 2
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <vfprintf+0x2f8>
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <vfprintf+0x2f6>
    22c6:	8f 2d       	mov	r24, r15
    22c8:	86 78       	andi	r24, 0x86	; 134
    22ca:	09 f0       	breq	.+2      	; 0x22ce <vfprintf+0x2f8>
    22cc:	1f 5f       	subi	r17, 0xFF	; 255
    22ce:	0f 2d       	mov	r16, r15
    22d0:	f3 fc       	sbrc	r15, 3
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <vfprintf+0x326>
    22d4:	f0 fe       	sbrs	r15, 0
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <vfprintf+0x320>
    22d8:	1e 15       	cp	r17, r14
    22da:	10 f0       	brcs	.+4      	; 0x22e0 <vfprintf+0x30a>
    22dc:	9d 2c       	mov	r9, r13
    22de:	0b c0       	rjmp	.+22     	; 0x22f6 <vfprintf+0x320>
    22e0:	9d 2c       	mov	r9, r13
    22e2:	9e 0c       	add	r9, r14
    22e4:	91 1a       	sub	r9, r17
    22e6:	1e 2d       	mov	r17, r14
    22e8:	06 c0       	rjmp	.+12     	; 0x22f6 <vfprintf+0x320>
    22ea:	80 e2       	ldi	r24, 0x20	; 32
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	b3 01       	movw	r22, r6
    22f0:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    22f4:	1f 5f       	subi	r17, 0xFF	; 255
    22f6:	1e 15       	cp	r17, r14
    22f8:	c0 f3       	brcs	.-16     	; 0x22ea <vfprintf+0x314>
    22fa:	04 c0       	rjmp	.+8      	; 0x2304 <vfprintf+0x32e>
    22fc:	1e 15       	cp	r17, r14
    22fe:	10 f4       	brcc	.+4      	; 0x2304 <vfprintf+0x32e>
    2300:	e1 1a       	sub	r14, r17
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <vfprintf+0x330>
    2304:	ee 24       	eor	r14, r14
    2306:	04 ff       	sbrs	r16, 4
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <vfprintf+0x352>
    230a:	80 e3       	ldi	r24, 0x30	; 48
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	b3 01       	movw	r22, r6
    2310:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2314:	02 ff       	sbrs	r16, 2
    2316:	1d c0       	rjmp	.+58     	; 0x2352 <vfprintf+0x37c>
    2318:	01 fd       	sbrc	r16, 1
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <vfprintf+0x34c>
    231c:	88 e7       	ldi	r24, 0x78	; 120
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e c0       	rjmp	.+28     	; 0x233e <vfprintf+0x368>
    2322:	88 e5       	ldi	r24, 0x58	; 88
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0b c0       	rjmp	.+22     	; 0x233e <vfprintf+0x368>
    2328:	80 2f       	mov	r24, r16
    232a:	86 78       	andi	r24, 0x86	; 134
    232c:	91 f0       	breq	.+36     	; 0x2352 <vfprintf+0x37c>
    232e:	01 ff       	sbrs	r16, 1
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <vfprintf+0x360>
    2332:	8b e2       	ldi	r24, 0x2B	; 43
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <vfprintf+0x362>
    2336:	80 e2       	ldi	r24, 0x20	; 32
    2338:	f7 fc       	sbrc	r15, 7
    233a:	8d e2       	ldi	r24, 0x2D	; 45
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	b3 01       	movw	r22, r6
    2340:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <vfprintf+0x37c>
    2346:	80 e3       	ldi	r24, 0x30	; 48
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	b3 01       	movw	r22, r6
    234c:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2350:	9a 94       	dec	r9
    2352:	d9 14       	cp	r13, r9
    2354:	c0 f3       	brcs	.-16     	; 0x2346 <vfprintf+0x370>
    2356:	da 94       	dec	r13
    2358:	f1 01       	movw	r30, r2
    235a:	ed 0d       	add	r30, r13
    235c:	f1 1d       	adc	r31, r1
    235e:	80 81       	ld	r24, Z
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	b3 01       	movw	r22, r6
    2364:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2368:	dd 20       	and	r13, r13
    236a:	a9 f7       	brne	.-22     	; 0x2356 <vfprintf+0x380>
    236c:	06 c0       	rjmp	.+12     	; 0x237a <vfprintf+0x3a4>
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	b3 01       	movw	r22, r6
    2374:	0e 94 de 11 	call	0x23bc	; 0x23bc <fputc>
    2378:	ea 94       	dec	r14
    237a:	ee 20       	and	r14, r14
    237c:	c1 f7       	brne	.-16     	; 0x236e <vfprintf+0x398>
    237e:	43 ce       	rjmp	.-890    	; 0x2006 <vfprintf+0x30>
    2380:	f3 01       	movw	r30, r6
    2382:	66 81       	ldd	r22, Z+6	; 0x06
    2384:	77 81       	ldd	r23, Z+7	; 0x07
    2386:	cb 01       	movw	r24, r22
    2388:	2b 96       	adiw	r28, 0x0b	; 11
    238a:	e2 e1       	ldi	r30, 0x12	; 18
    238c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__epilogue_restores__>

00002390 <strnlen_P>:
    2390:	fc 01       	movw	r30, r24
    2392:	05 90       	lpm	r0, Z+
    2394:	61 50       	subi	r22, 0x01	; 1
    2396:	70 40       	sbci	r23, 0x00	; 0
    2398:	01 10       	cpse	r0, r1
    239a:	d8 f7       	brcc	.-10     	; 0x2392 <strnlen_P+0x2>
    239c:	80 95       	com	r24
    239e:	90 95       	com	r25
    23a0:	8e 0f       	add	r24, r30
    23a2:	9f 1f       	adc	r25, r31
    23a4:	08 95       	ret

000023a6 <strnlen>:
    23a6:	fc 01       	movw	r30, r24
    23a8:	61 50       	subi	r22, 0x01	; 1
    23aa:	70 40       	sbci	r23, 0x00	; 0
    23ac:	01 90       	ld	r0, Z+
    23ae:	01 10       	cpse	r0, r1
    23b0:	d8 f7       	brcc	.-10     	; 0x23a8 <strnlen+0x2>
    23b2:	80 95       	com	r24
    23b4:	90 95       	com	r25
    23b6:	8e 0f       	add	r24, r30
    23b8:	9f 1f       	adc	r25, r31
    23ba:	08 95       	ret

000023bc <fputc>:
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	8c 01       	movw	r16, r24
    23c6:	eb 01       	movw	r28, r22
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	81 ff       	sbrs	r24, 1
    23cc:	1b c0       	rjmp	.+54     	; 0x2404 <fputc+0x48>
    23ce:	82 ff       	sbrs	r24, 2
    23d0:	0d c0       	rjmp	.+26     	; 0x23ec <fputc+0x30>
    23d2:	2e 81       	ldd	r18, Y+6	; 0x06
    23d4:	3f 81       	ldd	r19, Y+7	; 0x07
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	28 17       	cp	r18, r24
    23dc:	39 07       	cpc	r19, r25
    23de:	64 f4       	brge	.+24     	; 0x23f8 <fputc+0x3c>
    23e0:	e8 81       	ld	r30, Y
    23e2:	f9 81       	ldd	r31, Y+1	; 0x01
    23e4:	01 93       	st	Z+, r16
    23e6:	f9 83       	std	Y+1, r31	; 0x01
    23e8:	e8 83       	st	Y, r30
    23ea:	06 c0       	rjmp	.+12     	; 0x23f8 <fputc+0x3c>
    23ec:	e8 85       	ldd	r30, Y+8	; 0x08
    23ee:	f9 85       	ldd	r31, Y+9	; 0x09
    23f0:	80 2f       	mov	r24, r16
    23f2:	09 95       	icall
    23f4:	89 2b       	or	r24, r25
    23f6:	31 f4       	brne	.+12     	; 0x2404 <fputc+0x48>
    23f8:	8e 81       	ldd	r24, Y+6	; 0x06
    23fa:	9f 81       	ldd	r25, Y+7	; 0x07
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	9f 83       	std	Y+7, r25	; 0x07
    2400:	8e 83       	std	Y+6, r24	; 0x06
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <fputc+0x4c>
    2404:	0f ef       	ldi	r16, 0xFF	; 255
    2406:	1f ef       	ldi	r17, 0xFF	; 255
    2408:	c8 01       	movw	r24, r16
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <__ultoa_invert>:
    2414:	fa 01       	movw	r30, r20
    2416:	aa 27       	eor	r26, r26
    2418:	28 30       	cpi	r18, 0x08	; 8
    241a:	51 f1       	breq	.+84     	; 0x2470 <__ultoa_invert+0x5c>
    241c:	20 31       	cpi	r18, 0x10	; 16
    241e:	81 f1       	breq	.+96     	; 0x2480 <__ultoa_invert+0x6c>
    2420:	e8 94       	clt
    2422:	6f 93       	push	r22
    2424:	6e 7f       	andi	r22, 0xFE	; 254
    2426:	6e 5f       	subi	r22, 0xFE	; 254
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	8f 4f       	sbci	r24, 0xFF	; 255
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	af 4f       	sbci	r26, 0xFF	; 255
    2430:	b1 e0       	ldi	r27, 0x01	; 1
    2432:	3e d0       	rcall	.+124    	; 0x24b0 <__ultoa_invert+0x9c>
    2434:	b4 e0       	ldi	r27, 0x04	; 4
    2436:	3c d0       	rcall	.+120    	; 0x24b0 <__ultoa_invert+0x9c>
    2438:	67 0f       	add	r22, r23
    243a:	78 1f       	adc	r23, r24
    243c:	89 1f       	adc	r24, r25
    243e:	9a 1f       	adc	r25, r26
    2440:	a1 1d       	adc	r26, r1
    2442:	68 0f       	add	r22, r24
    2444:	79 1f       	adc	r23, r25
    2446:	8a 1f       	adc	r24, r26
    2448:	91 1d       	adc	r25, r1
    244a:	a1 1d       	adc	r26, r1
    244c:	6a 0f       	add	r22, r26
    244e:	71 1d       	adc	r23, r1
    2450:	81 1d       	adc	r24, r1
    2452:	91 1d       	adc	r25, r1
    2454:	a1 1d       	adc	r26, r1
    2456:	20 d0       	rcall	.+64     	; 0x2498 <__ultoa_invert+0x84>
    2458:	09 f4       	brne	.+2      	; 0x245c <__ultoa_invert+0x48>
    245a:	68 94       	set
    245c:	3f 91       	pop	r19
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	26 9f       	mul	r18, r22
    2462:	11 24       	eor	r1, r1
    2464:	30 19       	sub	r19, r0
    2466:	30 5d       	subi	r19, 0xD0	; 208
    2468:	31 93       	st	Z+, r19
    246a:	de f6       	brtc	.-74     	; 0x2422 <__ultoa_invert+0xe>
    246c:	cf 01       	movw	r24, r30
    246e:	08 95       	ret
    2470:	46 2f       	mov	r20, r22
    2472:	47 70       	andi	r20, 0x07	; 7
    2474:	40 5d       	subi	r20, 0xD0	; 208
    2476:	41 93       	st	Z+, r20
    2478:	b3 e0       	ldi	r27, 0x03	; 3
    247a:	0f d0       	rcall	.+30     	; 0x249a <__ultoa_invert+0x86>
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0x5c>
    247e:	f6 cf       	rjmp	.-20     	; 0x246c <__ultoa_invert+0x58>
    2480:	46 2f       	mov	r20, r22
    2482:	4f 70       	andi	r20, 0x0F	; 15
    2484:	40 5d       	subi	r20, 0xD0	; 208
    2486:	4a 33       	cpi	r20, 0x3A	; 58
    2488:	18 f0       	brcs	.+6      	; 0x2490 <__ultoa_invert+0x7c>
    248a:	49 5d       	subi	r20, 0xD9	; 217
    248c:	31 fd       	sbrc	r19, 1
    248e:	40 52       	subi	r20, 0x20	; 32
    2490:	41 93       	st	Z+, r20
    2492:	02 d0       	rcall	.+4      	; 0x2498 <__ultoa_invert+0x84>
    2494:	a9 f7       	brne	.-22     	; 0x2480 <__ultoa_invert+0x6c>
    2496:	ea cf       	rjmp	.-44     	; 0x246c <__ultoa_invert+0x58>
    2498:	b4 e0       	ldi	r27, 0x04	; 4
    249a:	a6 95       	lsr	r26
    249c:	97 95       	ror	r25
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	ba 95       	dec	r27
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__ultoa_invert+0x86>
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	61 05       	cpc	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	08 95       	ret
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	0a 2e       	mov	r0, r26
    24b6:	06 94       	lsr	r0
    24b8:	57 95       	ror	r21
    24ba:	47 95       	ror	r20
    24bc:	37 95       	ror	r19
    24be:	27 95       	ror	r18
    24c0:	ba 95       	dec	r27
    24c2:	c9 f7       	brne	.-14     	; 0x24b6 <__ultoa_invert+0xa2>
    24c4:	62 0f       	add	r22, r18
    24c6:	73 1f       	adc	r23, r19
    24c8:	84 1f       	adc	r24, r20
    24ca:	95 1f       	adc	r25, r21
    24cc:	a0 1d       	adc	r26, r0
    24ce:	08 95       	ret
    24d0:	ce c0       	rjmp	.+412    	; 0x266e <__fp_nan>

000024d2 <__fp_rempio2>:
    24d2:	3f d0       	rcall	.+126    	; 0x2552 <__fp_splitA>
    24d4:	e8 f3       	brcs	.-6      	; 0x24d0 <__ultoa_invert+0xbc>
    24d6:	e8 94       	clt
    24d8:	e0 e0       	ldi	r30, 0x00	; 0
    24da:	bb 27       	eor	r27, r27
    24dc:	9f 57       	subi	r25, 0x7F	; 127
    24de:	f0 f0       	brcs	.+60     	; 0x251c <__fp_rempio2+0x4a>
    24e0:	2a ed       	ldi	r18, 0xDA	; 218
    24e2:	3f e0       	ldi	r19, 0x0F	; 15
    24e4:	49 ec       	ldi	r20, 0xC9	; 201
    24e6:	06 c0       	rjmp	.+12     	; 0x24f4 <__fp_rempio2+0x22>
    24e8:	ee 0f       	add	r30, r30
    24ea:	bb 0f       	add	r27, r27
    24ec:	66 1f       	adc	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	88 1f       	adc	r24, r24
    24f2:	28 f0       	brcs	.+10     	; 0x24fe <__fp_rempio2+0x2c>
    24f4:	b2 3a       	cpi	r27, 0xA2	; 162
    24f6:	62 07       	cpc	r22, r18
    24f8:	73 07       	cpc	r23, r19
    24fa:	84 07       	cpc	r24, r20
    24fc:	28 f0       	brcs	.+10     	; 0x2508 <__fp_rempio2+0x36>
    24fe:	b2 5a       	subi	r27, 0xA2	; 162
    2500:	62 0b       	sbc	r22, r18
    2502:	73 0b       	sbc	r23, r19
    2504:	84 0b       	sbc	r24, r20
    2506:	e3 95       	inc	r30
    2508:	9a 95       	dec	r25
    250a:	72 f7       	brpl	.-36     	; 0x24e8 <__fp_rempio2+0x16>
    250c:	80 38       	cpi	r24, 0x80	; 128
    250e:	30 f4       	brcc	.+12     	; 0x251c <__fp_rempio2+0x4a>
    2510:	9a 95       	dec	r25
    2512:	bb 0f       	add	r27, r27
    2514:	66 1f       	adc	r22, r22
    2516:	77 1f       	adc	r23, r23
    2518:	88 1f       	adc	r24, r24
    251a:	d2 f7       	brpl	.-12     	; 0x2510 <__fp_rempio2+0x3e>
    251c:	90 48       	sbci	r25, 0x80	; 128
    251e:	9b c0       	rjmp	.+310    	; 0x2656 <__fp_mpack_finite>

00002520 <__fp_sinus>:
    2520:	ef 93       	push	r30
    2522:	e0 ff       	sbrs	r30, 0
    2524:	06 c0       	rjmp	.+12     	; 0x2532 <__fp_sinus+0x12>
    2526:	a2 ea       	ldi	r26, 0xA2	; 162
    2528:	2a ed       	ldi	r18, 0xDA	; 218
    252a:	3f e0       	ldi	r19, 0x0F	; 15
    252c:	49 ec       	ldi	r20, 0xC9	; 201
    252e:	5f eb       	ldi	r21, 0xBF	; 191
    2530:	37 d0       	rcall	.+110    	; 0x25a0 <__addsf3x>
    2532:	bf d0       	rcall	.+382    	; 0x26b2 <__fp_round>
    2534:	0f 90       	pop	r0
    2536:	03 94       	inc	r0
    2538:	01 fc       	sbrc	r0, 1
    253a:	90 58       	subi	r25, 0x80	; 128
    253c:	e0 e7       	ldi	r30, 0x70	; 112
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	99 c0       	rjmp	.+306    	; 0x2674 <__fp_powsodd>

00002542 <__fp_split3>:
    2542:	57 fd       	sbrc	r21, 7
    2544:	90 58       	subi	r25, 0x80	; 128
    2546:	44 0f       	add	r20, r20
    2548:	55 1f       	adc	r21, r21
    254a:	59 f0       	breq	.+22     	; 0x2562 <__fp_splitA+0x10>
    254c:	5f 3f       	cpi	r21, 0xFF	; 255
    254e:	71 f0       	breq	.+28     	; 0x256c <__fp_splitA+0x1a>
    2550:	47 95       	ror	r20

00002552 <__fp_splitA>:
    2552:	88 0f       	add	r24, r24
    2554:	97 fb       	bst	r25, 7
    2556:	99 1f       	adc	r25, r25
    2558:	61 f0       	breq	.+24     	; 0x2572 <__fp_splitA+0x20>
    255a:	9f 3f       	cpi	r25, 0xFF	; 255
    255c:	79 f0       	breq	.+30     	; 0x257c <__fp_splitA+0x2a>
    255e:	87 95       	ror	r24
    2560:	08 95       	ret
    2562:	12 16       	cp	r1, r18
    2564:	13 06       	cpc	r1, r19
    2566:	14 06       	cpc	r1, r20
    2568:	55 1f       	adc	r21, r21
    256a:	f2 cf       	rjmp	.-28     	; 0x2550 <__fp_split3+0xe>
    256c:	46 95       	lsr	r20
    256e:	f1 df       	rcall	.-30     	; 0x2552 <__fp_splitA>
    2570:	08 c0       	rjmp	.+16     	; 0x2582 <__fp_splitA+0x30>
    2572:	16 16       	cp	r1, r22
    2574:	17 06       	cpc	r1, r23
    2576:	18 06       	cpc	r1, r24
    2578:	99 1f       	adc	r25, r25
    257a:	f1 cf       	rjmp	.-30     	; 0x255e <__fp_splitA+0xc>
    257c:	86 95       	lsr	r24
    257e:	71 05       	cpc	r23, r1
    2580:	61 05       	cpc	r22, r1
    2582:	08 94       	sec
    2584:	08 95       	ret
    2586:	87 d0       	rcall	.+270    	; 0x2696 <__fp_pscA>
    2588:	30 f0       	brcs	.+12     	; 0x2596 <__fp_splitA+0x44>
    258a:	8c d0       	rcall	.+280    	; 0x26a4 <__fp_pscB>
    258c:	20 f0       	brcs	.+8      	; 0x2596 <__fp_splitA+0x44>
    258e:	31 f4       	brne	.+12     	; 0x259c <__fp_splitA+0x4a>
    2590:	9f 3f       	cpi	r25, 0xFF	; 255
    2592:	11 f4       	brne	.+4      	; 0x2598 <__fp_splitA+0x46>
    2594:	1e f4       	brtc	.+6      	; 0x259c <__fp_splitA+0x4a>
    2596:	6b c0       	rjmp	.+214    	; 0x266e <__fp_nan>
    2598:	0e f4       	brtc	.+2      	; 0x259c <__fp_splitA+0x4a>
    259a:	e0 95       	com	r30
    259c:	e7 fb       	bst	r30, 7
    259e:	53 c0       	rjmp	.+166    	; 0x2646 <__fp_inf>

000025a0 <__addsf3x>:
    25a0:	e9 2f       	mov	r30, r25
    25a2:	cf df       	rcall	.-98     	; 0x2542 <__fp_split3>
    25a4:	80 f3       	brcs	.-32     	; 0x2586 <__fp_splitA+0x34>
    25a6:	ba 17       	cp	r27, r26
    25a8:	62 07       	cpc	r22, r18
    25aa:	73 07       	cpc	r23, r19
    25ac:	84 07       	cpc	r24, r20
    25ae:	95 07       	cpc	r25, r21
    25b0:	18 f0       	brcs	.+6      	; 0x25b8 <__addsf3x+0x18>
    25b2:	71 f4       	brne	.+28     	; 0x25d0 <__addsf3x+0x30>
    25b4:	9e f5       	brtc	.+102    	; 0x261c <__addsf3x+0x7c>
    25b6:	8e c0       	rjmp	.+284    	; 0x26d4 <__fp_zero>
    25b8:	0e f4       	brtc	.+2      	; 0x25bc <__addsf3x+0x1c>
    25ba:	e0 95       	com	r30
    25bc:	0b 2e       	mov	r0, r27
    25be:	ba 2f       	mov	r27, r26
    25c0:	a0 2d       	mov	r26, r0
    25c2:	0b 01       	movw	r0, r22
    25c4:	b9 01       	movw	r22, r18
    25c6:	90 01       	movw	r18, r0
    25c8:	0c 01       	movw	r0, r24
    25ca:	ca 01       	movw	r24, r20
    25cc:	a0 01       	movw	r20, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	ff 27       	eor	r31, r31
    25d2:	59 1b       	sub	r21, r25
    25d4:	99 f0       	breq	.+38     	; 0x25fc <__addsf3x+0x5c>
    25d6:	59 3f       	cpi	r21, 0xF9	; 249
    25d8:	50 f4       	brcc	.+20     	; 0x25ee <__addsf3x+0x4e>
    25da:	50 3e       	cpi	r21, 0xE0	; 224
    25dc:	68 f1       	brcs	.+90     	; 0x2638 <__addsf3x+0x98>
    25de:	1a 16       	cp	r1, r26
    25e0:	f0 40       	sbci	r31, 0x00	; 0
    25e2:	a2 2f       	mov	r26, r18
    25e4:	23 2f       	mov	r18, r19
    25e6:	34 2f       	mov	r19, r20
    25e8:	44 27       	eor	r20, r20
    25ea:	58 5f       	subi	r21, 0xF8	; 248
    25ec:	f3 cf       	rjmp	.-26     	; 0x25d4 <__addsf3x+0x34>
    25ee:	46 95       	lsr	r20
    25f0:	37 95       	ror	r19
    25f2:	27 95       	ror	r18
    25f4:	a7 95       	ror	r26
    25f6:	f0 40       	sbci	r31, 0x00	; 0
    25f8:	53 95       	inc	r21
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__addsf3x+0x4e>
    25fc:	7e f4       	brtc	.+30     	; 0x261c <__addsf3x+0x7c>
    25fe:	1f 16       	cp	r1, r31
    2600:	ba 0b       	sbc	r27, r26
    2602:	62 0b       	sbc	r22, r18
    2604:	73 0b       	sbc	r23, r19
    2606:	84 0b       	sbc	r24, r20
    2608:	ba f0       	brmi	.+46     	; 0x2638 <__addsf3x+0x98>
    260a:	91 50       	subi	r25, 0x01	; 1
    260c:	a1 f0       	breq	.+40     	; 0x2636 <__addsf3x+0x96>
    260e:	ff 0f       	add	r31, r31
    2610:	bb 1f       	adc	r27, r27
    2612:	66 1f       	adc	r22, r22
    2614:	77 1f       	adc	r23, r23
    2616:	88 1f       	adc	r24, r24
    2618:	c2 f7       	brpl	.-16     	; 0x260a <__addsf3x+0x6a>
    261a:	0e c0       	rjmp	.+28     	; 0x2638 <__addsf3x+0x98>
    261c:	ba 0f       	add	r27, r26
    261e:	62 1f       	adc	r22, r18
    2620:	73 1f       	adc	r23, r19
    2622:	84 1f       	adc	r24, r20
    2624:	48 f4       	brcc	.+18     	; 0x2638 <__addsf3x+0x98>
    2626:	87 95       	ror	r24
    2628:	77 95       	ror	r23
    262a:	67 95       	ror	r22
    262c:	b7 95       	ror	r27
    262e:	f7 95       	ror	r31
    2630:	9e 3f       	cpi	r25, 0xFE	; 254
    2632:	08 f0       	brcs	.+2      	; 0x2636 <__addsf3x+0x96>
    2634:	b3 cf       	rjmp	.-154    	; 0x259c <__fp_splitA+0x4a>
    2636:	93 95       	inc	r25
    2638:	88 0f       	add	r24, r24
    263a:	08 f0       	brcs	.+2      	; 0x263e <__addsf3x+0x9e>
    263c:	99 27       	eor	r25, r25
    263e:	ee 0f       	add	r30, r30
    2640:	97 95       	ror	r25
    2642:	87 95       	ror	r24
    2644:	08 95       	ret

00002646 <__fp_inf>:
    2646:	97 f9       	bld	r25, 7
    2648:	9f 67       	ori	r25, 0x7F	; 127
    264a:	80 e8       	ldi	r24, 0x80	; 128
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	08 95       	ret

00002652 <__fp_mpack>:
    2652:	9f 3f       	cpi	r25, 0xFF	; 255
    2654:	31 f0       	breq	.+12     	; 0x2662 <__fp_mpack_finite+0xc>

00002656 <__fp_mpack_finite>:
    2656:	91 50       	subi	r25, 0x01	; 1
    2658:	20 f4       	brcc	.+8      	; 0x2662 <__fp_mpack_finite+0xc>
    265a:	87 95       	ror	r24
    265c:	77 95       	ror	r23
    265e:	67 95       	ror	r22
    2660:	b7 95       	ror	r27
    2662:	88 0f       	add	r24, r24
    2664:	91 1d       	adc	r25, r1
    2666:	96 95       	lsr	r25
    2668:	87 95       	ror	r24
    266a:	97 f9       	bld	r25, 7
    266c:	08 95       	ret

0000266e <__fp_nan>:
    266e:	9f ef       	ldi	r25, 0xFF	; 255
    2670:	80 ec       	ldi	r24, 0xC0	; 192
    2672:	08 95       	ret

00002674 <__fp_powsodd>:
    2674:	9f 93       	push	r25
    2676:	8f 93       	push	r24
    2678:	7f 93       	push	r23
    267a:	6f 93       	push	r22
    267c:	ff 93       	push	r31
    267e:	ef 93       	push	r30
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	0b d8       	rcall	.-4074   	; 0x169c <__mulsf3>
    2686:	ef 91       	pop	r30
    2688:	ff 91       	pop	r31
    268a:	2b d0       	rcall	.+86     	; 0x26e2 <__fp_powser>
    268c:	2f 91       	pop	r18
    268e:	3f 91       	pop	r19
    2690:	4f 91       	pop	r20
    2692:	5f 91       	pop	r21
    2694:	03 c8       	rjmp	.-4090   	; 0x169c <__mulsf3>

00002696 <__fp_pscA>:
    2696:	00 24       	eor	r0, r0
    2698:	0a 94       	dec	r0
    269a:	16 16       	cp	r1, r22
    269c:	17 06       	cpc	r1, r23
    269e:	18 06       	cpc	r1, r24
    26a0:	09 06       	cpc	r0, r25
    26a2:	08 95       	ret

000026a4 <__fp_pscB>:
    26a4:	00 24       	eor	r0, r0
    26a6:	0a 94       	dec	r0
    26a8:	12 16       	cp	r1, r18
    26aa:	13 06       	cpc	r1, r19
    26ac:	14 06       	cpc	r1, r20
    26ae:	05 06       	cpc	r0, r21
    26b0:	08 95       	ret

000026b2 <__fp_round>:
    26b2:	09 2e       	mov	r0, r25
    26b4:	03 94       	inc	r0
    26b6:	00 0c       	add	r0, r0
    26b8:	11 f4       	brne	.+4      	; 0x26be <__fp_round+0xc>
    26ba:	88 23       	and	r24, r24
    26bc:	52 f0       	brmi	.+20     	; 0x26d2 <__fp_round+0x20>
    26be:	bb 0f       	add	r27, r27
    26c0:	40 f4       	brcc	.+16     	; 0x26d2 <__fp_round+0x20>
    26c2:	bf 2b       	or	r27, r31
    26c4:	11 f4       	brne	.+4      	; 0x26ca <__fp_round+0x18>
    26c6:	60 ff       	sbrs	r22, 0
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <__fp_round+0x20>
    26ca:	6f 5f       	subi	r22, 0xFF	; 255
    26cc:	7f 4f       	sbci	r23, 0xFF	; 255
    26ce:	8f 4f       	sbci	r24, 0xFF	; 255
    26d0:	9f 4f       	sbci	r25, 0xFF	; 255
    26d2:	08 95       	ret

000026d4 <__fp_zero>:
    26d4:	e8 94       	clt

000026d6 <__fp_szero>:
    26d6:	bb 27       	eor	r27, r27
    26d8:	66 27       	eor	r22, r22
    26da:	77 27       	eor	r23, r23
    26dc:	cb 01       	movw	r24, r22
    26de:	97 f9       	bld	r25, 7
    26e0:	08 95       	ret

000026e2 <__fp_powser>:
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	1f 93       	push	r17
    26e8:	0f 93       	push	r16
    26ea:	ff 92       	push	r15
    26ec:	ef 92       	push	r14
    26ee:	df 92       	push	r13
    26f0:	7b 01       	movw	r14, r22
    26f2:	8c 01       	movw	r16, r24
    26f4:	68 94       	set
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <__fp_powser+0x20>
    26f8:	da 2e       	mov	r13, r26
    26fa:	ef 01       	movw	r28, r30
    26fc:	21 d0       	rcall	.+66     	; 0x2740 <__mulsf3x>
    26fe:	fe 01       	movw	r30, r28
    2700:	e8 94       	clt
    2702:	a5 91       	lpm	r26, Z+
    2704:	25 91       	lpm	r18, Z+
    2706:	35 91       	lpm	r19, Z+
    2708:	45 91       	lpm	r20, Z+
    270a:	55 91       	lpm	r21, Z+
    270c:	ae f3       	brts	.-22     	; 0x26f8 <__fp_powser+0x16>
    270e:	ef 01       	movw	r28, r30
    2710:	47 df       	rcall	.-370    	; 0x25a0 <__addsf3x>
    2712:	fe 01       	movw	r30, r28
    2714:	97 01       	movw	r18, r14
    2716:	a8 01       	movw	r20, r16
    2718:	da 94       	dec	r13
    271a:	79 f7       	brne	.-34     	; 0x26fa <__fp_powser+0x18>
    271c:	df 90       	pop	r13
    271e:	ef 90       	pop	r14
    2720:	ff 90       	pop	r15
    2722:	0f 91       	pop	r16
    2724:	1f 91       	pop	r17
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret
    272c:	b4 df       	rcall	.-152    	; 0x2696 <__fp_pscA>
    272e:	28 f0       	brcs	.+10     	; 0x273a <__fp_powser+0x58>
    2730:	b9 df       	rcall	.-142    	; 0x26a4 <__fp_pscB>
    2732:	18 f0       	brcs	.+6      	; 0x273a <__fp_powser+0x58>
    2734:	95 23       	and	r25, r21
    2736:	09 f0       	breq	.+2      	; 0x273a <__fp_powser+0x58>
    2738:	86 cf       	rjmp	.-244    	; 0x2646 <__fp_inf>
    273a:	99 cf       	rjmp	.-206    	; 0x266e <__fp_nan>
    273c:	11 24       	eor	r1, r1
    273e:	cb cf       	rjmp	.-106    	; 0x26d6 <__fp_szero>

00002740 <__mulsf3x>:
    2740:	00 df       	rcall	.-512    	; 0x2542 <__fp_split3>
    2742:	a0 f3       	brcs	.-24     	; 0x272c <__fp_powser+0x4a>

00002744 <__mulsf3_pse>:
    2744:	95 9f       	mul	r25, r21
    2746:	d1 f3       	breq	.-12     	; 0x273c <__fp_powser+0x5a>
    2748:	95 0f       	add	r25, r21
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	55 1f       	adc	r21, r21
    274e:	62 9f       	mul	r22, r18
    2750:	f0 01       	movw	r30, r0
    2752:	72 9f       	mul	r23, r18
    2754:	bb 27       	eor	r27, r27
    2756:	f0 0d       	add	r31, r0
    2758:	b1 1d       	adc	r27, r1
    275a:	63 9f       	mul	r22, r19
    275c:	aa 27       	eor	r26, r26
    275e:	f0 0d       	add	r31, r0
    2760:	b1 1d       	adc	r27, r1
    2762:	aa 1f       	adc	r26, r26
    2764:	64 9f       	mul	r22, r20
    2766:	66 27       	eor	r22, r22
    2768:	b0 0d       	add	r27, r0
    276a:	a1 1d       	adc	r26, r1
    276c:	66 1f       	adc	r22, r22
    276e:	82 9f       	mul	r24, r18
    2770:	22 27       	eor	r18, r18
    2772:	b0 0d       	add	r27, r0
    2774:	a1 1d       	adc	r26, r1
    2776:	62 1f       	adc	r22, r18
    2778:	73 9f       	mul	r23, r19
    277a:	b0 0d       	add	r27, r0
    277c:	a1 1d       	adc	r26, r1
    277e:	62 1f       	adc	r22, r18
    2780:	83 9f       	mul	r24, r19
    2782:	a0 0d       	add	r26, r0
    2784:	61 1d       	adc	r22, r1
    2786:	22 1f       	adc	r18, r18
    2788:	74 9f       	mul	r23, r20
    278a:	33 27       	eor	r19, r19
    278c:	a0 0d       	add	r26, r0
    278e:	61 1d       	adc	r22, r1
    2790:	23 1f       	adc	r18, r19
    2792:	84 9f       	mul	r24, r20
    2794:	60 0d       	add	r22, r0
    2796:	21 1d       	adc	r18, r1
    2798:	82 2f       	mov	r24, r18
    279a:	76 2f       	mov	r23, r22
    279c:	6a 2f       	mov	r22, r26
    279e:	11 24       	eor	r1, r1
    27a0:	9f 57       	subi	r25, 0x7F	; 127
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	8a f0       	brmi	.+34     	; 0x27c8 <__mulsf3_pse+0x84>
    27a6:	e1 f0       	breq	.+56     	; 0x27e0 <__mulsf3_pse+0x9c>
    27a8:	88 23       	and	r24, r24
    27aa:	4a f0       	brmi	.+18     	; 0x27be <__mulsf3_pse+0x7a>
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	bb 1f       	adc	r27, r27
    27b2:	66 1f       	adc	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	91 50       	subi	r25, 0x01	; 1
    27ba:	50 40       	sbci	r21, 0x00	; 0
    27bc:	a9 f7       	brne	.-22     	; 0x27a8 <__mulsf3_pse+0x64>
    27be:	9e 3f       	cpi	r25, 0xFE	; 254
    27c0:	51 05       	cpc	r21, r1
    27c2:	70 f0       	brcs	.+28     	; 0x27e0 <__mulsf3_pse+0x9c>
    27c4:	40 cf       	rjmp	.-384    	; 0x2646 <__fp_inf>
    27c6:	87 cf       	rjmp	.-242    	; 0x26d6 <__fp_szero>
    27c8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ca:	ec f3       	brlt	.-6      	; 0x27c6 <__mulsf3_pse+0x82>
    27cc:	98 3e       	cpi	r25, 0xE8	; 232
    27ce:	dc f3       	brlt	.-10     	; 0x27c6 <__mulsf3_pse+0x82>
    27d0:	86 95       	lsr	r24
    27d2:	77 95       	ror	r23
    27d4:	67 95       	ror	r22
    27d6:	b7 95       	ror	r27
    27d8:	f7 95       	ror	r31
    27da:	e7 95       	ror	r30
    27dc:	9f 5f       	subi	r25, 0xFF	; 255
    27de:	c1 f7       	brne	.-16     	; 0x27d0 <__mulsf3_pse+0x8c>
    27e0:	fe 2b       	or	r31, r30
    27e2:	88 0f       	add	r24, r24
    27e4:	91 1d       	adc	r25, r1
    27e6:	96 95       	lsr	r25
    27e8:	87 95       	ror	r24
    27ea:	97 f9       	bld	r25, 7
    27ec:	08 95       	ret

000027ee <_exit>:
    27ee:	f8 94       	cli

000027f0 <__stop_program>:
    27f0:	ff cf       	rjmp	.-2      	; 0x27f0 <__stop_program>
