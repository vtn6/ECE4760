
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  0000271e  000027b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000271e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e8  0080033a  0080033a  000029ec  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000842  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030a8  00000000  00000000  000033ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014a2  00000000  00000000  00006496  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001eb0  00000000  00000000  00007938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  000097e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ac  00000000  00000000  00009c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000110c  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__ctors_end>
       4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
       c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      14:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      18:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      20:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      24:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_9>
      28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      30:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      34:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_13>
      38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      3c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      44:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      4c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      50:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      54:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      58:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      5c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      60:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      64:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      68:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      6c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <Initialize+0x5a>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <LCDHelloTop>:
      8e:	53 59 4e 54 48 20 76 39 30 30 31 00 00              SYNTH v9001..

0000009b <LCDHelloBot>:
      9b:	50 52 45 53 53 20 23 20 46 4f 52 20 48 45 4c 50     PRESS # FOR HELP
	...

000000ad <LCDSequenceId>:
      ad:	53 45 51 55 45 4e 43 45 20 49 44 20 00 00           SEQUENCE ID ..

000000bb <LCDVoiceId>:
      bb:	56 4f 49 43 45 20 49 44 20 00 00                    VOICE ID ..

000000c6 <LCDMainFrequency>:
      c6:	4d 41 49 4e 20 46 52 45 51 20 00 00                 MAIN FREQ ..

000000d2 <LCDMainDecay>:
      d2:	4d 41 49 4e 20 44 45 43 41 59 20 00 00              MAIN DECAY ..

000000df <LCDMainRise>:
      df:	4d 41 49 4e 20 52 49 53 45 20 00 00                 MAIN RISE ..

000000eb <LCDFMFreq>:
      eb:	46 4d 20 46 52 45 51 20 00 00                       FM FREQ ..

000000f5 <LCDFMDepth>:
      f5:	46 4d 20 44 45 50 54 48 20 00 00                    FM DEPTH ..

00000100 <LCDFMDecay>:
     100:	46 4d 20 44 45 43 41 59 20 00 00                    FM DECAY ..

0000010b <LcdCustomChar>:
     10b:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     11b:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     12b:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     13b:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	13 e0       	ldi	r17, 0x03	; 3
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	ee e1       	ldi	r30, 0x1E	; 30
     160:	f7 e2       	ldi	r31, 0x27	; 39
     162:	02 c0       	rjmp	.+4      	; 0x168 <.do_copy_data_start>

00000164 <.do_copy_data_loop>:
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0

00000168 <.do_copy_data_start>:
     168:	aa 33       	cpi	r26, 0x3A	; 58
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <.do_copy_data_loop>

0000016e <__do_clear_bss>:
     16e:	15 e0       	ldi	r17, 0x05	; 5
     170:	aa e3       	ldi	r26, 0x3A	; 58
     172:	b3 e0       	ldi	r27, 0x03	; 3
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a2 32       	cpi	r26, 0x22	; 34
     17a:	b1 07       	cpc	r27, r17
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
     182:	0c 94 8d 13 	jmp	0x271a	; 0x271a <_exit>

00000186 <__bad_interrupt>:
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018a <__vector_9>:
	TCCR2B = 0;
} 

// Every 1ms
volatile uint16_t mscount = 0;
ISR (TIMER2_COMPA_vect){
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	5f 93       	push	r21
     196:	6f 93       	push	r22
     198:	7f 93       	push	r23
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	af 93       	push	r26
     1a0:	bf 93       	push	r27
	//KeypadDebounce();
	mscount++;
     1a2:	80 91 3d 03 	lds	r24, 0x033D
     1a6:	90 91 3e 03 	lds	r25, 0x033E
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	90 93 3e 03 	sts	0x033E, r25
     1b0:	80 93 3d 03 	sts	0x033D, r24
	if(!(mscount % 1100)) {
     1b4:	80 91 3d 03 	lds	r24, 0x033D
     1b8:	90 91 3e 03 	lds	r25, 0x033E
     1bc:	6c e4       	ldi	r22, 0x4C	; 76
     1be:	74 e0       	ldi	r23, 0x04	; 4
     1c0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodhi4>
     1c4:	89 2b       	or	r24, r25
     1c6:	19 f4       	brne	.+6      	; 0x1ce <__vector_9+0x44>
		pluck = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 a9 03 	sts	0x03A9, r24
	}
}
     1ce:	bf 91       	pop	r27
     1d0:	af 91       	pop	r26
     1d2:	9f 91       	pop	r25
     1d4:	8f 91       	pop	r24
     1d6:	7f 91       	pop	r23
     1d8:	6f 91       	pop	r22
     1da:	5f 91       	pop	r21
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <random8Bits>:
	sprintf(LCDBuffer, "%d", voice);
	LCDstring(LCDBuffer, 1);
	*/
}

uint8_t random8Bits(void){
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
	bit0 = (noiseGen & bit27) > 0;
     1ee:	80 91 14 02 	lds	r24, 0x0214
     1f2:	90 91 15 02 	lds	r25, 0x0215
     1f6:	a0 91 16 02 	lds	r26, 0x0216
     1fa:	b0 91 17 02 	lds	r27, 0x0217
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	7b e0       	ldi	r23, 0x0B	; 11
     204:	16 95       	lsr	r17
     206:	07 95       	ror	r16
     208:	f7 94       	ror	r15
     20a:	e7 94       	ror	r14
     20c:	7a 95       	dec	r23
     20e:	d1 f7       	brne	.-12     	; 0x204 <random8Bits+0x1e>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	e2 22       	and	r14, r18
     214:	e0 92 04 05 	sts	0x0504, r14
	bit1 = (noiseGen & bit30) > 0;
     218:	9c 01       	movw	r18, r24
     21a:	ad 01       	movw	r20, r26
     21c:	6e e0       	ldi	r22, 0x0E	; 14
     21e:	56 95       	lsr	r21
     220:	47 95       	ror	r20
     222:	37 95       	ror	r19
     224:	27 95       	ror	r18
     226:	6a 95       	dec	r22
     228:	d1 f7       	brne	.-12     	; 0x21e <random8Bits+0x38>
     22a:	21 70       	andi	r18, 0x01	; 1
     22c:	20 93 be 03 	sts	0x03BE, r18
	noiseGen <<= 1;
	noiseGen += bit0 ^ bit1;
     230:	2e 25       	eor	r18, r14
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	aa 1f       	adc	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	82 0f       	add	r24, r18
     23c:	91 1d       	adc	r25, r1
     23e:	a1 1d       	adc	r26, r1
     240:	b1 1d       	adc	r27, r1
     242:	80 93 14 02 	sts	0x0214, r24
     246:	90 93 15 02 	sts	0x0215, r25
     24a:	a0 93 16 02 	sts	0x0216, r26
     24e:	b0 93 17 02 	sts	0x0217, r27
	return noiseGen & 0x7f;

}
     252:	8f 77       	andi	r24, 0x7F	; 127
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	08 95       	ret

0000025e <updateManual>:

void updateManual(void){

}
     25e:	08 95       	ret

00000260 <setNextNote>:
	updateLCD();
	sampling = (state == MAIN_SCREEN);
}

//set the next note to play
void setNextNote(void){
     260:	1f 93       	push	r17
	uint8_t nextNote = 0;
	uint8_t rnd = random8Bits();
     262:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <random8Bits>
     266:	98 2f       	mov	r25, r24
	uint8_t nextNoteFound = 0;
	switch (seqId){
     268:	80 91 3c 03 	lds	r24, 0x033C
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	11 f1       	breq	.+68     	; 0x2b4 <setNextNote+0x54>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	68 f1       	brcs	.+90     	; 0x2ce <setNextNote+0x6e>
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	89 f0       	breq	.+34     	; 0x29a <setNextNote+0x3a>
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	11 f0       	breq	.+4      	; 0x280 <setNextNote+0x20>
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	53 c0       	rjmp	.+166    	; 0x326 <setNextNote+0xc6>
			}
			break;
		
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
     280:	80 91 18 05 	lds	r24, 0x0518
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	43 e0       	ldi	r20, 0x03	; 3
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	4a 95       	dec	r20
     290:	e1 f7       	brne	.-8      	; 0x28a <setNextNote+0x2a>
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	2c 56       	subi	r18, 0x6C	; 108
     296:	3e 4f       	sbci	r19, 0xFE	; 254
     298:	40 c0       	rjmp	.+128    	; 0x31a <setNextNote+0xba>
			}
			break;

		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
     29a:	80 91 18 05 	lds	r24, 0x0518
     29e:	28 2f       	mov	r18, r24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	8a 95       	dec	r24
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <setNextNote+0x44>
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	2c 5a       	subi	r18, 0xAC	; 172
     2b0:	3e 4f       	sbci	r19, 0xFE	; 254
     2b2:	2b c0       	rjmp	.+86     	; 0x30a <setNextNote+0xaa>
			}
			break;

		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
     2b4:	80 91 18 05 	lds	r24, 0x0518
     2b8:	28 2f       	mov	r18, r24
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	13 e0       	ldi	r17, 0x03	; 3
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	1a 95       	dec	r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <setNextNote+0x5e>
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	2c 52       	subi	r18, 0x2C	; 44
     2ca:	3e 4f       	sbci	r19, 0xFE	; 254
     2cc:	16 c0       	rjmp	.+44     	; 0x2fa <setNextNote+0x9a>
	uint8_t rnd = random8Bits();
	uint8_t nextNoteFound = 0;
	switch (seqId){
		case 0:
			while (!nextNoteFound){
				if (rnd <= ascendingMarkov[curNote * 8 + nextNote]){
     2ce:	80 91 18 05 	lds	r24, 0x0518
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	b3 e0       	ldi	r27, 0x03	; 3
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	ba 95       	dec	r27
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <setNextNote+0x78>
     2e0:	10 e0       	ldi	r17, 0x00	; 0
     2e2:	2c 5e       	subi	r18, 0xEC	; 236
     2e4:	3e 4f       	sbci	r19, 0xFE	; 254
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <setNextNote+0x8a>
					nextNoteFound = 1;
				} else {
					nextNote++;
     2e8:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t rnd = random8Bits();
	uint8_t nextNoteFound = 0;
	switch (seqId){
		case 0:
			while (!nextNoteFound){
				if (rnd <= ascendingMarkov[curNote * 8 + nextNote]){
     2ea:	f9 01       	movw	r30, r18
     2ec:	e1 0f       	add	r30, r17
     2ee:	f1 1d       	adc	r31, r1
     2f0:	80 81       	ld	r24, Z
     2f2:	89 17       	cp	r24, r25
     2f4:	c0 f4       	brcc	.+48     	; 0x326 <setNextNote+0xc6>
     2f6:	f8 cf       	rjmp	.-16     	; 0x2e8 <setNextNote+0x88>
		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     2f8:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;

		case 1:
			while (!nextNoteFound){
				if (rnd <= descendingMarkov[curNote * 8 + nextNote]){
     2fa:	f9 01       	movw	r30, r18
     2fc:	e1 0f       	add	r30, r17
     2fe:	f1 1d       	adc	r31, r1
     300:	80 81       	ld	r24, Z
     302:	89 17       	cp	r24, r25
     304:	80 f4       	brcc	.+32     	; 0x326 <setNextNote+0xc6>
     306:	f8 cf       	rjmp	.-16     	; 0x2f8 <setNextNote+0x98>
		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     308:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;

		case 2:
			while (!nextNoteFound){
				if (rnd <= uniformMarkov[curNote * 8 + nextNote]){
     30a:	f9 01       	movw	r30, r18
     30c:	e1 0f       	add	r30, r17
     30e:	f1 1d       	adc	r31, r1
     310:	80 81       	ld	r24, Z
     312:	89 17       	cp	r24, r25
     314:	40 f4       	brcc	.+16     	; 0x326 <setNextNote+0xc6>
     316:	f8 cf       	rjmp	.-16     	; 0x308 <setNextNote+0xa8>
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
					nextNoteFound = 1;
				} else {
					nextNote++;
     318:	1f 5f       	subi	r17, 0xFF	; 255
			}
			break;
		
		case 3:
			while (!nextNoteFound){
				if (rnd <= chaoticMarkov[curNote * 8 + nextNote]){
     31a:	f9 01       	movw	r30, r18
     31c:	e1 0f       	add	r30, r17
     31e:	f1 1d       	adc	r31, r1
     320:	80 81       	ld	r24, Z
     322:	89 17       	cp	r24, r25
     324:	c8 f3       	brcs	.-14     	; 0x318 <setNextNote+0xb8>
				}
			}
			break;
	}
	for(uint8_t i = 0; i < NUM_VOICES; i++) {
		inc_main[i] = (int)(8.192 * markovFrequencies[nextNote]);
     326:	e1 2f       	mov	r30, r17
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	ec 5f       	subi	r30, 0xFC	; 252
     330:	fe 4f       	sbci	r31, 0xFE	; 254
     332:	60 81       	ld	r22, Z
     334:	71 81       	ldd	r23, Z+1	; 0x01
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__floatunsisf>
     33e:	2f e6       	ldi	r18, 0x6F	; 111
     340:	32 e1       	ldi	r19, 0x12	; 18
     342:	43 e0       	ldi	r20, 0x03	; 3
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     34a:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fixsfsi>
     34e:	70 93 b7 03 	sts	0x03B7, r23
     352:	60 93 b6 03 	sts	0x03B6, r22
     356:	70 93 b9 03 	sts	0x03B9, r23
     35a:	60 93 b8 03 	sts	0x03B8, r22
     35e:	70 93 bb 03 	sts	0x03BB, r23
     362:	60 93 ba 03 	sts	0x03BA, r22
     366:	70 93 bd 03 	sts	0x03BD, r23
     36a:	60 93 bc 03 	sts	0x03BC, r22
	}
	curNote = nextNote;
     36e:	10 93 18 05 	sts	0x0518, r17
}
     372:	1f 91       	pop	r17
     374:	08 95       	ret

00000376 <sample>:
void nextState(void);
uint8_t sample(uint8_t);
uint8_t random8Bits(void);

//returns OCR0A
uint8_t sample(uint8_t idx) {
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	f8 2e       	mov	r15, r24

	// compute exponential attack and decay of amplitude
	// the (time & 0x0ff) slows down the decay computation by 256 times		
	if (!(time & 0x0ff)) {
     382:	80 91 06 05 	lds	r24, 0x0506
     386:	90 91 07 05 	lds	r25, 0x0507
     38a:	88 23       	and	r24, r24
     38c:	09 f0       	breq	.+2      	; 0x390 <sample+0x1a>
     38e:	48 c0       	rjmp	.+144    	; 0x420 <sample+0xaa>
		amp_fall_main[idx] = amp_fall_main[idx] - (amp_fall_main[idx]>>decay_main[idx]);
     390:	0f 2d       	mov	r16, r15
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	a8 01       	movw	r20, r16
     396:	44 0f       	add	r20, r20
     398:	55 1f       	adc	r21, r21
     39a:	da 01       	movw	r26, r20
     39c:	a5 53       	subi	r26, 0x35	; 53
     39e:	bc 4f       	sbci	r27, 0xFC	; 252
     3a0:	2d 91       	ld	r18, X+
     3a2:	3c 91       	ld	r19, X
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	8d 91       	ld	r24, X+
     3a8:	9c 91       	ld	r25, X
     3aa:	11 97       	sbiw	r26, 0x01	; 1
     3ac:	f8 01       	movw	r30, r16
     3ae:	ec 55       	subi	r30, 0x5C	; 92
     3b0:	fc 4f       	sbci	r31, 0xFC	; 252
     3b2:	60 81       	ld	r22, Z
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <sample+0x44>
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	6a 95       	dec	r22
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <sample+0x40>
     3be:	28 1b       	sub	r18, r24
     3c0:	39 0b       	sbc	r19, r25
     3c2:	11 96       	adiw	r26, 0x01	; 1
     3c4:	3c 93       	st	X, r19
     3c6:	2e 93       	st	-X, r18
		rise_phase_main[idx] = rise_phase_main[idx] - (rise_phase_main[idx]>>rise_main[idx]);
     3c8:	da 01       	movw	r26, r20
     3ca:	aa 52       	subi	r26, 0x2A	; 42
     3cc:	bb 4f       	sbci	r27, 0xFB	; 251
     3ce:	2d 91       	ld	r18, X+
     3d0:	3c 91       	ld	r19, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	f8 01       	movw	r30, r16
     3dc:	e8 56       	subi	r30, 0x68	; 104
     3de:	fc 4f       	sbci	r31, 0xFC	; 252
     3e0:	60 81       	ld	r22, Z
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <sample+0x72>
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <sample+0x6e>
     3ec:	28 1b       	sub	r18, r24
     3ee:	39 0b       	sbc	r19, r25
     3f0:	11 96       	adiw	r26, 0x01	; 1
     3f2:	3c 93       	st	X, r19
     3f4:	2e 93       	st	-X, r18
		// compute exponential decay of FM depth of modulation
		amp_fm1[idx] = amp_fm1[idx] - (amp_fm1[idx]>>decay_fm1[idx]) ;
     3f6:	46 55       	subi	r20, 0x56	; 86
     3f8:	5c 4f       	sbci	r21, 0xFC	; 252
     3fa:	fa 01       	movw	r30, r20
     3fc:	20 81       	ld	r18, Z
     3fe:	31 81       	ldd	r19, Z+1	; 0x01
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	0f 5e       	subi	r16, 0xEF	; 239
     406:	1a 4f       	sbci	r17, 0xFA	; 250
     408:	f8 01       	movw	r30, r16
     40a:	60 81       	ld	r22, Z
     40c:	02 c0       	rjmp	.+4      	; 0x412 <sample+0x9c>
     40e:	96 95       	lsr	r25
     410:	87 95       	ror	r24
     412:	6a 95       	dec	r22
     414:	e2 f7       	brpl	.-8      	; 0x40e <sample+0x98>
     416:	28 1b       	sub	r18, r24
     418:	39 0b       	sbc	r19, r25
     41a:	fa 01       	movw	r30, r20
     41c:	31 83       	std	Z+1, r19	; 0x01
     41e:	20 83       	st	Z, r18
	}

	// form (1-exp(-t/tau)) for the attack phase
	amp_rise_main[idx] =  max_amp - rise_phase_main[idx];
     420:	cf 2d       	mov	r28, r15
     422:	d0 e0       	ldi	r29, 0x00	; 0
     424:	de 01       	movw	r26, r28
     426:	aa 0f       	add	r26, r26
     428:	bb 1f       	adc	r27, r27
     42a:	fd 01       	movw	r30, r26
     42c:	ea 52       	subi	r30, 0x2A	; 42
     42e:	fb 4f       	sbci	r31, 0xFB	; 251
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	9f e7       	ldi	r25, 0x7F	; 127
     438:	82 1b       	sub	r24, r18
     43a:	93 0b       	sbc	r25, r19
     43c:	fd 01       	movw	r30, r26
     43e:	e7 5f       	subi	r30, 0xF7	; 247
     440:	fa 4f       	sbci	r31, 0xFA	; 250
     442:	91 83       	std	Z+1, r25	; 0x01
     444:	80 83       	st	Z, r24
	// product of rise and fall exponentials is the amplitude envelope
	amp_main[idx] = (amp_rise_main[idx]>>8) * (amp_fall_main[idx]>>8) ;
     446:	20 81       	ld	r18, Z
     448:	31 81       	ldd	r19, Z+1	; 0x01
     44a:	fd 01       	movw	r30, r26
     44c:	e5 53       	subi	r30, 0x35	; 53
     44e:	fc 4f       	sbci	r31, 0xFC	; 252
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	89 2f       	mov	r24, r25
     456:	99 27       	eor	r25, r25
     458:	23 2f       	mov	r18, r19
     45a:	33 27       	eor	r19, r19
     45c:	ac 01       	movw	r20, r24
     45e:	42 9f       	mul	r20, r18
     460:	c0 01       	movw	r24, r0
     462:	43 9f       	mul	r20, r19
     464:	90 0d       	add	r25, r0
     466:	52 9f       	mul	r21, r18
     468:	90 0d       	add	r25, r0
     46a:	11 24       	eor	r1, r1
     46c:	a6 50       	subi	r26, 0x06	; 6
     46e:	bb 4f       	sbci	r27, 0xFB	; 251
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	9c 93       	st	X, r25
     474:	8e 93       	st	-X, r24

	// Init the synth
	if (pluck==1) {
     476:	80 91 a9 03 	lds	r24, 0x03A9
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	81 f5       	brne	.+96     	; 0x4de <sample+0x168>
		if(idx == 0) {
     47e:	ff 20       	and	r15, r15
     480:	11 f4       	brne	.+4      	; 0x486 <sample+0x110>
			setNextNote();
     482:	0e 94 30 01 	call	0x260	; 0x260 <setNextNote>
		}
		amp_fall_main[idx] = max_amp; 
     486:	fe 01       	movw	r30, r28
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	df 01       	movw	r26, r30
     48e:	a5 53       	subi	r26, 0x35	; 53
     490:	bc 4f       	sbci	r27, 0xFC	; 252
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	9f e7       	ldi	r25, 0x7F	; 127
     496:	11 96       	adiw	r26, 0x01	; 1
     498:	9c 93       	st	X, r25
     49a:	8e 93       	st	-X, r24
		rise_phase_main[idx] = max_amp ;
     49c:	df 01       	movw	r26, r30
     49e:	aa 52       	subi	r26, 0x2A	; 42
     4a0:	bb 4f       	sbci	r27, 0xFB	; 251
     4a2:	11 96       	adiw	r26, 0x01	; 1
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
		amp_rise_main[idx] = 0 ;
     4a8:	df 01       	movw	r26, r30
     4aa:	a7 5f       	subi	r26, 0xF7	; 247
     4ac:	ba 4f       	sbci	r27, 0xFA	; 250
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	1c 92       	st	X, r1
     4b2:	1e 92       	st	-X, r1
		amp_fm1[idx] = max_amp ;
     4b4:	df 01       	movw	r26, r30
     4b6:	a6 55       	subi	r26, 0x56	; 86
     4b8:	bc 4f       	sbci	r27, 0xFC	; 252
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	9c 93       	st	X, r25
     4be:	8e 93       	st	-X, r24
		// phase lock the synth
		acc_fm1[idx] = 0 ;
     4c0:	df 01       	movw	r26, r30
     4c2:	a0 54       	subi	r26, 0x40	; 64
     4c4:	bc 4f       	sbci	r27, 0xFC	; 252
     4c6:	11 96       	adiw	r26, 0x01	; 1
     4c8:	1c 92       	st	X, r1
     4ca:	1e 92       	st	-X, r1
		acc_main[idx] = 0;
     4cc:	e4 56       	subi	r30, 0x64	; 100
     4ce:	fc 4f       	sbci	r31, 0xFC	; 252
     4d0:	11 82       	std	Z+1, r1	; 0x01
     4d2:	10 82       	st	Z, r1

		//DIRTY UGLY HACK FIX THIS STUPID
		if (idx == (NUM_VOICES - 1)) {
     4d4:	53 e0       	ldi	r21, 0x03	; 3
     4d6:	f5 16       	cp	r15, r21
     4d8:	11 f4       	brne	.+4      	; 0x4de <sample+0x168>
			pluck = 0;
     4da:	10 92 a9 03 	sts	0x03A9, r1
		}

	}

	//the FM DDR -- feeds into final DDR
	acc_fm1[idx] = acc_fm1[idx] + inc_fm1[idx] ;
     4de:	ae 01       	movw	r20, r28
     4e0:	44 0f       	add	r20, r20
     4e2:	55 1f       	adc	r21, r21
     4e4:	da 01       	movw	r26, r20
     4e6:	a0 54       	subi	r26, 0x40	; 64
     4e8:	bc 4f       	sbci	r27, 0xFC	; 252
     4ea:	2d 91       	ld	r18, X+
     4ec:	3c 91       	ld	r19, X
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	fa 01       	movw	r30, r20
     4f2:	ef 50       	subi	r30, 0x0F	; 15
     4f4:	fb 4f       	sbci	r31, 0xFB	; 251
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	9c 93       	st	X, r25
     502:	8e 93       	st	-X, r24
	high_fm1 = (char)(acc_fm1[idx] >> 8) ;
     504:	8d 91       	ld	r24, X+
     506:	9c 91       	ld	r25, X
     508:	90 93 17 05 	sts	0x0517, r25
	fm1 = sineTable[high_fm1] ;
     50c:	e0 91 17 05 	lds	r30, 0x0517
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	ea 52       	subi	r30, 0x2A	; 42
     514:	fc 4f       	sbci	r31, 0xFC	; 252
     516:	60 81       	ld	r22, Z
     518:	60 93 c8 03 	sts	0x03C8, r22

	//the final output DDR 
	// phase accum = main_DDR_freq + FM_DDR * (FM amplitude)
	acc_main[idx] = acc_main[idx] + (inc_main[idx] + (fm1*(amp_fm1[idx]>>depth_fm1[idx]))) ;
     51c:	da 01       	movw	r26, r20
     51e:	a4 56       	subi	r26, 0x64	; 100
     520:	bc 4f       	sbci	r27, 0xFC	; 252
     522:	0d 91       	ld	r16, X+
     524:	1c 91       	ld	r17, X
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	fa 01       	movw	r30, r20
     52a:	ea 54       	subi	r30, 0x4A	; 74
     52c:	fc 4f       	sbci	r31, 0xFC	; 252
     52e:	20 81       	ld	r18, Z
     530:	31 81       	ldd	r19, Z+1	; 0x01
     532:	fa 01       	movw	r30, r20
     534:	e6 55       	subi	r30, 0x56	; 86
     536:	fc 4f       	sbci	r31, 0xFC	; 252
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	ce 54       	subi	r28, 0x4E	; 78
     53e:	dc 4f       	sbci	r29, 0xFC	; 252
     540:	e8 81       	ld	r30, Y
     542:	20 0f       	add	r18, r16
     544:	31 1f       	adc	r19, r17
     546:	02 c0       	rjmp	.+4      	; 0x54c <sample+0x1d6>
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	ea 95       	dec	r30
     54e:	e2 f7       	brpl	.-8      	; 0x548 <sample+0x1d2>
     550:	77 27       	eor	r23, r23
     552:	67 fd       	sbrc	r22, 7
     554:	70 95       	com	r23
     556:	fc 01       	movw	r30, r24
     558:	e6 9f       	mul	r30, r22
     55a:	c0 01       	movw	r24, r0
     55c:	e7 9f       	mul	r30, r23
     55e:	90 0d       	add	r25, r0
     560:	f6 9f       	mul	r31, r22
     562:	90 0d       	add	r25, r0
     564:	11 24       	eor	r1, r1
     566:	28 0f       	add	r18, r24
     568:	39 1f       	adc	r19, r25
     56a:	11 96       	adiw	r26, 0x01	; 1
     56c:	3c 93       	st	X, r19
     56e:	2e 93       	st	-X, r18
	high_main = (char)(acc_main[idx] >> 8) ;
     570:	8d 91       	ld	r24, X+
     572:	9c 91       	ld	r25, X
     574:	90 93 03 05 	sts	0x0503, r25
	
	// output the wavefrom sample
	// scale amplitude to use only high byte and shift into range
	// 0 to 255
	return 128 + (((amp_main[idx]>>8) * (int)sineTable[high_main])>>7) ;
     578:	46 50       	subi	r20, 0x06	; 6
     57a:	5b 4f       	sbci	r21, 0xFB	; 251
     57c:	fa 01       	movw	r30, r20
     57e:	20 81       	ld	r18, Z
     580:	31 81       	ldd	r19, Z+1	; 0x01
     582:	e0 91 03 05 	lds	r30, 0x0503
     586:	23 2f       	mov	r18, r19
     588:	33 27       	eor	r19, r19
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ea 52       	subi	r30, 0x2A	; 42
     58e:	fc 4f       	sbci	r31, 0xFC	; 252
     590:	80 81       	ld	r24, Z
     592:	99 27       	eor	r25, r25
     594:	87 fd       	sbrc	r24, 7
     596:	90 95       	com	r25
     598:	ac 01       	movw	r20, r24
     59a:	24 9f       	mul	r18, r20
     59c:	c0 01       	movw	r24, r0
     59e:	25 9f       	mul	r18, r21
     5a0:	90 0d       	add	r25, r0
     5a2:	34 9f       	mul	r19, r20
     5a4:	90 0d       	add	r25, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	88 0f       	add	r24, r24
     5aa:	89 2f       	mov	r24, r25
     5ac:	88 1f       	adc	r24, r24
     5ae:	99 0b       	sbc	r25, r25
     5b0:	91 95       	neg	r25
}
     5b2:	80 58       	subi	r24, 0x80	; 128
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	08 95       	ret

000005c0 <__vector_13>:

ISR (TIMER1_COMPA_vect) // Fs = 12000
{ 
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	2f 93       	push	r18
     5d0:	3f 93       	push	r19
     5d2:	4f 93       	push	r20
     5d4:	5f 93       	push	r21
     5d6:	6f 93       	push	r22
     5d8:	7f 93       	push	r23
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	af 93       	push	r26
     5e0:	bf 93       	push	r27
     5e2:	ef 93       	push	r30
     5e4:	ff 93       	push	r31
	// turn on timer for profiling
	TCNT2 = 0; TCCR2B = 2;
     5e6:	10 92 b2 00 	sts	0x00B2, r1
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 b1 00 	sts	0x00B1, r24
	if(sampling) {
     5f0:	80 91 03 01 	lds	r24, 0x0103
     5f4:	88 23       	and	r24, r24
     5f6:	61 f0       	breq	.+24     	; 0x610 <__vector_13+0x50>
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	00 e0       	ldi	r16, 0x00	; 0
		// Set Sample
		uint8_t idx;
		uint8_t voiceAccum = 0;
		for (idx=0; idx < NUM_VOICES; idx++){
			voiceAccum += sample(idx) >> 2;
     5fc:	81 2f       	mov	r24, r17
     5fe:	0e 94 bb 01 	call	0x376	; 0x376 <sample>
     602:	86 95       	lsr	r24
     604:	86 95       	lsr	r24
     606:	08 0f       	add	r16, r24
	TCNT2 = 0; TCCR2B = 2;
	if(sampling) {
		// Set Sample
		uint8_t idx;
		uint8_t voiceAccum = 0;
		for (idx=0; idx < NUM_VOICES; idx++){
     608:	1f 5f       	subi	r17, 0xFF	; 255
     60a:	14 30       	cpi	r17, 0x04	; 4
     60c:	b9 f7       	brne	.-18     	; 0x5fc <__vector_13+0x3c>
			voiceAccum += sample(idx) >> 2;
		}
		OCR0A = voiceAccum;
     60e:	07 bd       	out	0x27, r16	; 39
		//OCR0A = sample(1);
	}
	
	time++;     //ticks at 12 KHz 
     610:	80 91 06 05 	lds	r24, 0x0506
     614:	90 91 07 05 	lds	r25, 0x0507
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	90 93 07 05 	sts	0x0507, r25
     61e:	80 93 06 05 	sts	0x0506, r24
	// profiling 
	TCCR2B = 0;
     622:	10 92 b1 00 	sts	0x00B1, r1
} 
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <nextState>:
}

// update to next state if key is pressed
uint8_t waitingForInput = 0;
unsigned int lastInt = 0;
void nextState(void){
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
	if(waitingForInput) {
     650:	80 91 3f 03 	lds	r24, 0x033F
     654:	88 23       	and	r24, r24
     656:	99 f1       	breq	.+102    	; 0x6be <nextState+0x72>
		// output input to screen
		//unsigned int in = KeypadInt();
		unsigned int in = 0;
		if(lastInt != in) {
     658:	80 91 40 03 	lds	r24, 0x0340
     65c:	90 91 41 03 	lds	r25, 0x0341
     660:	89 2b       	or	r24, r25
     662:	69 f1       	breq	.+90     	; 0x6be <nextState+0x72>
			LCDGotoXY(0, 0);
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", in);
     66c:	00 d0       	rcall	.+0      	; 0x66e <nextState+0x22>
     66e:	00 d0       	rcall	.+0      	; 0x670 <nextState+0x24>
     670:	00 d0       	rcall	.+0      	; 0x672 <nextState+0x26>
     672:	ed b7       	in	r30, 0x3d	; 61
     674:	fe b7       	in	r31, 0x3e	; 62
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	0e ed       	ldi	r16, 0xDE	; 222
     67a:	14 e0       	ldi	r17, 0x04	; 4
     67c:	ad b7       	in	r26, 0x3d	; 61
     67e:	be b7       	in	r27, 0x3e	; 62
     680:	12 96       	adiw	r26, 0x02	; 2
     682:	1c 93       	st	X, r17
     684:	0e 93       	st	-X, r16
     686:	11 97       	sbiw	r26, 0x01	; 1
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	93 83       	std	Z+3, r25	; 0x03
     68e:	82 83       	std	Z+2, r24	; 0x02
     690:	15 82       	std	Z+5, r1	; 0x05
     692:	14 82       	std	Z+4, r1	; 0x04
     694:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     698:	f8 01       	movw	r30, r16
     69a:	01 90       	ld	r0, Z+
     69c:	00 20       	and	r0, r0
     69e:	e9 f7       	brne	.-6      	; 0x69a <nextState+0x4e>
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	e0 1b       	sub	r30, r16
     6a4:	f1 0b       	sbc	r31, r17
     6a6:	8d b7       	in	r24, 0x3d	; 61
     6a8:	9e b7       	in	r25, 0x3e	; 62
     6aa:	06 96       	adiw	r24, 0x06	; 6
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	9e bf       	out	0x3e, r25	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	8d bf       	out	0x3d, r24	; 61
     6b6:	c8 01       	movw	r24, r16
     6b8:	6e 2f       	mov	r22, r30
     6ba:	0e 94 f3 06 	call	0xde6	; 0xde6 <LCDstring>
				}
				break;
		
		}
	}
}
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <updateLCD>:
}
/////////////////////////////////////////////////////

///////////////////////////////////////////////////// 
//Update the LCD
void updateLCD(void){
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
	LCDclr();
     6c8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCDclr>
	switch (state) {
     6cc:	80 91 ca 03 	lds	r24, 0x03CA
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <updateLCD+0x12>
     6d4:	76 c0       	rjmp	.+236    	; 0x7c2 <updateLCD+0xfe>
     6d6:	85 30       	cpi	r24, 0x05	; 5
     6d8:	50 f4       	brcc	.+20     	; 0x6ee <updateLCD+0x2a>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	11 f1       	breq	.+68     	; 0x722 <updateLCD+0x5e>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	98 f0       	brcs	.+38     	; 0x708 <updateLCD+0x44>
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	61 f1       	breq	.+88     	; 0x73e <updateLCD+0x7a>
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	09 f0       	breq	.+2      	; 0x6ec <updateLCD+0x28>
     6ea:	21 c1       	rjmp	.+578    	; 0x92e <updateLCD+0x26a>
     6ec:	4a c0       	rjmp	.+148    	; 0x782 <updateLCD+0xbe>
     6ee:	86 30       	cpi	r24, 0x06	; 6
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <updateLCD+0x30>
     6f2:	a7 c0       	rjmp	.+334    	; 0x842 <updateLCD+0x17e>
     6f4:	86 30       	cpi	r24, 0x06	; 6
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <updateLCD+0x36>
     6f8:	84 c0       	rjmp	.+264    	; 0x802 <updateLCD+0x13e>
     6fa:	87 30       	cpi	r24, 0x07	; 7
     6fc:	09 f4       	brne	.+2      	; 0x700 <updateLCD+0x3c>
     6fe:	c1 c0       	rjmp	.+386    	; 0x882 <updateLCD+0x1be>
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	09 f0       	breq	.+2      	; 0x706 <updateLCD+0x42>
     704:	14 c1       	rjmp	.+552    	; 0x92e <updateLCD+0x26a>
     706:	dd c0       	rjmp	.+442    	; 0x8c2 <updateLCD+0x1fe>
	 	case MAIN_SCREEN:
			CopyStringtoLCD(LCDHelloTop, 0, 0);
     708:	8e e8       	ldi	r24, 0x8E	; 142
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			CopyStringtoLCD(LCDHelloBot, 0, 1);
     714:	8b e9       	ldi	r24, 0x9B	; 155
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
     720:	06 c1       	rjmp	.+524    	; 0x92e <updateLCD+0x26a>
			break;
		case SET_VIDX:
			CopyStringtoLCD(LCDVoiceId, 0, 1);
     722:	8b eb       	ldi	r24, 0xBB	; 187
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(voiceStrLen, 1);
     72e:	80 91 d3 03 	lds	r24, 0x03D3
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", vidx);
     738:	20 91 3b 03 	lds	r18, 0x033B
     73c:	0d c0       	rjmp	.+26     	; 0x758 <updateLCD+0x94>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_SEQUENCE:
			CopyStringtoLCD(LCDSequenceId, 0, 1);
     73e:	8d ea       	ldi	r24, 0xAD	; 173
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(seqStrLen, 1);
     74a:	80 91 c9 03 	lds	r24, 0x03C9
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", seqId);
     754:	20 91 3c 03 	lds	r18, 0x033C
     758:	00 d0       	rcall	.+0      	; 0x75a <updateLCD+0x96>
     75a:	00 d0       	rcall	.+0      	; 0x75c <updateLCD+0x98>
     75c:	00 d0       	rcall	.+0      	; 0x75e <updateLCD+0x9a>
     75e:	ed b7       	in	r30, 0x3d	; 61
     760:	fe b7       	in	r31, 0x3e	; 62
     762:	31 96       	adiw	r30, 0x01	; 1
     764:	0e ed       	ldi	r16, 0xDE	; 222
     766:	14 e0       	ldi	r17, 0x04	; 4
     768:	ad b7       	in	r26, 0x3d	; 61
     76a:	be b7       	in	r27, 0x3e	; 62
     76c:	12 96       	adiw	r26, 0x02	; 2
     76e:	1c 93       	st	X, r17
     770:	0e 93       	st	-X, r16
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	93 83       	std	Z+3, r25	; 0x03
     77a:	82 83       	std	Z+2, r24	; 0x02
     77c:	24 83       	std	Z+4, r18	; 0x04
     77e:	15 82       	std	Z+5, r1	; 0x05
     780:	c1 c0       	rjmp	.+386    	; 0x904 <updateLCD+0x240>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_MAIN:
			CopyStringtoLCD(LCDMainFrequency, 0, 1);
     782:	86 ec       	ldi	r24, 0xC6	; 198
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(mainFreqStrLen, 1);
     78e:	80 91 f0 04 	lds	r24, 0x04F0
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_main);
     798:	00 d0       	rcall	.+0      	; 0x79a <updateLCD+0xd6>
     79a:	00 d0       	rcall	.+0      	; 0x79c <updateLCD+0xd8>
     79c:	00 d0       	rcall	.+0      	; 0x79e <updateLCD+0xda>
     79e:	ed b7       	in	r30, 0x3d	; 61
     7a0:	fe b7       	in	r31, 0x3e	; 62
     7a2:	31 96       	adiw	r30, 0x01	; 1
     7a4:	0e ed       	ldi	r16, 0xDE	; 222
     7a6:	14 e0       	ldi	r17, 0x04	; 4
     7a8:	ad b7       	in	r26, 0x3d	; 61
     7aa:	be b7       	in	r27, 0x3e	; 62
     7ac:	12 96       	adiw	r26, 0x02	; 2
     7ae:	1c 93       	st	X, r17
     7b0:	0e 93       	st	-X, r16
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	93 83       	std	Z+3, r25	; 0x03
     7ba:	82 83       	std	Z+2, r24	; 0x02
     7bc:	86 eb       	ldi	r24, 0xB6	; 182
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	9f c0       	rjmp	.+318    	; 0x900 <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_MAIN:
			CopyStringtoLCD(LCDMainDecay, 0, 1);
     7c2:	82 ed       	ldi	r24, 0xD2	; 210
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(mainDecayStrLen, 1);
     7ce:	80 91 a8 03 	lds	r24, 0x03A8
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_main);
     7d8:	00 d0       	rcall	.+0      	; 0x7da <updateLCD+0x116>
     7da:	00 d0       	rcall	.+0      	; 0x7dc <updateLCD+0x118>
     7dc:	00 d0       	rcall	.+0      	; 0x7de <updateLCD+0x11a>
     7de:	ed b7       	in	r30, 0x3d	; 61
     7e0:	fe b7       	in	r31, 0x3e	; 62
     7e2:	31 96       	adiw	r30, 0x01	; 1
     7e4:	0e ed       	ldi	r16, 0xDE	; 222
     7e6:	14 e0       	ldi	r17, 0x04	; 4
     7e8:	ad b7       	in	r26, 0x3d	; 61
     7ea:	be b7       	in	r27, 0x3e	; 62
     7ec:	12 96       	adiw	r26, 0x02	; 2
     7ee:	1c 93       	st	X, r17
     7f0:	0e 93       	st	-X, r16
     7f2:	11 97       	sbiw	r26, 0x01	; 1
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	93 83       	std	Z+3, r25	; 0x03
     7fa:	82 83       	std	Z+2, r24	; 0x02
     7fc:	84 ea       	ldi	r24, 0xA4	; 164
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	7f c0       	rjmp	.+254    	; 0x900 <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_RISE_MAIN:
			CopyStringtoLCD(LCDMainRise, 0, 1);
     802:	8f ed       	ldi	r24, 0xDF	; 223
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(mainRiseStrLen, 1);
     80e:	80 91 15 05 	lds	r24, 0x0515
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", rise_main);
     818:	00 d0       	rcall	.+0      	; 0x81a <updateLCD+0x156>
     81a:	00 d0       	rcall	.+0      	; 0x81c <updateLCD+0x158>
     81c:	00 d0       	rcall	.+0      	; 0x81e <updateLCD+0x15a>
     81e:	ed b7       	in	r30, 0x3d	; 61
     820:	fe b7       	in	r31, 0x3e	; 62
     822:	31 96       	adiw	r30, 0x01	; 1
     824:	0e ed       	ldi	r16, 0xDE	; 222
     826:	14 e0       	ldi	r17, 0x04	; 4
     828:	ad b7       	in	r26, 0x3d	; 61
     82a:	be b7       	in	r27, 0x3e	; 62
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	1c 93       	st	X, r17
     830:	0e 93       	st	-X, r16
     832:	11 97       	sbiw	r26, 0x01	; 1
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	93 83       	std	Z+3, r25	; 0x03
     83a:	82 83       	std	Z+2, r24	; 0x02
     83c:	88 e9       	ldi	r24, 0x98	; 152
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	5f c0       	rjmp	.+190    	; 0x900 <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_INC_FM:
			CopyStringtoLCD(LCDFMFreq, 0, 1);
     842:	8b ee       	ldi	r24, 0xEB	; 235
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(fmFreqStrLen, 1);
     84e:	80 91 05 05 	lds	r24, 0x0505
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", inc_fm1);
     858:	00 d0       	rcall	.+0      	; 0x85a <updateLCD+0x196>
     85a:	00 d0       	rcall	.+0      	; 0x85c <updateLCD+0x198>
     85c:	00 d0       	rcall	.+0      	; 0x85e <updateLCD+0x19a>
     85e:	ed b7       	in	r30, 0x3d	; 61
     860:	fe b7       	in	r31, 0x3e	; 62
     862:	31 96       	adiw	r30, 0x01	; 1
     864:	0e ed       	ldi	r16, 0xDE	; 222
     866:	14 e0       	ldi	r17, 0x04	; 4
     868:	ad b7       	in	r26, 0x3d	; 61
     86a:	be b7       	in	r27, 0x3e	; 62
     86c:	12 96       	adiw	r26, 0x02	; 2
     86e:	1c 93       	st	X, r17
     870:	0e 93       	st	-X, r16
     872:	11 97       	sbiw	r26, 0x01	; 1
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	93 83       	std	Z+3, r25	; 0x03
     87a:	82 83       	std	Z+2, r24	; 0x02
     87c:	81 ef       	ldi	r24, 0xF1	; 241
     87e:	94 e0       	ldi	r25, 0x04	; 4
     880:	3f c0       	rjmp	.+126    	; 0x900 <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DEPTH_FM:
			CopyStringtoLCD(LCDFMDepth, 0, 1);
     882:	85 ef       	ldi	r24, 0xF5	; 245
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(fmDepthStrLen, 1);
     88e:	80 91 16 05 	lds	r24, 0x0516
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", depth_fm1);
     898:	00 d0       	rcall	.+0      	; 0x89a <updateLCD+0x1d6>
     89a:	00 d0       	rcall	.+0      	; 0x89c <updateLCD+0x1d8>
     89c:	00 d0       	rcall	.+0      	; 0x89e <updateLCD+0x1da>
     89e:	ed b7       	in	r30, 0x3d	; 61
     8a0:	fe b7       	in	r31, 0x3e	; 62
     8a2:	31 96       	adiw	r30, 0x01	; 1
     8a4:	0e ed       	ldi	r16, 0xDE	; 222
     8a6:	14 e0       	ldi	r17, 0x04	; 4
     8a8:	ad b7       	in	r26, 0x3d	; 61
     8aa:	be b7       	in	r27, 0x3e	; 62
     8ac:	12 96       	adiw	r26, 0x02	; 2
     8ae:	1c 93       	st	X, r17
     8b0:	0e 93       	st	-X, r16
     8b2:	11 97       	sbiw	r26, 0x01	; 1
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	93 83       	std	Z+3, r25	; 0x03
     8ba:	82 83       	std	Z+2, r24	; 0x02
     8bc:	82 eb       	ldi	r24, 0xB2	; 178
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	1f c0       	rjmp	.+62     	; 0x900 <updateLCD+0x23c>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
			break;
		case SET_DECAY_FM:
			CopyStringtoLCD(LCDFMDecay, 0, 1);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
			LCDGotoXY(fmDecayStrLen, 1);
     8ce:	80 91 bf 03 	lds	r24, 0x03BF
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
			sprintf(LCDBuffer, "%d", decay_fm1);
     8d8:	00 d0       	rcall	.+0      	; 0x8da <updateLCD+0x216>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <updateLCD+0x218>
     8dc:	00 d0       	rcall	.+0      	; 0x8de <updateLCD+0x21a>
     8de:	ed b7       	in	r30, 0x3d	; 61
     8e0:	fe b7       	in	r31, 0x3e	; 62
     8e2:	31 96       	adiw	r30, 0x01	; 1
     8e4:	0e ed       	ldi	r16, 0xDE	; 222
     8e6:	14 e0       	ldi	r17, 0x04	; 4
     8e8:	ad b7       	in	r26, 0x3d	; 61
     8ea:	be b7       	in	r27, 0x3e	; 62
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	1c 93       	st	X, r17
     8f0:	0e 93       	st	-X, r16
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	93 83       	std	Z+3, r25	; 0x03
     8fa:	82 83       	std	Z+2, r24	; 0x02
     8fc:	81 e1       	ldi	r24, 0x11	; 17
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	95 83       	std	Z+5, r25	; 0x05
     902:	84 83       	std	Z+4, r24	; 0x04
     904:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sprintf>
			LCDstring(LCDBuffer, strlen(LCDBuffer));
     908:	f8 01       	movw	r30, r16
     90a:	01 90       	ld	r0, Z+
     90c:	00 20       	and	r0, r0
     90e:	e9 f7       	brne	.-6      	; 0x90a <updateLCD+0x246>
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	e0 1b       	sub	r30, r16
     914:	f1 0b       	sbc	r31, r17
     916:	8d b7       	in	r24, 0x3d	; 61
     918:	9e b7       	in	r25, 0x3e	; 62
     91a:	06 96       	adiw	r24, 0x06	; 6
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	9e bf       	out	0x3e, r25	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	8d bf       	out	0x3d, r24	; 61
     926:	c8 01       	movw	r24, r16
     928:	6e 2f       	mov	r22, r30
     92a:	0e 94 f3 06 	call	0xde6	; 0xde6 <LCDstring>
	CopyStringtoLCD(LCDVoice, 0, 0);
	LCDGotoXY(voiceStrLen, 0);
	sprintf(LCDBuffer, "%d", voice);
	LCDstring(LCDBuffer, 1);
	*/
}
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <setState>:
void updateManual(void){

}

void setState(uint8_t s) {
	sampling = 0; // disable sampling when switching states
     934:	10 92 03 01 	sts	0x0103, r1
	state = s;
     938:	80 93 ca 03 	sts	0x03CA, r24
	updateLCD();
     93c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <updateLCD>
	sampling = (state == MAIN_SCREEN);
     940:	80 91 ca 03 	lds	r24, 0x03CA
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	88 23       	and	r24, r24
     948:	09 f4       	brne	.+2      	; 0x94c <setState+0x18>
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 03 01 	sts	0x0103, r25
}
     950:	08 95       	ret

00000952 <initLCD>:
}
  ////////////////////////////////////////////////////

//Initialize the LCD
void initLCD(void){
	LCDinit();	//initialize the display
     952:	0e 94 52 07 	call	0xea4	; 0xea4 <LCDinit>
	LCDcursorOFF();
     956:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCDcursorOFF>
	LCDclr();				//clear the display
     95a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCDclr>
	LCDGotoXY(0,0);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
	CopyStringtoLCD(LCDHelloTop, 0, 0);
     966:	8e e8       	ldi	r24, 0x8E	; 142
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
	CopyStringtoLCD(LCDHelloBot, 0, 1);
     972:	8b e9       	ldi	r24, 0x9B	; 155
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CopyStringtoLCD>
}
     97e:	08 95       	ret

00000980 <Initialize>:
	}
}
 
/////////////////////////////////////////////////////
//Initialization code
void Initialize(void){
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	// make B.3 an output
	DDRB = (1<<PINB3) ;
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	84 b9       	out	0x04, r24	; 4

	//Keypad
	DDRD=0x00;
     98c:	1a b8       	out	0x0a, r1	; 10
     98e:	06 ed       	ldi	r16, 0xD6	; 214
     990:	13 e0       	ldi	r17, 0x03	; 3
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	1f c0       	rjmp	.+62     	; 0x9d6 <Initialize+0x56>
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
     998:	be 01       	movw	r22, r28
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__floatunsisf>
     9a2:	26 e5       	ldi	r18, 0x56	; 86
     9a4:	3e e0       	ldi	r19, 0x0E	; 14
     9a6:	49 ec       	ldi	r20, 0xC9	; 201
     9a8:	50 e4       	ldi	r21, 0x40	; 64
     9aa:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5b e3       	ldi	r21, 0x3B	; 59
     9b6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     9ba:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <sin>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	4e ef       	ldi	r20, 0xFE	; 254
     9c4:	52 e4       	ldi	r21, 0x42	; 66
     9c6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     9ca:	0e 94 0e 09 	call	0x121c	; 0x121c <__fixunssfsi>
     9ce:	f8 01       	movw	r30, r16
     9d0:	61 93       	st	Z+, r22
     9d2:	8f 01       	movw	r16, r30
     9d4:	21 96       	adiw	r28, 0x01	; 1
	//uart_init();
	//stdout = stdin = stderr = &uart_str;
	//fprintf(stdout,"Starting...\n\r");

	// init the sine table
	for (i=0; i<256; i++)
     9d6:	cf 3f       	cpi	r28, 0xFF	; 255
     9d8:	d1 05       	cpc	r29, r1
     9da:	f1 f2       	breq	.-68     	; 0x998 <Initialize+0x18>
     9dc:	e8 f2       	brcs	.-70     	; 0x998 <Initialize+0x18>
     9de:	d0 93 d5 03 	sts	0x03D5, r29
     9e2:	c0 93 d4 03 	sts	0x03D4, r28
	{
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0)) ;
	}  

	// init the time counter
	time=0;
     9e6:	10 92 07 05 	sts	0x0507, r1
     9ea:	10 92 06 05 	sts	0x0506, r1

	// timer 0 runs at full rate
	TCCR0B = 1 ;  
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	85 bd       	out	0x25, r24	; 37
	//turn off timer 0 overflow ISR
	TIMSK0 = 0 ;
     9f2:	10 92 6e 00 	sts	0x006E, r1
	// turn on PWM
	// turn on fast PWM and OC0A output
	// at full clock rate, toggle OC0A (pin B3) 
	// 16 microsec per PWM cycle sample time
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01) ; 
     9f6:	83 ec       	ldi	r24, 0xC3	; 195
     9f8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 128 ; // set PWM to half full scale
     9fa:	80 e8       	ldi	r24, 0x80	; 128
     9fc:	87 bd       	out	0x27, r24	; 39

	/////////// timer 1 ticks at 8000 Hz or 125 microsecs period=2000 ticks
	// timer 1 ticks at 12000 Hz = 1333 ticks
	OCR1A = 1332 ; // 2000 ticks
     9fe:	84 e3       	ldi	r24, 0x34	; 52
     a00:	95 e0       	ldi	r25, 0x05	; 5
     a02:	90 93 89 00 	sts	0x0089, r25
     a06:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A) ;
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = 0x09; 	//full speed; clear-on-match
     a10:	29 e0       	ldi	r18, 0x09	; 9
     a12:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0x00;	//turn off pwm and oc lines
     a16:	10 92 80 00 	sts	0x0080, r1

	//set up timer 2 for 1 mSec ticks
	TIMSK2 = 2;		//turn on timer 2 cmp match ISR
     a1a:	90 93 70 00 	sts	0x0070, r25
	OCR2A = 249;	//set the compare reg to 250 time ticks
     a1e:	89 ef       	ldi	r24, 0xF9	; 249
     a20:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00000010; // turn on clear-on-match
     a24:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000011;	// clock prescalar to 64
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	80 93 b1 00 	sts	0x00B1, r24


	seqStrLen = strlen(LCDSequenceId);
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	80 93 c9 03 	sts	0x03C9, r24
	voiceStrLen = strlen(LCDVoiceId);
     a34:	20 93 d3 03 	sts	0x03D3, r18
	mainFreqStrLen = strlen(LCDMainFrequency);
     a38:	9a e0       	ldi	r25, 0x0A	; 10
     a3a:	90 93 f0 04 	sts	0x04F0, r25
	mainDecayStrLen = strlen(LCDMainDecay);
     a3e:	8b e0       	ldi	r24, 0x0B	; 11
     a40:	80 93 a8 03 	sts	0x03A8, r24
	mainRiseStrLen = strlen(LCDMainRise);
     a44:	90 93 15 05 	sts	0x0515, r25
	fmFreqStrLen = strlen(LCDFMFreq);
     a48:	88 e0       	ldi	r24, 0x08	; 8
     a4a:	80 93 05 05 	sts	0x0505, r24
	fmDepthStrLen = strlen(LCDFMDepth);
     a4e:	20 93 16 05 	sts	0x0516, r18
	fmDecayStrLen = strlen(LCDFMDecay);
     a52:	20 93 bf 03 	sts	0x03BF, r18

	initLCD();
     a56:	0e 94 a9 04 	call	0x952	; 0x952 <initLCD>

	// turn on all ISRs
	sei() ;
     a5a:	78 94       	sei
	///////////////////////////////////////////////////
	// Sound parameters
	///////////////////////////////////////////////////
	// Base frequency
	// 2^16/8000*freq = 8.192*freq
	inc_main[0] = (int)(8.192 * 261) ; 
     a5c:	6a e5       	ldi	r22, 0x5A	; 90
     a5e:	78 e0       	ldi	r23, 0x08	; 8
     a60:	70 93 b7 03 	sts	0x03B7, r23
     a64:	60 93 b6 03 	sts	0x03B6, r22
	// rise and decay SHIFT factor  -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_main[0] = 4 ;
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	80 93 a4 03 	sts	0x03A4, r24
	rise_main[0] = 0 ;
     a6e:	10 92 98 03 	sts	0x0398, r1
	//
	// FM modulation rate -- also a frequency
	inc_fm1[0] = (int)(8.192 * 65) ;
     a72:	84 e1       	ldi	r24, 0x14	; 20
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	90 93 f2 04 	sts	0x04F2, r25
     a7a:	80 93 f1 04 	sts	0x04F1, r24
	// FM modulation depth SHIFT factor 
	// bigger factor implies smaller FM!
	// useful range is 4 to 15
	depth_fm1[0] = 7 ;
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	80 93 b2 03 	sts	0x03B2, r24
	// decay SHIFT factor -- bigger is slower
	// 6 implies tau of 64 cycles
	// 8 implies tau of 256 cycles
	// max value is 8
	decay_fm1[0] = 6 ;
     a84:	26 e0       	ldi	r18, 0x06	; 6
     a86:	20 93 11 05 	sts	0x0511, r18

//Bell/chime
   inc_main[0] = (int)(8.192 * 1440) ; 
     a8a:	e4 e1       	ldi	r30, 0x14	; 20
     a8c:	fe e2       	ldi	r31, 0x2E	; 46
     a8e:	f0 93 b7 03 	sts	0x03B7, r31
     a92:	e0 93 b6 03 	sts	0x03B6, r30
   decay_main[0] = 5 ;
     a96:	45 e0       	ldi	r20, 0x05	; 5
     a98:	40 93 a4 03 	sts	0x03A4, r20
   rise_main[0] = 1 ;
     a9c:	31 e0       	ldi	r19, 0x01	; 1
     a9e:	30 93 98 03 	sts	0x0398, r19
   inc_fm1[0] = (int)(8.192 * 600) ;
     aa2:	83 e3       	ldi	r24, 0x33	; 51
     aa4:	93 e1       	ldi	r25, 0x13	; 19
     aa6:	90 93 f2 04 	sts	0x04F2, r25
     aaa:	80 93 f1 04 	sts	0x04F1, r24
   depth_fm1[0] = 8 ;
     aae:	58 e0       	ldi	r21, 0x08	; 8
     ab0:	50 93 b2 03 	sts	0x03B2, r21
   decay_fm1[0] = 6 ;
     ab4:	20 93 11 05 	sts	0x0511, r18

//Chime:
	inc_main[1] = (int)(8.192 * 261.0) ; 
     ab8:	70 93 b9 03 	sts	0x03B9, r23
     abc:	60 93 b8 03 	sts	0x03B8, r22
	decay_main[1] = 5 ;
     ac0:	40 93 a5 03 	sts	0x03A5, r20
	rise_main[1] = 1 ;
     ac4:	30 93 99 03 	sts	0x0399, r19
	inc_fm1[1] = (int)(8.192 * 350.0) ;
     ac8:	83 e3       	ldi	r24, 0x33	; 51
     aca:	9b e0       	ldi	r25, 0x0B	; 11
     acc:	90 93 f4 04 	sts	0x04F4, r25
     ad0:	80 93 f3 04 	sts	0x04F3, r24
	depth_fm1[1] = 9 ;
     ad4:	89 e0       	ldi	r24, 0x09	; 9
     ad6:	80 93 b3 03 	sts	0x03B3, r24
	decay_fm1[1] = 5 ;
     ada:	40 93 12 05 	sts	0x0512, r20

//Plucked String:
	inc_main[2] = (int)(8.192 * 500.0) ; 
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e1       	ldi	r25, 0x10	; 16
     ae2:	90 93 bb 03 	sts	0x03BB, r25
     ae6:	80 93 ba 03 	sts	0x03BA, r24
	decay_main[2] = 3 ;
     aea:	23 e0       	ldi	r18, 0x03	; 3
     aec:	20 93 a6 03 	sts	0x03A6, r18
	rise_main[2] = 1 ;
     af0:	30 93 9a 03 	sts	0x039A, r19
	inc_fm1[2] = (int)(8.192 * 750.0) ;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	98 e1       	ldi	r25, 0x18	; 24
     af8:	90 93 f6 04 	sts	0x04F6, r25
     afc:	80 93 f5 04 	sts	0x04F5, r24
	depth_fm1[2] = 8 ;
     b00:	50 93 b4 03 	sts	0x03B4, r21
	decay_fm1[2] = 3 ;
     b04:	20 93 13 05 	sts	0x0513, r18

//Small, stiff rod
	inc_main[3] = (int)(8.192 * 1440) ;   
     b08:	f0 93 bd 03 	sts	0x03BD, r31
     b0c:	e0 93 bc 03 	sts	0x03BC, r30
	decay_main[3] = 3 ;
     b10:	20 93 a7 03 	sts	0x03A7, r18
	rise_main[3] = 1 ;   
     b14:	30 93 9b 03 	sts	0x039B, r19
	inc_fm1[3] = (int)(8.192 * 50) ; // at 100 get stiff string; at 200 get hollow pipe
     b18:	89 e9       	ldi	r24, 0x99	; 153
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	90 93 f8 04 	sts	0x04F8, r25
     b20:	80 93 f7 04 	sts	0x04F7, r24
	depth_fm1[3] = 10 ; //or 9
     b24:	8a e0       	ldi	r24, 0x0A	; 10
     b26:	80 93 b5 03 	sts	0x03B5, r24
	decay_fm1[3] = 5 ;
     b2a:	40 93 14 05 	sts	0x0514, r20
	decay_main[5] = 5 ;
	rise_main[5] = 0 ;
	inc_fm1[5] = (int)(8.192 * 1000) ;
	depth_fm1[5] = 8 ;
	decay_fm1[5] = 6 ;*/
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <main>:
		}
	}
}
/////////////////////////////////////////////////////
int main(void)
{ 
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
   Initialize();
     b40:	0e 94 c0 04 	call	0x980	; 0x980 <Initialize>
		//	printf("%d\n\r", TCNT2);
		}
		*/
		//random8Bits();
		//nextState();
		sprintf(LCDBuffer, "%d", TCNT2 * 8);
     b44:	ce ed       	ldi	r28, 0xDE	; 222
     b46:	d4 e0       	ldi	r29, 0x04	; 4
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	11 e0       	ldi	r17, 0x01	; 1
     b4c:	80 91 b2 00 	lds	r24, 0x00B2
     b50:	00 d0       	rcall	.+0      	; 0xb52 <main+0x1a>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <main+0x1c>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <main+0x1e>
     b56:	ed b7       	in	r30, 0x3d	; 61
     b58:	fe b7       	in	r31, 0x3e	; 62
     b5a:	31 96       	adiw	r30, 0x01	; 1
     b5c:	ad b7       	in	r26, 0x3d	; 61
     b5e:	be b7       	in	r27, 0x3e	; 62
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	dc 93       	st	X, r29
     b64:	ce 93       	st	-X, r28
     b66:	11 97       	sbiw	r26, 0x01	; 1
     b68:	13 83       	std	Z+3, r17	; 0x03
     b6a:	02 83       	std	Z+2, r16	; 0x02
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	23 e0       	ldi	r18, 0x03	; 3
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	2a 95       	dec	r18
     b76:	e1 f7       	brne	.-8      	; 0xb70 <main+0x38>
     b78:	95 83       	std	Z+5, r25	; 0x05
     b7a:	84 83       	std	Z+4, r24	; 0x04
     b7c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sprintf>
		LCDGotoXY(0,0);
     b80:	8d b7       	in	r24, 0x3d	; 61
     b82:	9e b7       	in	r25, 0x3e	; 62
     b84:	06 96       	adiw	r24, 0x06	; 6
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	9e bf       	out	0x3e, r25	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	8d bf       	out	0x3d, r24	; 61
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
		LCDstring(LCDBuffer, strlen(LCDBuffer));
     b98:	fe 01       	movw	r30, r28
     b9a:	01 90       	ld	r0, Z+
     b9c:	00 20       	and	r0, r0
     b9e:	e9 f7       	brne	.-6      	; 0xb9a <main+0x62>
     ba0:	31 97       	sbiw	r30, 0x01	; 1
     ba2:	ee 5d       	subi	r30, 0xDE	; 222
     ba4:	f4 40       	sbci	r31, 0x04	; 4
     ba6:	ce 01       	movw	r24, r28
     ba8:	6e 2f       	mov	r22, r30
     baa:	0e 94 f3 06 	call	0xde6	; 0xde6 <LCDstring>
     bae:	ce cf       	rjmp	.-100    	; 0xb4c <main+0x14>

00000bb0 <KeypadScan>:

uint8_t KeypadScan(void) {
	uint8_t key;
	uint8_t butnum;
	//get lower nibble
	DDRA = 0x0f;
     bb0:	2f e0       	ldi	r18, 0x0F	; 15
     bb2:	21 b9       	out	0x01, r18	; 1
	PORTA = 0xf0; 
     bb4:	80 ef       	ldi	r24, 0xF0	; 240
     bb6:	82 b9       	out	0x02, r24	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bb8:	9a e1       	ldi	r25, 0x1A	; 26
     bba:	39 2f       	mov	r19, r25
     bbc:	3a 95       	dec	r19
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <KeypadScan+0xc>
	_delay_us(5);
	key = PINA;
     bc0:	30 b1       	in	r19, 0x00	; 0
	
	//get upper nibble
	DDRA = 0xf0;
     bc2:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0f; 
     bc4:	22 b9       	out	0x02, r18	; 2
     bc6:	9a 95       	dec	r25
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <KeypadScan+0x16>
	_delay_us(5);
	key = key | PINA;
     bca:	20 b1       	in	r18, 0x00	; 0
     bcc:	23 2b       	or	r18, r19
	
	//find matching keycode in keytbl
	if (key != 0xff) {
     bce:	2f 3f       	cpi	r18, 0xFF	; 255
     bd0:	61 f0       	breq	.+24     	; 0xbea <KeypadScan+0x3a>
     bd2:	ea e1       	ldi	r30, 0x1A	; 26
     bd4:	f2 e0       	ldi	r31, 0x02	; 2
     bd6:	90 e0       	ldi	r25, 0x00	; 0
		for (butnum=0; butnum<16; butnum++) {   
			if (keytbl[butnum]==key)  break;   
     bd8:	80 81       	ld	r24, Z
     bda:	9f 5f       	subi	r25, 0xFF	; 255
     bdc:	82 17       	cp	r24, r18
     bde:	11 f4       	brne	.+4      	; 0xbe4 <KeypadScan+0x34>
		}

		if (butnum==16) butnum=0;
		else butnum++;	   //adjust by one to make range 1-16
     be0:	89 2f       	mov	r24, r25
     be2:	08 95       	ret
	_delay_us(5);
	key = key | PINA;
	
	//find matching keycode in keytbl
	if (key != 0xff) {
		for (butnum=0; butnum<16; butnum++) {   
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	90 31       	cpi	r25, 0x10	; 16
     be8:	b9 f7       	brne	.-18     	; 0xbd8 <KeypadScan+0x28>
     bea:	80 e0       	ldi	r24, 0x00	; 0
		else butnum++;	   //adjust by one to make range 1-16
	}
	else butnum=0;
	
	return butnum;
}
     bec:	08 95       	ret

00000bee <KeypadAppend>:

void KeypadAppend(uint8_t key) {
     bee:	98 2f       	mov	r25, r24
	uint8_t c = 0;
	// reset string
	if(KeypadFinished == 1) {
     bf0:	80 91 44 03 	lds	r24, 0x0344
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	31 f4       	brne	.+12     	; 0xc04 <KeypadAppend+0x16>
		KeypadFinished = 0;
     bf8:	10 92 44 03 	sts	0x0344, r1
		KeypadInput = 0;
     bfc:	10 92 43 03 	sts	0x0343, r1
     c00:	10 92 42 03 	sts	0x0342, r1
	}
	switch(key) {
     c04:	98 30       	cpi	r25, 0x08	; 8
     c06:	79 f1       	breq	.+94     	; 0xc66 <KeypadAppend+0x78>
     c08:	99 30       	cpi	r25, 0x09	; 9
     c0a:	80 f4       	brcc	.+32     	; 0xc2c <KeypadAppend+0x3e>
     c0c:	94 30       	cpi	r25, 0x04	; 4
     c0e:	59 f1       	breq	.+86     	; 0xc66 <KeypadAppend+0x78>
     c10:	95 30       	cpi	r25, 0x05	; 5
     c12:	38 f4       	brcc	.+14     	; 0xc22 <KeypadAppend+0x34>
     c14:	92 30       	cpi	r25, 0x02	; 2
     c16:	b9 f0       	breq	.+46     	; 0xc46 <KeypadAppend+0x58>
     c18:	93 30       	cpi	r25, 0x03	; 3
     c1a:	b8 f4       	brcc	.+46     	; 0xc4a <KeypadAppend+0x5c>
     c1c:	91 30       	cpi	r25, 0x01	; 1
     c1e:	e1 f5       	brne	.+120    	; 0xc98 <KeypadAppend+0xaa>
     c20:	26 c0       	rjmp	.+76     	; 0xc6e <KeypadAppend+0x80>
     c22:	96 30       	cpi	r25, 0x06	; 6
     c24:	b1 f0       	breq	.+44     	; 0xc52 <KeypadAppend+0x64>
     c26:	97 30       	cpi	r25, 0x07	; 7
     c28:	b0 f4       	brcc	.+44     	; 0xc56 <KeypadAppend+0x68>
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <KeypadAppend+0x60>
     c2c:	9e 30       	cpi	r25, 0x0E	; 14
     c2e:	38 f4       	brcc	.+14     	; 0xc3e <KeypadAppend+0x50>
     c30:	9c 30       	cpi	r25, 0x0C	; 12
     c32:	c8 f4       	brcc	.+50     	; 0xc66 <KeypadAppend+0x78>
     c34:	9a 30       	cpi	r25, 0x0A	; 10
     c36:	99 f0       	breq	.+38     	; 0xc5e <KeypadAppend+0x70>
     c38:	9b 30       	cpi	r25, 0x0B	; 11
     c3a:	98 f4       	brcc	.+38     	; 0xc62 <KeypadAppend+0x74>
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <KeypadAppend+0x6c>
     c3e:	9f 50       	subi	r25, 0x0F	; 15
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	50 f5       	brcc	.+84     	; 0xc98 <KeypadAppend+0xaa>
     c44:	10 c0       	rjmp	.+32     	; 0xc66 <KeypadAppend+0x78>
     c46:	42 e0       	ldi	r20, 0x02	; 2
     c48:	13 c0       	rjmp	.+38     	; 0xc70 <KeypadAppend+0x82>
     c4a:	43 e0       	ldi	r20, 0x03	; 3
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <KeypadAppend+0x82>
		case KEY_2:
			c = 2;
			break;
		case KEY_3:
			c = 3;
			break;
     c4e:	44 e0       	ldi	r20, 0x04	; 4
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <KeypadAppend+0x82>
		case KEY_4:
			c = 4;
			break;
     c52:	45 e0       	ldi	r20, 0x05	; 5
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <KeypadAppend+0x82>
		case KEY_5:
			c = 5;
			break;
     c56:	46 e0       	ldi	r20, 0x06	; 6
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <KeypadAppend+0x82>
		case KEY_6:
			c = 6;
			break;
     c5a:	47 e0       	ldi	r20, 0x07	; 7
     c5c:	09 c0       	rjmp	.+18     	; 0xc70 <KeypadAppend+0x82>
		case KEY_7:
			c = 7;
			break;
     c5e:	48 e0       	ldi	r20, 0x08	; 8
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <KeypadAppend+0x82>
		case KEY_8:
			c = 8;
			break;
     c62:	49 e0       	ldi	r20, 0x09	; 9
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <KeypadAppend+0x82>
		case KEY_S:
		case KEY_A:
		case KEY_B:
		case KEY_C:
		case KEY_D:
			KeypadFinished = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 44 03 	sts	0x0344, r24
     c6c:	08 95       	ret
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
	}
}
     c6e:	41 e0       	ldi	r20, 0x01	; 1
			KeypadFinished = 1;
			break;
	}
	// append to integer
	if(c) {
		KeypadInput = (KeypadInput * 10) + c;
     c70:	80 91 42 03 	lds	r24, 0x0342
     c74:	90 91 43 03 	lds	r25, 0x0343
     c78:	9c 01       	movw	r18, r24
     c7a:	63 e0       	ldi	r22, 0x03	; 3
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	6a 95       	dec	r22
     c82:	e1 f7       	brne	.-8      	; 0xc7c <KeypadAppend+0x8e>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	28 0f       	add	r18, r24
     c8a:	39 1f       	adc	r19, r25
     c8c:	24 0f       	add	r18, r20
     c8e:	31 1d       	adc	r19, r1
     c90:	30 93 43 03 	sts	0x0343, r19
     c94:	20 93 42 03 	sts	0x0342, r18
     c98:	08 95       	ret

00000c9a <KeypadDebounce>:
	}
}

// Execute this every 1ms
void KeypadDebounce(void) {
	if(debounceTime > 0) {
     c9a:	80 91 1a 05 	lds	r24, 0x051A
     c9e:	88 23       	and	r24, r24
     ca0:	29 f0       	breq	.+10     	; 0xcac <KeypadDebounce+0x12>
		debounceTime--;
     ca2:	80 91 1a 05 	lds	r24, 0x051A
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	80 93 1a 05 	sts	0x051A, r24
	}
	uint8_t key = KeypadScan(); //Scan the keypad
     cac:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <KeypadScan>
     cb0:	98 2f       	mov	r25, r24
	switch(keyState){
     cb2:	80 91 45 03 	lds	r24, 0x0345
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	91 f0       	breq	.+36     	; 0xcde <KeypadDebounce+0x44>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	28 f0       	brcs	.+10     	; 0xcc8 <KeypadDebounce+0x2e>
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	21 f1       	breq	.+72     	; 0xd0a <KeypadDebounce+0x70>
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	b9 f5       	brne	.+110    	; 0xd34 <KeypadDebounce+0x9a>
     cc6:	2a c0       	rjmp	.+84     	; 0xd1c <KeypadDebounce+0x82>
	
		case RELEASED:
			if (key){
     cc8:	99 23       	and	r25, r25
     cca:	a1 f1       	breq	.+104    	; 0xd34 <KeypadDebounce+0x9a>
				keyState = MAYBEPUSHED;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 45 03 	sts	0x0345, r24
				debounceTime = DEBOUNCE_TIME;
     cd2:	8e e1       	ldi	r24, 0x1E	; 30
     cd4:	80 93 1a 05 	sts	0x051A, r24
				checkKey = key;
     cd8:	90 93 1b 05 	sts	0x051B, r25
     cdc:	08 95       	ret
			}
			break;
		case MAYBEPUSHED:
			if (debounceTime == 0) {
     cde:	80 91 1a 05 	lds	r24, 0x051A
     ce2:	88 23       	and	r24, r24
     ce4:	39 f5       	brne	.+78     	; 0xd34 <KeypadDebounce+0x9a>
				if (key && key == checkKey) {
     ce6:	99 23       	and	r25, r25
     ce8:	69 f0       	breq	.+26     	; 0xd04 <KeypadDebounce+0x6a>
     cea:	80 91 1b 05 	lds	r24, 0x051B
     cee:	98 17       	cp	r25, r24
     cf0:	49 f4       	brne	.+18     	; 0xd04 <KeypadDebounce+0x6a>
					keyState = PUSHED;
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	80 93 45 03 	sts	0x0345, r24
					curKey = key;
     cf8:	90 93 19 05 	sts	0x0519, r25
					KeypadAppend(key);
     cfc:	89 2f       	mov	r24, r25
     cfe:	0e 94 f7 05 	call	0xbee	; 0xbee <KeypadAppend>
     d02:	08 95       	ret
				} else {
					keyState = RELEASED;
     d04:	10 92 45 03 	sts	0x0345, r1
     d08:	08 95       	ret
				}
			}
			break;
		case PUSHED:
			if (key == 0){
     d0a:	99 23       	and	r25, r25
     d0c:	99 f4       	brne	.+38     	; 0xd34 <KeypadDebounce+0x9a>
				keyState = MAYBERELEASED;
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	80 93 45 03 	sts	0x0345, r24
				debounceTime = DEBOUNCE_TIME;
     d14:	8e e1       	ldi	r24, 0x1E	; 30
     d16:	80 93 1a 05 	sts	0x051A, r24
     d1a:	08 95       	ret
			}
			break;
		case MAYBERELEASED:
			if (debounceTime == 0) {
     d1c:	80 91 1a 05 	lds	r24, 0x051A
     d20:	88 23       	and	r24, r24
     d22:	41 f4       	brne	.+16     	; 0xd34 <KeypadDebounce+0x9a>
				if (key == 0) {
     d24:	99 23       	and	r25, r25
     d26:	21 f4       	brne	.+8      	; 0xd30 <KeypadDebounce+0x96>
					keyState = PUSHED;
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	80 93 45 03 	sts	0x0345, r24
     d2e:	08 95       	ret
				} else {
					keyState = RELEASED;
     d30:	10 92 45 03 	sts	0x0345, r1
     d34:	08 95       	ret

00000d36 <KeypadKey>:
}


// get last pressed key
uint8_t KeypadKey(void) {
	uint8_t tmpKey = curKey;
     d36:	90 91 19 05 	lds	r25, 0x0519
	if (curKey){
     d3a:	80 91 19 05 	lds	r24, 0x0519
     d3e:	88 23       	and	r24, r24
     d40:	11 f0       	breq	.+4      	; 0xd46 <KeypadKey+0x10>
		curKey = 0;
     d42:	10 92 19 05 	sts	0x0519, r1
	}
	return tmpKey;
}
     d46:	89 2f       	mov	r24, r25
     d48:	08 95       	ret

00000d4a <KeypadInt>:


// get pressed integer (delimited before and after by any non-integer)
unsigned int KeypadInt(void) {
	return KeypadInput;
}
     d4a:	80 91 42 03 	lds	r24, 0x0342
     d4e:	90 91 43 03 	lds	r25, 0x0343
     d52:	08 95       	ret

00000d54 <KeypadFin>:

uint8_t KeypadFin(void) {
	return KeypadFinished;
}
     d54:	80 91 44 03 	lds	r24, 0x0344
     d58:	08 95       	ret

00000d5a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     d5a:	28 2f       	mov	r18, r24
     d5c:	20 7f       	andi	r18, 0xF0	; 240
     d5e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     d60:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d62:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d64:	20 ea       	ldi	r18, 0xA0	; 160
     d66:	3f e0       	ldi	r19, 0x0F	; 15
     d68:	f9 01       	movw	r30, r18
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d6e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d70:	40 98       	cbi	0x08, 0	; 8
     d72:	f9 01       	movw	r30, r18
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	44 e0       	ldi	r20, 0x04	; 4
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	4a 95       	dec	r20
     d82:	e1 f7       	brne	.-8      	; 0xd7c <LCDsendChar+0x22>
     d84:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     d86:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d88:	42 9a       	sbi	0x08, 2	; 8
     d8a:	c9 01       	movw	r24, r18
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     d90:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d92:	40 98       	cbi	0x08, 0	; 8
     d94:	c9 01       	movw	r24, r18
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     d9a:	08 95       	ret

00000d9c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     d9c:	28 2f       	mov	r18, r24
     d9e:	20 7f       	andi	r18, 0xF0	; 240
     da0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     da2:	42 9a       	sbi	0x08, 2	; 8
     da4:	20 ea       	ldi	r18, 0xA0	; 160
     da6:	3f e0       	ldi	r19, 0x0F	; 15
     da8:	f9 01       	movw	r30, r18
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     dae:	42 98       	cbi	0x08, 2	; 8
     db0:	f9 01       	movw	r30, r18
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	54 e0       	ldi	r21, 0x04	; 4
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	5a 95       	dec	r21
     dc0:	e1 f7       	brne	.-8      	; 0xdba <LCDsendCommand+0x1e>
     dc2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     dc4:	42 9a       	sbi	0x08, 2	; 8
     dc6:	c9 01       	movw	r24, r18
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     dcc:	42 98       	cbi	0x08, 2	; 8
     dce:	c9 01       	movw	r24, r18
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     dd4:	08 95       	ret

00000dd6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     ddc:	08 95       	ret

00000dde <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     de4:	08 95       	ret

00000de6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	49 f0       	breq	.+18     	; 0xe06 <LCDstring+0x20>
     df4:	ec 01       	movw	r28, r24
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     dfa:	89 91       	ld	r24, Y+
     dfc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     e00:	1f 5f       	subi	r17, 0xFF	; 255
     e02:	10 17       	cp	r17, r16
     e04:	d0 f3       	brcs	.-12     	; 0xdfa <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     e10:	62 30       	cpi	r22, 0x02	; 2
     e12:	31 f0       	breq	.+12     	; 0xe20 <LCDGotoXY+0x10>
     e14:	63 30       	cpi	r22, 0x03	; 3
     e16:	31 f0       	breq	.+12     	; 0xe24 <LCDGotoXY+0x14>
     e18:	61 30       	cpi	r22, 0x01	; 1
     e1a:	29 f4       	brne	.+10     	; 0xe26 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     e1c:	80 5c       	subi	r24, 0xC0	; 192
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     e20:	8c 5e       	subi	r24, 0xEC	; 236
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     e24:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
	
}
     e2c:	08 95       	ret

00000e2e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
     e36:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     e38:	64 2f       	mov	r22, r20
     e3a:	0e 94 08 07 	call	0xe10	; 0xe10 <LCDGotoXY>
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     e42:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     e46:	1f 5f       	subi	r17, 0xFF	; 255
     e48:	fe 01       	movw	r30, r28
     e4a:	e1 0f       	add	r30, r17
     e4c:	f1 1d       	adc	r31, r1
     e4e:	84 91       	lpm	r24, Z+
     e50:	88 23       	and	r24, r24
     e52:	b9 f7       	brne	.-18     	; 0xe42 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	08 95       	ret

00000e5c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	7c 01       	movw	r14, r24
     e6a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     e6c:	11 0f       	add	r17, r17
     e6e:	11 0f       	add	r17, r17
     e70:	11 0f       	add	r17, r17
     e72:	10 64       	ori	r17, 0x40	; 64
     e74:	c0 e0       	ldi	r28, 0x00	; 0
     e76:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     e78:	f7 01       	movw	r30, r14
     e7a:	ec 0f       	add	r30, r28
     e7c:	fd 1f       	adc	r31, r29
     e7e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     e80:	81 2f       	mov	r24, r17
     e82:	8c 0f       	add	r24, r28
     e84:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
		LCDsendChar(pcc);
     e88:	80 2f       	mov	r24, r16
     e8a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     e8e:	21 96       	adiw	r28, 0x01	; 1
     e90:	c8 30       	cpi	r28, 0x08	; 8
     e92:	d1 05       	cpc	r29, r1
     e94:	89 f7       	brne	.-30     	; 0xe78 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	08 95       	ret

00000ea4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	80 e6       	ldi	r24, 0x60	; 96
     eac:	9a ee       	ldi	r25, 0xEA	; 234
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     eb2:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     eb4:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     eb6:	87 b1       	in	r24, 0x07	; 7
     eb8:	80 6f       	ori	r24, 0xF0	; 240
     eba:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     ebc:	87 b1       	in	r24, 0x07	; 7
     ebe:	87 60       	ori	r24, 0x07	; 7
     ec0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ec2:	80 e3       	ldi	r24, 0x30	; 48
     ec4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ec6:	42 9a       	sbi	0x08, 2	; 8
     ec8:	20 ea       	ldi	r18, 0xA0	; 160
     eca:	3f e0       	ldi	r19, 0x0F	; 15
     ecc:	f9 01       	movw	r30, r18
     ece:	31 97       	sbiw	r30, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ed2:	42 98       	cbi	0x08, 2	; 8
     ed4:	f9 01       	movw	r30, r18
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     eda:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     edc:	42 9a       	sbi	0x08, 2	; 8
     ede:	c9 01       	movw	r24, r18
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ee4:	42 98       	cbi	0x08, 2	; 8
     ee6:	c9 01       	movw	r24, r18
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ef0:	42 9a       	sbi	0x08, 2	; 8
     ef2:	c9 01       	movw	r24, r18
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ef8:	42 98       	cbi	0x08, 2	; 8
     efa:	c9 01       	movw	r24, r18
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     f00:	88 e2       	ldi	r24, 0x28	; 40
     f02:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     f06:	8c e0       	ldi	r24, 0x0C	; 12
     f08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
     f0c:	cb e0       	ldi	r28, 0x0B	; 11
     f0e:	d1 e0       	ldi	r29, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     f12:	16 2f       	mov	r17, r22
     f14:	1f 5f       	subi	r17, 0xFF	; 255
     f16:	ce 01       	movw	r24, r28
     f18:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCDdefinechar>
     f1c:	28 96       	adiw	r28, 0x08	; 8
     f1e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     f20:	18 30       	cpi	r17, 0x08	; 8
     f22:	b9 f7       	brne	.-18     	; 0xf12 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	08 2f       	mov	r16, r24
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     f36:	8e e1       	ldi	r24, 0x1E	; 30
     f38:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     f3c:	1f 5f       	subi	r17, 0xFF	; 255
     f3e:	10 17       	cp	r17, r16
     f40:	d0 f3       	brcs	.-12     	; 0xf36 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	08 2f       	mov	r16, r24
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     f52:	88 e1       	ldi	r24, 0x18	; 24
     f54:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     f58:	1f 5f       	subi	r17, 0xFF	; 255
     f5a:	10 17       	cp	r17, r16
     f5c:	d0 f3       	brcs	.-12     	; 0xf52 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     f64:	8e e0       	ldi	r24, 0x0E	; 14
     f66:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     f6a:	08 95       	ret

00000f6c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     f6c:	8f e0       	ldi	r24, 0x0F	; 15
     f6e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     f72:	08 95       	ret

00000f74 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     f74:	8c e0       	ldi	r24, 0x0C	; 12
     f76:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     f7a:	08 95       	ret

00000f7c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     f7c:	88 e0       	ldi	r24, 0x08	; 8
     f7e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     f82:	08 95       	ret

00000f84 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     f84:	8c e0       	ldi	r24, 0x0C	; 12
     f86:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
}
     f8a:	08 95       	ret

00000f8c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	08 2f       	mov	r16, r24
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f9c:	1f 5f       	subi	r17, 0xFF	; 255
     f9e:	10 17       	cp	r17, r16
     fa0:	d0 f3       	brcs	.-12     	; 0xf96 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	08 95       	ret

00000fa8 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	08 2f       	mov	r16, r24
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     fb2:	84 e1       	ldi	r24, 0x14	; 20
     fb4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     fb8:	1f 5f       	subi	r17, 0xFF	; 255
     fba:	10 17       	cp	r17, r16
     fbc:	d0 f3       	brcs	.-12     	; 0xfb2 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     fd4:	96 e0       	ldi	r25, 0x06	; 6
     fd6:	89 9f       	mul	r24, r25
     fd8:	c0 01       	movw	r24, r0
     fda:	11 24       	eor	r1, r1
     fdc:	24 2f       	mov	r18, r20
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	ac 01       	movw	r20, r24
     fe2:	42 9f       	mul	r20, r18
     fe4:	c0 01       	movw	r24, r0
     fe6:	43 9f       	mul	r20, r19
     fe8:	90 0d       	add	r25, r0
     fea:	52 9f       	mul	r21, r18
     fec:	90 0d       	add	r25, r0
     fee:	11 24       	eor	r1, r1
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     ff6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ff8:	cb 01       	movw	r24, r22
     ffa:	66 e0       	ldi	r22, 0x06	; 6
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodhi4>
    1002:	e8 2e       	mov	r14, r24
    1004:	ff 24       	eor	r15, r15
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    100c:	c8 01       	movw	r24, r16
    100e:	05 96       	adiw	r24, 0x05	; 5
    1010:	c8 17       	cp	r28, r24
    1012:	d9 07       	cpc	r29, r25
    1014:	10 f0       	brcs	.+4      	; 0x101a <LCDprogressBar+0x56>
    1016:	85 e0       	ldi	r24, 0x05	; 5
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    101a:	c0 17       	cp	r28, r16
    101c:	d1 07       	cpc	r29, r17
    101e:	10 f0       	brcs	.+4      	; 0x1024 <LCDprogressBar+0x60>
    1020:	8e 2d       	mov	r24, r14
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <LCDprogressBar+0x62>
    1024:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1026:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    102a:	f3 94       	inc	r15
    102c:	0a 5f       	subi	r16, 0xFA	; 250
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	fd 14       	cp	r15, r13
    1032:	60 f3       	brcs	.-40     	; 0x100c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	08 95       	ret

00001044 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1044:	87 e6       	ldi	r24, 0x67	; 103
    1046:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    104a:	88 e1       	ldi	r24, 0x18	; 24
    104c:	80 93 c1 00 	sts	0x00C1, r24
}
    1050:	08 95       	ret

00001052 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1052:	1f 93       	push	r17
    1054:	18 2f       	mov	r17, r24

  if (c == '\a')
    1056:	87 30       	cpi	r24, 0x07	; 7
    1058:	49 f4       	brne	.+18     	; 0x106c <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    105a:	60 91 20 05 	lds	r22, 0x0520
    105e:	70 91 21 05 	lds	r23, 0x0521
    1062:	8a e2       	ldi	r24, 0x2A	; 42
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputs>
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    106c:	8a 30       	cpi	r24, 0x0A	; 10
    106e:	19 f4       	brne	.+6      	; 0x1076 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1076:	80 91 c0 00 	lds	r24, 0x00C0
    107a:	85 ff       	sbrs	r24, 5
    107c:	fc cf       	rjmp	.-8      	; 0x1076 <uart_putchar+0x24>
  UDR0 = c;
    107e:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	1f 91       	pop	r17
    1088:	08 95       	ret

0000108a <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1098:	80 91 46 03 	lds	r24, 0x0346
    109c:	90 91 47 03 	lds	r25, 0x0347
    10a0:	89 2b       	or	r24, r25
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <uart_getchar+0x1c>
    10a4:	9f c0       	rjmp	.+318    	; 0x11e4 <__stack+0xe5>
    10a6:	08 e4       	ldi	r16, 0x48	; 72
    10a8:	13 e0       	ldi	r17, 0x03	; 3
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    10aa:	80 91 c0 00 	lds	r24, 0x00C0
    10ae:	87 ff       	sbrs	r24, 7
    10b0:	fc cf       	rjmp	.-8      	; 0x10aa <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    10b2:	80 91 c0 00 	lds	r24, 0x00C0
    10b6:	84 ff       	sbrs	r24, 4
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <uart_getchar+0x36>
    10ba:	2e ef       	ldi	r18, 0xFE	; 254
    10bc:	3f ef       	ldi	r19, 0xFF	; 255
    10be:	a6 c0       	rjmp	.+332    	; 0x120c <__stack+0x10d>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    10c0:	80 91 c0 00 	lds	r24, 0x00C0
    10c4:	83 fd       	sbrc	r24, 3
    10c6:	a0 c0       	rjmp	.+320    	; 0x1208 <__stack+0x109>
	  return _FDEV_ERR;
	c = UDR0;
    10c8:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    10cc:	9d 30       	cpi	r25, 0x0D	; 13
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    10d0:	9a 30       	cpi	r25, 0x0A	; 10
    10d2:	69 f4       	brne	.+26     	; 0x10ee <uart_getchar+0x64>
	  {
	    *cp = c;
    10d4:	8a e0       	ldi	r24, 0x0A	; 10
    10d6:	f8 01       	movw	r30, r16
    10d8:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    10da:	b7 01       	movw	r22, r14
    10dc:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
	    rxp = b;
    10e0:	88 e4       	ldi	r24, 0x48	; 72
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	90 93 47 03 	sts	0x0347, r25
    10e8:	80 93 46 03 	sts	0x0346, r24
    10ec:	7b c0       	rjmp	.+246    	; 0x11e4 <__stack+0xe5>
	    break;
	  }
	else if (c == '\t')
    10ee:	99 30       	cpi	r25, 0x09	; 9
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <uart_getchar+0x6a>
    10f2:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    10f4:	89 2f       	mov	r24, r25
    10f6:	80 52       	subi	r24, 0x20	; 32
    10f8:	8f 35       	cpi	r24, 0x5F	; 95
    10fa:	10 f0       	brcs	.+4      	; 0x1100 <__stack+0x1>
    10fc:	90 3a       	cpi	r25, 0xA0	; 160
    10fe:	70 f0       	brcs	.+28     	; 0x111c <__stack+0x1d>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1100:	f3 e0       	ldi	r31, 0x03	; 3
    1102:	07 39       	cpi	r16, 0x97	; 151
    1104:	1f 07       	cpc	r17, r31
    1106:	11 f4       	brne	.+4      	; 0x110c <__stack+0xd>
	      uart_putchar('\a', stream);
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <__stack+0x15>
	    else
	      {
		*cp++ = c;
    110c:	f8 01       	movw	r30, r16
    110e:	91 93       	st	Z+, r25
    1110:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1112:	89 2f       	mov	r24, r25
    1114:	b7 01       	movw	r22, r14
    1116:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
    111a:	c7 cf       	rjmp	.-114    	; 0x10aa <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    111c:	92 31       	cpi	r25, 0x12	; 18
    111e:	39 f1       	breq	.+78     	; 0x116e <__stack+0x6f>
    1120:	93 31       	cpi	r25, 0x13	; 19
    1122:	38 f4       	brcc	.+14     	; 0x1132 <__stack+0x33>
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	09 f4       	brne	.+2      	; 0x112a <__stack+0x2b>
    1128:	6f c0       	rjmp	.+222    	; 0x1208 <__stack+0x109>
    112a:	98 30       	cpi	r25, 0x08	; 8
    112c:	09 f0       	breq	.+2      	; 0x1130 <__stack+0x31>
    112e:	bd cf       	rjmp	.-134    	; 0x10aa <uart_getchar+0x20>
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <__stack+0x45>
    1132:	97 31       	cpi	r25, 0x17	; 23
    1134:	09 f4       	brne	.+2      	; 0x1138 <__stack+0x39>
    1136:	4b c0       	rjmp	.+150    	; 0x11ce <__stack+0xcf>
    1138:	9f 37       	cpi	r25, 0x7F	; 127
    113a:	21 f0       	breq	.+8      	; 0x1144 <__stack+0x45>
    113c:	95 31       	cpi	r25, 0x15	; 21
    113e:	09 f0       	breq	.+2      	; 0x1142 <__stack+0x43>
    1140:	b4 cf       	rjmp	.-152    	; 0x10aa <uart_getchar+0x20>
    1142:	32 c0       	rjmp	.+100    	; 0x11a8 <__stack+0xa9>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1144:	f3 e0       	ldi	r31, 0x03	; 3
    1146:	08 34       	cpi	r16, 0x48	; 72
    1148:	1f 07       	cpc	r17, r31
    114a:	09 f0       	breq	.+2      	; 0x114e <__stack+0x4f>
    114c:	08 f4       	brcc	.+2      	; 0x1150 <__stack+0x51>
    114e:	ad cf       	rjmp	.-166    	; 0x10aa <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	b7 01       	movw	r22, r14
    1154:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar(' ', stream);
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	b7 01       	movw	r22, r14
    115c:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar('\b', stream);
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	b7 01       	movw	r22, r14
    1164:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		cp--;
    1168:	01 50       	subi	r16, 0x01	; 1
    116a:	10 40       	sbci	r17, 0x00	; 0
    116c:	9e cf       	rjmp	.-196    	; 0x10aa <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    116e:	8d e0       	ldi	r24, 0x0D	; 13
    1170:	b7 01       	movw	r22, r14
    1172:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
    1176:	c8 e4       	ldi	r28, 0x48	; 72
    1178:	d3 e0       	ldi	r29, 0x03	; 3
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__stack+0x85>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    117c:	89 91       	ld	r24, Y+
    117e:	b7 01       	movw	r22, r14
    1180:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1184:	c0 17       	cp	r28, r16
    1186:	d1 07       	cpc	r29, r17
    1188:	c8 f3       	brcs	.-14     	; 0x117c <__stack+0x7d>
    118a:	8f cf       	rjmp	.-226    	; 0x10aa <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar(' ', stream);
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	b7 01       	movw	r22, r14
    1198:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar('\b', stream);
    119c:	88 e0       	ldi	r24, 0x08	; 8
    119e:	b7 01       	movw	r22, r14
    11a0:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		cp--;
    11a4:	01 50       	subi	r16, 0x01	; 1
    11a6:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	08 34       	cpi	r16, 0x48	; 72
    11ac:	18 07       	cpc	r17, r24
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <__stack+0xb3>
    11b0:	68 f7       	brcc	.-38     	; 0x118c <__stack+0x8d>
    11b2:	7b cf       	rjmp	.-266    	; 0x10aa <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    11b4:	88 e0       	ldi	r24, 0x08	; 8
    11b6:	b7 01       	movw	r22, r14
    11b8:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar(' ', stream);
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	b7 01       	movw	r22, r14
    11c0:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
		uart_putchar('\b', stream);
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	b7 01       	movw	r22, r14
    11c8:	0e 94 29 08 	call	0x1052	; 0x1052 <uart_putchar>
    11cc:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    11ce:	e3 e0       	ldi	r30, 0x03	; 3
    11d0:	08 34       	cpi	r16, 0x48	; 72
    11d2:	1e 07       	cpc	r17, r30
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <__stack+0xd9>
    11d6:	08 f4       	brcc	.+2      	; 0x11da <__stack+0xdb>
    11d8:	68 cf       	rjmp	.-304    	; 0x10aa <uart_getchar+0x20>
    11da:	e8 01       	movw	r28, r16
    11dc:	8a 91       	ld	r24, -Y
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	49 f7       	brne	.-46     	; 0x11b4 <__stack+0xb5>
    11e2:	63 cf       	rjmp	.-314    	; 0x10aa <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    11e4:	e0 91 46 03 	lds	r30, 0x0346
    11e8:	f0 91 47 03 	lds	r31, 0x0347
    11ec:	81 91       	ld	r24, Z+
    11ee:	f0 93 47 03 	sts	0x0347, r31
    11f2:	e0 93 46 03 	sts	0x0346, r30
  if (c == '\n')
    11f6:	8a 30       	cpi	r24, 0x0A	; 10
    11f8:	21 f4       	brne	.+8      	; 0x1202 <__stack+0x103>
    rxp = 0;
    11fa:	10 92 47 03 	sts	0x0347, r1
    11fe:	10 92 46 03 	sts	0x0346, r1

  return c;
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__stack+0x10d>
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	3f ef       	ldi	r19, 0xFF	; 255
}
    120c:	c9 01       	movw	r24, r18
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	08 95       	ret

0000121c <__fixunssfsi>:
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	7b 01       	movw	r14, r22
    1226:	8c 01       	movw	r16, r24
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	5f e4       	ldi	r21, 0x4F	; 79
    1230:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__gesf2>
    1234:	88 23       	and	r24, r24
    1236:	8c f0       	brlt	.+34     	; 0x125a <__fixunssfsi+0x3e>
    1238:	c8 01       	movw	r24, r16
    123a:	b7 01       	movw	r22, r14
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	5f e4       	ldi	r21, 0x4F	; 79
    1244:	0e 94 86 0a 	call	0x150c	; 0x150c <__subsf3>
    1248:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fixsfsi>
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	20 50       	subi	r18, 0x00	; 0
    1252:	30 40       	sbci	r19, 0x00	; 0
    1254:	40 40       	sbci	r20, 0x00	; 0
    1256:	50 48       	sbci	r21, 0x80	; 128
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <__fixunssfsi+0x4a>
    125a:	c8 01       	movw	r24, r16
    125c:	b7 01       	movw	r22, r14
    125e:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fixsfsi>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	b9 01       	movw	r22, r18
    1268:	ca 01       	movw	r24, r20
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	08 95       	ret

00001274 <_fpadd_parts>:
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e0 e4       	ldi	r30, 0x40	; 64
    127a:	f9 e0       	ldi	r31, 0x09	; 9
    127c:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__>
    1280:	dc 01       	movw	r26, r24
    1282:	2b 01       	movw	r4, r22
    1284:	fa 01       	movw	r30, r20
    1286:	9c 91       	ld	r25, X
    1288:	92 30       	cpi	r25, 0x02	; 2
    128a:	08 f4       	brcc	.+2      	; 0x128e <_fpadd_parts+0x1a>
    128c:	39 c1       	rjmp	.+626    	; 0x1500 <_fpadd_parts+0x28c>
    128e:	eb 01       	movw	r28, r22
    1290:	88 81       	ld	r24, Y
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	08 f4       	brcc	.+2      	; 0x1298 <_fpadd_parts+0x24>
    1296:	33 c1       	rjmp	.+614    	; 0x14fe <_fpadd_parts+0x28a>
    1298:	94 30       	cpi	r25, 0x04	; 4
    129a:	69 f4       	brne	.+26     	; 0x12b6 <_fpadd_parts+0x42>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	09 f0       	breq	.+2      	; 0x12a2 <_fpadd_parts+0x2e>
    12a0:	2f c1       	rjmp	.+606    	; 0x1500 <_fpadd_parts+0x28c>
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	9c 91       	ld	r25, X
    12a6:	11 97       	sbiw	r26, 0x01	; 1
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	98 17       	cp	r25, r24
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_fpadd_parts+0x3c>
    12ae:	28 c1       	rjmp	.+592    	; 0x1500 <_fpadd_parts+0x28c>
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b2 e0       	ldi	r27, 0x02	; 2
    12b4:	25 c1       	rjmp	.+586    	; 0x1500 <_fpadd_parts+0x28c>
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	09 f4       	brne	.+2      	; 0x12bc <_fpadd_parts+0x48>
    12ba:	21 c1       	rjmp	.+578    	; 0x14fe <_fpadd_parts+0x28a>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	a9 f4       	brne	.+42     	; 0x12ea <_fpadd_parts+0x76>
    12c0:	92 30       	cpi	r25, 0x02	; 2
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <_fpadd_parts+0x52>
    12c4:	1d c1       	rjmp	.+570    	; 0x1500 <_fpadd_parts+0x28c>
    12c6:	9a 01       	movw	r18, r20
    12c8:	ad 01       	movw	r20, r26
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	ea 01       	movw	r28, r20
    12ce:	09 90       	ld	r0, Y+
    12d0:	ae 01       	movw	r20, r28
    12d2:	e9 01       	movw	r28, r18
    12d4:	09 92       	st	Y+, r0
    12d6:	9e 01       	movw	r18, r28
    12d8:	81 50       	subi	r24, 0x01	; 1
    12da:	c1 f7       	brne	.-16     	; 0x12cc <_fpadd_parts+0x58>
    12dc:	e2 01       	movw	r28, r4
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	9c 91       	ld	r25, X
    12e4:	89 23       	and	r24, r25
    12e6:	81 83       	std	Z+1, r24	; 0x01
    12e8:	08 c1       	rjmp	.+528    	; 0x14fa <_fpadd_parts+0x286>
    12ea:	92 30       	cpi	r25, 0x02	; 2
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <_fpadd_parts+0x7c>
    12ee:	07 c1       	rjmp	.+526    	; 0x14fe <_fpadd_parts+0x28a>
    12f0:	12 96       	adiw	r26, 0x02	; 2
    12f2:	2d 90       	ld	r2, X+
    12f4:	3c 90       	ld	r3, X
    12f6:	13 97       	sbiw	r26, 0x03	; 3
    12f8:	eb 01       	movw	r28, r22
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	14 96       	adiw	r26, 0x04	; 4
    1300:	ad 90       	ld	r10, X+
    1302:	bd 90       	ld	r11, X+
    1304:	cd 90       	ld	r12, X+
    1306:	dc 90       	ld	r13, X
    1308:	17 97       	sbiw	r26, 0x07	; 7
    130a:	ec 80       	ldd	r14, Y+4	; 0x04
    130c:	fd 80       	ldd	r15, Y+5	; 0x05
    130e:	0e 81       	ldd	r16, Y+6	; 0x06
    1310:	1f 81       	ldd	r17, Y+7	; 0x07
    1312:	91 01       	movw	r18, r2
    1314:	28 1b       	sub	r18, r24
    1316:	39 0b       	sbc	r19, r25
    1318:	b9 01       	movw	r22, r18
    131a:	37 ff       	sbrs	r19, 7
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <_fpadd_parts+0xb2>
    131e:	66 27       	eor	r22, r22
    1320:	77 27       	eor	r23, r23
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	60 32       	cpi	r22, 0x20	; 32
    1328:	71 05       	cpc	r23, r1
    132a:	0c f0       	brlt	.+2      	; 0x132e <_fpadd_parts+0xba>
    132c:	61 c0       	rjmp	.+194    	; 0x13f0 <_fpadd_parts+0x17c>
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	6c f5       	brge	.+90     	; 0x138e <_fpadd_parts+0x11a>
    1334:	37 01       	movw	r6, r14
    1336:	48 01       	movw	r8, r16
    1338:	06 2e       	mov	r0, r22
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <_fpadd_parts+0xd0>
    133c:	96 94       	lsr	r9
    133e:	87 94       	ror	r8
    1340:	77 94       	ror	r7
    1342:	67 94       	ror	r6
    1344:	0a 94       	dec	r0
    1346:	d2 f7       	brpl	.-12     	; 0x133c <_fpadd_parts+0xc8>
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	04 c0       	rjmp	.+8      	; 0x135a <_fpadd_parts+0xe6>
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	44 1f       	adc	r20, r20
    1358:	55 1f       	adc	r21, r21
    135a:	6a 95       	dec	r22
    135c:	d2 f7       	brpl	.-12     	; 0x1352 <_fpadd_parts+0xde>
    135e:	21 50       	subi	r18, 0x01	; 1
    1360:	30 40       	sbci	r19, 0x00	; 0
    1362:	40 40       	sbci	r20, 0x00	; 0
    1364:	50 40       	sbci	r21, 0x00	; 0
    1366:	2e 21       	and	r18, r14
    1368:	3f 21       	and	r19, r15
    136a:	40 23       	and	r20, r16
    136c:	51 23       	and	r21, r17
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	41 05       	cpc	r20, r1
    1374:	51 05       	cpc	r21, r1
    1376:	21 f0       	breq	.+8      	; 0x1380 <_fpadd_parts+0x10c>
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	79 01       	movw	r14, r18
    1382:	8a 01       	movw	r16, r20
    1384:	e6 28       	or	r14, r6
    1386:	f7 28       	or	r15, r7
    1388:	08 29       	or	r16, r8
    138a:	19 29       	or	r17, r9
    138c:	3c c0       	rjmp	.+120    	; 0x1406 <_fpadd_parts+0x192>
    138e:	23 2b       	or	r18, r19
    1390:	d1 f1       	breq	.+116    	; 0x1406 <_fpadd_parts+0x192>
    1392:	26 0e       	add	r2, r22
    1394:	37 1e       	adc	r3, r23
    1396:	35 01       	movw	r6, r10
    1398:	46 01       	movw	r8, r12
    139a:	06 2e       	mov	r0, r22
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <_fpadd_parts+0x132>
    139e:	96 94       	lsr	r9
    13a0:	87 94       	ror	r8
    13a2:	77 94       	ror	r7
    13a4:	67 94       	ror	r6
    13a6:	0a 94       	dec	r0
    13a8:	d2 f7       	brpl	.-12     	; 0x139e <_fpadd_parts+0x12a>
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <_fpadd_parts+0x148>
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	44 1f       	adc	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	6a 95       	dec	r22
    13be:	d2 f7       	brpl	.-12     	; 0x13b4 <_fpadd_parts+0x140>
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	30 40       	sbci	r19, 0x00	; 0
    13c4:	40 40       	sbci	r20, 0x00	; 0
    13c6:	50 40       	sbci	r21, 0x00	; 0
    13c8:	2a 21       	and	r18, r10
    13ca:	3b 21       	and	r19, r11
    13cc:	4c 21       	and	r20, r12
    13ce:	5d 21       	and	r21, r13
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	41 05       	cpc	r20, r1
    13d6:	51 05       	cpc	r21, r1
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <_fpadd_parts+0x16e>
    13da:	21 e0       	ldi	r18, 0x01	; 1
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	59 01       	movw	r10, r18
    13e4:	6a 01       	movw	r12, r20
    13e6:	a6 28       	or	r10, r6
    13e8:	b7 28       	or	r11, r7
    13ea:	c8 28       	or	r12, r8
    13ec:	d9 28       	or	r13, r9
    13ee:	0b c0       	rjmp	.+22     	; 0x1406 <_fpadd_parts+0x192>
    13f0:	82 15       	cp	r24, r2
    13f2:	93 05       	cpc	r25, r3
    13f4:	2c f0       	brlt	.+10     	; 0x1400 <_fpadd_parts+0x18c>
    13f6:	1c 01       	movw	r2, r24
    13f8:	aa 24       	eor	r10, r10
    13fa:	bb 24       	eor	r11, r11
    13fc:	65 01       	movw	r12, r10
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <_fpadd_parts+0x192>
    1400:	ee 24       	eor	r14, r14
    1402:	ff 24       	eor	r15, r15
    1404:	87 01       	movw	r16, r14
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	9c 91       	ld	r25, X
    140a:	d2 01       	movw	r26, r4
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	8c 91       	ld	r24, X
    1410:	98 17       	cp	r25, r24
    1412:	09 f4       	brne	.+2      	; 0x1416 <_fpadd_parts+0x1a2>
    1414:	45 c0       	rjmp	.+138    	; 0x14a0 <_fpadd_parts+0x22c>
    1416:	99 23       	and	r25, r25
    1418:	39 f0       	breq	.+14     	; 0x1428 <_fpadd_parts+0x1b4>
    141a:	a8 01       	movw	r20, r16
    141c:	97 01       	movw	r18, r14
    141e:	2a 19       	sub	r18, r10
    1420:	3b 09       	sbc	r19, r11
    1422:	4c 09       	sbc	r20, r12
    1424:	5d 09       	sbc	r21, r13
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <_fpadd_parts+0x1c0>
    1428:	a6 01       	movw	r20, r12
    142a:	95 01       	movw	r18, r10
    142c:	2e 19       	sub	r18, r14
    142e:	3f 09       	sbc	r19, r15
    1430:	40 0b       	sbc	r20, r16
    1432:	51 0b       	sbc	r21, r17
    1434:	57 fd       	sbrc	r21, 7
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <_fpadd_parts+0x1d4>
    1438:	11 82       	std	Z+1, r1	; 0x01
    143a:	33 82       	std	Z+3, r3	; 0x03
    143c:	22 82       	std	Z+2, r2	; 0x02
    143e:	24 83       	std	Z+4, r18	; 0x04
    1440:	35 83       	std	Z+5, r19	; 0x05
    1442:	46 83       	std	Z+6, r20	; 0x06
    1444:	57 83       	std	Z+7, r21	; 0x07
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <_fpadd_parts+0x20e>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	81 83       	std	Z+1, r24	; 0x01
    144c:	33 82       	std	Z+3, r3	; 0x03
    144e:	22 82       	std	Z+2, r2	; 0x02
    1450:	88 27       	eor	r24, r24
    1452:	99 27       	eor	r25, r25
    1454:	dc 01       	movw	r26, r24
    1456:	82 1b       	sub	r24, r18
    1458:	93 0b       	sbc	r25, r19
    145a:	a4 0b       	sbc	r26, r20
    145c:	b5 0b       	sbc	r27, r21
    145e:	84 83       	std	Z+4, r24	; 0x04
    1460:	95 83       	std	Z+5, r25	; 0x05
    1462:	a6 83       	std	Z+6, r26	; 0x06
    1464:	b7 83       	std	Z+7, r27	; 0x07
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <_fpadd_parts+0x20e>
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	44 1f       	adc	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	24 83       	std	Z+4, r18	; 0x04
    1472:	35 83       	std	Z+5, r19	; 0x05
    1474:	46 83       	std	Z+6, r20	; 0x06
    1476:	57 83       	std	Z+7, r21	; 0x07
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	93 83       	std	Z+3, r25	; 0x03
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	24 81       	ldd	r18, Z+4	; 0x04
    1484:	35 81       	ldd	r19, Z+5	; 0x05
    1486:	46 81       	ldd	r20, Z+6	; 0x06
    1488:	57 81       	ldd	r21, Z+7	; 0x07
    148a:	da 01       	movw	r26, r20
    148c:	c9 01       	movw	r24, r18
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	a1 09       	sbc	r26, r1
    1492:	b1 09       	sbc	r27, r1
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	af 4f       	sbci	r26, 0xFF	; 255
    149a:	bf 43       	sbci	r27, 0x3F	; 63
    149c:	28 f3       	brcs	.-54     	; 0x1468 <_fpadd_parts+0x1f4>
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <_fpadd_parts+0x242>
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	33 82       	std	Z+3, r3	; 0x03
    14a4:	22 82       	std	Z+2, r2	; 0x02
    14a6:	ea 0c       	add	r14, r10
    14a8:	fb 1c       	adc	r15, r11
    14aa:	0c 1d       	adc	r16, r12
    14ac:	1d 1d       	adc	r17, r13
    14ae:	e4 82       	std	Z+4, r14	; 0x04
    14b0:	f5 82       	std	Z+5, r15	; 0x05
    14b2:	06 83       	std	Z+6, r16	; 0x06
    14b4:	17 83       	std	Z+7, r17	; 0x07
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	80 83       	st	Z, r24
    14ba:	24 81       	ldd	r18, Z+4	; 0x04
    14bc:	35 81       	ldd	r19, Z+5	; 0x05
    14be:	46 81       	ldd	r20, Z+6	; 0x06
    14c0:	57 81       	ldd	r21, Z+7	; 0x07
    14c2:	57 ff       	sbrs	r21, 7
    14c4:	1a c0       	rjmp	.+52     	; 0x14fa <_fpadd_parts+0x286>
    14c6:	c9 01       	movw	r24, r18
    14c8:	aa 27       	eor	r26, r26
    14ca:	97 fd       	sbrc	r25, 7
    14cc:	a0 95       	com	r26
    14ce:	ba 2f       	mov	r27, r26
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	90 70       	andi	r25, 0x00	; 0
    14d4:	a0 70       	andi	r26, 0x00	; 0
    14d6:	b0 70       	andi	r27, 0x00	; 0
    14d8:	56 95       	lsr	r21
    14da:	47 95       	ror	r20
    14dc:	37 95       	ror	r19
    14de:	27 95       	ror	r18
    14e0:	82 2b       	or	r24, r18
    14e2:	93 2b       	or	r25, r19
    14e4:	a4 2b       	or	r26, r20
    14e6:	b5 2b       	or	r27, r21
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	95 83       	std	Z+5, r25	; 0x05
    14ec:	a6 83       	std	Z+6, r26	; 0x06
    14ee:	b7 83       	std	Z+7, r27	; 0x07
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	93 83       	std	Z+3, r25	; 0x03
    14f8:	82 83       	std	Z+2, r24	; 0x02
    14fa:	df 01       	movw	r26, r30
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <_fpadd_parts+0x28c>
    14fe:	d2 01       	movw	r26, r4
    1500:	cd 01       	movw	r24, r26
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	e2 e1       	ldi	r30, 0x12	; 18
    1508:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__>

0000150c <__subsf3>:
    150c:	a0 e2       	ldi	r26, 0x20	; 32
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ec e8       	ldi	r30, 0x8C	; 140
    1512:	fa e0       	ldi	r31, 0x0A	; 10
    1514:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__+0x18>
    1518:	69 83       	std	Y+1, r22	; 0x01
    151a:	7a 83       	std	Y+2, r23	; 0x02
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	2d 83       	std	Y+5, r18	; 0x05
    1522:	3e 83       	std	Y+6, r19	; 0x06
    1524:	4f 83       	std	Y+7, r20	; 0x07
    1526:	58 87       	std	Y+8, r21	; 0x08
    1528:	e9 e0       	ldi	r30, 0x09	; 9
    152a:	ee 2e       	mov	r14, r30
    152c:	f1 2c       	mov	r15, r1
    152e:	ec 0e       	add	r14, r28
    1530:	fd 1e       	adc	r15, r29
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	b7 01       	movw	r22, r14
    1538:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    153c:	8e 01       	movw	r16, r28
    153e:	0f 5e       	subi	r16, 0xEF	; 239
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	ce 01       	movw	r24, r28
    1544:	05 96       	adiw	r24, 0x05	; 5
    1546:	b8 01       	movw	r22, r16
    1548:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    154c:	8a 89       	ldd	r24, Y+18	; 0x12
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	89 27       	eor	r24, r25
    1552:	8a 8b       	std	Y+18, r24	; 0x12
    1554:	c7 01       	movw	r24, r14
    1556:	b8 01       	movw	r22, r16
    1558:	ae 01       	movw	r20, r28
    155a:	47 5e       	subi	r20, 0xE7	; 231
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_fpadd_parts>
    1562:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__pack_f>
    1566:	a0 96       	adiw	r28, 0x20	; 32
    1568:	e6 e0       	ldi	r30, 0x06	; 6
    156a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__+0x18>

0000156e <__addsf3>:
    156e:	a0 e2       	ldi	r26, 0x20	; 32
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ed eb       	ldi	r30, 0xBD	; 189
    1574:	fa e0       	ldi	r31, 0x0A	; 10
    1576:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__+0x18>
    157a:	69 83       	std	Y+1, r22	; 0x01
    157c:	7a 83       	std	Y+2, r23	; 0x02
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	2d 83       	std	Y+5, r18	; 0x05
    1584:	3e 83       	std	Y+6, r19	; 0x06
    1586:	4f 83       	std	Y+7, r20	; 0x07
    1588:	58 87       	std	Y+8, r21	; 0x08
    158a:	f9 e0       	ldi	r31, 0x09	; 9
    158c:	ef 2e       	mov	r14, r31
    158e:	f1 2c       	mov	r15, r1
    1590:	ec 0e       	add	r14, r28
    1592:	fd 1e       	adc	r15, r29
    1594:	ce 01       	movw	r24, r28
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	b7 01       	movw	r22, r14
    159a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    159e:	8e 01       	movw	r16, r28
    15a0:	0f 5e       	subi	r16, 0xEF	; 239
    15a2:	1f 4f       	sbci	r17, 0xFF	; 255
    15a4:	ce 01       	movw	r24, r28
    15a6:	05 96       	adiw	r24, 0x05	; 5
    15a8:	b8 01       	movw	r22, r16
    15aa:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    15ae:	c7 01       	movw	r24, r14
    15b0:	b8 01       	movw	r22, r16
    15b2:	ae 01       	movw	r20, r28
    15b4:	47 5e       	subi	r20, 0xE7	; 231
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <_fpadd_parts>
    15bc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__pack_f>
    15c0:	a0 96       	adiw	r28, 0x20	; 32
    15c2:	e6 e0       	ldi	r30, 0x06	; 6
    15c4:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__+0x18>

000015c8 <__mulsf3>:
    15c8:	a0 e2       	ldi	r26, 0x20	; 32
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ea ee       	ldi	r30, 0xEA	; 234
    15ce:	fa e0       	ldi	r31, 0x0A	; 10
    15d0:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__>
    15d4:	69 83       	std	Y+1, r22	; 0x01
    15d6:	7a 83       	std	Y+2, r23	; 0x02
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	2d 83       	std	Y+5, r18	; 0x05
    15de:	3e 83       	std	Y+6, r19	; 0x06
    15e0:	4f 83       	std	Y+7, r20	; 0x07
    15e2:	58 87       	std	Y+8, r21	; 0x08
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	be 01       	movw	r22, r28
    15ea:	67 5f       	subi	r22, 0xF7	; 247
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    15f2:	ce 01       	movw	r24, r28
    15f4:	05 96       	adiw	r24, 0x05	; 5
    15f6:	be 01       	movw	r22, r28
    15f8:	6f 5e       	subi	r22, 0xEF	; 239
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    1600:	99 85       	ldd	r25, Y+9	; 0x09
    1602:	92 30       	cpi	r25, 0x02	; 2
    1604:	88 f0       	brcs	.+34     	; 0x1628 <__mulsf3+0x60>
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	c8 f0       	brcs	.+50     	; 0x163e <__mulsf3+0x76>
    160c:	94 30       	cpi	r25, 0x04	; 4
    160e:	19 f4       	brne	.+6      	; 0x1616 <__mulsf3+0x4e>
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	51 f4       	brne	.+20     	; 0x1628 <__mulsf3+0x60>
    1614:	04 c0       	rjmp	.+8      	; 0x161e <__mulsf3+0x56>
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	29 f4       	brne	.+10     	; 0x1624 <__mulsf3+0x5c>
    161a:	92 30       	cpi	r25, 0x02	; 2
    161c:	81 f4       	brne	.+32     	; 0x163e <__mulsf3+0x76>
    161e:	82 e3       	ldi	r24, 0x32	; 50
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	c6 c0       	rjmp	.+396    	; 0x17b0 <__mulsf3+0x1e8>
    1624:	92 30       	cpi	r25, 0x02	; 2
    1626:	49 f4       	brne	.+18     	; 0x163a <__mulsf3+0x72>
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	8a 89       	ldd	r24, Y+18	; 0x12
    162e:	98 13       	cpse	r25, r24
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	2a 87       	std	Y+10, r18	; 0x0a
    1634:	ce 01       	movw	r24, r28
    1636:	09 96       	adiw	r24, 0x09	; 9
    1638:	bb c0       	rjmp	.+374    	; 0x17b0 <__mulsf3+0x1e8>
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	49 f4       	brne	.+18     	; 0x1650 <__mulsf3+0x88>
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	8a 89       	ldd	r24, Y+18	; 0x12
    1644:	98 13       	cpse	r25, r24
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	2a 8b       	std	Y+18, r18	; 0x12
    164a:	ce 01       	movw	r24, r28
    164c:	41 96       	adiw	r24, 0x11	; 17
    164e:	b0 c0       	rjmp	.+352    	; 0x17b0 <__mulsf3+0x1e8>
    1650:	2d 84       	ldd	r2, Y+13	; 0x0d
    1652:	3e 84       	ldd	r3, Y+14	; 0x0e
    1654:	4f 84       	ldd	r4, Y+15	; 0x0f
    1656:	58 88       	ldd	r5, Y+16	; 0x10
    1658:	6d 88       	ldd	r6, Y+21	; 0x15
    165a:	7e 88       	ldd	r7, Y+22	; 0x16
    165c:	8f 88       	ldd	r8, Y+23	; 0x17
    165e:	98 8c       	ldd	r9, Y+24	; 0x18
    1660:	ee 24       	eor	r14, r14
    1662:	ff 24       	eor	r15, r15
    1664:	87 01       	movw	r16, r14
    1666:	aa 24       	eor	r10, r10
    1668:	bb 24       	eor	r11, r11
    166a:	65 01       	movw	r12, r10
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	e0 e0       	ldi	r30, 0x00	; 0
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	c1 01       	movw	r24, r2
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	90 70       	andi	r25, 0x00	; 0
    167e:	89 2b       	or	r24, r25
    1680:	e9 f0       	breq	.+58     	; 0x16bc <__mulsf3+0xf4>
    1682:	e6 0c       	add	r14, r6
    1684:	f7 1c       	adc	r15, r7
    1686:	08 1d       	adc	r16, r8
    1688:	19 1d       	adc	r17, r9
    168a:	9a 01       	movw	r18, r20
    168c:	ab 01       	movw	r20, r22
    168e:	2a 0d       	add	r18, r10
    1690:	3b 1d       	adc	r19, r11
    1692:	4c 1d       	adc	r20, r12
    1694:	5d 1d       	adc	r21, r13
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e6 14       	cp	r14, r6
    16a0:	f7 04       	cpc	r15, r7
    16a2:	08 05       	cpc	r16, r8
    16a4:	19 05       	cpc	r17, r9
    16a6:	20 f4       	brcc	.+8      	; 0x16b0 <__mulsf3+0xe8>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 e0       	ldi	r26, 0x00	; 0
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ba 01       	movw	r22, r20
    16b2:	a9 01       	movw	r20, r18
    16b4:	48 0f       	add	r20, r24
    16b6:	59 1f       	adc	r21, r25
    16b8:	6a 1f       	adc	r22, r26
    16ba:	7b 1f       	adc	r23, r27
    16bc:	aa 0c       	add	r10, r10
    16be:	bb 1c       	adc	r11, r11
    16c0:	cc 1c       	adc	r12, r12
    16c2:	dd 1c       	adc	r13, r13
    16c4:	97 fe       	sbrs	r9, 7
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <__mulsf3+0x110>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e0       	ldi	r26, 0x00	; 0
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	a8 2a       	or	r10, r24
    16d2:	b9 2a       	or	r11, r25
    16d4:	ca 2a       	or	r12, r26
    16d6:	db 2a       	or	r13, r27
    16d8:	31 96       	adiw	r30, 0x01	; 1
    16da:	e0 32       	cpi	r30, 0x20	; 32
    16dc:	f1 05       	cpc	r31, r1
    16de:	49 f0       	breq	.+18     	; 0x16f2 <__mulsf3+0x12a>
    16e0:	66 0c       	add	r6, r6
    16e2:	77 1c       	adc	r7, r7
    16e4:	88 1c       	adc	r8, r8
    16e6:	99 1c       	adc	r9, r9
    16e8:	56 94       	lsr	r5
    16ea:	47 94       	ror	r4
    16ec:	37 94       	ror	r3
    16ee:	27 94       	ror	r2
    16f0:	c3 cf       	rjmp	.-122    	; 0x1678 <__mulsf3+0xb0>
    16f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    16f4:	ea 89       	ldd	r30, Y+18	; 0x12
    16f6:	2b 89       	ldd	r18, Y+19	; 0x13
    16f8:	3c 89       	ldd	r19, Y+20	; 0x14
    16fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    16fe:	28 0f       	add	r18, r24
    1700:	39 1f       	adc	r19, r25
    1702:	2e 5f       	subi	r18, 0xFE	; 254
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	17 c0       	rjmp	.+46     	; 0x1736 <__mulsf3+0x16e>
    1708:	ca 01       	movw	r24, r20
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	89 2b       	or	r24, r25
    1710:	61 f0       	breq	.+24     	; 0x172a <__mulsf3+0x162>
    1712:	16 95       	lsr	r17
    1714:	07 95       	ror	r16
    1716:	f7 94       	ror	r15
    1718:	e7 94       	ror	r14
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e8       	ldi	r27, 0x80	; 128
    1722:	e8 2a       	or	r14, r24
    1724:	f9 2a       	or	r15, r25
    1726:	0a 2b       	or	r16, r26
    1728:	1b 2b       	or	r17, r27
    172a:	76 95       	lsr	r23
    172c:	67 95       	ror	r22
    172e:	57 95       	ror	r21
    1730:	47 95       	ror	r20
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	77 fd       	sbrc	r23, 7
    1738:	e7 cf       	rjmp	.-50     	; 0x1708 <__mulsf3+0x140>
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <__mulsf3+0x18c>
    173c:	44 0f       	add	r20, r20
    173e:	55 1f       	adc	r21, r21
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	17 fd       	sbrc	r17, 7
    1746:	41 60       	ori	r20, 0x01	; 1
    1748:	ee 0c       	add	r14, r14
    174a:	ff 1c       	adc	r15, r15
    174c:	00 1f       	adc	r16, r16
    174e:	11 1f       	adc	r17, r17
    1750:	21 50       	subi	r18, 0x01	; 1
    1752:	30 40       	sbci	r19, 0x00	; 0
    1754:	40 30       	cpi	r20, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	59 07       	cpc	r21, r25
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	69 07       	cpc	r22, r25
    175e:	90 e4       	ldi	r25, 0x40	; 64
    1760:	79 07       	cpc	r23, r25
    1762:	60 f3       	brcs	.-40     	; 0x173c <__mulsf3+0x174>
    1764:	2b 8f       	std	Y+27, r18	; 0x1b
    1766:	3c 8f       	std	Y+28, r19	; 0x1c
    1768:	db 01       	movw	r26, r22
    176a:	ca 01       	movw	r24, r20
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	a0 70       	andi	r26, 0x00	; 0
    1772:	b0 70       	andi	r27, 0x00	; 0
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	61 f4       	brne	.+24     	; 0x1796 <__mulsf3+0x1ce>
    177e:	47 fd       	sbrc	r20, 7
    1780:	0a c0       	rjmp	.+20     	; 0x1796 <__mulsf3+0x1ce>
    1782:	e1 14       	cp	r14, r1
    1784:	f1 04       	cpc	r15, r1
    1786:	01 05       	cpc	r16, r1
    1788:	11 05       	cpc	r17, r1
    178a:	29 f0       	breq	.+10     	; 0x1796 <__mulsf3+0x1ce>
    178c:	40 5c       	subi	r20, 0xC0	; 192
    178e:	5f 4f       	sbci	r21, 0xFF	; 255
    1790:	6f 4f       	sbci	r22, 0xFF	; 255
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	40 78       	andi	r20, 0x80	; 128
    1796:	1a 8e       	std	Y+26, r1	; 0x1a
    1798:	fe 17       	cp	r31, r30
    179a:	11 f0       	breq	.+4      	; 0x17a0 <__mulsf3+0x1d8>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	8a 8f       	std	Y+26, r24	; 0x1a
    17a0:	4d 8f       	std	Y+29, r20	; 0x1d
    17a2:	5e 8f       	std	Y+30, r21	; 0x1e
    17a4:	6f 8f       	std	Y+31, r22	; 0x1f
    17a6:	78 a3       	std	Y+32, r23	; 0x20
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	89 8f       	std	Y+25, r24	; 0x19
    17ac:	ce 01       	movw	r24, r28
    17ae:	49 96       	adiw	r24, 0x19	; 25
    17b0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__pack_f>
    17b4:	a0 96       	adiw	r28, 0x20	; 32
    17b6:	e2 e1       	ldi	r30, 0x12	; 18
    17b8:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__>

000017bc <__gesf2>:
    17bc:	a8 e1       	ldi	r26, 0x18	; 24
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e4 ee       	ldi	r30, 0xE4	; 228
    17c2:	fb e0       	ldi	r31, 0x0B	; 11
    17c4:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__+0x18>
    17c8:	69 83       	std	Y+1, r22	; 0x01
    17ca:	7a 83       	std	Y+2, r23	; 0x02
    17cc:	8b 83       	std	Y+3, r24	; 0x03
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	2d 83       	std	Y+5, r18	; 0x05
    17d2:	3e 83       	std	Y+6, r19	; 0x06
    17d4:	4f 83       	std	Y+7, r20	; 0x07
    17d6:	58 87       	std	Y+8, r21	; 0x08
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	e8 2e       	mov	r14, r24
    17dc:	f1 2c       	mov	r15, r1
    17de:	ec 0e       	add	r14, r28
    17e0:	fd 1e       	adc	r15, r29
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	b7 01       	movw	r22, r14
    17e8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    17ec:	8e 01       	movw	r16, r28
    17ee:	0f 5e       	subi	r16, 0xEF	; 239
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	ce 01       	movw	r24, r28
    17f4:	05 96       	adiw	r24, 0x05	; 5
    17f6:	b8 01       	movw	r22, r16
    17f8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	40 f0       	brcs	.+16     	; 0x1812 <__gesf2+0x56>
    1802:	89 89       	ldd	r24, Y+17	; 0x11
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	28 f0       	brcs	.+10     	; 0x1812 <__gesf2+0x56>
    1808:	c7 01       	movw	r24, r14
    180a:	b8 01       	movw	r22, r16
    180c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fpcmp_parts_f>
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <__gesf2+0x58>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	68 96       	adiw	r28, 0x18	; 24
    1816:	e6 e0       	ldi	r30, 0x06	; 6
    1818:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__+0x18>

0000181c <__fixsfsi>:
    181c:	ac e0       	ldi	r26, 0x0C	; 12
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e4 e1       	ldi	r30, 0x14	; 20
    1822:	fc e0       	ldi	r31, 0x0C	; 12
    1824:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__+0x20>
    1828:	69 83       	std	Y+1, r22	; 0x01
    182a:	7a 83       	std	Y+2, r23	; 0x02
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	be 01       	movw	r22, r28
    1836:	6b 5f       	subi	r22, 0xFB	; 251
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__unpack_f>
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	61 f1       	breq	.+88     	; 0x189c <__fixsfsi+0x80>
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	50 f1       	brcs	.+84     	; 0x189c <__fixsfsi+0x80>
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	21 f4       	brne	.+8      	; 0x1854 <__fixsfsi+0x38>
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	88 23       	and	r24, r24
    1850:	51 f1       	breq	.+84     	; 0x18a6 <__fixsfsi+0x8a>
    1852:	2e c0       	rjmp	.+92     	; 0x18b0 <__fixsfsi+0x94>
    1854:	2f 81       	ldd	r18, Y+7	; 0x07
    1856:	38 85       	ldd	r19, Y+8	; 0x08
    1858:	37 fd       	sbrc	r19, 7
    185a:	20 c0       	rjmp	.+64     	; 0x189c <__fixsfsi+0x80>
    185c:	6e 81       	ldd	r22, Y+6	; 0x06
    185e:	2f 31       	cpi	r18, 0x1F	; 31
    1860:	31 05       	cpc	r19, r1
    1862:	1c f0       	brlt	.+6      	; 0x186a <__fixsfsi+0x4e>
    1864:	66 23       	and	r22, r22
    1866:	f9 f0       	breq	.+62     	; 0x18a6 <__fixsfsi+0x8a>
    1868:	23 c0       	rjmp	.+70     	; 0x18b0 <__fixsfsi+0x94>
    186a:	8e e1       	ldi	r24, 0x1E	; 30
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	82 1b       	sub	r24, r18
    1870:	93 0b       	sbc	r25, r19
    1872:	29 85       	ldd	r18, Y+9	; 0x09
    1874:	3a 85       	ldd	r19, Y+10	; 0x0a
    1876:	4b 85       	ldd	r20, Y+11	; 0x0b
    1878:	5c 85       	ldd	r21, Y+12	; 0x0c
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <__fixsfsi+0x68>
    187c:	56 95       	lsr	r21
    187e:	47 95       	ror	r20
    1880:	37 95       	ror	r19
    1882:	27 95       	ror	r18
    1884:	8a 95       	dec	r24
    1886:	d2 f7       	brpl	.-12     	; 0x187c <__fixsfsi+0x60>
    1888:	66 23       	and	r22, r22
    188a:	b1 f0       	breq	.+44     	; 0x18b8 <__fixsfsi+0x9c>
    188c:	50 95       	com	r21
    188e:	40 95       	com	r20
    1890:	30 95       	com	r19
    1892:	21 95       	neg	r18
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	4f 4f       	sbci	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	0e c0       	rjmp	.+28     	; 0x18b8 <__fixsfsi+0x9c>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <__fixsfsi+0x9c>
    18a6:	2f ef       	ldi	r18, 0xFF	; 255
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f ef       	ldi	r20, 0xFF	; 255
    18ac:	5f e7       	ldi	r21, 0x7F	; 127
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <__fixsfsi+0x9c>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e8       	ldi	r21, 0x80	; 128
    18b8:	b9 01       	movw	r22, r18
    18ba:	ca 01       	movw	r24, r20
    18bc:	2c 96       	adiw	r28, 0x0c	; 12
    18be:	e2 e0       	ldi	r30, 0x02	; 2
    18c0:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__+0x20>

000018c4 <__floatunsisf>:
    18c4:	a8 e0       	ldi	r26, 0x08	; 8
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e8 e6       	ldi	r30, 0x68	; 104
    18ca:	fc e0       	ldi	r31, 0x0C	; 12
    18cc:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__prologue_saves__+0x10>
    18d0:	7b 01       	movw	r14, r22
    18d2:	8c 01       	movw	r16, r24
    18d4:	61 15       	cp	r22, r1
    18d6:	71 05       	cpc	r23, r1
    18d8:	81 05       	cpc	r24, r1
    18da:	91 05       	cpc	r25, r1
    18dc:	19 f4       	brne	.+6      	; 0x18e4 <__floatunsisf+0x20>
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	60 c0       	rjmp	.+192    	; 0x19a4 <__floatunsisf+0xe0>
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	8e e1       	ldi	r24, 0x1E	; 30
    18ea:	c8 2e       	mov	r12, r24
    18ec:	d1 2c       	mov	r13, r1
    18ee:	dc 82       	std	Y+4, r13	; 0x04
    18f0:	cb 82       	std	Y+3, r12	; 0x03
    18f2:	ed 82       	std	Y+5, r14	; 0x05
    18f4:	fe 82       	std	Y+6, r15	; 0x06
    18f6:	0f 83       	std	Y+7, r16	; 0x07
    18f8:	18 87       	std	Y+8, r17	; 0x08
    18fa:	c8 01       	movw	r24, r16
    18fc:	b7 01       	movw	r22, r14
    18fe:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__clzsi2>
    1902:	fc 01       	movw	r30, r24
    1904:	31 97       	sbiw	r30, 0x01	; 1
    1906:	f7 ff       	sbrs	r31, 7
    1908:	3b c0       	rjmp	.+118    	; 0x1980 <__floatunsisf+0xbc>
    190a:	22 27       	eor	r18, r18
    190c:	33 27       	eor	r19, r19
    190e:	2e 1b       	sub	r18, r30
    1910:	3f 0b       	sbc	r19, r31
    1912:	57 01       	movw	r10, r14
    1914:	68 01       	movw	r12, r16
    1916:	02 2e       	mov	r0, r18
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <__floatunsisf+0x5e>
    191a:	d6 94       	lsr	r13
    191c:	c7 94       	ror	r12
    191e:	b7 94       	ror	r11
    1920:	a7 94       	ror	r10
    1922:	0a 94       	dec	r0
    1924:	d2 f7       	brpl	.-12     	; 0x191a <__floatunsisf+0x56>
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__floatunsisf+0x7c>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	aa 1f       	adc	r26, r26
    193e:	bb 1f       	adc	r27, r27
    1940:	2a 95       	dec	r18
    1942:	d2 f7       	brpl	.-12     	; 0x1938 <__floatunsisf+0x74>
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	a1 09       	sbc	r26, r1
    1948:	b1 09       	sbc	r27, r1
    194a:	8e 21       	and	r24, r14
    194c:	9f 21       	and	r25, r15
    194e:	a0 23       	and	r26, r16
    1950:	b1 23       	and	r27, r17
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	a1 05       	cpc	r26, r1
    1956:	b1 05       	cpc	r27, r1
    1958:	21 f0       	breq	.+8      	; 0x1962 <__floatunsisf+0x9e>
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	4a 29       	or	r20, r10
    1964:	5b 29       	or	r21, r11
    1966:	6c 29       	or	r22, r12
    1968:	7d 29       	or	r23, r13
    196a:	4d 83       	std	Y+5, r20	; 0x05
    196c:	5e 83       	std	Y+6, r21	; 0x06
    196e:	6f 83       	std	Y+7, r22	; 0x07
    1970:	78 87       	std	Y+8, r23	; 0x08
    1972:	8e e1       	ldi	r24, 0x1E	; 30
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	8e 1b       	sub	r24, r30
    1978:	9f 0b       	sbc	r25, r31
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	12 c0       	rjmp	.+36     	; 0x19a4 <__floatunsisf+0xe0>
    1980:	30 97       	sbiw	r30, 0x00	; 0
    1982:	81 f0       	breq	.+32     	; 0x19a4 <__floatunsisf+0xe0>
    1984:	0e 2e       	mov	r0, r30
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <__floatunsisf+0xcc>
    1988:	ee 0c       	add	r14, r14
    198a:	ff 1c       	adc	r15, r15
    198c:	00 1f       	adc	r16, r16
    198e:	11 1f       	adc	r17, r17
    1990:	0a 94       	dec	r0
    1992:	d2 f7       	brpl	.-12     	; 0x1988 <__floatunsisf+0xc4>
    1994:	ed 82       	std	Y+5, r14	; 0x05
    1996:	fe 82       	std	Y+6, r15	; 0x06
    1998:	0f 83       	std	Y+7, r16	; 0x07
    199a:	18 87       	std	Y+8, r17	; 0x08
    199c:	ce 1a       	sub	r12, r30
    199e:	df 0a       	sbc	r13, r31
    19a0:	dc 82       	std	Y+4, r13	; 0x04
    19a2:	cb 82       	std	Y+3, r12	; 0x03
    19a4:	1a 82       	std	Y+2, r1	; 0x02
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__pack_f>
    19ae:	28 96       	adiw	r28, 0x08	; 8
    19b0:	ea e0       	ldi	r30, 0x0A	; 10
    19b2:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__epilogue_restores__+0x10>

000019b6 <__clzsi2>:
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	7b 01       	movw	r14, r22
    19c0:	8c 01       	movw	r16, r24
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	e8 16       	cp	r14, r24
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	f8 06       	cpc	r15, r24
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	08 07       	cpc	r16, r24
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	18 07       	cpc	r17, r24
    19d2:	88 f4       	brcc	.+34     	; 0x19f6 <__clzsi2+0x40>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	e8 16       	cp	r14, r24
    19d8:	f1 04       	cpc	r15, r1
    19da:	01 05       	cpc	r16, r1
    19dc:	11 05       	cpc	r17, r1
    19de:	31 f0       	breq	.+12     	; 0x19ec <__clzsi2+0x36>
    19e0:	28 f0       	brcs	.+10     	; 0x19ec <__clzsi2+0x36>
    19e2:	88 e0       	ldi	r24, 0x08	; 8
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	17 c0       	rjmp	.+46     	; 0x1a1a <__clzsi2+0x64>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e0       	ldi	r26, 0x00	; 0
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	12 c0       	rjmp	.+36     	; 0x1a1a <__clzsi2+0x64>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	e8 16       	cp	r14, r24
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	f8 06       	cpc	r15, r24
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 07       	cpc	r16, r24
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	18 07       	cpc	r17, r24
    1a06:	28 f0       	brcs	.+10     	; 0x1a12 <__clzsi2+0x5c>
    1a08:	88 e1       	ldi	r24, 0x18	; 24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__clzsi2+0x64>
    1a12:	80 e1       	ldi	r24, 0x10	; 16
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e0       	ldi	r26, 0x00	; 0
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	20 e2       	ldi	r18, 0x20	; 32
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	28 1b       	sub	r18, r24
    1a24:	39 0b       	sbc	r19, r25
    1a26:	4a 0b       	sbc	r20, r26
    1a28:	5b 0b       	sbc	r21, r27
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__clzsi2+0x7e>
    1a2c:	16 95       	lsr	r17
    1a2e:	07 95       	ror	r16
    1a30:	f7 94       	ror	r15
    1a32:	e7 94       	ror	r14
    1a34:	8a 95       	dec	r24
    1a36:	d2 f7       	brpl	.-12     	; 0x1a2c <__clzsi2+0x76>
    1a38:	f7 01       	movw	r30, r14
    1a3a:	e6 5c       	subi	r30, 0xC6	; 198
    1a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 1b       	sub	r18, r24
    1a42:	31 09       	sbc	r19, r1
    1a44:	41 09       	sbc	r20, r1
    1a46:	51 09       	sbc	r21, r1
    1a48:	c9 01       	movw	r24, r18
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	08 95       	ret

00001a54 <__pack_f>:
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e4 80       	ldd	r14, Z+4	; 0x04
    1a62:	f5 80       	ldd	r15, Z+5	; 0x05
    1a64:	06 81       	ldd	r16, Z+6	; 0x06
    1a66:	17 81       	ldd	r17, Z+7	; 0x07
    1a68:	d1 80       	ldd	r13, Z+1	; 0x01
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	48 f4       	brcc	.+18     	; 0x1a82 <__pack_f+0x2e>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e1       	ldi	r26, 0x10	; 16
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e8 2a       	or	r14, r24
    1a7a:	f9 2a       	or	r15, r25
    1a7c:	0a 2b       	or	r16, r26
    1a7e:	1b 2b       	or	r17, r27
    1a80:	a5 c0       	rjmp	.+330    	; 0x1bcc <__pack_f+0x178>
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__pack_f+0x34>
    1a86:	9f c0       	rjmp	.+318    	; 0x1bc6 <__pack_f+0x172>
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <__pack_f+0x40>
    1a8c:	ee 24       	eor	r14, r14
    1a8e:	ff 24       	eor	r15, r15
    1a90:	87 01       	movw	r16, r14
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <__pack_f+0x4a>
    1a94:	e1 14       	cp	r14, r1
    1a96:	f1 04       	cpc	r15, r1
    1a98:	01 05       	cpc	r16, r1
    1a9a:	11 05       	cpc	r17, r1
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <__pack_f+0x50>
    1a9e:	e0 e0       	ldi	r30, 0x00	; 0
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	96 c0       	rjmp	.+300    	; 0x1bd0 <__pack_f+0x17c>
    1aa4:	62 81       	ldd	r22, Z+2	; 0x02
    1aa6:	73 81       	ldd	r23, Z+3	; 0x03
    1aa8:	9f ef       	ldi	r25, 0xFF	; 255
    1aaa:	62 38       	cpi	r22, 0x82	; 130
    1aac:	79 07       	cpc	r23, r25
    1aae:	0c f0       	brlt	.+2      	; 0x1ab2 <__pack_f+0x5e>
    1ab0:	5b c0       	rjmp	.+182    	; 0x1b68 <__pack_f+0x114>
    1ab2:	22 e8       	ldi	r18, 0x82	; 130
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	26 1b       	sub	r18, r22
    1ab8:	37 0b       	sbc	r19, r23
    1aba:	2a 31       	cpi	r18, 0x1A	; 26
    1abc:	31 05       	cpc	r19, r1
    1abe:	2c f0       	brlt	.+10     	; 0x1aca <__pack_f+0x76>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	2a c0       	rjmp	.+84     	; 0x1b1e <__pack_f+0xca>
    1aca:	b8 01       	movw	r22, r16
    1acc:	a7 01       	movw	r20, r14
    1ace:	02 2e       	mov	r0, r18
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <__pack_f+0x86>
    1ad2:	76 95       	lsr	r23
    1ad4:	67 95       	ror	r22
    1ad6:	57 95       	ror	r21
    1ad8:	47 95       	ror	r20
    1ada:	0a 94       	dec	r0
    1adc:	d2 f7       	brpl	.-12     	; 0x1ad2 <__pack_f+0x7e>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <__pack_f+0x9c>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	aa 1f       	adc	r26, r26
    1aee:	bb 1f       	adc	r27, r27
    1af0:	2a 95       	dec	r18
    1af2:	d2 f7       	brpl	.-12     	; 0x1ae8 <__pack_f+0x94>
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	a1 09       	sbc	r26, r1
    1af8:	b1 09       	sbc	r27, r1
    1afa:	8e 21       	and	r24, r14
    1afc:	9f 21       	and	r25, r15
    1afe:	a0 23       	and	r26, r16
    1b00:	b1 23       	and	r27, r17
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	a1 05       	cpc	r26, r1
    1b06:	b1 05       	cpc	r27, r1
    1b08:	21 f0       	breq	.+8      	; 0x1b12 <__pack_f+0xbe>
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	9a 01       	movw	r18, r20
    1b14:	ab 01       	movw	r20, r22
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	da 01       	movw	r26, r20
    1b20:	c9 01       	movw	r24, r18
    1b22:	8f 77       	andi	r24, 0x7F	; 127
    1b24:	90 70       	andi	r25, 0x00	; 0
    1b26:	a0 70       	andi	r26, 0x00	; 0
    1b28:	b0 70       	andi	r27, 0x00	; 0
    1b2a:	80 34       	cpi	r24, 0x40	; 64
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	a1 05       	cpc	r26, r1
    1b30:	b1 05       	cpc	r27, r1
    1b32:	39 f4       	brne	.+14     	; 0x1b42 <__pack_f+0xee>
    1b34:	27 ff       	sbrs	r18, 7
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <__pack_f+0xf6>
    1b38:	20 5c       	subi	r18, 0xC0	; 192
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <__pack_f+0xf6>
    1b42:	21 5c       	subi	r18, 0xC1	; 193
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	4f 4f       	sbci	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	e0 e0       	ldi	r30, 0x00	; 0
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	20 30       	cpi	r18, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	3a 07       	cpc	r19, r26
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	4a 07       	cpc	r20, r26
    1b58:	a0 e4       	ldi	r26, 0x40	; 64
    1b5a:	5a 07       	cpc	r21, r26
    1b5c:	10 f0       	brcs	.+4      	; 0x1b62 <__pack_f+0x10e>
    1b5e:	e1 e0       	ldi	r30, 0x01	; 1
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	79 01       	movw	r14, r18
    1b64:	8a 01       	movw	r16, r20
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <__pack_f+0x162>
    1b68:	60 38       	cpi	r22, 0x80	; 128
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	64 f5       	brge	.+88     	; 0x1bc6 <__pack_f+0x172>
    1b6e:	fb 01       	movw	r30, r22
    1b70:	e1 58       	subi	r30, 0x81	; 129
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	d8 01       	movw	r26, r16
    1b76:	c7 01       	movw	r24, r14
    1b78:	8f 77       	andi	r24, 0x7F	; 127
    1b7a:	90 70       	andi	r25, 0x00	; 0
    1b7c:	a0 70       	andi	r26, 0x00	; 0
    1b7e:	b0 70       	andi	r27, 0x00	; 0
    1b80:	80 34       	cpi	r24, 0x40	; 64
    1b82:	91 05       	cpc	r25, r1
    1b84:	a1 05       	cpc	r26, r1
    1b86:	b1 05       	cpc	r27, r1
    1b88:	39 f4       	brne	.+14     	; 0x1b98 <__pack_f+0x144>
    1b8a:	e7 fe       	sbrs	r14, 7
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <__pack_f+0x154>
    1b8e:	80 e4       	ldi	r24, 0x40	; 64
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e0       	ldi	r26, 0x00	; 0
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <__pack_f+0x14c>
    1b98:	8f e3       	ldi	r24, 0x3F	; 63
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e8 0e       	add	r14, r24
    1ba2:	f9 1e       	adc	r15, r25
    1ba4:	0a 1f       	adc	r16, r26
    1ba6:	1b 1f       	adc	r17, r27
    1ba8:	17 ff       	sbrs	r17, 7
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <__pack_f+0x162>
    1bac:	16 95       	lsr	r17
    1bae:	07 95       	ror	r16
    1bb0:	f7 94       	ror	r15
    1bb2:	e7 94       	ror	r14
    1bb4:	31 96       	adiw	r30, 0x01	; 1
    1bb6:	87 e0       	ldi	r24, 0x07	; 7
    1bb8:	16 95       	lsr	r17
    1bba:	07 95       	ror	r16
    1bbc:	f7 94       	ror	r15
    1bbe:	e7 94       	ror	r14
    1bc0:	8a 95       	dec	r24
    1bc2:	d1 f7       	brne	.-12     	; 0x1bb8 <__pack_f+0x164>
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <__pack_f+0x17c>
    1bc6:	ee 24       	eor	r14, r14
    1bc8:	ff 24       	eor	r15, r15
    1bca:	87 01       	movw	r16, r14
    1bcc:	ef ef       	ldi	r30, 0xFF	; 255
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	6e 2f       	mov	r22, r30
    1bd2:	67 95       	ror	r22
    1bd4:	66 27       	eor	r22, r22
    1bd6:	67 95       	ror	r22
    1bd8:	90 2f       	mov	r25, r16
    1bda:	9f 77       	andi	r25, 0x7F	; 127
    1bdc:	d7 94       	ror	r13
    1bde:	dd 24       	eor	r13, r13
    1be0:	d7 94       	ror	r13
    1be2:	8e 2f       	mov	r24, r30
    1be4:	86 95       	lsr	r24
    1be6:	49 2f       	mov	r20, r25
    1be8:	46 2b       	or	r20, r22
    1bea:	58 2f       	mov	r21, r24
    1bec:	5d 29       	or	r21, r13
    1bee:	b7 01       	movw	r22, r14
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	08 95       	ret

00001bfe <__unpack_f>:
    1bfe:	fc 01       	movw	r30, r24
    1c00:	db 01       	movw	r26, r22
    1c02:	40 81       	ld	r20, Z
    1c04:	51 81       	ldd	r21, Z+1	; 0x01
    1c06:	22 81       	ldd	r18, Z+2	; 0x02
    1c08:	62 2f       	mov	r22, r18
    1c0a:	6f 77       	andi	r22, 0x7F	; 127
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	22 1f       	adc	r18, r18
    1c10:	22 27       	eor	r18, r18
    1c12:	22 1f       	adc	r18, r18
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	89 2f       	mov	r24, r25
    1c18:	88 0f       	add	r24, r24
    1c1a:	82 2b       	or	r24, r18
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	99 1f       	adc	r25, r25
    1c22:	99 27       	eor	r25, r25
    1c24:	99 1f       	adc	r25, r25
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	9c 93       	st	X, r25
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
    1c2c:	21 15       	cp	r18, r1
    1c2e:	31 05       	cpc	r19, r1
    1c30:	a9 f5       	brne	.+106    	; 0x1c9c <__unpack_f+0x9e>
    1c32:	41 15       	cp	r20, r1
    1c34:	51 05       	cpc	r21, r1
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <__unpack_f+0x42>
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	37 c0       	rjmp	.+110    	; 0x1cae <__unpack_f+0xb0>
    1c40:	82 e8       	ldi	r24, 0x82	; 130
    1c42:	9f ef       	ldi	r25, 0xFF	; 255
    1c44:	13 96       	adiw	r26, 0x03	; 3
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
    1c4a:	12 97       	sbiw	r26, 0x02	; 2
    1c4c:	9a 01       	movw	r18, r20
    1c4e:	ab 01       	movw	r20, r22
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	44 1f       	adc	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	6a 95       	dec	r22
    1c5c:	d1 f7       	brne	.-12     	; 0x1c52 <__unpack_f+0x54>
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	8c 93       	st	X, r24
    1c62:	0d c0       	rjmp	.+26     	; 0x1c7e <__unpack_f+0x80>
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	44 1f       	adc	r20, r20
    1c6a:	55 1f       	adc	r21, r21
    1c6c:	12 96       	adiw	r26, 0x02	; 2
    1c6e:	8d 91       	ld	r24, X+
    1c70:	9c 91       	ld	r25, X
    1c72:	13 97       	sbiw	r26, 0x03	; 3
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	13 96       	adiw	r26, 0x03	; 3
    1c78:	9c 93       	st	X, r25
    1c7a:	8e 93       	st	-X, r24
    1c7c:	12 97       	sbiw	r26, 0x02	; 2
    1c7e:	20 30       	cpi	r18, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	38 07       	cpc	r19, r24
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	48 07       	cpc	r20, r24
    1c88:	80 e4       	ldi	r24, 0x40	; 64
    1c8a:	58 07       	cpc	r21, r24
    1c8c:	58 f3       	brcs	.-42     	; 0x1c64 <__unpack_f+0x66>
    1c8e:	14 96       	adiw	r26, 0x04	; 4
    1c90:	2d 93       	st	X+, r18
    1c92:	3d 93       	st	X+, r19
    1c94:	4d 93       	st	X+, r20
    1c96:	5c 93       	st	X, r21
    1c98:	17 97       	sbiw	r26, 0x07	; 7
    1c9a:	08 95       	ret
    1c9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	79 f4       	brne	.+30     	; 0x1cc0 <__unpack_f+0xc2>
    1ca2:	41 15       	cp	r20, r1
    1ca4:	51 05       	cpc	r21, r1
    1ca6:	61 05       	cpc	r22, r1
    1ca8:	71 05       	cpc	r23, r1
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <__unpack_f+0xb4>
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	8c 93       	st	X, r24
    1cb0:	08 95       	ret
    1cb2:	64 ff       	sbrs	r22, 4
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <__unpack_f+0xbe>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	8c 93       	st	X, r24
    1cba:	12 c0       	rjmp	.+36     	; 0x1ce0 <__unpack_f+0xe2>
    1cbc:	1c 92       	st	X, r1
    1cbe:	10 c0       	rjmp	.+32     	; 0x1ce0 <__unpack_f+0xe2>
    1cc0:	2f 57       	subi	r18, 0x7F	; 127
    1cc2:	30 40       	sbci	r19, 0x00	; 0
    1cc4:	13 96       	adiw	r26, 0x03	; 3
    1cc6:	3c 93       	st	X, r19
    1cc8:	2e 93       	st	-X, r18
    1cca:	12 97       	sbiw	r26, 0x02	; 2
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	8c 93       	st	X, r24
    1cd0:	87 e0       	ldi	r24, 0x07	; 7
    1cd2:	44 0f       	add	r20, r20
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	66 1f       	adc	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	8a 95       	dec	r24
    1cdc:	d1 f7       	brne	.-12     	; 0x1cd2 <__unpack_f+0xd4>
    1cde:	70 64       	ori	r23, 0x40	; 64
    1ce0:	14 96       	adiw	r26, 0x04	; 4
    1ce2:	4d 93       	st	X+, r20
    1ce4:	5d 93       	st	X+, r21
    1ce6:	6d 93       	st	X+, r22
    1ce8:	7c 93       	st	X, r23
    1cea:	17 97       	sbiw	r26, 0x07	; 7
    1cec:	08 95       	ret

00001cee <__fpcmp_parts_f>:
    1cee:	1f 93       	push	r17
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	9c 91       	ld	r25, X
    1cf6:	92 30       	cpi	r25, 0x02	; 2
    1cf8:	08 f4       	brcc	.+2      	; 0x1cfc <__fpcmp_parts_f+0xe>
    1cfa:	47 c0       	rjmp	.+142    	; 0x1d8a <__fpcmp_parts_f+0x9c>
    1cfc:	80 81       	ld	r24, Z
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <__fpcmp_parts_f+0x16>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <__fpcmp_parts_f+0x9c>
    1d04:	94 30       	cpi	r25, 0x04	; 4
    1d06:	51 f4       	brne	.+20     	; 0x1d1c <__fpcmp_parts_f+0x2e>
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	1c 91       	ld	r17, X
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	99 f5       	brne	.+102    	; 0x1d76 <__fpcmp_parts_f+0x88>
    1d10:	81 81       	ldd	r24, Z+1	; 0x01
    1d12:	68 2f       	mov	r22, r24
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	61 1b       	sub	r22, r17
    1d18:	71 09       	sbc	r23, r1
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <__fpcmp_parts_f+0xac>
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <__fpcmp_parts_f+0x3a>
    1d20:	92 30       	cpi	r25, 0x02	; 2
    1d22:	31 f4       	brne	.+12     	; 0x1d30 <__fpcmp_parts_f+0x42>
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	b9 f1       	breq	.+110    	; 0x1d96 <__fpcmp_parts_f+0xa8>
    1d28:	81 81       	ldd	r24, Z+1	; 0x01
    1d2a:	88 23       	and	r24, r24
    1d2c:	89 f1       	breq	.+98     	; 0x1d90 <__fpcmp_parts_f+0xa2>
    1d2e:	2d c0       	rjmp	.+90     	; 0x1d8a <__fpcmp_parts_f+0x9c>
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	1c 91       	ld	r17, X
    1d34:	11 97       	sbiw	r26, 0x01	; 1
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	f1 f0       	breq	.+60     	; 0x1d76 <__fpcmp_parts_f+0x88>
    1d3a:	81 81       	ldd	r24, Z+1	; 0x01
    1d3c:	18 17       	cp	r17, r24
    1d3e:	d9 f4       	brne	.+54     	; 0x1d76 <__fpcmp_parts_f+0x88>
    1d40:	12 96       	adiw	r26, 0x02	; 2
    1d42:	2d 91       	ld	r18, X+
    1d44:	3c 91       	ld	r19, X
    1d46:	13 97       	sbiw	r26, 0x03	; 3
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	82 17       	cp	r24, r18
    1d4e:	93 07       	cpc	r25, r19
    1d50:	94 f0       	brlt	.+36     	; 0x1d76 <__fpcmp_parts_f+0x88>
    1d52:	28 17       	cp	r18, r24
    1d54:	39 07       	cpc	r19, r25
    1d56:	bc f0       	brlt	.+46     	; 0x1d86 <__fpcmp_parts_f+0x98>
    1d58:	14 96       	adiw	r26, 0x04	; 4
    1d5a:	8d 91       	ld	r24, X+
    1d5c:	9d 91       	ld	r25, X+
    1d5e:	0d 90       	ld	r0, X+
    1d60:	bc 91       	ld	r27, X
    1d62:	a0 2d       	mov	r26, r0
    1d64:	24 81       	ldd	r18, Z+4	; 0x04
    1d66:	35 81       	ldd	r19, Z+5	; 0x05
    1d68:	46 81       	ldd	r20, Z+6	; 0x06
    1d6a:	57 81       	ldd	r21, Z+7	; 0x07
    1d6c:	28 17       	cp	r18, r24
    1d6e:	39 07       	cpc	r19, r25
    1d70:	4a 07       	cpc	r20, r26
    1d72:	5b 07       	cpc	r21, r27
    1d74:	18 f4       	brcc	.+6      	; 0x1d7c <__fpcmp_parts_f+0x8e>
    1d76:	11 23       	and	r17, r17
    1d78:	41 f0       	breq	.+16     	; 0x1d8a <__fpcmp_parts_f+0x9c>
    1d7a:	0a c0       	rjmp	.+20     	; 0x1d90 <__fpcmp_parts_f+0xa2>
    1d7c:	82 17       	cp	r24, r18
    1d7e:	93 07       	cpc	r25, r19
    1d80:	a4 07       	cpc	r26, r20
    1d82:	b5 07       	cpc	r27, r21
    1d84:	40 f4       	brcc	.+16     	; 0x1d96 <__fpcmp_parts_f+0xa8>
    1d86:	11 23       	and	r17, r17
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <__fpcmp_parts_f+0xa2>
    1d8a:	61 e0       	ldi	r22, 0x01	; 1
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <__fpcmp_parts_f+0xac>
    1d90:	6f ef       	ldi	r22, 0xFF	; 255
    1d92:	7f ef       	ldi	r23, 0xFF	; 255
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <__fpcmp_parts_f+0xac>
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	1f 91       	pop	r17
    1d9e:	08 95       	ret

00001da0 <__udivmodhi4>:
    1da0:	aa 1b       	sub	r26, r26
    1da2:	bb 1b       	sub	r27, r27
    1da4:	51 e1       	ldi	r21, 0x11	; 17
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <__udivmodhi4_ep>

00001da8 <__udivmodhi4_loop>:
    1da8:	aa 1f       	adc	r26, r26
    1daa:	bb 1f       	adc	r27, r27
    1dac:	a6 17       	cp	r26, r22
    1dae:	b7 07       	cpc	r27, r23
    1db0:	10 f0       	brcs	.+4      	; 0x1db6 <__udivmodhi4_ep>
    1db2:	a6 1b       	sub	r26, r22
    1db4:	b7 0b       	sbc	r27, r23

00001db6 <__udivmodhi4_ep>:
    1db6:	88 1f       	adc	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	5a 95       	dec	r21
    1dbc:	a9 f7       	brne	.-22     	; 0x1da8 <__udivmodhi4_loop>
    1dbe:	80 95       	com	r24
    1dc0:	90 95       	com	r25
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	08 95       	ret

00001dc8 <__divmodhi4>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	09 2e       	mov	r0, r25
    1dcc:	07 26       	eor	r0, r23
    1dce:	0a d0       	rcall	.+20     	; 0x1de4 <__divmodhi4_neg1>
    1dd0:	77 fd       	sbrc	r23, 7
    1dd2:	04 d0       	rcall	.+8      	; 0x1ddc <__divmodhi4_neg2>
    1dd4:	e5 df       	rcall	.-54     	; 0x1da0 <__udivmodhi4>
    1dd6:	06 d0       	rcall	.+12     	; 0x1de4 <__divmodhi4_neg1>
    1dd8:	00 20       	and	r0, r0
    1dda:	1a f4       	brpl	.+6      	; 0x1de2 <__divmodhi4_exit>

00001ddc <__divmodhi4_neg2>:
    1ddc:	70 95       	com	r23
    1dde:	61 95       	neg	r22
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255

00001de2 <__divmodhi4_exit>:
    1de2:	08 95       	ret

00001de4 <__divmodhi4_neg1>:
    1de4:	f6 f7       	brtc	.-4      	; 0x1de2 <__divmodhi4_exit>
    1de6:	90 95       	com	r25
    1de8:	81 95       	neg	r24
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	08 95       	ret

00001dee <__prologue_saves__>:
    1dee:	2f 92       	push	r2
    1df0:	3f 92       	push	r3
    1df2:	4f 92       	push	r4
    1df4:	5f 92       	push	r5
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	ca 1b       	sub	r28, r26
    1e18:	db 0b       	sbc	r29, r27
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	09 94       	ijmp

00001e26 <__epilogue_restores__>:
    1e26:	2a 88       	ldd	r2, Y+18	; 0x12
    1e28:	39 88       	ldd	r3, Y+17	; 0x11
    1e2a:	48 88       	ldd	r4, Y+16	; 0x10
    1e2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e38:	b9 84       	ldd	r11, Y+9	; 0x09
    1e3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e3c:	df 80       	ldd	r13, Y+7	; 0x07
    1e3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e40:	fd 80       	ldd	r15, Y+5	; 0x05
    1e42:	0c 81       	ldd	r16, Y+4	; 0x04
    1e44:	1b 81       	ldd	r17, Y+3	; 0x03
    1e46:	aa 81       	ldd	r26, Y+2	; 0x02
    1e48:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4a:	ce 0f       	add	r28, r30
    1e4c:	d1 1d       	adc	r29, r1
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	ed 01       	movw	r28, r26
    1e5a:	08 95       	ret

00001e5c <fputs>:
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	7c 01       	movw	r14, r24
    1e6a:	8b 01       	movw	r16, r22
    1e6c:	db 01       	movw	r26, r22
    1e6e:	13 96       	adiw	r26, 0x03	; 3
    1e70:	8c 91       	ld	r24, X
    1e72:	81 fd       	sbrc	r24, 1
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <fputs+0x20>
    1e76:	cf ef       	ldi	r28, 0xFF	; 255
    1e78:	df ef       	ldi	r29, 0xFF	; 255
    1e7a:	13 c0       	rjmp	.+38     	; 0x1ea2 <fputs+0x46>
    1e7c:	c0 e0       	ldi	r28, 0x00	; 0
    1e7e:	d0 e0       	ldi	r29, 0x00	; 0
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <fputs+0x3c>
    1e82:	d8 01       	movw	r26, r16
    1e84:	18 96       	adiw	r26, 0x08	; 8
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	19 97       	sbiw	r26, 0x09	; 9
    1e8c:	b8 01       	movw	r22, r16
    1e8e:	09 95       	icall
    1e90:	89 2b       	or	r24, r25
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <fputs+0x3c>
    1e94:	cf ef       	ldi	r28, 0xFF	; 255
    1e96:	df ef       	ldi	r29, 0xFF	; 255
    1e98:	f7 01       	movw	r30, r14
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	7f 01       	movw	r14, r30
    1e9e:	88 23       	and	r24, r24
    1ea0:	81 f7       	brne	.-32     	; 0x1e82 <fputs+0x26>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	e6 e0       	ldi	r30, 0x06	; 6
    1eaa:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__+0x18>

00001eae <sprintf>:
    1eae:	ae e0       	ldi	r26, 0x0E	; 14
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	ed e5       	ldi	r30, 0x5D	; 93
    1eb4:	ff e0       	ldi	r31, 0x0F	; 15
    1eb6:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__prologue_saves__+0x1c>
    1eba:	0d 89       	ldd	r16, Y+21	; 0x15
    1ebc:	1e 89       	ldd	r17, Y+22	; 0x16
    1ebe:	86 e0       	ldi	r24, 0x06	; 6
    1ec0:	8c 83       	std	Y+4, r24	; 0x04
    1ec2:	1a 83       	std	Y+2, r17	; 0x02
    1ec4:	09 83       	std	Y+1, r16	; 0x01
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	9f e7       	ldi	r25, 0x7F	; 127
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	9e 01       	movw	r18, r28
    1ed0:	27 5e       	subi	r18, 0xE7	; 231
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	6f 89       	ldd	r22, Y+23	; 0x17
    1eda:	78 8d       	ldd	r23, Y+24	; 0x18
    1edc:	a9 01       	movw	r20, r18
    1ede:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vfprintf>
    1ee2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee4:	38 85       	ldd	r19, Y+8	; 0x08
    1ee6:	02 0f       	add	r16, r18
    1ee8:	13 1f       	adc	r17, r19
    1eea:	f8 01       	movw	r30, r16
    1eec:	10 82       	st	Z, r1
    1eee:	2e 96       	adiw	r28, 0x0e	; 14
    1ef0:	e4 e0       	ldi	r30, 0x04	; 4
    1ef2:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__epilogue_restores__+0x1c>

00001ef6 <sin>:
    1ef6:	9f 93       	push	r25
    1ef8:	82 d2       	rcall	.+1284   	; 0x23fe <__fp_rempio2>
    1efa:	0f 90       	pop	r0
    1efc:	07 fc       	sbrc	r0, 7
    1efe:	ee 5f       	subi	r30, 0xFE	; 254
    1f00:	a5 c2       	rjmp	.+1354   	; 0x244c <__fp_sinus>

00001f02 <vfprintf>:
    1f02:	ab e0       	ldi	r26, 0x0B	; 11
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e7 e8       	ldi	r30, 0x87	; 135
    1f08:	ff e0       	ldi	r31, 0x0F	; 15
    1f0a:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__>
    1f0e:	3c 01       	movw	r6, r24
    1f10:	2b 01       	movw	r4, r22
    1f12:	5a 01       	movw	r10, r20
    1f14:	fc 01       	movw	r30, r24
    1f16:	17 82       	std	Z+7, r1	; 0x07
    1f18:	16 82       	std	Z+6, r1	; 0x06
    1f1a:	83 81       	ldd	r24, Z+3	; 0x03
    1f1c:	81 fd       	sbrc	r24, 1
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <vfprintf+0x24>
    1f20:	6f ef       	ldi	r22, 0xFF	; 255
    1f22:	7f ef       	ldi	r23, 0xFF	; 255
    1f24:	c6 c1       	rjmp	.+908    	; 0x22b2 <vfprintf+0x3b0>
    1f26:	9a e0       	ldi	r25, 0x0A	; 10
    1f28:	89 2e       	mov	r8, r25
    1f2a:	1e 01       	movw	r2, r28
    1f2c:	08 94       	sec
    1f2e:	21 1c       	adc	r2, r1
    1f30:	31 1c       	adc	r3, r1
    1f32:	f3 01       	movw	r30, r6
    1f34:	23 81       	ldd	r18, Z+3	; 0x03
    1f36:	f2 01       	movw	r30, r4
    1f38:	23 fd       	sbrc	r18, 3
    1f3a:	85 91       	lpm	r24, Z+
    1f3c:	23 ff       	sbrs	r18, 3
    1f3e:	81 91       	ld	r24, Z+
    1f40:	2f 01       	movw	r4, r30
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <vfprintf+0x46>
    1f46:	b2 c1       	rjmp	.+868    	; 0x22ac <vfprintf+0x3aa>
    1f48:	85 32       	cpi	r24, 0x25	; 37
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <vfprintf+0x58>
    1f4c:	23 fd       	sbrc	r18, 3
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	23 ff       	sbrs	r18, 3
    1f52:	81 91       	ld	r24, Z+
    1f54:	2f 01       	movw	r4, r30
    1f56:	85 32       	cpi	r24, 0x25	; 37
    1f58:	29 f4       	brne	.+10     	; 0x1f64 <vfprintf+0x62>
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	b3 01       	movw	r22, r6
    1f5e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    1f62:	e7 cf       	rjmp	.-50     	; 0x1f32 <vfprintf+0x30>
    1f64:	98 2f       	mov	r25, r24
    1f66:	ff 24       	eor	r15, r15
    1f68:	ee 24       	eor	r14, r14
    1f6a:	99 24       	eor	r9, r9
    1f6c:	ff e1       	ldi	r31, 0x1F	; 31
    1f6e:	ff 15       	cp	r31, r15
    1f70:	d0 f0       	brcs	.+52     	; 0x1fa6 <vfprintf+0xa4>
    1f72:	9b 32       	cpi	r25, 0x2B	; 43
    1f74:	69 f0       	breq	.+26     	; 0x1f90 <vfprintf+0x8e>
    1f76:	9c 32       	cpi	r25, 0x2C	; 44
    1f78:	28 f4       	brcc	.+10     	; 0x1f84 <vfprintf+0x82>
    1f7a:	90 32       	cpi	r25, 0x20	; 32
    1f7c:	59 f0       	breq	.+22     	; 0x1f94 <vfprintf+0x92>
    1f7e:	93 32       	cpi	r25, 0x23	; 35
    1f80:	91 f4       	brne	.+36     	; 0x1fa6 <vfprintf+0xa4>
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <vfprintf+0x9e>
    1f84:	9d 32       	cpi	r25, 0x2D	; 45
    1f86:	49 f0       	breq	.+18     	; 0x1f9a <vfprintf+0x98>
    1f88:	90 33       	cpi	r25, 0x30	; 48
    1f8a:	69 f4       	brne	.+26     	; 0x1fa6 <vfprintf+0xa4>
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	24 c0       	rjmp	.+72     	; 0x1fd8 <vfprintf+0xd6>
    1f90:	52 e0       	ldi	r21, 0x02	; 2
    1f92:	f5 2a       	or	r15, r21
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	f8 2a       	or	r15, r24
    1f98:	28 c0       	rjmp	.+80     	; 0x1fea <vfprintf+0xe8>
    1f9a:	98 e0       	ldi	r25, 0x08	; 8
    1f9c:	f9 2a       	or	r15, r25
    1f9e:	25 c0       	rjmp	.+74     	; 0x1fea <vfprintf+0xe8>
    1fa0:	e0 e1       	ldi	r30, 0x10	; 16
    1fa2:	fe 2a       	or	r15, r30
    1fa4:	22 c0       	rjmp	.+68     	; 0x1fea <vfprintf+0xe8>
    1fa6:	f7 fc       	sbrc	r15, 7
    1fa8:	29 c0       	rjmp	.+82     	; 0x1ffc <vfprintf+0xfa>
    1faa:	89 2f       	mov	r24, r25
    1fac:	80 53       	subi	r24, 0x30	; 48
    1fae:	8a 30       	cpi	r24, 0x0A	; 10
    1fb0:	70 f4       	brcc	.+28     	; 0x1fce <vfprintf+0xcc>
    1fb2:	f6 fe       	sbrs	r15, 6
    1fb4:	05 c0       	rjmp	.+10     	; 0x1fc0 <vfprintf+0xbe>
    1fb6:	98 9c       	mul	r9, r8
    1fb8:	90 2c       	mov	r9, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	98 0e       	add	r9, r24
    1fbe:	15 c0       	rjmp	.+42     	; 0x1fea <vfprintf+0xe8>
    1fc0:	e8 9c       	mul	r14, r8
    1fc2:	e0 2c       	mov	r14, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	e8 0e       	add	r14, r24
    1fc8:	f0 e2       	ldi	r31, 0x20	; 32
    1fca:	ff 2a       	or	r15, r31
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <vfprintf+0xe8>
    1fce:	9e 32       	cpi	r25, 0x2E	; 46
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <vfprintf+0xda>
    1fd2:	f6 fc       	sbrc	r15, 6
    1fd4:	6b c1       	rjmp	.+726    	; 0x22ac <vfprintf+0x3aa>
    1fd6:	40 e4       	ldi	r20, 0x40	; 64
    1fd8:	f4 2a       	or	r15, r20
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <vfprintf+0xe8>
    1fdc:	9c 36       	cpi	r25, 0x6C	; 108
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <vfprintf+0xe4>
    1fe0:	50 e8       	ldi	r21, 0x80	; 128
    1fe2:	f5 2a       	or	r15, r21
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0xe8>
    1fe6:	98 36       	cpi	r25, 0x68	; 104
    1fe8:	49 f4       	brne	.+18     	; 0x1ffc <vfprintf+0xfa>
    1fea:	f2 01       	movw	r30, r4
    1fec:	23 fd       	sbrc	r18, 3
    1fee:	95 91       	lpm	r25, Z+
    1ff0:	23 ff       	sbrs	r18, 3
    1ff2:	91 91       	ld	r25, Z+
    1ff4:	2f 01       	movw	r4, r30
    1ff6:	99 23       	and	r25, r25
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <vfprintf+0xfa>
    1ffa:	b8 cf       	rjmp	.-144    	; 0x1f6c <vfprintf+0x6a>
    1ffc:	89 2f       	mov	r24, r25
    1ffe:	85 54       	subi	r24, 0x45	; 69
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	18 f0       	brcs	.+6      	; 0x200a <vfprintf+0x108>
    2004:	80 52       	subi	r24, 0x20	; 32
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	38 f4       	brcc	.+14     	; 0x2018 <vfprintf+0x116>
    200a:	44 e0       	ldi	r20, 0x04	; 4
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	a4 0e       	add	r10, r20
    2010:	b5 1e       	adc	r11, r21
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	59 83       	std	Y+1, r21	; 0x01
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <vfprintf+0x134>
    2018:	93 36       	cpi	r25, 0x63	; 99
    201a:	31 f0       	breq	.+12     	; 0x2028 <vfprintf+0x126>
    201c:	93 37       	cpi	r25, 0x73	; 115
    201e:	79 f0       	breq	.+30     	; 0x203e <vfprintf+0x13c>
    2020:	93 35       	cpi	r25, 0x53	; 83
    2022:	09 f0       	breq	.+2      	; 0x2026 <vfprintf+0x124>
    2024:	56 c0       	rjmp	.+172    	; 0x20d2 <vfprintf+0x1d0>
    2026:	20 c0       	rjmp	.+64     	; 0x2068 <vfprintf+0x166>
    2028:	f5 01       	movw	r30, r10
    202a:	80 81       	ld	r24, Z
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	42 e0       	ldi	r20, 0x02	; 2
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	a4 0e       	add	r10, r20
    2034:	b5 1e       	adc	r11, r21
    2036:	61 01       	movw	r12, r2
    2038:	01 e0       	ldi	r16, 0x01	; 1
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	12 c0       	rjmp	.+36     	; 0x2062 <vfprintf+0x160>
    203e:	f5 01       	movw	r30, r10
    2040:	c0 80       	ld	r12, Z
    2042:	d1 80       	ldd	r13, Z+1	; 0x01
    2044:	f6 fc       	sbrc	r15, 6
    2046:	03 c0       	rjmp	.+6      	; 0x204e <vfprintf+0x14c>
    2048:	6f ef       	ldi	r22, 0xFF	; 255
    204a:	7f ef       	ldi	r23, 0xFF	; 255
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfprintf+0x150>
    204e:	69 2d       	mov	r22, r9
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	42 e0       	ldi	r20, 0x02	; 2
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	a4 0e       	add	r10, r20
    2058:	b5 1e       	adc	r11, r21
    205a:	c6 01       	movw	r24, r12
    205c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <strnlen>
    2060:	8c 01       	movw	r16, r24
    2062:	5f e7       	ldi	r21, 0x7F	; 127
    2064:	f5 22       	and	r15, r21
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <vfprintf+0x18e>
    2068:	f5 01       	movw	r30, r10
    206a:	c0 80       	ld	r12, Z
    206c:	d1 80       	ldd	r13, Z+1	; 0x01
    206e:	f6 fc       	sbrc	r15, 6
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <vfprintf+0x176>
    2072:	6f ef       	ldi	r22, 0xFF	; 255
    2074:	7f ef       	ldi	r23, 0xFF	; 255
    2076:	02 c0       	rjmp	.+4      	; 0x207c <vfprintf+0x17a>
    2078:	69 2d       	mov	r22, r9
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	42 e0       	ldi	r20, 0x02	; 2
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	a4 0e       	add	r10, r20
    2082:	b5 1e       	adc	r11, r21
    2084:	c6 01       	movw	r24, r12
    2086:	0e 94 5e 11 	call	0x22bc	; 0x22bc <strnlen_P>
    208a:	8c 01       	movw	r16, r24
    208c:	50 e8       	ldi	r21, 0x80	; 128
    208e:	f5 2a       	or	r15, r21
    2090:	f3 fe       	sbrs	r15, 3
    2092:	07 c0       	rjmp	.+14     	; 0x20a2 <vfprintf+0x1a0>
    2094:	1a c0       	rjmp	.+52     	; 0x20ca <vfprintf+0x1c8>
    2096:	80 e2       	ldi	r24, 0x20	; 32
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	b3 01       	movw	r22, r6
    209c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    20a0:	ea 94       	dec	r14
    20a2:	8e 2d       	mov	r24, r14
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	08 17       	cp	r16, r24
    20a8:	19 07       	cpc	r17, r25
    20aa:	a8 f3       	brcs	.-22     	; 0x2096 <vfprintf+0x194>
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <vfprintf+0x1c8>
    20ae:	f6 01       	movw	r30, r12
    20b0:	f7 fc       	sbrc	r15, 7
    20b2:	85 91       	lpm	r24, Z+
    20b4:	f7 fe       	sbrs	r15, 7
    20b6:	81 91       	ld	r24, Z+
    20b8:	6f 01       	movw	r12, r30
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	b3 01       	movw	r22, r6
    20be:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    20c2:	e1 10       	cpse	r14, r1
    20c4:	ea 94       	dec	r14
    20c6:	01 50       	subi	r16, 0x01	; 1
    20c8:	10 40       	sbci	r17, 0x00	; 0
    20ca:	01 15       	cp	r16, r1
    20cc:	11 05       	cpc	r17, r1
    20ce:	79 f7       	brne	.-34     	; 0x20ae <vfprintf+0x1ac>
    20d0:	ea c0       	rjmp	.+468    	; 0x22a6 <vfprintf+0x3a4>
    20d2:	94 36       	cpi	r25, 0x64	; 100
    20d4:	11 f0       	breq	.+4      	; 0x20da <vfprintf+0x1d8>
    20d6:	99 36       	cpi	r25, 0x69	; 105
    20d8:	69 f5       	brne	.+90     	; 0x2134 <vfprintf+0x232>
    20da:	f7 fe       	sbrs	r15, 7
    20dc:	08 c0       	rjmp	.+16     	; 0x20ee <vfprintf+0x1ec>
    20de:	f5 01       	movw	r30, r10
    20e0:	20 81       	ld	r18, Z
    20e2:	31 81       	ldd	r19, Z+1	; 0x01
    20e4:	42 81       	ldd	r20, Z+2	; 0x02
    20e6:	53 81       	ldd	r21, Z+3	; 0x03
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0a c0       	rjmp	.+20     	; 0x2102 <vfprintf+0x200>
    20ee:	f5 01       	movw	r30, r10
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	9c 01       	movw	r18, r24
    20f6:	44 27       	eor	r20, r20
    20f8:	37 fd       	sbrc	r19, 7
    20fa:	40 95       	com	r20
    20fc:	54 2f       	mov	r21, r20
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a8 0e       	add	r10, r24
    2104:	b9 1e       	adc	r11, r25
    2106:	9f e6       	ldi	r25, 0x6F	; 111
    2108:	f9 22       	and	r15, r25
    210a:	57 ff       	sbrs	r21, 7
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <vfprintf+0x21e>
    210e:	50 95       	com	r21
    2110:	40 95       	com	r20
    2112:	30 95       	com	r19
    2114:	21 95       	neg	r18
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	4f 4f       	sbci	r20, 0xFF	; 255
    211a:	5f 4f       	sbci	r21, 0xFF	; 255
    211c:	e0 e8       	ldi	r30, 0x80	; 128
    211e:	fe 2a       	or	r15, r30
    2120:	ca 01       	movw	r24, r20
    2122:	b9 01       	movw	r22, r18
    2124:	a1 01       	movw	r20, r2
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__ultoa_invert>
    212e:	d8 2e       	mov	r13, r24
    2130:	d2 18       	sub	r13, r2
    2132:	40 c0       	rjmp	.+128    	; 0x21b4 <vfprintf+0x2b2>
    2134:	95 37       	cpi	r25, 0x75	; 117
    2136:	29 f4       	brne	.+10     	; 0x2142 <vfprintf+0x240>
    2138:	1f 2d       	mov	r17, r15
    213a:	1f 7e       	andi	r17, 0xEF	; 239
    213c:	2a e0       	ldi	r18, 0x0A	; 10
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	1d c0       	rjmp	.+58     	; 0x217c <vfprintf+0x27a>
    2142:	1f 2d       	mov	r17, r15
    2144:	19 7f       	andi	r17, 0xF9	; 249
    2146:	9f 36       	cpi	r25, 0x6F	; 111
    2148:	61 f0       	breq	.+24     	; 0x2162 <vfprintf+0x260>
    214a:	90 37       	cpi	r25, 0x70	; 112
    214c:	20 f4       	brcc	.+8      	; 0x2156 <vfprintf+0x254>
    214e:	98 35       	cpi	r25, 0x58	; 88
    2150:	09 f0       	breq	.+2      	; 0x2154 <vfprintf+0x252>
    2152:	ac c0       	rjmp	.+344    	; 0x22ac <vfprintf+0x3aa>
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <vfprintf+0x272>
    2156:	90 37       	cpi	r25, 0x70	; 112
    2158:	39 f0       	breq	.+14     	; 0x2168 <vfprintf+0x266>
    215a:	98 37       	cpi	r25, 0x78	; 120
    215c:	09 f0       	breq	.+2      	; 0x2160 <vfprintf+0x25e>
    215e:	a6 c0       	rjmp	.+332    	; 0x22ac <vfprintf+0x3aa>
    2160:	04 c0       	rjmp	.+8      	; 0x216a <vfprintf+0x268>
    2162:	28 e0       	ldi	r18, 0x08	; 8
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	0a c0       	rjmp	.+20     	; 0x217c <vfprintf+0x27a>
    2168:	10 61       	ori	r17, 0x10	; 16
    216a:	14 fd       	sbrc	r17, 4
    216c:	14 60       	ori	r17, 0x04	; 4
    216e:	20 e1       	ldi	r18, 0x10	; 16
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	04 c0       	rjmp	.+8      	; 0x217c <vfprintf+0x27a>
    2174:	14 fd       	sbrc	r17, 4
    2176:	16 60       	ori	r17, 0x06	; 6
    2178:	20 e1       	ldi	r18, 0x10	; 16
    217a:	32 e0       	ldi	r19, 0x02	; 2
    217c:	17 ff       	sbrs	r17, 7
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <vfprintf+0x28e>
    2180:	f5 01       	movw	r30, r10
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	44 e0       	ldi	r20, 0x04	; 4
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	08 c0       	rjmp	.+16     	; 0x21a0 <vfprintf+0x29e>
    2190:	f5 01       	movw	r30, r10
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	bc 01       	movw	r22, r24
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	42 e0       	ldi	r20, 0x02	; 2
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	a4 0e       	add	r10, r20
    21a2:	b5 1e       	adc	r11, r21
    21a4:	a1 01       	movw	r20, r2
    21a6:	0e 94 a0 11 	call	0x2340	; 0x2340 <__ultoa_invert>
    21aa:	d8 2e       	mov	r13, r24
    21ac:	d2 18       	sub	r13, r2
    21ae:	8f e7       	ldi	r24, 0x7F	; 127
    21b0:	f8 2e       	mov	r15, r24
    21b2:	f1 22       	and	r15, r17
    21b4:	f6 fe       	sbrs	r15, 6
    21b6:	0b c0       	rjmp	.+22     	; 0x21ce <vfprintf+0x2cc>
    21b8:	5e ef       	ldi	r21, 0xFE	; 254
    21ba:	f5 22       	and	r15, r21
    21bc:	d9 14       	cp	r13, r9
    21be:	38 f4       	brcc	.+14     	; 0x21ce <vfprintf+0x2cc>
    21c0:	f4 fe       	sbrs	r15, 4
    21c2:	07 c0       	rjmp	.+14     	; 0x21d2 <vfprintf+0x2d0>
    21c4:	f2 fc       	sbrc	r15, 2
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <vfprintf+0x2d0>
    21c8:	8f ee       	ldi	r24, 0xEF	; 239
    21ca:	f8 22       	and	r15, r24
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <vfprintf+0x2d0>
    21ce:	1d 2d       	mov	r17, r13
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <vfprintf+0x2d2>
    21d2:	19 2d       	mov	r17, r9
    21d4:	f4 fe       	sbrs	r15, 4
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <vfprintf+0x2f0>
    21d8:	fe 01       	movw	r30, r28
    21da:	ed 0d       	add	r30, r13
    21dc:	f1 1d       	adc	r31, r1
    21de:	80 81       	ld	r24, Z
    21e0:	80 33       	cpi	r24, 0x30	; 48
    21e2:	19 f4       	brne	.+6      	; 0x21ea <vfprintf+0x2e8>
    21e4:	99 ee       	ldi	r25, 0xE9	; 233
    21e6:	f9 22       	and	r15, r25
    21e8:	08 c0       	rjmp	.+16     	; 0x21fa <vfprintf+0x2f8>
    21ea:	1f 5f       	subi	r17, 0xFF	; 255
    21ec:	f2 fe       	sbrs	r15, 2
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <vfprintf+0x2f8>
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <vfprintf+0x2f6>
    21f2:	8f 2d       	mov	r24, r15
    21f4:	86 78       	andi	r24, 0x86	; 134
    21f6:	09 f0       	breq	.+2      	; 0x21fa <vfprintf+0x2f8>
    21f8:	1f 5f       	subi	r17, 0xFF	; 255
    21fa:	0f 2d       	mov	r16, r15
    21fc:	f3 fc       	sbrc	r15, 3
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <vfprintf+0x326>
    2200:	f0 fe       	sbrs	r15, 0
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <vfprintf+0x320>
    2204:	1e 15       	cp	r17, r14
    2206:	10 f0       	brcs	.+4      	; 0x220c <vfprintf+0x30a>
    2208:	9d 2c       	mov	r9, r13
    220a:	0b c0       	rjmp	.+22     	; 0x2222 <vfprintf+0x320>
    220c:	9d 2c       	mov	r9, r13
    220e:	9e 0c       	add	r9, r14
    2210:	91 1a       	sub	r9, r17
    2212:	1e 2d       	mov	r17, r14
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <vfprintf+0x320>
    2216:	80 e2       	ldi	r24, 0x20	; 32
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	b3 01       	movw	r22, r6
    221c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    2220:	1f 5f       	subi	r17, 0xFF	; 255
    2222:	1e 15       	cp	r17, r14
    2224:	c0 f3       	brcs	.-16     	; 0x2216 <vfprintf+0x314>
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <vfprintf+0x32e>
    2228:	1e 15       	cp	r17, r14
    222a:	10 f4       	brcc	.+4      	; 0x2230 <vfprintf+0x32e>
    222c:	e1 1a       	sub	r14, r17
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <vfprintf+0x330>
    2230:	ee 24       	eor	r14, r14
    2232:	04 ff       	sbrs	r16, 4
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <vfprintf+0x352>
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b3 01       	movw	r22, r6
    223c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    2240:	02 ff       	sbrs	r16, 2
    2242:	1d c0       	rjmp	.+58     	; 0x227e <vfprintf+0x37c>
    2244:	01 fd       	sbrc	r16, 1
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfprintf+0x34c>
    2248:	88 e7       	ldi	r24, 0x78	; 120
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e c0       	rjmp	.+28     	; 0x226a <vfprintf+0x368>
    224e:	88 e5       	ldi	r24, 0x58	; 88
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0b c0       	rjmp	.+22     	; 0x226a <vfprintf+0x368>
    2254:	80 2f       	mov	r24, r16
    2256:	86 78       	andi	r24, 0x86	; 134
    2258:	91 f0       	breq	.+36     	; 0x227e <vfprintf+0x37c>
    225a:	01 ff       	sbrs	r16, 1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <vfprintf+0x360>
    225e:	8b e2       	ldi	r24, 0x2B	; 43
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <vfprintf+0x362>
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	f7 fc       	sbrc	r15, 7
    2266:	8d e2       	ldi	r24, 0x2D	; 45
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	b3 01       	movw	r22, r6
    226c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    2270:	06 c0       	rjmp	.+12     	; 0x227e <vfprintf+0x37c>
    2272:	80 e3       	ldi	r24, 0x30	; 48
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	b3 01       	movw	r22, r6
    2278:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    227c:	9a 94       	dec	r9
    227e:	d9 14       	cp	r13, r9
    2280:	c0 f3       	brcs	.-16     	; 0x2272 <vfprintf+0x370>
    2282:	da 94       	dec	r13
    2284:	f1 01       	movw	r30, r2
    2286:	ed 0d       	add	r30, r13
    2288:	f1 1d       	adc	r31, r1
    228a:	80 81       	ld	r24, Z
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	b3 01       	movw	r22, r6
    2290:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    2294:	dd 20       	and	r13, r13
    2296:	a9 f7       	brne	.-22     	; 0x2282 <vfprintf+0x380>
    2298:	06 c0       	rjmp	.+12     	; 0x22a6 <vfprintf+0x3a4>
    229a:	80 e2       	ldi	r24, 0x20	; 32
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	b3 01       	movw	r22, r6
    22a0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <fputc>
    22a4:	ea 94       	dec	r14
    22a6:	ee 20       	and	r14, r14
    22a8:	c1 f7       	brne	.-16     	; 0x229a <vfprintf+0x398>
    22aa:	43 ce       	rjmp	.-890    	; 0x1f32 <vfprintf+0x30>
    22ac:	f3 01       	movw	r30, r6
    22ae:	66 81       	ldd	r22, Z+6	; 0x06
    22b0:	77 81       	ldd	r23, Z+7	; 0x07
    22b2:	cb 01       	movw	r24, r22
    22b4:	2b 96       	adiw	r28, 0x0b	; 11
    22b6:	e2 e1       	ldi	r30, 0x12	; 18
    22b8:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__>

000022bc <strnlen_P>:
    22bc:	fc 01       	movw	r30, r24
    22be:	05 90       	lpm	r0, Z+
    22c0:	61 50       	subi	r22, 0x01	; 1
    22c2:	70 40       	sbci	r23, 0x00	; 0
    22c4:	01 10       	cpse	r0, r1
    22c6:	d8 f7       	brcc	.-10     	; 0x22be <strnlen_P+0x2>
    22c8:	80 95       	com	r24
    22ca:	90 95       	com	r25
    22cc:	8e 0f       	add	r24, r30
    22ce:	9f 1f       	adc	r25, r31
    22d0:	08 95       	ret

000022d2 <strnlen>:
    22d2:	fc 01       	movw	r30, r24
    22d4:	61 50       	subi	r22, 0x01	; 1
    22d6:	70 40       	sbci	r23, 0x00	; 0
    22d8:	01 90       	ld	r0, Z+
    22da:	01 10       	cpse	r0, r1
    22dc:	d8 f7       	brcc	.-10     	; 0x22d4 <strnlen+0x2>
    22de:	80 95       	com	r24
    22e0:	90 95       	com	r25
    22e2:	8e 0f       	add	r24, r30
    22e4:	9f 1f       	adc	r25, r31
    22e6:	08 95       	ret

000022e8 <fputc>:
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	8c 01       	movw	r16, r24
    22f2:	eb 01       	movw	r28, r22
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	81 ff       	sbrs	r24, 1
    22f8:	1b c0       	rjmp	.+54     	; 0x2330 <fputc+0x48>
    22fa:	82 ff       	sbrs	r24, 2
    22fc:	0d c0       	rjmp	.+26     	; 0x2318 <fputc+0x30>
    22fe:	2e 81       	ldd	r18, Y+6	; 0x06
    2300:	3f 81       	ldd	r19, Y+7	; 0x07
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	28 17       	cp	r18, r24
    2308:	39 07       	cpc	r19, r25
    230a:	64 f4       	brge	.+24     	; 0x2324 <fputc+0x3c>
    230c:	e8 81       	ld	r30, Y
    230e:	f9 81       	ldd	r31, Y+1	; 0x01
    2310:	01 93       	st	Z+, r16
    2312:	f9 83       	std	Y+1, r31	; 0x01
    2314:	e8 83       	st	Y, r30
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <fputc+0x3c>
    2318:	e8 85       	ldd	r30, Y+8	; 0x08
    231a:	f9 85       	ldd	r31, Y+9	; 0x09
    231c:	80 2f       	mov	r24, r16
    231e:	09 95       	icall
    2320:	89 2b       	or	r24, r25
    2322:	31 f4       	brne	.+12     	; 0x2330 <fputc+0x48>
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <fputc+0x4c>
    2330:	0f ef       	ldi	r16, 0xFF	; 255
    2332:	1f ef       	ldi	r17, 0xFF	; 255
    2334:	c8 01       	movw	r24, r16
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	08 95       	ret

00002340 <__ultoa_invert>:
    2340:	fa 01       	movw	r30, r20
    2342:	aa 27       	eor	r26, r26
    2344:	28 30       	cpi	r18, 0x08	; 8
    2346:	51 f1       	breq	.+84     	; 0x239c <__ultoa_invert+0x5c>
    2348:	20 31       	cpi	r18, 0x10	; 16
    234a:	81 f1       	breq	.+96     	; 0x23ac <__ultoa_invert+0x6c>
    234c:	e8 94       	clt
    234e:	6f 93       	push	r22
    2350:	6e 7f       	andi	r22, 0xFE	; 254
    2352:	6e 5f       	subi	r22, 0xFE	; 254
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	af 4f       	sbci	r26, 0xFF	; 255
    235c:	b1 e0       	ldi	r27, 0x01	; 1
    235e:	3e d0       	rcall	.+124    	; 0x23dc <__ultoa_invert+0x9c>
    2360:	b4 e0       	ldi	r27, 0x04	; 4
    2362:	3c d0       	rcall	.+120    	; 0x23dc <__ultoa_invert+0x9c>
    2364:	67 0f       	add	r22, r23
    2366:	78 1f       	adc	r23, r24
    2368:	89 1f       	adc	r24, r25
    236a:	9a 1f       	adc	r25, r26
    236c:	a1 1d       	adc	r26, r1
    236e:	68 0f       	add	r22, r24
    2370:	79 1f       	adc	r23, r25
    2372:	8a 1f       	adc	r24, r26
    2374:	91 1d       	adc	r25, r1
    2376:	a1 1d       	adc	r26, r1
    2378:	6a 0f       	add	r22, r26
    237a:	71 1d       	adc	r23, r1
    237c:	81 1d       	adc	r24, r1
    237e:	91 1d       	adc	r25, r1
    2380:	a1 1d       	adc	r26, r1
    2382:	20 d0       	rcall	.+64     	; 0x23c4 <__ultoa_invert+0x84>
    2384:	09 f4       	brne	.+2      	; 0x2388 <__ultoa_invert+0x48>
    2386:	68 94       	set
    2388:	3f 91       	pop	r19
    238a:	2a e0       	ldi	r18, 0x0A	; 10
    238c:	26 9f       	mul	r18, r22
    238e:	11 24       	eor	r1, r1
    2390:	30 19       	sub	r19, r0
    2392:	30 5d       	subi	r19, 0xD0	; 208
    2394:	31 93       	st	Z+, r19
    2396:	de f6       	brtc	.-74     	; 0x234e <__ultoa_invert+0xe>
    2398:	cf 01       	movw	r24, r30
    239a:	08 95       	ret
    239c:	46 2f       	mov	r20, r22
    239e:	47 70       	andi	r20, 0x07	; 7
    23a0:	40 5d       	subi	r20, 0xD0	; 208
    23a2:	41 93       	st	Z+, r20
    23a4:	b3 e0       	ldi	r27, 0x03	; 3
    23a6:	0f d0       	rcall	.+30     	; 0x23c6 <__ultoa_invert+0x86>
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0x5c>
    23aa:	f6 cf       	rjmp	.-20     	; 0x2398 <__ultoa_invert+0x58>
    23ac:	46 2f       	mov	r20, r22
    23ae:	4f 70       	andi	r20, 0x0F	; 15
    23b0:	40 5d       	subi	r20, 0xD0	; 208
    23b2:	4a 33       	cpi	r20, 0x3A	; 58
    23b4:	18 f0       	brcs	.+6      	; 0x23bc <__ultoa_invert+0x7c>
    23b6:	49 5d       	subi	r20, 0xD9	; 217
    23b8:	31 fd       	sbrc	r19, 1
    23ba:	40 52       	subi	r20, 0x20	; 32
    23bc:	41 93       	st	Z+, r20
    23be:	02 d0       	rcall	.+4      	; 0x23c4 <__ultoa_invert+0x84>
    23c0:	a9 f7       	brne	.-22     	; 0x23ac <__ultoa_invert+0x6c>
    23c2:	ea cf       	rjmp	.-44     	; 0x2398 <__ultoa_invert+0x58>
    23c4:	b4 e0       	ldi	r27, 0x04	; 4
    23c6:	a6 95       	lsr	r26
    23c8:	97 95       	ror	r25
    23ca:	87 95       	ror	r24
    23cc:	77 95       	ror	r23
    23ce:	67 95       	ror	r22
    23d0:	ba 95       	dec	r27
    23d2:	c9 f7       	brne	.-14     	; 0x23c6 <__ultoa_invert+0x86>
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	61 05       	cpc	r22, r1
    23d8:	71 05       	cpc	r23, r1
    23da:	08 95       	ret
    23dc:	9b 01       	movw	r18, r22
    23de:	ac 01       	movw	r20, r24
    23e0:	0a 2e       	mov	r0, r26
    23e2:	06 94       	lsr	r0
    23e4:	57 95       	ror	r21
    23e6:	47 95       	ror	r20
    23e8:	37 95       	ror	r19
    23ea:	27 95       	ror	r18
    23ec:	ba 95       	dec	r27
    23ee:	c9 f7       	brne	.-14     	; 0x23e2 <__ultoa_invert+0xa2>
    23f0:	62 0f       	add	r22, r18
    23f2:	73 1f       	adc	r23, r19
    23f4:	84 1f       	adc	r24, r20
    23f6:	95 1f       	adc	r25, r21
    23f8:	a0 1d       	adc	r26, r0
    23fa:	08 95       	ret
    23fc:	ce c0       	rjmp	.+412    	; 0x259a <__fp_nan>

000023fe <__fp_rempio2>:
    23fe:	3f d0       	rcall	.+126    	; 0x247e <__fp_splitA>
    2400:	e8 f3       	brcs	.-6      	; 0x23fc <__ultoa_invert+0xbc>
    2402:	e8 94       	clt
    2404:	e0 e0       	ldi	r30, 0x00	; 0
    2406:	bb 27       	eor	r27, r27
    2408:	9f 57       	subi	r25, 0x7F	; 127
    240a:	f0 f0       	brcs	.+60     	; 0x2448 <__fp_rempio2+0x4a>
    240c:	2a ed       	ldi	r18, 0xDA	; 218
    240e:	3f e0       	ldi	r19, 0x0F	; 15
    2410:	49 ec       	ldi	r20, 0xC9	; 201
    2412:	06 c0       	rjmp	.+12     	; 0x2420 <__fp_rempio2+0x22>
    2414:	ee 0f       	add	r30, r30
    2416:	bb 0f       	add	r27, r27
    2418:	66 1f       	adc	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	28 f0       	brcs	.+10     	; 0x242a <__fp_rempio2+0x2c>
    2420:	b2 3a       	cpi	r27, 0xA2	; 162
    2422:	62 07       	cpc	r22, r18
    2424:	73 07       	cpc	r23, r19
    2426:	84 07       	cpc	r24, r20
    2428:	28 f0       	brcs	.+10     	; 0x2434 <__fp_rempio2+0x36>
    242a:	b2 5a       	subi	r27, 0xA2	; 162
    242c:	62 0b       	sbc	r22, r18
    242e:	73 0b       	sbc	r23, r19
    2430:	84 0b       	sbc	r24, r20
    2432:	e3 95       	inc	r30
    2434:	9a 95       	dec	r25
    2436:	72 f7       	brpl	.-36     	; 0x2414 <__fp_rempio2+0x16>
    2438:	80 38       	cpi	r24, 0x80	; 128
    243a:	30 f4       	brcc	.+12     	; 0x2448 <__fp_rempio2+0x4a>
    243c:	9a 95       	dec	r25
    243e:	bb 0f       	add	r27, r27
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	d2 f7       	brpl	.-12     	; 0x243c <__fp_rempio2+0x3e>
    2448:	90 48       	sbci	r25, 0x80	; 128
    244a:	9b c0       	rjmp	.+310    	; 0x2582 <__fp_mpack_finite>

0000244c <__fp_sinus>:
    244c:	ef 93       	push	r30
    244e:	e0 ff       	sbrs	r30, 0
    2450:	06 c0       	rjmp	.+12     	; 0x245e <__fp_sinus+0x12>
    2452:	a2 ea       	ldi	r26, 0xA2	; 162
    2454:	2a ed       	ldi	r18, 0xDA	; 218
    2456:	3f e0       	ldi	r19, 0x0F	; 15
    2458:	49 ec       	ldi	r20, 0xC9	; 201
    245a:	5f eb       	ldi	r21, 0xBF	; 191
    245c:	37 d0       	rcall	.+110    	; 0x24cc <__addsf3x>
    245e:	bf d0       	rcall	.+382    	; 0x25de <__fp_round>
    2460:	0f 90       	pop	r0
    2462:	03 94       	inc	r0
    2464:	01 fc       	sbrc	r0, 1
    2466:	90 58       	subi	r25, 0x80	; 128
    2468:	e0 e7       	ldi	r30, 0x70	; 112
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	99 c0       	rjmp	.+306    	; 0x25a0 <__fp_powsodd>

0000246e <__fp_split3>:
    246e:	57 fd       	sbrc	r21, 7
    2470:	90 58       	subi	r25, 0x80	; 128
    2472:	44 0f       	add	r20, r20
    2474:	55 1f       	adc	r21, r21
    2476:	59 f0       	breq	.+22     	; 0x248e <__fp_splitA+0x10>
    2478:	5f 3f       	cpi	r21, 0xFF	; 255
    247a:	71 f0       	breq	.+28     	; 0x2498 <__fp_splitA+0x1a>
    247c:	47 95       	ror	r20

0000247e <__fp_splitA>:
    247e:	88 0f       	add	r24, r24
    2480:	97 fb       	bst	r25, 7
    2482:	99 1f       	adc	r25, r25
    2484:	61 f0       	breq	.+24     	; 0x249e <__fp_splitA+0x20>
    2486:	9f 3f       	cpi	r25, 0xFF	; 255
    2488:	79 f0       	breq	.+30     	; 0x24a8 <__fp_splitA+0x2a>
    248a:	87 95       	ror	r24
    248c:	08 95       	ret
    248e:	12 16       	cp	r1, r18
    2490:	13 06       	cpc	r1, r19
    2492:	14 06       	cpc	r1, r20
    2494:	55 1f       	adc	r21, r21
    2496:	f2 cf       	rjmp	.-28     	; 0x247c <__fp_split3+0xe>
    2498:	46 95       	lsr	r20
    249a:	f1 df       	rcall	.-30     	; 0x247e <__fp_splitA>
    249c:	08 c0       	rjmp	.+16     	; 0x24ae <__fp_splitA+0x30>
    249e:	16 16       	cp	r1, r22
    24a0:	17 06       	cpc	r1, r23
    24a2:	18 06       	cpc	r1, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	f1 cf       	rjmp	.-30     	; 0x248a <__fp_splitA+0xc>
    24a8:	86 95       	lsr	r24
    24aa:	71 05       	cpc	r23, r1
    24ac:	61 05       	cpc	r22, r1
    24ae:	08 94       	sec
    24b0:	08 95       	ret
    24b2:	87 d0       	rcall	.+270    	; 0x25c2 <__fp_pscA>
    24b4:	30 f0       	brcs	.+12     	; 0x24c2 <__fp_splitA+0x44>
    24b6:	8c d0       	rcall	.+280    	; 0x25d0 <__fp_pscB>
    24b8:	20 f0       	brcs	.+8      	; 0x24c2 <__fp_splitA+0x44>
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <__fp_splitA+0x4a>
    24bc:	9f 3f       	cpi	r25, 0xFF	; 255
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__fp_splitA+0x46>
    24c0:	1e f4       	brtc	.+6      	; 0x24c8 <__fp_splitA+0x4a>
    24c2:	6b c0       	rjmp	.+214    	; 0x259a <__fp_nan>
    24c4:	0e f4       	brtc	.+2      	; 0x24c8 <__fp_splitA+0x4a>
    24c6:	e0 95       	com	r30
    24c8:	e7 fb       	bst	r30, 7
    24ca:	53 c0       	rjmp	.+166    	; 0x2572 <__fp_inf>

000024cc <__addsf3x>:
    24cc:	e9 2f       	mov	r30, r25
    24ce:	cf df       	rcall	.-98     	; 0x246e <__fp_split3>
    24d0:	80 f3       	brcs	.-32     	; 0x24b2 <__fp_splitA+0x34>
    24d2:	ba 17       	cp	r27, r26
    24d4:	62 07       	cpc	r22, r18
    24d6:	73 07       	cpc	r23, r19
    24d8:	84 07       	cpc	r24, r20
    24da:	95 07       	cpc	r25, r21
    24dc:	18 f0       	brcs	.+6      	; 0x24e4 <__addsf3x+0x18>
    24de:	71 f4       	brne	.+28     	; 0x24fc <__addsf3x+0x30>
    24e0:	9e f5       	brtc	.+102    	; 0x2548 <__addsf3x+0x7c>
    24e2:	8e c0       	rjmp	.+284    	; 0x2600 <__fp_zero>
    24e4:	0e f4       	brtc	.+2      	; 0x24e8 <__addsf3x+0x1c>
    24e6:	e0 95       	com	r30
    24e8:	0b 2e       	mov	r0, r27
    24ea:	ba 2f       	mov	r27, r26
    24ec:	a0 2d       	mov	r26, r0
    24ee:	0b 01       	movw	r0, r22
    24f0:	b9 01       	movw	r22, r18
    24f2:	90 01       	movw	r18, r0
    24f4:	0c 01       	movw	r0, r24
    24f6:	ca 01       	movw	r24, r20
    24f8:	a0 01       	movw	r20, r0
    24fa:	11 24       	eor	r1, r1
    24fc:	ff 27       	eor	r31, r31
    24fe:	59 1b       	sub	r21, r25
    2500:	99 f0       	breq	.+38     	; 0x2528 <__addsf3x+0x5c>
    2502:	59 3f       	cpi	r21, 0xF9	; 249
    2504:	50 f4       	brcc	.+20     	; 0x251a <__addsf3x+0x4e>
    2506:	50 3e       	cpi	r21, 0xE0	; 224
    2508:	68 f1       	brcs	.+90     	; 0x2564 <__addsf3x+0x98>
    250a:	1a 16       	cp	r1, r26
    250c:	f0 40       	sbci	r31, 0x00	; 0
    250e:	a2 2f       	mov	r26, r18
    2510:	23 2f       	mov	r18, r19
    2512:	34 2f       	mov	r19, r20
    2514:	44 27       	eor	r20, r20
    2516:	58 5f       	subi	r21, 0xF8	; 248
    2518:	f3 cf       	rjmp	.-26     	; 0x2500 <__addsf3x+0x34>
    251a:	46 95       	lsr	r20
    251c:	37 95       	ror	r19
    251e:	27 95       	ror	r18
    2520:	a7 95       	ror	r26
    2522:	f0 40       	sbci	r31, 0x00	; 0
    2524:	53 95       	inc	r21
    2526:	c9 f7       	brne	.-14     	; 0x251a <__addsf3x+0x4e>
    2528:	7e f4       	brtc	.+30     	; 0x2548 <__addsf3x+0x7c>
    252a:	1f 16       	cp	r1, r31
    252c:	ba 0b       	sbc	r27, r26
    252e:	62 0b       	sbc	r22, r18
    2530:	73 0b       	sbc	r23, r19
    2532:	84 0b       	sbc	r24, r20
    2534:	ba f0       	brmi	.+46     	; 0x2564 <__addsf3x+0x98>
    2536:	91 50       	subi	r25, 0x01	; 1
    2538:	a1 f0       	breq	.+40     	; 0x2562 <__addsf3x+0x96>
    253a:	ff 0f       	add	r31, r31
    253c:	bb 1f       	adc	r27, r27
    253e:	66 1f       	adc	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	c2 f7       	brpl	.-16     	; 0x2536 <__addsf3x+0x6a>
    2546:	0e c0       	rjmp	.+28     	; 0x2564 <__addsf3x+0x98>
    2548:	ba 0f       	add	r27, r26
    254a:	62 1f       	adc	r22, r18
    254c:	73 1f       	adc	r23, r19
    254e:	84 1f       	adc	r24, r20
    2550:	48 f4       	brcc	.+18     	; 0x2564 <__addsf3x+0x98>
    2552:	87 95       	ror	r24
    2554:	77 95       	ror	r23
    2556:	67 95       	ror	r22
    2558:	b7 95       	ror	r27
    255a:	f7 95       	ror	r31
    255c:	9e 3f       	cpi	r25, 0xFE	; 254
    255e:	08 f0       	brcs	.+2      	; 0x2562 <__addsf3x+0x96>
    2560:	b3 cf       	rjmp	.-154    	; 0x24c8 <__fp_splitA+0x4a>
    2562:	93 95       	inc	r25
    2564:	88 0f       	add	r24, r24
    2566:	08 f0       	brcs	.+2      	; 0x256a <__addsf3x+0x9e>
    2568:	99 27       	eor	r25, r25
    256a:	ee 0f       	add	r30, r30
    256c:	97 95       	ror	r25
    256e:	87 95       	ror	r24
    2570:	08 95       	ret

00002572 <__fp_inf>:
    2572:	97 f9       	bld	r25, 7
    2574:	9f 67       	ori	r25, 0x7F	; 127
    2576:	80 e8       	ldi	r24, 0x80	; 128
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	08 95       	ret

0000257e <__fp_mpack>:
    257e:	9f 3f       	cpi	r25, 0xFF	; 255
    2580:	31 f0       	breq	.+12     	; 0x258e <__fp_mpack_finite+0xc>

00002582 <__fp_mpack_finite>:
    2582:	91 50       	subi	r25, 0x01	; 1
    2584:	20 f4       	brcc	.+8      	; 0x258e <__fp_mpack_finite+0xc>
    2586:	87 95       	ror	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	b7 95       	ror	r27
    258e:	88 0f       	add	r24, r24
    2590:	91 1d       	adc	r25, r1
    2592:	96 95       	lsr	r25
    2594:	87 95       	ror	r24
    2596:	97 f9       	bld	r25, 7
    2598:	08 95       	ret

0000259a <__fp_nan>:
    259a:	9f ef       	ldi	r25, 0xFF	; 255
    259c:	80 ec       	ldi	r24, 0xC0	; 192
    259e:	08 95       	ret

000025a0 <__fp_powsodd>:
    25a0:	9f 93       	push	r25
    25a2:	8f 93       	push	r24
    25a4:	7f 93       	push	r23
    25a6:	6f 93       	push	r22
    25a8:	ff 93       	push	r31
    25aa:	ef 93       	push	r30
    25ac:	9b 01       	movw	r18, r22
    25ae:	ac 01       	movw	r20, r24
    25b0:	0b d8       	rcall	.-4074   	; 0x15c8 <__mulsf3>
    25b2:	ef 91       	pop	r30
    25b4:	ff 91       	pop	r31
    25b6:	2b d0       	rcall	.+86     	; 0x260e <__fp_powser>
    25b8:	2f 91       	pop	r18
    25ba:	3f 91       	pop	r19
    25bc:	4f 91       	pop	r20
    25be:	5f 91       	pop	r21
    25c0:	03 c8       	rjmp	.-4090   	; 0x15c8 <__mulsf3>

000025c2 <__fp_pscA>:
    25c2:	00 24       	eor	r0, r0
    25c4:	0a 94       	dec	r0
    25c6:	16 16       	cp	r1, r22
    25c8:	17 06       	cpc	r1, r23
    25ca:	18 06       	cpc	r1, r24
    25cc:	09 06       	cpc	r0, r25
    25ce:	08 95       	ret

000025d0 <__fp_pscB>:
    25d0:	00 24       	eor	r0, r0
    25d2:	0a 94       	dec	r0
    25d4:	12 16       	cp	r1, r18
    25d6:	13 06       	cpc	r1, r19
    25d8:	14 06       	cpc	r1, r20
    25da:	05 06       	cpc	r0, r21
    25dc:	08 95       	ret

000025de <__fp_round>:
    25de:	09 2e       	mov	r0, r25
    25e0:	03 94       	inc	r0
    25e2:	00 0c       	add	r0, r0
    25e4:	11 f4       	brne	.+4      	; 0x25ea <__fp_round+0xc>
    25e6:	88 23       	and	r24, r24
    25e8:	52 f0       	brmi	.+20     	; 0x25fe <__fp_round+0x20>
    25ea:	bb 0f       	add	r27, r27
    25ec:	40 f4       	brcc	.+16     	; 0x25fe <__fp_round+0x20>
    25ee:	bf 2b       	or	r27, r31
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <__fp_round+0x18>
    25f2:	60 ff       	sbrs	r22, 0
    25f4:	04 c0       	rjmp	.+8      	; 0x25fe <__fp_round+0x20>
    25f6:	6f 5f       	subi	r22, 0xFF	; 255
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	08 95       	ret

00002600 <__fp_zero>:
    2600:	e8 94       	clt

00002602 <__fp_szero>:
    2602:	bb 27       	eor	r27, r27
    2604:	66 27       	eor	r22, r22
    2606:	77 27       	eor	r23, r23
    2608:	cb 01       	movw	r24, r22
    260a:	97 f9       	bld	r25, 7
    260c:	08 95       	ret

0000260e <__fp_powser>:
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	1f 93       	push	r17
    2614:	0f 93       	push	r16
    2616:	ff 92       	push	r15
    2618:	ef 92       	push	r14
    261a:	df 92       	push	r13
    261c:	7b 01       	movw	r14, r22
    261e:	8c 01       	movw	r16, r24
    2620:	68 94       	set
    2622:	05 c0       	rjmp	.+10     	; 0x262e <__fp_powser+0x20>
    2624:	da 2e       	mov	r13, r26
    2626:	ef 01       	movw	r28, r30
    2628:	21 d0       	rcall	.+66     	; 0x266c <__mulsf3x>
    262a:	fe 01       	movw	r30, r28
    262c:	e8 94       	clt
    262e:	a5 91       	lpm	r26, Z+
    2630:	25 91       	lpm	r18, Z+
    2632:	35 91       	lpm	r19, Z+
    2634:	45 91       	lpm	r20, Z+
    2636:	55 91       	lpm	r21, Z+
    2638:	ae f3       	brts	.-22     	; 0x2624 <__fp_powser+0x16>
    263a:	ef 01       	movw	r28, r30
    263c:	47 df       	rcall	.-370    	; 0x24cc <__addsf3x>
    263e:	fe 01       	movw	r30, r28
    2640:	97 01       	movw	r18, r14
    2642:	a8 01       	movw	r20, r16
    2644:	da 94       	dec	r13
    2646:	79 f7       	brne	.-34     	; 0x2626 <__fp_powser+0x18>
    2648:	df 90       	pop	r13
    264a:	ef 90       	pop	r14
    264c:	ff 90       	pop	r15
    264e:	0f 91       	pop	r16
    2650:	1f 91       	pop	r17
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret
    2658:	b4 df       	rcall	.-152    	; 0x25c2 <__fp_pscA>
    265a:	28 f0       	brcs	.+10     	; 0x2666 <__fp_powser+0x58>
    265c:	b9 df       	rcall	.-142    	; 0x25d0 <__fp_pscB>
    265e:	18 f0       	brcs	.+6      	; 0x2666 <__fp_powser+0x58>
    2660:	95 23       	and	r25, r21
    2662:	09 f0       	breq	.+2      	; 0x2666 <__fp_powser+0x58>
    2664:	86 cf       	rjmp	.-244    	; 0x2572 <__fp_inf>
    2666:	99 cf       	rjmp	.-206    	; 0x259a <__fp_nan>
    2668:	11 24       	eor	r1, r1
    266a:	cb cf       	rjmp	.-106    	; 0x2602 <__fp_szero>

0000266c <__mulsf3x>:
    266c:	00 df       	rcall	.-512    	; 0x246e <__fp_split3>
    266e:	a0 f3       	brcs	.-24     	; 0x2658 <__fp_powser+0x4a>

00002670 <__mulsf3_pse>:
    2670:	95 9f       	mul	r25, r21
    2672:	d1 f3       	breq	.-12     	; 0x2668 <__fp_powser+0x5a>
    2674:	95 0f       	add	r25, r21
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	55 1f       	adc	r21, r21
    267a:	62 9f       	mul	r22, r18
    267c:	f0 01       	movw	r30, r0
    267e:	72 9f       	mul	r23, r18
    2680:	bb 27       	eor	r27, r27
    2682:	f0 0d       	add	r31, r0
    2684:	b1 1d       	adc	r27, r1
    2686:	63 9f       	mul	r22, r19
    2688:	aa 27       	eor	r26, r26
    268a:	f0 0d       	add	r31, r0
    268c:	b1 1d       	adc	r27, r1
    268e:	aa 1f       	adc	r26, r26
    2690:	64 9f       	mul	r22, r20
    2692:	66 27       	eor	r22, r22
    2694:	b0 0d       	add	r27, r0
    2696:	a1 1d       	adc	r26, r1
    2698:	66 1f       	adc	r22, r22
    269a:	82 9f       	mul	r24, r18
    269c:	22 27       	eor	r18, r18
    269e:	b0 0d       	add	r27, r0
    26a0:	a1 1d       	adc	r26, r1
    26a2:	62 1f       	adc	r22, r18
    26a4:	73 9f       	mul	r23, r19
    26a6:	b0 0d       	add	r27, r0
    26a8:	a1 1d       	adc	r26, r1
    26aa:	62 1f       	adc	r22, r18
    26ac:	83 9f       	mul	r24, r19
    26ae:	a0 0d       	add	r26, r0
    26b0:	61 1d       	adc	r22, r1
    26b2:	22 1f       	adc	r18, r18
    26b4:	74 9f       	mul	r23, r20
    26b6:	33 27       	eor	r19, r19
    26b8:	a0 0d       	add	r26, r0
    26ba:	61 1d       	adc	r22, r1
    26bc:	23 1f       	adc	r18, r19
    26be:	84 9f       	mul	r24, r20
    26c0:	60 0d       	add	r22, r0
    26c2:	21 1d       	adc	r18, r1
    26c4:	82 2f       	mov	r24, r18
    26c6:	76 2f       	mov	r23, r22
    26c8:	6a 2f       	mov	r22, r26
    26ca:	11 24       	eor	r1, r1
    26cc:	9f 57       	subi	r25, 0x7F	; 127
    26ce:	50 40       	sbci	r21, 0x00	; 0
    26d0:	8a f0       	brmi	.+34     	; 0x26f4 <__mulsf3_pse+0x84>
    26d2:	e1 f0       	breq	.+56     	; 0x270c <__mulsf3_pse+0x9c>
    26d4:	88 23       	and	r24, r24
    26d6:	4a f0       	brmi	.+18     	; 0x26ea <__mulsf3_pse+0x7a>
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	bb 1f       	adc	r27, r27
    26de:	66 1f       	adc	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	88 1f       	adc	r24, r24
    26e4:	91 50       	subi	r25, 0x01	; 1
    26e6:	50 40       	sbci	r21, 0x00	; 0
    26e8:	a9 f7       	brne	.-22     	; 0x26d4 <__mulsf3_pse+0x64>
    26ea:	9e 3f       	cpi	r25, 0xFE	; 254
    26ec:	51 05       	cpc	r21, r1
    26ee:	70 f0       	brcs	.+28     	; 0x270c <__mulsf3_pse+0x9c>
    26f0:	40 cf       	rjmp	.-384    	; 0x2572 <__fp_inf>
    26f2:	87 cf       	rjmp	.-242    	; 0x2602 <__fp_szero>
    26f4:	5f 3f       	cpi	r21, 0xFF	; 255
    26f6:	ec f3       	brlt	.-6      	; 0x26f2 <__mulsf3_pse+0x82>
    26f8:	98 3e       	cpi	r25, 0xE8	; 232
    26fa:	dc f3       	brlt	.-10     	; 0x26f2 <__mulsf3_pse+0x82>
    26fc:	86 95       	lsr	r24
    26fe:	77 95       	ror	r23
    2700:	67 95       	ror	r22
    2702:	b7 95       	ror	r27
    2704:	f7 95       	ror	r31
    2706:	e7 95       	ror	r30
    2708:	9f 5f       	subi	r25, 0xFF	; 255
    270a:	c1 f7       	brne	.-16     	; 0x26fc <__mulsf3_pse+0x8c>
    270c:	fe 2b       	or	r31, r30
    270e:	88 0f       	add	r24, r24
    2710:	91 1d       	adc	r25, r1
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	97 f9       	bld	r25, 7
    2718:	08 95       	ret

0000271a <_exit>:
    271a:	f8 94       	cli

0000271c <__stop_program>:
    271c:	ff cf       	rjmp	.-2      	; 0x271c <__stop_program>
